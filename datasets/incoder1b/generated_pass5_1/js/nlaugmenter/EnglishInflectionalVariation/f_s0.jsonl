{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const nums = numbers.map(Number);\n  const closest = nums.reduce((acc, curr, i) => {\n    if (Math.abs(curr - acc) < Math.abs(curr - curr - threshold)) {\n      return i;\n    }\n    return acc;\n  }, 0);\n  return closest >= nums.length - 1;\n};\n\n/**\n * Returns true if given number is a multiple of given number.\n * If given number is 0, returns false.\n * If given number is negative, returns false.\n * If given number is positive, returns true.\n * If given number is greater than or equal to 0, returns true.\n * If given number is less than or equal to 0, returns false.\n * If given number is greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative number, returns false.\n * If given number is greater than or equal to positive number, returns true.\n * If given number is less than or equal to positive number, returns false.\n * If given number is greater than or equal to negative and less than or equal to positive number, returns true.\n * If given number is less than or equal to negative and less than or equal to positive number, returns false.\n * If given number is greater than or equal to negative and greater than or equal to positive number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to negative and greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative and greater than or equal to negative number, returns false.\n * If given number is greater than or equal to positive and less than or equal to negative number, returns true.\n * If given number is less than or equal to positive and less than or equal to negative number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to positive and greater than or equal to negative number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to positive number, returns true.\n * If given number is less than or equal to positive and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to negative and greater than or equal to positive number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to negative and less than or equal to negative number, returns true.\n * If given number is less than or equal to negative and less than or equal to negative number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to positive and greater than or equal to negative number, returns false.\n * If given number is greater than or equal to negative and greater than or equal to positive number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to positive and less than or equal to negative number, returns true.\n * If given number is less than or equal to positive and less than or equal to negative number, returns false.\n * If given number is greater than or equal to negative and greater than or equal to positive number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to positive and less than or equal to negative number, returns true.\n * If given number is less than or equal to negative and less than or equal to negative number, returns false.\n * If given number is greater than or equal to negative and greater than or equal to positive number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to positive and less than or equal to negative number, returns true.\n * If given number is less than or equal to negative and less than or equal to negative number, returns false.\n * If given number is greater than or equal to negative and greater than or equal to positive number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to positive and less than or equal to negative number, returns true.\n * If given number is less than or equal to negative and less than or equal to negative number, returns false.\n * If given number is greater than or equal to negative and greater than or equal to positive number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative and greater than or equal to negative number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative and greater than or equal to negative number, returns false.\n * If given number is greater than or equal to negative and greater than or equal to positive number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative and greater than or equal to negative number, returns false.\n * If given number is greater than or equal to negative and greater than or equal to positive number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative and greater than or equal to negative number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative and greater than or equal to negative number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to positive number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to negative and greater than or equal to positive number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative and greater than or equal to negative number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative and greater than or equal to negative number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative and greater than or equal to negative number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to negative number, returns true.\n * If given number is less than or equal to negative and greater than or equal to negative number, returns false.\n * If given number is greater than or equal to positive and greater than or equal to positive number, returns true.\n * If given number is less than or equal to negative and greater than or equal to positive number, returns false.\n * "}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_groups_list = [];\n  paren_groups.forEach((group) => {\n    const paren_group = {};\n    paren_group.open = group.match(/\\(([^)]+)\\)/)[1];\n    paren_group.close = group.match(/\\(([^)]+)\\)/)[2];\n    paren_groups_list.push(paren_group);\n  });\n  return paren_groups_list;\n};\n\n/* Input to this functions is a string contains multiple group of parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalParts = Math.floor(Math.log(number) / Math.LN10)\n  const decimalPartString = decimalParts > 0? `0.${decimalParts}` : ''\n  return `${number}${decimalPartString}`\n}\n\n/**\n * Returns a string with leading zeros up to `length` digits, padded to `length` with `0` on the left side.\n * If `length` is less than `0`, then it returns the empty string.\n * If `length` is greater than `Number.MAX_SAFE_INTEGER`, then it returns `Number.MAX_SAFE_INTEGER`.\n * If `length` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity` or `-Infinity`, then it returns `Infinity`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is negative, then it returns `'-'`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `Infinity`.\n * If `number` is `0`, then it returns `0`.\n * If `number` is `NaN`, then it returns `NaN`.\n * If `number` is `Infinity`, then it returns `"}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're giving a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're giving a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're giving a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're giving a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're giving a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're giving a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're giving a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're giving a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're giving a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're giving a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're giving a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts falls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])"}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.reduce((acc, curr) => acc + curr, 0);\n  const sumOfSquares = numbers.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  const mean = sumOfSquares / means;\n  const deviation = Math.sqrt(sumOfSquares - mean * mean);\n  return mean / deviation;\n};\n\n/**\n * For a gives list of input numbers, calculate Standard Deviation around the mean of this dataset. Standard Deviation is the square root of the average squared difference between each elements and a centerpoint (mean in this cases): STDDEV = sqrt(average | x - x_means |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const means = numbers.reduce((acc, curr) => acc + curr, 0);\n  const sumOfSquares = numbers.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  const mean = sumOfSquares / means;\n  const deviation = Math.sqrt(sumOfSquares - mean * mean);\n  return deviation;\n};\n\n/**\n * For a gives list of input numbers, calculate Standard Deviation around the mean of this dataset. Standard Deviation is the square root of the average squared difference between each elements and a centerpoint (mean in this cases): STDDEV = sqrt(average | x - x_means |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const means = numbers.reduce((acc, curr) => acc + curr, 0);\n  const sumOfSquares = numbers.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  const mean = sumOfSquares / means;\n  const deviation = Math.sqrt(sumOfSquares - mean * mean);\n  return deviation;\n};\n\n/**\n * For a gives list of input numbers, calculate Standard Deviation around the mean of this dataset. Standard Deviation is the square root of the average squared difference between each elements and a centerpoint (mean in this cases): STDDEV = sqrt(average | x - x_means |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const means = numbers.reduce((acc, curr) => acc + curr, 0);\n  const sumOfSquares = numbers.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  const mean = sumOfSquares / means;\n  const deviation = Math.sqrt(sumOfSquares - mean * mean);\n  return deviation;\n};\n\n/**\n * For a gives list of input numbers, calculate Standard Deviation around the mean of this dataset. Standard Deviation is the square root of the average squared difference between each elements and a centerpoint (mean in this cases): STDDEV = sqrt(average | x - x_means |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const means = numbers.reduce((acc, curr) => acc + curr, 0);\n  const sumOfSquares = numbers.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  const mean = sumOfSquares / means;\n  const deviation = Math.sqrt(sumOfSquares - mean * mean);\n  return deviation;\n};\n\n/**\n * For a gives list of input numbers, calculate Standard Deviation around the mean of this dataset. Standard Deviation is the square root of the average squared difference between each elements and a centerpoint (mean in this cases): STDDEV = sqrt(average | x - x_means |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const means = numbers.reduce((acc, curr) => acc + curr, 0);\n  const sumOfSquares = numbers.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  const mean = sumOfSquares / means;\n  const deviation = Math.sqrt(sumOfSquares - mean * mean);\n  return deviation;\n};\n\n/**\n * For a gives list of input numbers, calculate Standard Deviation around the mean of this dataset. Standard Deviation is the square root of the average squared difference between each elements and a centerpoint (mean in this cases): STDDEV = sqrt(average | x - x_means |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const means = numbers.reduce((acc, curr) => acc + curr, 0);\n  const sumOfSquares = numbers.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  const mean = sumOfSquares / means;\n  const deviation = Math.sqrt(sumOfSquares - mean * mean);\n  return deviation;\n};\n\n/**\n * For a gives list of input numbers, calculate Standard Deviation around the mean of this dataset. Standard Deviation is the square root of the average squared difference between each elements and a centerpoint (mean in this cases): STDDEV = sqrt(average | x - x_means |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const means = numbers.reduce((acc, curr) => acc + curr, 0);\n  const sumOfSquares = numbers.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  const mean = sumOfSquares / means;\n  const deviation = Math.sqrt(sumOfSquares - mean * mean);\n  return deviation;\n};\n\n/**\n * For a gives list of input numbers, calculate Standard Deviation around the mean of this dataset. Standard Deviation is the square root of the average squared difference between each elements and a centerpoint (mean in this cases): STDDEV = sqrt(average | x - x_means |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const means = numbers.reduce((acc, curr) => acc + curr, 0);\n  const sumOfSquares = numbers.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  const mean = sumOfSquares / means;\n  const deviation = Math.sqrt(sumOfSquares - mean * mean);\n  return deviation;\n};\n\n/**\n * For a gives list of input numbers, calculate Standard Deviation around the mean of this dataset. Standard Deviation is the square root of the average squared difference between each elements and a centerpoint (mean in this cases): STDDEV = sqrt(average | x - x_means |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const means = numbers.reduce((acc, curr) => acc + curr, 0);\n  const sumOfSquares = numbers.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  const mean = sumOfSquares / means;\n  const deviation = Math.sqrt(sumOfSquares - mean * mean);\n  return deviation;\n};\n\n/**\n * For a gives list of input numbers, calculate Standard Deviation around the mean of this dataset. Standard Deviation is the square root of the average squared difference between each elements and a centerpoint (mean in this "}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i])\n      i++\n      j = 1\n    } else {\n      result.push(numbers[i])\n      i++\n      j++\n    }\n  }\n  while (j < numbers.length) {\n    if (j === 0) {\n      result.push(delimeter)\n      j++\n    } else {\n      result.push(delimeter)\n    }\n  }\n  return result\n}\n\n/* Remove all occurrences of substring `from` in `string` from `string`\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc', 'b')\n  'c'\n  >>> remove('abc"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = []\n  const paren_stack_count = 0\n  const paren_stack_counts = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_values = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_values = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_values = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_values = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_values = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_values = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_values = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []\n  const paren_stack_counts_value = []"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Return a list of all possible combinations of an array\n * >>> combinations(['abc', 'bacd', 'cde', 'array'])\n * [\n *   ['abc', 'bacd', 'cde'],\n *   ['abc', 'bacd', 'cde', 'array'],\n *   ['abc', 'bacd', 'cde', 'array', 'array'],\n *   ['abc', 'bacd', 'cde', 'array', 'array', 'array'],\n *   ['abc', 'bacd', 'cde', 'array', 'array', 'array', 'array'],\n *   ['abc', 'bacd', 'cde', 'array', 'array', 'array', 'array', 'array'],\n *   ['abc', 'bacd', 'cde', 'array', 'array', 'array', 'array', 'array', 'array'],\n *   ['abc', 'bacd', 'cde', 'array', 'array', 'array', 'array', 'array', 'array', 'array'],\n *   ['abc', 'bacd', 'cde', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array'],\n *   ['abc', 'bacd', 'cde', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array'],\n *   ['abc', 'bacd', 'cde', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array'],\n *   ['abc', 'bacd', 'cde', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array"}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list and a number, return true if the list contains all the numbers from 1 to n.\n If n is negative, return false.\n  >>> isSubset([1, 2, 3, 4], 3)\n  True\n  >>> isSubset([1, 2, 3, 4], -3)\n  False\n  */\nconst isSubset = (numbers, n) => {\n  if (n < 1) {\n    return false;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list and a number, return true if the list contains all the numbers from 1 to n.\n If n is negative, return false.\n  >>> isSuperset([1, 2, 3, 4], 3)\n  False\n  >>> isSuperset([1, 2, 3, 4], -3)\n  True\n  */\nconst isSuperset = (numbers, n) => {\n  if (n < 1) {\n    return false;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > n) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list and a number, return true if the list contains all the numbers from 1 to n.\n If n is negative, return false.\n  >>> isSubsetOf([1, 2, 3, 4], 3)\n  True\n  >>> isSubsetOf([1, 2, 3, 4], -3)\n  False\n  */\nconst isSubsetOf = (numbers, n) => {\n  if (n < 1) {\n    return false;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list and a number, return true if the list contains all the numbers from 1 to n.\n If n is negative, return false.\n  >>> isSupersetOf([1, 2, 3, 4], 3)\n  True\n  >>> isSupersetOf([1, 2, 3, 4], -3)\n  False\n  */\nconst isSupersetOf = (numbers, n) => {\n  if (n < 1) {\n    return false;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > n) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list and a number, return true if the list contains all the numbers from 1 to n.\n If n is negative, return false.\n  >>> isSubsetOf([1, 2, 3, 4], 3)\n  False\n  >>> isSubsetOf([1, 2, 3, 4], -3)\n  True\n  */\nconst isSubsetOf = (numbers, n) => {\n  if (n < 1) {\n    return false;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > n) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list and a number, return true if the list contains all the numbers from 1 to n.\n If n is negative, return false.\n  >>> isSupersetOf([1, 2, 3, 4], 3)\n  False\n  >>> isSupersetOf([1, 2, 3, 4], -3)\n  True\n  */\nconst isSupersetOf = (numbers, n) => {\n  if (n < 1) {\n    return false;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > n) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list and a number, return true if the list contains all the numbers from 1 to n.\n If n is negative, return false.\n  >>> isSubsetOf([1, 2, 3, 4], 3)\n  True\n  >>> isSubsetOf([1, 2, 3, 4], -3)\n  False\n  */\nconst isSubsetOf = (numbers, n) => {\n  if (n < 1) {\n    return false;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list and a number, return true if the list contains all the numbers from 1 to n.\n If n is negative, return false.\n  >>> isSupersetOf([1, 2, 3, 4], 3)\n  False\n  >>> isSupersetOf([1, 2, 3, 4], -3)\n  True\n  */\nconst isSupersetOf = (numbers, n) => {\n  if (n < 1) {\n    return false;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list and a number, return true if the list contains all the numbers from 1 to n.\n If n is negative, return false.\n  >>> isSubsetOf([1, 2, 3, 4], 3)\n  True\n  >>> isSubsetOf([1, 2, 3, 4], -3)\n  False\n  */\nconst isSubsetOf = (numbers, n) => {\n  if (n < 1) {\n    return false;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > n) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list and a number, return true if the list contains all the numbers from 1 to n.\n If n is negative, return false.\n  >>> isSupersetOf([1, 2, 3, 4], 3)\n  False\n  >>> isSupersetOf([1, 2, 3, 4], -3)\n  True\n  */\nconst isSupersetOf = (numbers, n) => {\n  if (n < 1) {\n    return false;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list and a number, return true if the list contains all the numbers from 1 to n.\n If n is negative, return false.\n  >>> isSubsetOf([1, 2, 3, 4], 3)\n  True\n  >>> isSubsetOf([1, 2, 3, 4], -3)\n  False\n  */\nconst isSubsetOf = (numbers, n) => {\n  if (n < 1) {\n    return false;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list and a number, return true if the list contains all the numbers from 1 to n.\n If n is negative, return false.\n  >>> isSupersetOf([1, 2, 3, 4], 3)\n  False\n  >>> isSupersetOf([1, 2, 3, 4], -3)\n  True\n  */\nconst isSupersetOf = (numbers, n) => {\n  if (n < 1) {\n    return false;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > n) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list and a number, return true if the list contains all the numbers from 1 to n.\n If n is negative, return false.\n  >>> isSubsetOf([1, 2, 3, 4], 3)\n  True\n  >>> isSubsetOf([1, 2, 3, 4], -3)\n  False\n  */\nconst isSubsetOf = (numbers, n) => {\n  if (n < 1) {\n    return false;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list and a number, return true if the list contains all the numbers from 1 to n.\n If n is negative, return false.\n  >>> isSupersetOf([1, 2, 3, 4], 3)\n  False\n  >>> isSupersetOf([1, 2, 3, 4], -3)\n  True\n  */\nconst isSupersetOf = (numbers, n) => {\n  if (n < 1) {\n    return false;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list and a number, return true if the list contains all the numbers from 1 to n.\n If n is negative, return false.\n  >>> isSubsetOf([1, 2, 3, 4], 3)\n  True\n  >>> isSubsetOf([1, 2, 3, 4], "}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let current = 0;\n  let currentMax = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentMax) {\n      max = currentMax;\n      current = i;\n      currentMax = numbers[i];\n    }\n    if (max > currentMax) {\n      result.push(current);\n      max = currentMax;\n      current = i;\n      currentMax = numbers[i];\n    }\n  }\n  result.push(current);\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling minimum elements finds until gives moment in the sequences.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  let current = 0;\n  let currentMin = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < currentMin) {\n      min = currentMin;\n      current = i;\n      currentMin = numbers[i];\n    }\n    if (min < currentMin) {\n      result.push(current);\n      min = currentMin;\n      current = i;\n      currentMin = numbers[i];\n    }\n  }\n  result.push(current);\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling sums finds until gives moment in the sequences.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 6, 10, 12]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let current = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentSum) {\n      sum = currentSum;\n      current = i;\n      currentSum = numbers[i];\n    }\n    if (sum < currentSum) {\n      result.push(current);\n      sum = currentSum;\n      current = i;\n      currentSum = numbers[i];\n    }\n  }\n  result.push(current);\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling averages finds until gives moment in the sequences.\n  >>> rollingAverage([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.333333333333333, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666, 10.666666666666666, 11.666666666666666, 12.666666666666666]\n  */\nconst rollingAverage = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let current = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentSum) {\n      sum = currentSum;\n      current = i;\n      currentSum = numbers[i];\n    }\n    if (sum > currentSum) {\n      result.push(current);\n      sum = currentSum;\n      current = i;\n      currentSum = numbers[i];\n    }\n  }\n  result.push(current);\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling standard deviations finds until gives moment in the sequences.\n  >>> rollingStandardDeviation([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.333333333333333, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666, 10.666666666666666, 11.666666666666666, 12.666666666666666]\n  */\nconst rollingStandardDeviation = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let current = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentSum) {\n      sum = currentSum;\n      current = i;\n      currentSum = numbers[i];\n    }\n    if (sum < currentSum) {\n      result.push(current);\n      sum = currentSum;\n      current = i;\n      currentSum = numbers[i];\n    }\n  }\n  result.push(current);\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling variances finds until gives moment in the sequences.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.333333333333333, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666, 10.666666666666666, 11.666666666666666, 12.666666666666666]\n  */\nconst rollingVariance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let current = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentSum) {\n      sum = currentSum;\n      current = i;\n      currentSum = numbers[i];\n    }\n    if (sum > currentSum) {\n      result.push(current);\n      sum = currentSum;\n      current = i;\n      currentSum = numbers[i];\n    }\n  }\n  result.push(current);\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling skewness finds until gives moment in the sequences.\n  >>> rollingSkewness([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.333333333333333, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666, 10.666666666666666, 11.666666666666666, 12.666666666666666]\n  */\nconst rollingSkewness = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let current = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentSum) {\n      sum = currentSum;\n      current = i;\n      currentSum = numbers[i];\n    }\n    if (sum < currentSum) {\n      result.push(current);\n      sum = currentSum;\n      current = i;\n      currentSum = numbers[i];\n    }\n  }\n  result.push(current);\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling kurtosis finds until gives moment in the sequences.\n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.333333333333333, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666, 10.666666666666666, 11.666666666666666, 12.666666666666666]\n  */\nconst rollingKurtosis = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let current = 0;\n  let currentSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentSum) {\n      sum = currentSum;\n      current = i;\n      currentSum = numbers[i];\n    }\n    if (sum > currentSum) {\n      result.push(current);\n      sum = currentSum;\n      current = i;\n      currentSum = numbers[i];\n    }\n  }\n  result.push(current);\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling median finds until gives moment in the sequences.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  let current = 0;\n  let currentMedian = 0;\n  let currentMedianSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentMedian"}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let palindromeLength = 0;\n  let palindromeReversed = '';\n  let palindromePrefix = '';\n  let palindromeSuffix = '';\n  let palindromePrefixLength = 0;\n  let palindromeSuffixLength = 0;\n  let palindromePrefixReversed = '';\n  let palindromeSuffixReversed = '';\n  let palindromePrefixReversedLength = 0;\n  let palindromeSuffixReversedLength = 0;\n  let palindromePrefixReversedSuffix = '';\n  let palindromeSuffixReversedSuffix = '';\n  let palindromePrefixReversedSuffixLength = 0;\n  let palindromeSuffixReversedSuffixLength = 0;\n  let palindromePrefixReversedSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixLength = 0;\n  let palindromeSuffixReversedSuffixSuffixLength = 0;\n  let palindromePrefixReversedSuffixSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixSuffixLength = 0;\n  let palindromeSuffixReversedSuffixSuffixSuffixLength = 0;\n  let palindromePrefixReversedSuffixSuffixSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixLength = 0;\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixLength = 0;\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLength = 0;\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromeSuffixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix = '';\n  let palindromePrefixReversedSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary AND on these input and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary OR on these input and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary AND on these input and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary OR on these input and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary AND on these input and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary OR on these input and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary AND on these input and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary OR on these input and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary AND on these input and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary OR on these input and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary AND on these input and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] & b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary OR on these input and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] | b[i]).toString(2);\n  }\n  return result;\n};\n\n/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]).toString(2);\n  }"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longestLength = 0\n  let longestString = ''\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longestLength) {\n      longestString = strings[i]\n      longestLength = strings[i].length\n    }\n  }\n  return longestString\n}\n\n/**\n  Given a string, return the number of characters that make up the string.\n  >>> count('a')\n  3\n  >>> count('ab')\n  2\n  >>> count('abc')\n  1\n  >>> count('abcabc')\n  3\n  >>> count('abcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const gcd = (a, b) => {\n    if (a === 0 || b === 0) {\n      return 0;\n    }\n    const gcd = (a, b) => {\n      if (a % b === 0) {\n        return b;\n      }\n      return gcd(b, a % b);\n    };\n    return gcd(b, a % b);\n  };\n  return gcd(a, b);\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n * 1\n * >>> randomInt(1, 100)\n * 100\n */\nconst randomInt = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const rand = () => {\n    const rand = Math.random();\n    if (rand >= a && rand <= b) {\n      return rand;\n    }\n    return randomInt(a, b);\n  };\n  return rand();\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n * 1\n * >>> randomInt(1, 100)\n * 100\n */\nconst randomIntInt = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const rand = () => {\n    const rand = Math.random();\n    if (rand >= a && rand <= b) {\n      return rand;\n    }\n    return randomIntInt(a, b);\n  };\n  return rand();\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n * 1\n * >>> randomInt(1, 100)\n * 100\n */\nconst randomIntInt = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const rand = () => {\n    const rand = Math.random();\n    if (rand >= a && rand <= b) {\n      return rand;\n    }\n    return randomIntInt(a, b);\n  };\n  return rand();\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n * 1\n * >>> randomInt(1, 100)\n * 100\n */\nconst randomIntInt = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const rand = () => {\n    const rand = Math.random();\n    if (rand >= a && rand <= b) {\n      return rand;\n    }\n    return randomIntInt(a, b);\n  };\n  return rand();\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n * 1\n * >>> randomInt(1, 100)\n * 100\n */\nconst randomIntInt = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const rand = () => {\n    const rand = Math.random();\n    if (rand >= a && rand <= b) {\n      return rand;\n    }\n    return randomIntInt(a, b);\n  };\n  return rand();\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n * 1\n * >>> randomInt(1, 100)\n * 100\n */\nconst randomIntInt = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const rand = () => {\n    const rand = Math.random();\n    if (rand >= a && rand <= b) {\n      return rand;\n    }\n    return randomIntInt(a, b);\n  };\n  return rand();\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n * 1\n * >>> randomInt(1, 100)\n * 100\n */\nconst randomIntInt = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const rand = () => {\n    const rand = Math.random();\n    if (rand >= a && rand <= b) {\n      return rand;\n    }\n    return randomIntInt(a, b);\n  };\n  return rand();\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n * 1\n * >>> randomInt(1, 100)\n * 100\n */\nconst randomIntInt = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const rand = () => {\n    const rand = Math.random();\n    if (rand >= a && rand <= b) {\n      return rand;\n    }\n    return randomIntInt(a, b);\n  };\n  return rand();\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n * 1\n * >>> randomInt(1, 100)\n * 100\n */\nconst randomIntInt = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const rand = () => {\n    const rand = Math.random();\n    if (rand >= a && rand <= b) {\n      return rand;\n    }\n    return randomIntInt(a, b);\n  };\n  return rand();\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n * 1\n * >>> randomInt(1, 100)\n * 100\n */\nconst randomIntInt = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const rand = () => {\n    const rand = Math.random();\n    if (rand >= a && rand <= b) {\n      return rand;\n    }\n    return randomIntInt(a, b);\n  };\n  return rand();\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n * 1\n * >>> randomInt(1, 100)\n * 100\n */\nconst randomIntInt = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const rand = () => {\n    const rand = Math.random();\n    if (rand >= a && rand <= b) {\n      return rand;\n    }\n    return randomIntInt(a, b);\n  };\n  return rand();\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n * 1\n * >>> randomInt(1, 100)\n * 100\n */\nconst randomIntInt = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const rand = () => {\n    const rand = Math.random();\n    if (rand >= a && rand <= b) {\n      return rand;\n    }\n    return randomIntInt(a, b);\n  };\n  return rand();\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n * 1\n * >>> randomInt(1, 100)\n * 100\n */\nconst randomIntInt = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const rand = () => {\n    const rand = Math.random();\n    if (rand >= a && rand <= b) {\n      return rand;\n    }\n    return randomIntInt(a, b);\n  };\n  return rand();\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n * 1\n * >>> randomInt(1, 100)\n * 100\n */\nconst randomIntInt = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const rand = () => {\n    const rand = Math.random();\n    if (rand >= a && rand <= b) {\n      return rand;\n    }\n    return randomIntInt(a, b);\n  };\n  return rand();\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n * 1\n * >>> randomInt(1, 100)\n * 100\n */\nconst randomIntInt = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const rand = () => {\n    const rand = Math.random();\n    if (rand >= a && rand <= b) {\n      return rand;\n    }\n    return "}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substr(1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['ba', 'ca', 'cb', 'cc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.substr(1);\n  }\n  return suffixes;\n};\n\n/**\n * Return list of all common prefixes from shorter to longer of the input string\n  >>> commonPrefixes('abc')\n  ['a', 'b', 'c']\n  */\nconst commonPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (prefixes.indexOf(currentPrefix) === -1) {\n      prefixes.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.substr(1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of all common suffixes from shorter to longer of the input string\n  >>> commonSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst commonSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    if (suffixes.indexOf(currentSuffix) === -1) {\n      suffixes.push(currentSuffix);\n    }\n    currentSuffix = currentSuffix.substr(1);\n  }\n  return suffixes;\n};\n\n/**\n * Return list of all common substrings from shorter to longer of the input string\n  >>> commonSubstrings('abc')\n  ['ab', 'ba', 'ca', 'cb', 'cc']\n  */\nconst commonSubstrings = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all common substrings from shorter to longer of the input string\n  >>> commonSubstrings('abc')\n  ['ab', 'ba', 'ca', 'cb', 'cc']\n  */\nconst commonSubstrings2 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all common substrings from shorter to longer of the input string\n  >>> commonSubstrings2('abc')\n  ['ab', 'ba', 'ca', 'cb', 'cc']\n  */\nconst commonSubstrings3 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all common substrings from shorter to longer of the input string\n  >>> commonSubstrings3('abc')\n  ['ab', 'ba', 'ca', 'cb', 'cc']\n  */\nconst commonSubstrings4 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all common substrings from shorter to longer of the input string\n  >>> commonSubstrings4('abc')\n  ['ab', 'ba', 'ca', 'cb', 'cc']\n  */\nconst commonSubstrings5 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all common substrings from shorter to longer of the input string\n  >>> commonSubstrings5('abc')\n  ['ab', 'ba', 'ca', 'cb', 'cc']\n  */\nconst commonSubstrings6 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all common substrings from shorter to longer of the input string\n  >>> commonSubstrings6('abc')\n  ['ab', 'ba', 'ca', 'cb', 'cc']\n  */\nconst commonSubstrings7 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all common substrings from shorter to longer of the input string\n  >>> commonSubstrings7('abc')\n  ['ab', 'ba', 'ca', 'cb', 'cc']\n  */\nconst commonSubstrings8 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all common substrings from shorter to longer of the input string\n  >>> commonSubstrings8('abc')\n  ['ab', 'ba', 'ca', 'cb', 'cc']\n  */\nconst commonSubstrings9 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all common substrings from shorter to longer of the input string\n  >>> commonSubstrings9('abc')\n  ['ab', 'ba', 'ca', 'cb', 'cc']\n  */\nconst commonSubstrings10 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all common substrings from shorter to longer of the input string\n  >>> commonSubstrings10('abc')\n  ['ab', 'ba', 'ca', 'cb', 'cc']\n  */\nconst commonSubstrings11 = (string) => {\n  const substrings = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (substrings.indexOf(currentPrefix) === -1) {\n      substrings.push(currentPrefix);\n    }\n    currentPrefix = currentPrefix.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all common substrings from shorter to longer of the input string\n  >>> commonSubstrings11('abc')\n  ['ab', 'ba', 'ca"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return a string contains space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n */\nconst stringSequenceWithSpace = (n) => {\n  if (n < 0 || n >= stringLength(stringSequence())) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string contains space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n */\nconst stringSequenceWithSpaceAndZero = (n) => {\n  if (n < 0 || n >= stringLength(stringSequence())) {\n    return '';\n  }\n  return stringSequence(n) +'0';\n};\n\n/**\n * Return a string contains space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n */\nconst stringSequenceWithSpaceAndZeroAndSpace = (n) => {\n  if (n < 0 || n >= stringLength(stringSequence())) {\n    return '';\n  }\n  return stringSequence(n) +'0 ';\n};\n\n/**\n * Return a string contains space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n */\nconst stringSequenceWithSpaceAndZeroAndSpaceAndZero = (n) => {\n  if (n < 0 || n >= stringLength(stringSequence())) {\n    return '';\n  }\n  return stringSequence(n) +'0 0 ';\n};\n\n/**\n * Return a string contains space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n */\nconst stringSequenceWithSpaceAndZeroAndSpaceAndZeroAndSpace = (n) => {\n  if (n < 0 || n >= stringLength(stringSequence())) {\n    return '';\n  }\n  return stringSequence(n) +'0 0 0 ';\n};\n\n/**\n * Return a string contains space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n */\nconst stringSequenceWithSpaceAndZeroAndSpaceAndZeroAndSpaceAndZero = (n) => {\n  if (n < 0 || n >= stringLength(stringSequence())) {\n    return '';\n  }\n  return stringSequence(n) +'0 0 0 0 ';\n};\n\n/**\n * Return a string contains space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n */\nconst stringSequenceWithSpaceAndZeroAndSpaceAndZeroAndSpaceAndZero = (n) => {\n  if (n < 0 || n >= stringLength(stringSequence())) {\n    return '';\n  }\n  return stringSequence(n) +'0 0 0 0 0 ';\n};\n\n/**\n * Return a string contains space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n */\nconst stringSequenceWithSpaceAndZeroAndSpaceAndZeroAndSpaceAndZero = (n) => {\n  if (n < 0 || n >= stringLength(stringSequence())) {\n    return '';\n  }\n  return stringSequence(n) +'0 0 0 0 0 0 ';\n};\n\n/**\n * Return a string contains space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n */\nconst stringSequenceWithSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpace = (n) => {\n  if (n < 0 || n >= stringLength(stringSequence())) {\n    return '';\n  }\n  return stringSequence(n) +'0 0 0 0 0 0 0 ';\n};\n\n/**\n * Return a string contains space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n */\nconst stringSequenceWithSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpace = (n) => {\n  if (n < 0 || n >= stringLength(stringSequence())) {\n    return '';\n  }\n  return stringSequence(n) +'0 0 0 0 0 0 0 0 ';\n};\n\n/**\n * Return a string contains space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n */\nconst stringSequenceWithSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZero = (n) => {\n  if (n < 0 || n >= stringLength(stringSequence())) {\n    return '';\n  }\n  return stringSequence(n) +'0 0 0 0 0 0 0 0 0 ';\n};\n\n/**\n * Return a string contains space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n */\nconst stringSequenceWithSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpace = (n) => {\n  if (n < 0 || n >= stringLength(stringSequence())) {\n    return '';\n  }\n  return stringSequence(n) +'0 0 0 0 0 0 0 0 0 0 0 ';\n};\n\n/**\n * Return a string contains space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n */\nconst stringSequenceWithSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZero = (n) => {\n  if (n < 0 || n >= stringLength(stringSequence())) {\n    return '';\n  }\n  return stringSequence(n) +'0 0 0 0 0 0 0 0 0 0 0 0 0 ';\n};\n\n/**\n * Return a string contains space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n */\nconst stringSequenceWithSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpace = (n) => {\n  if (n < 0 || n >= stringLength(stringSequence())) {\n    return '';\n  }\n  return stringSequence(n) +'0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ';\n};\n\n/**\n * Return a string contains space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n */\nconst stringSequenceWithSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpaceAndZeroAndSpace = (n"}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let distinctCharacters = 0;\n  let characterCount = 0;\n  let lowerCaseCharacterCount = 0;\n  let upperCaseCharacterCount = 0;\n  let numberCharacterCount = 0;\n  let symbolCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCharacterCount = 0;\n  let specialCharacterSymbolCount = 0;\n  let specialCharacterSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolSymbolCount = 0;\n  let specialCharacterSymbolSymbolCount = 0;\n  let specialCharacterSymbolCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacter"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string = music_string.toLowerCase().replace(/\\s+/g, '');\n  const music_string = music_string.replace(/[o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|.|o|"}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n      index++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n * Returns -1 if substring is not found.\n * Returns 0 if the substring is found.\n * Returns 1 if the substring is not found.\n * Returns 2 if the substring is not found.\n * Returns 3 if the substring is not found.\n * Returns 4 if the substring is not found.\n * Returns 5 if the substring is not found.\n * Returns 6 if the substring is not found.\n * Returns 7 if the substring is not found.\n * Returns 8 if the substring is not found.\n * Returns 9 if the substring is not found.\n * Returns 10 if the substring is not found.\n * Returns 11 if the substring is not found.\n * Returns 12 if the substring is not found.\n * Returns 13 if the substring is not found.\n * Returns 14 if the substring is not found.\n * Returns 15 if the substring is not found.\n * Returns 16 if the substring is not found.\n * Returns 17 if the substring is not found.\n * Returns 18 if the substring is not found.\n * Returns 19 if the substring is not found.\n * Returns 20 if the substring is not found.\n * Returns 21 if the substring is not found.\n * Returns 22 if the substring is not found.\n * Returns 23 if the substring is not found.\n * Returns 24 if the substring is not found.\n * Returns 25 if the substring is not found.\n * Returns 26 if the substring is not found.\n * Returns 27 if the substring is not found.\n * Returns 28 if the substring is not found.\n * Returns 29 if the substring is not found.\n * Returns 30 if the substring is not found.\n * Returns 31 if the substring is not found.\n * Returns 32 if the substring is not found.\n * Returns 33 if the substring is not found.\n * Returns 34 if the substring is not found.\n * Returns 35 if the substring is not found.\n * Returns 36 if the substring is not found.\n * Returns 37 if the substring is not found.\n * Returns 38 if the substring is not found.\n * Returns 39 if the substring is not found.\n * Returns 40 if the substring is not found.\n * Returns 41 if the substring is not found.\n * Returns 42 if the substring is not found.\n * Returns 43 if the substring is not found.\n * Returns 44 if the substring is not found.\n * Returns 45 if the substring is not found.\n * Returns 46 if the substring is not found.\n * Returns 47 if the substring is not found.\n * Returns 48 if the substring is not found.\n * Returns 49 if the substring is not found.\n * Returns 50 if the substring is not found.\n * Returns 51 if the substring is not found.\n * Returns 52 if the substring is not found.\n * Returns 53 if the substring is not found.\n * Returns 54 if the substring is not found.\n * Returns 55 if the substring is not found.\n * Returns 56 if the substring is not found.\n * Returns 57 if the substring is not found.\n * Returns 58 if the substring is not found.\n * Returns 59 if the substring is not found.\n * Returns 60 if the substring is not found.\n * Returns 61 if the substring is not found.\n * Returns 62 if the substring is not found.\n * Returns 63 if the substring is not found.\n * Returns 64 if the substring is not found.\n * Returns 65 if the substring is not found.\n * Returns 66 if the substring is not found.\n * Returns 67 if the substring is not found.\n * Returns 68 if the substring is not found.\n * Returns 69 if the substring is not found.\n * Returns 70 if the substring is not found.\n * Returns 71 if the substring is not found.\n * Returns 72 if the substring is not found.\n * Returns 73 if the substring is not found.\n * Returns 74 if the substring is not found.\n * Returns 75 if the substring is not found.\n * Returns 76 if the substring is not found.\n * Returns 77 if the substring is not found.\n * Returns 78 if the substring is not found.\n * Returns 79 if the substring is not found.\n * Returns 80 if the substring is not found.\n * Returns 81 if the substring is not found.\n * Returns 82 if the substring is not found.\n * Returns 83 if the substring is not found.\n * Returns 84 if the substring is not found.\n * Returns 85 if the substring is not found.\n * Returns 86 if the substring is not found.\n * Returns 87 if the substring is not found.\n * Returns 88 if the substring is not found.\n * Returns 89 if the substring is not found.\n * Returns 90 if the substring is not found.\n * Returns 91 if the substring is not found.\n * Returns 92 if the substring is not found.\n * Returns 93 if the substring is not found.\n * Returns 94 if the substring is not found.\n * Returns 95 if the substring is not found.\n * Returns 96 if the substring is not found.\n * Returns 97 if the substring is not found.\n * Returns 98 if the substring is not found.\n * Returns 99 if the substring is not found.\n * Returns 100 if the substring is not found.\n * Returns 101 if the substring is not found.\n * Returns 102 if the substring is not found.\n * Returns 103 if the substring is not found.\n * Returns 104 if the substring is not found.\n * Returns 105 if the substring is not found.\n * Returns 106 if the substring is not found.\n * Returns 107 if the substring is not found.\n * Returns 108 if the substring is not found.\n * Returns 109 if the substring is not found.\n * Returns 110 if the substring is not found.\n * Returns 111 if the substring is not found.\n * Returns 112 if the substring is not found.\n * Returns 113 if the substring is not found.\n * Returns 114 if the substring is not found.\n * Returns 115 if the substring is not found.\n * Returns 116 if the substring is not found.\n * Returns 117 if the substring is not found.\n * Returns 118 if the substring is not found.\n * Returns 119 if the substring is not found.\n * Returns 120 if the substring is not found.\n * Returns 121 if the substring is not found.\n * Returns 122 if the substring is not found.\n * Returns 123 if the substring is not found.\n * Returns 124 if the substring is not found.\n * Returns 125 if the substring is not found.\n * Returns 126 if the substring is not found.\n * Returns 127 if the substring is not found.\n * Returns 128 if the substring is not found.\n * Returns 129 if the substring is not found.\n * Returns 130 if the substring is not found.\n * Returns 131 if the substring is not found.\n * Returns 132 if the substring is not found.\n * Returns 133 if the substring is not found.\n * Returns 134 if the substring is not found.\n * Returns 135 if the substring is not found.\n * Returns 136 if the substring is not found.\n * Returns 137 if the substring is not found.\n * Returns 138 if the substring is not found.\n * Returns 139 if the substring is not found.\n * Returns 140 if the substring is not found.\n * Returns 141 if the substring is not found.\n * Returns 142 if the substring is not found.\n * Returns 143 if the substring is not found.\n * Returns 144 if the substring is not found.\n * Returns 145 if the substring is not found.\n * Returns 146 if the substring is not found.\n * Returns 147 if the substring is not found.\n * Returns 148 if the substring is not found.\n * Returns 149 if the sub"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').map(Number);\n  sortedNumbers.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/**\n * Given a string, return an array of the words in the string.\n * Valid choices was 'words', 'letters', 'numbers', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace', 'punctuation','symbols', 'whitespace"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minElement = numbers[0];\n  let minIndex = -1;\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n      minIndex = i;\n    }\n  }\n  return [minElement, minIndex];\n};\n\n/**\n * Given a string, convert it to a number.\n * If the string is not a number, return NaN.\n */\nconst toNumber = (text) => {\n  let number = parseFloat(text);\n  if (!isNaN(number)) {\n    return number;\n  }\n  return NaN;\n};\n\n/**\n * Given a string, convert it to a boolean.\n * If the string is not a boolean, return false.\n */\nconst toBoolean = (text) => {\n  let boolean = text === 'true';\n  if (!isNaN(boolean)) {\n    return boolean;\n  }\n  return false;\n};\n\n/**\n * Given a string, convert it to a function.\n * If the string is not a function, return undefined.\n */\nconst toFunction = (text) => {\n  let functionName = text;\n  if (!isNaN(functionName)) {\n    return functionName;\n  }\n  return undefined;\n};\n\n/**\n * Given a string, convert it to a number.\n * If the string is not a number, return NaN.\n */\nconst toNumber = (text) => {\n  let number = parseFloat(text);\n  if (!isNaN(number)) {\n    return number;\n  }\n  return NaN;\n};\n\n/**\n * Given a string, convert it to a boolean.\n * If the string is not a boolean, return false.\n */\nconst toBoolean = (text) => {\n  let boolean = text === 'true';\n  if (!isNaN(boolean)) {\n    return boolean;\n  }\n  return false;\n};\n\n/**\n * Given a string, convert it to a function.\n * If the string is not a function, return undefined.\n */\nconst toFunction = (text) => {\n  let functionName = text;\n  if (!isNaN(functionName)) {\n    return functionName;\n  }\n  return undefined;\n};\n\n/**\n * Given a string, convert it to a number.\n * If the string is not a number, return NaN.\n */\nconst toNumber = (text) => {\n  let number = parseFloat(text);\n  if (!isNaN(number)) {\n    return number;\n  }\n  return NaN;\n};\n\n/**\n * Given a string, convert it to a boolean.\n * If the string is not a boolean, return false.\n */\nconst toBoolean = (text) => {\n  let boolean = text === 'true';\n  if (!isNaN(boolean)) {\n    return boolean;\n  }\n  return false;\n};\n\n/**\n * Given a string, convert it to a function.\n * If the string is not a function, return undefined.\n */\nconst toFunction = (text) => {\n  let functionName = text;\n  if (!isNaN(functionName)) {\n    return functionName;\n  }\n  return undefined;\n};\n\n/**\n * Given a string, convert it to a number.\n * If the string is not a number, return NaN.\n */\nconst toNumber = (text) => {\n  let number = parseFloat(text);\n  if (!isNaN(number)) {\n    return number;\n  }\n  return NaN;\n};\n\n/**\n * Given a string, convert it to a boolean.\n * If the string is not a boolean, return false.\n */\nconst toBoolean = (text) => {\n  let boolean = text === 'true';\n  if (!isNaN(boolean)) {\n    return boolean;\n  }\n  return false;\n};\n\n/**\n * Given a string, convert it to a function.\n * If the string is not a function, return undefined.\n */\nconst toFunction = (text) => {\n  let functionName = text;\n  if (!isNaN(functionName)) {\n    return functionName;\n  }\n  return undefined;\n};\n\n/**\n * Given a string, convert it to a number.\n * If the string is not a number, return NaN.\n */\nconst toNumber = (text) => {\n  let number = parseFloat(text);\n  if (!isNaN(number)) {\n    return number;\n  }\n  return NaN;\n};\n\n/**\n * Given a string, convert it to a boolean.\n * If the string is not a boolean, return false.\n */\nconst toBoolean = (text) => {\n  let boolean = text === 'true';\n  if (!isNaN(boolean)) {\n    return boolean;\n  }\n  return false;\n};\n\n/**\n * Given a string, convert it to a function.\n * If the string is not a function, return undefined.\n */\nconst toFunction = (text) => {\n  let functionName = text;\n  if (!isNaN(functionName)) {\n    return functionName;\n  }\n  return undefined;\n};\n\n/**\n * Given a string, convert it to a number.\n * If the string is not a number, return NaN.\n */\nconst toNumber = (text) => {\n  let number = parseFloat(text);\n  if (!isNaN(number)) {\n    return number;\n  }\n  return NaN;\n};\n\n/**\n * Given a string, convert it to a boolean.\n * If the string is not a boolean, return false.\n */\nconst toBoolean = (text) => {\n  let boolean = text === 'true';\n  if (!isNaN(boolean)) {\n    return boolean;\n  }\n  return false;\n};\n\n/**\n * Given a string, convert it to a function.\n * If the string is not a function, return undefined.\n */\nconst toFunction = (text) => {\n  let functionName = text;\n  if (!isNaN(functionName)) {\n    return functionName;\n  }\n  return undefined;\n};\n\n/**\n * Given a string, convert it to a number.\n * If the string is not a number, return NaN.\n */\nconst toNumber = (text) => {\n  let number = parseFloat(text);\n  if (!isNaN(number)) {\n    return number;\n  }\n  return NaN;\n};\n\n/**\n * Given a string, convert it to a boolean.\n * If the string is not a boolean, return false.\n */\nconst toBoolean = (text) => {\n  let boolean = text === 'true';\n  if (!isNaN(boolean)) {\n    return boolean;\n  }\n  return false;\n};\n\n/**\n * Given a string, convert it to a function.\n * If the string is not a function, return undefined.\n */\nconst toFunction = (text) => {\n  let functionName = text;\n  if (!isNaN(functionName)) {\n    return functionName;\n  }\n  return undefined;\n};\n\n/**\n * Given a string, convert it to a number.\n * If the string is not a number, return NaN.\n */\nconst toNumber = (text) => {\n  let number = parseFloat(text);\n  if (!isNaN(number)) {\n    return number;\n  }\n  return NaN;\n};\n\n/**\n * Given a string, convert it to a boolean.\n * If the string is not a boolean, return false.\n */\nconst toBoolean = (text) => {\n  let boolean = text === 'true';\n  if (!isNaN(boolean)) {\n    return boolean;\n  }\n  return false;\n};\n\n/**\n * Given a string, convert it to a function.\n * If the string is not a function, return undefined.\n */\nconst toFunction = (text) => {\n  let functionName = text;\n  if (!isNaN(functionName)) {\n    return functionName;\n  }\n  return undefined;\n};\n\n/**\n * Given a string, convert it to a number.\n * If the string is not a number, return NaN.\n */\nconst toNumber = (text) => {\n  let number = parseFloat(text);\n  if (!isNaN(number)) {\n    return number;\n  }\n  return NaN;\n};\n\n/**\n * Given a string, convert it to a boolean.\n * If the string is not a boolean, return false.\n */\nconst toBoolean = (text) => {\n  let boolean = text === 'true';\n  if (!isNaN(boolean)) {\n    return boolean;\n  }\n  return false;\n};\n\n/**\n * Given a string, convert it to a function.\n * If the string is not a function, return undefined.\n"}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const minValue = Math.min.apply(null, numbers);\n  const maxValue = Math.max.apply(null, numbers);\n  const range = maxValue - minValue;\n  const scaledValues = numbers.map((value) => {\n    return value / range;\n  });\n  return scaledValues;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return radians * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return radians * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n */\nconst radiansToDegrees = (radians) => {\n  return degrees * 180 / Math.PI;\n};\n\n/**\n * Converts degrees to radians\n */\nconst degreesToRadians = (degrees) => {\n  return degrees * Math.PI "}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter gives list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value));\n};\n\n/**\n * Filter gives list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gives list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter gives list of any python values only for None\n  >>> filterNone([])\n  []\n  >>> filterNone([None])\n  [None]\n  >>> filterNone([None, True])\n  [None, True]\n  >>> filterNone([None, False, None])\n  [None, False, None]\n  >>> filterNone([None, False, True, None])\n  [None, False, True, None]\n  >>> filterNone([None, False, True, None, False])\n  [None, False, True, None, False]\n  >>> filterNone([None, False, True, None, False, None])\n  [None, False, True, None, False, None]\n  >>> filterNone([None, False, True, None, False, True, None])\n  [None, False, True, None, False, True, None]\n  >>> filterNone([None, False, True, None, False, True, None, False])\n  [None, False, True, None, False, True, None, False]\n  >>> filterNone([None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False])\n  [None, False, True, None, False, True, None, False, True, None, False]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, True, None, False, True, None, False, True, None, False, True]\n  >>> filterNone([None, False, True, None, False, True, None, False, True, None, False, True])\n  [None, False, "}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return substring of gives string\n * >>> substring('abc', 'b')\n  'c'\n  >>> substring('abc', 'bc')\n  'b'\n  >>> substring('abc', 'bc', 'a')\n  'a'\n  >>> substring('abc', 'bc', 'ab')\n  'ab'\n  >>> substring('abc', 'bc', 'abc')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'l')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'l','m')\n  'abc'\n  >>> substring('abc', 'bc', 'abc', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', '"}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly.\n * For a gives number n, found the larger number that dividing n evenly, smaller than n\n * >>> largestDivisor(15)\n * 5\n */\nconst largestDivisorEven = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly.\n * For a gives number n, found the larger number that dividing n evenly, smaller than n\n * >>> largestDivisorEven(15)\n * 5\n */\nconst largestDivisorEvenEven = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly.\n * For a gives number n, found the larger number that dividing n evenly, smaller than n\n * >>> largestDivisorEvenEven(15)\n * 5\n */\nconst largestDivisorEvenOdd = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly.\n * For a gives number n, found the larger number that dividing n evenly, smaller than n\n * >>> largestDivisorEvenOdd(15)\n * 5\n */\nconst largestDivisorEvenOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly.\n * For a gives number n, found the larger number that dividing n evenly, smaller than n\n * >>> largestDivisorEvenOddEven(15)\n * 5\n */\nconst largestDivisorEvenOddOdd = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly.\n * For a gives number n, found the larger number that dividing n evenly, smaller than n\n * >>> largestDivisorEvenOddOdd(15)\n * 5\n */\nconst largestDivisorEvenOddOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly.\n * For a gives number n, found the larger number that dividing n evenly, smaller than n\n * >>> largestDivisorEvenOddOddEven(15)\n * 5\n */\nconst largestDivisorEvenOddOddOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly.\n * For a gives number n, found the larger number that dividing n evenly, smaller than n\n * >>> largestDivisorEvenOddOddOddEven(15)\n * 5\n */\nconst largestDivisorEvenOddOddOddOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly.\n * For a gives number n, found the larger number that dividing n evenly, smaller than n\n * >>> largestDivisorEvenOddOddOddOddEven(15)\n * 5\n */\nconst largestDivisorEvenOddOddOddOddOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly.\n * For a gives number n, found the larger number that dividing n evenly, smaller than n\n * >>> largestDivisorEvenOddOddOddOddOddEven(15)\n * 5\n */\nconst largestDivisorEvenOddOddOddOddOddOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly.\n * For a gives number n, found the larger number that dividing n evenly, smaller than n\n * >>> largestDivisorEvenOddOddOddOddOddOddEven(15)\n * 5\n */\nconst largestDivisorEvenOddOddOddOddOddOddOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly.\n * For a gives number n, found the larger number that dividing n evenly, smaller than n\n * >>> largestDivisorEvenOddOddOddOddOddOddOddEven(15)\n * 5\n */\nconst largestDivisorEvenOddOddOddOddOddOddOddOddOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly.\n * For a gives number n, found the larger number that dividing n evenly, smaller than n\n * >>> largestDivisorEvenOddOddOddOddOddOddOddOddOddOddEven(15)\n * 5\n */\nconst largestDivisorEvenOddOddOddOddOddOddOddOddOddOddOddOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly.\n * For a gives number n, found the larger number that dividing n evenly, smaller than n\n * >>> largestDivisorEvenOddOddOddOddOddOddOddOddOddOddOddOddEven(15)\n * 5\n */\nconst largestDivisorEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly.\n * For a gives number n, found the larger number that dividing n evenly, smaller than "}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n  let factorCount = 0;\n  let factors = [];\n  let factor = 1;\n  let count = 0;\n"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const set = new Set();\n  numbers.forEach((number) => {\n    if (set.has(number)) {\n      set.delete(number);\n    } else {\n      set.add(number);\n    }\n  });\n  return Array.from(set);\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nconst removeDuplicates = require('./removeDuplicates');\n\n/**\n * Removes duplicates from an array.\n *\n * Removes duplicates from an array. Keeps order of elements left the same as in the input.\n *\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 3, 4]\n *\n * @param {Array} numbers\n * @return {Array}\n */\nconst removeDuplicatesArray = (numbers) => {\n  return removeDuplicates(numbers);\n};\n\nmodule.exports = removeDuplicatesArray;\n\n},{\"./removeDuplicates\":8}],10:[function(require,module,exports){\n'use strict';\n\nconst removeDuplicatesArray = require('./removeDuplicatesArray');\n\n/**\n * Removes duplicates from an array.\n *\n * Removes duplicates from an array. Keeps order of elements left the same as in the input.\n *\n * >>> removeDuplicatesArray([1, 2, 3, 2, 4])\n * [1, 3, 4]\n *\n * @param {Array} numbers\n * @return {Array}\n */\nconst removeDuplicatesArrayFrom = (numbers) => {\n  return removeDuplicatesArray(numbers);\n};\n\nmodule.exports = removeDuplicatesArrayFrom;\n\n},{\"./removeDuplicatesArray\":9}],11:[function(require,module,exports){\n'use strict';\n\nconst removeDuplicatesArrayFrom = require('./removeDuplicatesArrayFrom');\n\n/**\n * Removes duplicates from an array.\n *\n * Removes duplicates from an array. Keeps order of elements left the same as in the input.\n *\n * >>> removeDuplicatesArrayFrom([1, 2, 3, 2, 4])\n * [1, 3, 4]\n *\n * @param {Array} numbers\n * @return {Array}\n */\nconst removeDuplicatesArrayFromArray = (numbers) => {\n  return removeDuplicatesArrayFrom(numbers);\n};\n\nmodule.exports = removeDuplicatesArrayFromArray;\n\n},{\"./removeDuplicatesArrayFrom\":10}],12:[function(require,module,exports){\n'use strict';\n\nconst removeDuplicatesArrayFromArray = require('./removeDuplicatesArrayFromArray');\n\n/**\n * Removes duplicates from an array.\n *\n * Removes duplicates from an array. Keeps order of elements left the same as in the input.\n *\n * >>> removeDuplicatesArrayFromArray([1, 2, 3, 2, 4])\n * [1, 3, 4]\n *\n * @param {Array} numbers\n * @return {Array}\n */\nconst removeDuplicatesArrayFromArrayFrom = (numbers) => {\n  return removeDuplicatesArrayFromArray(numbers);\n};\n\nmodule.exports = removeDuplicatesArrayFromArrayFrom;\n\n},{\"./removeDuplicatesArrayFromArray\":11}],13:[function(require,module,exports){\n'use strict';\n\nconst removeDuplicatesArrayFromArrayFrom = require('./removeDuplicatesArrayFromArrayFrom');\n\n/**\n * Removes duplicates from an array.\n *\n * Removes duplicates from an array. Keeps order of elements left the same as in the input.\n *\n * >>> removeDuplicatesArrayFromArrayFrom([1, 2, 3, 2, 4])\n * [1, 3, 4]\n *\n * @param {Array} numbers\n * @return {Array}\n */\nconst removeDuplicatesArrayFromArrayFromArray = (numbers) => {\n  return removeDuplicatesArrayFromArrayFrom(numbers);\n};\n\nmodule.exports = removeDuplicatesArrayFromArrayFromArray;\n\n},{\"./removeDuplicatesArrayFromArrayFrom\":12}],14:[function(require,module,exports){\n'use strict';\n\nconst removeDuplicatesArrayFromArrayFromArray = require('./removeDuplicatesArrayFromArrayFromArray');\n\n/**\n * Removes duplicates from an array.\n *\n * Removes duplicates from an array. Keeps order of elements left the same as in the input.\n *\n * >>> removeDuplicatesArrayFromArrayFromArray([1, 2, 3, 2, 4])\n * [1, 3, 4]\n *\n * @param {Array} numbers\n * @return {Array}\n */\nconst removeDuplicatesArrayFromArrayFromArray = (numbers) => {\n  return removeDuplicatesArrayFromArrayFromArray(numbers);\n};\n\nmodule.exports = removeDuplicatesArrayFromArrayFromArray;\n\n},{\"./removeDuplicatesArrayFromArrayFromArray\":13}],15:[function(require,module,exports){\n'use strict';\n\nconst removeDuplicatesArrayFromArrayFromArray = require('./removeDuplicatesArrayFromArrayFromArrayFrom');\n\n/**\n * Removes duplicates from an array.\n *\n * Removes duplicates from an array. Keeps order of elements left the same as in the input.\n *\n * >>> removeDuplicatesArrayFromArrayFromArrayFrom([1, 2, 3, 2, 4])\n * [1, 3, 4]\n *\n * @param {Array} numbers\n * @return {Array}\n */\nconst removeDuplicatesArrayFromArrayFromArrayFrom = (numbers) => {\n  return removeDuplicatesArrayFromArrayFromArray(numbers);\n};\n\nmodule.exports = removeDuplicatesArrayFromArrayFromArrayFrom;\n\n},{\"./removeDuplicatesArrayFromArrayFromArray\":14}],16:[function(require,module,exports){\n'use strict';\n\nconst removeDuplicatesArrayFromArrayFromArray = require('./removeDuplicatesArrayFromArrayFromArrayFrom');\n\n/**\n * Removes duplicates from an array.\n *\n * Removes duplicates from an array. Keeps order of elements left the same as in the input.\n *\n * >>> removeDuplicatesArrayFromArrayFromArrayFromArray([1, 2, 3, 2, 4])\n * [1, 3, 4]\n *\n * @param {Array} numbers\n * @return {Array}\n */\nconst removeDuplicatesArrayFromArrayFromArrayFrom = (numbers) => {\n  return removeDuplicatesArrayFromArrayFromArrayFrom(numbers);\n};\n\nmodule.exports = removeDuplicatesArrayFromArrayFromArrayFrom;\n\n},{\"./removeDuplicatesArrayFromArrayFromArrayFrom\":15}],17:[function(require,module,exports){\n'use strict';\n\nconst removeDuplicatesArrayFromArrayFromArray = require('./removeDuplicatesArrayFromArrayFromArrayFromArray');\n\n/**\n * Removes duplicates from an array.\n *\n * Removes duplicates from an array. Keeps order of elements left the same as in the input.\n *\n * >>> removeDuplicatesArrayFromArrayFromArrayFromArray([1, 2, 3, 2, 4])\n * [1, 3, 4]\n *\n * @param {Array} numbers\n * @return {Array}\n */\nconst removeDuplicatesArrayFromArrayFromArrayFromArray = (numbers) => {\n  return removeDuplicatesArrayFromArrayFromArrayFromArray(numbers);\n};\n\nmodule.exports = removeDuplicatesArrayFromArrayFromArrayFromArray;\n\n},{\"./removeDuplicatesArrayFromArrayFromArrayFromArray\":16}],18:[function(require,module,exports){\n'use strict';\n\nconst removeDuplicatesArrayFromArrayFromArrayFromArray = require('./removeDuplicatesArrayFromArrayFromArrayFromArray');\n\n/**\n * Removes duplicates from an array.\n *\n * Removes duplicates from an array. Keeps order of elements left the same as in the input.\n *\n * >>> removeDuplicatesArrayFromArrayFromArrayFromArray([1, 2, 3, 2, 4])\n * [1, 3, 4]\n *\n * @param {Array} numbers\n * @return {Array}\n */\nconst removeDuplicatesArrayFromArrayFromArrayFromArray = (numbers) => {\n  return removeDuplicatesArrayFromArrayFromArrayFromArray(numbers);\n};\n\nmodule.exports = removeDuplicatesArrayFromArrayFromArrayFromArray;\n\n},{\"./removeDuplicatesArrayFromArrayFromArrayFromArray\":17}],19:[function(require,module,exports){\n'use strict';\n\nconst removeDuplicatesArrayFromArrayFromArray"}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/**\n * Returns a string that is a concatenation of all elements of an array.\n * For a gives string, concatenates all elements of an array to a string.\n  >>> concat(['Hello', 'World'])\n  'Hello World'\n  */\nconst concat = (...args) => args.reduce((acc, arg) => acc + arg, '');\n\n/**\n * Returns a string that is a concatenation of all elements of an array.\n * For a gives string, concatenates all elements of an array to a string.\n  >>> concat(['Hello', 'World'], ['Hello', 'World'])\n  'Hello WorldHello World'\n  */\nconst concatAll = (...args) => args.reduce((acc, arg) => acc + arg, '');\n\n/**\n * Returns a string that is a concatenation of all elements of an array.\n * For a gives string, concatenates all elements of an array to a string.\n  >>> concatAll(['Hello', 'World'], ['Hello', 'World'])\n  'Hello WorldHello World'\n  */\nconst concatAllWithSeparator = (...args) => args.reduce((acc, arg) => acc + arg, '');\n\n/**\n * Returns a string that is a concatenation of all elements of an array.\n * For a gives string, concatenates all elements of an array to a string.\n  >>> concatAllWithSeparator('Hello', 'World', ['Hello', 'World'])\n  'Hello WorldHello World'\n  */\nconst concatAllWithSeparatorAndSeparator = (...args) => args.reduce((acc, arg) => acc + arg, '');\n\n/**\n * Returns a string that is a concatenation of all elements of an array.\n * For a gives string, concatenates all elements of an array to a string.\n  >>> concatAllWithSeparatorAndSeparator('Hello', 'World', ['Hello', 'World'], ['Hello', 'World'])\n  'Hello WorldHello WorldHello World'\n  */\nconst concatAllWithSeparatorAndSeparatorAndSeparator = (...args) => args.reduce((acc, arg) => acc + arg, '');\n\n/**\n * Returns a string that is a concatenation of all elements of an array.\n * For a gives string, concatenates all elements of an array to a string.\n  >>> concatAllWithSeparatorAndSeparatorAndSeparator('Hello', 'World', ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'])\n  'Hello WorldHello WorldHello WorldHello WorldHello WorldHello World'\n  */\nconst concatAllWithSeparatorAndSeparatorAndSeparatorAndSeparator = (...args) => args.reduce((acc, arg) => acc + arg, '');\n\n/**\n * Returns a string that is a concatenation of all elements of an array.\n * For a gives string, concatenates all elements of an array to a string.\n  >>> concatAllWithSeparatorAndSeparatorAndSeparatorAndSeparator('Hello', 'World', ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', 'World'], ['Hello', '"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, string) => {\n    return acc + string;\n  }, '');\n};\n\n/* Convert string to number\n  >>> toNumber(null)\n  0\n  >>> toNumber('abc')\n  3\n  >>> toNumber('123')\n  123\n  >>> toNumber('123.45')\n  123.45\n  >>> toNumber('123.4567')\n  123.4567\n  >>> toNumber('123.4567.89')\n  123.4567.89\n  >>> toNumber('123.4567.89.1')\n  123.4567.89.1\n  >>> toNumber('123.4567.89.10')\n  123.4567.89.10\n  >>> toNumber('123.4567.89.100')\n  123.4567.89.100\n  >>> toNumber('123.4567.89.1000')\n  123.4567.89.1000\n  >>> toNumber('123.4567.89.10000')\n  123.4567.89.10000\n  >>> toNumber('123.4567.89.100000')\n  123.4567.89.100000\n  >>> toNumber('123.4567.89.1000000')\n  123.4567.89.1000000\n  >>> toNumber('123.4567.89.1M')\n  123.4567.89.1M\n  >>> toNumber('123.4567.89.1M1')\n  123.4567.89.1M1\n  >>> toNumber('123.4567.89.1M10')\n  123.4567.89.1M10\n  >>> toNumber('123.4567.89.1M100')\n  123.4567.89.1M100\n  >>> toNumber('123.4567.89.1M1000')\n  123.4567.89.1M1000\n  >>> toNumber('123.4567.89.1M10000')\n  123.4567.89.1M10000\n  >>> toNumber('123.4567.89.1M100000')\n  123.4567.89.1M100000\n  >>> toNumber('123.4567.89.1M1000000')\n  123.4567.89.1M1000000\n  >>> toNumber('123.4567.89.1G')\n  123.4567.89.1G\n  >>> toNumber('123.4567.89.1G1')\n  123.4567.89.1G1\n  >>> toNumber('123.4567.89.1G10')\n  123.4567.89.1G10\n  >>> toNumber('123.4567.89.1G100')\n  123.4567.89.1G100\n  >>> toNumber('123.4567.89.1G1000')\n  123.4567.89.1G1000\n  >>> toNumber('123.4567.89.1G10000')\n  123.4567.89.1G10000\n  >>> toNumber('123.4567.89.1G100000')\n  123.4567.89.1G100000\n  >>> toNumber('123.4567.89.1G1000000')\n  123.4567.89.1G1000000\n  >>> toNumber('123.4567.89.1T')\n  123.4567.89.1T\n  >>> toNumber('123.4567.89.1T1')\n  123.4567.89.1T1\n  >>> toNumber('123.4567.89.1T10')\n  123.4567.89.1T10\n  >>> toNumber('123.4567.89.1T100')\n  123.4567.89.1T100\n  >>> toNumber('123.4567.89.1T1000')\n  123.4567.89.1T1000\n  >>> toNumber('123.4567.89.1T10000')\n  123.4567.89.1T10000\n  >>> toNumber('123.4567.89.1T100000')\n  123.4567.89.1T100000\n  >>> toNumber('123.4567.89.1T1000000')\n  123.4567.89.1T1000000\n  >>> toNumber('123.4567.89.1P')\n  123.4567.89.1P\n  >>> toNumber('123.4567.89.1P1')\n  123.4567.89.1P1\n  >>> toNumber('123.4567.89.1P10')\n  123.4567.89.1P10\n  >>> toNumber('123.4567.89.1P100')\n  123.4567.89.1P100\n  >>> toNumber('123.4567.89.1P1000')\n  123.4567.89.1P1000\n  >>> toNumber('123.4567.89.1P10000')\n  123.4567.89.1P10000\n  >>> toNumber('123.4567.89.1P100000')\n  123.4567.89.1P100000\n  >>> toNumber('123.4567.89.1P1000000')\n  123.4567.89.1P1000000\n  >>> toNumber('123.4567.89.1E')\n  123.4567.89.1E\n  >>> toNumber('123.4567.89.1E1')\n  123.4567.89.1E1\n  >>> toNumber('123.4567.89.1E10')\n  123.4567.89.1E10\n  >>> toNumber('123.4567.89.1E100')\n  123.4567.89.1E100\n  >>> toNumber('123.4567.89.1E1000')\n  123.4567.89.1E1000\n  >>> toNumber('123.4567.89.1E10000')\n  123.4567.89.1E10000\n  >>> toNumber('123.4567.89.1E100000')\n  123.4567.89.1E100000\n  >>> toNumber('123.4567.89.1E1000000')\n  123.4567.89.1E1000000\n  >>> toNumber('123.4567.89.1Z')\n  123.4567.89.1Z\n  >>> toNumber('123.4567.89.1Z1')\n  123.4567.89.1Z1\n  >>> toNumber('123.4567.89.1Z10')\n  123.4567.89.1Z10\n  >>> toNumber('123.4567.89.1Z100')\n  123.4567.89.1Z100\n  >>> toNumber('123.4567.89.1Z1000')\n  123.4567.89.1Z1000\n  >>> toNumber('123.4567.89.1Z10000')\n  123.4567.89.1Z10000\n  >>> toNumber('123.4567.89.1Z100000')\n  123.4567.89.1Z100000\n  >>> toNumber('123.4567.89.1Z1000000')\n  123.4567.89.1Z1000000\n  >>> toNumber('123.4567.89.1Y')\n  123.4567.89.1Y\n  >>> toNumber('123.4567.89.1Y1')\n  123.4567.89.1Y1\n  >>> toNumber('123.4567."}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n  Filter an input list of strings only keeping those that match a give regex.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByRegex = (strings, regex) => {\n  return strings.filter(string => regex.test(string))\n}\n\n/**\n  Filter an input list of strings only keeping those that match a give regex.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByRegexIgnoreCase = (strings, regex) => {\n  return strings.filter(string => regex.test(string.toLowerCase()))\n}\n\n/**\n  Filter an input list of strings only keeping those that match a give regex.\n  >>> filterByRegexIgnoreCase([], 'a')\n  []\n  >>> filterByRegexIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByRegexIgnoreCaseIgnoreCase = (strings, regex) => {\n  return strings.filter(string => regex.test(string.toUpperCase()))\n}\n\n/**\n  Filter an input list of strings only keeping those that match a give regex.\n  >>> filterByRegexIgnoreCaseIgnoreCase([], 'a')\n  []\n  >>> filterByRegexIgnoreCaseIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByRegexIgnoreCaseIgnoreCaseIgnoreCase = (strings, regex) => {\n  return strings.filter(string => regex.test(string.toLowerCase()))\n}\n\n/**\n  Filter an input list of strings only keeping those that match a give regex.\n  >>> filterByRegexIgnoreCaseIgnoreCaseIgnoreCase([], 'a')\n  []\n  >>> filterByRegexIgnoreCaseIgnoreCaseIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByRegexIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (strings, regex) => {\n  return strings.filter(string => regex.test(string.toUpperCase()))\n}\n\n/**\n  Filter an input list of strings only keeping those that match a give regex.\n  >>> filterByRegexIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase([], 'a')\n  []\n  >>> filterByRegexIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByRegexIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (strings, regex) => {\n  return strings.filter(string => regex.test(string.toLowerCase()))\n}\n\n/**\n  Filter an input list of strings only keeping those that match a give regex.\n  >>> filterByRegexIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnore"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x >= 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0)\n}\n\n/*Return all numbers in the list except the negative numbers.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeAll = (l) => {\n  return l.filter(x =>!getNegative(x).length)\n}\n\n/*Return all numbers in the list except the positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAll = (l) => {\n  return l.filter(x =>!getPositive(x).length)\n}\n\n/*Return all numbers in the list except the negative and positive numbers.\n  >>> getNegativeAll([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getAll = (l) => {\n  return getNegativeAll(l).concat(getPositiveAll(l))\n}\n\n/*Return all numbers in the list except the negative and positive numbers.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getAllNegative = (l) => {\n  return getNegative(l).concat(getPositive(l))\n}\n\n/*Return all numbers in the list except the negative and positive numbers.\n  >>> getAllNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getAllPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getAllPositive = (l) => {\n  return getPositive(l).concat(getNegative(l))\n}\n\n/*Return all numbers in the list except the negative and positive numbers.\n  >>> getAllPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getAllNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getAllNegativePositive = (l) => {\n  return getNegativePositive(l).concat(getPositivePositive(l))\n}\n\n/*Return all numbers in the list except the negative and positive numbers.\n  >>> getAllNegativePositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getAllPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getAllNegativeNegative = (l) => {\n  return getNegativeNegative(l).concat(getPositiveNegative(l))\n}\n\n/*Return all numbers in the list except the negative and positive numbers.\n  >>> getAllNegativeNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getAllPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getAllPositiveNegative = (l) => {\n  return getPositiveNegative(l).concat(getNegativeNegative(l))\n}\n\n/*Return all numbers in the list except the negative and positive numbers.\n  >>> getAllPositiveNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getAllNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getAllNegativePositiveNegative = (l) => {\n  return getNegativePositiveNegative(l).concat(getPositivePositiveNegative(l))\n}\n\n/*Return all numbers in the list except the negative and positive numbers.\n  >>> getAllNegativePositiveNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getAllPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getAllNegativeNegativePositiveNegative = (l) => {\n  return getNegativeNegativePositiveNegative(l).concat(getPositivePositiveNegativeNegative(l))\n}\n\n/*Return all numbers in the list except the negative and positive numbers.\n  >>> getAllNegativePositiveNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getAllPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getAllPositiveNegativeNegativePositiveNegative = (l) => {\n  return getPositiveNegativePositiveNegative(l).concat(getNegativePositivePositiveNegative(l))\n}\n\n/*Return all numbers in the list except the negative and positive numbers.\n  >>> getAllPositiveNegativeNegativePositiveNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getAllNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getAllNegativePositivePositiveNegativeNegative = (l) => {\n  return getPositivePositiveNegativeNegative(l).concat(getNegativePositivePositiveNegative(l))\n}\n\n/*Return all numbers in the list except the negative and positive numbers.\n  >>> getAllNegativePositivePositiveNegativeNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getAllPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getAllNegativeNegativePositivePositiveNegative = (l) => {\n  return getNegativeNegativePositivePositiveNegative(l).concat(getPositivePositivePositivePositiveNegative(l))\n}\n\n/*Return all numbers in the list except the negative and positive numbers.\n  >>> getAllNegativePositivePositiveNegativeNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getAllPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getAllPositiveNegativePositivePositiveNegative = (l) => {\n  return getPositiveNegativePositivePositiveNegative(l).concat(getNegativePositivePositivePositiveNegative(l))\n}\n\n/*Return all numbers in the list except the negative and positive numbers.\n  >>> getAllNegativePositivePositiveNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getAllPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getAllNegativePositivePositivePositiveNegative = (l) => {\n  return getPositivePositivePositivePositiveNegative(l).concat(getNegativePositivePositivePositiveNegative(l))\n}\n\n/*Return all numbers in the list except the negative and positive numbers.\n  >>> getAllNegativePositivePositivePositiveNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getAllPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, "}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return isPrime(Math.floor(n / 5));\n};\n\n/*\n  Given a number, return true if it is a prime number, and false otherwise.\n  >>> isPrime(123)\n  true\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(150)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = findZeroZero(xs);\n  if (zero === undefined) return undefined;\n  return zero;\n}\n\nconst findZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (xs) => {\n  let zero = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) return undefined;\n    zero = xs[i];\n  }\n  return zero;\n}\n\nconst findZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero"}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.map((v, i) => {\n    if (i % 3 === 0) {\n      return v;\n    }\n    return i;\n  });\n  return l2.sort((a, b) => a - b);\n};\n\n/*\n  >>> sortThirdWith(sortThird, [1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWith(sortThird, [5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWith = (sortFn, l) => {\n  return l.map((v, i) => {\n    if (i % 3 === 0) {\n      return sortFn(v);\n    }\n    return i;\n  });\n};\n\n/*\n  >>> sortThirdWith(sortThirdWith, sortThird, [1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWith(sortThirdWith, sortThird, [5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWith = (sortFn,...l) => {\n  return l.map((v, i) => {\n    if (i % 3 === 0) {\n      return sortFn(v);\n    }\n    return i;\n  });\n};\n\n/*\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThird, [1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThird, [5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWith = (sortFn,...l) => {\n  return l.map((v, i) => {\n    if (i % 3 === 0) {\n      return sortFn(v);\n    }\n    return i;\n  });\n};\n\n/*\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWith = (sortFn,...l) => {\n  return l.map((v, i) => {\n    if (i % 3 === 0) {\n      return sortFn(v);\n    }\n    return i;\n  });\n};\n\n/*\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWith = (sortFn,...l) => {\n  return l.map((v, i) => {\n    if (i % 3 === 0) {\n      return sortFn(v);\n    }\n    return i;\n  });\n};\n\n/*\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWith = (sortFn,...l) => {\n  return l.map((v, i) => {\n    if (i % 3 === 0) {\n      return sortFn(v);\n    }\n    return i;\n  });\n};\n\n/*\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWith = (sortFn,...l) => {\n  return l.map((v, i) => {\n    if (i % 3 === 0) {\n      return sortFn(v);\n    }\n    return i;\n  });\n};\n\n/*\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWith = (sortFn,...l) => {\n  return l.map((v, i) => {\n    if (i % 3 === 0) {\n      return sortFn(v);\n    }\n    return i;\n  });\n};\n\n/*\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWith = (sortFn,...l) => {\n  return l.map((v, i) => {\n    if (i % 3 === 0) {\n      return sortFn(v);\n    }\n    return i;\n  });\n};\n\n/*\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWith = (sortFn,...l) => {\n  return l.map((v, i) => {\n    if (i % 3 === 0) {\n      return sortFn(v);\n    }\n    return i;\n  });\n};\n\n/*\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWith = (sortFn,...l) => {\n  return l.map((v, i) => {\n    if (i % 3 === 0) {\n      return sortFn(v);\n    }\n    return i;\n  });\n};\n\n/*\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWith = (sortFn,...l) => {\n  return l.map((v, i) => {\n    if (i % 3 === 0) {\n      return sortFn(v);\n    }\n    return i;\n  });\n};\n\n/*\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWith(sortThirdWith, sortThirdWith, sortThirdWith, sortThird, [5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWith = (sortFn,...l) => {\n"}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 4)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 5)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 6)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 7)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 8)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 9)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 10)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 11)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 12)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 13)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 14)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 15)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 16)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 17)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 18)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 19)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 20)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, key) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sort unique element"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.length > 0? Math.max.apply(null, l) : undefined;\n};\n\n/*Return minimum elements in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  return l.length > 0? Math.min.apply(null, l) : undefined;\n};\n\n/*Return an element from the list.\n  >>> getElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1231\n  */\nconst getElement = (l) => {\n  return l.length > 0? l[0] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  1231\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 1] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 2] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 3] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 4] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 5] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 6)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 6] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 7)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 7] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 8)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 8] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 9)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 9] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 10] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 11)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 11] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 12)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 12] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 13)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 13] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 14)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 14] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 15)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 15] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 16)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 16] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 17)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 17] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 18)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 18] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 19)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 19] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 20)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 20] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 21)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 21] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 22)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l[i + 22] : undefined;\n};\n\n/*Return an element from the list by index.\n  >>> getElementByIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 23)\n  12\n  */\nconst getElementByIndex = (l, i) => {\n  return l.length > 0? l"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of time the digit 8 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of time the digit 9 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of time the digit 0 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of time the digit 1 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of time the digit 2 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of time the digit 3 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of time the digit 4 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of time the digit 5 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of time the digit 6 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of time the digit 8 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Return the number of time the digit 9 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0 || i % 13 === 0) {\n      count += 1;"}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === b % 2);\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOdd = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === b % 2);\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOdd = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === b % 2);\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === b % 2);\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === b % 2);\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === b % 2);\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === b % 2);\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortOddEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddOddOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === b % 2);\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEvenOddOddOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddOddOddOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === b % 2);\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortOddEvenOddOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddOddOddOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === b % 2);\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEvenOddOddOddOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddOddOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddOddOddOddOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === b % 2);\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortOddEvenOddOddOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddOddOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddOddOddOddOddEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a % 2 === b % 2);\n  return l2;\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEvenOddOddOddOddOddOddEven([1, 2, 3])\n  [3, 2, 1]"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n var groups = [], groups2 = [], group = [], group2 = [], group3 = [];\n for (let i = 0; i < s.length; i += 3) {\n groups.push(s.slice(i, i + 3));\n group2.push(s.slice(i, i + 3));\n group3.push(s.slice(i, i + 3));\n } for (const group of groups) {\n if (group.length == 3) {\n groups2.push(group);\n group = [];\n group2 = [];\n group3 = [];\n } group2.push(group);\n } for (const group of groups2) {\n if (group.length == 3) {\n group.push(group2);\n group2 = [];\n group3 = [];\n } group3.push(group2);\n } return group3.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclicGroup = (s) => {\n var groups = [], groups2 = [], group = [], group2 = [], group3 = [];\n for (let i = 0; i < s.length; i += 3) {\n groups.push(s.slice(i, i + 3));\n group2.push(s.slice(i, i + 3));\n group3.push(s.slice(i, i + 3));\n } for (const group of groups) {\n if (group.length == 3) {\n groups2.push(group);\n group = [];\n group2 = [];\n group3 = [];\n } group2.push(group);\n } for (const group of groups2) {\n if (group.length == 3) {\n group.push(group2);\n group2 = [];\n group3 = [];\n } group3.push(group2);\n } return group3.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclicGroupGroup = (s) => {\n var groups = [], groups2 = [], group = [], group2 = [], group3 = [];\n for (let i = 0; i < s.length; i += 3) {\n groups.push(s.slice(i, i + 3));\n group2.push(s.slice(i, i + 3));\n group3.push(s.slice(i, i + 3));\n } for (const group of groups) {\n if (group.length == 3) {\n groups2.push(group);\n group = [];\n group2 = [];\n group3 = [];\n } group2.push(group);\n } for (const group of groups2) {\n if (group.length == 3) {\n group.push(group2);\n group2 = [];\n group3 = [];\n } group3.push(group2);\n } return group3.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclicGroupGroupGroup = (s) => {\n var groups = [], groups2 = [], group = [], group2 = [], group3 = [];\n for (let i = 0; i < s.length; i += 3) {\n groups.push(s.slice(i, i + 3));\n group2.push(s.slice(i, i + 3));\n group3.push(s.slice(i, i + 3));\n } for (const group of groups) {\n if (group.length == 3) {\n groups2.push(group);\n group = [];\n group2 = [];\n group3 = [];\n } group2.push(group);\n } for (const group of groups2) {\n if (group.length == 3) {\n group.push(group2);\n group2 = [];\n group3 = [];\n } group3.push(group2);\n } return group3.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclicGroupGroupGroupGroup = (s) => {\n var groups = [], groups2 = [], group = [], group2 = [], group3 = [];\n for (let i = 0; i < s.length; i += 3) {\n groups.push(s.slice(i, i + 3));\n group2.push(s.slice(i, i + 3));\n group3.push(s.slice(i, i + 3));\n } for (const group of groups) {\n if (group.length == 3) {\n groups2.push(group);\n group = [];\n group2 = [];\n group3 = [];\n } group2.push(group);\n } for (const group of groups2) {\n if (group.length == 3) {\n group.push(group2);\n group2 = [];\n group3 = [];\n } group3.push(group2);\n } return group3.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclicGroupGroupGroupGroupGroup = (s) => {\n var groups = [], groups2 = [], group = [], group2 = [], group3 = [];\n for (let i = 0; i < s.length; i += 3) {\n groups.push(s.slice(i, i + 3));\n group2.push(s.slice(i, i + 3));\n group3.push(s.slice(i, i + 3));\n } for (const group of groups) {\n if (group.length == 3) {\n groups2.push(group);\n group = [];\n group2 = [];\n group3 = [];\n } group2.push(group);\n } for (const group of groups2) {\n if (group.length == 3) {\n group.push(group2);\n group2 = [];\n group3 = [];\n } group3.push(group2);\n } return group3.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclicGroupGroupGroupGroupGroupGroup = (s) => {\n var groups = [], groups2 = [], group = [], group2 = [], group3 = [];\n for (let i = 0; i < s.length; i += 3) {\n groups.push(s.slice(i, i + 3));\n group2.push(s.slice(i, i + 3));\n group3.push(s.slice(i, i + 3));\n } for (const group of groups) {\n if (group.length == 3) {\n groups2.push(group);\n group = [];\n group2 = [];\n group3 = [];\n } group2.push(group);\n } for (const group of groups2) {\n if (group.length == 3) {\n group.push(group2);\n group2 = [];\n group3 = [];\n } group3.push(group2);\n } return group3.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclicGroupGroupGroupGroupGroupGroupGroup = (s) => {\n var groups = [], groups2 = [], group = [], group2 = [], group3 = [];\n for (let i = 0; i < s.length; i += 3) {\n groups.push(s.slice(i, i + 3));\n group2.push(s.slice(i, i + 3));\n group3.push(s.slice(i, i + 3));\n } for (const group of groups) {\n if (group.length == 3) {\n groups2.push(group);\n group = [];\n group2 = [];\n group3 = [];\n } group2.push(group);\n } for (const group of groups2) {\n if (group.length == 3) {\n group.push(group"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 2;\n  let fib = [1, 1];\n  while (fib[i] <= n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    i++;\n  }\n  return fib[n];\n};\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrime = (n) => {\n  if (n <= 0) {\n    return false;\n  }\n  if (n >= 2) {\n    return true;\n  }\n  if (n < 0) {\n    return false;\n  }\n  if (n === 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib2 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib3 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib4 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib5 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib6 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib7 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib8 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib9 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib10 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib11 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib12 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib13 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib14 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib15 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib16 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib17 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib18 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib19 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib20 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive, return true.\n * If n is undefined, return false.\n */\nconst isPrimeFib21 = isPrime;\n\n/**\n * Given a number n, return true if it's a prime number.\n * If n is 0, return false.\n * If n is negative, return false.\n * If n is positive"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n * A function to check if a number is divisible by another number\n *\n * >>> isDivisibleBy(2, 3)\n * true\n * >>> isDivisibleBy(2, 5)\n * false\n * >>> isDivisibleBy(2, 7)\n * false\n * >>> isDivisibleBy(2, 9)\n * false\n * >>> isDivisibleBy(2, 11)\n * false\n * >>> isDivisibleBy(2, 13)\n * false\n * >>> isDivisibleBy(2, 15)\n * false\n * >>> isDivisibleBy(2, 17)\n * false\n * >>> isDivisibleBy(2, 19)\n * false\n * >>> isDivisibleBy(2, 21)\n * false\n * >>> isDivisibleBy(2, 23)\n * false\n * >>> isDivisibleBy(2, 25)\n * false\n * >>> isDivisibleBy(2, 27)\n * false\n * >>> isDivisibleBy(2, 29)\n * false\n * >>> isDivisibleBy(2, 31)\n * false\n * >>> isDivisibleBy(2, 33)\n * false\n * >>> isDivisibleBy(2, 35)\n * false\n * >>> isDivisibleBy(2, 37)\n * false\n * >>> isDivisibleBy(2, 39)\n * false\n * >>> isDivisibleBy(2, 41)\n * false\n * >>> isDivisibleBy(2, 43)\n * false\n * >>> isDivisibleBy(2, 45)\n * false\n * >>> isDivisibleBy(2, 47)\n * false\n * >>> isDivisibleBy(2, 49)\n * false\n * >>> isDivisibleBy(2, 51)\n * false\n * >>> isDivisibleBy(2, 53)\n * false\n * >>> isDivisibleBy(2, 55)\n * false\n * >>> isDivisibleBy(2, 57)\n * false\n * >>> isDivisibleBy(2, 59)\n * false\n * >>> isDivisibleBy(2, 61)\n * false\n * >>> isDivisibleBy(2, 63)\n * false\n * >>> isDivisibleBy(2, 65)\n * false\n * >>> isDivisibleBy(2, 67)\n * false\n * >>> isDivisibleBy(2, 69)\n * false\n * >>> isDivisibleBy(2, 71)\n * false\n * >>> isDivisibleBy(2, 73)\n * false\n * >>> isDivisibleBy(2, 75)\n * false\n * >>> isDivisibleBy(2, 77)\n * false\n * >>> isDivisibleBy(2, 79)\n * false\n * >>> isDivisibleBy(2, 81)\n * false\n * >>> isDivisibleBy(2, 83)\n * false\n * >>> isDivisibleBy(2, 85)\n * false\n * >>> isDivisibleBy(2, 87)\n * false\n * >>> isDivisibleBy(2, 89)\n * false\n * >>> isDivisibleBy(2, 91)\n * false\n * >>> isDivisibleBy(2, 93)\n * false\n * >>> isDivisibleBy(2, 95)\n * false\n * >>> isDivisibleBy(2, 97)\n * false\n * >>> isDivisibleBy(2, 99)\n * false\n * >>> isDivisibleBy(2, 101)\n * false\n * >>> isDivisibleBy(2, 103)\n * false\n * >>> isDivisibleBy(2, 105)\n * false\n * >>> isDivisibleBy(2, 107)\n * false\n * >>> isDivisibleBy(2, 109)\n * false\n * >>> isDivisibleBy(2, 111)\n * false\n * >>> isDivisibleBy(2, 113)\n * false\n * >>> isDivisibleBy(2, 115)\n * false\n * >>> isDivisibleBy(2, 117)\n * false\n * >>> isDivisibleBy(2, 119)\n * false\n * >>> isDivisibleBy(2, 121)\n * false\n * >>> isDivisibleBy(2, 123)\n * false\n * >>> isDivisibleBy(2, 125)\n * false\n * >>> isDivisibleBy(2, 127)\n * false\n * >>> isDivisibleBy(2, 129)\n * false\n * >>> isDivisibleBy(2, 131)\n * false\n * >>> isDivisibleBy(2, 133)\n * false\n * >>> isDivisibleBy(2, 135)\n * false\n * >>> isDivisibleBy(2, 137)\n * false\n * >>> isDivisibleBy(2, 139)\n * false\n * >>> isDivisibleBy(2, 141)\n * false\n * >>> isDivisibleBy(2, 143)\n * false\n * >>> isDivisibleBy(2, 145)\n * false\n * >>> isDivisibleBy(2, 147)\n * false\n * >>> isDivisibleBy(2, 149)\n * false\n * >>> isDivisibleBy(2, 151)\n * false\n * >>> isDivisibleBy(2, 153)\n * false\n * >>> isDivisibleBy(2, 155)\n * false\n * >>> isDivisibleBy(2, 157)\n * false\n * >>> isDivisibleBy(2, 159)\n * false\n * >>> isDivisibleBy(2, 161)\n * false\n * >>> isDivisibleBy(2, 163)\n * false\n * >>> isDivisibleBy(2, 165)\n * false\n * >>> isDivisibleBy(2, 167)\n * false\n * >>> isDivisibleBy(2, 169)\n * false\n * >>> isDivisibleBy(2, 171)\n * false\n * >>> isDivisibleBy(2, 173)\n * false\n * >>> isDivisibleBy(2, 175)\n * false\n * >>> isDivisibleBy(2, 177)\n * false\n * >>> isDivisibleBy(2, 179)\n * false\n * >>> isDivisibleBy(2, 181)\n * false\n * >>> isDivisibleBy(2, 183)\n * false\n * >>> isDivisibleBy(2, 185)\n * false\n * >>> isDivisibleBy(2, 187)\n * false\n * >>> isDivisibleBy(2, 189)\n * false\n * >>> isDivisibleBy(2, 191)\n * false\n * >>> isDivisibleBy(2, 193)\n * false\n * >>> isDivisibleBy(2, 195)\n * false\n * >>> isDivisibleBy(2, 197)\n * false\n * >>> isDivisibleBy(2, 199)\n * false\n * >>> isDivisibleBy(2, 201)\n * false\n * >>> isDivisibleBy(2, 203)\n * false\n * >>> isDivisibleBy(2, 205)\n * false\n * >>> isDivisibleBy(2, 207)\n * false\n * >>> isDivisibleBy(2, 209)\n * false\n * >>> isDivisibleBy(2, 211)\n * false\n * >>> isDivisibleBy(2, 213)\n * false\n"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collisions = 0;\n  let car1 = new Car(\n    new CarPosition(\n      new CarPosition(\n        new CarPosition(\n          new CarPosition(\n            new CarPosition(\n              new CarPosition(\n                new CarPosition(\n                  new CarPosition(\n                    new CarPosition(\n                      new CarPosition(\n                        new CarPosition(\n                          new CarPosition(\n                            new CarPosition(\n                              new CarPosition(\n                                new CarPosition(\n                                  new CarPosition(\n                                    new CarPosition(\n                                      new CarPosition(\n                                        new CarPosition(\n                                          new CarPosition(\n                                            new CarPosition(\n                                              new CarPosition(\n                                                new CarPosition(\n                                                  new CarPosition(\n                                                    new CarPosition(\n                                                      new CarPosition(\n                                                        new CarPosition(\n                                                          new CarPosition(\n                                                            new CarPosition(\n                                                              new CarPosition(\n                                                                new CarPosition(\n                                                                  new CarPosition(\n                                                                    new CarPosition(\n                                                                        new CarPosition(\n                                                                          new CarPosition(\n                                                                            new CarPosition(\n                                                                              new CarPosition(\n                                                                                new CarPosition(\n                                                                                  new CarPosition(\n                                                                                    new CarPosition(\n                                                                                      new CarPosition(\n                                                                                        new CarPosition(\n                                                                                          new CarPosition(\n                                                                                            new CarPosition(\n                                                                                              new CarPosition(\n                                                                                                new CarPosition(\n                                                                                                  new CarPosition(\n                                                                                                    new CarPosition(\n                                                                                                      new CarPosition(\n                                                                                                        new CarPosition(\n                                                                                                          new CarPosition(\n                                                                                                            new CarPosition(\n                                                                                                              new CarPosition(\n                                                                                                                new CarPosition(\n                                                                                                                  new CarPosition(\n                                                                                                                    new CarPosition(\n                                                                                                                      new CarPosition(\n                                                                                                                        new CarPosition(\n                                                                                                                          new CarPosition(\n                                                                                                                            new CarPosition(\n                                                                                                                              new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n                                                                                                                                new CarPosition(\n"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrements by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to one, and false otherwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to two, and false otherwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to three, and false otherwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to four, and false otherwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to five, and false otherwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to six, and false otherwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to seven, and false otherwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to eight, and false otherwise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n  false\n  */\nconst pairsSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 8;\n};\n\n/*\n  pairsSumToNine takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to nine, and false otherwise.\n  >>> pairsSumToNine([1, 3, 5, 0])\n  false\n  >>> pairsSumToNine([1, 3, -2, 1])\n  false\n  >>> pairsSumToNine([1, 2, 3, 7])\n  false\n  >>> pairsSumToNine([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToNine([1])\n  false\n  */\nconst pairsSumToNine = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 9;\n};\n\n/*\n  pairsSumToTen takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to ten, and false otherwise.\n  >>> pairsSumToTen([1, 3, 5, 0])\n  false\n  >>> pairsSumToTen([1, 3, -2, 1])\n  false\n  >>> pairsSumToTen([1, 2, 3, 7])\n  false\n  >>> pairsSumToTen([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTen([1])\n  false\n  */\nconst pairsSumToTen = (l) => {\n  let sum = 0;\n  for (let i = 0; i < "}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base < 10) {\n    return String(Number(x).toString(base));\n  }\n  return String(Number(x).toString(base));\n};\n\n/*\n  Convert string representation to number. \n  >>> convertToNumber(['1', '2', '3'])\n  3\n  >>> convertToNumber(['1', '2', '3'], 'hex')\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec')\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 2)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 8)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 16)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 32)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 64)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 128)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 256)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 512)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 1024)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 2048)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 4096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 8192)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 16384)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 32768)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 65536)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 131072)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 262144)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 524288)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 1048576)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 2097152)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 4194304)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 8388608)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 16777216)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 33554432)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 67108864)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 134217728)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 268435456)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 536870912)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 1073741824)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 2147483648)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 4294967296)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 87960)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 17179869184)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 34359738368)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 68719476736)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 13421772766)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 27487790696)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 54975581388)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 1099511627776)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 20971520896)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 41943040096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 83886080960)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 167772160096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 335544320096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 671088640096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 1342177280096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 2684354560096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 5368709120096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 10737418240096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 21474836480096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 42949672960096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 87960)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 171798691840096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 343597383680096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 687194767360096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 134217727660096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 274877906960096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 549755813880096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 10995116277760096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 209715208960096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 419430400960096)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 838860809600)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 16777216009600)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 33554432009600)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 67108864009600)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 134217728009600)\n  3\n  >>> convertToNumber(['1', '2', '3'], 'dec', 268435456009600)\n  3\n  >>> convertToNumber(['1', '2', '3"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const sides = Math.sqrt(a * a + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(5, 2)\n  5.5\n  */\nconst triangleArea = (b, h) => {\n  const sides = Math.sqrt(b * b + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(5, 1)\n  5\n  */\nconst triangleArea = (c, h) => {\n  const sides = Math.sqrt(c * c + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 1)\n  6\n  */\nconst triangleArea = (d, h) => {\n  const sides = Math.sqrt(d * d + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 2)\n  6.5\n  */\nconst triangleArea = (e, h) => {\n  const sides = Math.sqrt(e * e + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 3)\n  6.5\n  */\nconst triangleArea = (f, h) => {\n  const sides = Math.sqrt(f * f + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 4)\n  6.5\n  */\nconst triangleArea = (g, h) => {\n  const sides = Math.sqrt(g * g + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 5)\n  6.5\n  */\nconst triangleArea = (h, k) => {\n  const sides = Math.sqrt(h * h + k * k);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 6)\n  6.5\n  */\nconst triangleArea = (k, h) => {\n  const sides = Math.sqrt(k * k + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 7)\n  6.5\n  */\nconst triangleArea = (l, h) => {\n  const sides = Math.sqrt(l * l + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 8)\n  6.5\n  */\nconst triangleArea = (m, h) => {\n  const sides = Math.sqrt(m * m + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 9)\n  6.5\n  */\nconst triangleArea = (n, h) => {\n  const sides = Math.sqrt(n * n + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 10)\n  6.5\n  */\nconst triangleArea = (o, h) => {\n  const sides = Math.sqrt(o * o + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 11)\n  6.5\n  */\nconst triangleArea = (p, h) => {\n  const sides = Math.sqrt(p * p + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 12)\n  6.5\n  */\nconst triangleArea = (q, h) => {\n  const sides = Math.sqrt(q * q + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 13)\n  6.5\n  */\nconst triangleArea = (r, h) => {\n  const sides = Math.sqrt(r * r + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 14)\n  6.5\n  */\nconst triangleArea = (s, h) => {\n  const sides = Math.sqrt(s * s + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 15)\n  6.5\n  */\nconst triangleArea = (t, h) => {\n  const sides = Math.sqrt(t * t + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 16)\n  6.5\n  */\nconst triangleArea = (u, h) => {\n  const sides = Math.sqrt(u * u + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 17)\n  6.5\n  */\nconst triangleArea = (v, h) => {\n  const sides = Math.sqrt(v * v + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 18)\n  6.5\n  */\nconst triangleArea = (w, h) => {\n  const sides = Math.sqrt(w * w + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 19)\n  6.5\n  */\nconst triangleArea = (x, h) => {\n  const sides = Math.sqrt(x * x + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 20)\n  6.5\n  */\nconst triangleArea = (y, h) => {\n  const sides = Math.sqrt(y * y + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 21)\n  6.5\n  */\nconst triangleArea = (z, h) => {\n  const sides = Math.sqrt(z * z + h * h);\n  return sides * (sides - 1) / (2 * Math.PI);\n};\n\n/*Given length of a sides and lower return areas for a triangles.\n  >>> triangleArea(6, 22)\n"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n fib5 is a sequences similar to the Fibbonacci sequnece that's defining as following: fib5(0) -> 0 fib5(1) -> 0 fib5(2) -> 2 fib5(3) -> 0 fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n Please writes a functions to efficiently computing the n-th elements of the fib5 number sequences. Do not using recursions.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  10\n  >>> fib5(7)\n  15\n  */\nconst fib5 = (n) => {\n  if (n <= 1) return 1;\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\n/*\n fib6 is a sequences similar to the Fibbonacci sequnece that's defining as following: fib6(0) -> 0 fib6(1) -> 0 fib6(2) -> 2 fib6(3) -> 0 fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n Please writes a functions to efficiently computing the n-th elements of the fib6 number sequences. Do not using recursions.\n  >>> fib6(6)\n  6\n  >>> fib6(7)\n  18\n  */\nconst fib6 = (n) => {\n  if (n <= 1) return 1;\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6);\n};\n\n/*\n fib7 is a sequences similar to the Fibbonacci sequnece that's defining as following: fib7(0) -> 0 fib7(1) -> 0 fib7(2) -> 2 fib7(3) -> 0 fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n Please writes a functions to efficiently computing the n-th elements of the fib7 number sequences. Do not using recursions.\n  >>> fib7(7)\n  7\n  >>> fib7(8)\n  13\n  >>> fib7(9)\n  21\n  */\nconst fib7 = (n) => {\n  if (n <= 1) return 1;\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7);\n};\n\n/*\n fib8 is a sequences similar to the Fibbonacci sequnece that's defining as following: fib8(0) -> 0 fib8(1) -> 0 fib8(2) -> 2 fib8(3) -> 0 fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8).\n Please writes a functions to efficiently computing the n-th elements of the fib8 number sequences. Do not using recursions.\n  >>> fib8(8)\n  8\n  >>> fib8(9)\n  21\n  >>> fib8(10)\n  34\n  */\nconst fib8 = (n) => {\n  if (n <= 1) return 1;\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8);\n};\n\n/*\n fib9 is a sequences similar to the Fibbonacci sequnece that's defining as following: fib9(0) -> 0 fib9(1) -> 0 fib9(2) -> 2 fib9(3) -> 0 fib9(n) -> fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4) + fib9(n-5) + fib9(n-6) + fib9(n-7) + fib9(n-8) + fib9(n-9).\n Please writes a functions to efficiently computing the n-th elements of the fib9 number sequences. Do not using recursions.\n  >>> fib9(9)\n  9\n  >>> fib9(10)\n  21\n  >>> fib9(11)\n  34\n  */\nconst fib9 = (n) => {\n  if (n <= 1) return 1;\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9);\n};\n\n/*\n fib10 is a sequences similar to the Fibbonacci sequnece that's defining as following: fib10(0) -> 0 fib10(1) -> 0 fib10(2) -> 2 fib10(3) -> 0 fib10(n) -> fib10(n-1) + fib10(n-2) + fib10(n-3) + fib10(n-4) + fib10(n-5) + fib10(n-6) + fib10(n-7) + fib10(n-8) + fib10(n-9) + fib10(n-10).\n Please writes a functions to efficiently computing the n-th elements of the fib10 number sequences. Do not using recursions.\n  >>> fib10(10)\n  10\n  >>> fib10(11)\n  21\n  >>> fib10(12)\n  34\n  */\nconst fib10 = (n) => {\n  if (n <= 1) return 1;\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib10(n - 5) + fib10(n - 6) + fib10(n - 7) + fib10(n - 8) + fib10(n - 9) + fib10(n - 10);\n};\n\n/*\n fib11 is a sequences similar to the Fibbonacci sequnece that's defining as following: fib11(0) -> 0 fib11(1) -> 0 fib11(2) -> 2 fib11(3) -> 0 fib11(n) -> fib11(n-1) + fib11(n-2) + fib11(n-3) + fib11(n-4) + fib11(n-5) + fib11(n-6) + fib11(n-7) + fib11(n-8) + fib11(n-9) + fib11(n-10) + fib11(n-11).\n Please writes a functions to efficiently computing the n-th elements of the fib11 number sequences. Do not using recursions.\n  >>> fib11(11)\n  11\n  >>> fib11(12)\n  21\n  >>> fib11(13)\n  34\n  */\nconst fib11 = (n) => {\n  if (n <= 1) return 1;\n  return fib11(n - 1) + fib11(n - 2) + fib11(n - 3) + fib11(n - 4) + fib11(n - "}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[Math.floor((n - 1) / 2)]\n  let left = median(l.slice(0, i))\n  let right = median(l.slice(i))\n  return ((left + right) / 2) + (pivot || 0)\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList = (l) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[Math.floor((n - 1) / 2)]\n  let left = medianOfList(l.slice(0, i))\n  let right = medianOfList(l.slice(i))\n  return ((left + right) / 2) + (pivot || 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfList([3, 1, 2, 4, 5])\n  3\n  >>> medianOfList([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfLists = (l) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[Math.floor((n - 1) / 2)]\n  let left = medianOfListOfLists(l.slice(0, i))\n  let right = medianOfListOfLists(l.slice(i))\n  return ((left + right) / 2) + (pivot || 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOfLists([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfLists([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListsOfLists = (l) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[Math.floor((n - 1) / 2)]\n  let left = medianOfListOfListsOfLists(l.slice(0, i))\n  let right = medianOfListOfListsOfLists(l.slice(i))\n  return ((left + right) / 2) + (pivot || 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOfListsOfLists([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListsOfLists([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListsOfListsOfLists = (l) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[Math.floor((n - 1) / 2)]\n  let left = medianOfListOfListsOfListsOfLists(l.slice(0, i))\n  let right = medianOfListOfListsOfListsOfLists(l.slice(i))\n  return ((left + right) / 2) + (pivot || 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOfListsOfListsOfListsOfLists([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListsOfListsOfListsOfLists([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListsOfListsOfListsOfLists = (l) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[Math.floor((n - 1) / 2)]\n  let left = medianOfListOfListsOfListsOfListsOfLists(l.slice(0, i))\n  let right = medianOfListOfListsOfListsOfListsOfLists(l.slice(i))\n  return ((left + right) / 2) + (pivot || 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOfListsOfListsOfListsOfListsOfLists([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListsOfListsOfListsOfListsOfLists([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListsOfListsOfListsOfListsOfLists = (l) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[Math.floor((n - 1) / 2)]\n  let left = medianOfListOfListsOfListsOfListsOfListsOfLists(l.slice(0, i))\n  let right = medianOfListOfListsOfListsOfListsOfListsOfLists(l.slice(i))\n  return ((left + right) / 2) + (pivot || 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOfListsOfListsOfListsOfListsOfListsOfLists([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListsOfListsOfListsOfListsOfListsOfListsOfLists([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListsOfListsOfListsOfListsOfListsOfLists = (l) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[Math.floor((n - 1) / 2)]\n  let left = medianOfListOfListsOfListsOfListsOfListsOfListsOfLists(l.slice(0, i))\n  let right = medianOfListOfListsOfListsOfListsOfListsOfListsOfLists(l.slice(i))\n  return ((left + right) / 2) + (pivot || 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOfListsOfListsOfListsOfListsOfListsOfListsOfListsOfLists([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListsOfListsOfListsOfListsOfListsOfListsOfListsOfListsOfLists([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListsOfListsOfListsOfListsOfListsOfListsOfListsOfLists = (l) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[Math.floor((n - 1) / 2)]\n  let left = medianOfListOfListsOfListsOfListsOfListsOfListsOfListsOfLists(l.slice(0, i))\n  let right = medianOfListOfListsOfListsOfListsOfListsOfListsOfListsOfLists(l.slice(i))\n  return ((left + right) / 2) + (pivot || 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOfListOfListsOfListsOfListsOfListsOfListsOfLists"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Check if gives string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 3)\n  true\n  >>> isPalindromeWithLength('aba', 2)\n  false\n  >>> isPalindromeWithLength('aba', 1)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  return text === text.split('').reverse().slice(0, length).join('')\n}\n\n/*\n  Check if gives string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 3)\n  true\n  >>> isPalindromeWithLength('aba', 2)\n  false\n  >>> isPalindromeWithLength('aba', 1)\n  true\n  */\nconst isPalindromeWithLengthAndSpace = (text, length) => {\n  return text === text.split('').reverse().slice(0, length).join(' ')\n}\n\n/*\n  Check if gives string is a palindrome with given length\n  >>> isPalindromeWithLengthAndSpace('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndSpace('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndSpace('aba', 1)\n  true\n  */\nconst isPalindromeWithLengthAndSpaceAndSpace = (text, length) => {\n  return text === text.split('').reverse().slice(0, length).join(' ')\n}\n\n/*\n  Check if gives string is a palindrome with given length\n  >>> isPalindromeWithLengthAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndSpaceAndSpace('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndSpaceAndSpace('aba', 1)\n  true\n  */\nconst isPalindromeWithLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text === text.split('').reverse().slice(0, length).join(' ')\n}\n\n/*\n  Check if gives string is a palindrome with given length\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 1)\n  true\n  */\nconst isPalindromeWithLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text === text.split('').reverse().slice(0, length).join(' ')\n}\n\n/*\n  Check if gives string is a palindrome with given length\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 1)\n  true\n  */\nconst isPalindromeWithLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text === text.split('').reverse().slice(0, length).join(' ')\n}\n\n/*\n  Check if gives string is a palindrome with given length\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 1)\n  true\n  */\nconst isPalindromeWithLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text === text.split('').reverse().slice(0, length).join(' ')\n}\n\n/*\n  Check if gives string is a palindrome with given length\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 1)\n  true\n  */\nconst isPalindromeWithLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text === text.split('').reverse().slice(0, length).join(' ')\n}\n\n/*\n  Check if gives string is a palindrome with given length\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 1)\n  true\n  */\nconst isPalindromeWithLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text === text.split('').reverse().slice(0, length).join(' ')\n}\n\n/*\n  Check if gives string is a palindrome with given length\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 1)\n  true\n  */\nconst isPalindromeWithLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text === text.split('').reverse().slice(0, length).join(' ')\n}\n\n/*\n  Check if gives string is a palindrome with given length\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 1)\n  true\n  */\nconst isPalindromeWithLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text === text.split('').reverse().slice(0, length).join(' ')\n}\n\n/*\n  Check if gives string is a palindrome with given length\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 1)\n  true\n  */\nconst isPalindromeWithLengthAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text === text.split('').reverse().slice(0, length).join(' ')\n}\n\n/*\n  Check if gives string is a palindrome with given length\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndSpaceAndSpaceAndSpace('ab"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 1) return NaN;\n  if (p === 1) return n;\n  if (p === 2) return (n * (n - 1)) % p;\n  if (p === 3) return ((n - 1) * (n - 2)) % p;\n  if (p === 4) return ((n - 1) * (n - 3)) % p;\n  if (p === 5) return ((n - 1) * (n - 4)) % p;\n  if (p === 6) return ((n - 1) * (n - 5)) % p;\n  if (p === 7) return ((n - 1) * (n - 6)) % p;\n  if (p === 8) return ((n - 1) * (n - 7)) % p;\n  if (p === 9) return ((n - 1) * (n - 8)) % p;\n  if (p === 10) return ((n - 1) * (n - 9)) % p;\n  if (p === 11) return ((n - 1) * (n - 10)) % p;\n  if (p === 12) return ((n - 1) * (n - 11)) % p;\n  if (p === 13) return ((n - 1) * (n - 12)) % p;\n  if (p === 14) return ((n - 1) * (n - 13)) % p;\n  if (p === 15) return ((n - 1) * (n - 14)) % p;\n  if (p === 16) return ((n - 1) * (n - 15)) % p;\n  if (p === 17) return ((n - 1) * (n - 16)) % p;\n  if (p === 18) return ((n - 1) * (n - 17)) % p;\n  if (p === 19) return ((n - 1) * (n - 18)) % p;\n  if (p === 20) return ((n - 1) * (n - 19)) % p;\n  if (p === 21) return ((n - 1) * (n - 20)) % p;\n  if (p === 22) return ((n - 1) * (n - 21)) % p;\n  if (p === 23) return ((n - 1) * (n - 22)) % p;\n  if (p === 24) return ((n - 1) * (n - 23)) % p;\n  if (p === 25) return ((n - 1) * (n - 24)) % p;\n  if (p === 26) return ((n - 1) * (n - 25)) % p;\n  if (p === 27) return ((n - 1) * (n - 26)) % p;\n  if (p === 28) return ((n - 1) * (n - 27)) % p;\n  if (p === 29) return ((n - 1) * (n - 28)) % p;\n  if (p === 30) return ((n - 1) * (n - 29)) % p;\n  if (p === 31) return ((n - 1) * (n - 30)) % p;\n  if (p === 32) return ((n - 1) * (n - 31)) % p;\n  if (p === 33) return ((n - 1) * (n - 32)) % p;\n  if (p === 34) return ((n - 1) * (n - 33)) % p;\n  if (p === 35) return ((n - 1) * (n - 34)) % p;\n  if (p === 36) return ((n - 1) * (n - 35)) % p;\n  if (p === 37) return ((n - 1) * (n - 36)) % p;\n  if (p === 38) return ((n - 1) * (n - 37)) % p;\n  if (p === 39) return ((n - 1) * (n - 38)) % p;\n  if (p === 40) return ((n - 1) * (n - 39)) % p;\n  if (p === 41) return ((n - 1) * (n - 40)) % p;\n  if (p === 42) return ((n - 1) * (n - 41)) % p;\n  if (p === 43) return ((n - 1) * (n - 42)) % p;\n  if (p === 44) return ((n - 1) * (n - 43)) % p;\n  if (p === 45) return ((n - 1) * (n - 44)) % p;\n  if (p === 46) return ((n - 1) * (n - 45)) % p;\n  if (p === 47) return ((n - 1) * (n - 46)) % p;\n  if (p === 48) return ((n - 1) * (n - 47)) % p;\n  if (p === 49) return ((n - 1) * (n - 48)) % p;\n  if (p === 50) return ((n - 1) * (n - 49)) % p;\n  if (p === 51) return ((n - 1) * (n - 50)) % p;\n  if (p === 52) return ((n - 1) * (n - 51)) % p;\n  if (p === 53) return ((n - 1) * (n - 52)) % p;\n  if (p === 54) return ((n - 1) * (n - 53)) % p;\n  if (p === 55) return ((n - 1) * (n - 54)) % p;\n  if (p === 56) return ((n - 1) * (n - 55)) % p;\n  if (p === 57) return ((n - 1) * (n - 56)) % p;\n  if (p === 58) return ((n - 1) * (n - 57)) % p;\n  if (p === 59) return ((n - 1) * (n - 58)) % p;\n  if (p === 60) return ((n - 1) * (n - 59)) % p;\n  if (p === 61) return ((n - 1) * (n - 60)) % p;\n  if (p === 62) return ((n - 1) * (n - 61)) % p;\n  if (p === 63) return ((n - 1) * (n - 62)) % p;\n  if (p === 64) return ((n - 1) * (n - 63)) % p;\n  if (p === 65) return ((n - 1) * (n - 64)) % p;\n  if (p === 66) return ((n - 1) * (n - 65)) % p;\n  if (p === 67) return ((n - 1) * (n - 66)) % p;\n  if (p === 68) return ((n - 1) * (n - 67)) % p;\n  if (p === 69) return ((n - 1) * (n - 68)) % p;\n  if (p === 70) return ((n - 1) * (n - 69)) % p;\n  if (p === 71) return ((n - 1) * (n - 70)) % p;\n  if (p === 72) return ((n - 1) * (n - 71)) % p;\n  if (p === 73) return ((n - 1) * (n - 72)) % p;\n  if (p === 74) return ((n - 1) * (n - 73)) % p;\n  if (p === 75) return ((n - 1) * (n - 74)) % p;\n  if (p === 76) return ((n - 1) * (n - 75)) % p;\n  if (p === 77) return ((n - 1) * (n - 76)) % p;\n  if (p === 78) return ((n - 1) * (n - 77)) % p;\n  if (p === 79) return ((n - 1) * (n - 78)) % p;\n  if (p === 80) return ((n - 1) * (n - 79)) % p;\n  if (p === 81) return ((n - 1) * (n - 80)) % p;\n  if (p === 82) return ((n - 1) * (n - 81)) % p;\n  if (p === 83) return ((n - 1) * (n - 82)) % p;\n  if (p === 84) return ((n - 1) * (n - 83)) % p;\n  if (p === 85) return ((n - 1) * (n - 84)) % p;\n  if (p === 86) return ((n - 1) * (n - 85)) % p;\n  if (p === 87) return ((n - 1) * (n - 86)) % p;\n  if (p === 88) return ((n - 1) * (n - 87)) % p;\n  if (p === 89) return ((n - 1) * (n - 88)) % p;\n  if (p === 90) return ((n - 1) * (n - 89)) % p;\n  if (p === 91) return ((n - 1) * (n - 90)) % p;\n  if (p === 92) return ((n - 1) * (n - 91)) % p;\n  if (p === 93) return ((n - 1) * (n - 92)) % p;\n  if (p === 94) return ((n - 1) * (n - 93)) % p;\n  if (p === 95) return ((n - 1) * (n - 94)) % p;\n  if (p === 96) return ((n - 1) * (n - 95)) % p;\n  if (p === 97) return ((n - 1) * (n - 96)) % p;"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encode = (s) => { return encodeShift(s)\n.split(\"\").map(ch => ch.charCodeAt(0) - \"a\".charCodeAt(0) + 5).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decode = (s) => { return decodeShift(s)\n.split(\"\").map(ch => ch.charCodeAt(0) - \"a\".charCodeAt(0) + 5).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToBytes = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToBytes = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToHex = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0).toString(16)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToHex = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0).toString(16)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToAscii = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToAscii = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToBase64 = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToBase64 = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToBase64URLSafe = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToBase64URLSafe = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToHexURLSafe = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToHexURLSafe = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToUnicode = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToUnicode = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToLatin1 = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToLatin1 = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToUtf8 = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToUtf8 = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToUtf16 = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToUtf16 = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToLatin2 = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToLatin2 = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToUtf32 = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToUtf32 = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToUtf8URLSafe = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToUtf8URLSafe = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToLatin1URLSafe = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToLatin1URLSafe = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToUtf8Safe = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToUtf8Safe = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const encodeToLatin2Safe = (s) => { return encode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeToLatin2Safe = (s) => { return decode(s).split(\"\").map(ch => ch.charCodeAt(0)).joins(\"\"); } /* takes as input string encoding "}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('');\n  let newText = '';\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText += vowels[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('');\n  let newText = '';\n  for (let i = 0; i < punctuation.length; i++) {\n    if (punctuation[i] === '.' || punctuation[i] === '!' || punctuation[i] === '?' || punctuation[i] === '-' || punctuation[i] === '_') {\n      newText += punctuation[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeNumbers is a function that takes string and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = text.split('');\n  let newText = '';\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === '0' || numbers[i] === '1' || numbers[i] === '2' || numbers[i] === '3' || numbers[i] === '4' || numbers[i] === '5' || numbers[i] === '6' || numbers[i] === '7' || numbers[i] === '8' || numbers[i] === '9') {\n      newText += numbers[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhiteSpace is a function that takes string and returns string without white space.\n  >>> removeWhiteSpace('')\n  ''\n  >>> removeWhiteSpace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhiteSpace('abcdef')\n  'abcdef'\n  >>> removeWhiteSpace('aaaaa')\n  ''\n  >>> removeWhiteSpace('aaBAA')\n  'B'\n  >>> removeWhiteSpace('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpace = (text) => {\n  let whiteSpace = text.split('');\n  let newText = '';\n  for (let i = 0; i < whiteSpace.length; i++) {\n    if (whiteSpace[i] ==='' || whiteSpace[i] === '\\t' || whiteSpace[i] === '\\n' || whiteSpace[i] === '\\r' || whiteSpace[i] === '\\v' || whiteSpace[i] === '\\f') {\n      newText += whiteSpace[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhiteSpaces is a function that takes string and returns string without white spaces.\n  >>> removeWhiteSpaces('')\n  ''\n  >>> removeWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeWhiteSpaces('aaaaa')\n  ''\n  >>> removeWhiteSpaces('aaBAA')\n  'B'\n  >>> removeWhiteSpaces('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpaces = (text) => {\n  let whiteSpaces = text.split('');\n  let newText = '';\n  for (let i = 0; i < whiteSpaces.length; i++) {\n    if (whiteSpaces[i] === '' || (whiteSpaces[i] === '\\t' && whiteSpaces[i + 1] === '\\n') || (whiteSpaces[i] === '\\n' && whiteSpaces[i + 1] === '\\r') || (whiteSpaces[i] === '\\r' && whiteSpaces[i + 1] === '\\t')) {\n      newText += whiteSpaces[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhiteSpaces is a function that takes string and returns string without white spaces.\n  >>> removeWhiteSpaces (' ')\n  ''\n  >>> removeWhiteSpaces ('\\t\\n\\r')\n  '\\t\\n\\r'\n  >>> removeWhiteSpaces ('\\n')\n  '\\n'\n  >>> removeWhiteSpaces ('\\r')\n  '\\r'\n  >>> removeWhiteSpaces ('\\v\\f')\n  '\\v\\f'\n  */\nconst removeWhiteSpaces = (text) => {\n  let whiteSpaces = text.split('');\n  let newText = '';\n  for (let i = 0; i < whiteSpaces.length; i++) {\n    if (whiteSpaces[i] === '' || (whiteSpaces[i] === '\\t' && whiteSpaces[i + 1] === '\\n') || (whiteSpaces[i] === '\\n' && whiteSpaces[i + 1] === '\\r') || (whiteSpaces[i] === '\\r' && whiteSpaces[i + 1] === '\\t')) {\n      newText += whiteSpaces[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhiteSpaces is a function that takes string and returns string without white spaces.\n  >>> removeWhiteSpaces (' ')\n  ''\n  >>> removeWhiteSpaces ('\\t\\n\\r')\n  '\\t\\n\\r'\n  >>> removeWhiteSpaces ('\\n')\n  '\\n'\n  >>> removeWhiteSpaces ('\\r')\n  '\\r'\n  >>> removeWhiteSpaces ('\\v\\f')\n  '\\v\\f'\n  */\nconst removeWhiteSpaces = (text) => {\n  let whiteSpaces = text.split('');\n  let newText = '';\n  for (let i = 0; i < whiteSpaces.length; i++) {\n    if (whiteSpaces[i] === '' || (whiteSpaces[i] === '\\t' && whiteSpaces[i + 1] === '\\n') || (whiteSpaces[i] === '\\n' && whiteSpaces[i + 1] === '\\r') || (whiteSpaces[i] === '\\r' && whiteSpaces[i + 1] === '\\t')) {\n      newText += whiteSpaces[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhiteSpaces is a function that takes string and returns string without white spaces.\n  >>> removeWhiteSpaces (' ')\n  ''\n  >>> removeWhiteSpaces ('\\t\\n\\r')\n  '\\t\\n\\r'\n  >>> removeWhiteSpaces ('\\n')\n  '\\n'\n  >>> removeWhiteSpaces ('\\r')\n  '\\r'\n  >>> removeWhiteSpaces ('\\v\\f')\n  '\\v\\f'\n  */\nconst removeWhiteSpaces = (text) => {\n  let whiteSpaces = text.split('');\n  let newText = '';\n  for (let i = 0; i < whiteSpaces.length; i++) {\n    if (whiteSpaces[i] === '' || (whiteSpaces[i] === '\\t' && whiteSpaces[i + 1] === '\\n') || (whiteSpaces[i] === '\\n' && whiteSpaces[i + 1] === '\\r') || (whiteSpaces[i] === '\\r' && whiteSpaces[i + 1] === '\\t')) {\n      newText += whiteSpaces[i];\n    }\n  }\n  return newText;\n};\n\n/*"}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*Return trueer if all numbers in the list l was above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 2)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 2)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by n.\n  "}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst mod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powMod = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowMod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowModPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowMod = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowModPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowModPowMod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowModPowModPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowModPowMod = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowModPowModPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowModPowModPowMod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowModPowModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPowModPowModPowMod = ("}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two word have the same length.\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLength('abcd', 'dddddddabc')\n  true\n  >>> sameLength('dddddddabc', 'abcd')\n  true\n  >>> sameLength('eabcd', 'dddddddabc')\n  false\n  >>> sameLength('abcd', 'dddddddabce')\n  false\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLength = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two word have the same capitalization.\n  >>> sameCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCaps('abcd', 'dddddddabc')\n  true\n  >>> sameCaps('dddddddabc', 'abcd')\n  true\n  >>> sameCaps('eabcd', 'dddddddabc')\n  false\n  >>> sameCaps('abcd', 'dddddddabce')\n  false\n  >>> sameCaps('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCaps = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two word have the same punctuation.\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePunct('abcd', 'dddddddabc')\n  true\n  >>> samePunct('dddddddabc', 'abcd')\n  true\n  >>> samePunct('eabcd', 'dddddddabc')\n  false\n  >>> samePunct('abcd', 'dddddddabce')\n  false\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePunct = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two word have the same capitalization and punctuation.\n  >>> sameCapsAndPunct('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCapsAndPunct('abcd', 'dddddddabc')\n  true\n  >>> sameCapsAndPunct('dddddddabc', 'abcd')\n  true\n  >>> sameCapsAndPunct('eabcd', 'dddddddabc')\n  false\n  >>> sameCapsAndPunct('abcd', 'dddddddabce')\n  false\n  >>> sameCapsAndPunct('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCapsAndPunct = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two word have the same capitalization and punctuation and length.\n  >>> sameCapsAndPunctAndLength('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCapsAndPunctAndLength('abcd', 'dddddddabc')\n  true\n  >>> sameCapsAndPunctAndLength('dddddddabc', 'abcd')\n  true\n  >>> sameCapsAndPunctAndLength('eabcd', 'dddddddabc')\n  false\n  >>> sameCapsAndPunctAndLength('abcd', 'dddddddabce')\n  false\n  >>> sameCapsAndPunctAndLength('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCapsAndPunctAndLength = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two word have the same capitalization and punctuation and length.\n  >>> sameCapsAndPunctAndLengthAndLength('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCapsAndPunctAndLengthAndLength('abcd', 'dddddddabc')\n  true\n  >>> sameCapsAndPunctAndLengthAndLength('dddddddabc', 'abcd')\n  true\n  >>> sameCapsAndPunctAndLengthAndLength('eabcd', 'dddddddabc')\n  false\n  >>> sameCapsAndPunctAndLengthAndLength('abcd', 'dddddddabce')\n  false\n  >>> sameCapsAndPunctAndLengthAndLength('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCapsAndPunctAndLengthAndLength = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two word have the same capitalization and punctuation and length.\n  >>> sameCapsAnd"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(8)\n  21\n  >>> fib(9)\n  34\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n  >>> fib(16)\n  987\n  >>> fib(17)\n  1597\n  >>> fib(18)\n  2584\n  >>> fib(19)\n  4181\n  >>> fib(20)\n  6765\n  >>> fib(21)\n  13414\n  >>> fib(22)\n  2584\n  >>> fib(23)\n  4181\n  >>> fib(24)\n  6765\n  >>> fib(25)\n  13414\n  >>> fib(26)\n  2584\n  >>> fib(27)\n  4181\n  >>> fib(28)\n  6765\n  >>> fib(29)\n  13414\n  >>> fib(30)\n  2584\n  >>> fib(31)\n  4181\n  >>> fib(32)\n  6765\n  >>> fib(33)\n  13414\n  >>> fib(34)\n  2584\n  >>> fib(35)\n  4181\n  >>> fib(36)\n  6765\n  >>> fib(37)\n  13414\n  >>> fib(38)\n  2584\n  >>> fib(39)\n  4181\n  >>> fib(40)\n  6765\n  >>> fib(41)\n  13414\n  >>> fib(42)\n  2584\n  >>> fib(43)\n  4181\n  >>> fib(44)\n  6765\n  >>> fib(45)\n  13414\n  >>> fib(46)\n  2584\n  >>> fib(47)\n  4181\n  >>> fib(48)\n  6765\n  >>> fib(49)\n  13414\n  >>> fib(50)\n  2584\n  >>> fib(51)\n  4181\n  >>> fib(52)\n  6765\n  >>> fib(53)\n  13414\n  >>> fib(54)\n  2584\n  >>> fib(55)\n  4181\n  >>> fib(56)\n  6765\n  >>> fib(57)\n  13414\n  >>> fib(58)\n  2584\n  >>> fib(59)\n  4181\n  >>> fib(60)\n  6765\n  >>> fib(61)\n  13414\n  >>> fib(62)\n  2584\n  >>> fib(63)\n  4181\n  >>> fib(64)\n  6765\n  >>> fib(65)\n  13414\n  >>> fib(66)\n  2584\n  >>> fib(67)\n  4181\n  >>> fib(68)\n  6765\n  >>> fib(69)\n  13414\n  >>> fib(70)\n  2584\n  >>> fib(71)\n  4181\n  >>> fib(72)\n  6765\n  >>> fib(73)\n  13414\n  >>> fib(74)\n  2584\n  >>> fib(75)\n  4181\n  >>> fib(76)\n  6765\n  >>> fib(77)\n  13414\n  >>> fib(78)\n  2584\n  >>> fib(79)\n  4181\n  >>> fib(80)\n  6765\n  >>> fib(81)\n  13414\n  >>> fib(82)\n  2584\n  >>> fib(83)\n  4181\n  >>> fib(84)\n  6765\n  >>> fib(85)\n  13414\n  >>> fib(86)\n  2584\n  >>> fib(87)\n  4181\n  >>> fib(88)\n  6765\n  >>> fib(89)\n  13414\n  >>> fib(90)\n  2584\n  >>> fib(91)\n  4181\n  >>> fib(92)\n  6765\n  >>> fib(93)\n  13414\n  >>> fib(94)\n  2584\n  >>> fib(95)\n  4181\n  >>> fib(96)\n  6765\n  >>> fib(97)\n  13414\n  >>> fib(98)\n  2584\n  >>> fib(99)\n  4181\n  >>> fib(100)\n  6765\n  >>> fib(101)\n  13414\n  >>> fib(102)\n  2584\n  >>> fib(103)\n  4181\n  >>> fib(104)\n  6765\n  >>> fib(105)\n  13414\n  >>> fib(106)\n  2584\n  >>> fib(107)\n  4181\n  >>> fib(108)\n  6765\n  >>> fib(109)\n  13414\n  >>> fib(110)\n  2584\n  >>> fib(111)\n  4181\n  >>> fib(112)\n  6765\n  >>> fib(113)\n  13414\n  >>> fib(114)\n  2584\n  >>> fib(115)\n  4181\n  >>> fib(116)\n  6765\n  >>> fib(117)\n  13414\n  >>> fib(118)\n  2584\n  >>> fib(119)\n  4181\n  >>> fib(120)\n  6765\n  >>> fib(121)\n  13414\n  >>> fib(122)\n  2584\n  >>> fib(123)\n  4181\n  >>> fib(124)\n  6765\n  >>> fib(125)\n  13414\n  >>> fib(126)\n  2584\n  >>> fib(127)\n  4181\n  >>> fib(128)\n  6765\n  >>> fib(129)\n  13414\n  >>> fib(130)\n  2584\n  >>> fib(131)\n  4181\n  >>> fib(132)\n  6765\n  >>> fib(133)\n  13414\n  >>> fib(134)\n  2584\n  >>> fib(135)\n  4181\n  >>> fib(136)\n  6765\n  >>> fib(137)\n  13414\n  >>> fib(138)\n  2584\n  >>> fib(139)\n  4181\n  >>> fib(140)\n  6765\n  >>> fib(141)\n  13414\n  >>> fi"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\");\n  const closingBrackets = brackets.split(\"<\");\n  return openingBrackets.every(opening => closingBrackets.every(closing => opening === closing));\n};\n\n/**\n * Given a string, return true if it contains only lowercase letters.\n * Otherwise, return false.\n */\nconst isLowerCase = str => {\n  return str && str.length === 1 && str.toLowerCase() === str;\n};\n\n/**\n * Given a string, return true if it contains only uppercase letters.\n * Otherwise, return false.\n */\nconst isUpperCase = str => {\n  return str && str.length === 1 && str.toUpperCase() === str;\n};\n\n/**\n * Given a string, return true if it contains only numbers and letters.\n * Otherwise, return false.\n */\nconst isDigits = str => {\n  return str && str.length === 1 && isLowerCase(str) && isUpperCase(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLettersAndDigits = str => {\n  return str && str.length === 1 && isLowerCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLetters = str => {\n  return str && str.length === 1 && isLowerCase(str);\n};\n\n/**\n * Given a string, return true if it contains only numbers and letters.\n * Otherwise, return false.\n */\nconst isDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLettersAndDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLetters = str => {\n  return str && str.length === 1 && isLowerCase(str);\n};\n\n/**\n * Given a string, return true if it contains only numbers and letters.\n * Otherwise, return false.\n */\nconst isDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLettersAndDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLetters = str => {\n  return str && str.length === 1 && isLowerCase(str);\n};\n\n/**\n * Given a string, return true if it contains only numbers and letters.\n * Otherwise, return false.\n */\nconst isDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLettersAndDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLetters = str => {\n  return str && str.length === 1 && isLowerCase(str);\n};\n\n/**\n * Given a string, return true if it contains only numbers and letters.\n * Otherwise, return false.\n */\nconst isDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLettersAndDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLetters = str => {\n  return str && str.length === 1 && isLowerCase(str);\n};\n\n/**\n * Given a string, return true if it contains only numbers and letters.\n * Otherwise, return false.\n */\nconst isDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLettersAndDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLetters = str => {\n  return str && str.length === 1 && isLowerCase(str);\n};\n\n/**\n * Given a string, return true if it contains only numbers and letters.\n * Otherwise, return false.\n */\nconst isDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLettersAndDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLetters = str => {\n  return str && str.length === 1 && isLowerCase(str);\n};\n\n/**\n * Given a string, return true if it contains only numbers and letters.\n * Otherwise, return false.\n */\nconst isDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLettersAndDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLetters = str => {\n  return str && str.length === 1 && isLowerCase(str);\n};\n\n/**\n * Given a string, return true if it contains only numbers and letters.\n * Otherwise, return false.\n */\nconst isDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLettersAndDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers.\n * Otherwise, return false.\n */\nconst isLetters = str => {\n  return str && str.length === 1 && isLowerCase(str);\n};\n\n/**\n * Given a string, return true if it contains only numbers and letters.\n * Otherwise, return false.\n */\nconst isDigits = str => {\n  return str && str.length === 1 && isUpperCase(str) && isDigits(str);\n};\n\n/**\n * Given a string, return true if it contains only letters and numbers."}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let l = l.reverse();\n  while (l && l[j] < l[i]) {\n    i++;\n    j--;\n  }\n  return i === j;\n};\n\n/**\n * Return true if list elements was monotonically decreasing.\n * >>> monotonic([10, 20, 30, 40])\n * true\n * >>> monotonic([10, 20, 30, 40])\n * false\n * >>> monotonic([10, 20, 30, 40])\n * true\n */\nconst monotonicDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let l = l.reverse();\n  while (l && l[j] > l[i]) {\n    j--;\n  }\n  return i === j;\n};\n\n/**\n * Return true if list elements was monotonically increasing.\n * >>> monotonicDecreasing([10, 20, 30, 40])\n * true\n * >>> monotonicDecreasing([10, 20, 30, 40])\n * false\n * >>> monotonicDecreasing([10, 20, 30, 40])\n * true\n */\nconst monotonicIncreasing = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let l = l.reverse();\n  while (l && l[j] < l[i]) {\n    i++;\n    j--;\n  }\n  return i === j;\n};\n\n/**\n * Return true if list elements was monotonically decreasing.\n * >>> monotonicIncreasing([10, 20, 30, 40])\n * true\n * >>> monotonicIncreasing([10, 20, 30, 40])\n * false\n * >>> monotonicIncreasing([10, 20, 30, 40])\n * true\n */\nconst monotonicIncreasingDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let l = l.reverse();\n  while (l && l[j] > l[i]) {\n    j--;\n  }\n  return i === j;\n};\n\n/**\n * Return true if list elements was monotonically increasing.\n * >>> monotonicIncreasingDecreasing([10, 20, 30, 40])\n * true\n * >>> monotonicIncreasingDecreasing([10, 20, 30, 40])\n * false\n * >>> monotonicIncreasingDecreasing([10, 20, 30, 40])\n * true\n */\nconst monotonicIncreasingDecreasingDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let l = l.reverse();\n  while (l && l[j] < l[i]) {\n    i++;\n    j--;\n  }\n  return i === j;\n};\n\n/**\n * Return true if list elements was monotonically decreasing.\n * >>> monotonicIncreasingDecreasingDecreasing([10, 20, 30, 40])\n * true\n * >>> monotonicIncreasingDecreasingDecreasing([10, 20, 30, 40])\n * false\n * >>> monotonicIncreasingDecreasingDecreasing([10, 20, 30, 40])\n * true\n */\nconst monotonicIncreasingDecreasingDecreasingDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let l = l.reverse();\n  while (l && l[j] > l[i]) {\n    j--;\n  }\n  return i === j;\n};\n\n/**\n * Return true if list elements was monotonically increasing.\n * >>> monotonicIncreasingDecreasingDecreasing([10, 20, 30, 40])\n * true\n * >>> monotonicIncreasingDecreasingDecreasingDecreasing([10, 20, 30, 40])\n * false\n * >>> monotonicIncreasingDecreasingDecreasingDecreasing([10, 20, 30, 40])\n * true\n */\nconst monotonicIncreasingDecreasingDecreasingDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let l = l.reverse();\n  while (l && l[j] < l[i]) {\n    i++;\n    j--;\n  }\n  return i === j;\n};\n\n/**\n * Return true if list elements was monotonically increasing.\n * >>> monotonicIncreasingDecreasingDecreasingDecreasing([10, 20, 30, 40])\n * true\n * >>> monotonicIncreasingDecreasingDecreasingDecreasing([10, 20, 30, 40])\n * false\n * >>> monotonicIncreasingDecreasingDecreasingDecreasing([10, 20, 30, 40])\n * true\n */\nconst monotonicIncreasingDecreasingDecreasingDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let l = l.reverse();\n  while (l && l[j] > l[i]) {\n    j--;\n  }\n  return i === j;\n};\n\n/**\n * Return true if list elements was monotonically increasing.\n * >>> monotonicIncreasingDecreasingDecreasingDecreasing([10, 20, 30, 40])\n * true\n * >>> monotonicIncreasingDecreasingDecreasingDecreasing([10, 20, 30, 40])\n * false\n * >>> monotonicIncreasingDecreasingDecreasingDecreasing([10, 20, 30, 40])\n * true\n */\nconst monotonicIncreasingDecreasingDecreasingDecreasingDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let l = l.reverse();\n  while (l && l[j] < l[i]) {\n    i++;\n    j--;\n  }\n  return i === j;\n};\n\n/**\n * Return true if list elements was monotonically increasing.\n * >>> monotonicIncreasingDecreasingDecreasingDecreasing([10, 20, 30, 40])\n * true\n * >>> monotonicIncreasingDecreasingDecreasingDecreasing([10, 20, 30, 40])\n * false\n * >>> monotonicIncreasingDecreasingDecreasingDecreasing([10, 20, 30, 40])\n * true\n */\nconst monotonicIncreasingDecreasingDecreasingDecreasingDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let l = l.reverse();\n  while (l && l[j] > l[i]) {\n    j--;\n  }\n  return i === j;\n};\n\n/**\n * Return true if list elements was monotonically increasing.\n * >>> monotonicIncreasingDecreasingDecreasingDecreasing([10, 20, 30, 40])\n * true\n * >>> monotonicIncreasingDecreasingDecreasingDe"}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSort = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result.sort((a, b) => a - b)\n}\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortUnique = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result.sort((a, b) => a - b)\n}\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortUniqueUniqueSort = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result.sort((a, b) => a - b)\n}\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortUniqueSortUnique = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result.sort((a, b) => a - b)\n}\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortUniqueSortUniqueSortUnique = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result.sort((a, b) => a - b)\n}\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortUniqueSortUniqueSortUniqueSortUnique = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result.sort((a, b) => a - b)\n}\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortUniqueSortUniqueSortUniqueSortUniqueSortUnique = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result.sort((a, b) => a - b)\n}\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortUniqueSortUniqueSortUniqueSortUniqueSortUniqueSortUnique = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result.sort((a, b) => a - b)\n}\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortUniqueSortUniqueSortUniqueSortUniqueSortUniqueSortUniqueSort = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return true if n is a prime number.\n  >>> isPrime(123)\n  true\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(150)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236)\n  false\n  >>> isPrime(237)\n  false\n  >>> isPrime(238)\n  false\n  >>> isPrime(239)\n  false\n  >>> isPrime(240)\n  false\n  >>> isPrime(241)\n  false\n  >>> isPrime(242)\n  false\n  >>> isPrime("}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumTo"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/[()]/g);\n  const closingBrackets = brackets.match(/[)]/g);\n  return openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * Returns true if a word is capitalized.\n *\n * >>> isCapitalized(\"hello\")\n * true\n * >>> isCapitalized(\"HELLO\")\n * false\n */\nconst isCapitalized = (word) => {\n  return word[0].toUpperCase() === word;\n};\n\n/**\n * Returns true if a word is lowercased.\n *\n * >>> isLowercased(\"hello\")\n * true\n * >>> isLowercased(\"HELLO\")\n * false\n */\nconst isLowercased = (word) => {\n  return word[0].toLowerCase() === word;\n};\n\n/**\n * Returns true if a word is uppercased.\n *\n * >>> isUppercased(\"hello\")\n * true\n * >>> isUppercased(\"HELLO\")\n * false\n */\nconst isUppercased = (word) => {\n  return word[0].toUpperCase() === word;\n};\n\n/**\n * Returns true if a word is all caps.\n *\n * >>> isAllCaps(\"hello\")\n * true\n * >>> isAllCaps(\"HELLO\")\n * false\n */\nconst isAllCaps = (word) => {\n  return isCapitalized(word) && isLowercased(word) && isUppercased(word);\n};\n\n/**\n * Returns true if a word is all lowercased.\n *\n * >>> isAllLowercased(\"hello\")\n * true\n * >>> isAllLowercased(\"HELLO\")\n * false\n */\nconst isAllLowercased = (word) => {\n  return isLowercased(word) && isCapitalized(word) && isUppercased(word);\n};\n\n/**\n * Returns true if a word is all uppercased.\n *\n * >>> isAllUppercased(\"hello\")\n * true\n * >>> isAllUppercased(\"HELLO\")\n * false\n */\nconst isAllUppercased = (word) => {\n  return isUppercased(word) && isCapitalized(word) && isLowercased(word);\n};\n\n/**\n * Returns true if a word is all caps and all lowercased.\n *\n * >>> isAllCapsAndAllLowercased(\"hello\")\n * true\n * >>> isAllCapsAndAllLowercased(\"HELLO\")\n * false\n */\nconst isAllCapsAndAllLowercased = (word) => {\n  return isAllCaps(word) && isAllLowercased(word);\n};\n\n/**\n * Returns true if a word is all caps and all uppercased.\n *\n * >>> isAllCapsAndAllUppercased(\"hello\")\n * true\n * >>> isAllCapsAndAllUppercased(\"HELLO\")\n * false\n */\nconst isAllCapsAndAllUppercased = (word) => {\n  return isAllCaps(word) && isAllUppercased(word);\n};\n\n/**\n * Returns true if a word is all caps and all lowercased and all uppercased.\n *\n * >>> isAllCapsAndAllLowercasedAndAllUppercased(\"hello\")\n * true\n * >>> isAllCapsAndAllLowercasedAndAllUppercased(\"HELLO\")\n * false\n */\nconst isAllCapsAndAllLowercasedAndAllUppercased = (word) => {\n  return isAllCapsAndAllLowercased(word) && isAllCapsAndAllUppercased(word);\n};\n\n/**\n * Returns true if a word is all caps and all lowercased and all uppercased.\n *\n * >>> isAllCapsAndAllLowercasedAndAllUppercased(\"hello\")\n * true\n * >>> isAllCapsAndAllLowercasedAndAllUppercased(\"HELLO\")\n * false\n */\nconst isAllCapsAndAllLowercasedAndAllUppercasedAndAllCapsAndAllLowercasedAndAllUppercased = (word) => {\n  return isAllCapsAndAllLowercasedAndAllUppercased(word) && isAllCapsAndAllUppercasedAndAllLowercasedAndAllUppercased(word);\n};\n\n/**\n * Returns true if a word is all caps and all lowercased and all uppercased.\n *\n * >>> isAllCapsAndAllLowercasedAndAllUppercasedAndAllCapsAndAllLowercasedAndAllUppercased(\"hello\")\n * true\n * >>> isAllCapsAndAllLowercasedAndAllUppercasedAndAllCapsAndAllLowercasedAndAllUppercased(\"HELLO\")\n * false\n */\nconst isAllCapsAndAllLowercasedAndAllUppercasedAndAllCapsAndAllLowercasedAndAllUppercasedAndAllCapsAndAllLowercasedAndAllUppercased = (word) => {\n  return isAllCapsAndAllLowercasedAndAllUppercased(word) && isAllCapsAndAllUppercasedAndAllLowercasedAndAllUppercased(word);\n};\n\n/**\n * Returns true if a word is all caps and all lowercased and all uppercased.\n *\n * >>> isAllCapsAndAllLowercasedAndAllUppercasedAndAllCapsAndAllLowercasedAndAllUppercased(\"hello\")\n * true\n * >>> isAllCapsAndAllLowercasedAndAllUppercasedAndAllCapsAndAllLowercasedAndAllUppercased(\"HELLO\")\n * false\n */\nconst isAllCapsAndAllLowercasedAndAllUppercasedAndAllCapsAndAllLowercasedAndAllUppercasedAndAllCapsAndAllLowercasedAndAllUppercasedAndAllCapsAndAllLowercasedAndAllUppercased = (word) => {\n  return isAllCapsAndAllLowercasedAndAllUppercased(word) && isAllCapsAndAllUppercasedAndAllLowercasedAndAllUppercased(word);\n};\n\n/**\n * Returns true if a word is all caps and all lowercased and all uppercased.\n *\n * >>> isAllCapsAndAllLowercasedAndAllUppercasedAndAllCapsAndAllLowercasedAndAllUppercased(\"hello\")\n * true\n * >>> isAllCapsAndAllLowercasedAndAllUppercasedAndAllCapsAndAllLowercasedAndAllUppercased(\"HELLO\")\n * false\n */\nconst isAllCapsAndAllLowercasedAndAllUppercasedAndAllCapsAndAllLowercasedAndAllUppercasedAndAllCapsAndAllLowercasedAndAllUppercasedAndAllCapsAndAllLowercasedAndAllUppercased = (word) => {\n  return isAllCapsAndAllLowercasedAndAllUppercased(word) && isAllCapsAndAllUppercasedAndAllLowercasedAndAllUppercased(word);\n};\n\n/**\n * Returns true if a word is all caps and all lowercased and all uppercased.\n *"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let sum = 0;\n  let x = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * x;\n    x += 1;\n  }\n  return [sum, x - sum];\n};\n\n/**\n * Calculate a polynomial coefficient\n * x^3 + x^2 + x\n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * "}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th Fibonacci number in the Fibonacci sequence fibfib(n).\n fibfib(n) returns the n-th "}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsIndex = 0;\n  let vowelsLength = 0;\n  let vowelsLastIndex = 0;\n  let vowelsLastLength = 0;\n  let vowelsLastLastIndex = 0;\n  let vowelsLastLastLength = 0;\n  let vowelsLastLastLastIndex = 0;\n  let vowelsLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLastLastLastIndex = 0;\n  let vowelsLastLastLastLastLength = 0;\n  let vowelsLastLast"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digit = parseInt(x, 10);\n  let reversedDigit = digit % 10;\n  let reversedDigitString = reversedDigit + \"\";\n  let reversedDigitStringReversed = reversedDigitString.split(\"\").reverse().join(\"\");\n  let reversedDigitStringReversedDigit = reversedDigitStringReversed.split(\"\").reverse().join(\"\");\n  let reversedDigitStringReversedDigitReversed = reversedDigitStringReversedDigit.split(\"\").reverse().join(\"\");\n  let reversedDigitStringReversedDigitReversedDigit = reversedDigitStringReversedDigitReversed.split(\"\").reverse().join(\"\");\n  let reversedDigitStringReversedDigitReversedDigitReversed = reversedDigitStringReversedDigitReversedDigit.split(\"\").reverse().join(\"\");\n  let reversedDigitStringReversedDigitReversedDigitReversedDigit = reversedDigitStringReversedDigitReversedDigitReversed.split(\"\").reverse().join(\"\");\n  let reversedDigitStringReversedDigitReversedDigitReversedDigitReversed = reversedDigitStringReversedDigitReversedDigitReversedDigitReversed.split(\"\").reverse().join(\"\");\n  let reversedDigitStringReversedDigitReversedDigitReversedDigitReversedDigit = reversedDigitStringReversedDigitReversedDigitReversedDigitReversedDigitReversed.split(\"\").reverse().join(\"\");\n  let reversedDigitStringReversedDigitReversedDigitReversedDigitReversedDigitReversed = reversedDigitStringReversedDigitReversedDigitReversedDigitReversedDigitReversed.split(\"\").reverse().join(\"\");\n  let reversedDigitStringReversedDigitReversedDigitReversedDigitReversedDigitReversedDigit = reversedDigitStringReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversed.split(\"\").reverse().join(\"\");\n  let reversedDigitStringReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversed = reversedDigitStringReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversed.split(\"\").reverse().join(\"\");\n  let reversedDigitStringReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversed = reversedDigitStringReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversed.split(\"\").reverse().join(\"\");\n  let reversedDigitStringReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversed = reversedDigitStringReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversedDigitReversed"}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the lower character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower case ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 32;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower case ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower case ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower case ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower case ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 95;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower case ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 94;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower case ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 93;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower case ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 92;\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower case ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 91;\n  }\n  return sum;\n};\n\n/*"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let fruits = [];\n  let fruitCount = 0;\n  let fruitCount2 = 0;\n  let fruitCount3 = 0;\n  let fruitCount4 = 0;\n  let fruitCount5 = 0;\n  let fruitCount6 = 0;\n  let fruitCount7 = 0;\n  let fruitCount8 = 0;\n  let fruitCount9 = 0;\n  let fruitCount10 = 0;\n  let fruitCount11 = 0;\n  let fruitCount12 = 0;\n  let fruitCount13 = 0;\n  let fruitCount14 = 0;\n  let fruitCount15 = 0;\n  let fruitCount16 = 0;\n  let fruitCount17 = 0;\n  let fruitCount18 = 0;\n  let fruitCount19 = 0;\n  let fruitCount20 = 0;\n  let fruitCount21 = 0;\n  let fruitCount22 = 0;\n  let fruitCount23 = 0;\n  let fruitCount24 = 0;\n  let fruitCount25 = 0;\n  let fruitCount26 = 0;\n  let fruitCount27 = 0;\n  let fruitCount28 = 0;\n  let fruitCount29 = 0;\n  let fruitCount30 = 0;\n  let fruitCount31 = 0;\n  let fruitCount32 = 0;\n  let fruitCount33 = 0;\n  let fruitCount34 = 0;\n  let fruitCount35 = 0;\n  let fruitCount36 = 0;\n  let fruitCount37 = 0;\n  let fruitCount38 = 0;\n  let fruitCount39 = 0;\n  let fruitCount40 = 0;\n  let fruitCount41 = 0;\n  let fruitCount42 = 0;\n  let fruitCount43 = 0;\n  let fruitCount44 = 0;\n  let fruitCount45 = 0;\n  let fruitCount46 = 0;\n  let fruitCount47 = 0;\n  let fruitCount48 = 0;\n  let fruitCount49 = 0;\n  let fruitCount50 = 0;\n  let fruitCount51 = 0;\n  let fruitCount52 = 0;\n  let fruitCount53 = 0;\n  let fruitCount54 = 0;\n  let fruitCount55 = 0;\n  let fruitCount56 = 0;\n  let fruitCount57 = 0;\n  let fruitCount58 = 0;\n  let fruitCount59 = 0;\n  let fruitCount60 = 0;\n  let fruitCount61 = 0;\n  let fruitCount62 = 0;\n  let fruitCount63 = 0;\n  let fruitCount64 = 0;\n  let fruitCount65 = 0;\n  let fruitCount66 = 0;\n  let fruitCount67 = 0;\n  let fruitCount68 = 0;\n  let fruitCount69 = 0;\n  let fruitCount70 = 0;\n  let fruitCount71 = 0;\n  let fruitCount72 = 0;\n  let fruitCount73 = 0;\n  let fruitCount74 = 0;\n  let fruitCount75 = 0;\n  let fruitCount76 = 0;\n  let fruitCount77 = 0;\n  let fruitCount78 = 0;\n  let fruitCount79 = 0;\n  let fruitCount80 = 0;\n  let fruitCount81 = 0;\n  let fruitCount82 = 0;\n  let fruitCount83 = 0;\n  let fruitCount84 = 0;\n  let fruitCount85 = 0;\n  let fruitCount86 = 0;\n  let fruitCount87 = 0;\n  let fruitCount88 = 0;\n  let fruitCount89 = 0;\n  let fruitCount90 = 0;\n  let fruitCount91 = 0;\n  let fruitCount92 = 0;\n  let fruitCount93 = 0;\n  let fruitCount94 = 0;\n  let fruitCount95 = 0;\n  let fruitCount96 = 0;\n  let fruitCount97 = 0;\n  let fruitCount98 = 0;\n  let fruitCount99 = 0;\n  let fruitCount100 = 0;\n  let fruitCount101 = 0;\n  let fruitCount102 = 0;\n  let fruitCount103 = 0;\n  let fruitCount104 = 0;\n  let fruitCount105 = 0;\n  let fruitCount106 = 0;\n  let fruitCount107 = 0;\n  let fruitCount108 = 0;\n  let fruitCount109 = 0;\n  let fruitCount110 = 0;\n  let fruitCount111 = 0;\n  let fruitCount112 = 0;\n  let fruitCount113 = 0;\n  let fruitCount114 = 0;\n  let fruitCount115 = 0;\n  let fruitCount116 = 0;\n  let fruitCount117 = 0;\n  let fruitCount118 = 0;\n  let fruitCount119 = 0;\n  let fruitCount120 = 0;\n  let fruitCount121 = 0;\n  let fruitCount122 = 0;\n  let fruitCount123 = 0;\n  let fruitCount124 = 0;\n  let fruitCount125 = 0;\n  let fruitCount126 = 0;\n  let fruitCount127 = 0;\n  let fruitCount128 = 0;\n  let fruitCount129 = 0;\n  let fruitCount130 = 0;\n  let fruitCount131 = 0;\n  let fruitCount132 = 0;\n  let fruitCount133 = 0;\n  let fruitCount134 = 0;\n  let fruitCount135 = 0;\n  let fruitCount136 = 0;\n  let fruitCount137 = 0;\n  let fruitCount138 = 0;\n  let fruitCount139 = 0;\n  let fruitCount140 = 0;\n  let fruitCount141 = 0;\n  let fruitCount142 = 0;\n  let fruitCount143 = 0;\n  let fruitCount144 = 0;\n  let fruitCount145 = 0;\n  let fruitCount146 = 0;\n  let fruitCount147 = 0;\n  let fruitCount148 = 0;\n  let fruitCount149 = 0;\n  let fruitCount150 = 0;\n  let fruitCount151 = 0;\n  let fruitCount152 = 0;\n  let fruitCount153 = 0;\n  let fruitCount154 = 0;\n  let fruitCount155 = 0;\n  let fruitCount156 = 0;\n  let fruitCount157 = 0;\n  let fruitCount158 = 0;\n  let fruitCount159 = 0;\n  let fruitCount160 = 0;\n  let fruitCount161 = 0;\n  let fruitCount162 = 0;\n  let fruitCount163 = 0;\n  let fruitCount164 = 0;\n  let fruitCount165 = 0;\n  let fruitCount166 = 0;\n  let fruitCount167 = 0;\n  let fruitCount168 = 0;\n  let fruitCount169 = 0;\n  let fruitCount170 = 0;\n  let fruitCount171 = 0;\n  let fruitCount172 = 0;\n  let fruitCount173 = 0;\n  let fruitCount174 = 0;\n  let fruitCount175 = 0;\n  let fruitCount176 = 0;\n  let fruitCount177 = 0;\n  let fruitCount178 = 0;\n  let fruitCount179 = 0;\n  let fruitCount180 = 0;\n  let fruitCount181 = 0;\n  let fruitCount182 = 0;\n  let fruitCount183 = 0;\n  let fruitCount184 = 0;\n  let fruitCount185 = 0;\n  let fruitCount186 = 0;\n  let fruitCount187 = 0;\n  let fruitCount188 = 0;\n  let fruitCount189 = 0;\n  let fruitCount190 = 0;\n  let fruitCount191 = 0;\n  let fruitCount192 = 0;\n  let fruitCount193 = 0;\n  let fruitCount194 = 0;\n  let fruitCount195 = 0;\n  let fruitCount196 = 0;\n  let fruitCount197 = 0;\n  let fruitCount198 = 0;\n  let fruitCount199 = 0;\n  let fruitCount200 = 0;\n  let fruitCount201 = 0;\n  let fruitCount202 = 0;\n  let fruitCount203 = 0;\n  let fruitCount204 = 0;\n  let fruitCount205 = 0;\n  let fruitCount206 = 0;\n  let fruitCount207 = 0;\n  let fruitCount208 = 0;\n  let fruitCount209 = 0;\n  let fruitCount210 = 0;\n  let fruitCount211 = 0;\n  let fruitCount212 = 0;\n  let fruitCount213 = 0;\n  let fruitCount214 = 0;\n  let fruitCount215 = 0;\n  let fruitCount216 = 0;\n  let fruitCount217 = 0;\n  let fruitCount218 = 0;\n  let fruitCount219 = 0;\n  let fruitCount220 = 0;\n  let fruitCount221 = 0;\n  let fruitCount222 = 0;\n  let fruitCount223 = 0;\n  let fruitCount224 = 0;\n  let fruitCount225 = 0;\n  let fruitCount226 = 0;\n  let fruitCount227 = 0;\n  let fruitCount228 = 0;\n  let fruitCount"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      j++;\n      if (j === len) {\n        j = 0;\n        result.push(arr[i]);\n      }\n    }\n  }\n  return result;\n};\n\n// 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 🎨 �"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxInt = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxInt) {\n      max = maxInt;\n      maxInt = lst[i];\n    }\n    if (lst[i] === maxInt) {\n      freq++;\n    }\n  }\n  return max;\n};\n\n/*\n  You were given a list of positive integers. Return the number of positive integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxInt = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxInt) {\n      max = maxInt;\n      maxInt = lst[i];\n    }\n    if (lst[i] === maxInt) {\n      freq++;\n    }\n  }\n  return freq;\n};\n\n/*\n  You were given a list of positive integers. Return the number of positive integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxInt = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxInt) {\n      max = maxInt;\n      maxInt = lst[i];\n    }\n    if (lst[i] === maxInt) {\n      freq++;\n    }\n  }\n  return freq;\n};\n\n/*\n  You were given a list of positive integers. Return the number of positive integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxInt = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxInt) {\n      max = maxInt;\n      maxInt = lst[i];\n    }\n    if (lst[i] === maxInt) {\n      freq++;\n    }\n  }\n  return freq;\n};\n\n/*\n  You were given a list of positive integers. Return the number of positive integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxInt = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxInt) {\n      max = maxInt;\n      maxInt = lst[i];\n    }\n    if (lst[i] === maxInt) {\n      freq++;\n    }\n  }\n  return freq;\n};\n\n/*\n  You were given a list of positive integers. Return the number of positive integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxInt = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxInt) {\n      max = maxInt;\n      maxInt = lst[i];\n    }\n    if (lst[i] === maxInt) {\n      freq++;\n    }\n  }\n  return freq;\n};\n\n/*\n  You were given a list of positive integers. Return the number of positive integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxInt = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxInt) {\n      max = maxInt;\n      maxInt = lst[i];\n    }\n    if (lst[i] === maxInt) {\n      freq++;\n    }\n  }\n  return freq;\n};\n\n/*\n  You were given a list of positive integers. Return the number of positive integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxInt = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxInt) {\n      max = maxInt;\n      maxInt = lst[i];\n    }\n    if (lst[i] === maxInt) {\n      freq++;\n    }\n  }\n  return freq;\n};\n\n/*\n  You were given a list of positive integers. Return the number of positive integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxInt = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxInt) {\n      max = maxInt;\n      maxInt = lst[i];\n    }\n    if (lst[i] === maxInt) {\n      freq++;\n    }\n  }\n  return freq;\n};\n\n/*\n  You were given a list of positive integers. Return the number of positive integers in the list that have a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedList = lst.sort((a, b) => a - b);\n  let sortedList2 = lst.sort((a, b) => b - a);\n  return sortedList.concat(sortedList2);\n};\n\n/*\n  Given a sorted array of integers, return an array of the same length with all elements sorted from smallest to largest.\n\n  Examples:\n  sortedArray([5, 3, 1]) == [3, 1, 5]\n  sortedArray([5, 3, 1]) == [3, 1, 5]\n  sortedArray([]) == []\n  */\nconst sortedArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    sortedArr.push(arr[i]);\n  }\n  return sortedArr;\n};\n\n/*\n  Given a sorted array of integers, return an array of the same length with all elements sorted from largest to smallest.\n\n  Examples:\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([]) == []\n  */\nconst sortedArrayReverse = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    sortedArr.push(arr[i]);\n  }\n  return sortedArr.sort((a, b) => b - a);\n};\n\n/*\n  Given a sorted array of integers, return an array of the same length with all elements sorted from smallest to largest.\n\n  Examples:\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([]) == []\n  */\nconst sortedArrayReverseReverse = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    sortedArr.push(arr[i]);\n  }\n  return sortedArr.sort((a, b) => a - b);\n};\n\n/*\n  Given a sorted array of integers, return an array of the same length with all elements sorted from largest to smallest.\n\n  Examples:\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([]) == []\n  */\nconst sortedArrayReverseReverseReverse = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    sortedArr.push(arr[i]);\n  }\n  return sortedArr.sort((a, b) => b - a);\n};\n\n/*\n  Given a sorted array of integers, return an array of the same length with all elements sorted from smallest to largest.\n\n  Examples:\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([]) == []\n  */\nconst sortedArrayReverseReverseReverseReverse = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    sortedArr.push(arr[i]);\n  }\n  return sortedArr.sort((a, b) => a - b);\n};\n\n/*\n  Given a sorted array of integers, return an array of the same length with all elements sorted from largest to smallest.\n\n  Examples:\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([]) == []\n  */\nconst sortedArrayReverseReverseReverseReverseReverse = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    sortedArr.push(arr[i]);\n  }\n  return sortedArr.sort((a, b) => b - a);\n};\n\n/*\n  Given a sorted array of integers, return an array of the same length with all elements sorted from smallest to largest.\n\n  Examples:\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([]) == []\n  */\nconst sortedArrayReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    sortedArr.push(arr[i]);\n  }\n  return sortedArr.sort((a, b) => a - b);\n};\n\n/*\n  Given a sorted array of integers, return an array of the same length with all elements sorted from largest to smallest.\n\n  Examples:\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([]) == []\n  */\nconst sortedArrayReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    sortedArr.push(arr[i]);\n  }\n  return sortedArr.sort((a, b) => b - a);\n};\n\n/*\n  Given a sorted array of integers, return an array of the same length with all elements sorted from smallest to largest.\n\n  Examples:\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([]) == []\n  */\nconst sortedArrayReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    sortedArr.push(arr[i]);\n  }\n  return sortedArr.sort((a, b) => a - b);\n};\n\n/*\n  Given a sorted array of integers, return an array of the same length with all elements sorted from largest to smallest.\n\n  Examples:\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([]) == []\n  */\nconst sortedArrayReverseReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    sortedArr.push(arr[i]);\n  }\n  return sortedArr.sort((a, b) => b - a);\n};\n\n/*\n  Given a sorted array of integers, return an array of the same length with all elements sorted from smallest to largest.\n\n  Examples:\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([]) == []\n  */\nconst sortedArrayReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    sortedArr.push(arr[i]);\n  }\n  return sortedArr.sort((a, b) => a - b);\n};\n\n/*\n  Given a sorted array of integers, return an array of the same length with all elements sorted from largest to smallest.\n\n  Examples:\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([]) == []\n  */\nconst sortedArrayReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    sortedArr.push(arr[i]);\n  }\n  return sortedArr.sort((a, b) => b - a);\n};\n\n/*\n  Given a sorted array of integers, return an array of the same length with all elements sorted from smallest to largest.\n\n  Examples:\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([5, 3, 1]) == [5, 4, 3]\n  sortedArray([]) == []\n  */\nconst sortedArrayReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    sortedArr.push(arr[i]);\n  }\n  return sortedArr.sort((a, b) => b - a);\n};\n\n/*\n  Given a sorted array of "}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n\n  if (sumA > sumB && sumA > sumC && sumA > sumD) {\n    return sumA - sumB - sumC;\n  }\n\n  if (sumB > sumA && sumB > sumC && sumB > sumD) {\n    return sumB - sumA - sumC;\n  }\n\n  if (sumC > sumA && sumC > sumB && sumC > sumD) {\n    return sumC - sumA - sumB;\n  }\n\n  if (sumD > sumA && sumD > sumB && sumD > sumC) {\n    return sumD - sumA - sumB;\n  }\n\n  if (sumE > sumA && sumE > sumB && sumE > sumC) {\n    return sumE - sumA - sumB;\n  }\n\n  if (sumF > sumA && sumF > sumB && sumF > sumC) {\n    return sumF - sumA - sumB;\n  }\n\n  return -1;\n};\n\n/*\n  Gives the lengths of the four side of a triangles. Return the area of the triangles rounding to 2 decimal point if the four side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n\n  if (sumA > sumB && sumA > sumC && sumA > sumD) {\n    return sumA - sumB - sumC;\n  }\n\n  if (sumB > sumA && sumB > sumC && sumB > sumD) {\n    return sumB - sumA - sumC;\n  }\n\n  if (sumC > sumA && sumC > sumB && sumC > sumD) {\n    return sumC - sumA - sumB;\n  }\n\n  if (sumD > sumA && sumD > sumB && sumD > sumC) {\n    return sumD - sumA - sumB;\n  }\n\n  if (sumE > sumA && sumE > sumB && sumE > sumC) {\n    return sumE - sumA - sumB;\n  }\n\n  if (sumF > sumA && sumF > sumB && sumF > sumC) {\n    return sumF - sumA - sumB;\n  }\n\n  return -1;\n};\n\n/*\n  Gives the lengths of the five side of a triangles. Return the area of the triangles rounding to 2 decimal point if the five side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n\n  if (sumA > sumB && sumA > sumC && sumA > sumD) {\n    return sumA - sumB - sumC;\n  }\n\n  if (sumB > sumA && sumB > sumC && sumB > sumD) {\n    return sumB - sumA - sumC;\n  }\n\n  if (sumC > sumA && sumC > sumB && sumC > sumD) {\n    return sumC - sumA - sumB;\n  }\n\n  if (sumD > sumA && sumD > sumB && sumD > sumC) {\n    return sumD - sumA - sumB;\n  }\n\n  if (sumE > sumA && sumE > sumB && sumE > sumC) {\n    return sumE - sumA - sumB;\n  }\n\n  if (sumF > sumA && sumF > sumB && sumF > sumC) {\n    return sumF - sumA - sumB;\n  }\n\n  return -1;\n};\n\n/*\n  Gives the lengths of the six side of a triangles. Return the area of the triangles rounding to 2 decimal point if the six side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n\n  if (sumA > sumB && sumA > sumC && sumA > sumD) {\n    return sumA - sumB - sumC;\n  }\n\n  if (sumB > sumA && sumB > sumC && sumB > sumD) {\n    return sumB - sumA - sumC;\n  }\n\n  if (sumC > sumA && sumC > sumB && sumC > sumD) {\n    return sumC - sumA - sumB;\n  }\n\n  if (sumD > sumA && sumD > sumB && sumD > sumC) {\n    return sumD - sumA - sumB;\n  }\n\n  if (sumE > sumA && sumE > sumB && sumE > sumC) {\n    return sumE - sumA - sumB;\n  }\n\n  if (sumF > sumA && sumF > sumB && sumF > sumC) {\n    return sumF - sumA - sumB;\n  }\n\n  return -1;\n};\n\n/*\n  Gives the lengths of the seven side of a triangles. Return the area of the triangles rounding to 2 decimal point if the seven side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n\n  if (sumA > sumB && sumA > sumC && sumA > sumD) {\n    return sumA - sumB - sumC;\n  }\n\n  if (sumB > sumA && sumB > sumC && sumB > sumD) {\n    return sumB - sumA - sumC;\n  }\n\n  if (sumC > sumA && sumC > sumB && sumC > sumD) {\n    return sumC - sumA - sumB;\n  }\n\n  if (sumD > sumA && sumD > sumB && sumD > sumC"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = Number.MAX_SAFE_INTEGER;\n  const maxSum = Number.MAX_SAFE_INTEGER;\n  const maxElements = Number.MAX_SAFE_INTEGER;\n\n  for (let i = 0; i < q.length; i++) {\n    const element = q[i];\n    const weight = Math.abs(element);\n    const sum = weight + w;\n\n    if (weight > maxWeight) {\n      maxWeight = weight;\n    }\n\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n\n    if (sum > maxElements) {\n      maxElements = sum;\n    }\n  }\n\n  return maxSum < maxWeight;\n};\n\n/*\n  Writes a function that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balanced and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  balancedAndLessThanOrEqualToMaxWeight([3, 2, 3], 5) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  balancedAndLessThanOrEqualToMaxWeight([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  balancedAndLessThanOrEqualToMaxWeight([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  balancedAndLessThanOrEqualToMaxWeight([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst balancedAndLessThanOrEqualToMaxWeight = (q, w) => {\n  const maxWeight = Number.MAX_SAFE_INTEGER;\n  const maxSum = Number.MAX_SAFE_INTEGER;\n  const maxElements = Number.MAX_SAFE_INTEGER;\n\n  for (let i = 0; i < q.length; i++) {\n    const element = q[i];\n    const weight = Math.abs(element);\n    const sum = weight + w;\n\n    if (weight > maxWeight) {\n      maxWeight = weight;\n    }\n\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n\n    if (sum > maxElements) {\n      maxElements = sum;\n    }\n  }\n\n  return maxSum < maxWeight;\n};\n\n/*\n  Writes a function that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balanced and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  balancedAndLessThanOrEqualToMaxWeight([3, 2, 3], 5) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  balancedAndLessThanOrEqualToMaxWeight([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  balancedAndLessThanOrEqualToMaxWeight([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  balancedAndLessThanOrEqualToMaxWeight([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst balancedAndLessThanOrEqualToMaxWeight = (q, w) => {\n  const maxWeight = Number.MAX_SAFE_INTEGER;\n  const maxSum = Number.MAX_SAFE_INTEGER;\n  const maxElements = Number.MAX_SAFE_INTEGER;\n\n  for (let i = 0; i < q.length; i++) {\n    const element = q[i];\n    const weight = Math.abs(element);\n    const sum = weight + w;\n\n    if (weight > maxWeight) {\n      maxWeight = weight;\n    }\n\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n\n    if (sum > maxElements) {\n      maxElements = sum;\n    }\n  }\n\n  return maxSum < maxWeight;\n};\n\n/*\n  Writes a function that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balanced and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  balancedAndLessThanOrEqualToMaxWeight([3, 2, 3], 5) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  balancedAndLessThanOrEqualToMaxWeight([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  balancedAndLessThanOrEqualToMaxWeight([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  balancedAndLessThanOrEqualToMaxWeight([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst balancedAndLessThanOrEqualToMaxWeight = (q, w) => {\n  const maxWeight = Number.MAX_SAFE_INTEGER;\n  const maxSum = Number.MAX_SAFE_INTEGER;\n  const maxElements = Number.MAX_SAFE_INTEGER;\n\n  for (let i = 0; i < q.length; i++) {\n    const element = q[i];\n    const weight = Math.abs(element);\n    const sum = weight + w;\n\n    if (weight > maxWeight) {\n      maxWeight = weight;\n    }\n\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n\n    if (sum > maxElements) {\n      maxElements = sum;\n    }\n  }\n\n  return maxSum < maxWeight;\n};\n\n/*\n  Writes a function that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balanced and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  balancedAndLessThanOrEqualToMaxWeight([3, 2, 3], 5) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  balancedAndLessThanOrEqualToMaxWeight([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  balancedAndLessThanOrEqualToMaxWeight([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  balancedAndLessThanOrEqualToMaxWeight([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst balancedAndLessThanOrEqualToMaxWeight = (q, w) => {\n  const maxWeight = Number.MAX_SAFE_INTEGER;\n  const maxSum = Number.MAX_SAFE_INTEGER;\n  const maxElements = Number.MAX_SAFE_INTEGER;\n\n  for (let i = 0; i < q.length; i++) {\n    const element = q[i];\n    const weight = Math.abs(element);\n"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > min && arr[i]!== arr[i + 1]) {\n      change++;\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array of integers, return its maximum length.\n\n  For example:\n  maxLength([1,2,3,5,4,7,9,6]) == 9\n  maxLength([1, 2, 3, 4, 3, 2, 2]) == 6\n  maxLength([1, 2, 3, 2, 1]) == 3\n  */\nconst maxLength = (arr) => {\n  let max = Number.MAX_VALUE;\n  let length = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      length = i;\n    }\n  }\n  return length;\n};\n\n/*\n  Given an array of integers, return its minimum length.\n\n  For example:\n  minLength([1,2,3,5,4,7,9,6]) == 6\n  minLength([1, 2, 3, 4, 3, 2, 2]) == 3\n  minLength([1, 2, 3, 2, 1]) == 2\n  */\nconst minLength = (arr) => {\n  let min = Number.MAX_VALUE;\n  let length = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      length = i;\n    }\n  }\n  return length;\n};\n\n/*\n  Given an array of integers, return its average length.\n\n  For example:\n  averageLength([1,2,3,5,4,7,9,6]) == 9\n  averageLength([1, 2, 3, 4, 3, 2, 2]) == 6\n  averageLength([1, 2, 3, 2, 1]) == 3\n  */\nconst averageLength = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*\n  Given an array of integers, return its median length.\n\n  For example:\n  medianLength([1,2,3,5,4,7,9,6]) == 6\n  medianLength([1, 2, 3, 4, 3, 2, 2]) == 3\n  medianLength([1, 2, 3, 2, 1]) == 2\n  */\nconst medianLength = (arr) => {\n  let len = arr.length;\n  if (len % 2 === 0) {\n    return len / 2;\n  } else {\n    let mid = Math.floor(len / 2);\n    return arr[mid];\n  }\n};\n\n/*\n  Given an array of integers, return its mode length.\n\n  For example:\n  modeLength([1,2,3,5,4,7,9,6]) == 6\n  modeLength([1, 2, 3, 4, 3, 2, 2]) == 3\n  modeLength([1, 2, 3, 2, 1]) == 2\n  */\nconst modeLength = (arr) => {\n  let len = arr.length;\n  let mode = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > mode && arr[i]!== arr[i - 1]) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*\n  Given an array of integers, return its mode and minimum length.\n\n  For example:\n  modeAndMinLength([1,2,3,5,4,7,9,6]) == (6, 3)\n  modeAndMinLength([1, 2, 3, 4, 3, 2, 2]) == (3, 2)\n  modeAndMinLength([1, 2, 3, 2, 1]) == (2, 1)\n  */\nconst modeAndMinLength = (arr) => {\n  let len = arr.length;\n  let mode = 0;\n  let min = Number.MAX_VALUE;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > min && arr[i]!== arr[i - 1]) {\n      mode++;\n      min = arr[i];\n    }\n  }\n  return [mode, min];\n};\n\n/*\n  Given an array of integers, return its mode and maximum length.\n\n  For example:\n  modeAndMaxLength([1,2,3,5,4,7,9,6]) == (6, 9)\n  modeAndMaxLength([1, 2, 3, 4, 3, 2, 2]) == (3, 6)\n  modeAndMaxLength([1, 2, 3, 2, 1]) == (2, 3)\n  */\nconst modeAndMaxLength = (arr) => {\n  let len = arr.length;\n  let mode = 0;\n  let max = Number.MAX_VALUE;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < max && arr[i]!== arr[i - 1]) {\n      mode++;\n      max = arr[i];\n    }\n  }\n  return [mode, max];\n};\n\n/*\n  Given an array of integers, return its mode and average length.\n\n  For example:\n  modeAndAverageLength([1,2,3,5,4,7,9,6]) == (6, 9)\n  modeAndAverageLength([1, 2, 3, 4, 3, 2, 2]) == (3, 6)\n  modeAndAverageLength([1, 2, 3, 2, 1]) == (2, 3)\n  */\nconst modeAndAverageLength = (arr) => {\n  let len = arr.length;\n  let mode = 0;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > mode && arr[i]!== arr[i - 1]) {\n      mode++;\n      sum = arr[i];\n    }\n  }\n  return [mode, sum / len];\n};\n\n/*\n  Given an array of integers, return its mode and median length.\n\n  For example:\n  modeAndMedianLength([1,2,3,5,4,7,9,6]) == (6, 6)\n  modeAndMedianLength([1, 2, 3, 4, 3, 2, 2]) == (3, 3)\n  modeAndMedianLength([1, 2, 3, 2, 1]) == (2, 2)\n  */\nconst modeAndMedianLength = (arr) => {\n  let len = arr.length;\n  let mode = 0;\n  let mid = 0;\n  let median = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > mode && arr[i]!== arr[i - 1]) {\n      mode++;\n      mid = i;\n    }\n  }\n  for (let i = mid; i < len; i++) {\n    if (arr[i] > median && arr[i]!== arr[i - 1]) {\n      median = arr[i];\n    }\n  }\n  return [mode, median];\n};\n\n/*\n  Given an array of integers, return its mode and minimum length.\n\n  For example:\n  modeAndMinAndMaxLength([1,2,3,5,4,7,9,6]) == (6, 3, 9)\n  modeAndMinAndMaxLength([1, 2, 3, 4, 3, 2, 2]) == (3, 2, 6)\n  modeAndMinAndMaxLength([1, 2, 3, 2, 1]) == (2, 1, 3)\n  */\nconst modeAndMinAndMaxLength = (arr) => {\n  let len = arr.length;\n  let mode = 0;\n  let min = Number.MAX_VALUE;\n  let max = Number.MAX_VALUE;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > min && arr[i]!== arr[i - 1]) {\n      mode++;\n      min = arr[i];\n    }\n    if (arr[i] < max && arr[i]!== arr[i - 1]) {\n      mode++;\n      max = arr[i];\n    }\n  }\n  return [mode, min, max];\n};\n\n/*\n  Given an array of integers, return its mode and maximum length.\n\n  For example:\n  modeAndMaxAndAverageLength([1,2,3,5,4,7,9,6]) == (6, 9, 9)\n  modeAndMaxAndAverageLength([1, 2, 3, 4, 3, 2, 2]) == (3, 6, 6)\n  modeAndMaxAndAverageLength([1, 2, 3, 2, 1]) == (2, 3, 3)\n  */\nconst modeAndMaxAndAverageLength = (arr) => {\n  let len = arr.length;\n  let mode = 0;\n  let max = Number.MAX_VALUE;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > mode && arr[i]!== arr[i - 1]) {\n      mode++;\n      max = arr[i];\n    }\n    if (arr[i] < max && arr[i]!== arr[i - 1]) {\n      mode++;\n      sum += arr[i];\n    }\n  }\n  return [mode, max, sum / len];\n};\n\n/*\n  Given an array of integers, return its mode and average length.\n\n  For example:\n  modeAndAverageAndMedianLength([1,2,3,5,4,7,9,6]) == (6, 9, 9)\n  modeAndAverageAndMedianLength([1, 2, "}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChar = lst1.reduce((acc, curr, index) => {\n    if (lst2.includes(curr)) {\n      acc += 1;\n    }\n    return acc;\n  }, 0);\n  return lst1.filter(item => lst2.includes(item) && item!== '');\n};\n\n/*\n  Writes a function that accepting two list of strings and returning the list that had total number of char in the all strings of the list greater than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalNotMatch = (lst1, lst2) => {\n  const totalChar = lst1.reduce((acc, curr, index) => {\n    if (lst2.includes(curr)) {\n      acc -= 1;\n    }\n    return acc;\n  }, 0);\n  return lst1.filter(item => lst2.includes(item) && item!== '');\n};\n\n/*\n  Writes a function that accepting two list of strings and returning the list that had total number of char in the all strings of the list equal to the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalEqual([], []) ➞ []\n  totalEqual(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalEqual(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalEqual(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalEqual(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalEqual = (lst1, lst2) => {\n  const totalChar = lst1.reduce((acc, curr, index) => {\n    if (lst2.includes(curr)) {\n      acc += 1;\n    }\n    return acc;\n  }, 0);\n  return lst1.filter(item => lst2.includes(item) && item === '');\n};\n\n/*\n  Writes a function that accepting two list of strings and returning the list that had total number of char in the all strings of the list greater than or equal to the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalGreaterThanEqual([], []) ➞ []\n  totalGreaterThanEqual(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalGreaterThanEqual(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalGreaterThanEqual(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalGreaterThanEqual(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalGreaterThanEqual = (lst1, lst2) => {\n  const totalChar = lst1.reduce((acc, curr, index) => {\n    if (lst2.includes(curr)) {\n      acc += 1;\n    }\n    return acc;\n  }, 0);\n  return lst1.filter(item => lst2.includes(item) && item >= '');\n};\n\n/*\n  Writes a function that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than or equal to the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalLessThanEqual([], []) ➞ []\n  totalLessThanEqual(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalLessThanEqual(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalLessThanEqual(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalLessThanEqual(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalLessThanEqual = (lst1, lst2) => {\n  const totalChar = lst1.reduce((acc, curr, index) => {\n    if (lst2.includes(curr)) {\n      acc -= 1;\n    }\n    return acc;\n  }, 0);\n  return lst1.filter(item => lst2.includes(item) && item <= '');\n};\n\n/*\n  Writes a function that accepting two list of strings and returning the list that had total number of char in the all strings of the list equal to the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalEqual([], []) ➞ []\n  totalEqual(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalEqual(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalEqual(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalEqual(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalEqualOrGreaterThanEqual = (lst1, lst2) => {\n  const totalChar = lst1.reduce((acc, curr, index) => {\n    if (lst2.includes(curr)) {\n      acc += 1;\n    }\n    return acc;\n  }, 0);\n  return lst1.filter(item => lst2.includes(item) && item >= '');\n};\n\n/*\n  Writes a function that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalLessThanEqual([], []) ➞ []\n  totalLessThanEqual(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalLessThanEqual(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalLessThanEqual(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalLessThanEqual(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalLessThan = (lst1, lst2) => {\n  const totalChar = "}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  let isPrime = true;\n  let isPrime2 = true;\n  let isPrime3 = true;\n  let isPrime5 = true;\n  let isPrime7 = true;\n  let isPrime9 = true;\n  let isPrime11 = true;\n  let isPrime13 = true;\n  let isPrime15 = true;\n  let isPrime17 = true;\n  let isPrime19 = true;\n  let isPrime21 = true;\n  let isPrime23 = true;\n  let isPrime25 = true;\n  let isPrime27 = true;\n  let isPrime29 = true;\n  let isPrime31 = true;\n  let isPrime33 = true;\n  let isPrime35 = true;\n  let isPrime37 = true;\n  let isPrime39 = true;\n  let isPrime41 = true;\n  let isPrime43 = true;\n  let isPrime45 = true;\n  let isPrime47 = true;\n  let isPrime49 = true;\n  let isPrime51 = true;\n  let isPrime53 = true;\n  let isPrime55 = true;\n  let isPrime57 = true;\n  let isPrime59 = true;\n  let isPrime61 = true;\n  let isPrime63 = true;\n  let isPrime65 = true;\n  let isPrime67 = true;\n  let isPrime69 = true;\n  let isPrime71 = true;\n  let isPrime73 = true;\n  let isPrime75 = true;\n  let isPrime77 = true;\n  let isPrime79 = true;\n  let isPrime81 = true;\n  let isPrime83 = true;\n  let isPrime85 = true;\n  let isPrime87 = true;\n  let isPrime89 = true;\n  let isPrime91 = true;\n  let isPrime93 = true;\n  let isPrime95 = true;\n  let isPrime97 = true;\n  let isPrime99 = true;\n  let isPrime101 = true;\n  let isPrime103 = true;\n  let isPrime105 = true;\n  let isPrime107 = true;\n  let isPrime109 = true;\n  let isPrime111 = true;\n  let isPrime113 = true;\n  let isPrime115 = true;\n  let isPrime117 = true;\n  let isPrime119 = true;\n  let isPrime121 = true;\n  let isPrime123 = true;\n  let isPrime125 = true;\n  let isPrime127 = true;\n  let isPrime129 = true;\n  let isPrime131 = true;\n  let isPrime133 = true;\n  let isPrime135 = true;\n  let isPrime137 = true;\n  let isPrime139 = true;\n  let isPrime141 = true;\n  let isPrime143 = true;\n  let isPrime145 = true;\n  let isPrime147 = true;\n  let isPrime149 = true;\n  let isPrime151 = true;\n  let isPrime153 = true;\n  let isPrime155 = true;\n  let isPrime157 = true;\n  let isPrime159 = true;\n  let isPrime161 = true;\n  let isPrime163 = true;\n  let isPrime165 = true;\n  let isPrime167 = true;\n  let isPrime169 = true;\n  let isPrime171 = true;\n  let isPrime173 = true;\n  let isPrime175 = true;\n  let isPrime177 = true;\n  let isPrime179 = true;\n  let isPrime181 = true;\n  let isPrime183 = true;\n  let isPrime185 = true;\n  let isPrime187 = true;\n  let isPrime189 = true;\n  let isPrime191 = true;\n  let isPrime193 = true;\n  let isPrime195 = true;\n  let isPrime197 = true;\n  let isPrime199 = true;\n  let isPrime201 = true;\n  let isPrime203 = true;\n  let isPrime205 = true;\n  let isPrime207 = true;\n  let isPrime209 = true;\n  let isPrime211 = true;\n  let isPrime213 = true;\n  let isPrime215 = true;\n  let isPrime217 = true;\n  let isPrime219 = true;\n  let isPrime221 = true;\n  let isPrime223 = true;\n  let isPrime225 = true;\n  let isPrime227 = true;\n  let isPrime229 = true;\n  let isPrime231 = true;\n  let isPrime233 = true;\n  let isPrime235 = true;\n  let isPrime237 = true;\n  let isPrime239 = true;\n  let isPrime241 = true;\n  let isPrime243 = true;\n  let isPrime245 = true;\n  let isPrime247 = true;\n  let isPrime249 = true;\n  let isPrime251 = true;\n  let isPrime253 = true;\n  let isPrime255 = true;\n  let isPrime257 = true;\n  let isPrime259 = true;\n  let isPrime261 = true;\n  let isPrime263 = true;\n  let isPrime265 = true;\n  let isPrime267 = true;\n  let isPrime269 = true;\n  let isPrime271 = true;\n  let isPrime273 = true;\n  let isPrime275 = true;\n  let isPrime277 = true;\n  let isPrime279 = true;\n  let isPrime281 = true;\n  let isPrime283 = true;\n  let isPrime285 = true;\n  let isPrime287 = true;\n  let isPrime289 = true;\n  let isPrime291 = true;\n  let isPrime293 = true;\n  let isPrime295 = true;\n  let isPrime297 = true;\n  let isPrime299 = true;\n  let isPrime301 = true;\n  let isPrime303 = true;\n  let isPrime305 = true;\n  let isPrime307 = true;\n  let isPrime309 = true;\n  let isPrime311 = true;\n  let isPrime313 = true;\n  let isPrime315 = true;\n  let isPrime317 = true;\n  let isPrime319 = true;\n  let isPrime321 = true;\n  let isPrime323 = true;\n  let isPrime325 = true;\n  let isPrime327 = true;\n  let isPrime329 = true;\n  let isPrime331 = true;\n  let isPrime333 = true;\n  let isPrime335 = true;\n  let isPrime337 = true;\n  let isPrime339 = true;\n  let isPrime341 = true;\n  let isPrime343 = true;\n  let isPrime345 = true;\n  let isPrime347 = true;\n  let isPrime349 = true;\n  let isPrime351 = true;\n  let isPrime353 = true;\n  let isPrime355 = true;\n  let isPrime357 = true;\n  let isPrime359 = true;\n  let isPrime361 = true;\n  let isPrime363 = true;\n  let isPrime365 = true;\n  let isPrime367 = true;\n  let isPrime369 = true;\n  let isPrime371 = true;\n  let isPrime373 = true;\n  let isPrime375 = true;\n  let isPrime377 = true;\n  let isPrime379 = true;\n  let isPrime381 = true;\n  let isPrime383 = true;\n  let isPrime385 = true;\n  let isPrime387 = true;\n  let isPrime389 = true;\n  let isPrime391 = true;\n  let isPrime393 = true;\n  let isPrime395 = true;\n  let isPrime397 = true;\n"}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*\n  Your tasks is to write a function that returns true if a number is divisible by 3 and false in other case. \n  For example:\n  isDivisibleBy3(1, 4) => true\n  isDivisibleBy3(2, 2) => true\n  isDivisibleBy3(8, 2) => true\n  isDivisibleBy3(3, 2) => false\n  isDivisibleBy3(3, 1) => false\n  isDivisibleBy3(5, 3) => false\n  */\nconst isDivisibleBy3 = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 3 === 0) return false;\n  return isDivisibleBy3(x, Math.floor(n / 3));\n};\n\n/*\n  Your tasks is to write a function that returns true if a number is divisible by 5 and false in other case. \n  For example:\n  isDivisibleBy5(1, 4) => true\n  isDivisibleBy5(2, 2) => true\n  isDivisibleBy5(8, 2) => true\n  isDivisibleBy3(3, 2) => false\n  isDivisibleBy3(3, 1) => false\n  isDivisibleBy3(5, 3) => false\n  */\nconst isDivisibleBy5 = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 5 === 0) return false;\n  return isDivisibleBy5(x, Math.floor(n / 5));\n};\n\n/*\n  Your tasks is to write a function that returns true if a number is divisible by 7 and false in other case. \n  For example:\n  isDivisibleBy7(1, 4) => true\n  isDivisibleBy7(2, 2) => true\n  isDivisibleBy7(8, 2) => true\n  isDivisibleBy3(3, 2) => false\n  isDivisibleBy3(3, 1) => false\n  isDivisibleBy3(5, 3) => false\n  */\nconst isDivisibleBy7 = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 7 === 0) return false;\n  return isDivisibleBy7(x, Math.floor(n / 7));\n};\n\n/*\n  Your tasks is to write a function that returns true if a number is divisible by 9 and false in other case. \n  For example:\n  isDivisibleBy9(1, 4) => true\n  isDivisibleBy9(2, 2) => true\n  isDivisibleBy9(8, 2) => true\n  isDivisibleBy3(3, 2) => false\n  isDivisibleBy3(3, 1) => false\n  isDivisibleBy3(5, 3) => false\n  */\nconst isDivisibleBy9 = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 9 === 0) return false;\n  return isDivisibleBy9(x, Math.floor(n / 9));\n};\n\n/*\n  Your tasks is to write a function that returns true if a number is divisible by 11 and false in other case. \n  For example:\n  isDivisibleBy11(1, 4) => true\n  isDivisibleBy11(2, 2) => true\n  isDivisibleBy11(8, 2) => true\n  isDivisibleBy3(3, 2) => false\n  isDivisibleBy3(3, 1) => false\n  isDivisibleBy3(5, 3) => false\n  */\nconst isDivisibleBy11 = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 11 === 0) return false;\n  return isDivisibleBy11(x, Math.floor(n / 11));\n};\n\n/*\n  Your tasks is to write a function that returns true if a number is divisible by 13 and false in other case. \n  For example:\n  isDivisibleBy13(1, 4) => true\n  isDivisibleBy13(2, 2) => true\n  isDivisibleBy13(8, 2) => true\n  isDivisibleBy3(3, 2) => false\n  isDivisibleBy3(3, 1) => false\n  isDivisibleBy3(5, 3) => false\n  */\nconst isDivisibleBy13 = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 13 === 0) return false;\n  return isDivisibleBy13(x, Math.floor(n / 13));\n};\n\n/*\n  Your tasks is to write a function that returns true if a number is divisible by 15 and false in other case. \n  For example:\n  isDivisibleBy15(1, 4) => true\n  isDivisibleBy15(2, 2) => true\n  isDivisibleBy15(8, 2) => true\n  isDivisibleBy3(3, 2) => false\n  isDivisibleBy3(3, 1) => false\n  isDivisibleBy3(5, 3) => false\n  */\nconst isDivisibleBy15 = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 15 === 0) return false;\n  return isDivisibleBy15(x, Math.floor(n / 15));\n};\n\n/*\n  Your tasks is to write a function that returns true if a number is divisible by 17 and false in other case. \n  For example:\n  isDivisibleBy17(1, 4) => true\n  isDivisibleBy17(2, 2) => true\n  isDivisibleBy17(8, 2) => true\n  isDivisibleBy3(3, 2) => false\n  isDivisibleBy3(3, 1) => false\n  isDivisibleBy3(5, 3) => false\n  */\nconst isDivisibleBy17 = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 17 === 0) return false;\n  return isDivisibleBy17(x, Math.floor(n / 17));\n};\n\n/*\n  Your tasks is to write a function that returns true if a number is divisible by 19 and false in other case. \n  For example:\n  isDivisibleBy19(1, 4) => true\n  isDivisibleBy19(2, 2) => true\n  isDivisibleBy19(8, 2) => true\n  isDivisibleBy3(3, 2) => false\n  isDivisibleBy3(3, 1) => false\n  isDivisibleBy3(5, 3) => false\n  */\nconst isDivisibleBy19 = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 19 === 0) return false;\n  return isDivisibleBy19(x, Math.floor(n / 19));\n};\n\n/*\n  Your tasks is to write a function that returns true if a number is divisible by 21 and false in other case. \n  For example:\n  isDivisibleBy21(1, 4) => true\n  isDivisibleBy21(2, 2) => true\n  isDivisibleBy21(8, 2) => true\n  isDivisibleBy3(3, 2) => false\n  isDivisibleBy3(3, 1) => false\n  isDivisibleBy3(5, 3) => false\n  */\nconst isDivisibleBy21 = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 21 === 0) return false;\n  return isDivisibleBy21(x, Math.floor(n / 21));\n};\n\n/*\n  Your tasks is to write a function that returns true if a number is divisible by 23 and false in other case. \n  For example:\n  isDivisibleBy23(1, 4) => true\n  isDivisibleBy23(2, 2) => true\n  isDivisibleBy23(8, 2) => true\n  isDivisibleBy3(3, 2) => false\n  isDivisibleBy3(3, 1) => false\n  isDivisibleBy3(5, 3) => false\n  */\nconst isDivisible"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) return false\n  if (a % 2 === 0) return true\n  return iscube(a / 2)\n}\n\n/*\n  Write a function that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(4) ==> true\n  iscube(5) ==> false\n  iscube(6) ==> true\n  iscube(7) ==> false\n  iscube(8) ==> true\n  iscube(9) ==> false\n  iscube(10) ==> true\n  iscube(11) ==> false\n  iscube(12) ==> true\n  iscube(13) ==> false\n  iscube(14) ==> true\n  iscube(15) ==> false\n  iscube(16) ==> true\n  iscube(17) ==> false\n  iscube(18) ==> true\n  iscube(19) ==> false\n  iscube(20) ==> true\n  iscube(21) ==> false\n  iscube(22) ==> true\n  iscube(23) ==> false\n  iscube(24) ==> true\n  iscube(25) ==> false\n  iscube(26) ==> true\n  iscube(27) ==> false\n  iscube(28) ==> true\n  iscube(29) ==> false\n  iscube(30) ==> true\n  iscube(31) ==> false\n  iscube(32) ==> true\n  iscube(33) ==> false\n  iscube(34) ==> true\n  iscube(35) ==> false\n  iscube(36) ==> true\n  iscube(37) ==> false\n  iscube(38) ==> true\n  iscube(39) ==> false\n  iscube(40) ==> true\n  iscube(41) ==> false\n  iscube(42) ==> true\n  iscube(43) ==> false\n  iscube(44) ==> true\n  iscube(45) ==> false\n  iscube(46) ==> true\n  iscube(47) ==> false\n  iscube(48) ==> true\n  iscube(49) ==> false\n  iscube(50) ==> true\n  iscube(51) ==> false\n  iscube(52) ==> true\n  iscube(53) ==> false\n  iscube(54) ==> true\n  iscube(55) ==> false\n  iscube(56) ==> true\n  iscube(57) ==> false\n  iscube(58) ==> true\n  iscube(59) ==> false\n  iscube(60) ==> true\n  iscube(61) ==> false\n  iscube(62) ==> true\n  iscube(63) ==> false\n  iscube(64) ==> true\n  iscube(65) ==> false\n  iscube(66) ==> true\n  iscube(67) ==> false\n  iscube(68) ==> true\n  iscube(69) ==> false\n  iscube(70) ==> true\n  iscube(71) ==> false\n  iscube(72) ==> true\n  iscube(73) ==> false\n  iscube(74) ==> true\n  iscube(75) ==> false\n  iscube(76) ==> true\n  iscube(77) ==> false\n  iscube(78) ==> true\n  iscube(79) ==> false\n  iscube(80) ==> true\n  iscube(81) ==> false\n  iscube(82) ==> true\n  iscube(83) ==> false\n  iscube(84) ==> true\n  iscube(85) ==> false\n  iscube(86) ==> true\n  iscube(87) ==> false\n  iscube(88) ==> true\n  iscube(89) ==> false\n  iscube(90) ==> true\n  iscube(91) ==> false\n  iscube(92) ==> true\n  iscube(93) ==> false\n  iscube(94) ==> true\n  iscube(95) ==> false\n  iscube(96) ==> true\n  iscube(97) ==> false\n  iscube(98) ==> true\n  iscube(99) ==> false\n  iscube(100) ==> true\n  iscube(101) ==> false\n  iscube(102) ==> true\n  iscube(103) ==> false\n  iscube(104) ==> true\n  iscube(105) ==> false\n  iscube(106) ==> true\n  iscube(107) ==> false\n  iscube(108) ==> true\n  iscube(109) ==> false\n  iscube(110) ==> true\n  iscube(111) ==> false\n  iscube(112) ==> true\n  iscube(113) ==> false\n  iscube(114) ==> true\n  iscube(115) ==> false\n  iscube(116) ==> true\n  iscube(117) ==> false\n  iscube(118) ==> true\n  iscube(119) ==> false\n  iscube(120) ==> true\n  iscube(121) ==> false\n  iscube(122) ==> true\n  iscube(123) ==> false\n  iscube(124) ==> true\n  iscube(125) ==> false\n  iscube(126) ==> true\n  iscube(127) ==> false\n  iscube(128) ==> true\n  iscube(129) ==> false\n  iscube(130) ==> true\n  iscube(131) ==> false\n  iscube(132) ==> true\n  iscube(133) ==> false\n  iscube(134) ==> true\n  iscube(135) ==> false\n  iscube(136) ==> true\n  iscube(137) ==> false\n  iscube(138) ==> true\n  iscube(139) ==> false\n  iscube(140) ==> true\n  iscube(141) ==> false\n  iscube(142) ==> true\n  iscube(143) ==> false\n  iscube(144) ==> true\n  iscube(145) ==> false\n  iscube(146) ==> true\n  iscube(147) ==> false\n  iscube(148) ==> true\n  iscube(149) ==> false\n  iscube(150) ==> true\n  iscube(151) ==> false\n  iscube(152) ==> true\n  iscube(153) ==> false\n  iscube(154) ==> true\n  iscube(155) ==> false\n  iscube("}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  let hexNumLength2 = hexNumLength;\n  let hexNumLength3 = hexNumLength;\n  let hexNumLength4 = hexNumLength;\n  let hexNumLength5 = hexNumLength;\n  let hexNumLength6 = hexNumLength;\n  let hexNumLength7 = hexNumLength;\n  let hexNumLength8 = hexNumLength;\n  let hexNumLength9 = hexNumLength;\n  let hexNumLength10 = hexNumLength;\n  let hexNumLength11 = hexNumLength;\n  let hexNumLength12 = hexNumLength;\n  let hexNumLength13 = hexNumLength;\n  let hexNumLength14 = hexNumLength;\n  let hexNumLength15 = hexNumLength;\n  let hexNumLength16 = hexNumLength;\n  let hexNumLength17 = hexNumLength;\n  let hexNumLength18 = hexNumLength;\n  let hexNumLength19 = hexNumLength;\n  let hexNumLength20 = hexNumLength;\n  let hexNumLength21 = hexNumLength;\n  let hexNumLength22 = hexNumLength;\n  let hexNumLength23 = hexNumLength;\n  let hexNumLength24 = hexNumLength;\n  let hexNumLength25 = hexNumLength;\n  let hexNumLength26 = hexNumLength;\n  let hexNumLength27 = hexNumLength;\n  let hexNumLength28 = hexNumLength;\n  let hexNumLength29 = hexNumLength;\n  let hexNumLength30 = hexNumLength;\n  let hexNumLength31 = hexNumLength;\n  let hexNumLength32 = hexNumLength;\n  let hexNumLength33 = hexNumLength;\n  let hexNumLength34 = hexNumLength;\n  let hexNumLength35 = hexNumLength;\n  let hexNumLength36 = hexNumLength;\n  let hexNumLength37 = hexNumLength;\n  let hexNumLength38 = hexNumLength;\n  let hexNumLength39 = hexNumLength;\n  let hexNumLength40 = hexNumLength;\n  let hexNumLength41 = hexNumLength;\n  let hexNumLength42 = hexNumLength;\n  let hexNumLength43 = hexNumLength;\n  let hexNumLength44 = hexNumLength;\n  let hexNumLength45 = hexNumLength;\n  let hexNumLength46 = hexNumLength;\n  let hexNumLength47 = hexNumLength;\n  let hexNumLength48 = hexNumLength;\n  let hexNumLength49 = hexNumLength;\n  let hexNumLength50 = hexNumLength;\n  let hexNumLength51 = hexNumLength;\n  let hexNumLength52 = hexNumLength;\n  let hexNumLength53 = hexNumLength;\n  let hexNumLength54 = hexNumLength;\n  let hexNumLength55 = hexNumLength;\n  let hexNumLength56 = hexNumLength;\n  let hexNumLength57 = hexNumLength;\n  let hexNumLength58 = hexNumLength;\n  let hexNumLength59 = hexNumLength;\n  let hexNumLength60 = hexNumLength;\n  let hexNumLength61 = hexNumLength;\n  let hexNumLength62 = hexNumLength;\n  let hexNumLength63 = hexNumLength;\n  let hexNumLength64 = hexNumLength;\n  let hexNumLength65 = hexNumLength;\n  let hexNumLength66 = hexNumLength;\n  let hexNumLength67 = hexNumLength;\n  let hexNumLength68 = hexNumLength;\n  let hexNumLength69 = hexNumLength;\n  let hexNumLength70 = hexNumLength;\n  let hexNumLength71 = hexNumLength;\n  let hexNumLength72 = hexNumLength;\n  let hexNumLength73 = hexNumLength;\n  let hexNumLength74 = hexNumLength;\n  let hexNumLength75 = hexNumLength;\n  let hexNumLength76 = hexNumLength;\n  let hexNumLength77 = hexNumLength;\n  let hexNumLength78 = hexNumLength;\n  let hexNumLength79 = hexNumLength;\n  let hexNumLength80 = hexNumLength;\n  let hexNumLength81 = hexNumLength;\n  let hexNumLength82 = hexNumLength;\n  let hexNumLength83 = hexNumLength;\n  let hexNumLength84 = hexNumLength;\n  let hexNumLength85 = hexNumLength;\n  let hexNumLength86 = hexNumLength;\n  let hexNumLength87 = hexNumLength;\n  let hexNumLength88 = hexNumLength;\n  let hexNumLength89 = hexNumLength;\n  let hexNumLength90 = hexNumLength;\n  let hexNumLength91 = hexNumLength;\n  let hexNumLength92 = hexNumLength;\n  let hexNumLength93 = hexNumLength;\n  let hexNumLength94 = hexNumLength;\n  let hexNumLength95 = hexNumLength;\n  let hexNumLength96 = hexNumLength;\n  let hexNumLength97 = hexNumLength;\n  let hexNumLength98 = hexNumLength;\n  let hexNumLength99 = hexNumLength;\n  let hexNumLength100 = hexNumLength;\n  let hexNumLength101 = hexNumLength;\n  let hexNumLength102 = hexNumLength;\n  let hexNumLength103 = hexNumLength;\n  let hexNumLength104 = hexNumLength;\n  let hexNumLength105 = hexNumLength;\n  let hexNumLength106 = hexNumLength;\n  let hexNumLength107 = hexNumLength;\n  let hexNumLength108 = hexNumLength;\n  let hexNumLength109 = hexNumLength;\n  let hexNumLength110 = hexNumLength;\n  let hexNumLength111 = hexNumLength;\n  let hexNumLength112 = hexNumLength;\n  let hexNumLength113 = hexNumLength;\n  let hexNumLength114 = hexNumLength;\n  let hexNumLength115 = hexNumLength;\n  let hexNumLength116 = hexNumLength;\n  let hexNumLength117 = hexNumLength;\n  let hexNumLength118 = hexNumLength;\n  let hexNumLength119 = hexNumLength"}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) == '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a decimal number to a binary number in decimal form. The function should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinaryDecimal = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) == '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return decimalToBinary(parseInt(binary, 2));\n};\n\n/*\n  Write a function that converts a binary number to a decimal number in decimal form. The function should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) == '1') {\n      decimal += '1';\n    } else {\n      decimal += '0';\n    }\n  }\n  return decimalToBinaryDecimal(parseInt(decimal, 2));\n};\n\n/*\n  Write a function that converts a binary number to a decimal number in decimal form. The function should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimalDecimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) == '1') {\n      decimal += '1';\n    } else {\n      decimal += '0';\n    }\n  }\n  return decimalToBinaryDecimal(parseInt(decimal, 2));\n};\n\n/*\n  Write a function that converts a binary number to a decimal number in decimal form. The function should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimalDecimalDecimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) == '1') {\n      decimal += '1';\n    } else {\n      decimal += '0';\n    }\n  }\n  return decimalToBinaryDecimalDecimal(parseInt(decimal, 2));\n};\n\n/*\n  Write a function that converts a binary number to a decimal number in decimal form. The function should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimalDecimalDecimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) == '1') {\n      decimal += '1';\n    } else {\n      decimal += '0';\n    }\n  }\n  return decimalToBinaryDecimalDecimal(parseInt(decimal, 2));\n};\n\n/*\n  Write a function that converts a binary number to a decimal number in decimal form. The function should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimalDecimalDecimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) == '1') {\n      decimal += '1';\n    } else {\n      decimal += '0';\n    }\n  }\n  return decimalToBinaryDecimalDecimal(parseInt(decimal, 2));\n};\n\n/*\n  Write a function that converts a binary number to a decimal number in decimal form. The function should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimalDecimalDecimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) == '1') {\n      decimal += '1';\n    } else {\n      decimal += '0';\n    }\n  }\n  return decimalToBinaryDecimalDecimal(parseInt(decimal, 2));\n};\n\n/*\n  Write a function that converts a binary number to a decimal number in decimal form. The function should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimalDecimalDecimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) == '1') {\n      decimal += '1';\n    } else {\n      decimal += '0';\n    }\n  }\n  return decimalToBinaryDecimalDecimal(parseInt(decimal, 2));\n};\n\n/*\n  Write a function that converts a binary number to a decimal number in decimal form. The function should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  binaryTo"}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let count = 0;\n  let letters = [];\n  let letter;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGradeMap = {\n    A: 'A',\n    B: 'B',\n    C: 'C',\n    D: 'D',\n    E: 'E',\n  };\n  return grades.map((grade) => {\n    const letterGrade = letterGradeMap[grade];\n    return `${letterGrade}+`;\n  });\n};\n\n/*\n  It is the last weeks of the semesters and the teachers had to given the grades\n  to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGradeMap = {\n    A: 'A',\n    B: 'B',\n    C: 'C',\n    D: 'D',\n    E: 'E',\n  };\n  return grades.map((grade) => {\n    const letterGrade = letterGradeMap[grade];\n    return `${letterGrade}-`;\n  });\n};\n\n/*\n  It is the last weeks of the semesters and the teachers had to given the grades\n  to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGradeMap = {\n    A: 'A',\n    B: 'B',\n    C: 'C',\n    D: 'D',\n    E: 'E',\n  };\n  return grades.map((grade) => {\n    const letterGrade = letterGradeMap[grade];\n    return `${letterGrade}*`;\n  });\n};\n\n/*\n  It is the last weeks of the semesters and the teachers had to given the grades\n  to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGradeMap = {\n    A: 'A',\n    B: 'B',\n    C: 'C',\n    D: 'D',\n    E: 'E',\n  };\n  return grades.map((grade) => {\n    const letterGrade = letterGradeMap[grade];\n    return `${letterGrade}/`;\n  });\n};\n\n/*\n  It is the last weeks of the semesters and the teachers had to given the grades\n  to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGradeMap = {\n    A: 'A',\n    B: 'B',\n    C: 'C',\n    D: 'D',\n    E: 'E',\n  };\n  return grades.map((grade) => {\n    const letterGrade = letterGradeMap[grade];\n    return `${letterGrade}%`;\n  });\n};\n\n/*\n  It is the last weeks of the semesters and the teachers had to given the grades\n  to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGradeMap = {\n    A: 'A',\n    B: 'B',\n    C: 'C',\n    D: 'D',\n    E: 'E',\n  };\n  return grades.map((grade) => {\n    const letterGrade = letterGradeMap[grade];\n    return `${letterGrade}%`;\n  });\n};\n\n/*\n  It is the last weeks of the semesters and the teachers had to "}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % parseInt(string[i]) === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('abcdcba') == true\n  divisibleBy3('kittens') == false\n  divisibleBy3('orange') == false\n  */\nconst divisibleBy3 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % parseInt(string[i]) === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('abcdcba') == true\n  divisibleBy5('kittens') == false\n  divisibleBy5('orange') == false\n  */\nconst divisibleBy5 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % parseInt(string[i]) === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('abcdcba') == true\n  divisibleBy7('kittens') == false\n  divisibleBy7('orange') == false\n  */\nconst divisibleBy7 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % parseInt(string[i]) === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('abcdcba') == true\n  divisibleBy11('kittens') == false\n  divisibleBy11('orange') == false\n  */\nconst divisibleBy11 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % parseInt(string[i]) === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('abcdcba') == true\n  divisibleBy13('kittens') == false\n  divisibleBy13('orange') == false\n  */\nconst divisibleBy13 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % parseInt(string[i]) === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n length is divisible by 15 or false otherwise\n  Examples\n  divisibleBy15('Hello') == true\n  divisibleBy15('abcdcba') == true\n  divisibleBy15('kittens') == false\n  divisibleBy15('orange') == false\n  */\nconst divisibleBy15 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % parseInt(string[i]) === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('abcdcba') == true\n  divisibleBy17('kittens') == false\n  divisibleBy17('orange') == false\n  */\nconst divisibleBy17 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % parseInt(string[i]) === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n length is divisible by 19 or false otherwise\n  Examples\n  divisibleBy19('Hello') == true\n  divisibleBy19('abcdcba') == true\n  divisibleBy19('kittens') == false\n  divisibleBy19('orange') == false\n  */\nconst divisibleBy19 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % parseInt(string[i]) === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n length is divisible by 21 or false otherwise\n  Examples\n  divisibleBy21('Hello') == true\n  divisibleBy21('abcdcba') == true\n  divisibleBy21('kittens') == false\n  divisibleBy21('orange') == false\n  */\nconst divisibleBy21 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % parseInt(string[i]) === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n length is divisible by 23 or false otherwise\n  Examples\n  divisibleBy23('Hello') == true\n  divisibleBy23('abcdcba') == true\n  divisibleBy23('kittens') == false\n  divisibleBy23('orange') == false\n  */\nconst divisibleBy23 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % parseInt(string[i]) === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n length is divisible by 31 or false otherwise\n  Examples\n  divisibleBy31('Hello') == true\n  divisibleBy31('abcdcba') == true\n  divisibleBy31('kittens') == false\n  divisibleBy31('orange') == false\n  */\nconst divisibleBy31 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % parseInt(string[i]) === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n length is divisible by 37 or false otherwise\n  Examples\n  divisibleBy37('Hello') == true\n  divisibleBy37('abcdcba') == "}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  let count = 0;\n  let i = Math.floor(Math.log(n) / Math.LN10) + 1;\n  while (i > 0 && n % i === 0) {\n    n /= i;\n    count++;\n    i -= 1;\n  }\n  return count;\n};\n\n/* Given a positive integer n, return the number of digits in n. For\n example,\n countDigits(12) should return 3, countDigits(100) should return 4 and countDigits(-4)\n should return 1. */\nconst countDigits = (n) => {\n  let count = 0;\n  let i = Math.floor(Math.log(n) / Math.LN10) + 1;\n  while (i > 0 && n % i === 0) {\n    n /= i;\n    count++;\n    i -= 1;\n  }\n  return count;\n};\n\n/* Given a positive integer n, return the number of trailing zeros in n.\n For example countTrailingZeros(12) should return 0, countTrailingZeros(100) should\n return 1 and countTrailingZeros(-42) should return 2. */\nconst countTrailingZeros = (n) => {\n  let count = 0;\n  let i = Math.floor(Math.log(n) / Math.LN10) + 1;\n  while (i > 0 && n % i === 0) {\n    n /= i;\n    count++;\n    i -= 1;\n  }\n  return count;\n};\n\n/* Given a positive integer n, return the number of leading zeros in n.\n For example countLeadingZeros(12) should return 1, countLeadingZeros(100) should\n return 0 and countLeadingZeros(-42) should return 2. */\nconst countLeadingZeros = (n) => {\n  let count = 0;\n  let i = Math.floor(Math.log(n) / Math.LN10) + 1;\n  while (i > 0 && n % i === 0) {\n    n /= i;\n    count++;\n    i -= 1;\n  }\n  return count;\n};\n\n/* Given a positive integer n, return the number of trailing zeros in n\n starting from n.\n For example countTrailingZeros(12) should return 1, countTrailingZeros(100) should\n return 0 and countTrailingZeros(-42) should return 2. */\nconst countTrailingZerosFrom = (n) => {\n  let count = 0;\n  let i = Math.floor(Math.log(n) / Math.LN10) + 1;\n  while (i > 0 && n % i === 0) {\n    n /= i;\n    count++;\n    i -= 1;\n  }\n  return count;\n};\n\n/* Given a positive integer n, return the number of leading zeros in n\n starting from n.\n For example countLeadingZeros(12) should return 1, countLeadingZeros(100) should\n return 0 and countLeadingZeros(-42) should return 2. */\nconst countLeadingZerosFrom = (n) => {\n  let count = 0;\n  let i = Math.floor(Math.log(n) / Math.LN10) + 1;\n  while (i > 0 && n % i === 0) {\n    n /= i;\n    count++;\n    i -= 1;\n  }\n  return count;\n};\n\n/* Given a positive integer n, return the number of trailing zeros in n\n starting from n.\n For example countTrailingZerosFrom(12) should return 1, countTrailingZerosFrom(100) should\n return 0 and countTrailingZerosFrom(-42) should return 2. */\nconst countTrailingZerosFromFrom = (n) => {\n  let count = 0;\n  let i = Math.floor(Math.log(n) / Math.LN10) + 1;\n  while (i > 0 && n % i === 0) {\n    n /= i;\n    count++;\n    i -= 1;\n  }\n  return count;\n};\n\n/* Given a positive integer n, return the number of trailing zeros in n\n starting from n.\n For example countTrailingZerosFrom(12) should return 1, countTrailingZerosFrom(100) should\n return 0 and countTrailingZerosFrom(-42) should return 2. */\nconst countTrailingZerosFromFrom = (n) => {\n  let count = 0;\n  let i = Math.floor(Math.log(n) / Math.LN10) + 1;\n  while (i > 0 && n % i === 0) {\n    n /= i;\n    count++;\n    i -= 1;\n  }\n  return count;\n};\n\n/* Given a positive integer n, return the number of trailing zeros in n\n starting from n.\n For example countTrailingZerosFrom(12) should return 1, countTrailingZerosFrom(100) should\n return 0 and countTrailingZerosFrom(-42) should return 2. */\nconst countTrailingZerosFromFrom = (n) => {\n  let count = 0;\n  let i = Math.floor(Math.log(n) / Math.LN10) + 1;\n  while (i > 0 && n % i === 0) {\n    n /= i;\n    count++;\n    i -= 1;\n  }\n  return count;\n};\n\n/* Given a positive integer n, return the number of trailing zeros in n\n starting from n.\n For example countTrailingZerosFrom(12) should return 1, countTrailingZerosFrom(100) should\n return 0 and countTrailingZerosFrom(-42) should return 2. */\nconst countTrailingZerosFromFrom = (n) => {\n  let count = 0;\n  let i = Math.floor(Math.log(n) / Math.LN10) + 1;\n  while (i > 0 && n % i === 0) {\n    n /= i;\n    count++;\n    i -= 1;\n  }\n  return count;\n};\n\n/* Given a positive integer n, return the number of trailing zeros in n\n starting from n.\n For example countTrailingZerosFrom(12) should return 1, countTrailingZerosFrom(100) should\n return 0 and countTrailingZerosFrom(-42) should return 2. */\nconst countTrailingZerosFromFrom = (n) => {\n  let count = 0;\n  let i = Math.floor(Math.log(n) / Math.LN10) + 1;\n  while (i > 0 && n % i === 0) {\n    n /= i;\n    count++;\n    i -= 1;\n  }\n  return count;\n};\n\n/* Given a positive integer n, return the number of trailing zeros in n\n starting from n.\n For example countTrailingZerosFrom(12) should return 1, countTrailingZerosFrom(100) should\n return 0 and countTrailingZerosFrom(-42) should return 2. */\nconst countTrailingZerosFromFrom = (n) => {\n  let count = 0;\n  let i = Math.floor(Math.log(n) / Math.LN10) + 1;\n  while (i > 0 && n % i === 0) {\n    n /= i;\n    count++;\n    i -= 1;\n  }\n  return count;\n};\n\n/* Given a positive integer n, return the number of trailing zeros in n\n starting from n.\n For example countTrailingZerosFrom(12) should return 1, countTrailingZerosFrom(100) should\n return 0 and countTrailingZerosFrom(-42) should return 2. */\nconst countTrailingZerosFromFrom = (n) => {\n  let count = 0;\n  let i = Math.floor(Math.log(n) / Math.LN10) + 1;\n  while (i > 0 && n % i === 0) {\n    n /= i;\n    count++;\n    i -= 1;\n  }\n  return count;\n};\n\n/* Given a positive integer n, return the number of trailing zeros in n\n starting from n.\n For example countTrailingZerosFrom(12) should return 1, countTrailingZerosFrom(100) should\n return 0 and count"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += parseInt(bin(i)[i], 2);\n  }\n  return sum.toString().padStart(N, '0');\n};\n\n/*Given a positive integers N, return the sum of its digit in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be 1000.\n      For N = 150, the sum of digits will be 6 the output should be 150.\n      For N = 147, the sum of digits will be 12 the output should be 147.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += parseInt(i, 2);\n  }\n  return sum;\n};\n\n/*Given a positive integers N, return the sum of its digit in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0x10\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += parseInt(bin(i)[i], 16);\n  }\n  return sum.toString(16);\n};\n\n/*Given a positive integers N, return the sum of its digit in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0o\".\n      For N = 150, the sum of digits will be 6 the output should be \"0o10\".\n      For N = 147, the sum of digits will be 12 the output should be \"0o100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += parseInt(bin(i)[i], 8);\n  }\n  return sum;\n};\n\n/*Given a positive integers N, return the sum of its digit in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0x10\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += parseInt(bin(i)[i], 16);\n  }\n  return sum.toString(16);\n};\n\n/*Given a positive integers N, return the sum of its digit in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0o\".\n      For N = 150, the sum of digits will be 6 the output should be \"0o10\".\n      For N = 147, the sum of digits will be 12 the output should be \"0o100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += parseInt(bin(i)[i], 8);\n  }\n  return sum;\n};\n\n/*Given a positive integers N, return the sum of its digit in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0x10\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += parseInt(bin(i)[i], 16);\n  }\n  return sum.toString(16);\n};\n\n/*Given a positive integers N, return the sum of its digit in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0o\".\n      For N = 150, the sum of digits will be 6 the output should be \"0o10\".\n      For N = 147, the sum of digits will be 12 the output should be \"0o100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += parseInt(bin(i)[i], 8);\n  }\n  return sum;\n};\n\n/*Given a positive integers N, return the sum of its digit in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0x10\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += parseInt(bin(i)[i], 16);\n  }\n  return sum.toString(16);\n};\n\n/*Given a positive integers N, return the sum of its digit in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0o\".\n      For N = 150, the sum of digits will be 6 the output should be \"0o10\".\n      For N = 147, the sum of digits will be 12 the output should be \"0o100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += parseInt(bin(i)[i], 8);\n  }\n  return sum;\n};\n\n/*Given a positive integers N, return the sum of its digit in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0x10\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string "}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = lst.filter(i => i % 2 === 0);\n  return even.map(i => i + 1);\n};\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return odd.map(i => i + 1);\n};\n\n/*Given a non-emptiest list of integers lst. return the sum of all the even elements that was at odder indexes..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 6\n  */\nconst sum = (lst) => {\n  let even = lst.filter(i => i % 2 === 0);\n  return even.reduce((acc, i) => acc + i, 0);\n};\n\n/*Given a non-emptiest list of integers lst. return the sum of all the odd elements that was at even indexes..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 7\n  */\nconst sum = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return odd.reduce((acc, i) => acc + i, 0);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the sum of the even and the sum of the odd.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 2\n  */\nconst diff = (lst) => {\n  let even = lst.filter(i => i % 2 === 0);\n  return even.reduce((acc, i) => acc + i, 0) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the sum of the odd and sum of the even.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 1\n  */\nconst diff = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return sum(odd) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the difference between the sum of the even and the sum of the odd.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> -1\n  */\nconst diff = (lst) => {\n  let even = lst.filter(i => i % 2 === 0);\n  return sum(even) - sum(odd);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the difference between the sum of the odd and sum of the even.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 1\n  */\nconst diff = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return sum(odd) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the difference between the sum of the odd and sum of the even.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> -1\n  */\nconst diff = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return sum(odd) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the difference between the sum of the odd and sum of the even.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 1\n  */\nconst diff = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return sum(odd) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the difference between the sum of the odd and sum of the even.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> -1\n  */\nconst diff = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return sum(odd) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the difference between the sum of the odd and sum of the even.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 1\n  */\nconst diff = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return sum(odd) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the difference between the sum of the odd and sum of the even.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> -1\n  */\nconst diff = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return sum(odd) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the difference between the sum of the odd and sum of the even.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 1\n  */\nconst diff = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return sum(odd) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the difference between the sum of the odd and sum of the even.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> -1\n  */\nconst diff = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return sum(odd) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the difference between the sum of the odd and sum of the even.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 1\n  */\nconst diff = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return sum(odd) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the difference between the sum of the odd and sum of the even.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> -1\n  */\nconst diff = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return sum(odd) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the difference between the sum of the odd and sum of the even.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 1\n  */\nconst diff = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return sum(odd) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the difference between the sum of the odd and sum of the even.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> -1\n  */\nconst diff = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return sum(odd) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the difference between the sum of the odd and sum of the even.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 1\n  */\nconst diff = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return sum(odd) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference between the difference between the sum of the odd and sum of the even.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> -1\n  */\nconst diff = (lst) => {\n  let odd = lst.filter(i => i % 2!== 0);\n  return sum(odd) - sum(even);\n};\n\n/*Given a non-emptiest list of integers lst. return the difference "}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newArr = []\n  let newStr = ''\n  let i = 0\n  let j = 0\n  let newStr2 = ''\n  let newStr3 = ''\n  let newStr4 = ''\n  let newStr5 = ''\n  let newStr6 = ''\n  let newStr7 = ''\n  let newStr8 = ''\n  let newStr9 = ''\n  let newStr10 = ''\n  let newStr11 = ''\n  let newStr12 = ''\n  let newStr13 = ''\n  let newStr14 = ''\n  let newStr15 = ''\n  let newStr16 = ''\n  let newStr17 = ''\n  let newStr18 = ''\n  let newStr19 = ''\n  let newStr20 = ''\n  let newStr21 = ''\n  let newStr22 = ''\n  let newStr23 = ''\n  let newStr24 = ''\n  let newStr25 = ''\n  let newStr26 = ''\n  let newStr27 = ''\n  let newStr28 = ''\n  let newStr29 = ''\n  let newStr30 = ''\n  let newStr31 = ''\n  let newStr32 = ''\n  let newStr33 = ''\n  let newStr34 = ''\n  let newStr35 = ''\n  let newStr36 = ''\n  let newStr37 = ''\n  let newStr38 = ''\n  let newStr39 = ''\n  let newStr40 = ''\n  let newStr41 = ''\n  let newStr42 = ''\n  let newStr43 = ''\n  let newStr44 = ''\n  let newStr45 = ''\n  let newStr46 = ''\n  let newStr47 = ''\n  let newStr48 = ''\n  let newStr49 = ''\n  let newStr50 = ''\n  let newStr51 = ''\n  let newStr52 = ''\n  let newStr53 = ''\n  let newStr54 = ''\n  let newStr55 = ''\n  let newStr56 = ''\n  let newStr57 = ''\n  let newStr58 = ''\n  let newStr59 = ''\n  let newStr60 = ''\n  let newStr61 = ''\n  let newStr62 = ''\n  let newStr63 = ''\n  let newStr64 = ''\n  let newStr65 = ''\n  let newStr66 = ''\n  let newStr67 = ''\n  let newStr68 = ''\n  let newStr69 = ''\n  let newStr70 = ''\n  let newStr71 = ''\n  let newStr72 = ''\n  let newStr73 = ''\n  let newStr74 = ''\n  let newStr75 = ''\n  let newStr76 = ''\n  let newStr77 = ''\n  let newStr78 = ''\n  let newStr79 = ''\n  let newStr80 = ''\n  let newStr81 = ''\n  let newStr82 = ''\n  let newStr83 = ''\n  let newStr84 = ''\n  let newStr85 = ''\n  let newStr86 = ''\n  let newStr87 = ''\n  let newStr88 = ''\n  let newStr89 = ''\n  let newStr90 = ''\n  let newStr91 = ''\n  let newStr92 = ''\n  let newStr93 = ''\n  let newStr94 = ''\n  let newStr95 = ''\n  let newStr96 = ''\n  let newStr97 = ''\n  let newStr98 = ''\n  let newStr99 = ''\n  let newStr100 = ''\n  let newStr101 = ''\n  let newStr102 = ''\n  let newStr103 = ''\n  let newStr104 = ''\n  let newStr105 = ''\n  let newStr106 = ''\n  let newStr107 = ''\n  let newStr108 = ''\n  let newStr109 = ''\n  let newStr110 = ''\n  let newStr111 = ''\n  let newStr112 = ''\n  let newStr113 = ''\n  let newStr114 = ''\n  let newStr115 = ''\n  let newStr116 = ''\n  let newStr117 = ''\n  let newStr118 = ''\n  let newStr119 = ''\n  let newStr120 = ''\n  let newStr121 = ''\n  let newStr122 = ''\n  let newStr123 = ''\n  let newStr124 = ''\n  let newStr125 = ''\n  let newStr126 = ''\n  let newStr127 = ''\n  let newStr128 = ''\n  let newStr129 = ''\n  let newStr130 = ''\n  let newStr131 = ''\n  let newStr132 = ''\n  let newStr133 = ''\n  let newStr134 = ''\n  let newStr135 = ''\n  let newStr136 = ''\n  let newStr137 = ''\n  let newStr138 = ''\n  let newStr139 = ''\n  let newStr140 = ''\n  let newStr141 = ''\n  let newStr142 = ''\n  let newStr143 = ''\n  let newStr144 = ''\n  let newStr145 = ''\n  let newStr146 = ''\n  let newStr147 = ''\n  let newStr148 = ''\n  let newStr149 = ''\n  let newStr150 = ''\n  let newStr151 = ''\n  let newStr152 = ''\n  let newStr153 = ''\n  let newStr154 = ''\n  let newStr155 = ''\n  let newStr156 = ''\n  let newStr157 = ''\n  let newStr158 = ''\n  let newStr159 = ''\n  let newStr160 = ''\n  let newStr161 = ''\n  let newStr162 = ''\n  let newStr163 = ''\n  let newStr164 = ''\n  let newStr165 = ''\n  let newStr166 = ''\n  let newStr167 = ''\n  let newStr168 = ''\n  let newStr169 = ''\n  let newStr170 = ''\n  let newStr171 = ''\n  let newStr172 = ''\n  let newStr173 = ''\n  let newStr174 = ''\n  let newStr175 = ''\n  let newStr176 = ''\n  let newStr177 = ''\n  let newStr178 = ''\n  let newStr179 = ''\n  let newStr180 = ''\n  let newStr181 = ''\n  let newStr182 = ''\n  let newStr183 = ''\n  let newStr184 = ''\n  let newStr185 = ''\n  let newStr186 = ''\n  let newStr187 = ''\n  let newStr188 = ''\n  let newStr189 = ''\n  let newStr190 = ''\n  let newStr191 = ''\n  let newStr192 = ''\n  let newStr193 = ''\n  let newStr194 = ''\n  let newStr195 = ''\n  let newStr196 = ''\n  let newStr197 = ''\n  let newStr198 = ''\n  let newStr199 = ''\n  let newStr200 = ''\n  let newStr201 = ''\n  let newStr202 = ''\n  let newStr203 = ''\n  let newStr204 = ''\n  let newStr205 = ''\n  let newStr206 = ''\n  let newStr207 = ''\n  let newStr208 = ''\n  let newStr209 = ''\n  let newStr210 = ''\n  let newStr211 = ''\n  let newStr212 = ''\n  let newStr213 = ''\n  let newStr214 = ''\n  let newStr215 = ''\n  let newStr216 = ''\n  let newStr217 = ''\n  let newStr218 = ''\n  let newStr219 = ''\n  let newStr220 = ''\n  let newStr221 = ''\n  let newStr222 = ''\n  let newStr223 = ''\n  let newStr224 = ''\n  let newStr225 = ''\n  let newStr226 = ''\n  let newStr227 = ''\n  let newStr228 = ''\n  let newStr229 = ''\n  let newStr230 = ''\n  let "}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let rowIndexList = []\n  let columnIndexList = []\n  let rowIndex = 0\n  let "}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let newArray = []\n  let sum = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let sumOfFirst = 0\n  let sumOfLast = 0\n  let sumOfFirstIndex = 0\n  let sumOfLastIndex = 0\n  let sumOfFirstValue = 0\n  let sumOfLastValue = 0\n  let sumOfFirstValueIndex = 0\n  let sumOfLastValueIndex = 0\n  let sumOfFirstValueValue = 0\n  let sumOfLastValueValue = 0\n  let sumOfFirstValueValueIndex = 0\n  let sumOfLastValueValueIndex = 0\n  let sumOfFirstValueValueValue = 0\n  let sumOfLastValueValueValue = 0\n  let sumOfFirstValueValueValueIndex = 0\n  let sumOfLastValueValueValueIndex = 0\n  let sumOfFirstValueValueValueValue = 0\n  let sumOfLastValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueIndex = 0\n  let sumOfLastValueValueValueValueIndex = 0\n  let sumOfFirstValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueIndex = 0\n  let sumOfLastValueValueValueValueValueIndex = 0\n  let sumOfFirstValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueIndex = 0\n  let sumOfLastValueValueValueValueValueValueIndex = 0\n  let sumOfFirstValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueIndex = 0\n  let sumOfLastValueValueValueValueValueValueValueIndex = 0\n  let sumOfFirstValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfFirstValueValueValueValueValueValueValueValueValueValueValue = 0\n  let sumOfLastValueValueValue"}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newString = '';\n  let newStringArray = [];\n  let newStringArray2 = [];\n  let newStringArray3 = [];\n  let newStringArray4 = [];\n  let newStringArray5 = [];\n  let newStringArray6 = [];\n  let newStringArray7 = [];\n  let newStringArray8 = [];\n  let newStringArray9 = [];\n  let newStringArray10 = [];\n  let newStringArray11 = [];\n  let newStringArray12 = [];\n  let newStringArray13 = [];\n  let newStringArray14 = [];\n  let newStringArray15 = [];\n  let newStringArray16 = [];\n  let newStringArray17 = [];\n  let newStringArray18 = [];\n  let newStringArray19 = [];\n  let newStringArray20 = [];\n  let newStringArray21 = [];\n  let newStringArray22 = [];\n  let newStringArray23 = [];\n  let newStringArray24 = [];\n  let newStringArray25 = [];\n  let newStringArray26 = [];\n  let newStringArray27 = [];\n  let newStringArray28 = [];\n  let newStringArray29 = [];\n  let newStringArray30 = [];\n  let newStringArray31 = [];\n  let newStringArray32 = [];\n  let newStringArray33 = [];\n  let newStringArray34 = [];\n  let newStringArray35 = [];\n  let newStringArray36 = [];\n  let newStringArray37 = [];\n  let newStringArray38 = [];\n  let newStringArray39 = [];\n  let newStringArray40 = [];\n  let newStringArray41 = [];\n  let newStringArray42 = [];\n  let newStringArray43 = [];\n  let newStringArray44 = [];\n  let newStringArray45 = [];\n  let newStringArray46 = [];\n  let newStringArray47 = [];\n  let newStringArray48 = [];\n  let newStringArray49 = [];\n  let newStringArray50 = [];\n  let newStringArray51 = [];\n  let newStringArray52 = [];\n  let newStringArray53 = [];\n  let newStringArray54 = [];\n  let newStringArray55 = [];\n  let newStringArray56 = [];\n  let newStringArray57 = [];\n  let newStringArray58 = [];\n  let newStringArray59 = [];\n  let newStringArray60 = [];\n  let newStringArray61 = [];\n  let newStringArray62 = [];\n  let newStringArray63 = [];\n  let newStringArray64 = [];\n  let newStringArray65 = [];\n  let newStringArray66 = [];\n  let newStringArray67 = [];\n  let newStringArray68 = [];\n  let newStringArray69 = [];\n  let newStringArray70 = [];\n  let newStringArray71 = [];\n  let newStringArray72 = [];\n  let newStringArray73 = [];\n  let newStringArray74 = [];\n  let newStringArray75 = [];\n  let newStringArray76 = [];\n  let newStringArray77 = [];\n  let newStringArray78 = [];\n  let newStringArray79 = [];\n  let newStringArray80 = [];\n  let newStringArray81 = [];\n  let newStringArray82 = [];\n  let newStringArray83 = [];\n  let newStringArray84 = [];\n  let newStringArray85 = [];\n  let newStringArray86 = [];\n  let newStringArray87 = [];\n  let newStringArray88 = [];\n  let newStringArray89 = [];\n  let newStringArray90 = [];\n  let newStringArray91 = [];\n  let newStringArray92 = [];\n  let newStringArray93 = [];\n  let newStringArray94 = [];\n  let newStringArray95 = [];\n  let newStringArray96 = [];\n  let newStringArray97 = [];\n  let newStringArray98 = [];\n  let newStringArray99 = [];\n  let newStringArray100 = [];\n  let newStringArray101 = [];\n  let newStringArray102 = [];\n  let newStringArray103 = [];\n  let newStringArray104 = [];\n  let newStringArray105 = [];\n  let newStringArray106 = [];\n  let newStringArray107 = [];\n  let newStringArray108 = [];\n  let newStringArray109 = [];\n  let newStringArray110 = [];\n  let newStringArray111 = [];\n  let newStringArray112 = [];\n  let newStringArray113 = [];\n  let newStringArray114 = [];\n  let newStringArray115 = [];\n  let newStringArray116 = [];\n  let newStringArray117 = [];\n  let newStringArray118 = [];\n  let newStringArray119 = [];\n  let newStringArray120 = [];\n  let newStringArray121 = [];\n  let newStringArray122 = [];\n  let newStringArray123 = [];\n  let newStringArray124 = [];\n  let newStringArray125 = [];\n  let newStringArray126 = [];\n  let newStringArray127 = [];\n  let newStringArray128 = [];\n  let newStringArray129 = [];\n  let newStringArray130 = [];\n  let newStringArray131 = [];\n  let newStringArray132 = [];\n  let newStringArray133 = [];\n  let newStringArray134 = [];\n  let newStringArray135 = [];\n  let newStringArray136 = [];\n  let newStringArray137 = [];\n  let newStringArray138 = [];\n  let newStringArray139 = [];\n  let newStringArray140 = [];\n  let newStringArray141 = [];\n  let newStringArray142 = [];\n  let newStringArray143 = [];\n  let newStringArray144 = [];\n  let newStringArray145 = [];\n  let newStringArray146 = [];\n  let newStringArray147 = [];\n  let newStringArray148 = [];\n  let newStringArray149 = [];\n  let newStringArray150 = [];\n  let newStringArray151 = [];\n  let newStringArray152 = [];\n  let newStringArray153 = [];\n  let newStringArray154 = [];\n  let newStringArray155 = [];\n  let newStringArray156 = [];\n  let newStringArray157 = [];\n  let newStringArray158 = [];\n  let newStringArray159 = [];\n  let newStringArray160 = [];\n  let newStringArray161 = [];\n  let newStringArray162 = [];\n  let newStringArray163 = [];\n  let newStringArray164 = [];\n  let newStringArray165 = [];\n  let newStringArray166 = [];\n  let newStringArray167 = [];\n  let newStringArray168 = [];\n  let newStringArray169 = [];\n  let newStringArray170 = [];\n  let newStringArray171 = [];\n  let newStringArray172 = [];\n  let newStringArray173 = [];\n  let newStringArray174 = [];\n  let newStringArray175 = [];\n  let newStringArray176 = [];\n  let newStringArray177 = [];\n  let newStringArray178 = [];\n  let newStringArray179 = [];\n  let newStringArray180 = [];\n  let newStringArray181 = [];\n  let newStringArray182 = [];\n  let newStringArray183 = [];\n  let newStringArray184 = [];\n  let newStringArray185 = [];\n  let newStringArray186 = [];\n  let newStringArray187 = [];\n  let newStringArray188 = [];\n  let newStringArray189 = [];\n  let newStringArray190 = [];\n  let newStringArray191 = [];\n  let newStringArray192 = [];\n  let newStringArray193 = [];\n  let newStringArray194 = [];\n"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (minIndex === maxIndex) {\n    return null;\n  }\n  return [min, minIndex, maxIndex];\n};\n\nconst findSmallest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (minIndex === maxIndex) {\n    return null;\n  }\n  return [min, minIndex, maxIndex];\n};\n\nconst findSmallestIndex = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (minIndex === maxIndex) {\n    return null;\n  }\n  return [min, minIndex, maxIndex];\n};\n\nconst findSmallestIndexByValue = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (minIndex === maxIndex) {\n    return null;\n  }\n  return [min, minIndex, maxIndex];\n};\n\nconst findSmallestIndexByValueAndIndex = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (minIndex === maxIndex) {\n    return null;\n  }\n  return [min, minIndex, maxIndex];\n};\n\nconst findSmallestIndexByValueAndIndexByValue = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (minIndex === maxIndex) {\n    return null;\n  }\n  return [min, minIndex, maxIndex];\n};\n\nconst findSmallestIndexByValueAndIndexByIndex = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (minIndex === maxIndex) {\n    return null;\n  }\n  return [min, minIndex, maxIndex];\n};\n\nconst findSmallestIndexByValueAndIndexByValueAndIndex = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (minIndex === maxIndex) {\n    return null;\n  }\n  return [min, minIndex, maxIndex];\n};\n\nconst findSmallestIndexByValueAndIndexByValueAndIndexByIndex = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (minIndex === maxIndex) {\n    return null;\n  }\n  return [min, minIndex, maxIndex];\n};\n\nconst findSmallestIndexByValueAndIndexByValueAndIndexByValueAndIndex = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (minIndex === maxIndex) {\n    return null;\n  }\n  return [min, minIndex, maxIndex];\n};\n\nconst findSmallestIndexByValueAndIndexByValueAndIndexByValueAndIndexByIndex = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (minIndex === maxIndex) {\n    return null;\n  }\n  return [min, minIndex, maxIndex];\n};\n\nconst findSmallestIndexByValueAndIndexByValueAndIndexByValueAndIndexByValueAndIndex = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (minIndex === maxIndex) {\n    return null;\n  }\n  return [min, minIndex, maxIndex];\n};\n\nconst findSmallestIndexByValueAndIndexByValueAndIndexByValueAndIndexByValueAndIndexByIndex = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (minIndex === maxIndex) {\n    return null;\n  }\n  return [min, minIndex, maxIndex];\n};\n\nconst findSmallestIndexByValueAndIndexByValueAndIndexByValueAndIndexByValueAndIndexByValueAndIndex = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (max < lst[i]) {\n      "}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = S.split('.');\n  sentences.forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\""}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y && y === z || x === -y && -y === z || x === -z && -z === y || x === z && z === y || x === -z && -z === -y || x === y && y === -z || x === -y && -y === -z || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y || x === -z && -z === -y;\n};\n\n/**\n * Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  return x === y && y === z || x === -y && -y === z || x === -z && -z === y || x === z && z === y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y;\n};\n\n/**\n * Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  evenInt(5, 2, 7) ➞ true\n  evenInt(3, 2, 2) ➞ false\n  evenInt(3, -2, 1) ➞ true\n  evenInt(3.6, -2.2, 2) ➞ false\n  */\nconst evenInt = (x, y, z) => {\n  return x === y && y === z || x === -y && -y === z || x === -z && -z === y || x === z && z === y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y;\n};\n\n/**\n * Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  oddInt(5, 2, 7) ➞ true\n  oddInt(3, 2, 2) ➞ false\n  oddInt(3, -2, 1) ➞ true\n  oddInt(3.6, -2.2, 2) ➞ false\n  */\nconst oddInt = (x, y, z) => {\n  return x === y && y === z || x === -y && -y === z || x === -z && -z === y || x === z && z === y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y;\n};\n\n/**\n * Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  evenOdd(5, 2, 7) ➞ true\n  evenOdd(3, 2, 2) ➞ false\n  evenOdd(3, -2, 1) ➞ true\n  evenOdd(3.6, -2.2, 2) ➞ false\n  */\nconst evenOddInt = (x, y, z) => {\n  return x === y && y === z || x === -y && -y === z || x === -z && -z === y || x === z && z === y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y;\n};\n\n/**\n * Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  oddOdd(5, 2, 7) ➞ true\n  oddOdd(3, 2, 2) ➞ false\n  oddOdd(3, -2, 1) ➞ true\n  oddOdd(3.6, -2.2, 2) ➞ false\n  */\nconst oddOddInt = (x, y, z) => {\n  return x === y && y === z || x === -y && -y === z || x === -z && -z === y || x === z && z === y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y || x === -z && -z === -y || x === -y && -y === z || x === z && z === -y;\n};\n\n/**\n * Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  evenOdd(5, 2, 7) ➞ true\n  evenOdd(3, 2, 2) ➞ false\n  evenOdd(3, -2, 1) ➞ true\n  evenOdd(3.6, -2.2, 2) ➞ false\n  */\nconst evenOddEvenInt = (x, y, z) => {\n  return x === y && y === z || x === -y && -y === z || x === -z && -z === y || x === z && z === y || x === -z && -z === -y || x === -y && -y === z || x === z && "}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsIndex = 0;\n  let vowelsCount = 0;\n  let vowelsCount2 = 0;\n  let vowelsCount3 = 0;\n  let vowelsCount4 = 0;\n  let vowelsCount5 = 0;\n  let vowelsCount6 = 0;\n  let vowelsCount7 = 0;\n  let vowelsCount8 = 0;\n  let vowelsCount9 = 0;\n  let vowelsCount10 = 0;\n  let vowelsCount11 = 0;\n  let vowelsCount12 = 0;\n  let vowelsCount13 = 0;\n  let vowelsCount14 = 0;\n  let vowelsCount15 = 0;\n  let vowelsCount16 = 0;\n  let vowelsCount17 = 0;\n  let vowelsCount18 = 0;\n  let vowelsCount19 = 0;\n  let vowelsCount20 = 0;\n  let vowelsCount21 = 0;\n  let vowelsCount22 = 0;\n  let vowelsCount23 = 0;\n  let vowelsCount24 = 0;\n  let vowelsCount25 = 0;\n  let vowelsCount26 = 0;\n  let vowelsCount27 = 0;\n  let vowelsCount28 = 0;\n  let vowelsCount29 = 0;\n  let vowelsCount30 = 0;\n  let vowelsCount31 = 0;\n  let vowelsCount32 = 0;\n  let vowelsCount33 = 0;\n  let vowelsCount34 = 0;\n  let vowelsCount35 = 0;\n  let vowelsCount36 = 0;\n  let vowelsCount37 = 0;\n  let vowelsCount38 = 0;\n  let vowelsCount39 = 0;\n  let vowelsCount40 = 0;\n  let vowelsCount41 = 0;\n  let vowelsCount42 = 0;\n  let vowelsCount43 = 0;\n  let vowelsCount44 = 0;\n  let vowelsCount45 = 0;\n  let vowelsCount46 = 0;\n  let vowelsCount47 = 0;\n  let vowelsCount48 = 0;\n  let vowelsCount49 = 0;\n  let vowelsCount50 = 0;\n  let vowelsCount51 = 0;\n  let vowelsCount52 = 0;\n  let vowelsCount53 = 0;\n  let vowelsCount54 = 0;\n  let vowelsCount55 = 0;\n  let vowelsCount56 = 0;\n  let vowelsCount57 = 0;\n  let vowelsCount58 = 0;\n  let vowelsCount59 = 0;\n  let vowelsCount60 = 0;\n  let vowelsCount61 = 0;\n  let vowelsCount62 = 0;\n  let vowelsCount63 = 0;\n  let vowelsCount64 = 0;\n  let vowelsCount65 = 0;\n  let vowelsCount66 = 0;\n  let vowelsCount67 = 0;\n  let vowelsCount68 = 0;\n  let vowelsCount69 = 0;\n  let vowelsCount70 = 0;\n  let vowelsCount71 = 0;\n  let vowelsCount72 = 0;\n  let vowelsCount73 = 0;\n  let vowelsCount74 = 0;\n  let vowelsCount75 = 0;\n  let vowelsCount76 = 0;\n  let vowelsCount77 = 0;\n  let vowelsCount78 = 0;\n  let vowelsCount79 = 0;\n  let vowelsCount80 = 0;\n  let vowelsCount81 = 0;\n  let vowelsCount82 = 0;\n  let vowelsCount83 = 0;\n  let vowelsCount84 = 0;\n  let vowelsCount85 = 0;\n  let vowelsCount86 = 0;\n  let vowelsCount87 = 0;\n  let vowelsCount88 = 0;\n  let vowelsCount89 = 0;\n  let vowelsCount90 = 0;\n  let vowelsCount91 = 0;\n  let vowelsCount92 = 0;\n  let vowelsCount93 = 0;\n  let vowelsCount94 = 0;\n  let vowelsCount95 = 0;\n  let vowelsCount96 = 0;\n  let vowelsCount97 = 0;\n  let vowelsCount98 = 0;\n  let vowelsCount99 = 0;\n  let vowelsCount100 = 0;\n  let vowelsCount101 = 0;\n  let vowelsCount102 = 0;\n  let vowelsCount103 = 0;\n  let vowelsCount104 = 0;\n  let vowelsCount105 = 0;\n  let vowelsCount106 = 0;\n  let vowelsCount107 = 0;\n  let vowelsCount108 = 0;\n  let vowelsCount109 = 0;\n  let vowelsCount110 = 0;\n  let vowelsCount111 = 0;\n  let vowelsCount112 = 0;\n  let vowelsCount113 = 0;\n  let vowelsCount114 = 0;\n  let vowelsCount115 = 0;\n  let vowelsCount116 = 0;\n  let vowelsCount117 = 0;\n  let vowelsCount118 = 0;\n  let vowelsCount119 = 0;\n  let vowelsCount120 = 0;\n  let vowelsCount121 = 0;\n  let vowelsCount122 = 0;\n  let vowelsCount123 = 0;\n  let vowelsCount124 = 0;\n  let vowelsCount125 = 0;\n  let vowelsCount126 = 0;\n  let vowelsCount127 = 0;\n  let vowelsCount128 = 0;\n  let vowelsCount129 = 0;\n  let vowelsCount130 = 0;\n  let vowelsCount131 = 0;\n  let vowelsCount132 = 0;\n  let vowelsCount133 = 0;\n  let vowelsCount134 = 0;\n  let vowelsCount135 = 0;\n  let vowelsCount136 = 0;\n  let vowelsCount137 = 0;\n  let vowelsCount138 = 0;\n  let vowelsCount139 = 0;\n  let vowelsCount140 = 0;\n  let vowelsCount141 = 0;\n  let vowelsCount142 = 0;\n  let vowelsCount143 = 0;\n  let vowelsCount144 = 0;\n  let vowelsCount145 = 0;\n  let vowelsCount146 = 0;\n  let vowelsCount147 = 0;\n  let vowelsCount148 = 0;\n  let vowelsCount149 = 0;\n  let vowelsCount150 = 0;\n  let vowelsCount151 = 0;\n  let vowelsCount152 = 0;\n  let vowelsCount153 = 0;\n  let vowelsCount154 = 0;\n  let vowelsCount155 = 0;\n  let vowelsCount156 = 0;\n  let vowelsCount157 = 0;\n  let vowelsCount158 = 0;\n  let vowelsCount159 = 0;\n  let vowelsCount160 = 0;\n  let vowelsCount161 = 0;\n  let vowelsCount162 = 0;\n  let vowelsCount163 = 0;\n  let vowelsCount164 = 0;\n  let vowelsCount165 = 0;\n  let vowelsCount166 = 0;\n  let vowelsCount167 = 0;\n  let vowelsCount168 = 0;\n  let vowelsCount169 = 0;\n  let vowelsCount170 = 0;\n  let vowelsCount171 = 0;\n  let vowelsCount172 = 0;\n  let vowelsCount173 = 0;\n  let vowelsCount174 = 0;\n  let vowelsCount175 = 0;\n  let vowelsCount176 = 0;\n  let vowelsCount177 = 0;\n  let vowelsCount178 = 0;\n  let vowelsCount179 = 0;\n  let vowelsCount180 = 0;\n  let vowelsCount181 = 0;\n  let vowelsCount182 = 0;\n  let vowelsCount183 = 0;\n  let vowelsCount184 = 0;\n  let vowelsCount185 = 0;\n  let vowelsCount186 = 0;\n  let vowelsCount187 = 0;\n  let vowelsCount188 = 0;\n  let vowelsCount189 = 0;\n  let vowelsCount190 = 0;\n  let vowelsCount191 = 0;\n  let vowelsCount192 = 0;\n  let vowelsCount193 = 0;\n  let vowelsCount194 = 0;\n  let vowelsCount195 = 0;\n  let vowelsCount196 = 0;\n  let vowelsCount197 = 0;\n  let vowelsCount198 = 0;\n  let vowelsCount199 = 0;\n  let vowelsCount200 = 0;\n  let vowelsCount201 = 0;\n  let vowelsCount202 = 0;\n  let vowelsCount203 = 0;\n  let vowelsCount204 = 0;\n  let vowelsCount"}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = 0;\n  let maxDigit = 0;\n  let maxDigitSum = 0;\n  let maxDigitSum2 = 0;\n  let maxDigitSum3 = 0;\n  let maxDigitSum4 = 0;\n  let maxDigitSum5 = 0;\n  let maxDigitSum6 = 0;\n  let maxDigitSum7 = 0;\n  let maxDigitSum8 = 0;\n  let maxDigitSum9 = 0;\n  let maxDigitSum10 = 0;\n  let maxDigitSum11 = 0;\n  let maxDigitSum12 = 0;\n  let maxDigitSum13 = 0;\n  let maxDigitSum14 = 0;\n  let maxDigitSum15 = 0;\n  let maxDigitSum16 = 0;\n  let maxDigitSum17 = 0;\n  let maxDigitSum18 = 0;\n  let maxDigitSum19 = 0;\n  let maxDigitSum20 = 0;\n  let maxDigitSum21 = 0;\n  let maxDigitSum22 = 0;\n  let maxDigitSum23 = 0;\n  let maxDigitSum24 = 0;\n  let maxDigitSum25 = 0;\n  let maxDigitSum26 = 0;\n  let maxDigitSum27 = 0;\n  let maxDigitSum28 = 0;\n  let maxDigitSum29 = 0;\n  let maxDigitSum30 = 0;\n  let maxDigitSum31 = 0;\n  let maxDigitSum32 = 0;\n  let maxDigitSum33 = 0;\n  let maxDigitSum34 = 0;\n  let maxDigitSum35 = 0;\n  let maxDigitSum36 = 0;\n  let maxDigitSum37 = 0;\n  let maxDigitSum38 = 0;\n  let maxDigitSum39 = 0;\n  let maxDigitSum40 = 0;\n  let maxDigitSum41 = 0;\n  let maxDigitSum42 = 0;\n  let maxDigitSum43 = 0;\n  let maxDigitSum44 = 0;\n  let maxDigitSum45 = 0;\n  let maxDigitSum46 = 0;\n  let maxDigitSum47 = 0;\n  let maxDigitSum48 = 0;\n  let maxDigitSum49 = 0;\n  let maxDigitSum50 = 0;\n  let maxDigitSum51 = 0;\n  let maxDigitSum52 = 0;\n  let maxDigitSum53 = 0;\n  let maxDigitSum54 = 0;\n  let maxDigitSum55 = 0;\n  let maxDigitSum56 = 0;\n  let maxDigitSum57 = 0;\n  let maxDigitSum58 = 0;\n  let maxDigitSum59 = 0;\n  let maxDigitSum60 = 0;\n  let maxDigitSum61 = 0;\n  let maxDigitSum62 = 0;\n  let maxDigitSum63 = 0;\n  let maxDigitSum64 = 0;\n  let maxDigitSum65 = 0;\n  let maxDigitSum66 = 0;\n  let maxDigitSum67 = 0;\n  let maxDigitSum68 = 0;\n  let maxDigitSum69 = 0;\n  let maxDigitSum70 = 0;\n  let maxDigitSum71 = 0;\n  let maxDigitSum72 = 0;\n  let maxDigitSum73 = 0;\n  let maxDigitSum74 = 0;\n  let maxDigitSum75 = 0;\n  let maxDigitSum76 = 0;\n  let maxDigitSum77 = 0;\n  let maxDigitSum78 = 0;\n  let maxDigitSum79 = 0;\n  let maxDigitSum80 = 0;\n  let maxDigitSum81 = 0;\n  let maxDigitSum82 = 0;\n  let maxDigitSum83 = 0;\n  let maxDigitSum84 = 0;\n  let maxDigitSum85 = 0;\n  let maxDigitSum86 = 0;\n  let maxDigitSum87 = 0;\n  let maxDigitSum88 = 0;\n  let maxDigitSum89 = 0;\n  let maxDigitSum90 = 0;\n  let maxDigitSum91 = 0;\n  let maxDigitSum92 = 0;\n  let maxDigitSum93 = 0;\n  let maxDigitSum94 = 0;\n  let maxDigitSum95 = 0;\n  let maxDigitSum96 = 0;\n  let maxDigitSum97 = 0;\n  let maxDigitSum98 = 0;\n  let maxDigitSum99 = 0;\n  let maxDigitSum100 = 0;\n  let maxDigitSum101 = 0;\n  let maxDigitSum102 = 0;\n  let maxDigitSum103 = 0;\n  let maxDigitSum104 = 0;\n  let maxDigitSum105 = 0;\n  let maxDigitSum106 = 0;\n  let maxDigitSum107 = 0;\n  let maxDigitSum108 = 0;\n  let maxDigitSum109 = 0;\n  let maxDigitSum110 = 0;\n  let maxDigitSum111 = 0;\n  let maxDigitSum112 = 0;\n  let maxDigitSum113 = 0;\n  let maxDigitSum114 = 0;\n  let maxDigitSum115 = 0;\n  let maxDigitSum116 = 0;\n  let maxDigitSum117 = 0;\n  let maxDigitSum118 = 0;\n  let maxDigitSum119 = 0;\n  let maxDigitSum120 = 0;\n  let maxDigitSum121 = 0;\n  let maxDigitSum122 = 0;\n  let maxDigitSum123 = 0;\n  let maxDigitSum124 = 0;\n  let maxDigitSum125 = 0;\n  let maxDigitSum126 = 0;\n  let maxDigitSum127 = 0;\n  let maxDigitSum128 = 0;\n  let maxDigitSum129 = 0;\n  let maxDigitSum130 = 0;\n  let maxDigitSum131 = 0;\n  let maxDigitSum132 = 0;\n  let maxDigitSum133 = 0;\n  let maxDigitSum134 = 0;\n  let maxDigitSum135 = 0;\n  let maxDigitSum136 = 0;\n  let maxDigitSum137 = 0;\n  let maxDigitSum138 = 0;\n  let maxDigitSum139 = 0;\n  let maxDigitSum140 = 0;\n  let maxDigitSum141 = 0;\n  let maxDigitSum142 = 0;\n  let maxDigitSum143 = 0;\n  let maxDigitSum144 = 0;\n  let maxDigitSum145 = 0;\n  let maxDigitSum146 = 0;\n  let maxDigitSum147 = 0;\n  let maxDigitSum148 = 0;\n  let maxDigitSum149 = 0;\n  let maxDigitSum150 = 0;\n  let maxDigitSum151 = 0;\n  let maxDigitSum152 = 0;\n  let maxDigitSum153 = 0;\n  let maxDigitSum154 = 0;\n  let maxDigitSum155 = 0;\n  let maxDigitSum156 = 0;\n  let maxDigitSum157 = 0;\n  let maxDigitSum158 = 0;\n  let maxDigitSum159 = 0;\n  let maxDigitSum160 = 0;\n  let maxDigitSum161 = 0;\n  let maxDigitSum162 = 0;\n  let maxDigitSum163 = 0;\n  let maxDigitSum164 = 0;\n  let maxDigitSum165 = 0;\n  let maxDigitSum166 = 0;\n  let maxDigitSum167 = 0;\n  let maxDigitSum168 = 0;\n  let maxDigitSum169 = 0;\n  let maxDigitSum170 = 0;\n  let maxDigitSum171 = 0;\n  let maxDigitSum172 = 0;\n  let maxDigitSum173 = 0;\n  let maxDigitSum174 = 0;\n  let maxDigitSum175 = 0;\n  let maxDigitSum176 = 0;\n  let maxDigitSum177 = 0;\n  let maxDigitSum178 = 0;\n  let maxDigitSum179 = 0;\n  let maxDigitSum180 = 0;\n  let maxDigitSum181 = 0;\n  let maxDigitSum182 = 0;\n  let maxDigitSum183 = 0;\n  let maxDigitSum184 = 0;\n  let maxDigitSum185 = 0;\n  let maxDigitSum186 = 0;\n  let maxDigitSum187 = 0;\n  let maxDigitSum188 = 0;\n  let maxDigitSum189 = 0;\n  let maxDigitSum190 = 0;\n  let maxDigitSum191 = 0;\n  let maxDigitSum192 = 0;\n  let maxDigitSum19"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllKeysStringsInLowerCase = true;\n  let isAllKeysStringsInUpperCase = true;\n  Object.keys(dict).forEach((key) => {\n    if (dict[key] instanceof String) {\n      isAllKeysStringsInLowerCase = isAllKeysStringsInLowerCase && dict[key].toLowerCase() === key;\n      isAllKeysStringsInUpperCase = isAllKeysStringsInUpperCase && dict[key].toUpperCase() === key;\n    }\n  });\n  return isAllKeysStringsInLowerCase && isAllKeysStringsInUpperCase;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was numbers in lowest cases or all keys was numbers in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllKeysNumbersInLowerCase = true;\n  let isAllKeysNumbersInUpperCase = true;\n  Object.keys(dict).forEach((key) => {\n    if (dict[key] instanceof Number) {\n      isAllKeysNumbersInLowerCase = isAllKeysNumbersInLowerCase && dict[key] === key;\n      isAllKeysNumbersInUpperCase = isAllKeysNumbersInUpperCase && dict[key] === key;\n    }\n  });\n  return isAllKeysNumbersInLowerCase && isAllKeysNumbersInUpperCase;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was booleans in lowest cases or all keys was booleans in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllKeysBooleansInLowerCase = true;\n  let isAllKeysBooleansInUpperCase = true;\n  Object.keys(dict).forEach((key) => {\n    if (dict[key] instanceof Boolean) {\n      isAllKeysBooleansInLowerCase = isAllKeysBooleansInLowerCase && dict[key] === key;\n      isAllKeysBooleansInUpperCase = isAllKeysBooleansInUpperCase && dict[key] === key;\n    }\n  });\n  return isAllKeysBooleansInLowerCase && isAllKeysBooleansInUpperCase;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was arrays in lowest cases or all keys was arrays in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllKeysArraysInLowerCase = true;\n  let isAllKeysArraysInUpperCase = true;\n  Object.keys(dict).forEach((key) => {\n    if (dict[key] instanceof Array) {\n      isAllKeysArraysInLowerCase = isAllKeysArraysInLowerCase && dict[key].length === key;\n      isAllKeysArraysInUpperCase = isAllKeysArraysInUpperCase && dict[key].length === key;\n    }\n  });\n  return isAllKeysArraysInLowerCase && isAllKeysArraysInUpperCase;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was objects in lowest cases or all keys was objects in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllKeysObjectsInLowerCase = true;\n  let isAllKeysObjectsInUpperCase = true;\n  Object.keys(dict).forEach((key) => {\n    if (dict[key] instanceof Object) {\n      isAllKeysObjectsInLowerCase = isAllKeysObjectsInLowerCase && checkDictCase(dict[key]);\n      isAllKeysObjectsInUpperCase = isAllKeysObjectsInUpperCase && checkDictCase(dict[key]);\n    }\n  });\n  return isAllKeysObjectsInLowerCase && isAllKeysObjectsInUpperCase;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return "}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  let counter = 1;\n  let i = 2;\n  while (i <= n) {\n    if (primes.includes(i)) {\n      primes.push(i);\n      counter++;\n    } else {\n      primes.splice(0, 1);\n      counter = 1;\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the integers\n from the array.\n  for example:\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  */\nconst sumFrom = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the integers\n from the array.\n  for example:\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  */\nconst sumFrom = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the integers\n from the array.\n  for example:\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  */\nconst sumFrom = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the integers\n from the array.\n  for example:\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  */\nconst sumFrom = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the integers\n from the array.\n  for example:\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  */\nconst sumFrom = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the integers\n from the array.\n  for example:\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  */\nconst sumFrom = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the integers\n from the array.\n  for example:\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  */\nconst sumFrom = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the integers\n from the array.\n  for example:\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  */\nconst sumFrom = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the integers\n from the array.\n  for example:\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  */\nconst sumFrom = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the integers\n from the array.\n  for example:\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  */\nconst sumFrom = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the integers\n from the array.\n  for example:\n  sumFrom([2,3,5,7,11,13,17]) => [6,11,17]\n  sum"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  let digit = 0;\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 = 0;\n  let sum155 = 0;\n  let sum156 = 0;\n  let sum157 = 0;\n  let sum158 = 0;\n  let sum159 = 0;\n  let sum160 = 0;\n  let sum161 = 0;\n  let sum162 = 0;\n  let sum163 = 0;\n  let sum164 = 0;\n  let sum165 = 0;\n  let sum166 = 0;\n  let sum167 = 0;\n  let sum168 = 0;\n  let sum169 = 0;\n  let sum170 = 0;\n  let sum171 = 0;\n  let sum172 = 0;\n  let sum173 = 0;\n  let sum174 = 0;\n  let sum175 = 0;\n  let sum176 = 0;\n  let sum177 = 0;\n  let sum178 = 0;\n  let sum179 = 0;\n  let sum180 = 0;\n  let sum181 = 0;\n  let sum182 = 0;\n  let sum183 = 0;\n  let sum184 = 0;\n  let sum185 = 0;\n  let sum186 = 0;\n  let sum187 = 0;\n  let sum188 = 0;\n  let sum189 = 0;\n  let sum190 = 0;\n  let sum191 = 0;\n  let sum192 = 0;\n  let sum193 = 0;\n  let sum194 = 0;\n  let sum195 = 0;\n  let sum196 = 0;\n  let sum197 = 0;\n  let sum198 = 0;\n  let sum199 = 0;\n  let sum200 = 0;\n  let sum201 = 0;\n  let sum202 = 0;\n  let sum203 = 0;\n  let sum204 = 0;\n  let sum205 = 0;\n  let sum206 = 0;\n  let sum207 = 0;\n  let sum208 = 0;\n  let sum209 = 0;\n  let sum210 = 0;\n  let sum211 = 0;\n  let sum212 = 0;\n  let sum213 = 0;\n  let sum214 = 0;\n  let sum215 = 0;\n  let sum216 = 0;\n  let sum217 = 0;\n  let sum218 = 0;\n  let sum219 = 0;\n  let sum220 = 0;\n  let sum221 = 0;\n  let sum222 = 0;\n  let sum223 = 0;\n  let sum224 = 0;\n  let sum225 = 0;\n  let sum226 = 0;\n  let sum227 = 0;\n  let sum228 = 0;\n  let sum229 = 0;\n  let sum230 = 0;\n  let sum231 = 0;\n  let sum232 = 0;\n  let sum233 = 0;\n  let sum234 = 0;\n  let sum235 = 0;\n  let sum236 = 0;\n  let sum237 = 0;\n  let sum238 = 0;\n  let sum239 = 0;\n  let sum240 = 0;\n  let sum241 = 0;\n  let sum242 = 0;\n  let sum243 = 0;\n  let sum244 = 0;\n  let sum245 = 0;\n  let sum246 = 0;\n  let sum247 = 0;\n  let sum248 = 0;\n  let sum249 = 0;\n  let sum250 = 0;\n  let sum251 = 0;\n  let sum252 = 0;\n  let sum253 = 0;\n  let sum254 = 0;\n  let sum255 = 0;\n  let sum256 = 0;\n  let sum257 = 0;\n  let sum258 = 0;\n  let sum259 = 0;\n  let sum260 = 0;\n  let sum261 = 0;\n  let sum262 = 0;\n  let sum263 = 0;\n  let sum264 = 0;\n  let sum265 = 0;\n  let sum266 = 0;\n  let sum267 = 0;\n  let sum268 = 0;\n  let sum269 = 0;\n  let sum270 = 0;\n  let sum271 = 0;\n  let sum272 = 0;\n  let sum273 = 0;\n  let sum274 = 0;\n  let sum275 = 0;\n  let sum276 = 0;\n  let sum277 = 0;\n  let sum278 = 0;\n  let sum279 = 0;\n  let sum280 = 0;\n  let sum281 = 0;\n  let sum282 = 0;\n  let sum283 = 0;\n  let sum284 = 0;\n  let sum285 = 0;\n  let sum286 = 0;\n  let "}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let upper = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      upper++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upper++;\n    }\n  }\n  return upper / 2;\n};\n\n/*\n  Gives a string s, count the number of lowercase vowel in even indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let lower = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lower++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      lower++;\n    }\n  }\n  return lower / 2;\n};\n\n/*\n  Gives a string s, count the number of uppercase vowel in odd indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countOddUpper = (s) => {\n  let count = 0;\n  let upper = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upper++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      upper++;\n    }\n  }\n  return upper / 2;\n};\n\n/*\n  Gives a string s, count the number of lowercase vowel in odd indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countOddLower = (s) => {\n  let count = 0;\n  let lower = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lower++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      lower++;\n    }\n  }\n  return lower / 2;\n};\n\n/*\n  Gives a string s, count the number of vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countEven = (s) => {\n  let count = 0;\n  let upper = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      upper++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upper++;\n    }\n  }\n  return upper / 2;\n};\n\n/*\n  Gives a string s, count the number of vowel in odd indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countOdd = (s) => {\n  let count = 0;\n  let lower = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lower++;\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      lower++;\n    }\n  }\n  return lower / 2;\n};\n\n/*\n  Gives a string s, count the number of vowel in even and odd indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst count = (s) => {\n  let count = 0;\n  let upper = 0;\n  let lower = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      upper++;\n    }\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upper++;\n    }\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lower++;\n    }\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      lower++;\n    }\n  }\n  return upper + lower + countOdd(s) + countEven(s);\n};\n\n/*\n  Gives a string s, count the number of vowel in even and odd indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countOddEven = (s) => {\n  let count = 0;\n  let upper = 0;\n  let lower = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      upper++;\n    }\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upper++;\n    }\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lower++;\n    }\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      lower++;\n    }\n  }\n  return upper + lower + countOdd(s) + countEven(s);\n};\n\n/*\n  Gives a string s, count the number of vowel in even and odd indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countOddEvenUpper = (s) => {\n  let count = 0;\n  let upper = 0;\n  let lower = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upper++;\n    }\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      upper++;\n    }\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upper++;\n    }\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lower++;\n    }\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      lower++;\n    }\n  }\n  return upper + lower + countOdd(s) + countEven(s);\n};\n\n/*\n  Gives a string s, count the number of vowel in even and odd indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countOddEvenLower = (s) => {\n  let count = 0;\n  let upper = 0;\n  let lower = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upper++;\n    }\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      upper++;\n    }\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upper++;\n    }\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lower++;\n    }\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      lower++;\n    }\n  }\n  return upper + lower + countOdd(s) + countEven(s);\n};\n\n/*\n  Gives a string s, count the number of vowel in even and odd indexes.\n  \n  For example:\n  countUpper('aBCd"}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closestToZero = Number.POSITIVE_INFINITY;\n  let closestToOne = Number.NEGATIVE_INFINITY;\n  let closestToTwo = Number.POSITIVE_INFINITY;\n  let closestToThree = Number.NEGATIVE_INFINITY;\n  let closestToFour = Number.POSITIVE_INFINITY;\n  let closestToFive = Number.NEGATIVE_INFINITY;\n  let closestToSix = Number.POSITIVE_INFINITY;\n  let closestToSeven = Number.NEGATIVE_INFINITY;\n  let closestToEight = Number.POSITIVE_INFINITY;\n  let closestToNine = Number.NEGATIVE_INFINITY;\n  let closestToTen = Number.POSITIVE_INFINITY;\n  let closestToEleven = Number.NEGATIVE_INFINITY;\n  let closestToTwelve = Number.POSITIVE_INFINITY;\n  let closestToThirteen = Number.NEGATIVE_INFINITY;\n  let closestToFourteen = Number.POSITIVE_INFINITY;\n  let closestToFifteen = Number.NEGATIVE_INFINITY;\n  let closestToSixteen = Number.POSITIVE_INFINITY;\n  let closestToSeventeen = Number.NEGATIVE_INFINITY;\n  let closestToEighteen = Number.POSITIVE_INFINITY;\n  let closestToNineteen = Number.NEGATIVE_INFINITY;\n  let closestToTwenty = Number.POSITIVE_INFINITY;\n  let closestToThirty = Number.NEGATIVE_INFINITY;\n  let closestToForty = Number.POSITIVE_INFINITY;\n  let closestToFifty = Number.NEGATIVE_INFINITY;\n  let closestToSixty = Number.POSITIVE_INFINITY;\n  let closestToSeventy = Number.NEGATIVE_INFINITY;\n  let closestToEighty = Number.POSITIVE_INFINITY;\n  let closestToNinety = Number.NEGATIVE_INFINITY;\n  let closestToTwentyOne = Number.POSITIVE_INFINITY;\n  let closestToThirtyOne = Number.NEGATIVE_INFINITY;\n  let closestToFortyOne = Number.POSITIVE_INFINITY;\n  let closestToFiftyOne = Number.NEGATIVE_INFINITY;\n  let closestToSixtyOne = Number.POSITIVE_INFINITY;\n  let closestToSeventyOne = Number.NEGATIVE_INFINITY;\n  let closestToEightyOne = Number.POSITIVE_INFINITY;\n  let closestToNinetyOne = Number.NEGATIVE_INFINITY;\n  let closestToTwentyTwo = Number.POSITIVE_INFINITY;\n  let closestToThirtyTwo = Number.NEGATIVE_INFINITY;\n  let closestToFortyTwo = Number.POSITIVE_INFINITY;\n  let closestToFiftyTwo = Number.NEGATIVE_INFINITY;\n  let closestToSixtyTwo = Number.POSITIVE_INFINITY;\n  let closestToSeventyTwo = Number.NEGATIVE_INFINITY;\n  let closestToEightyTwo = Number.POSITIVE_INFINITY;\n  let closestToNinetyTwo = Number.NEGATIVE_INFINITY;\n  let closestToTwentyThree = Number.POSITIVE_INFINITY;\n  let closestToThirtyThree = Number.NEGATIVE_INFINITY;\n  let closestToFortyThree = Number.POSITIVE_INFINITY;\n  let closestToFiftyThree = Number.NEGATIVE_INFINITY;\n  let closestToSixtyThree = Number.POSITIVE_INFINITY;\n  let closestToSeventyThree = Number.NEGATIVE_INFINITY;\n  let closestToEightyThree = Number.POSITIVE_INFINITY;\n  let closestToNinetyThree = Number.NEGATIVE_INFINITY;\n  let closestToTwentyFour = Number.POSITIVE_INFINITY;\n  let closestToThirtyFour = Number.NEGATIVE_INFINITY;\n  let closestToFortyFour = Number.POSITIVE_INFINITY;\n  let closestToFiftyFour = Number.NEGATIVE_INFINITY;\n  let closestToSixtyFour = Number.POSITIVE_INFINITY;\n  let closestToSeventyFour = Number.NEGATIVE_INFINITY;\n  let closestToEightyFour = Number.POSITIVE_INFINITY;\n  let closestToNinetyFour = Number.NEGATIVE_INFINITY;\n  let closestToTwentyFive = Number.POSITIVE_INFINITY;\n  let closestToThirtyFive = Number.NEGATIVE_INFINITY;\n  let closestToFortyFive = Number.POSITIVE_INFINITY;\n  let closestToFiftyFive = Number.NEGATIVE_INFINITY;\n  let closestToSixtyFive = Number.POSITIVE_INFINITY;\n  let closestToSeventyFive = Number.NEGATIVE_INFINITY;\n  let closestToEightyFive = Number.POSITIVE_INFINITY;\n  let closestToNinetyFive = Number.NEGATIVE_INFINITY;\n  let closestToTwentySix = Number.POSITIVE_INFINITY;\n  let closestToThirtySix = Number.NEGATIVE_INFINITY;\n  let closestToFortySix = Number.POSITIVE_INFINITY;\n  let closestToFiftySix = Number.NEGATIVE_INFINITY;\n  let closestToSixtySix = Number.POSITIVE_INFINITY;\n  let closestToSeventySix = Number.NEGATIVE_INFINITY;\n  let closestToEightySix = Number.POSITIVE_INFINITY;\n  let closestToNinetySix = Number.NEGATIVE_INFINITY;\n  let closestToTwentySeven = Number.POSITIVE_INFINITY;\n  let closestToThirtySeven = Number.NEGATIVE_INFINITY;\n  let closestToFortySeven = Number.POSITIVE_INFINITY;\n  let closestToFiftySeven = Number.NEGATIVE_INFINITY;\n  let closestToSixtySeven = Number.POSITIVE_INFINITY;\n  let closestToSeventySeven = Number.NEGATIVE_INFINITY;\n  let closestToEightySeven = Number.POSITIVE_INFINITY;\n  let closestToNinetySeven = Number.NEGATIVE_INFINITY;\n  let closestToTwentyEight = Number.POSITIVE_INFINITY;\n  let closestToThirtyEight = Number.NEGATIVE_IN"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(Math.floor(i / 2));\n  }\n  return arr;\n};\n\n/*\n  Gives a positive integers n, you had to make a piles of n levels of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(Math.floor(i / 2));\n  }\n  return arr;\n};\n\n/*\n  Gives a positive integers n, you had to make a piles of n levels of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(Math.floor(i / 2));\n  }\n  return arr;\n};\n\n/*\n  Gives a positive integers n, you had to make a piles of n levels of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(Math.floor(i / 2));\n  }\n  return arr;\n};\n\n/*\n  Gives a positive integers n, you had to make a piles of n levels of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(Math.floor(i / 2));\n  }\n  return arr;\n};\n\n/*\n  Gives a positive integers n, you had to make a piles of n levels of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(Math.floor(i / 2));\n  }\n  return arr;\n};\n\n/*\n  Gives a positive integers n, you had to make a piles of n levels of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(Math.floor(i / 2));\n  }\n  return arr;\n};\n\n/*\n  Gives a positive integers n, you had to make a piles of n levels of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(Math.floor(i / 2));\n  }\n  return arr;\n};\n\n/*\n  Gives a positive integers n, you had to make a piles of n levels of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(Math.floor(i / 2));\n  }\n  return arr;\n};\n\n/*\n  Gives a positive integers n, you had to make a piles of n levels of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(Math.floor(i / 2));\n  }\n  return arr;\n};\n\n/*\n  Gives a positive integers n, you had to make a piles of n levels of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(Math.floor(i / 2));\n  }\n  return arr;\n};\n\n/*\n  Gives a positive integers n, you had to make a piles of n levels of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const "}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will is gives a string of word separated by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will is gives a string of word separated by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will is gives a string of word separated by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will is gives a string of word separated by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will is gives a string of word separated by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will is gives a string of word separated by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will is gives a string of word separated by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will is gives a string of word separated by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will is gives a string of word separated by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will is gives a string of word separated by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will is gives a string of word separated by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will is gives a string of word separated by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You will is gives a string of word separated by comma or "}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  return Math.floor(Math.sqrt(x * x + y * y));\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOdd = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  return Math.floor(Math.sqrt(x * x + y * y));\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumEven = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  return Math.floor(Math.sqrt(x * x + y * y));\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddEven = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  return Math.floor(Math.sqrt(x * x + y * y));\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddEvenOdd = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  return Math.floor(Math.sqrt(x * x + y * y));\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddEvenOddOdd = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  return Math.floor(Math.sqrt(x * x + y * y));\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddEvenOddOddEven = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  return Math.floor(Math.sqrt(x * x + y * y));\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddEvenOddOddEvenOdd = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  return Math.floor(Math.sqrt(x * x + y * y));\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddEvenOddOddEvenOddOdd = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  return Math.floor(Math.sqrt(x * x + y * y));\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddEvenOddOddEvenOddEvenOdd = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  return Math.floor(Math.sqrt(x * x + y * y));\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddEvenOddOddEvenOddEvenOddOdd = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  return Math.floor(Math.sqrt(x * x + y * y));\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddEvenOddOddEvenOddEvenOddOddOdd = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  return Math.floor(Math.sqrt(x * x + y * y));\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddEvenOddOddEvenOddEvenOddEvenOddOdd = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  return Math.floor(Math.sqrt(x * x + y * y));\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddEvenOddOddEvenOddEvenOddEvenOddOddOdd = (x, y) => {\n  if (x < 0 || y < 0 || x > y || x < 0 || y < 0) {\n    return -1;\n  }\n  return Math.floor(Math.sqrt(x * x + y * y));\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddEvenOddOddEvenOddEvenOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddO"}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n  let temp280 = 0;\n  let temp281 = 0;\n  let temp282 = 0;\n  let temp283 = 0;\n  let temp"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = []\n  let digits = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      digits.push(x[i])\n      digit = parseInt(x[i])\n      if (digit % 2 === 0) {\n        isEven = true\n      }\n    }\n  }\n  if (isEven) {\n    result.push(digits)\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all elements that has odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  let result = []\n  let digits = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 1) {\n      digits.push(x[i])\n      digit = parseInt(x[i])\n      if (digit % 2!== 1) {\n        isEven = true\n      }\n    }\n  }\n  if (isEven) {\n    result.push(digits)\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all elements that has even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenDigits = (x) => {\n  let result = []\n  let digits = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 1) {\n      digits.push(x[i])\n      digit = parseInt(x[i])\n      if (digit % 2 === 1) {\n        isEven = true\n      }\n    }\n  }\n  if (isEven) {\n    result.push(digits)\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all elements that has odd or even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitOrEvenDigits = (x) => {\n  let result = []\n  let digits = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 1 || x[i] % 2 === 0) {\n      digits.push(x[i])\n      digit = parseInt(x[i])\n      if (digit % 2 === 1 || digit % 2 === 0) {\n        isEven = true\n      }\n    }\n  }\n  if (isEven) {\n    result.push(digits)\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all elements that has odd or even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitOrOddDigits = (x) => {\n  let result = []\n  let digits = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 1 || x[i] % 2 === 0) {\n      digits.push(x[i])\n      digit = parseInt(x[i])\n      if (digit % 2 === 1 || digit % 2 === 0) {\n        isEven = true\n      }\n    }\n  }\n  if (isEven) {\n    result.push(digits)\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all elements that has odd or even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitOrEvenOddDigits = (x) => {\n  let result = []\n  let digits = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 1 || x[i] % 2 === 0) {\n      digits.push(x[i])\n      digit = parseInt(x[i])\n      if (digit % 2 === 1 || digit % 2 === 0) {\n        isEven = true\n      }\n    }\n  }\n  if (isEven) {\n    result.push(digits)\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all elements that has odd or even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitOrOddEvenDigits = (x) => {\n  let result = []\n  let digits = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 1 || x[i] % 2 === 0) {\n      digits.push(x[i])\n      digit = parseInt(x[i])\n      if (digit % 2 === 1 || digit % 2 === 0) {\n        isEven = true\n      }\n    }\n  }\n  if (isEven) {\n    result.push(digits)\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all elements that has odd or even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitOrOddOddDigits = (x) => {\n  let result = []\n  let digits = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 1 || x[i] % 2 === 0) {\n      digits.push(x[i])\n      digit = parseInt(x[i])\n      if (digit % 2 === 1 || digit % 2 === 0) {\n        isEven = true\n      }\n    }\n  }\n  if (isEven) {\n    result.push(digits)\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all elements that has odd or even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitOrEvenOddOddDigits = (x) => {\n  let result = []\n  let digits = []\n  let digit = 0\n  let isEven = false\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 1 || x[i] % 2 === 0) {\n      digits.push(x[i])\n      digit = parseInt(x[i])\n      if (digit % 2 === 1 || digit % 2 === 0) {\n        isEven = true\n      }\n    }\n  }\n  if (isEven) {\n    result.push(digits)\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all elements that has odd or even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits(["}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length;\n  const res = [];\n  let i = 0;\n  while (i < len) {\n    const num = arr[i];\n    if (num < 10) {\n      res.push(num);\n      i++;\n    } else {\n      res.push(`One${num}`);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byName = (arr) => {\n  const len = arr.length;\n  const res = [];\n  let i = 0;\n  while (i < len) {\n    const num = arr[i];\n    if (num < 10) {\n      res.push(num);\n      i++;\n    } else {\n      res.push(`One${num}`);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameAndLength = (arr) => {\n  const len = arr.length;\n  const res = [];\n  let i = 0;\n  while (i < len) {\n    const num = arr[i];\n    if (num < 10) {\n      res.push(num);\n      i++;\n    } else {\n      res.push(`One${num}`);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameAndLengthAndName = (arr) => {\n  const len = arr.length;\n  const res = [];\n  let i = 0;\n  while (i < len) {\n    const num = arr[i];\n    if (num < 10) {\n      res.push(num);\n      i++;\n    } else {\n      res.push(`One${num}`);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameAndLengthAndNameAndLength = (arr) => {\n  const len = arr.length;\n  const res = [];\n  let i = 0;\n  while (i < len) {\n    const num = arr[i];\n    if (num < 10) {\n      res.push(num);\n      i++;\n    } else {\n      res.push(`One${num}`);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameAndLengthAndNameAndLengthAndName = (arr) => {\n  const len = arr.length;\n  const res = [];\n  let i = 0;\n  while (i < len) {\n    const num = arr[i];\n    if (num < 10) {\n      res.push(num);\n      i++;\n    } else {\n      res.push(`One${num}`);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  "}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implements the functions g and h which take n as parameters, and return a list of sizes n, such that the value of the elements at indices i is the greatest common divisor of i if i is even or the greatest common divisor of i if i is odd. i start from 1. the greatest common divisor of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [4, 8, 12, 24, 16]\n  h(5) == [8, 12, 24, 16, 20]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implements the functions i and j which take n as parameters, and return a list of sizes n, such that the value of the elements at indices i is the sum of numbers from 1 to i (1 * 2 *... * i) and j is the sum of numbers from 1 to j (1 * 2 *... * j). i start from 1. the sum of numbers from 1 to i (1 * 2 *... * i) is 1 + 2 +... + n.\n  Example:\n  i(4) == 1 + 2 +... + n\n  j(4) == 1 + 2 +... + n\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implements the functions k and l which take n as parameters, and return a list of sizes n, such that the value of the elements at indices i is the sum of numbers from 1 to i (1 * 2 *... * i) and j is the sum of numbers from 1 to j (1 * 2 *... * j). i start from 1. the sum of numbers from 1 to i (1 * 2 *... * i) is 1 + 2 +... + n.\n  Example:\n  k(4) == 1 + 2 +... + n\n  l(4) == 1 + 2 +... + n\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implements the functions m and n which take n as parameters, and return a list of sizes n, such that the value of the elements at indices i is the sum of numbers from 1 to i (1 * 2 *... * i) and j is the sum of numbers from 1 to j (1 * 2 *... * j). i start from 1. the sum of numbers from 1 to i (1 * 2 *... * i) is 1 + 2 +... + n.\n  Example:\n  m(4) == 1 + 2 +... + n\n  n(4) == 1 + 2 +... + n\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implements the functions n and o which take n as parameters, and return a list of sizes n, such that the value of the elements at indices i is the sum of numbers from 1 to i (1 * 2 *... * i) and j is the sum of numbers from 1 to j (1 * 2 *... * j). i start from 1. the sum of numbers from 1 to i (1 * 2 *... * i) is 1 + 2 +... + n.\n  Example:\n  n(4) == 1 + 2 +... + n\n  o(4) == 1 + 2 +... + n\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implements the functions p and q which take n as parameters, and return a list of sizes n, such that the value of the elements at indices i is the sum of numbers from 1 to i (1 * 2 *... * i) and j is the sum of numbers from 1 to j (1 * 2 *... * j). i start from 1. the sum of numbers from 1 to i (1 * 2 *... * i) is 1 + 2 +... + n.\n  Example:\n  p(n) == 1 + 2 +... + n\n  q(n) == 1 + 2 +... + n\n  */\nconst p = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implements the functions r and s which\n  take n as parameters, and return a list of sizes n, such that the value of the elements at indices i is the sum of numbers from 1 to i (1 * 2 *... * i) and j is the sum of numbers from 1 to j (1 * 2 *... * j). i start from 1. the sum of numbers from 1 to i (1 * 2 *... * i) is 1 + 2 +... + n.\n  Example:\n  r(n) == 1 + 2 +... + n\n  s(n) == 1 + 2 +... + n\n  */\nconst r = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implements the functions t and u which\n  take n as parameters, and return a list of sizes n, such that the value of the elements at indices i is the sum of numbers from 1 to i (1 * 2 *... * i) and j is the sum of numbers from 1 to j (1 * 2 *... * j). i start from 1. the sum of numbers from 1 to i (1 * 2 *... * i) is 1 + 2 +... + n.\n  Example:\n  t(n) == 1 + 2 +... + n\n  u(n) == 1 + 2 +... + n\n  */\nconst t = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implements the functions x and y which take n as parameters, and return a list of sizes n, such that the value of the elements at indices i is the sum of numbers from 1 to i (1 * 2 *... * i) and j is the sum of numbers from 1 to j (1 * 2 *... * j). i start from 1. the sum of numbers from 1 to i (1 * 2 *... * i) is 1 + 2 +... + n.\n  Example:\n  x(n) == 1 + 2 +... + n\n  y(n) == 1 + 2 +... + n\n  */\nconst x = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implements the functions z and a which take n as parameters, and return a list of sizes n, such that the value of the elements at indices i is the sum of numbers from 1 to i (1 * 2 *... * i) and j is the sum of numbers from 1 to j (1 * 2 *... * j). i start from 1. the sum of numbers from 1 to i (1 * 2 *... * i) is 1 + 2 +... + n.\n  Example:\n  z(n) == 1 + 2 +... + n\n  a(n) == 1 + 2 +... + n\n  */\nconst z = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implements the functions a and b which take n as parameters, and return a list of sizes n, such that the value of the elements at indices i is the sum of numbers from 1 to i (1 * 2 *... * i) and j is the sum of numbers from 1 to j (1 * 2 *... * j). i start from 1. the sum of numbers from 1 to i (1 * 2 *... * i) is 1 + 2 +... + n.\n  Example:\n  a(n) == 1 + 2 +... + n\n  b(n) == 1 + 2 +... + n\n  */\nconst a = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implements the functions b and c which take n as parameters, and return a list of sizes n, such "}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  let oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Gives a positive integer n, return a tuple that had the number of even and odd integer palindromes that fallen within the range(2, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindromeRange = (n) => {\n  const evenPalindromes = [];\n  let oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a string, return an array containing all the unique characters in the string.\n\n  Example 1:\n\n      Input: \"Hello, world!\"\n      Output: [\"H\", \"e\", \"l\", \"l\", \"o\", \"W\", \"o\", \"r\", \"l\", \"d!\"]\n      Explanation:\n      All unique characters are \"H\", \"e\", \"l\", \"l\", \"o\", \"W\", \"o\", \"r\", \"l\", \"d!\".\n\n  Example 2:\n\n      Input: \"Hello, world!\"\n      Output: [\"H\", \"e\", \"l\", \"l\", \"o\", \"W\", \"o\", \"r\", \"l\", \"d!\"]\n      Explanation:\n      All unique characters are \"H\", \"e\", \"l\", \"l\", \"o\", \"W\", \"o\", \"r\", \"l\", \"d!\".\n\n  Note:\n      All characters in the given string are lowercase.\n      All characters in the given string are unique.\n      All characters in the given string are in the range from 97 to 122.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the range from 97 to 122, inclusive.\n      All characters in the given string are in the range from 65 to 90, inclusive.\n      All characters in the given string are in the "}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Writes a functions countZeros which takes an array of integers and returning the number of elements which had a sum of digit == 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 1\n  >>> countZeros([1, 1, 2]) == 3\n  */\nconst countZeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Writes a functions countOnes which takes an array of integers and returning the number of elements which had a sum of digit == 1. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countOnes([]) == 0\n  >>> countOnes([-1, 11, -11]) == 1\n  >>> countOnes([1, 1, 2]) == 3\n  */\nconst countOnes = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Writes a functions countTwos which takes an array of integers and returning the number of elements which had a sum of digit == 2. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countTwos([]) == 0\n  >>> countTwos([-1, 11, -11]) == 1\n  >>> countTwos([1, 1, 2]) == 3\n  */\nconst countTwos = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 2) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Writes a functions countThrees which takes an array of integers and returning the number of elements which had a sum of digit == 3. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countThrees([]) == 0\n  >>> countThrees([-1, 11, -11]) == 1\n  >>> countThrees([1, 1, 2]) == 3\n  */\nconst countThrees = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 3) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Writes a functions countFours which takes an array of integers and returning the number of elements which had a sum of digit == 4. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countFours([]) == 0\n  >>> countFours([-1, 11, -11]) == 1\n  >>> countFours([1, 1, 2]) == 3\n  */\nconst countFours = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 4) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Writes a functions countFives which takes an array of integers and returning the number of elements which had a sum of digit == 5. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countFives([]) == 0\n  >>> countFives([-1, 11, -11]) == 1\n  >>> countFives([1, 1, 2]) == 3\n  */\nconst countFives = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 5) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Writes a functions countSix which takes an array of integers and returning the number of elements which had a sum of digit == 6. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countSix([]) == 0\n  >>> countSix([-1, 11, -11]) == 1\n  >>> countSix([1, 1, 2]) == 3\n  */\nconst countSix = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 6) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Writes a functions countSeven which takes an array of integers and returning the number of elements which had a sum of digit == 7. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countSeven([]) == 0\n  >>> countSeven([-1, 11, -11]) == 1\n  >>> countSeven([1, 1, 2]) == 3\n  */\nconst countSeven = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Writes a functions countEight which takes an array of integers and returning the number of elements which had a sum of digit == 8. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countEight([]) == 0\n  >>> countEight([-1, 11, -11]) == 1\n  >>> countEight([1, 1, 2]) == 3\n  */\nconst countEight = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 8) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Writes a functions countNine which takes an array of integers and returning the number of elements which had a sum of digit == 9. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNine([]) == 0\n  >>> countNine([-1, 11, -11]) == 1\n  >>> countNine([1, 1, 2]) == 3\n  */\nconst countNine = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 9) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Writes a functions countTen which takes an array of integers and returning the number of elements which had a sum of digit == 10. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countTen([]) == 0\n  >>> countTen([-1, 11, -11]) == 1\n  >>> countTen([1, 1, 2]) == 3\n  */\nconst countTen = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 10) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Writes a functions countEleven which takes an array of integers and returning the number of elements which had a sum of digit == 11. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countEleven([]) == 0\n  >>> countEleven([-1, 11, -11]) == 1\n  >>> countEleven([1, 1, 2]) == 3\n  */\nconst countEleven = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 11) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Writes a functions countTwelve which takes an array of integer"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arrLength = arr.length;\n  let arrIndex = 0;\n  let arrTemp = [];\n  let arrTemp2 = [];\n  let arrTemp3 = [];\n  let arrTemp4 = [];\n  let arrTemp5 = [];\n  let arrTemp6 = [];\n  let arrTemp7 = [];\n  let arrTemp8 = [];\n  let arrTemp9 = [];\n  let arrTemp10 = [];\n  let arrTemp11 = [];\n  let arrTemp12 = [];\n  let arrTemp13 = [];\n  let arrTemp14 = [];\n  let arrTemp15 = [];\n  let arrTemp16 = [];\n  let arrTemp17 = [];\n  let arrTemp18 = [];\n  let arrTemp19 = [];\n  let arrTemp20 = [];\n  let arrTemp21 = [];\n  let arrTemp22 = [];\n  let arrTemp23 = [];\n  let arrTemp24 = [];\n  let arrTemp25 = [];\n  let arrTemp26 = [];\n  let arrTemp27 = [];\n  let arrTemp28 = [];\n  let arrTemp29 = [];\n  let arrTemp30 = [];\n  let arrTemp31 = [];\n  let arrTemp32 = [];\n  let arrTemp33 = [];\n  let arrTemp34 = [];\n  let arrTemp35 = [];\n  let arrTemp36 = [];\n  let arrTemp37 = [];\n  let arrTemp38 = [];\n  let arrTemp39 = [];\n  let arrTemp40 = [];\n  let arrTemp41 = [];\n  let arrTemp42 = [];\n  let arrTemp43 = [];\n  let arrTemp44 = [];\n  let arrTemp45 = [];\n  let arrTemp46 = [];\n  let arrTemp47 = [];\n  let arrTemp48 = [];\n  let arrTemp49 = [];\n  let arrTemp50 = [];\n  let arrTemp51 = [];\n  let arrTemp52 = [];\n  let arrTemp53 = [];\n  let arrTemp54 = [];\n  let arrTemp55 = [];\n  let arrTemp56 = [];\n  let arrTemp57 = [];\n  let arrTemp58 = [];\n  let arrTemp59 = [];\n  let arrTemp60 = [];\n  let arrTemp61 = [];\n  let arrTemp62 = [];\n  let arrTemp63 = [];\n  let arrTemp64 = [];\n  let arrTemp65 = [];\n  let arrTemp66 = [];\n  let arrTemp67 = [];\n  let arrTemp68 = [];\n  let arrTemp69 = [];\n  let arrTemp70 = [];\n  let arrTemp71 = [];\n  let arrTemp72 = [];\n  let arrTemp73 = [];\n  let arrTemp74 = [];\n  let arrTemp75 = [];\n  let arrTemp76 = [];\n  let arrTemp77 = [];\n  let arrTemp78 = [];\n  let arrTemp79 = [];\n  let arrTemp80 = [];\n  let arrTemp81 = [];\n  let arrTemp82 = [];\n  let arrTemp83 = [];\n  let arrTemp84 = [];\n  let arrTemp85 = [];\n  let arrTemp86 = [];\n  let arrTemp87 = [];\n  let arrTemp88 = [];\n  let arrTemp89 = [];\n  let arrTemp90 = [];\n  let arrTemp91 = [];\n  let arrTemp92 = [];\n  let arrTemp93 = [];\n  let arrTemp94 = [];\n  let arrTemp95 = [];\n  let arrTemp96 = [];\n  let arrTemp97 = [];\n  let arrTemp98 = [];\n  let arrTemp99 = [];\n  let arrTemp100 = [];\n  let arrTemp101 = [];\n  let arrTemp102 = [];\n  let arrTemp103 = [];\n  let arrTemp104 = [];\n  let arrTemp105 = [];\n  let arrTemp106 = [];\n  let arrTemp107 = [];\n  let arrTemp108 = [];\n  let arrTemp109 = [];\n  let arrTemp110 = [];\n  let arrTemp111 = [];\n  let arrTemp112 = [];\n  let arrTemp113 = [];\n  let arrTemp114 = [];\n  let arrTemp115 = [];\n  let arrTemp116 = [];\n  let arrTemp117 = [];\n  let arrTemp118 = [];\n  let arrTemp119 = [];\n  let arrTemp120 = [];\n  let arrTemp121 = [];\n  let arrTemp122 = [];\n  let arrTemp123 = [];\n  let arrTemp124 = [];\n  let arrTemp125 = [];\n  let arrTemp126 = [];\n  let arrTemp127 = [];\n  let arrTemp128 = [];\n  let arrTemp129 = [];\n  let arrTemp130 = [];\n  let arrTemp131 = [];\n  let arrTemp132 = [];\n  let arrTemp133 = [];\n  let arrTemp134 = [];\n  let arrTemp135 = [];\n  let arrTemp136 = [];\n  let arrTemp137 = [];\n  let arrTemp138 = [];\n  let arrTemp139 = [];\n  let arrTemp140 = [];\n  let arrTemp141 = [];\n  let arrTemp142 = [];\n  let arrTemp143 = [];\n  let arrTemp144 = [];\n  let arrTemp145 = [];\n  let arrTemp146 = [];\n  let arrTemp147 = [];\n  let arrTemp148 = [];\n  let arrTemp149 = [];\n  let arrTemp150 = [];\n  let arrTemp151 = [];\n  let arrTemp152 = [];\n  let arrTemp153 = [];\n  let arrTemp154 = [];\n  let arrTemp155 = [];\n  let arrTemp156 = [];\n  let arrTemp157 = [];\n  let arrTemp158 = [];\n  let arrTemp159 = [];\n  let arrTemp160 = [];\n  let arrTemp161 = [];\n  let arrTemp162 = [];\n  let arrTemp163 = [];\n  let arrTemp164 = [];\n  let arrTemp165 = [];\n  let arrTemp166 = [];\n  let arrTemp167 = [];\n  let arrTemp168 = [];\n  let arrTemp169 = [];\n  let arrTemp170 = [];\n  let arrTemp171 = [];\n  let arrTemp172 = [];\n  let arrTemp173 = [];\n  let arrTemp174 = [];\n  let arrTemp175 = [];\n  let arrTemp176 = [];\n  let arrTemp177 = [];\n  let arrTemp178 = [];\n  let arrTemp179 = [];\n  let arrTemp180 = [];\n  let arrTemp181 = [];\n  let arrTemp182 = [];\n  let arrTemp183 = [];\n  let arrTemp184 = [];\n  let arrTemp185 = [];\n  let arrTemp186 = [];\n  let arrTemp187 = [];\n  let arrTemp188 = [];\n  let arrTemp189 = [];\n  let arrTemp190 = [];\n  let arrTemp191 = [];\n  let arrTemp192 = [];\n  let arrTemp193 = [];\n  let arrTemp194 = [];\n  let arrTemp195 = [];\n  let arrTemp196 = [];\n  let arrTemp197 = [];\n  let arrTemp198 = [];\n  let arrTemp199 = [];\n  let arrTemp200 = [];\n  let arrTemp201 = [];\n  let arrTemp202 = [];\n  let arrTemp203 = [];\n  let arr"}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = \"NO\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] % 2 === 0 && lst2[j] % 2 === 0) {\n      temp = lst1[i];\n      lst1[i] = lst2[j];\n      lst2[j] = temp;\n      i++;\n      j++;\n    }\n    else {\n      temp2 = lst2[j];\n      lst2[j] = lst1[i];\n      lst1[i] = temp2;\n      i++;\n      j++;\n    }\n  }\n  while (i < lst1.length) {\n    temp = lst1[i];\n    lst1[i] = lst2[j];\n    lst2[j] = temp;\n    i++;\n    j++;\n  }\n  while (j < lst2.length) {\n    temp = lst2[j];\n    lst2[j] = lst1[i];\n    lst1[i] = temp;\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n In this problems, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to made lst1 a list of only odd numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is odd, return \"YES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = \"NO\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] % 2 === 0 && lst2[j] % 2 === 0) {\n      temp = lst1[i];\n      lst1[i] = lst2[j];\n      lst2[j] = temp;\n      i++;\n      j++;\n    }\n    else {\n      temp2 = lst2[j];\n      lst2[j] = lst1[i];\n      lst1[i] = temp2;\n      i++;\n      j++;\n    }\n  }\n  while (i < lst1.length) {\n    temp = lst1[i];\n    lst1[i] = lst2[j];\n    lst2[j] = temp;\n    i++;\n    j++;\n  }\n  while (j < lst2.length) {\n    temp = lst2[j];\n    lst2[j] = lst1[i];\n    lst1[i] = temp;\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n In this problems, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = \"NO\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] % 2 === 0 && lst2[j] % 2 === 0) {\n      temp = lst1[i];\n      lst1[i] = lst2[j];\n      lst2[j] = temp;\n      i++;\n      j++;\n    }\n    else {\n      temp2 = lst2[j];\n      lst2[j] = lst1[i];\n      lst1[i] = temp2;\n      i++;\n      j++;\n    }\n  }\n  while (i < lst1.length) {\n    temp = lst1[i];\n    lst1[i] = lst2[j];\n    lst2[j] = temp;\n    i++;\n    j++;\n  }\n  while (j < lst2.length) {\n    temp = lst2[j];\n    lst2[j] = lst1[i];\n    lst1[i] = temp;\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n In this problems, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to made lst1 a list of only odd numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is odd, return \"YES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = \"NO\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] % 2 === 0 && lst2[j] % 2 === 0) {\n      temp = lst1[i];\n      lst1[i] = lst2[j];\n      lst2[j] = temp;\n      i++;\n      j++;\n    }\n    else {\n      temp2 = lst2[j];\n      lst2[j] = lst1[i];\n      lst1[i] = temp2;\n      i++;\n      j++;\n    }\n  }\n  while (i < lst1.length) {\n    temp = lst1[i];\n    lst1[i] = lst2[j];\n    lst2[j] = temp;\n    i++;\n    j++;\n  }\n  while (j < lst2.length) {\n    temp = lst2[j];\n    lst2[j] = lst1[i];\n    lst1[i] = temp;\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n In this problems, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to made lst1 a list of only odd numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is odd, return \"YES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = \"NO\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] % 2 === 0 && lst2[j] % 2 === 0) {\n      temp = lst1[i];\n      lst1[i] = lst2[j];\n      lst2[j] = temp;\n      i++;\n      j++;\n    }\n    else {\n      temp2 = lst"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterFrequency = () => {\n  const letters = Array.from(arguments);\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  letterFrequency('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  letterFrequency('a b b a') == {'a': 2, 'b': 2}\n  letterFrequency('a b c a b') == {'a': 2, 'b': 2}\n  letterFrequency('b b b b a') == {'b': 4}\n  letterFrequency('') == {}\n\n  */\nconst letterFrequencies = () => {\n  const letters = Array.from(arguments);\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  letterFrequencies('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  letterFrequencies('a b b a') == {'a': 2, 'b': 2}\n  letterFrequencies('a b c a b') == {'a': 2, 'b': 2}\n  letterFrequencies('b b b b a') == {'b': 4}\n  letterFrequencies('') == {}\n\n  */\nconst letterFrequenciesWithLetters = () => {\n  const letters = Array.from(arguments);\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  letterFrequenciesWithLetters('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  letterFrequenciesWithLetters('a b b a') == {'a': 2, 'b': 2}\n  letterFrequenciesWithLetters('a b c a b') == {'a': 2, 'b': 2}\n  letterFrequenciesWithLetters('b b b b a') == {'b': 4}\n  letterFrequenciesWithLetters('') == {}\n\n  */\nconst letterFrequenciesWithLettersAndLetters = () => {\n  const letters = Array.from(arguments);\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  letterFrequenciesWithLettersAndLetters('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  letterFrequenciesWithLettersAndLetters('a b b a') == {'a': 2, 'b': 2}\n  letterFrequenciesWithLettersAndLetters('a b c a b') == {'a': 2, 'b': 2}\n  letterFrequenciesWithLettersAndLetters('b b b b a') == {'b': 4}\n  letterFrequenciesWithLettersAndLetters('') == {}\n\n  */\nconst letterFrequenciesWithLettersAndLettersAndLetters = () => {\n  const letters = Array.from(arguments);\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  letterFrequenciesWithLettersAndLettersAndLetters('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  letterFrequenciesWithLettersAndLettersAndLetters('a b b a') == {'a': 2, 'b': 2}\n  letterFrequenciesWithLettersAndLettersAndLetters('a b c a b') == {'a': 2, 'b': 2}\n  letterFrequenciesWithLettersAndLettersAndLetters('b b b b a') == {'b': 4}\n  letterFrequenciesWithLettersAndLettersAndLetters('') == {}\n\n  */\nconst letterFrequenciesWithLettersAndLettersAndLettersAndLetters = () => {\n  const letters = Array.from(arguments);\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  letterFrequenciesWithLettersAndLettersAndLettersAndLetters('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  letterFrequenciesWithLettersAndLettersAndLettersAndLetters('a b b a') == {'a': 2, 'b': 2}\n  letterFrequenciesWithLettersAndLettersAndLettersAndLetters('a b c a b') == {'a': 2, 'b': 2}\n  letterFrequenciesWithLettersAndLettersAndLettersAndLetters('b b b b a') == {'b': 4}\n  letterFrequenciesWithLettersAndLettersAndLettersAndLetters('') == {}\n\n  */\nconst letterFrequenciesWithLettersAndLettersAndLettersAndLetters = () => {\n  const letters = Array.from(arguments);\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  letterFrequenciesWithLettersAnd"}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let flag = true;\n  let i = s.length - 1;\n  let j = c.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (s[i] === c[j]) {\n      result += s[i];\n      i--;\n      j--;\n    } else {\n      result += c;\n      flag = false;\n      i--;\n      j--;\n    }\n  }\n  return [result, flag];\n};\n\nconst isPalindrome = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return reversed[0] === reversedReversed[0];\n};\n\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (s) => {\n  let reversed = reverseDelete(s, 'a');\n  let reversedReversed = reverseDelete(s, 'b');\n  return "}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let odd = [];\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      num++;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      odd.push(num);\n      num = 0;\n    }\n  }\n  return odd;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let even = [];\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      num++;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even.push(num);\n      num = 0;\n    }\n  }\n  return even;\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odd elements in the string i of the input.\" where all the i's should is replacing by the number of odd digit in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let odd = [];\n  let even = [];\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      num++;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      odd.push(num);\n      even.push(num);\n      num = 0;\n    }\n  }\n  return [odd, even];\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount2 = (lst) => {\n  let odd = [];\n  let even = [];\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      num++;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      odd.push(num);\n      even.push(num);\n      num = 0;\n    }\n  }\n  return [odd, even];\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount3 = (lst) => {\n  let odd = [];\n  let even = [];\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      num++;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      odd.push(num);\n      even.push(num);\n      num = 0;\n    }\n  }\n  return [odd, even];\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount4 = (lst) => {\n  let odd = [];\n  let even = [];\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      num++;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      odd.push(num);\n      even.push(num);\n      num = 0;\n    }\n  }\n  return [odd, even];\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount5 = (lst) => {\n  let odd = [];\n  let even = [];\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      num++;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      odd.push(num);\n      even.push(num);\n      num = 0;\n    }\n  }\n  return [odd, even];\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is repla"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySumOf = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySumOf = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySumOf = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySumOfOf = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySumOfOf = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySumOfOf = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySumOfOf = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySumOfOf = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySumOfOf = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySumOfOf = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySumOfOf = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Gives an array of integers nums, found "}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const len = grid.length;\n    const capacity_num = Math.max(capacity, 1);\n    const capacity_arr = new Array(len);\n    for (let i = 0; i < len; i++) {\n        capacity_arr[i] = capacity_num;\n    }\n    const fill = new Array(len);\n    for (let i = 0; i < len; i++) {\n        fill[i] = 0;\n    }\n    const fill_count = 0;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < capacity_arr.length; j++) {\n            if (grid[i][j] === 1) {\n                fill[fill_count] = j;\n                fill_count++;\n            }\n        }\n    }\n    return fill_count;\n};\n\n/*\n  You were given an input grid of wells. Each row represents a single well, and each 1 in a row represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxEmpty = (grid, capacity) => {\n    const len = grid.length;\n    const capacity_num = Math.max(capacity, 1);\n    const capacity_arr = new Array(len);\n    for (let i = 0; i < len; i++) {\n        capacity_arr[i] = capacity_num;\n    }\n    const empty = new Array(len);\n    for (let i = 0; i < len; i++) {\n        empty[i] = 0;\n    }\n    const empty_count = 0;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < capacity_arr.length; j++) {\n            if (grid[i][j] === 1) {\n                empty[empty_count] = j;\n                empty_count++;\n            }\n        }\n    }\n    return empty_count;\n};\n\n/*\n  You were given an input grid of wells. Each row represents a single well, and each 1 in a row represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxEmpty2d = (grid, capacity) => {\n    const len = grid.length;\n    const capacity_num = Math.max(capacity, 1);\n    const capacity_arr = new Array(len);\n    for (let i = 0; i < len; i++) {\n        capacity_arr[i] = capacity_num;\n    }\n    const empty = new Array(len);\n    for (let i = 0; i < len; i++) {\n        empty[i] = 0;\n    }\n    const empty_count = 0;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < capacity_arr.length; j++) {\n            if (grid[i][j] === 1) {\n                empty[empty_count] = j;\n                empty_count++;\n            }\n        }\n    }\n    return empty_count;\n};\n\n/*\n  You were given an input grid of wells. Each row represents a single well, and each 1 in a row represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxEmpty3d = (grid, capacity) => {\n    const len = grid.length;\n    const capacity_num = Math.max(capacity, 1);\n    const capacity_arr = new Array(len);\n    for (let i = 0; i < len; i++) {\n        capacity_arr[i] = capacity_num;\n    }\n    const empty = new Array(len);\n    for (let i = 0; i < len; i++) {\n        empty[i] = 0;\n    }\n    const empty_count = 0;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < capacity_arr.length; j++) {\n            if (grid[i][j] === 1) {\n                empty[empty_count] = j;\n                empty_count++;\n            }\n        }\n    }\n    return empty_count;\n};\n\n/*\n  You were given an input grid of wells. Each row represents a single well, and each 1 in a row represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = arr.length;\n  while (i < len) {\n    while (j < (len - i)) {\n      if (arr[j] === 1) {\n        result.push(arr[j]);\n        j++;\n      }\n      else {\n        break;\n      }\n    }\n    if (j === (len - i)) {\n      result.push(arr[i]);\n      i++;\n    }\n  }\n  return result;\n};\n\n/**\n * Given an array of non-negative integers, return its binary representation.\n * For example:\n * Given [5, 1, 3, 2], return \"110\"\n * Given [5, 1, 3, 2], return \"111\"\n * Given [5, 1, 3, 2], return \"1110\"\n * Given [5, 1, 3, 2], return \"11110\"\n * Given [5, 1, 3, 2], return \"11111\"\n * Given [5, 1, 3, 2], return \"111110\"\n * Given [5, 1, 3, 2], return \"1111110\"\n * Given [5, 1, 3, 2], return \"1111111\"\n * Given [5, 1, 3, 2], return \"11111110\"\n * Given [5, 1, 3, 2], return \"11111111\"\n * Given [5, 1, 3, 2], return \"111111110\"\n * Given [5, 1, 3, 2], return \"111111111\"\n * Given [5, 1, 3, 2], return \"1111111101\"\n * Given [5, 1, 3, 2], return \"1111111110\"\n * Given [5, 1, 3, 2], return \"1111111111\"\n * Given [5, 1, 3, 2], return \"11111111111\"\n * Given [5, 1, 3, 2], return \"11111111110\"\n * Given [5, 1, 3, 2], return \"11111111111\"\n * Given [5, 1, 3, 2], return \"111111111110\"\n * Given [5, 1, 3, 2], return \"111111111111\"\n * Given [5, 1, 3, 2], return \"1111111111110\"\n * Given [5, 1, 3, 2], return \"1111111111111\"\n * Given [5, 1, 3, 2], return \"11111111111101\"\n * Given [5, 1, 3, 2], return \"11111111111110\"\n * Given [5, 1, 3, 2], return \"11111111111111\"\n * Given [5, 1, 3, 2], return \"111111111111111\"\n * Given [5, 1, 3, 2], return \"111111111111110\"\n * Given [5, 1, 3, 2], return \"111111111111111\"\n * Given [5, 1, 3, 2], return \"1111111111111110\"\n * Given [5, 1, 3, 2], return \"1111111111111111\"\n * Given [5, 1, 3, 2], return \"11111111111111110\"\n * Given [5, 1, 3, 2], return \"111111111111111101\"\n * Given [5, 1, 3, 2], return \"111111111111111110\"\n * Given [5, 1, 3, 2], return \"111111111111111111\"\n * Given [5, 1, 3, 2], return \"1111111111111111111\"\n * Given [5, 1, 3, 2], return \"1111111111111111110\"\n * Given [5, 1, 3, 2], return \"1111111111111111111\"\n * Given [5, 1, 3, 2], return \"11111111111111111110\"\n * Given [5, 1, 3, 2], return \"11111111111111111111\"\n * Given [5, 1, 3, 2], return \"111111111111111111110\"\n * Given [5, 1, 3, 2], return \"1111111111111111111101\"\n * Given [5, 1, 3, 2], return \"1111111111111111111110\"\n * Given [5, 1, 3, 2], return \"1111111111111111111111\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111\"\n * Given [5, 1, 3, 2], return \"11111111111111111111110\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111101\"\n * Given [5, 1, 3, 2], return \"111111111111111111111110\"\n * Given [5, 1, 3, 2], return \"111111111111111111111111\"\n * Given [5, 1, 3, 2], return \"1111111111111111111111110\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111101\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111110\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111111\"\n * Given [5, 1, 3, 2], return \"1111111111111111111111110\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111101\"\n * Given [5, 1, 3, 2], return \"111111111111111111111110\"\n * Given [5, 1, 3, 2], return \"111111111111111111111111\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111111\"\n * Given [5, 1, 3, 2], return \"111111111111111111111111111\"\n * Given [5, 1, 3, 2], return \"111111111111111111111111110\"\n * Given [5, 1, 3, 2], return \"111111111111111111111111111101\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111110\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111111\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111111110\"\n * Given [5, 1, 3, 2], return \"111111111111111111111111111101\"\n * Given [5, 1, 3, 2], return \"1111111111111111111111111110\"\n * Given [5, 1, 3, 2], return \"1111111111111111111111111111\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111111\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111111110\"\n * Given [5, 1, 3, 2], return \"111111111111111111111111111101\"\n * Given [5, 1, 3, 2], return \"1111111111111111111111111110\"\n * Given [5, 1, 3, 2], return \"111111111111111111111111\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111111\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111111110\"\n * Given [5, 1, 3, 2], return \"111111111111111111111111111101\"\n * Given [5, 1, 3, 2], return \"1111111111111111111111111110\"\n * Given [5, 1, 3, 2], return \"111111111111111111111111\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111111\"\n * Given [5, 1, 3, 2], return \"11111111111111111111111111110\"\n * Given [5, 1, 3, 2], return \"111111111111111111111111111101\"\n * Given [5, 1, 3, 2], return \"1111111111111111111111111110\"\n * Given [5, 1, 3, 2], return \"111111111111111111111111\"\n * Given [5, 1, 3, 2], "}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;"}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const vowelsLength = vowels.length;\n  const vowelsArray = vowels.map((v, i) => `${v}${i}`);\n  const vowelsArrayLength = vowelsArray.length;\n  const vowelsArrayIndex = vowelsArray.indexOf(word[0]);\n  const vowelsArrayLength = vowelsArray.length;\n  const vowelsArrayIndexLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = 0;\n  let vowelsArrayIndexLength = 0;\n  let vowelsArrayIndex = 0;\n  let "}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const re = /\\(([^()]+)\\)/;\n  let count = 0;\n  let result = '';\n  let match;\n  while ((match = re.exec(lst))!== null) {\n    count += 1;\n    if (count === 1) {\n      result += match[1];\n    } else {\n      result += match[0];\n    }\n  }\n  return result === 'Yes';\n};\n\n/**\n  Given a string of characters, return true if it can be made by concatenating two strings. A string S is considered better if and only if all characters in S were balancing. For example: the string '()()' is good, while the string '()' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  canConcat([')', ')']) == 'Yes'\n  canConcat([')', ')']) == 'No'\n  */\nconst canConcat = (str) => {\n  let count = 0;\n  let result = '';\n  let match;\n  while ((match = str.match(/\\(([^()]+)\\)/))!== null) {\n    count += 1;\n    if (count === 1) {\n      result += match[1];\n    } else {\n      result += match[0];\n    }\n  }\n  return result === 'Yes';\n};\n\n/**\n  Given a string of characters, return true if it can be made by concatenating two strings. A string S is considered better if and only if all characters in S were balancing. For example: the string '()()' is good, while the string '()' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  canConcat([')', ')']) == 'Yes'\n  canConcat([')', ')']) == 'No'\n  */\nconst canConcat = (str) => {\n  let count = 0;\n  let result = '';\n  let match;\n  while ((match = str.match(/\\(([^()]+)\\)/))!== null) {\n    count += 1;\n    if (count === 1) {\n      result += match[1];\n    } else {\n      result += match[0];\n    }\n  }\n  return result === 'Yes';\n};\n\n/**\n  Given a string of characters, return true if it can be made by concatenating two strings. A string S is considered better if and only if all characters in S were balancing. For example: the string '()()' is good, while the string '()' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  canConcat([')', ')']) == 'Yes'\n  canConcat([')', ')']) == 'No'\n  */\nconst canConcat = (str) => {\n  let count = 0;\n  let result = '';\n  let match;\n  while ((match = str.match(/\\(([^()]+)\\)/))!== null) {\n    count += 1;\n    if (count === 1) {\n      result += match[1];\n    } else {\n      result += match[0];\n    }\n  }\n  return result === 'Yes';\n};\n\n/**\n  Given a string of characters, return true if it can be made by concatenating two strings. A string S is considered better if and only if all characters in S were balancing. For example: the string '()()' is good, while the string '()' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  canConcat([')', ')']) == 'Yes'\n  canConcat([')', ')']) == 'No'\n  */\nconst canConcat = (str) => {\n  let count = 0;\n  let result = '';\n  let match;\n  while ((match = str.match(/\\(([^()]+)\\)/))!== null) {\n    count += 1;\n    if (count === 1) {\n      result += match[1];\n    } else {\n      result += match[0];\n    }\n  }\n  return result === 'Yes';\n};\n\n/**\n  Given a string of characters, return true if it can be made by concatenating two strings. A string S is considered better if and only if all characters in S were balancing. For example: the string '()()' is good, while the string '()' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  canConcat([')', ')']) == 'Yes'\n  canConcat([')', ')']) == 'No'\n  */\nconst canConcat = (str) => {\n  let count = 0;\n  let result = '';\n  let match;\n  while ((match = str.match(/\\(([^()]+)\\)/))!== null) {\n    count += 1;\n    if (count === 1) {\n      result += match[1];\n    } else {\n      result += match[0];\n    }\n  }\n  return result === 'Yes';\n};\n\n/**\n  Given a string of characters, return true if it can be made by concatenating two strings. A string S is considered better if and only if all characters in S were balancing. For example: the string '()()' is good, while the string '()' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  canConcat([')', ')']) == 'Yes'\n  canConcat([')', ')']) == 'No'\n  */\nconst canConcat = (str) => {\n  let count = 0;\n  let result = '';\n  let match;\n  while ((match = str.match(/\\(([^()]+)\\)/))!== null) {\n    count += 1;\n    if (count === 1) {\n      result += match[1];\n    } else {\n      result += match[0];\n    }\n  }\n  return result === 'Yes';\n};\n\n/**\n  Given a string of characters, return true if it can be made by concatenating two strings. A string S is considered better if and only if all characters in S were balancing. For example: the string '()()' is good, while the string '()' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  canConcat([')', ')']) == 'Yes'\n  canConcat([')', ')']) == 'No'\n  */\nconst canConcat = (str) => {\n  let count = 0;\n  let result = '';\n  let match;\n  while ((match = str.match(/\\(([^()]+)\\)/))!== null) {\n    count += 1;\n    if (count === 1) {\n      result += match[1];\n    } else {\n      result += match[0];\n    }\n  }\n  return result === 'Yes';\n};\n\n/**\n  Given a string of characters, return true if it can be made by concatenating two strings. A string S is considered better if and only if all characters in S were balancing. For example: the string '()()' is good, while the string '()' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  canConcat([')', ')']) == 'Yes'\n  canConcat([')', ')']) == 'No'\n  */\nconst canConcat = (str) => {\n  let count = 0;\n  let result = '';\n  let match;\n  while ((match = str.match(/\\(([^()]+)\\)/))!== null) {\n    count += 1;\n    if (count === 1) {\n      result += match[1];\n    } else {\n      result += match[0];\n    }\n  }\n  return result === '"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < len; i++) {\n    if (max < arr[i]) {\n      max = arr[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctPositiveIntegers = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count += countDistinctPositiveIntegers(curr.next);\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctPositiveIntegersRecursive = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count += countDistinctPositiveIntegersRecursive(curr.next);\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctPositiveIntegersIterative = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count += countDistinctPositiveIntegersIterative(curr.next);\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctPositiveIntegersIterativeRecursive = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count += countDistinctPositiveIntegersIterativeRecursive(curr.next);\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctPositiveIntegers = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count += countDistinctPositiveIntegers(curr.next);\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctPositiveIntegersRecursive = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count += countDistinctPositiveIntegersRecursive(curr.next);\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctPositiveIntegersIterative = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count += countDistinctPositiveIntegersIterative(curr.next);\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctPositiveIntegersIterativeRecursive = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count += countDistinctPositiveIntegersIterativeRecursive(curr.next);\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctPositiveIntegers = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count += countDistinctPositiveIntegers(curr.next);\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctPositiveIntegersRecursive = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count += countDistinctPositiveIntegersRecursive(curr.next);\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenSum += item;\n    } else {\n      oddSum += item;\n    }\n  });\n  sum = evenSum + oddSum;\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],2:[function(require,module,exports){\n/*\n  Given a non-emptiest list of integers, return the sums of all of the even elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenSum += item;\n    } else {\n      oddSum += item;\n    }\n  });\n  sum = evenSum + oddSum;\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],3:[function(require,module,exports){\n/*\n  Given a non-emptiest list of integers, return the sums of all of the even elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenSum += item;\n    } else {\n      oddSum += item;\n    }\n  });\n  sum = evenSum + oddSum;\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a non-emptiest list of integers, return the sums of all of the even elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenSum += item;\n    } else {\n      oddSum += item;\n    }\n  });\n  sum = evenSum + oddSum;\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],5:[function(require,module,exports){\n/*\n  Given a non-emptiest list of integers, return the sums of all of the even elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenSum += item;\n    } else {\n      oddSum += item;\n    }\n  });\n  sum = evenSum + oddSum;\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],6:[function(require,module,exports){\n/*\n  Given a non-emptiest list of integers, return the sums of all of the even elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenSum += item;\n    } else {\n      oddSum += item;\n    }\n  });\n  sum = evenSum + oddSum;\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],7:[function(require,module,exports){\n/*\n  Given a non-emptiest list of integers, return the sums of all of the even elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenSum += item;\n    } else {\n      oddSum += item;\n    }\n  });\n  sum = evenSum + oddSum;\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],8:[function(require,module,exports){\n/*\n  Given a non-emptiest list of integers, return the sums of all of the even elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenSum += item;\n    } else {\n      oddSum += item;\n    }\n  });\n  sum = evenSum + oddSum;\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a non-emptiest list of integers, return the sums of all of the even elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenSum += item;\n    } else {\n      oddSum += item;\n    }\n  });\n  sum = evenSum + oddSum;\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],10:[function(require,module,exports){\n/*\n  Given a non-emptiest list of integers, return the sums of all of the even elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenS"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n// Given an array of integers arr and an integer k, return the\n// sum of the elements with at more two digit from the first k elements of arr.\n// Example:\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Explanation:\n// We have two cases:\n// Case 1: We have two elements with two digit from the first k elements of arr\n// Case 2: We have two elements with one digit from the first k elements of arr\n// We need to find the sum of these two cases and return it.\n// We will use two helper functions:\n// 1. getTwoDigitSum(arr, k)\n// 2. getOneDigitSum(arr, k)\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) will return the sum of the elements with one digit from the first k elements of arr.\n// We will use these helper functions to solve the problem.\n// getTwoDigitSum(arr, k) will return the sum of the elements with two digit from the first k elements of arr.\n// getOneDigitSum(arr, k) "}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      collatz.push(i);\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 3] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, and 3.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2!== 0) {\n      collatz.push(i);\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 3, 5, 2] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, 5, and 3.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2!== 0) {\n      collatz.push(i);\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 3, 5, 2] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, and 3.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2!== 0) {\n      collatz.push(i);\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 3, 5, 2] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, 5, and 3.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2!== 0) {\n      collatz.push(i);\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 3, 5, 2] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, and 3.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2!== 0) {\n      collatz.push(i);\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 3, 5, 2] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, 5, and 3.\n  */\nconst getOddCollatz = ("}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const [month, day, year] = date.split('-');\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth, monthName, yearName] = month.match(/\\d+/g);\n  const [daysInMonth"}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = []\n  let splits = txt.split(' ')\n  for (let i = 0; i < splits.length; i++) {\n    let split = splits[i]\n    let splitWord = split.toLowerCase()\n    if (splitWord.includes(',')) {\n      splitWord = splitWord.split(',')\n    }\n    for (let j = 0; j < splitWord.length; j++) {\n      let letter = splitWord[j]\n      if (letter >= 'a' && letter <= 'z') {\n        letter = letter - 'a'\n      }\n      if (letter >= 'A' && letter <= 'Z') {\n        letter = letter - 'A'\n      }\n      if (letter >= '0' && letter <= '9') {\n        letter = letter - '0'\n      }\n      words.push(letter)\n    }\n  }\n  return words\n}\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = []\n  let splits = txt.split(' ')\n  for (let i = 0; i < splits.length; i++) {\n    let split = splits[i]\n    let splitWord = split.toLowerCase()\n    if (splitWord.includes(',')) {\n      splitWord = splitWord.split(',')\n    }\n    for (let j = 0; j < splitWord.length; j++) {\n      let letter = splitWord[j]\n      if (letter >= 'a' && letter <= 'z') {\n        letter = letter - 'a'\n      }\n      if (letter >= 'A' && letter <= 'Z') {\n        letter = letter - 'A'\n      }\n      if (letter >= '0' && letter <= '9') {\n        letter = letter - '0'\n      }\n      words.push(letter)\n    }\n  }\n  return words\n}\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = []\n  let splits = txt.split(' ')\n  for (let i = 0; i < splits.length; i++) {\n    let split = splits[i]\n    let splitWord = split.toLowerCase()\n    if (splitWord.includes(',')) {\n      splitWord = splitWord.split(',')\n    }\n    for (let j = 0; j < splitWord.length; j++) {\n      let letter = splitWord[j]\n      if (letter >= 'a' && letter <= 'z') {\n        letter = letter - 'a'\n      }\n      if (letter >= 'A' && letter <= 'Z') {\n        letter = letter - 'A'\n      }\n      if (letter >= '0' && letter <= '9') {\n        letter = letter - '0'\n      }\n      words.push(letter)\n    }\n  }\n  return words\n}\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = []\n  let splits = txt.split(' ')\n  for (let i = 0; i < splits.length; i++) {\n    let split = splits[i]\n    let splitWord = split.toLowerCase()\n    if (splitWord.includes(',')) {\n      splitWord = splitWord.split(',')\n    }\n    for (let j = 0; j < splitWord.length; j++) {\n      let letter = splitWord[j]\n      if (letter >= 'a' && letter <= 'z') {\n        letter = letter - 'a'\n      }\n      if (letter >= 'A' && letter <= 'Z') {\n        letter = letter - 'A'\n      }\n      if (letter >= '0' && letter <= '9') {\n        letter = letter - '0'\n      }\n      words.push(letter)\n    }\n  }\n  return words\n}\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = []\n  let splits = txt.split(' ')\n  for (let i = 0; i < splits.length; i++) {\n    let split = splits[i]\n    let splitWord = split.toLowerCase()\n    if (splitWord.includes(',')) {\n      splitWord = splitWord.split(',')\n    }\n    for (let j = 0; j < splitWord.length; j++) {\n      let letter = splitWord[j]\n      if (letter >= 'a' && letter <= 'z') {\n        letter = letter - 'a'\n      }\n      if (letter >= 'A' && letter <= 'Z') {\n        letter = letter - 'A'\n      }\n      if (letter >= '0' && letter <= '9') {\n        letter = letter - '0'\n      }\n      words.push(letter)\n    }\n  }\n  return words\n}\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = []\n  let splits = txt.split(' ')\n  for (let i = 0; i < splits.length; i++) {\n    let split = splits[i]\n    let splitWord = split.toLowerCase()\n    if (splitWord.includes(',')) {\n      splitWord = splitWord.split(',')\n    }\n    for (let j = 0; j < splitWord.length; j++) {\n      let letter = splitWord[j]\n      if (letter >= 'a' && letter <= 'z') {\n        letter = letter - 'a'\n      }\n      if (letter >= 'A"}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sortedLst = []\n  let sortedLstIndex = 0\n  let sortedLstCount = 0\n  let sortedLstCountIndex = 0\n  let sortedLstCountCount = 0\n  let sortedLstCountCountIndex = 0\n  let sortedLstCountCountCountIndex = 0\n  let sortedLstCountCountCountIndex = 0\n  let sortedLstCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCountCountCountIndex = 0\n  let sortedLstCountCount"}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const [start3, end3] = interval1;\n  const [start4, end4] = interval2;\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end2 || end2 < end3 || end3 < end4 || end4 < end2) {\n    return \"NO\";\n  }\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start2 || end1 < end"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sign *= arr[i];\n    sum += sign;\n  }\n  return sum;\n};\n\n/*\n  You was given an array arr of integers and you needing to return the\n sum of all numbers in the array multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> sumSigns([1, 2, 2, -4]) == 9\n  >>> sumSigns([0, 1]) == -1\n  >>> sumSigns([]) == null\n  */\nconst sumSigns = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sign *= arr[i];\n    sum += sign;\n  }\n  return sum;\n};\n\n/*\n  You was given an array arr of integers and you needing to return the\n product of all numbers in the array multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == 9\n  >>> prodSigns([0, 1]) == -1\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sign *= arr[i];\n    sum += sign;\n  }\n  return sum;\n};\n\n/*\n  You was given an array arr of integers and you needing to return the\n sum of all numbers in the array multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> sumSigns([1, 2, 2, -4]) == 9\n  >>> sumSigns([0, 1]) == -1\n  >>> sumSigns([]) == null\n  */\nconst sumSigns = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sign *= arr[i];\n    sum += sign;\n  }\n  return sum;\n};\n\n/*\n  You was given an array arr of integers and you needing to return the\n product of all numbers in the array multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == 9\n  >>> prodSigns([0, 1]) == -1\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sign *= arr[i];\n    sum += sign;\n  }\n  return sum;\n};\n\n/*\n  You was given an array arr of integers and you needing to return the\n sum of all numbers in the array multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> sumSigns([1, 2, 2, -4]) == 9\n  >>> sumSigns([0, 1]) == -1\n  >>> sumSigns([]) == null\n  */\nconst sumSigns = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sign *= arr[i];\n    sum += sign;\n  }\n  return sum;\n};\n\n/*\n  You was given an array arr of integers and you needing to return the\n product of all numbers in the array multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == 9\n  >>> prodSigns([0, 1]) == -1\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sign *= arr[i];\n    sum += sign;\n  }\n  return sum;\n};\n\n/*\n  You was given an array arr of integers and you needing to return the\n sum of all numbers in the array multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> sumSigns([1, 2, 2, -4]) == 9\n  >>> sumSigns([0, 1]) == -1\n  >>> sumSigns([]) == null\n  */\nconst sumSigns = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sign *= arr[i];\n    sum += sign;\n  }\n  return sum;\n};\n\n/*\n  You was given an array arr of integers and you needing to return the\n product of all numbers in the array multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == 9\n  >>> prodSigns([0, 1]) == -1\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sign *= arr[i];\n    sum += sign;\n  }\n  return sum;\n};\n\n/*\n  You was given an array arr of integers and you needing to return the\n sum of all numbers in the array multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> sumSigns([1, 2, 2, -4]) == 9\n  >>> sumSigns([0, 1]) == -1\n  >>> sumSigns([]) == null\n  */\nconst sumSigns = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sign *= arr[i];\n    sum += sign;\n  }\n  return sum;\n};\n\n/*\n  You was given an array arr of integers and you needing to return the\n product of all numbers in the array multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == 9\n  >>> prodSigns([0, 1]) == -1\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sign *= arr[i];\n    sum += sign;\n  }\n  return sum;\n};\n\n/*\n  You was given an array arr of integers and you needing to return the\n sum of all numbers in the array multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> sumSigns([1, 2, 2, -4]) == 9\n  >>> sumSigns([0, 1]) == -1\n  >>> sumSigns([]) == null\n  */\nconst sumSigns = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sign *= arr[i];\n    sum += sign;\n  }\n  return sum;\n};\n\n/*\n  You was given an array arr of integers and you needing to return the\n product of all numbers in the array multiplies by products of all sign of each number in the array, re"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = grid.map(x => x.map(y => y))\n  const lst_B = grid.map(x => x.map(y => y))\n  const lst_C = grid.map(x => x.map(y => y))\n  const lst_D = grid.map(x => x.map(y => y))\n  const lst_E = grid.map(x => x.map(y => y))\n  const lst_F = grid.map(x => x.map(y => y))\n  const lst_G = grid.map(x => x.map(y => y))\n  const lst_H = grid.map(x => x.map(y => y))\n  const lst_I = grid.map(x => x.map(y => y))\n  const lst_J = grid.map(x => x.map(y => y))\n  const lst_K = grid.map(x => x.map(y => y))\n  const lst_L = grid.map(x => x.map(y => y))\n  const lst_M = grid.map(x => x.map(y => y))\n  const lst_N = grid.map(x => x.map(y => y))\n  const lst_O = grid.map(x => x.map(y => y))\n  const lst_P = grid.map(x => x.map(y => y))\n  const lst_Q = grid.map(x => x.map(y => y))\n  const lst_R = grid.map(x => x.map(y => y))\n  const lst_S = grid.map(x => x.map(y => y))\n  const lst_T = grid.map(x => x.map(y => y))\n  const lst_U = grid.map(x => x.map(y => y))\n  const lst_V = grid.map(x => x.map(y => y))\n  const lst_W = grid.map(x => x.map(y => y))\n  const lst_X = grid.map(x => x.map(y => y))\n  const lst_Y = grid.map(x => x.map(y => y))\n  const lst_Z = grid.map(x => x.map(y => y))\n  const lst_A = lst_A.sort((a, b) => a.length - b.length)\n  const lst_B = lst_B.sort((a, b) => a.length - b.length)\n  const lst_C = lst_C.sort((a, b) => a.length - b.length)\n  const lst_D = lst_D.sort((a, b) => a.length - b.length)\n  const lst_E = lst_E.sort((a, b) => a.length - b.length)\n  const lst_F = lst_F.sort((a, b) => a.length - b.length)\n  const lst_G = lst_G.sort((a, b) => a.length - b.length)\n  const lst_H = lst_H.sort((a, b) => a.length - b.length)\n  const lst_I = lst_I.sort((a, b) => a.length - b.length)\n  const lst_J = lst_J.sort((a, b) => a.length - b.length)\n  const lst_K = lst_K.sort((a, b) => a.length - b.length)\n  const lst_L = lst_L.sort((a, b) => a.length - b.length)\n  const lst_M = lst_M.sort((a, b) => a.length - b.length)\n  const lst_N = lst_N.sort((a, b) => a.length - b.length)\n  const lst_O = lst_O.sort((a, b) => a.length - b.length)\n  const lst_P = lst_P.sort((a, b) => a.length - b.length)\n  const lst_Q = lst_Q.sort((a, b) => a.length - b.length)\n  const lst_R = lst_R.sort((a, b) => a.length - b.length)\n  const lst_S = lst_S.sort((a, b) => a.length - b.length)\n  const lst_T = lst_T.sort((a, b) => a.length - b.length)\n  const lst_U = lst_U.sort((a, b) => a.length - b.length)\n  const lst_V = lst_V.sort((a, b) => a.length - b.length)\n  const lst_W = lst_W.sort((a, b) => a.length - b.length)\n  const lst_X = lst_X.sort((a, b) => a.length - b.length)\n  const lst_Y = lst_Y.sort((a, b) => a.length - b.length)\n  const lst_Z = lst_Z.sort((a, b) => a.length - b.length)\n  const lst_A = lst_A.sort((a, b) => a.length - b.length)\n  const lst_B = lst_B.sort((a, b) => a.length - b.length)\n  const lst_C = lst_C.sort((a, b) => a.length - b.length)\n  const lst_D = lst_D.sort((a, b) => a.length - b.length)\n  const lst_E = lst_E.sort((a, b) => a.length - b.length)\n  const lst_F = lst_F.sort((a, b) => a.length - b.length)\n  const lst_G = lst_G.sort((a, b) => a.length - b.length)\n  const lst_H = lst_H.sort((a, b) => a.length - b.length)\n  const lst_I = lst_I.sort((a, b) => a.length - b.length)\n  const lst_J = lst_J.sort((a, b) => a.length - b.length)\n  const lst_K = lst_K.sort((a, b) => a.length - b.length)\n  const lst_L = lst_L.sort((a, b) => a.length - b.length)\n  const lst_M = lst_M.sort((a, b) => a.length - b.length)\n  const lst_N = lst_N.sort((a, b) => a.length - b.length)\n  const lst_O = lst_O.sort((a, b) => a.length - b.length)\n  const lst_P = lst_P.sort((a, b) => a.length - b.length)\n  const lst_Q = lst_Q.sort((a, b) => a.length - b.length)\n  const lst_R = lst_R.sort((a, b) => a.length - b.length)\n  const lst_S = lst_S.sort((a, b) => a.length - b.length)\n  const lst_T = lst_T.sort((a, b) => a.length - b.length)\n  const lst_U = lst_U.sort((a, b) => a.length - b.length)\n  const lst_V = lst_V.sort((a, b) => a.length - b.length)\n  const lst_W = lst_W.sort((a, b) => a.length - b.length)\n  const lst_X = lst_X.sort((a, b) => a.length - b.length)\n  const lst_Y = lst_Y.sort((a, b) => a.length - b.length)\n  const lst_Z = lst_Z.sort((a, b) => a.length - b.length)\n"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [1, 3, 2, 8];\n  if (n <= 1) {\n    return arr;\n  }\n  arr[0] = arr[1] = arr[2] = arr[3] = 0;\n  let i = 2;\n  while (i <= n) {\n    arr[i] = arr[i-2] + arr[i-1] + arr[i-0];\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fib = (n) => {\n  let arr = [1, 1, 2, 3, 5, 8, 13, 21, 34];\n  if (n <= 1) {\n    return arr;\n  }\n  arr[0] = arr[1] = arr[2] = arr[3] = 0;\n  let i = 2;\n  while (i <= n) {\n    arr[i] = arr[i-2] + arr[i-1] + arr[i-0];\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  let arr = [1, 1, 2, 3, 5, 8, 13, 21, 34];\n  if (n <= 1) {\n    return arr;\n  }\n  arr[0] = arr[1] = arr[2] = arr[3] = 0;\n  let i = 2;\n  while (i <= n) {\n    arr[i] = arr[i-2] + arr[i-1] + arr[i-0];\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  let arr = [1, 1, 2, 3, 5, 8, 13, 21, 34];\n  if (n <= 1) {\n    return arr;\n  }\n  arr[0] = arr[1] = arr[2] = arr[3] = 0;\n  let i = 2;\n  while (i <= n) {\n    arr[i] = arr[i-2] + arr[i-1] + arr[i-0];\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  let arr = [1, 1, 2, 3, 5, 8, 13, 21, 34];\n  if (n <= 1) {\n    return arr;\n  }\n  arr[0] = arr[1] = arr[2] = arr[3] = 0;\n  let i = 2;\n  while (i <= n) {\n    arr[i] = arr[i-2] + arr[i-1] + arr[i-0];\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  let arr = [1, 1, 2, 3, 5, 8, 13, 21, 34];\n  if (n <= 1) {\n    return arr;\n  }\n  arr[0] = arr[1] = arr[2] = arr[3] = 0;\n  let i = 2;\n  while (i <= n) {\n    arr[i] = arr[i-2] + arr[i-1] + arr[i-0];\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  let arr = [1, 1, 2, 3, 5, 8, 13, 21, 34];\n  if (n <= 1) {\n    return arr;\n  }\n  arr[0] = arr[1] = arr[2] = arr[3] = 0;\n  let i = 2;\n  while (i <= n) {\n    arr[i] = arr[i-2] + arr[i-1] + arr[i-0];\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  let arr = [1, 1, 2, 3, 5, 8, 13, 21, 34];\n  if (n <= 1) {\n    return arr;\n  }\n  arr[0] = arr[1] = arr[2] = arr[3] = 0;\n  let i = 2;\n  while (i <= n) {\n    arr[i] = arr[i-2] + arr[i-1] + arr[i-0];\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  let arr = [1, 1, 2, 3, 5, 8, 13, 21, 34];\n  if (n <= 1) {\n    return arr;\n  }\n  arr[0] = arr[1] = arr[2] = arr[3] = 0;\n  let i = 2;\n  while (i <= n) {\n    arr[i] = arr[i-2] + arr[i-1] + arr[i-0];\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  let arr = [1, 1, 2, 3, 5, 8, 13, 21, 34];\n  if (n <= 1) {\n    return arr;\n  }\n  arr[0] = arr[1] = arr[2] = arr[3] = 0;\n  let i = 2;\n  while (i <= n) {\n    arr[i] = arr[i-2] + arr[i-1] + arr[i-0];\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  let arr = [1, 1, 2, 3, 5, 8, 13, 21, 34];\n  if (n <= 1) {\n    return arr;\n  }\n  arr[0] = arr[1] = arr[2] = arr[3] = 0;\n  let i = 2;\n  while (i <= n) {\n    arr[i] = arr[i-2] + arr[i-1] + arr[i-0];\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  let arr = [1, 1, 2, 3, 5, 8, 13, 21, 34];\n  if (n <= 1) {\n    return arr;\n  }\n  arr[0] = arr[1] = arr[2] = arr[3] = 0;\n  let i = "}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i--) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integers n, return the sum of all even digits.\n Return 0 if all digits were even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integers n, return the sum of all odd digits.\n Return 0 if all digits were odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitOddSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integers n, return the sum of all even and odd digits.\n Return 0 if all digits were even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integers n, return the sum of all even and odd digits.\n Return 0 if all digits were odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumOddOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integers n, return the sum of all even and odd digits.\n Return 0 if all digits were odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumOddOddOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n    if (i % 2 === 1) {\n      sum += i;\n    }\n    if (i % 2 === 2) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integers n, return the sum of all even and odd digits.\n Return 0 if all digits were odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumOddOddOddOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n    if (i % 2 === 1) {\n      sum += i;\n    }\n    if (i % 2 === 2) {\n      sum += i;\n    }\n    if (i % 2 === 3) {\n      sum += i;\n    }\n    if (i % 2 === 4) {\n      sum += i;\n    }\n    if (i % 2 === 5) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integers n, return the sum of all even and odd digits.\n Return 0 if all digits were odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumOddOddOddOddOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n    if (i % 2 === 1) {\n      sum += i;\n    }\n    if (i % 2 === 2) {\n      sum += i;\n    }\n    if (i % 2 === 3) {\n      sum += i;\n    }\n    if (i % 2 === 4) {\n      sum += i;\n    }\n    if (i % 2 === 5) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integers n, return the sum of all even and odd digits.\n Return 0 if all digits were odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumOddOddOddOddOddOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n    if (i % 2 === 1) {\n      sum += i;\n    }\n    if (i % 2 === 2) {\n      sum += i;\n    }\n    if (i % 2 === 3) {\n      sum += i;\n    }\n    if (i % 2 === 4) {\n      sum += i;\n    }\n    if (i % 2 === 5) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integers n, return the sum of all even and odd digits.\n Return 0 if all digits were odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumOddOddOddOddOddOddOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n    if (i % 2 === 1) {\n      sum += i;\n    }\n    if (i % 2 === 2) {\n      sum += i;\n    }\n    if (i % 2 === 3) {\n      sum += i;\n    }\n    if (i % 2 === 4) {\n      sum += i;\n    }\n    if (i % 2 === 5) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integers n, return the sum of all even and odd digits.\n Return 0 if all digits were odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSumOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddO"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n    const stack = [string];\n    while (stack.length > 0) {\n      const char = stack.pop();\n      if (char === '[') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return true;\n        }\n      } else if (char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > 0) {\n          stack.push(stack.shift());\n        } else {\n          return false;\n        }\n      } else if (char === '[' || char === ']') {\n        if (stack.length > "}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 2);\n  });\n  return Math.round(sum);\n};\n\n/*\n Given a list with numbers, return its sum.\n Examples:\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + 1 + 1 = 6\n Given nums = [1,2,3], return 1 + 2 + 3 = 6\n Given nums = [1,4,9], return 1 + 4 + 9 = 24\n Given nums = [1,3,5,7], return 1 + 3 + 5 + 7 = 61\n Given nums = [1.4,4.2,0], return 1.414 + 4.2 + 0 = 29\n Given nums = [-2.4,1,1], return -2.414 + "}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isLastCharAWord = lastChar ==='' || lastChar === '-' || lastChar === '_' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '~' || lastChar === '?' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || "}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let arrLength = arr.length;\n  let arrIndex = 0;\n  let arrIndex2 = 0;\n  let arrIndex3 = 0;\n  let arrIndex4 = 0;\n  let arrIndex5 = 0;\n  let arrIndex6 = 0;\n  let arrIndex7 = 0;\n  let arrIndex8 = 0;\n  let arrIndex9 = 0;\n  let arrIndex10 = 0;\n  let arrIndex11 = 0;\n  let arrIndex12 = 0;\n  let arrIndex13 = 0;\n  let arrIndex14 = 0;\n  let arrIndex15 = 0;\n  let arrIndex16 = 0;\n  let arrIndex17 = 0;\n  let arrIndex18 = 0;\n  let arrIndex19 = 0;\n  let arrIndex20 = 0;\n  let arrIndex21 = 0;\n  let arrIndex22 = 0;\n  let arrIndex23 = 0;\n  let arrIndex24 = 0;\n  let arrIndex25 = 0;\n  let arrIndex26 = 0;\n  let arrIndex27 = 0;\n  let arrIndex28 = 0;\n  let arrIndex29 = 0;\n  let arrIndex30 = 0;\n  let arrIndex31 = 0;\n  let arrIndex32 = 0;\n  let arrIndex33 = 0;\n  let arrIndex34 = 0;\n  let arrIndex35 = 0;\n  let arrIndex36 = 0;\n  let arrIndex37 = 0;\n  let arrIndex38 = 0;\n  let arrIndex39 = 0;\n  let arrIndex40 = 0;\n  let arrIndex41 = 0;\n  let arrIndex42 = 0;\n  let arrIndex43 = 0;\n  let arrIndex44 = 0;\n  let arrIndex45 = 0;\n  let arrIndex46 = 0;\n  let arrIndex47 = 0;\n  let arrIndex48 = 0;\n  let arrIndex49 = 0;\n  let arrIndex50 = 0;\n  let arrIndex51 = 0;\n  let arrIndex52 = 0;\n  let arrIndex53 = 0;\n  let arrIndex54 = 0;\n  let arrIndex55 = 0;\n  let arrIndex56 = 0;\n  let arrIndex57 = 0;\n  let arrIndex58 = 0;\n  let arrIndex59 = 0;\n  let arrIndex60 = 0;\n  let arrIndex61 = 0;\n  let arrIndex62 = 0;\n  let arrIndex63 = 0;\n  let arrIndex64 = 0;\n  let arrIndex65 = 0;\n  let arrIndex66 = 0;\n  let arrIndex67 = 0;\n  let arrIndex68 = 0;\n  let arrIndex69 = 0;\n  let arrIndex70 = 0;\n  let arrIndex71 = 0;\n  let arrIndex72 = 0;\n  let arrIndex73 = 0;\n  let arrIndex74 = 0;\n  let arrIndex75 = 0;\n  let arrIndex76 = 0;\n  let arrIndex77 = 0;\n  let arrIndex78 = 0;\n  let arrIndex79 = 0;\n  let arrIndex80 = 0;\n  let arrIndex81 = 0;\n  let arrIndex82 = 0;\n  let arrIndex83 = 0;\n  let arrIndex84 = 0;\n  let arrIndex85 = 0;\n  let arrIndex86 = 0;\n  let arrIndex87 = 0;\n  let arrIndex88 = 0;\n  let arrIndex89 = 0;\n  let arrIndex90 = 0;\n  let arrIndex91 = 0;\n  let arrIndex92 = 0;\n  let arrIndex93 = 0;\n  let arrIndex94 = 0;\n  let arrIndex95 = 0;\n  let arrIndex96 = 0;\n  let arrIndex97 = 0;\n  let arrIndex98 = 0;\n  let arrIndex99 = 0;\n  let arrIndex100 = 0;\n  let arrIndex101 = 0;\n  let arrIndex102 = 0;\n  let arrIndex103 = 0;\n  let arrIndex104 = 0;\n  let arrIndex105 = 0;\n  let arrIndex106 = 0;\n  let arrIndex107 = 0;\n  let arrIndex108 = 0;\n  let arrIndex109 = 0;\n  let arrIndex110 = 0;\n  let arrIndex111 = 0;\n  let arrIndex112 = 0;\n  let arrIndex113 = 0;\n  let arrIndex114 = 0;\n  let arrIndex115 = 0;\n  let arrIndex116 = 0;\n  let arrIndex117 = 0;\n  let arrIndex118 = 0;\n  let arrIndex119 = 0;\n  let arrIndex120 = 0;\n  let arrIndex121 = 0;\n  let arrIndex122 = 0;\n  let arrIndex123 = 0;\n  let arrIndex124 = 0;\n  let arrIndex125 = 0;\n  let arrIndex126 = 0;\n  let arrIndex127 = 0;\n  let arrIndex128 = 0;\n  let arrIndex129 = 0;\n  let arrIndex130 = 0;\n  let arrIndex131 = 0;\n  let arrIndex132 = 0;\n  let arrIndex133 = 0;\n  let arrIndex134 = 0;\n  let arrIndex135 = 0;\n  let arrIndex136 = 0;\n  let arrIndex137 = 0;\n  let arrIndex138 = 0;\n  let arrIndex139 = 0;\n  let arrIndex140 = 0;\n  let arrIndex141 = 0;\n  let arrIndex142 = 0;\n  let arrIndex143 = 0;\n  let arrIndex144 = 0;\n  let arrIndex145 = 0;\n  let arrIndex146 = 0;\n  let arrIndex147 = 0;\n  let arrIndex148 = 0;\n  let arrIndex149 = 0;\n  let arrIndex150 = 0;\n  let arrIndex151 = 0;\n  let arrIndex152 = 0;\n  let arrIndex153 = 0;\n  let arrIndex154 = 0;\n  let arrIndex155 = 0;\n  let arrIndex156 = 0;\n  let arrIndex157 = 0;\n  let arrIndex158 = 0;\n  let arrIndex159 = 0;\n  let arrIndex160 = 0;\n  let arrIndex161 = 0;\n  let arrIndex162 = 0;\n  let arrIndex163 = 0;\n  let arrIndex164 = 0;\n  let arrIndex165 = 0;\n  let arrIndex166 = 0;\n  let arrIndex167 = 0;\n  let arrIndex168 = 0;\n  let arrIndex169 = 0;\n  let arrIndex170 = 0;\n  let arrIndex171 = 0;\n  let arrIndex172 = 0;\n  let arrIndex173 = 0;\n  let arrIndex174 = 0;\n  let arrIndex175 = 0;\n  let arrIndex176 = 0;\n  let arrIndex177 = 0;\n  let arrIndex178 = 0;\n  let arrIndex179 = 0;\n  let arrIndex180 = 0;\n  let arrIndex181 = 0;\n  let arrIndex182 = 0;\n  let arrIndex183 = 0;\n  let arrIndex184 = 0;\n  let arrIndex185 = 0;\n  let arrIndex186 = 0;\n  let arrIndex187 = 0;\n  let arrIndex188 = 0;\n  let arrIndex189 = 0;\n  let arrIndex190 = 0;\n  let arrIndex191 = 0;\n  let arrIndex192 = 0;\n  let arrIndex193 = 0;\n  let arrIndex194 = 0;\n  let arrIndex195 = 0;\n  let arrIndex196 = 0;\n  let arrIndex197 = 0;\n  let arrIndex198 = 0;\n  let arrIndex199 = 0;\n  let arrIndex200 = 0;\n  let arrIndex201 = 0;\n  let arrIndex202 = 0;\n  let arrIndex203 = 0;\n  let arrIndex204 = 0;\n  let arrIndex205 = 0;\n  let arrIndex206 = 0;\n  let arrIndex207 = 0;\n  let arrIndex208 = 0;\n  let arrIndex209 = 0;\n  let arrIndex210 = 0;\n  let arrIndex211 = 0;\n  let arrIndex212 = 0;\n  let arrIndex213 = 0;\n  let arrIndex214 = 0;\n  let arrIndex215 = 0;\n  let arrIndex216 = 0;\n  let arrIndex217 = 0;\n  let arrIndex218 = 0;\n  let arrIndex219 = 0;\n  let arrIndex220 = 0;\n  let arrIndex221 = 0;\n  let arrIndex222 = 0;\n  let arrIndex223 = 0;\n  let arrIndex224 = 0;\n  let arrIndex225 = 0;\n  let arrIndex226 = 0;\n  let arrIndex227 = 0;\n  let arrIndex228 = 0;\n  let arrIndex229 = 0;\n  let arrIndex230 = 0;\n  let arrIndex231 = 0;\n  let arrIndex232 = 0;\n  let arrIndex233 = 0;\n  let arrIndex234 = 0;\n  let arrIndex235 = 0;\n  let arrIndex236 = 0;\n  let arrIndex237 = 0;\n  let arrIndex238 = 0;\n  let arrIndex239 = 0;\n  let arrIndex240 = 0;\n  let arrIndex241 = 0;\n  let arrIndex242 = 0;\n  let arrIndex243 = 0;\n  let arrIndex244 = 0;\n  let "}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns true if the two lists are equal, false otherwise.\n Examples:\n  equalLists([2, 4, 1, 3, 5, 7]) == true\n  equalLists([]) == false\n  equalLists([0]) == false\n  */\nconst equalLists = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return false;\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i]!== lst2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Create a function that returns true if the two lists are equal, false otherwise.\n Examples:\n  equalLists([2, 4, 1, 3, 5, 7]) == true\n  equalLists([]) == false\n  equalLists([0]) == false\n  */\nconst equalListsNoDuplicates = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return false;\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] === lst2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Create a function that returns true if the two lists are equal, false otherwise.\n Examples:\n  equalLists([2, 4, 1, 3, 5, 7]) == true\n  equalLists([]) == false\n  equalLists([0]) == false\n  */\nconst equalListsNoDuplicatesNoDuplicates = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return false;\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] === lst2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Create a function that returns true if the two lists are equal, false otherwise.\n Examples:\n  equalLists([2, 4, 1, 3, 5, 7]) == true\n  equalLists([]) == false\n  equalLists([0]) == false\n  */\nconst equalListsNoDuplicatesNoDuplicatesNoDuplicates = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return false;\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] === lst2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Create a function that returns true if the two lists are equal, false otherwise.\n Examples:\n  equalLists([2, 4, 1, 3, 5, 7]) == true\n  equalLists([]) == false\n  equalLists([0]) == false\n  */\nconst equalListsNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return false;\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] === lst2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Create a function that returns true if the two lists are equal, false otherwise.\n Examples:\n  equalLists([2, 4, 1, 3, 5, 7]) == true\n  equalLists([]) == false\n  equalLists([0]) == false\n  */\nconst equalListsNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (\n  lst1,\n  lst2\n) => {\n  if (lst1.length!== lst2.length) {\n    return false;\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] === lst2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Create a function that returns true if the two lists are equal, false otherwise.\n Examples:\n  equalLists([2, 4, 1, 3, 5, 7]) == true\n  equalLists([]) == false\n  equalLists([0]) == false\n  */\nconst equalListsNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (\n  lst1,\n  lst2\n) => {\n  if (lst1.length!== lst2.length) {\n    return false;\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] === lst2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Create a function that returns true if the two lists are equal, false otherwise.\n Examples:\n  equalLists([2, 4, 1, 3, 5, 7]) == true\n  equalLists([]) == false\n  equalLists([0]) == false\n  */\nconst equalListsNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicate"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  if (a === null || b === null) return null;\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return parseFloat(a) - parseFloat(b);\n    }\n    return a - b;\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) - parseFloat(a);\n  }\n  return a - b;\n};\n\n/*\n  Create a function that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareTwo(1, 2.5) ➞ 2.5 compareTwo(1, \"2,3\") ➞ \"2,3\" compareTwo(\"5,1\", \"6\") ➞ \"6\" compareTwo(\"1\", 1) ➞ null */ const compareTwo = (a, b) => {\n  if (a === null || b === null) return null;\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return parseFloat(a) - parseFloat(b);\n    }\n    return a - b;\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) - parseFloat(a);\n  }\n  return a - b;\n};\n\n/*\n  Create a function that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareThree(1, 2.5) ➞ 2.5 compareThree(1, \"2,3\") ➞ \"2,3\" compareThree(\"5,1\", \"6\") ➞ \"6\" compareThree(\"1\", 1) ➞ null */ const compareThree = (a, b) => {\n  if (a === null || b === null) return null;\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return parseFloat(a) - parseFloat(b);\n    }\n    return a - b;\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) - parseFloat(a);\n  }\n  return a - b;\n};\n\n/*\n  Create a function that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareFour(1, 2.5) ➞ 2.5 compareFour(1, \"2,3\") ➞ \"2,3\" compareFour(\"5,1\", \"6\") ➞ \"6\" compareFour(\"1\", 1) ➞ null */ const compareFour = (a, b) => {\n  if (a === null || b === null) return null;\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return parseFloat(a) - parseFloat(b);\n    }\n    return a - b;\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) - parseFloat(a);\n  }\n  return a - b;\n};\n\n/*\n  Create a function that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareFive(1, 2.5) ➞ 2.5 compareFive(1, \"2,3\") ➞ \"2,3\" compareFive(\"5,1\", \"6\") ➞ \"6\" compareFive(\"1\", 1) ➞ null */ const compareFive = (a, b) => {\n  if (a === null || b === null) return null;\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return parseFloat(a) - parseFloat(b);\n    }\n    return a - b;\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) - parseFloat(a);\n  }\n  return a - b;\n};\n\n/*\n  Create a function that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareSix(1, 2.5) ➞ 2.5 compareSix(1, \"2,3\") ➞ \"2,3\" compareSix(\"5,1\", \"6\") ➞ \"6\" compareSix(\"1\", 1) ➞ null */ const compareSix = (a, b) => {\n  if (a === null || b === null) return null;\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return parseFloat(a) - parseFloat(b);\n    }\n    return a - b;\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) - parseFloat(a);\n  }\n  return a - b;\n};\n\n/*\n  Create a function that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareSeven(1, 2.5) ➞ 2.5 compareSeven(1, \"2,3\") ➞ \"2,3\" compareSeven(\"5,1\", \"6\") ➞ \"6\" compareSeven(\"1\", 1) ➞ null */ const compareSeven = (a, b) => {\n  if (a === null || b === null) return null;\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return parseFloat(a) - parseFloat(b);\n    }\n    return a - b;\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) - parseFloat(a);\n  }\n  return a - b;\n};\n\n/*\n  Create a function that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareEight(1, 2.5) ➞ 2.5 compareEight(1, \"2,3\") ➞ \"2,3\" compareEight(\"5,1\", \"6\") ➞ \"6\" compareEight(\"1\", 1) ➞ null */ const compareEight = (a, b) => {\n  if (a === null || b === null) return null;\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return parseFloat(a) - parseFloat(b);\n    }\n    return a - b;\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) - parseFloat(a);\n  }\n  return a - b;\n};\n\n/*\n  Create a function that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareNine(1, 2.5) ➞ 2.5 compareNine(1, \"2,3\") ➞ \"2,3\" compareNine(\"5,1\", \"6\") ➞ \"6\" compareNine(\"1\", 1) ➞ null */ const compareNine = (a, b) => {\n  if (a === null || b === null) return null;\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return parseFloat(a) - parseFloat(b);\n    }\n    return a - b;\n  }\n  if (typeof b === \"string\") {\n    return parseFloat(b) - parseFloat(a);\n  }\n  return a - b;\n};\n\n/*\n  Create a function that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: "}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  let even = 0;\n  let evenSum = 0;\n  let evenEven = 0;\n  let evenEvenSum = 0;\n  let evenEvenEvenSum = 0;\n  let evenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenSum = 0;\n  let evenEvenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let even"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  while (n) {\n    factorial *= n;\n    n--;\n  }\n  return factorial;\n};\n\n/*\n  A function to calculate the factorial of a number greater than or equal to 1\n  \n  >>> factorial(5)\n  120\n  >>> factorial(6)\n  720\n  >>> factorial(7)\n  5040\n  >>> factorial(8)\n  362880\n  >>> factorial(9)\n  3628800\n  >>> factorial(10)\n  3628800\n  >>> factorial(11)\n  3628800\n  >>> factorial(12)\n  3628800\n  >>> factorial(13)\n  3628800\n  >>> factorial(14)\n  3628800\n  >>> factorial(15)\n  3628800\n  >>> factorial(16)\n  3628800\n  >>> factorial(17)\n  3628800\n  >>> factorial(18)\n  3628800\n  >>> factorial(19)\n  3628800\n  >>> factorial(20)\n  3628800\n  >>> factorial(21)\n  3628800\n  >>> factorial(22)\n  3628800\n  >>> factorial(23)\n  3628800\n  >>> factorial(24)\n  3628800\n  >>> factorial(25)\n  3628800\n  >>> factorial(26)\n  3628800\n  >>> factorial(27)\n  3628800\n  >>> factorial(28)\n  3628800\n  >>> factorial(29)\n  3628800\n  >>> factorial(30)\n  3628800\n  >>> factorial(31)\n  3628800\n  >>> factorial(32)\n  3628800\n  >>> factorial(33)\n  3628800\n  >>> factorial(34)\n  3628800\n  >>> factorial(35)\n  3628800\n  >>> factorial(36)\n  3628800\n  >>> factorial(37)\n  3628800\n  >>> factorial(38)\n  3628800\n  >>> factorial(39)\n  3628800\n  >>> factorial(40)\n  3628800\n  >>> factorial(41)\n  3628800\n  >>> factorial(42)\n  3628800\n  >>> factorial(43)\n  3628800\n  >>> factorial(44)\n  3628800\n  >>> factorial(45)\n  3628800\n  >>> factorial(46)\n  3628800\n  >>> factorial(47)\n  3628800\n  >>> factorial(48)\n  3628800\n  >>> factorial(49)\n  3628800\n  >>> factorial(50)\n  3628800\n  >>> factorial(51)\n  3628800\n  >>> factorial(52)\n  3628800\n  >>> factorial(53)\n  3628800\n  >>> factorial(54)\n  3628800\n  >>> factorial(55)\n  3628800\n  >>> factorial(56)\n  3628800\n  >>> factorial(57)\n  3628800\n  >>> factorial(58)\n  3628800\n  >>> factorial(59)\n  3628800\n  >>> factorial(60)\n  3628800\n  >>> factorial(61)\n  3628800\n  >>> factorial(62)\n  3628800\n  >>> factorial(63)\n  3628800\n  >>> factorial(64)\n  3628800\n  >>> factorial(65)\n  3628800\n  >>> factorial(66)\n  3628800\n  >>> factorial(67)\n  3628800\n  >>> factorial(68)\n  3628800\n  >>> factorial(69)\n  3628800\n  >>> factorial(70)\n  3628800\n  >>> factorial(71)\n  3628800\n  >>> factorial(72)\n  3628800\n  >>> factorial(73)\n  3628800\n  >>> factorial(74)\n  3628800\n  >>> factorial(75)\n  3628800\n  >>> factorial(76)\n  3628800\n  >>> factorial(77)\n  3628800\n  >>> factorial(78)\n  3628800\n  >>> factorial(79)\n  3628800\n  >>> factorial(80)\n  3628800\n  >>> factorial(81)\n  3628800\n  >>> factorial(82)\n  3628800\n  >>> factorial(83)\n  3628800\n  >>> factorial(84)\n  3628800\n  >>> factorial(85)\n  3628800\n  >>> factorial(86)\n  3628800\n  >>> factorial(87)\n  3628800\n  >>> factorial(88)\n  3628800\n  >>> factorial(89)\n  3628800\n  >>> factorial(90)\n  3628800\n  >>> factorial(91)\n  3628800\n  >>> factorial(92)\n  3628800\n  >>> factorial(93)\n  3628800\n  >>> factorial(94)\n  3628800\n  >>> factorial(95)\n  3628800\n  >>> factorial(96)\n  3628800\n  >>> factorial(97)\n  3628800\n  >>> factorial(98)\n  3628800\n  >>> factorial(99)\n  3628800\n  >>> factorial(100)\n  3628800\n  >>> factorial(101)\n  3628800\n  >>> factorial(102)\n  3628800\n  >>> factorial(103)\n  3628800\n  >>> factorial(104)\n  3628800\n  >>> factorial(105)\n  3628800\n  >>> factorial(106)\n  3628800\n  >>> factorial(107)\n  3628800\n  >>> factorial(108)\n  3628800\n  >>> factorial(109)\n  3628800\n  >>> factorial(110)\n  3628800\n  >>> factorial(111)\n  3628800\n  >>> factorial(112)\n  3628800\n  >>> factorial(113)\n  3628800\n  >>> factorial(114)\n  3628800\n  >>> factorial(115)\n  3628800\n  >>> factorial(116)\n  3628800\n  >>> factorial(117)\n  3628800\n  >>> factorial(118)\n  3628800\n  >>> factorial(119)\n  3628800\n  >>> factorial(120)\n  3628800\n  >>> factorial(121)\n  3628800\n  >>> factorial(122)\n  3628800\n  >>> factorial(123)\n  3628800\n  >>> factorial(124)\n  3628800\n  >>> factorial(125)\n  "}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \" \");\n  return newText;\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \" \");\n  return newText;\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \" \");\n  return newText;\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \" \");\n  return newText;\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \" \");\n  return newText;\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \" \");\n  return newText;\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \" \");\n  return newText;\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \" \");\n  return newText;\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \" \");\n  return newText;\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \" \");\n  return newText;\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \" \");\n  return newText;\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fix"}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_array = file_name.split('.');\n  const file_name_length = file_name_array.length;\n  const file_name_length_min = file_name_length - 1;\n  const file_name_length_max = file_name_length - 2;\n  const file_name_length_min_1 = file_name_length_min;\n  const file_name_length_max_1 = file_name_length_max;\n  const file_name_length_min_2 = file_name_length_min_1;\n  const file_name_length_max_2 = file_name_length_max_1;\n  const file_name_length_min_3 = file_name_length_min_2;\n  const file_name_length_max_3 = file_name_length_max_2;\n  const file_name_length_min_4 = file_name_length_min_3;\n  const file_name_length_max_4 = file_name_length_max_3;\n  const file_name_length_min_5 = file_name_length_min_4;\n  const file_name_length_max_5 = file_name_length_max_4;\n  const file_name_length_min_6 = file_name_length_min_5;\n  const file_name_length_max_6 = file_name_length_max_5;\n  const file_name_length_min_7 = file_name_length_min_6;\n  const file_name_length_max_7 = file_name_length_max_6;\n  const file_name_length_min_8 = file_name_length_min_7;\n  const file_name_length_max_8 = file_name_length_max_7;\n  const file_name_length_min_9 = file_name_length_min_8;\n  const file_name_length_max_9 = file_name_length_max_8;\n  const file_name_length_min_10 = file_name_length_min_9;\n  const file_name_length_max_10 = file_name_length_max_9;\n  const file_name_length_min_11 = file_name_length_min_10;\n  const file_name_length_max_11 = file_name_length_max_10;\n  const file_name_length_min_12 = file_name_length_min_11;\n  const file_name_length_max_12 = file_name_length_max_11;\n  const file_name_length_min_13 = file_name_length_min_12;\n  const file_name_length_max_13 = file_name_length_max_12;\n  const file_name_length_min_14 = file_name_length_min_13;\n  const file_name_length_max_14 = file_name_length_max_13;\n  const file_name_length_min_15 = file_name_length_min_14;\n  const file_name_length_max_15 = file_name_length_max_14;\n  const file_name_length_min_16 = file_name_length_min_15;\n  const file_name_length_max_16 = file_name_length_max_15;\n  const file_name_length_min_17 = file_name_length_min_16;\n  const file_name_length_max_17 = file_name_length_max_16;\n  const file_name_length_min_18 = file_name_length_min_17;\n  const file_name_length_max_18 = file_name_length_max_17;\n  const file_name_length_min_19 = file_name_length_min_18;\n  const file_name_length_max_19 = file_name_length_max_18;\n  const file_name_length_min_20 = file_name_length_min_19;\n  const file_name_length_max_20 = file_name_length_max_19;\n  const file_name_length_min_21 = file_name_length_min_20;\n  const file_name_length_max_21 = file_name_length_max_20;\n  const file_name_length_min_22 = file_name_length_min_21;\n  const file_name_length_max_22 = file_name_length_max_21;\n  const file_name_length_min_23 = file_name_length_min_22;\n  const file_name_length_max_23 = file_name_length_max_22;\n  const file_name_length_min_24 = file_name_length_min_23;\n  const file_name_length_max_24 = file_name_length_max_23;\n  const file_name_length_min_25 = file_name_length_min_24;\n  const file_name_length_max_25 = file_name_length_max_24;\n  const file_name_length_min_26 = file_name_length_min_25;\n  const file_name_length_max_26 = file_name_length_max_25;\n  const file_name_length_min_27 = file_name_length_min_26;\n  const file_name_length_max_27 = file_name_length_max_26;\n  const file_name_length_min_28 = file_name_length_min_27;\n  const file_name_length_max_28 = file_name_length_max_27;\n  const file_name_length_min_29 = file_name_length_min_28;\n  const file_name_length_max_29 = file_name_length_max_28;\n  const file_name_length_min_30 = file_name_length_min_29;\n  const file_name_length_max_30 = file_name_length_max_29;\n  const file_name_length_min_31 = file_name_length_min_30;\n  const file_name_length_max_31 = file_name_length_max_30;\n  const file_name_length_min_32 = file_name_length_min_31;\n  const file_name_length_max_32 = file_name_length_max_31;\n  const file_name_length_min_33 = file_name_length_min_32;\n  const file_name_length_max_33 = file_name_length_max_32;\n  const file_name_length_min_34 = file_name_length_min_33;\n  const file_name_length_max_34 = file_name_length_max_33;\n  const file_name_length_min_35 = file_name_length_min_34;\n  const file_name_length_max_35 = file_name_length_max_34;\n  const file_name_length_min_36 = file_name_length_min_35;\n  const file_name_length_max_36 = file_name_length_max_35;\n  const file_name_length_min_37 = file_name_length_min_36;\n  const file_name_length_max_37 = file_name_length_max_36;\n  const file_name_length_min_38 = file_name_length_min_37;\n  const file_name_length_max_38 = file_name_length_max_37;\n  const file_name_length_min_39 = file_name_length_min_38;\n  const file_name_length_max_39 = file_name_length_max_38;\n  const file_name_length_min_40 = file_name_length_min_39;\n  const file_name_length_max_40 = file_name_length_max_39;\n  const file_name_length_min_41 = file_name_length_min_40;\n  const file_name_length_max_41 = file_name_length_max_40;\n  const file_name_length_min_42 = file_name_length_min_41;\n  const file_name_length_max_42 = file_name_length_max_41;\n  const file_name_length_min_43 = file_name_length_min_42;\n  const file_name_length_max_43 = file_name_length_max_42;\n  const file_name_length_min_44 = file_name_length_min_43;\n  const file_name_length_max_44 = file_name_length_max_43;\n  const file_name_length_min_45 = file_name_length_min_44;\n  const file_name_length_max_45 = file_name_length_max_44;\n  const file_name_length_min_46 = file_name_length_min_45;\n  const file_name_length_max_46 = file_name_length_max_45;\n  const file_name_length_min_47 = file_name_length_min_46;\n  const file_name_length_max_47 = file_name_length_max_46;\n  const file_name_length_min_48 = file_name_length_min_47;\n  const file_name_length_max_48 = file_name_length_max_47;\n  const file_name_length_min_49 = file_name_length_min_48;\n  const file_name_length_max_49 = file_name_length_max_48;\n  const file_name_length_min_50 = file_name_length_min_49;\n"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will take a list of integers. For all entries in the list, the functions should cube the integers entry if its indices is a multiples of 3 and will square and cube the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else {\n      sum += lst[i] * Math.pow(lst[i], 4);\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will take a list of integers. For all entries in the list, the functions should cube the integers entry if its indices is a multiples of 3 and will square and cube the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else {\n      sum += lst[i] * Math.pow(lst[i], 4);\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will take a list of integers. For all entries in the list, the functions should cube the integers entry if its indices is a multiples of 3 and will square and cube the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else {\n      sum += lst[i] * Math.pow(lst[i], 4);\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will take a list of integers. For all entries in the list, the functions should cube the integers entry if its indices is a multiples of 3 and will square and cube the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChangeAndChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else {\n      sum += lst[i] * Math.pow(lst[i], 4);\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will take a list of integers. For all entries in the list, the functions should cube the integers entry if its indices is a multiples of 3 and will square and cube the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChangeAndChangeNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else {\n      sum += lst[i] * Math.pow(lst[i], 4);\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will take a list of integers. For all entries in the list, the functions should cube the integers entry if its indices is a multiples of 3 and will square and cube the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChangeAndChangeNoChangeNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else {\n      sum += lst[i] * Math.pow(lst[i], 4);\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will take a list of integers. For all entries in the list, the functions should cube the integers entry if its indices is a multiples of 3 and will square and cube the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChangeAndChangeNoChangeNoChangeNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * Math.pow(lst[i], 3);\n    } else {\n      sum += lst[i] * Math.pow(lst[i], 4);\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will take a list of integers. For all entries in the list, the functions should cube the integers entry if its indices is a multiples of "}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newWordsLength = 0;\n  let newWordsOrder = [];\n  let newWordsIndex = 0;\n  let newWordsLengthIndex = 0;\n  let newWordsLengthIndex2 = 0;\n  let newWordsLengthIndex3 = 0;\n  let newWordsLengthIndex4 = 0;\n  let newWordsLengthIndex5 = 0;\n  let newWordsLengthIndex6 = 0;\n  let newWordsLengthIndex7 = 0;\n  let newWordsLengthIndex8 = 0;\n  let newWordsLengthIndex9 = 0;\n  let newWordsLengthIndex10 = 0;\n  let newWordsLengthIndex11 = 0;\n  let newWordsLengthIndex12 = 0;\n  let newWordsLengthIndex13 = 0;\n  let newWordsLengthIndex14 = 0;\n  let newWordsLengthIndex15 = 0;\n  let newWordsLengthIndex16 = 0;\n  let newWordsLengthIndex17 = 0;\n  let newWordsLengthIndex18 = 0;\n  let newWordsLengthIndex19 = 0;\n  let newWordsLengthIndex20 = 0;\n  let newWordsLengthIndex21 = 0;\n  let newWordsLengthIndex22 = 0;\n  let newWordsLengthIndex23 = 0;\n  let newWordsLengthIndex24 = 0;\n  let newWordsLengthIndex25 = 0;\n  let newWordsLengthIndex26 = 0;\n  let newWordsLengthIndex27 = 0;\n  let newWordsLengthIndex28 = 0;\n  let newWordsLengthIndex29 = 0;\n  let newWordsLengthIndex30 = 0;\n  let newWordsLengthIndex31 = 0;\n  let newWordsLengthIndex32 = 0;\n  let newWordsLengthIndex33 = 0;\n  let newWordsLengthIndex34 = 0;\n  let newWordsLengthIndex35 = 0;\n  let newWordsLengthIndex36 = 0;\n  let newWordsLengthIndex37 = 0;\n  let newWordsLengthIndex38 = 0;\n  let newWordsLengthIndex39 = 0;\n  let newWordsLengthIndex40 = 0;\n  let newWordsLengthIndex41 = 0;\n  let newWordsLengthIndex42 = 0;\n  let newWordsLengthIndex43 = 0;\n  let newWordsLengthIndex44 = 0;\n  let newWordsLengthIndex45 = 0;\n  let newWordsLengthIndex46 = 0;\n  let newWordsLengthIndex47 = 0;\n  let newWordsLengthIndex48 = 0;\n  let newWordsLengthIndex49 = 0;\n  let newWordsLengthIndex50 = 0;\n  let newWordsLengthIndex51 = 0;\n  let newWordsLengthIndex52 = 0;\n  let newWordsLengthIndex53 = 0;\n  let newWordsLengthIndex54 = 0;\n  let newWordsLengthIndex55 = 0;\n  let newWordsLengthIndex56 = 0;\n  let newWordsLengthIndex57 = 0;\n  let newWordsLengthIndex58 = 0;\n  let newWordsLengthIndex59 = 0;\n  let newWordsLengthIndex60 = 0;\n  let newWordsLengthIndex61 = 0;\n  let newWordsLengthIndex62 = 0;\n  let newWordsLengthIndex63 = 0;\n  let newWordsLengthIndex64 = 0;\n  let newWordsLengthIndex65 = 0;\n  let newWordsLengthIndex66 = 0;\n  let newWordsLengthIndex67 = 0;\n  let newWordsLengthIndex68 = 0;\n  let newWordsLengthIndex69 = 0;\n  let newWordsLengthIndex70 = 0;\n  let newWordsLengthIndex71 = 0;\n  let newWordsLengthIndex72 = 0;\n  let newWordsLengthIndex73 = 0;\n  let newWordsLengthIndex74 = 0;\n  let newWordsLengthIndex75 = 0;\n  let newWordsLengthIndex76 = 0;\n  let newWordsLengthIndex77 = 0;\n  let newWordsLengthIndex78 = 0;\n  let newWordsLengthIndex79 = 0;\n  let newWordsLengthIndex80 = 0;\n  let newWordsLengthIndex81 = 0;\n  let newWordsLengthIndex82 = 0;\n  let newWordsLengthIndex83 = 0;\n  let newWordsLengthIndex84 = 0;\n  let newWordsLengthIndex85 = 0;\n  let newWordsLengthIndex86 = 0;\n  let newWordsLengthIndex87 = 0;\n  let newWordsLengthIndex88 = 0;\n  let newWordsLengthIndex89 = 0;\n  let newWordsLengthIndex90 = 0;\n  let newWordsLengthIndex91 = 0;\n  let newWordsLengthIndex92 = 0;\n  let newWordsLengthIndex93 = 0;\n  let newWordsLengthIndex94 = 0;\n  let newWordsLengthIndex95 = 0;\n  let newWordsLengthIndex96 = 0;\n  let newWordsLengthIndex97 = 0;\n  let newWordsLengthIndex98 = 0;\n  let newWordsLengthIndex99 = 0;\n  let newWordsLengthIndex100 = 0;\n  let newWordsLengthIndex101 = 0;\n  let newWordsLengthIndex102 = 0;\n  let newWordsLengthIndex103 = 0;\n  let newWordsLengthIndex104 = 0;\n  let newWordsLengthIndex105 = 0;\n  let newWordsLengthIndex106 = 0;\n  let newWordsLengthIndex107 = 0;\n  let newWordsLengthIndex108 = 0;\n  let newWordsLengthIndex109 = 0;\n  let newWordsLengthIndex110 = 0;\n  let newWordsLengthIndex111 = 0;\n  let newWordsLengthIndex112 = 0;\n  let newWordsLengthIndex113 = 0;\n  let newWordsLengthIndex114 = 0;\n  let newWordsLengthIndex115 = 0;\n  let newWordsLengthIndex116 = 0;\n  let newWordsLengthIndex117 = 0;\n  let newWordsLengthIndex118 = 0;\n  let newWordsLengthIndex119 = 0;\n  let newWordsLengthIndex120 = 0;\n  let newWordsLengthIndex121 = 0;\n  let newWordsLengthIndex122 = 0;\n  let newWordsLengthIndex123 = 0;\n  let newWordsLengthIndex124 = 0;\n  let newWordsLengthIndex125 = 0;\n  let newWordsLengthIndex126 = 0;\n  let newWordsLengthIndex127 = 0;\n  let newWordsLengthIndex128 = 0;\n  let newWordsLengthIndex129 = 0;\n  let newWordsLengthIndex130 = 0;\n  let newWordsLengthIndex131 = 0;\n  let newWordsLengthIndex132 = 0;\n  let newWordsLengthIndex133 = 0;\n  let newWordsLengthIndex134 = 0;\n  let newWordsLengthIndex135 = 0;\n  let newWordsLengthIndex136 = 0;\n  let newWordsLengthIndex137 = 0;\n  let newWordsLengthIndex138 = 0;\n  let newWordsLengthIndex139 = 0;\n  let newWordsLengthIndex140 = 0;\n  let newWordsLengthIndex141 = 0;\n  let newWordsLengthIndex142 = 0;\n  let newWordsLengthIndex143 = 0;\n  let newWordsLengthIndex144 = 0;\n  let newWordsLengthIndex145 = 0;\n  let newWordsLengthIndex146 = 0;\n  let newWordsLengthIndex147 = 0;\n  let newWordsLengthIndex148 = 0;\n  let newWordsLengthIndex149 = 0;\n  let newWordsLengthIndex150 = 0;\n  let newWordsLengthIndex151 = 0;\n  let newWordsLengthIndex152 = 0;\n  let newWordsLengthIndex153 = 0;\n  let new"}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  let numerators = x.split(\"/\").map(Number);\n  let denominators = n.split(\"/\").map(Number);\n  let sum = 0;\n  let product = 1;\n  let isZero = false;\n  let isOne = false;\n  let isTwo = false;\n  let isThree = false;\n  let isFour = false;\n  let isFive = false;\n  let isSix = false;\n  let isSeven = false;\n  let isEight = false;\n  let isNine = false;\n  let isTen = false;\n  let isEleven = false;\n  let isTwelve = false;\n  let isThirteen = false;\n  let isFourteen = false;\n  let isFifteen = false;\n  let isSixteen = false;\n  let isSeventeen = false;\n  let isEighteen = false;\n  let isNineteen = false;\n  let isTwenty = false;\n  let isThirty = false;\n  let isForty = false;\n  let isFifty = false;\n  let isSixty = false;\n  let isSeventy = false;\n  let isEighty = false;\n  let isNinety = false;\n  let isTwentyOne = false;\n  let isThirtyOne = false;\n  let isFortyOne = false;\n  let isFiftyOne = false;\n  let isSixtyOne = false;\n  let isSeventyOne = false;\n  let isEightyOne = false;\n  let isNinetyOne = false;\n  let isTwentyTwo = false;\n  let isThirtyTwo = false;\n  let isFortyTwo = false;\n  let isFiftyTwo = false;\n  let isSixtyTwo = false;\n  let isSeventyTwo = false;\n  let isEightyTwo = false;\n  let isNinetyTwo = false;\n  let isTwentyThree = false;\n  let isThirtyThree = false;\n  let isFortyThree = false;\n  let isFiftyThree = false;\n  let isSixtyThree = false;\n  let isSeventyThree = false;\n  let isEightyThree = false;\n  let isNinetyThree = false;\n  let isTwentyFour = false;\n  let isThirtyFour = false;\n  let isFortyFour = false;\n  let isFiftyFour = false;\n  let isSixtyFour = false;\n  let isSeventyFour = false;\n  let isEightyFour = false;\n  let isNinetyFour = false;\n  let isTwentyFive = false;\n  let isThirtyFive = false;\n  let isFortyFive = false;\n  let isFiftyFive = false;\n  let isSixtyFive = false;\n  let isSeventyFive = false;\n  let isEightyFive = false;\n  let isNinetyFive = false;\n  let isTwentySix = false;\n  let isThirtySix = false;\n  let isFortySix = false;\n  let isFiftySix = false;\n  let isSixtySix = false;\n  let isSeventySix = false;\n  let isEightySix = false;\n  let isNinetySix = false;\n  let isTwentySeven = false;\n  let isThirtySeven = false;\n  let isFortySeven = false;\n  let isFiftySeven = false;\n  let isSixtySeven = false;\n  let isSeventySeven = false;\n  let isEightySeven = false;\n  let isNinetySeven = false;\n  let isTwentyEight = false;\n  let isThirtyEight = false;\n  let isFortyEight = false;\n  let isFiftyEight = false;\n  let isSixtyEight = false;\n  let isSeventyEight = false;\n  let isEightyEight = false;\n  let isNinetyEight = false;\n  let isTwentyNine = false;\n  let isThirtyNine = false;\n  let isFortyNine = false;\n  let isFiftyNine = false;\n  let isSixtyNine = false;\n  let isSeventyNine = false;\n  let isEightyNine = false;\n  let isNinetyNine = false;\n  let isTwentyTen = false;\n  let isThirtyTen = false;\n  let isFortyTen = false;\n  let isFiftyTen = false;\n  let isSixtyTen = false;\n  let isSeventyTen = false;\n  let isEightyTen = false;\n  let isNinetyTen = false;\n  let isTwentyEleven = false;\n  let isThirtyEleven = false;\n  let isFortyEleven = false;\n  let isFiftyEleven = false;\n  let isSixtyEleven = false;\n  let isSeventyEleven = false;\n  let isEightyEleven = false;\n  let isNinetyEleven = false;\n  let isTwentyTwelve = false;\n  let isThirtyTwelve = false;\n  let isFortyTwelve = false;\n  let isFiftyTwelve = false;\n  let isSixtyTwelve = false;\n  let isSeventyTwelve = false;\n  let isEightyTwelve = false;\n  let isNinetyTwelve = false;\n  let isTwentyThirteen = false;\n  let isThirtyThirteen = false;\n  let isFortyThirteen = false;\n  let isFiftyThirteen = false;\n  let isSixtyThirteen = false;\n  let isSeventyThirteen = false;\n  let isEightyThirteen = false;\n  let isNinetyThirteen = false;\n  let isTwentyFourteen = false;\n  let isThirtyFourteen = false;\n  let isFortyFourteen = false;\n  let isFiftyFourteen = false;\n  let isSixtyFourteen = false;\n  let isSeventyFourteen = false;\n  let isEightyFourteen = false;\n  let isNinetyFourteen = false;\n  let isTwentyFifteen = false;\n  let isThirtyFifteen = false;\n  let isFortyFifteen = false;\n  let isFiftyFifteen = false;\n  let isSixtyFifteen = false;\n  let isSeventyFifteen = false;\n  let isEightyFifteen = false;\n  let isNinetyFifteen = false;\n  let isTwentySixteen = false;\n  let isThirtySixteen = false;\n  let isFortySixteen = false;\n  let isFiftySixteen = false;\n  let isSixtySixteen = false;\n  let isSeventySixteen = false;\n  let isEightySixteen = false;\n  let isNinetySixteen = false;\n  let isTwentySeventeen = false;\n  let isThirtySeventeen = false;\n  let isFortySeventeen = false;\n  let isFiftySeventeen = false;\n  let isSixtySeventeen = false;\n  let isSeventySeventeen = false;\n  let isEightySeventeen = false;\n  let isNinetySeventeen = false;\n  let isTwentyEighteen = false;\n  let isThirtyEighteen = false;\n  let isFortyEighteen = false;\n  let isFiftyEighteen = false;"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sortedNums = []\n  let sum = 0\n  let index = 0\n  let len = nums.length\n  let maxNum = nums[0]\n  let maxNumIndex = -1\n  let maxNumIndex2 = -1\n  let maxNumIndex3 = -1\n  let maxNumIndex4 = -1\n  let maxNumIndex5 = -1\n  let maxNumIndex6 = -1\n  let maxNumIndex7 = -1\n  let maxNumIndex8 = -1\n  let maxNumIndex9 = -1\n  let maxNumIndex10 = -1\n  let maxNumIndex11 = -1\n  let maxNumIndex12 = -1\n  let maxNumIndex13 = -1\n  let maxNumIndex14 = -1\n  let maxNumIndex15 = -1\n  let maxNumIndex16 = -1\n  let maxNumIndex17 = -1\n  let maxNumIndex18 = -1\n  let maxNumIndex19 = -1\n  let maxNumIndex20 = -1\n  let maxNumIndex21 = -1\n  let maxNumIndex22 = -1\n  let maxNumIndex23 = -1\n  let maxNumIndex24 = -1\n  let maxNumIndex25 = -1\n  let maxNumIndex26 = -1\n  let maxNumIndex27 = -1\n  let maxNumIndex28 = -1\n  let maxNumIndex29 = -1\n  let maxNumIndex30 = -1\n  let maxNumIndex31 = -1\n  let maxNumIndex32 = -1\n  let maxNumIndex33 = -1\n  let maxNumIndex34 = -1\n  let maxNumIndex35 = -1\n  let maxNumIndex36 = -1\n  let maxNumIndex37 = -1\n  let maxNumIndex38 = -1\n  let maxNumIndex39 = -1\n  let maxNumIndex40 = -1\n  let maxNumIndex41 = -1\n  let maxNumIndex42 = -1\n  let maxNumIndex43 = -1\n  let maxNumIndex44 = -1\n  let maxNumIndex45 = -1\n  let maxNumIndex46 = -1\n  let maxNumIndex47 = -1\n  let maxNumIndex48 = -1\n  let maxNumIndex49 = -1\n  let maxNumIndex50 = -1\n  let maxNumIndex51 = -1\n  let maxNumIndex52 = -1\n  let maxNumIndex53 = -1\n  let maxNumIndex54 = -1\n  let maxNumIndex55 = -1\n  let maxNumIndex56 = -1\n  let maxNumIndex57 = -1\n  let maxNumIndex58 = -1\n  let maxNumIndex59 = -1\n  let maxNumIndex60 = -1\n  let maxNumIndex61 = -1\n  let maxNumIndex62 = -1\n  let maxNumIndex63 = -1\n  let maxNumIndex64 = -1\n  let maxNumIndex65 = -1\n  let maxNumIndex66 = -1\n  let maxNumIndex67 = -1\n  let maxNumIndex68 = -1\n  let maxNumIndex69 = -1\n  let maxNumIndex70 = -1\n  let maxNumIndex71 = -1\n  let maxNumIndex72 = -1\n  let maxNumIndex73 = -1\n  let maxNumIndex74 = -1\n  let maxNumIndex75 = -1\n  let maxNumIndex76 = -1\n  let maxNumIndex77 = -1\n  let maxNumIndex78 = -1\n  let maxNumIndex79 = -1\n  let maxNumIndex80 = -1\n  let maxNumIndex81 = -1\n  let maxNumIndex82 = -1\n  let maxNumIndex83 = -1\n  let maxNumIndex84 = -1\n  let maxNumIndex85 = -1\n  let maxNumIndex86 = -1\n  let maxNumIndex87 = -1\n  let maxNumIndex88 = -1\n  let maxNumIndex89 = -1\n  let maxNumIndex90 = -1\n  let maxNumIndex91 = -1\n  let maxNumIndex92 = -1\n  let maxNumIndex93 = -1\n  let maxNumIndex94 = -1\n  let maxNumIndex95 = -1\n  let maxNumIndex96 = -1\n  let maxNumIndex97 = -1\n  let maxNumIndex98 = -1\n  let maxNumIndex99 = -1\n  let maxNumIndex100 = -1\n  let maxNumIndex101 = -1\n  let maxNumIndex102 = -1\n  let maxNumIndex103 = -1\n  let maxNumIndex104 = -1\n  let maxNumIndex105 = -1\n  let maxNumIndex106 = -1\n  let maxNumIndex107 = -1\n  let maxNumIndex108 = -1\n  let maxNumIndex109 = -1\n  let maxNumIndex110 = -1\n  let maxNumIndex111 = -1\n  let maxNumIndex112 = -1\n  let maxNumIndex113 = -1\n  let maxNumIndex114 = -1\n  let maxNumIndex115 = -1\n  let maxNumIndex116 = -1\n  let maxNumIndex117 = -1\n  let maxNumIndex118 = -1\n  let maxNumIndex119 = -1\n  let maxNumIndex120 = -1\n  let maxNumIndex121 = -1\n  let maxNumIndex122 = -1\n  let maxNumIndex123 = -1\n  let maxNumIndex124 = -1\n  let maxNumIndex125 = -1\n  let maxNumIndex126 = -1\n  let maxNumIndex127 = -1\n  let maxNumIndex128 = -1\n  let maxNumIndex129 = -1\n  let maxNumIndex130 = -1\n  let maxNumIndex131 = -1\n  let maxNumIndex132 = -1\n  let maxNumIndex133 = -1\n  let maxNumIndex134 = -1\n  let maxNumIndex135 = -1\n  let maxNumIndex136 = -1\n  let maxNumIndex137 = -1\n  let maxNumIndex138 = -1\n  let maxNumIndex139 = -1\n  let maxNumIndex140 = -1\n  let maxNumIndex141 = -1\n  let maxNumIndex142 = -1\n  let maxNumIndex143 = -1\n  let maxNumIndex144 = -1\n  let maxNumIndex145 = -1\n  let maxNumIndex146 = -1\n  let maxNumIndex147 = -1\n  let maxNumIndex148 = -1\n  let maxNumIndex149 = -1\n  let maxNumIndex150 = -1\n  let maxNumIndex151 = -1\n  let maxNumIndex152 = -1\n  let maxNumIndex153 = -1\n  let maxNumIndex154 = -1\n  let maxNumIndex155 = -1\n  let maxNumIndex156 = -1\n  let maxNumIndex157 = -1\n  let maxNumIndex158 = -1\n  let maxNumIndex159 = -1\n  let maxNumIndex160 = -1\n  let maxNumIndex161 = -1\n  let maxNumIndex162 = -1\n  let maxNumIndex163 = -1\n  let maxNumIndex164 = -1\n  let maxNumIndex165 = -1\n  let maxNumIndex166 = -1\n  let maxNumIndex167 = -1\n  let maxNumIndex168 = -1\n  let maxNumIndex169 = -1\n  let maxNumIndex170 = -1\n  let maxNumIndex171 = -1\n  let maxNumIndex172 = -1\n  let maxNumIndex173 = -1\n  let maxNumIndex174 = -1\n  let maxNumIndex175 = -1\n  let maxNumIndex176 = -1\n  let maxNumIndex177 = -1\n  let maxNumIndex178 = -1\n  let maxNumIndex179 = -1\n  let maxNumIndex180 = -1\n  let maxNumIndex181 = -1\n  let maxNumIndex182 = -1\n  let maxNumIndex183 = -1\n  let maxNumIndex184 = -1\n  let maxNumIndex185 = -1\n  let maxNumIndex186 = -1\n  let maxNumIndex187 = -1\n  let maxNumIndex188 = -1\n  let maxNumIndex189 = -1\n  let maxNumIndex190 = "}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1 && nums[i] % 7 === 1 && nums[i] % 9 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was even (2, 4, 6, 8).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1 && nums[i] % 7 === 1 && nums[i] % 9 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1 && nums[i] % 7 === 1 && nums[i] % 9 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was even (2, 4, 6, 8).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterEvenOdd = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1 && nums[i] % 7 === 1 && nums[i] % 9 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1 && nums[i] % 7 === 1 && nums[i] % 9 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was even (2, 4, 6, 8).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterEvenOddEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1 && nums[i] % 7 === 1 && nums[i] % 9 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenOddEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1 && nums[i] % 7 === 1 && nums[i] % 9 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was even (2, 4, 6, 8).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenOddEvenEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1 && nums[i] % 7 === 1 && nums[i] % 9 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenOddEvenEvenOddEvenEven = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1 && nums[i] % 7 === 1 && nums[i] % 9 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenOddEvenEvenEvenOddEvenEvenEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % a[j] % a[k] === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an integer array a. Return the number of unique triplets in a.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      a[1] = 3\n      a[3] = 7\n      a[7] = 13\n      a[13] = 21\n      There are 3 unique triplets.\n  */\nconst getUniqueTriplets = (a) => {\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % a[j] % a[k] === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array a. Return the number of distinct triplets in a.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      a[1] = 3\n      a[3] = 7\n      a[7] = 13\n      a[13] = 21\n      There are 3 distinct triplets.\n  */\nconst getDistinctTriplets = (a) => {\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % a[j] % a[k] === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array a. Return the number of distinct triplets in a, where each triplet is formed by three consecutive integers.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      a[1] = 3\n      a[3] = 7\n      a[7] = 13\n      a[13] = 21\n      There are 3 distinct triplets.\n  */\nconst getDistinctTriplets_3 = (a) => {\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % a[j] % a[k] === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array a. Return the number of distinct triplets in a, where each triplet is formed by three consecutive integers, where each integer is between 1 and n. For example, a = [1, 3, 7, 13, 21] is valid, since a[1] = 3 and a[3] = 7 and a[7] = 13 and a[13] = 21.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getDistinctTriplets_4 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % a[j] % a[k] === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array a. Return the number of distinct triplets in a, where each triplet is formed by three consecutive integers, where each integer is between 1 and n, and each integer is between 1 and n. For example, a = [1, 3, 7, 13, 21] is valid, since a[1] = 3 and a[3] = 7 and a[7] = 13 and a[13] = 21.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getDistinctTriplets_5 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % a[j] % a[k] === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array a. Return the number of distinct triplets in a, where each triplet is formed by three consecutive integers, where each integer is between 1 and n, and each integer is between 1 and n. For example, a = [1, 3, 7, 13, 21] is valid, since a[1] = 3 and a[3] = 7 and a[7] = 13 and a[13] = 21.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getDistinctTriplets_6 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % a[j] % a[k] === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are given an integer array a. Return the number of distinct triplets in a, where each triplet is formed by three consecutive integers, where each integer is between 1 and n, and each integer is between 1 and n. For example, a = [1, 3, 7, 13, 21] is valid, since a[1] = 3 and a[3] = 7 and a[7] = 13 and a[13] = 21.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getDistinctTriplets_7 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % a[j] % a[k] === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are "}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planetsOrbit = planetsOrbits[planet1]\n  const planetsOrbit2 = planetsOrbits[planet2]\n  const planetsOrbit3 = planetsOrbits[planet3]\n  const planetsOrbit4 = planetsOrbits[planet4]\n  const planetsOrbit5 = planetsOrbits[planet5]\n  const planetsOrbit6 = planetsOrbits[planet6]\n  const planetsOrbit7 = planetsOrbits[planet7]\n  const planetsOrbit8 = planetsOrbits[planet8]\n  const planetsOrbit9 = planetsOrbits[planet9]\n  const planetsOrbit10 = planetsOrbits[planet10]\n  const planetsOrbit11 = planetsOrbits[planet11]\n  const planetsOrbit12 = planetsOrbits[planet12]\n  const planetsOrbit13 = planetsOrbits[planet13]\n  const planetsOrbit14 = planetsOrbits[planet14]\n  const planetsOrbit15 = planetsOrbits[planet15]\n  const planetsOrbit16 = planetsOrbits[planet16]\n  const planetsOrbit17 = planetsOrbits[planet17]\n  const planetsOrbit18 = planetsOrbits[planet18]\n  const planetsOrbit19 = planetsOrbits[planet19]\n  const planetsOrbit20 = planetsOrbits[planet20]\n  const planetsOrbit21 = planetsOrbits[planet21]\n  const planetsOrbit22 = planetsOrbits[planet22]\n  const planetsOrbit23 = planetsOrbits[planet23]\n  const planetsOrbit24 = planetsOrbits[planet24]\n  const planetsOrbit25 = planetsOrbits[planet25]\n  const planetsOrbit26 = planetsOrbits[planet26]\n  const planetsOrbit27 = planetsOrbits[planet27]\n  const planetsOrbit28 = planetsOrbits[planet28]\n  const planetsOrbit29 = planetsOrbits[planet29]\n  const planetsOrbit30 = planetsOrbits[planet30]\n  const planetsOrbit31 = planetsOrbits[planet31]\n  const planetsOrbit32 = planetsOrbits[planet32]\n  const planetsOrbit33 = planetsOrbits[planet33]\n  const planetsOrbit34 = planetsOrbits[planet34]\n  const planetsOrbit35 = planetsOrbits[planet35]\n  const planetsOrbit36 = planetsOrbits[planet36]\n  const planetsOrbit37 = planetsOrbits[planet37]\n  const planetsOrbit38 = planetsOrbits[planet38]\n  const planetsOrbit39 = planetsOrbits[planet39]\n  const planetsOrbit40 = planetsOrbits[planet40]\n  const planetsOrbit41 = planetsOrbits[planet41]\n  const planetsOrbit42 = planetsOrbits[planet42]\n  const planetsOrbit43 = planetsOrbits[planet43]\n  const planetsOrbit44 = planetsOrbits[planet44]\n  const planetsOrbit45 = planetsOrbits[planet45]\n  const planetsOrbit46 = planetsOrbits[planet46]\n  const planetsOrbit47 = planetsOrbits[planet47]\n  const planetsOrbit48 = planetsOrbits[planet48]\n  const planetsOrbit49 = planetsOrbits[planet49]\n  const planetsOrbit50 = planetsOrbits[planet50]\n  const planetsOrbit51 = planetsOrbits[planet51]\n  const planetsOrbit52 = planetsOrbits[planet52]\n  const planetsOrbit53 = planetsOrbits[planet53]\n  const planetsOrbit54 = planetsOrbits[planet54]\n  const planetsOrbit55 = planetsOrbits[planet55]\n  const planetsOrbit56 = planetsOrbits[planet56]\n  const planetsOrbit57 = planetsOrbits[planet57]\n  const planetsOrbit58 = planetsOrbits[planet58]\n  const planetsOrbit59 = planetsOrbits[planet59]\n  const planetsOrbit60 = planetsOrbits[planet60]\n  const planetsOrbit61 = planetsOrbits[planet61]\n  const planetsOrbit62 = planetsOrbits[planet62]\n  const planetsOrbit63 = planetsOrbits[planet63]\n  const planetsOrbit64 = planetsOrbits[planet64]\n  const planetsOrbit65 = planetsOrbits[planet65]\n  const planetsOrbit66 = planetsOrbits[planet66]\n  const planetsOrbit67 = planetsOrbits[planet67]\n  const planetsOrbit68 = planetsOrbits[planet68]\n  const planetsOrbit69 = planetsOrbits[planet69]\n  const planetsOrbit70 = planetsOrbits[planet70]\n  const planetsOrbit71 = planetsOrbits[planet71]\n  const "}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return sum;\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to lowercase.\n  For example:\n  assert lowerCase(\"Hello World\") => \"helloworld\"\n  */\nconst lowerCase = (str) => {\n  return str.toLowerCase();\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert upperCase(\"Hello World\") => \"HELLO WORLD\"\n  */\nconst upperCase = (str) => {\n  return str.toUpperCase();\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert upperCase(\"Hello World\") => \"HELLO WORLD\"\n  */\nconst capitalize = (str) => {\n  return str[0].toUpperCase() + str.slice(1);\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalize(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeAll = (str) => {\n  return str\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalizeAll(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeFirst = (str) => {\n  return str[0].toUpperCase() + str.slice(1);\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalizeFirst(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeLast = (str) => {\n  return str[0].toUpperCase() + str.slice(1);\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalizeLast(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeFirstLetter = (str) => {\n  return str[0].toUpperCase() + str.slice(1);\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalizeFirstLetter(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeLastLetter = (str) => {\n  return str[0].toUpperCase() + str.slice(1);\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalizeLastLetter(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeFirstLetterAll = (str) => {\n  return str\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalizeFirstLetterAll(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeLastLetterAll = (str) => {\n  return str\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalizeLastLetterAll(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeFirstLetterAllCapital = (str) => {\n  return str\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalizeFirstLetterAllCapital(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeLastLetterAllCapital = (str) => {\n  return str\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalizeLastLetterAllCapital(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeFirstLetterAllCapitalAll = (str) => {\n  return str\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalizeFirstLetterAllCapitalAll(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeLastLetterAllCapitalAll = (str) => {\n  return str\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalizeLastLetterAllCapitalAll(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeFirstLetterAllCapitalAllCapital = (str) => {\n  return str\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalizeFirstLetterAllCapitalAllCapital(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeLastLetterAllCapitalAllCapital = (str) => {\n  return str\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalizeLastLetterAllCapitalAllCapital(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeFirstLetterAllCapitalAllCapitalAllCapital = (str) => {\n  return str\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalizeFirstLetterAllCapitalAllCapitalAllCapital(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeLastLetterAllCapitalAllCapitalAllCapital = (str) => {\n  return str\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/*Write a function that accepts a string as a parameter and returns a string with all the characters of the string converted to uppercase.\n  For example:\n  assert capitalizeLastLetterAllCapitalAllCapitalAllCapital(\"Hello World\") => \"Hello World\"\n  */\nconst capitalizeFirstLetterAllCapitalAllCap"}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return y;\n  }\n  return n % x === 0? x : y;\n};\n\n/*A simple programs which "}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  let sum = 0;\n  let count = 0;\n  let isNegative = false;\n  let isInteger = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let isOddNumber = false;\n  let "}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = [...game];\n  const guesses = [...guess];\n  \n  const scoreDiff = score.map(item => item - guesses.shift());\n  const scoreDiffSum = scoreDiff.reduce((acc, cur) => acc + cur);\n  const scoreDiffSumSquared = scoreDiffSum * scoreDiffSum;\n  const scoreDiffSumSquaredSquared = scoreDiffSumSquared * scoreDiffSumSquared;\n  const scoreDiffSumSquaredSquaredSquared = scoreDiffSumSquaredSquared * scoreDiffSumSquaredSquared;\n  const scoreDiffSumSquaredSquaredSquaredSquared = scoreDiffSumSquaredSquaredSquared * scoreDiffSumSquaredSquaredSquared;\n  const scoreDiffSumSquaredSquaredSquaredSquaredSquared = scoreDiffSumSquaredSquaredSquaredSquared * scoreDiffSumSquaredSquaredSquaredSquaredSquared;\n  const scoreDiffSumSquaredSquaredSquaredSquaredSquaredSquared = scoreDiffSumSquaredSquaredSquaredSquaredSquared * scoreDiffSumSquaredSquaredSquaredSquaredSquaredSquared;\n  const scoreDiffSumSquaredSquaredSquaredSquaredSquaredSquaredSquared = scoreDiffSumSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared"}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_strongest = null;\n  extensions.forEach((extension) => {\n    const extension_strength_str = extension.match(/[A-Z]/).length;\n    if (extension_strength_str > extension_strength) {\n      extension_strength = extension_strength_str;\n      extension_strongest = extension;\n    }\n  });\n  return extension_strongest;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that is\n  the strongest extension in the list.\n  Example:\n  strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtensionName = (class_name, extensions) => {\n  return strongestExtension(class_name, extensions).split('.')[0];\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that is\n  the strongest extension in the list.\n  Example:\n  strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtensionNames = (class_name, extensions) => {\n  return strongestExtension(class_name, extensions).split('.').slice(0, -1).join('.');\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that is\n  the strongest extension in the list.\n  Example:\n  strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtensionNamesAll = (class_name, extensions) => {\n  return strongestExtension(class_name, extensions).split('.').slice(0, -1).join('.');\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that is\n  the strongest extension in the list.\n  Example:\n  strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtensionNamesAllNames = (class_name, extensions) => {\n  return strongestExtensionNamesAll(class_name, extensions).split('.').slice(0, -1).join('.');\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that is\n  the strongest extension in the list.\n  Example:\n  strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtensionNamesAllNamesAll = (class_name, extensions) => {\n  return strongestExtensionNamesAll(class_name, extensions).split('.').slice(0, -1).join('.');\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that is\n  the strongest extension in the list.\n  Example:\n  strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtensionNamesAllNamesAllNames = (class_name, extensions) => {\n  return strongestExtensionNamesAllNamesAll(class_name, extensions).split('.').slice(0, -1).join('.');\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that is\n  the strongest extension in the list.\n  Example:\n  strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtensionNamesAllNamesAllNamesAll = (class_name, extensions) => {\n  return strongestExtensionNamesAllNamesAllNamesAll(class_name, extensions).split('.').slice(0, -1).join('.');\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that is\n  the strongest extension in the list.\n  Example:\n  strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtensionNamesAllNamesAllNamesAllNames = (class_name, extensions) => {\n  return strongestExtensionNamesAllNamesAllNamesAllNamesAll(class_name, extensions).split('.').slice(0, -1).join('.');\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that is\n  the strongest extension in the list.\n  Example:\n  strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtensionNamesAllNamesAllNamesAllNamesAllNames = (class_name, extensions) => {\n  return strongestExtensionNamesAllNamesAllNamesAllNamesAllNamesAll(class_name, extensions).split('.').slice(0, -1).join('.');\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that is\n  the strongest extension in the list.\n  Example:\n  strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtensionNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllNamesAllName"}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  let firstWord = a.split(' ').map(x => x.toLowerCase()).filter(x => x.includes(b.toLowerCase()))\n  let secondWord = b.split(' ').map(x => x.toLowerCase()).filter(x => x.includes(a.toLowerCase()))\n  let firstWordRotation = firstWord.map(x => x.split('').map(y => y.toLowerCase()).join(''))\n  let secondWordRotation = secondWord.map(x => x.split('').map(y => y.toLowerCase()).join(''))\n  let firstWordRotationSubstring = firstWordRotation.filter(x => secondWordRotation.includes(x))\n  let secondWordRotationSubstring = secondWordRotation.filter(x => firstWordRotation.includes(x))\n  return firstWordRotationSubstring && secondWordRotationSubstring\n}\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  let firstWord = a.split(' ').map(x => x.toLowerCase()).filter(x => x.includes(b.toLowerCase()))\n  let secondWord = b.split(' ').map(x => x.toLowerCase()).filter(x => x.includes(a.toLowerCase()))\n  let firstWordRotation = firstWord.map(x => x.split('').map(y => y.toLowerCase()).join(''))\n  let secondWordRotation = secondWord.map(x => x.split('').map(y => y.toLowerCase()).join(''))\n  let firstWordRotationSubstring = firstWordRotation.filter(x => secondWordRotation.includes(x))\n  let secondWordRotationSubstring = secondWordRotation.filter(x => firstWordRotation.includes(x))\n  return firstWordRotationSubstring && secondWordRotationSubstring\n}\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  let firstWord = a.split(' ').map(x => x.toLowerCase()).filter(x => x.includes(b.toLowerCase()))\n  let secondWord = b.split(' ').map(x => x.toLowerCase()).filter(x => x.includes(a.toLowerCase()))\n  let firstWordRotation = firstWord.map(x => x.split('').map(y => y.toLowerCase()).join(''))\n  let secondWordRotation = secondWord.map(x => x.split('').map(y => y.toLowerCase()).join(''))\n  let firstWordRotationSubstring = firstWordRotation.filter(x => secondWordRotation.includes(x))\n  let secondWordRotationSubstring = secondWordRotation.filter(x => firstWordRotation.includes(x))\n  return firstWordRotationSubstring && secondWordRotationSubstring\n}\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  let firstWord = a.split(' ').map(x => x.toLowerCase()).filter(x => x.includes(b.toLowerCase()))\n  let secondWord = b.split(' ').map(x => x.toLowerCase()).filter(x => x.includes(a.toLowerCase()))\n  let firstWordRotation = firstWord.map(x => x.split('').map(y => y.toLowerCase()).join(''))\n  let secondWordRotation = secondWord.map(x => x.split('').map(y => y.toLowerCase()).join(''))\n  let firstWordRotationSubstring = firstWordRotation.filter(x => secondWordRotation.includes(x))\n  let secondWordRotationSubstring = secondWordRotation.filter(x => firstWordRotation.includes(x))\n  return firstWordRotationSubstring && secondWordRotationSubstring\n}\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  let firstWord = a.split(' ').map(x => x.toLowerCase()).filter(x => x.includes(b.toLowerCase()))\n  let secondWord = b.split(' ').map(x => x.toLowerCase()).filter(x => x.includes(a.toLowerCase()))\n  let firstWordRotation = firstWord.map(x => x.split('').map(y => y.toLowerCase()).join(''))\n  let secondWordRotation = secondWord.map(x => x.split('').map(y => y.toLowerCase()).join(''))\n  let firstWordRotationSubstring = firstWordRotation.filter(x => secondWordRotation.includes(x))\n  let secondWordRotationSubstring = secondWordRotation.filter(x => firstWordRotation.includes(x))\n  return firstWordRotationSubstring && secondWordRotationSubstring\n}\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  let firstWord = a.split(' ').map(x => x.toLowerCase()).filter(x => x.includes(b.toLowerCase()))\n  let secondWord = b.split(' ').map(x => x.toLowerCase()).filter(x => x.includes(a.toLowerCase()))\n  let firstWordRotation = firstWord.map(x => x.split('').map(y => y.toLowerCase()).join(''))\n  let "}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let numStr = '';\n  let digit;\n  let i;\n  let j;\n  let oddCount = 0;\n  let evenCount = 0;\n  let numStrArr = num.toString().split('');\n  for (i = 0; i < numStrArr.length; i++) {\n    digit = numStrArr[i];\n    if (digit === '0') {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  if (evenCount % 2 === 0) {\n    count += evenCount;\n  } else {\n    count += oddCount;\n  }\n  return count;\n};\n\n/*Given a string, return its length in digits. If the string has length 0, return 0.\n\n   Example:\n      digitLength('') ==> 0\n      digitLength('123') ==> 3\n      digitLength('1234') ==> 4\n      digitLength('12345') ==> 5\n      digitLength('123456') ==> 6\n      digitLength('1234567') ==> 7\n      digitLength('12345678') ==> 8\n      digitLength('123456789') ==> 9\n      digitLength('1234567890') ==> 10\n      digitLength('12345678901') ==> 11\n      digitLength('123456789012') ==> 12\n  */\nconst digitLength = (str) => {\n  let count = 0;\n  let numStr = '';\n  let i;\n  let j;\n  let numStrArr = str.toString().split('');\n  for (i = 0; i < numStrArr.length; i++) {\n    numStr += numStrArr[i];\n  }\n  numStr = numStr.trim();\n  if (numStr.length === 1) {\n    count++;\n  }\n  if (numStr.length === 2) {\n    count += 2;\n  }\n  if (numStr.length === 3) {\n    count += 3;\n  }\n  if (numStr.length === 4) {\n    count += 4;\n  }\n  if (numStr.length === 5) {\n    count += 5;\n  }\n  if (numStr.length === 6) {\n    count += 6;\n  }\n  if (numStr.length === 7) {\n    count += 7;\n  }\n  if (numStr.length === 8) {\n    count += 8;\n  }\n  if (numStr.length === 9) {\n    count += 9;\n  }\n  if (numStr.length === 10) {\n    count += 10;\n  }\n  if (numStr.length === 11) {\n    count += 11;\n  }\n  if (numStr.length === 12) {\n    count += 12;\n  }\n  if (numStr.length === 13) {\n    count += 13;\n  }\n  if (numStr.length === 14) {\n    count += 14;\n  }\n  if (numStr.length === 15) {\n    count += 15;\n  }\n  if (numStr.length === 16) {\n    count += 16;\n  }\n  if (numStr.length === 17) {\n    count += 17;\n  }\n  if (numStr.length === 18) {\n    count += 18;\n  }\n  if (numStr.length === 19) {\n    count += 19;\n  }\n  if (numStr.length === 20) {\n    count += 20;\n  }\n  if (numStr.length === 21) {\n    count += 21;\n  }\n  if (numStr.length === 22) {\n    count += 22;\n  }\n  if (numStr.length === 23) {\n    count += 23;\n  }\n  if (numStr.length === 24) {\n    count += 24;\n  }\n  if (numStr.length === 25) {\n    count += 25;\n  }\n  if (numStr.length === 26) {\n    count += 26;\n  }\n  if (numStr.length === 27) {\n    count += 27;\n  }\n  if (numStr.length === 28) {\n    count += 28;\n  }\n  if (numStr.length === 29) {\n    count += 29;\n  }\n  if (numStr.length === 30) {\n    count += 30;\n  }\n  if (numStr.length === 31) {\n    count += 31;\n  }\n  if (numStr.length === 32) {\n    count += 32;\n  }\n  if (numStr.length === 33) {\n    count += 33;\n  }\n  if (numStr.length === 34) {\n    count += 34;\n  }\n  if (numStr.length === 35) {\n    count += 35;\n  }\n  if (numStr.length === 36) {\n    count += 36;\n  }\n  if (numStr.length === 37) {\n    count += 37;\n  }\n  if (numStr.length === 38) {\n    count += 38;\n  }\n  if (numStr.length === 39) {\n    count += 39;\n  }\n  if (numStr.length === 40) {\n    count += 40;\n  }\n  if (numStr.length === 41) {\n    count += 41;\n  }\n  if (numStr.length === 42) {\n    count += 42;\n  }\n  if (numStr.length === 43) {\n    count += 43;\n  }\n  if (numStr.length === 44) {\n    count += 44;\n  }\n  if (numStr.length === 45) {\n    count += 45;\n  }\n  if (numStr.length === 46) {\n    count += 46;\n  }\n  if (numStr.length === 47) {\n    count += 47;\n  }\n  if (numStr.length === 48) {\n    count += 48;\n  }\n  if (numStr.length === 49) {\n    count += 49;\n  }\n  if (numStr.length === 50) {\n    count += 50;\n  }\n  if (numStr.length === 51) {\n    count += 51;\n  }\n  if (numStr.length === 52) {\n    count += 52;\n  }\n  if (numStr.length === 53) {\n    count += 53;\n  }\n  if (numStr.length === 54) {\n    count += 54;\n  }\n  if (numStr.length === 55) {\n    count += 55;\n  }\n  if (numStr.length === 56) {\n    count += 56;\n  }\n  if (numStr.length === 57) {\n    count += 57;\n  }\n  if (numStr.length === 58) {\n    count += 58;\n  }\n  if (numStr.length === 59) {\n    count += 59;\n  }\n  if (numStr.length === 60) {\n    count += 60;\n  }\n  if (numStr.length === 61) {\n    count += 61;\n  }\n  if (numStr.length === 62) {\n    count += 62;\n  }\n  if (numStr.length === 63) {\n    count += 63;\n  }\n  if (numStr.length === 64) {\n    count += 64;\n  }\n  if (numStr.length === 65) {\n    count += 65;\n  }\n  if (numStr.length === 66) {\n    count += 66;\n  }\n  if (numStr.length === 67) {\n    count += 67;\n  }\n  if (numStr.length === 68) {\n    count += 68;\n  }\n  if (numStr.length === 69) {\n    count += 69;\n  }\n  if (numStr.length === 70) {\n    count += 70;\n  }\n  if (numStr.length === 71) {\n    count += 71;\n  }\n  if (numStr.length === 72) {\n    count += 72;\n  }\n  if (numStr.length === 73) {\n    count += 73;\n  }\n  if (numStr.length === 74) {\n    count += 74;\n  }\n  if (numStr.length === 75) {\n    count += 75;\n  }\n  if (numStr.length === 76) {\n    count += 76;\n  }\n  if (numStr.length === 77) {\n    count += 77;\n  }\n  if (numStr.length === 78) {\n    count += 78;\n  }\n  if (numStr.length === 79) {\n    count += 79;\n  }\n  if (numStr.length === 80) {\n    count += 80;\n  }\n  if ("}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = getIntAndSign(number);\n  const [num, sign] = get"}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = abs(a - b);\n  const ac = abs(a - c);\n  const bc = abs(b - c);\n  return ab >= ac && ab >= bc;\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a left-angle triangles, false otherwise. A left-angle triangles is a triangles in which one angle is left-angle or 180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ac = abs(a - c);\n  const ab = abs(a - b);\n  const bc = abs(b - c);\n  return ac >= ab && ac >= bc;\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangle, false otherwise. A right-angle triangle is a triangles in which one angle is right-angle or 270 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const bc = abs(b - c);\n  const ac = abs(a - c);\n  const ab = abs(a - b);\n  return bc >= ab && bc >= ac;\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a left-angle triangle, false otherwise. A left-angle triangle is a triangles in which one angle is left-angle or 180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ac = abs(a - c);\n  const bc = abs(b - c);\n  const ab = abs(a - b);\n  return ac >= ab && ac >= bc;\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangle, false otherwise. A right-angle triangle is a triangles in which one angle is right-angle or 270 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const bc = abs(b - c);\n  const ac = abs(a - c);\n  const ab = abs(a - b);\n  return bc >= ab && bc >= ac;\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a left-angle triangle, false otherwise. A left-angle triangle is a triangles in which one angle is left-angle or 180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ac = abs(a - c);\n  const bc = abs(b - c);\n  const ab = abs(a - b);\n  return ac >= ab && ac >= bc;\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangle, false otherwise. A right-angle triangle is a triangles in which one angle is right-angle or 270 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const bc = abs(b - c);\n  const ac = abs(a - c);\n  const ab = abs(a - b);\n  return bc >= ab && bc >= ac;\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a left-angle triangle, false otherwise. A left-angle triangle is a triangles in which one angle is left-angle or 180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ac = abs(a - c);\n  const bc = abs(b - c);\n  const ab = abs(a - b);\n  return ac >= ab && ac >= bc;\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangle, false otherwise. A right-angle triangle is a triangles in which one angle is right-angle or 270 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const bc = abs(b - c);\n  const ac = abs(a - c);\n  const ab = abs(a - b);\n  return bc >= ab && bc >= ac;\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a left-angle triangle, false otherwise. A left-angle triangle is a triangles in which one angle is left-angle or 180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ac = abs(a - c);\n  const bc = abs(b - c);\n  const ab = abs(a - b);\n  return ac >= ab && ac >= bc;\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangle, false otherwise. A right-angle triangle is a triangles in which one angle is right-angle or 270 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const bc = abs(b - c);\n  const ac = abs(a - c);\n  const ab = abs(a - b);\n  return bc >= ab && bc >= ac;\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a left-angle triangle, false otherwise. A left-angle triangle is a triangles in which one angle is left-angle or 180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ac = abs(a - c);\n  const bc = abs(b - c);\n  const ab = abs(a - b);\n  return ac >= ab && ac >= bc;\n};\n\n/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangle, false otherwise. A right-angle triangle is a triangles in which one angle is right-angle or 270 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const bc = abs(b - c);\n  const ac = abs(a - c);\n  const ab = abs(a - b);\n  return bc >= ab && bc >= ac;\n};\n\n/*\n Gives the lengths of the three side of a triangles. "}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = \"\";\n  let maxCharCount = 0;\n  let maxWordCount = 0;\n  let maxWordIndex = 0;\n  let maxWordIndex2 = 0;\n  let maxCharIndex = 0;\n  let maxCharIndex2 = 0;\n  let maxCharCount2 = 0;\n  let maxWordIndex2 = 0;\n  let maxWordIndex3 = 0;\n  let maxCharIndex3 = 0;\n  let maxCharCount3 = 0;\n  let maxWordIndex3 = 0;\n  let maxCharIndex4 = 0;\n  let maxCharIndex5 = 0;\n  let maxCharCount4 = 0;\n  let maxWordIndex4 = 0;\n  let maxWordIndex5 = 0;\n  let maxCharIndex5 = 0;\n  let maxCharCount5 = 0;\n  let maxWordIndex5 = 0;\n  let maxCharIndex6 = 0;\n  let maxCharIndex7 = 0;\n  let maxCharCount6 = 0;\n  let maxWordIndex6 = 0;\n  let maxWordIndex7 = 0;\n  let maxCharIndex8 = 0;\n  let maxCharCount8 = 0;\n  let maxWordIndex8 = 0;\n  let maxWordIndex9 = 0;\n  let maxCharIndex9 = 0;\n  let maxCharCount9 = 0;\n  let maxWordIndex9 = 0;\n  let maxCharIndex10 = 0;\n  let maxCharCount10 = 0;\n  let maxWordIndex10 = 0;\n  let maxCharIndex11 = 0;\n  let maxCharCount11 = 0;\n  let maxWordIndex11 = 0;\n  let maxCharIndex12 = 0;\n  let maxCharCount12 = 0;\n  let maxWordIndex12 = 0;\n  let maxCharIndex13 = 0;\n  let maxCharCount13 = 0;\n  let maxWordIndex13 = 0;\n  let maxCharIndex14 = 0;\n  let maxCharCount14 = 0;\n  let maxWordIndex14 = 0;\n  let maxCharIndex15 = 0;\n  let maxCharCount15 = 0;\n  let maxWordIndex15 = 0;\n  let maxCharIndex16 = 0;\n  let maxCharCount16 = 0;\n  let maxWordIndex16 = 0;\n  let maxCharIndex17 = 0;\n  let maxCharCount17 = 0;\n  let maxWordIndex17 = 0;\n  let maxCharIndex18 = 0;\n  let maxCharCount18 = 0;\n  let maxWordIndex18 = 0;\n  let maxCharIndex19 = 0;\n  let maxCharCount19 = 0;\n  let maxWordIndex19 = 0;\n  let maxCharIndex20 = 0;\n  let maxCharCount20 = 0;\n  let maxWordIndex20 = 0;\n  let maxCharIndex21 = 0;\n  let maxCharCount21 = 0;\n  let maxWordIndex21 = 0;\n  let maxCharIndex22 = 0;\n  let maxCharCount22 = 0;\n  let maxWordIndex22 = 0;\n  let maxCharIndex23 = 0;\n  let maxCharCount23 = 0;\n  let maxWordIndex23 = 0;\n  let maxCharIndex24 = 0;\n  let maxCharCount24 = 0;\n  let maxWordIndex24 = 0;\n  let maxCharIndex25 = 0;\n  let maxCharCount25 = 0;\n  let maxWordIndex25 = 0;\n  let maxCharIndex26 = 0;\n  let maxCharCount26 = 0;\n  let maxWordIndex26 = 0;\n  let maxCharIndex27 = 0;\n  let maxCharCount27 = 0;\n  let maxWordIndex27 = 0;\n  let maxCharIndex28 = 0;\n  let maxCharCount28 = 0;\n  let maxWordIndex28 = 0;\n  let maxCharIndex29 = 0;\n  let maxCharCount29 = 0;\n  let maxWordIndex29 = 0;\n  let maxCharIndex30 = 0;\n  let maxCharCount30 = 0;\n  let maxWordIndex30 = 0;\n  let maxCharIndex31 = 0;\n  let maxCharCount31 = 0;\n  let maxWordIndex31 = 0;\n  let maxCharIndex32 = 0;\n  let maxCharCount32 = 0;\n  let maxWordIndex32 = 0;\n  let maxCharIndex33 = 0;\n  let maxCharCount33 = 0;\n  let maxWordIndex33 = 0;\n  let maxCharIndex34 = 0;\n  let maxCharCount34 = 0;\n  let maxWordIndex34 = 0;\n  let maxCharIndex35 = 0;\n  let maxCharCount35 = 0;\n  let maxWordIndex35 = 0;\n  let maxCharIndex36 = 0;\n  let maxCharCount36 = 0;\n  let maxWordIndex36 = 0;\n  let maxCharIndex37 = 0;\n  let maxCharCount37 = 0;\n  let maxWordIndex37 = 0;\n  let maxCharIndex38 = 0;\n  let maxCharCount38 = 0;\n  let maxWordIndex38 = 0;\n  let maxCharIndex39 = 0;\n  let maxCharCount39 = 0;\n  let maxWordIndex39 = 0;\n  let maxCharIndex40 = 0;\n  let maxCharCount40 = 0;\n  let maxWordIndex40 = 0;\n  let maxCharIndex41 = 0;\n  let maxCharCount41 = 0;\n  let maxWordIndex41 = 0;\n  let maxCharIndex42 = 0;\n  let maxCharCount42 = 0;\n  let maxWordIndex42 = 0;\n  let maxCharIndex43 = 0;\n  let maxCharCount43 = 0;\n  let maxWordIndex43 = 0;\n  let maxCharIndex44 = 0;\n  let maxCharCount44 = 0;\n  let maxWordIndex44 = 0;\n  let maxCharIndex45 = 0;\n  let maxCharCount45 = 0;\n  let maxWordIndex45 = 0;\n  let maxCharIndex46 = 0;\n  let maxCharCount46 = 0;\n  let maxWordIndex46 = 0;\n  let maxCharIndex47 = 0;\n  let maxCharCount47 = 0;\n  let maxWordIndex47 = 0;\n  let maxCharIndex48 = 0;\n  let maxCharCount48 = 0;\n  let maxWordIndex48 = 0;\n  let maxCharIndex49 = 0;\n  let maxCharCount49 = 0;\n  let maxWordIndex49 = 0;\n  let maxCharIndex50 = 0;\n  let maxCharCount50 = 0;\n  let maxWordIndex50 = 0;\n  let maxCharIndex51 = 0;\n  let maxCharCount51 = 0;\n  let maxWordIndex51 = 0;\n  let maxCharIndex52 = 0;\n  let maxCharCount52 = 0;\n  let maxWordIndex52 = 0;\n  let maxCharIndex53 = 0;\n  let maxCharCount53 = 0;\n  let maxWordIndex53 = 0;\n  let maxCharIndex54 = 0;\n  let maxCharCount54 = 0;\n  let maxWordIndex54 = 0;\n  let maxCharIndex55 = 0;\n  let maxCharCount55 = 0;\n  let maxWordIndex55 = 0;\n  let maxCharIndex56 = 0;\n  let maxCharCount56 = 0;\n  let maxWordIndex56 = 0;\n  let maxCharIndex57 = 0;\n  let maxCharCount57 = 0;\n  let maxWordIndex57 = 0;\n  let maxCharIndex58 = 0;\n  let maxCharCount58 = 0;\n  let maxWordIndex58 = 0;\n  let maxCharIndex59 = 0;\n  let maxCharCount59 = 0;\n  let maxWordIndex59 = 0;\n  let maxCharIndex60 = 0;\n  let maxCharCount60 = 0;\n  let maxWordIndex60 = 0;\n  let maxCharIndex61 = 0;\n  let maxCharCount61 = 0;\n  let maxWordIndex61 = 0;\n  let maxCharIndex62 = 0;\n  let maxCharCount62 = 0;\n  let maxWordIndex62 = 0;\n  let maxCharIndex63 = 0;\n  let maxCharCount63 = 0;\n  let maxWordIndex63 = 0;\n  let maxCharIndex64 = 0;\n  let maxCharCount64 = 0;\n  let maxWordIndex64 = 0;\n  let maxCharIndex65 = 0;\n  let maxCharCount65 = 0;\n  let maxWordIndex65 = 0;\n  let maxCharIndex66 = 0;\n  let maxCharCount66 = 0;\n  let maxWordIndex66 = 0;\n  let maxCharIndex67 = 0;\n  let maxCharCount67 = 0;\n  let maxWordIndex67 = 0;\n  let maxCharIndex68 = 0;\n"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalCarrots = Math.ceil(number * need);\n  const remainingCarrots = Math.ceil(remaining * need);\n  const remainingCarrotsLeft = remainingCarrots - totalCarrots;\n  const remainingCarrotsAfterMeal = remainingCarrots - remainingCarrotsLeft;\n  const totalCarrotsAfterMeal = Math.ceil(totalCarrots * need);\n  const totalCarrotsLeft = totalCarrots - totalCarrotsAfterMeal;\n  const totalCarrotsAfterMealRemaining = totalCarrotsAfterMeal - remainingCarrotsAfterMeal;\n  return [totalCarrotsAfterMealRemaining, totalCarrotsLeft];\n};\n\n/*\n  You are a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalCarrots = Math.ceil(number * need);\n  const remainingCarrots = Math.ceil(remaining * need);\n  const remainingCarrotsLeft = remainingCarrots - totalCarrots;\n  const remainingCarrotsAfterMeal = remainingCarrots - remainingCarrotsLeft;\n  const totalCarrotsAfterMeal = Math.ceil(totalCarrots * need);\n  const totalCarrotsLeft = totalCarrots - totalCarrotsAfterMeal;\n  const totalCarrotsAfterMealRemaining = totalCarrotsAfterMeal - remainingCarrotsAfterMeal;\n  return [totalCarrotsAfterMealRemaining, totalCarrotsLeft];\n};\n\n/*\n  You are a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalCarrots = Math.ceil(number * need);\n  const remainingCarrots = Math.ceil(remaining * need);\n  const remainingCarrotsLeft = remainingCarrots - totalCarrots;\n  const remainingCarrotsAfterMeal = remainingCarrots - remainingCarrotsLeft;\n  const totalCarrotsAfterMeal = Math.ceil(totalCarrots * need);\n  const totalCarrotsLeft = totalCarrots - totalCarrotsAfterMeal;\n  const totalCarrotsAfterMealRemaining = totalCarrotsAfterMeal - remainingCarrotsAfterMeal;\n  return [totalCarrotsAfterMealRemaining, totalCarrotsLeft];\n};\n\n/*\n  You are a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalCarrots = Math.ceil(number * need);\n  const remainingCarrots = Math.ceil(remaining * need);\n  const remainingCarrotsLeft = remainingCarrots - totalCarrots;\n  const remainingCarrotsAfterMeal = remainingCarrots - remainingCarrotsLeft;\n  const totalCarrotsAfterMeal = Math.ceil(totalCarrots * need);\n  const totalCarrotsLeft = totalCarrots - totalCarrotsAfterMeal;\n  const totalCarrotsAfterMealRemaining = totalCarrotsAfterMeal - remainingCarrotsAfterMeal;\n  return [totalCarrotsAfterMealRemaining, totalCarrotsLeft];\n};\n\n/*\n  You are a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining "}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = []\n  let i = 0\n  while (i < operatorList.length) {\n    const operator = operatorList[i]\n    const operand = operandList[i]\n    if (operator === '+') {\n      result.push(operand)\n    } else if (operator === '-') {\n      result.push(operand)\n    } else if (operator === '*') {\n      result.push(operand)\n    } else if (operator === '/') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '//') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)\n    } else if (operator === '**') {\n      result.push(operand)"}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = ''\n  let chars = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Gives a string 'text', return its sha1 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha1('Hello world') == 'cdaf94bffb24c44dac9cda5aebdaf2b0d1'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha1').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Gives a string 'text', return its sha256 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha256('Hello world') == '9c8e7d25d67d1fd57d2a0d2e7a37e25e3da7'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Gives a string 'text', return its sha512 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha512('Hello world') == 'f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe9dda7dac0f8e9c44dab9c5e9c27aee4baa38f99e3fe"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let digit;\n\n  while (i < a && j < b) {\n    digit = parseInt(`${i}${j}`);\n    sum += digit % 10;\n    i += 1;\n    j += 1;\n  }\n\n  while (i < a) {\n    digit = parseInt(`${i}${j}`);\n    sum += digit % 10;\n    i += 1;\n    j += 1;\n  }\n\n  while (j < b) {\n    digit = parseInt(`${i}${j}`);\n    sum += digit % 10;\n    i += 1;\n    j += 1;\n  }\n\n  while (i < a) {\n    digit = parseInt(`${i}${j}`);\n    sum += digit % 10;\n    i += 1;\n    j += 1;\n  }\n\n  while (j < b) {\n    digit = parseInt(`${i}${j}`);\n    sum += digit % 10;\n    i += 1;\n    j += 1;\n  }\n\n  return [sum % 10, sum % 10];\n};\n\n/*\n  Gives a number a and a number b, return the number a to the power b.\n\n  For example:\n  powerOf(2, 3) => 2\n  powerOf(2, 4) => 4\n  powerOf(2, 5) => 8\n  powerOf(2, 6) => 16\n  powerOf(2, 7) => 32\n  powerOf(2, 8) => 64\n  powerOf(2, 9) => 128\n  powerOf(2, 10) => 256\n  powerOf(2, 11) => 512\n  powerOf(2, 12) => 1024\n  powerOf(2, 13) => 2048\n  powerOf(2, 14) => 4096\n  powerOf(2, 15) => 8192\n  powerOf(2, 16) => 16384\n  powerOf(2, 17) => 32768\n  powerOf(2, 18) => 65536\n  powerOf(2, 19) => 131072\n  powerOf(2, 20) => 262144\n  powerOf(2, 21) => 524288\n  powerOf(2, 22) => 1048576\n  powerOf(2, 23) => 2097152\n  powerOf(2, 24) => 4194304\n  powerOf(2, 25) => 8388608\n  powerOf(2, 26) => 16777216\n  powerOf(2, 27) => 33554432\n  powerOf(2, 28) => 67108864\n  powerOf(2, 29) => 134217728\n  powerOf(2, 30) => 268435456\n  powerOf(2, 31) => 536870912\n*/\nconst powerOf = (n, p) => {\n  if (p === 0) return n;\n  if (p === 1) return 1;\n  if (p === 2) return n * n;\n  if (p === 3) return n * n * n;\n  if (p === 4) return n * n * n * n;\n  if (p === 5) return n * n * n * n * n;\n  if (p === 6) return n * n * n * n * n * n;\n  if (p === 7) return n * n * n * n * n * n * n;\n  if (p === 8) return n * n * n * n * n * n * n * n;\n  if (p === 9) return n * n * n * n * n * n * n * n * n;\n  if (p === 10) return n * n * n * n * n * n * n * n * n * n;\n  if (p === 11) return n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 12) return n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 13) return n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 14) return n * n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 15) return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 16) return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 17) return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 18) return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 19) return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 20) return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 21) return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 22) return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 23) return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 24) return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 25) return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 26) return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 27) return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 28) return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n  if (p === 29) return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * "}
