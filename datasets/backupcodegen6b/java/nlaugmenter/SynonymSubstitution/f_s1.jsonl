{"task_id": "Java/0", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    determine if in given list of numbers, are any two numbers close to each early than establish threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n", "canonical_solution": "        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < threshold) return true;\n            }\n        }\n        return false;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.hasCloseElements(new ArrayList<>(Arrays.asList(11.0, 2.0, 3.9, 4.0, 5.0, 2.2)), 0.3),\n                !s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.9, 4.0, 5.0, 2.2)), 0.05),\n                s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0)), 0.95),\n                !s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0)), 0.8),\n                s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)), 0.1),\n                s.hasCloseElements(new ArrayList<>(Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1)), 1.0),\n                !s.hasCloseElements(new ArrayList<>(Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1)), 0.5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0)), 0.5),\n                s.hasCloseElements(new ArrayList<>(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0)), 0.3)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    determine if in given list of numbers, are any two numbers close to each early than establish threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) return false;\n        if (threshold < 0) return false;\n        \n        Map<Double, Integer> map = new HashMap<Double, Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (map.containsKey(numbers.get(i))) {\n                map.put(numbers.get(i), map.get(numbers.get(i)) + 1);\n            } else {\n                map.put(numbers.get(i), 1);\n            }\n        }\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    if (map.containsKey(numbers.get(i)) && map.containsKey(numbers.get(j))) {\n                        if (map.get(numbers.get(i)) > map.get(numbers.get(j))) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5));\n        System.out.println(s.hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/1", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    input signal to this function is a drawstring incorporate multiple group of cuddle parentheses. Your finish is to \n     separate those group into freestanding strings and return the list of those. \n     disjoined group are balanced (each open brace is by rights closed) and not nested within each other \n     Ignore any outer space in the remark string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n", "canonical_solution": "        List<String> result = new ArrayList<>();\n        StringBuilder current_string = new StringBuilder();\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                current_depth += 1;\n                current_string.append(c);\n            } else if (c == ')') {\n                current_depth -= 1;\n                current_string.append(c);\n\n                if (current_depth == 0) {\n                    result.add(current_string.toString());\n                    current_string.setLength(0);\n                }\n            }\n        }\n        return result;\n\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.separateParenGroups(\"(()()) ((())) () ((())()())\").equals(Arrays.asList(\n                        \"(()())\", \"((()))\", \"()\", \"((())()())\"\n                )),\n                s.separateParenGroups(\"() (()) ((())) (((())))\").equals(Arrays.asList(\n                        \"()\", \"(())\", \"((()))\", \"(((())))\"\n                )),\n                s.separateParenGroups(\"(()(())((())))\").equals(Arrays.asList(\n                        \"(()(())((())))\"\n                )),\n                s.separateParenGroups(\"( ) (( )) (( )( ))\").equals(Arrays.asList(\"()\", \"(())\", \"(()())\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.separateParenGroups(\"( ) (( )) (( )( ))\").equals(Arrays.asList(\"()\", \"(())\", \"(()())\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    input signal to this function is a drawstring incorporate multiple group of cuddle parentheses. Your finish is to \n     separate those group into freestanding strings and return the list of those. \n     disjoined group are balanced (each open brace is by rights closed) and not nested within each other \n     Ignore any outer space in the remark string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<String> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}\n\npublic class Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<String> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/10", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    screen if given string is a palindrome \n      * / \n     public boolean isPalindrome(String string) { \n         int i = 0; \n         int j = string.length() - 1; \n         while (i < j) { \n             if (string.charAt(i)!= string.charAt(j)) { \n                 return false; \n             } \n             i++;\n             j--;\n         } \n         return truthful; \n     } \n     / * * \n     witness the shortest palindrome that begins with a supply string.\n     Algorithm theme is simple: \n     - determine the long postfix of supplied string that is a palindrome. \n     - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n", "canonical_solution": "        if (string.length() == 0) {\n            return \"\";\n        }\n\n        int beginning_of_suffix = 0;\n\n        while (!isPalindrome(string.substring(beginning_of_suffix))) {\n            beginning_of_suffix++;\n        }\n\n        return string + new StringBuffer(string.substring(0, beginning_of_suffix)).reverse().toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.makePalindrome(\"\"), \"\"),\n                Objects.equals(s.makePalindrome(\"x\"), \"x\"),\n                Objects.equals(s.makePalindrome(\"xyz\"), \"xyzyx\"),\n                Objects.equals(s.makePalindrome(\"xyx\"), \"xyx\"),\n                Objects.equals(s.makePalindrome(\"jerry\"), \"jerryrrej\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    public String makePalindrome(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.makePalindrome(\"\"), \"\"),\n                Objects.equals(s.makePalindrome(\"cat\"), \"catac\"),\n                Objects.equals(s.makePalindrome(\"cata\"), \"catac\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    screen if given string is a palindrome \n      * / \n     public boolean isPalindrome(String string) { \n         int i = 0; \n         int j = string.length() - 1; \n         while (i < j) { \n             if (string.charAt(i)!= string.charAt(j)) { \n                 return false; \n             } \n             i++;\n             j--;\n         } \n         return truthful; \n     } \n     / * * \n     witness the shortest palindrome that begins with a supply string.\n     Algorithm theme is simple: \n     - determine the long postfix of supplied string that is a palindrome. \n     - Append to the conclusion of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n        }\n        String s = sb.toString();\n        StringBuilder sb2 = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            sb2.append(s.charAt(s.length() - 1 - i));\n        }\n        String s2 = sb2.toString();\n        if (s.equals(s2)) {\n            return s;\n        }\n        return s2;\n    }\n}\n\npublic class Palindrome {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.makePalindrome(\"\"));\n        System.out.println(s.makePalindrome(\"cat\"));\n        System.out.println(s.makePalindrome(\"cata\"));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/100", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive integer n, you have to cause a down of n levels of stones. \n     The first floor have n rock. \n     The number of stone in the following level is: \n         - the next odd phone number if n is odd. \n         - the next tied issue if n is even. \n     Return the number of stones in each level in a list, where component at exponent \n     i represents the number of stone in the level (i+1).\n\n     Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.makeAPile(3).equals(Arrays.asList(3, 5, 7)),\n                s.makeAPile(4).equals(Arrays.asList(4, 6, 8, 10)),\n                s.makeAPile(5).equals(Arrays.asList(5, 7, 9, 11, 13)),\n                s.makeAPile(6).equals(Arrays.asList(6, 8, 10, 12, 14, 16)),\n                s.makeAPile(8).equals(Arrays.asList(8, 10, 12, 14, 16, 18, 20, 22))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> makeAPile(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.makeAPile(3).equals(Arrays.asList(3, 5, 7))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive integer n, you have to cause a down of n levels of stones. \n     The first floor have n rock. \n     The number of stone in the following level is: \n         - the next odd phone number if n is odd. \n         - the next tied issue if n is even. \n     Return the number of stones in each level in a list, where component at exponent \n     i represents the number of stone in the level (i+1).\n\n     Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int level = 1;\n        while (n > 0) {\n            int count = n % 2 == 0? n / 2 : (n - 1) / 2;\n            result.add(level, count);\n            n -= count;\n            level++;\n        }\n        return result;\n    }\n}\n\n// v2\npublic class Solution {\n    /**\n    establish a positive integer n, you haveobtain a down of n levels of stones. \n     The first floor have n rock. \n     The number of stone in the following level is: \n         - the next odd phone number if n is odd. \n         - the next tied issue if n is even. \n     Return the number of stones in each level in a list, where component at exponent \n     i represents the number of stone in the level (i+1).\n\n     Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int level = 1;\n        while (n > 0) {\n            int count = n % 2 == 0? n / 2 : (n - 1) / 2;\n            result.add(level, count);\n            n -= count;\n            level++;\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/101", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be establish a string of news separate by comma or space. Your task is \n     to split the string into word and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n", "canonical_solution": "        if (s.length() == 0) {\n            return List.of();\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (char letter : s.toCharArray()) {\n            if (letter == ',') {\n                sb.append(' ');\n            } else {\n                sb.append(letter);\n            }\n        }\n\n        return new ArrayList<>(Arrays.asList(sb.toString().split(\"\\s+\" )));\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.wordStrings(\"Hi, my name is John\" ).equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\" )),\n                s.wordStrings(\"One, two, three, four, five, six\" ).equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\" )),\n                s.wordStrings(\"Hi, my name\" ).equals(Arrays.asList(\"Hi\", \"my\", \"name\" )),\n                s.wordStrings(\"One,, two, three, four, five, six,\" ).equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\" )),\n                s.wordStrings(\"\" ).equals(List.of()),\n                s.wordStrings(\"ahmed     , gamal\" ).equals(Arrays.asList(\"ahmed\", \"gamal\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> wordStrings(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.wordStrings(\"Hi, my name is John\" ).equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\" )),\n                s.wordStrings(\"One, two, three, four, five, six\" ).equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "wordStrings", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be establish a string of news separate by comma or space. Your task is \n     to split the string into word and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> result = new ArrayList<String>();\n        if (s == null || s.length() == 0) return result;\n        String[] words = s.split(\"[\\\\s,]\");\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/102", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This affair takes two convinced number x and y and return the \n     biggest even integer number that cost in the compass [x, y] inclusive. If \n     there's no such numeral, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n", "canonical_solution": "        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.chooseNum(12, 15) == 14,\n                s.chooseNum(13, 12) == -1,\n                s.chooseNum(33, 12354) == 12354,\n                s.chooseNum(5234, 5233) == -1,\n                s.chooseNum(6, 29) == 28,\n                s.chooseNum(27, 10) == -1,\n                s.chooseNum(7, 7) == -1,\n                s.chooseNum(546, 546) == 546\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int chooseNum(int x, int y) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.chooseNum(12, 15) == 14,\n                s.chooseNum(13, 12) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This affair takes two convinced number x and y and return the \n     biggest even integer number that cost in the compass [x, y] inclusive. If \n     there's no such numeral, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        \n        int max = -1;\n        int min = Integer.MAX_VALUE;\n        int mid = 0;\n        \n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0) {\nî                if (i > max) {\n                    max = i;\n                    mid = i;\n                }\n                else if (i < min) {\n                    min = i;\n                    mid = i;\n                }\n            }\n        }\n        \n        if (max == -1) {\n            return -1;\n        }\n        \n        return mid;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.chooseNum(12, 15));\n        System.out.println(s.chooseNum(13, 12));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/103", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish two positive integer n and m, and your task be to calculate the \n     average of the integer from n through m (including n and m).\n     Round the solution to the nearest integer and convert that to binary. \n     If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n", "canonical_solution": "        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals((String) s.roundedAvg(1, 5), \"11\" ),\n                Objects.equals((String) s.roundedAvg(7, 13), \"1010\" ),\n                Objects.equals((String) s.roundedAvg(964, 977), \"1111001011\" ),\n                Objects.equals((String) s.roundedAvg(996, 997), \"1111100101\" ),\n                Objects.equals((String) s.roundedAvg(560, 851), \"1011000010\" ),\n                Objects.equals((String) s.roundedAvg(185, 546), \"101101110\" ),\n                Objects.equals((String) s.roundedAvg(362, 496), \"110101101\" ),\n                Objects.equals((String) s.roundedAvg(350, 902), \"1001110010\" ),\n                Objects.equals((String) s.roundedAvg(197, 233), \"11010111\" ),\n                (int) s.roundedAvg(7, 5) == -1,\n                (int) s.roundedAvg(5, 1) == -1,\n                Objects.equals((String) s.roundedAvg(5, 5), \"101\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object roundedAvg(int n, int m) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals((String) s.roundedAvg(1, 5), \"11\" ),\n                (int) s.roundedAvg(7, 5) == -1,\n                Objects.equals((String) s.roundedAvg(10, 20), \"1111\" ),\n                Objects.equals((String) s.roundedAvg(20, 33), \"11011\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish two positive integer n and m, and your task be to calculate the \n     average of the integer from n through m (including n and m).\n     Round the solution to the nearest integer and convert that to binary. \n     If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int sum = 0;\n        int count = 0;\n        int avg = 0;\n        int n_m = n - m;\n        int m_n = m - n;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        avg = sum / count;\n        \n        if (n_m > 0) {\n            return -1;\n        }\n        \n        if (m_n > 0) {\n            return -1;\n        }\n        \n        return Integer.toBinaryString(avg);\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.roundedAvg(1, 5));\n        System.out.println(s.roundedAvg(7, 5));\n        System.out.println(s.roundedAvg(10, 20));\n        System.out.println(s.roundedAvg(20, 33));\n    }\n    \n    public String roundedAvg(int n, int m) {\n        int sum = 0;\n        int count = 0;\n        int avg = 0;\n        int n_m = n - m;\n        int m_n = m - n;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        avg = sum / count;\n        \n        if (n_m > 0) {\n            return \"-1\";\n        }\n        \n        if (m_n > 0) {\n            return \"-1\";\n        }\n        \n        return Integer.toBinaryString(avg);\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/104", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a list of positive integer x. return a sorted list of all \n     component that acceptn't any even digit. \n\n     Note: return list should be screen in increase order. \n    \n     For exemplar:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n", "canonical_solution": "        List<Integer> odd_digit_elements = new ArrayList<>();\n        for (int i : x) {\n            boolean is_unique = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if ((c - '0') % 2 == 0) {\n                    is_unique = false;\n                    break;\n                }\n            }\n            if (is_unique) {\n                odd_digit_elements.add(i);\n            }\n        }\n        Collections.sort(odd_digit_elements);\n        return odd_digit_elements;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.uniqueDigits(Arrays.asList(15, 33, 1422, 1)).equals(Arrays.asList(1, 15, 33)),\n                s.uniqueDigits(Arrays.asList(152, 323, 1422, 10)).equals(List.of()),\n                s.uniqueDigits(Arrays.asList(12345, 2033, 111, 151)).equals(Arrays.asList(111, 151)),\n                s.uniqueDigits(Arrays.asList(135, 103, 31)).equals(Arrays.asList(31, 135))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.uniqueDigits(Arrays.asList(15, 33, 1422, 1)).equals(Arrays.asList(1, 15, 33)),\n                s.uniqueDigits(Arrays.asList(152, 323, 1422, 10)).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a list of positive integer x. return a sorted list of all \n     component that acceptn't any even digit. \n\n     Note: return list should be screen in increase order. \n    \n     For exemplar:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (x == null || x.size() == 0) return result;\n        \n        for (int i = 0; i < x.sizeprot(); i++) {\n            int num = x.get(i);\n            int count = 0;\n            while (num > 0) {\n                num = num / 10;\n                count++;\n            }\n            if (count % 2 == 0) {\n                result.add(x.get(i));\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/105", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish an array of integer, sort the integers that be between 1 and 9 inclusive, \n     turn back the resulting array, and then supplant each finger by its corresponding name from \n     \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n", "canonical_solution": "        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(Collections.reverseOrder());\n        List<String> new_arr = new ArrayList<>();\n        for (int var : sorted_arr) {\n            if (var >= 1 && var <= 9) {\n                switch (var) {\n                    case 1 -> new_arr.add(\"One\");\n                    case 2 -> new_arr.add(\"Two\");\n                    case 3 -> new_arr.add(\"Three\");\n                    case 4 -> new_arr.add(\"Four\");\n                    case 5 -> new_arr.add(\"Five\");\n                    case 6 -> new_arr.add(\"Six\");\n                    case 7 -> new_arr.add(\"Seven\");\n                    case 8 -> new_arr.add(\"Eight\");\n                    case 9 -> new_arr.add(\"Nine\");\n                }\n            }\n        }\n        return new_arr;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.byLength(new ArrayList<>(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))).equals(Arrays.asList(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\" )),\n                s.byLength(new ArrayList<>(List.of())).equals(List.of()),\n                s.byLength(new ArrayList<>(Arrays.asList(1, -1, 55))).equals(List.of(\"One\" )),\n                s.byLength(new ArrayList<>(Arrays.asList(1, -1, 3, 2))).equals(Arrays.asList(\"Three\", \"Two\", \"One\" )),\n                s.byLength(new ArrayList<>(Arrays.asList(9, 4, 8))).equals(Arrays.asList(\"Nine\", \"Eight\", \"Four\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> byLength(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.byLength(new ArrayList<>(Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3))).equals(Arrays.asList(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\" )),\n                s.byLength(new ArrayList<>(List.of())).equals(List.of()),\n                s.byLength(new ArrayList<>(Arrays.asList(1, -1, 55))).equals(List.of(\"One\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish an array of integer, sort the integers that be between 1 and 9 inclusive, \n     turn back the resulting array, and then supplant each finger by its corresponding name from \n     \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        if (arr.isEmpty()) return res;\n        arr = sort(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            res.add(byLength(arr.get(i), i));\n        }\n        return res;\n    }\n\n    private String byLength(int n, int i) {\n        if (n == 0) return \"\";\n        if (n == 1) return \"One\";\n        if (n == 2) return \"Two\";\n        if (n == 3) return \"Three\";\n        if (n == 4) return \"Four\";\n        if (n == 5) return \"Five\";\n        if (n == 6) return \"Six\";\n        if (n == 7) return \"Seven\";\n        if (n == 8) return \"Eight\";\n        if (n == 9) return \"Nine\";\n        return \"\";\n    }\n\n    private List<Integer> sort(List<Integer> lest) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < lest.size(); i++) {\n            for (int j = i + 1; j < lest.size(); j++) {\n                if (lest.get(i) > lest.get(j)) {\n                    int tmp = lest.get(i);\n                    lest.set(i, lest.get(j));\n                    lest.set(j, tmp);\n                }\n            }\n        }\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/106", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    enforce the function f that take n as a argument, \n     and fall a list of size n, such that the value of the element at exponent i is the factorial of i if i is even \n     or the sum of numbers from 1 to i differently. \n     i get down from 1. \n     the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n", "canonical_solution": "        List<Integer> ret = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int x = 1;\n                for (int j = 1; j <= i; j++) {\n                    x *= j;\n                }\n                ret.add(x);\n            } else {\n                int x = 0;\n                for (int j = 1; j <= i; j++) {\n                    x += j;\n                }\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.f(5).equals(Arrays.asList(1, 2, 6, 24, 15)),\n                s.f(7).equals(Arrays.asList(1, 2, 6, 24, 15, 720, 28)),\n                s.f(1).equals(List.of(1)),\n                s.f(3).equals(Arrays.asList(1, 2, 6))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> f(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.f(5).equals(Arrays.asList(1, 2, 6, 24, 15))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    enforce the function f that take n as a argument, \n     and fall a list of size n, such that the value of the element at exponent i is the factorial of i if i is even \n     or the sum of numbers from 1 to i differently. \n     i get down from 1. \n     the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (n <= 1) { Return result; }\n        result.add(1);\n        for (int i = 2; i <= n; i++) {\n            result.add(result.get(i - 1) * i);\n        }\n        return result;\n    }\n}\n\npublic class FactorialTrailingZeros {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> result = s.f(5);\n        for (int i = 0; i < result.size(); i++) {\n            System.out.println(result.get(i));\n        }\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/107", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive integer n, return a tuple that has the phone number of even and curious \n     integer palindromes that hang within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n", "canonical_solution": "        int even_palindrome_count = 0, odd_palindrome_count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    odd_palindrome_count += 1;\n                } else {\n                    even_palindrome_count += 1;\n                }\n            }\n        }\n        return Arrays.asList(even_palindrome_count, odd_palindrome_count);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.evenOddPalindrome(123).equals(Arrays.asList(8, 13)),\n                s.evenOddPalindrome(12).equals(Arrays.asList(4, 6)),\n                s.evenOddPalindrome(3).equals(Arrays.asList(1, 2)),\n                s.evenOddPalindrome(63).equals(Arrays.asList(6, 8)),\n                s.evenOddPalindrome(25).equals(Arrays.asList(5, 6)),\n                s.evenOddPalindrome(19).equals(Arrays.asList(4, 6)),\n                s.evenOddPalindrome(9).equals(Arrays.asList(4, 5)),\n                s.evenOddPalindrome(1).equals(Arrays.asList(0, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddPalindrome(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.evenOddPalindrome(12).equals(Arrays.asList(4, 6)),\n                s.evenOddPalindrome(3).equals(Arrays.asList(1, 2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive integer n, return a tuple that has the phone number of even and curious \n     integer palindromes that hang within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    res.add(i);\n                }\n            }\n        }\n        return res;\n    }\n\n    private boolean isPalindrome(int n) {\n        int rev = 0;\n        while (n > 0) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return rev == n;\n    }\n\n    private boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/108", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function countNums which take an array of integer and return \n     the number of elements which has a sum of digits > 0. \n     If a act be damaging, then its beginning sign digit will equal negative: \n     for example -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n", "canonical_solution": "        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n            List<Integer> digits = new ArrayList<>();\n            for (char digit : String.valueOf(n).toCharArray()) {\n                digits.add(digit - '0');\n            }\n            digits.set(0, digits.get(0) * neg);\n            if (digits.stream().reduce(0, Integer::sum) > 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countNums(List.of()) == 0,\n                s.countNums(Arrays.asList(-1, -2, 0)) == 0,\n                s.countNums(Arrays.asList(1, 1, 2, -2, 3, 4, 5)) == 6,\n                s.countNums(Arrays.asList(1, 6, 9, -6, 0, 1, 5)) == 5,\n                s.countNums(Arrays.asList(1, 100, 98, -7, 1, -1)) == 4,\n                s.countNums(Arrays.asList(12, 23, 34, -45, -56, 0)) == 5,\n                s.countNums(Arrays.asList(-0, (int) Math.pow(1, 0))) == 1,\n                s.countNums(List.of(1)) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countNums(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countNums(List.of()) == 0,\n                s.countNums(Arrays.asList(-1, 11, -11)) == 1,\n                s.countNums(Arrays.asList(1, 1, 2)) == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function countNums which take an array of integer and return \n     the number of elements which has a sum of digits > 0. \n     If a act be damaging, then its beginning sign digit will equal negative: \n     for example -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            int sum = 0;\n            while (num!= 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\npublic class CountNums {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        List<Integer> arr = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            arr.add(in.nextInt());\n        }\n        int result = new Solution().countNums(arr);\n        System.out.println(result);\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/109", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We suffer an array 'arr' of N integer arr[1], arr[2],... , arr[N].The\n     numbers pool in the array will be randomly ordered. Your task is to determine if \n     it is potential to get an array screen in non - decreasing order by perform \n     the following operation on the given array: \n         You are allowed to perform right shift process any number of time. \n\n     One right shift key operation mean shifting all element of the array by one \n     position in the right steering. The final element of the array will be go to \n     the starting stead in the array i.e. 0th exponent. \n\n     If it be possible to obtain the grouped array by performing the above process \n     then return true else return False.\n     If the given array is empty then return truthful. \n\n     Note: The give list is guarantee to get unique element.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n", "canonical_solution": "        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n\n        int min_value = Collections.min(arr);\n        int min_index = arr.indexOf(min_value);\n        List<Integer> my_arr = new ArrayList<>(arr.subList(min_index, arr.size()));\n        my_arr.addAll(arr.subList(0, min_index));\n        for (int i = 0; i < arr.size(); i++) {\n            if (my_arr.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.moveOneBall(new ArrayList<>(Arrays.asList(3, 4, 5, 1, 2))) == true,\n                s.moveOneBall(new ArrayList<>(Arrays.asList(3, 5, 10, 1, 2))) == true,\n                s.moveOneBall(new ArrayList<>(Arrays.asList(4, 3, 1, 2))) == false,\n                s.moveOneBall(new ArrayList<>(Arrays.asList(3, 5, 4, 1, 2))) == false,\n                s.moveOneBall(new ArrayList<>(Arrays.asList())) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean moveOneBall(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.moveOneBall(new ArrayList<>(Arrays.asList(3, 4, 5, 1, 2))) == true,\n                s.moveOneBall(new ArrayList<>(Arrays.asList(3, 5, 4, 1, 2))) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We suffer an array 'arr' of N integer arr[1], arr[2],..., arr[N].The\n     numbers pool in the array will be randomly ordered. Your task is to determine if \n     it is potential to get an array screen in non - decreasing order by perform \n     the following operation on the given array: \n         You are allowed to perform right shift process any number of time. \n\n     One right shift key operation mean shifting all element of the array by one \n     position in the right steering. The final element of the array will be go to \n     the starting stead in the array i.e. 0th exponent. \n\n     If it be possible to obtain the grouped array by performing the above process \n     then return true else return False.\n     If the given array is empty then return truthful. \n\n     Note: The give list is guarantee to get unique element.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if (arr.isEmpty()) return true;\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        int i = 0;\n        while (i < n - 1) {\n            int j = i + 1;\n            while (j < n && arr2[j] <= arr2[i]) j++;\n            if (j == n) return false;\n            arr2[i] = arr2[j];\n            i = j;\n        }\n        return true;\n    }\n Creatures:\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.moveOneBall(Arrays.asList(3, 4, 5, 1, 2)));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/11", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    input signal are two strings a and b consist merely of 1s and zero. \n     do binary XOR on these inputs and return result also as a bowed stringed instrument.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n", "canonical_solution": "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.stringXor(\"111000\", \"101010\"), \"010010\"),\n                Objects.equals(s.stringXor(\"1\", \"1\"), \"0\"),\n                Objects.equals(s.stringXor(\"0101\", \"0000\"), \"0101\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String stringXor(String a, String b) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.stringXor(\"010\", \"110\"), \"100\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    input signal are two strings a and b consist merely of 1s and zero. \n     do binary XOR on these inputs and return result also as a bowed stringed instrument.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int[] aa = new int[Play.length];\n        int[] bb = new int[Play.length];\n        for (int i = 0; i < Play.length; i++) {\n            aa[i] = a.charAt(i) - '0';\n            bb[i] = b.charAt(i) - '0';\n        }\n        int[] result = new int[Play.length];\n        for (int i = 0; i < Play.length; i++) {\n            result[i] = aa[i] ^ bb[i];\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < Play.length; i++) {\n            sb.append(result[i] + '0');\n        }\n        return sb.toString();\n    }\n}\n\nclass Play {\n    public static final int length = 10;\n    public static final int[] a = {0, 1, 2,':', ';','MJ','K','G','P','T','L','M','N','O','X','W','Z','E','R','S','D','F','V','H','J','K','Q', hide,'T','U','I','O','P','A','S','D','F','G','H','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',''};\n    public static final int[] b = {0, 1, 2,':', ';','MJ','K','G','P','T','L','M','N','O','X','W','Z','E','R','S','D','F','V','H','J','K','Q', hide,'T','U','I','O','P','A','S','D','F','G','H','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',''};\n    public static final int[] c = {0, 1, 2,':', ';','MJ','K','G','P','T','L','M','N','O','X','W','Z','E','R','S','D','F','V','H','J','K','Q', hide,'T','U','I','O','P','A','S','D','F','G','H','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',''};\n    public static final int[] d = {0, 1, 2,':', ';','MJ','K','G','P','T','L','M','N','O','X','W','Z','E','R','S','D','F','V','H','J','K','Q', hide,'T','U','I','O','P','A','S','D','F','G','H','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',''};\n    public static final int[] e = {0, 1, 2,':', 'WARD', ';','MJ','K','G','P','T','L','M','N','O','X','W','Z','E','R','S','D','F','V','H','J','K','Q', hide,'T','U','I','O','P','A','S','D','F','G','H','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',''};\n    public static final int[] f = {0, 1, 2,':', ';','MJ','K','Registry','P','T','L','M','N','O','X','W','Z','E','R','S','D','F','V','H','J','K','Q', hide,'T','U','I','O','P','A','S','D','F','G','H','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',''};\n    public static final int[] g = {0, 1, 2,':', ';','MJ','K','G','P','T','L','M','N','O','X','W','Z','E','R','S','D','F','V','H','J','K','Q', hide,'T','U','I','O','P','A','S','D','F','G','H','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y',", "passed": 0}
{"task_id": "Java/110", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this trouble, you will implement a routine that takes two tilt of issue, \n     and determines whether it is possible to do an exchange of elements \n     between them to hold lst1 a list of only even number. \n     There is no terminus ad quem on the number of exchanged elements between lst1 and lst2.\n     If it is possible to exchange component between the lst1 and lst2 to make \n     all the elements of lst1 to embody even, return \" YES \". \n     Otherwise, return \" NO \".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n", "canonical_solution": "        int odd = 0, even = 0;\n        for (int i : lst1) {\n            if (i % 2 == 1) {\n                odd += 1;\n            }\n        }\n        for (int i : lst2) {\n            if (i % 2 == 0) {\n                even += 1;\n            }\n        }\n        if (even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)), \"YES\" ),\n                Objects.equals(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)), \"NO\" ),\n                Objects.equals(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(2, 1, 4, 3)), \"YES\" ),\n                Objects.equals(s.exchange(Arrays.asList(5, 7, 3), Arrays.asList(2, 6, 4)), \"YES\" ),\n                Objects.equals(s.exchange(Arrays.asList(5, 7, 3), Arrays.asList(2, 6, 3)), \"NO\" ),\n                Objects.equals(s.exchange(Arrays.asList(3, 2, 6, 1, 8, 9), Arrays.asList(3, 5, 5, 1, 1, 1)), \"NO\" ),\n                Objects.equals(s.exchange(Arrays.asList(100, 200), Arrays.asList(200, 200)), \"YES\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)), \"YES\" ),\n                Objects.equals(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)), \"NO\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this trouble, you will implement a routine that takes two tilt of issue, \n     and determines whether it is possible to do an exchange of elements \n     between them to hold lst1 a list of only even number. \n     There is no terminus ad quem on the number of exchanged elements between lst1 and lst2.\n     If it is possible to exchange component between the lst1 and lst2 to make \n     all the elements of lst1 to embody even, return \" YES \". \n     Otherwise, return \" NO \".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size()!= lst2.size()) return \"NO\";\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int n = lst1.size();\n        while (i < n && j < n) {\n            if (lst1.get(i) % 2 == 0) {\n                lst2.set(j, lst1.get(i));\n                i++;\n                j++;\n            } else if (lst2.get(j) % 2 == 0) {\n                lst1.set(k, lst2.get(j));\n                k++;\n                j++;\n            } else {\n                i++;\n                j++;\n            }\n        }\n        while (i < n) {\n            lst1.set(k, lst1.get(i));\n            k++;\n            i++;\n        }\n        while (j < n) {\n            lst2.set(k, lst2.get(j));\n            k++;\n            j++;\n        }\n        return \"YES\";\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)));\n    }\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size()!= lst2.size()) return \"NO\";\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int n = lst1.size();\n        while (i < n && j < n) {\n            if (lst1.get(i) % 2 == 0) {\n                lst2.set(j, lst1.get(i));\n                i++;\n                j++;\n            } else if (lst2.get(j) % 2 == 0) {\n                lst1.set(k, lst2.get(j));\n                k++;\n                j++;\n            } else {\n                i++;\n                j++;\n            }\n        }\n        while (i < n) {\n            lst1.set(k, lst1.get(i));\n            k++;\n            i++;\n        }\n        while (j < n) {\n            lst2.set(k, lst2.get(j));\n            k++;\n            j++;\n        }\n        return \"YES\";\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/111", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a string exemplify a outer space separate small letter letter, return a dictionary \n     of the letter with the most repeat and control the corresponding count. \n     If respective letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n", "canonical_solution": "        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Map<String, Integer> map1 = new HashMap<>();\n        map1.put(\"a\", 2);\n        map1.put(\"b\", 2);\n        Map<String, Integer> map2 = new HashMap<>();\n        map2.put(\"a\", 2);\n        map2.put(\"b\", 2);\n        Map<String, Integer> map3 = new HashMap<>();\n        map3.put(\"a\", 1);\n        map3.put(\"b\", 1);\n        map3.put(\"c\", 1);\n        map3.put(\"d\", 1);\n        map3.put(\"g\", 1);\n        Map<String, Integer> map4 = new HashMap<>();\n        map4.put(\"r\", 1);\n        map4.put(\"t\", 1);\n        map4.put(\"g\", 1);\n        Map<String, Integer> map5 = new HashMap<>();\n        map5.put(\"b\", 4);\n        Map<String, Integer> map6 = new HashMap<>();\n        map6.put(\"r\", 1);\n        map6.put(\"t\", 1);\n        map6.put(\"g\", 1);\n        Map<String, Integer> map7 = new HashMap<>();\n        Map<String, Integer> map8 = new HashMap<>();\n        map8.put(\"a\", 1);\n        List<Boolean> correct = Arrays.asList(\n                s.histogram(\"a b b a\" ).equals(map1),\n                s.histogram(\"a b c a b\" ).equals(map2),\n                s.histogram(\"a b c d g\" ).equals(map3),\n                s.histogram(\"r t g\" ).equals(map4),\n                s.histogram(\"b b b b a\" ).equals(map5),\n                s.histogram(\"r t g\" ).equals(map6),\n                s.histogram(\"\" ).equals(map7),\n                s.histogram(\"a\" ).equals(map8)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Map<String, Integer> histogram(String test) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Map<String, Integer> map1 = new HashMap<>();\n        map1.put(\"a\", 2);\n        map1.put(\"b\", 2);\n        Map<String, Integer> map2 = new HashMap<>();\n        map2.put(\"a\", 2);\n        map2.put(\"b\", 2);\n        Map<String, Integer> map3 = new HashMap<>();\n        map3.put(\"a\", 1);\n        map3.put(\"b\", 1);\n        map3.put(\"c\", 1);\n        map3.put(\"d\", 1);\n        map3.put(\"g\", 1);\n        Map<String, Integer> map4 = new HashMap<>();\n        map4.put(\"a\", 1);\n        map4.put(\"b\", 1);\n        map4.put(\"c\", 1);\n        Map<String, Integer> map5 = new HashMap<>();\n        map5.put(\"b\", 4);\n        Map<String, Integer> map6 = new HashMap<>();\n        map6.put(\"r\", 1);\n        map6.put(\"t\", 1);\n        map6.put(\"g\", 1);\n        Map<String, Integer> map7 = new HashMap<>();\n        Map<String, Integer> map8 = new HashMap<>();\n        map8.put(\"a\", 1);\n        List<Boolean> correct = Arrays.asList(\n                s.histogram(\"a b b a\" ).equals(map1),\n                s.histogram(\"a b c a b\" ).equals(map2),\n                s.histogram(\"a b c\" ).equals(map4),\n                s.histogram(\"b b b b a\" ).equals(map5),\n                s.histogram(\"\" ).equals(map7)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a string exemplify a outer space separate small letter letter, return a dictionary \n     of the letter with the most repeat and control the corresponding count. \n     If respective letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> hist = new HashMap<String, Integer>();\n        for (int i = 0; i < test.length(); i++) {\n            String letter = test.substring(i, i + 1);\n            if (hist.containsKey(letter)) {\n                hist.put(letter, hist.get(letter) + 1);\n            } else {\n                hist.put(letter, 1);\n            }\n        }\n        return hist;\n    } 195ms\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.histogram(\"a b c\"));\n        System.out.println(s.histogram(\"a b b a\"));\n        System.out.println(s.histogram(\"b b b b a\"));\n        System.out.println(s.histogram(\"\"));\n    }\n\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> hist = new HashMap<String, Integer>();\n        for (int i = 0; i < test.length(); i++) {\n            String letter = test.substring(i, i + 1);\n            if (hist.containsKey(letter)) {\n                hist.put(letter, hist.get(letter) + 1);\nxes\n            } else {\n                hist.put(letter, 1);\n            }\n        }\n        return hist;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/112", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    undertaking \n     We are given two string s and c, you experience to erase all the characters in s that are equal to any fictional character in c\n     then check if the resultant role string be palindrome. \n     A drawstring is called palindrome if it read the same backward as ahead. \n     You should return a tuple control the result chain and true / false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.reverseDelete(\"abcde\", \"ae\" ).equals(Arrays.asList(\"bcd\", false)),\n                s.reverseDelete(\"abcdef\", \"b\" ).equals(Arrays.asList(\"acdef\", false)),\n                s.reverseDelete(\"abcdedcba\", \"ab\" ).equals(Arrays.asList(\"cdedc\", true)),\n                s.reverseDelete(\"dwik\", \"w\" ).equals(Arrays.asList(\"dik\", false)),\n                s.reverseDelete(\"a\", \"a\" ).equals(Arrays.asList(\"\", true)),\n                s.reverseDelete(\"abcdedcba\", \"\" ).equals(Arrays.asList(\"abcdedcba\", true)),\n                s.reverseDelete(\"abcdedcba\", \"v\" ).equals(Arrays.asList(\"abcdedcba\", true)),\n                s.reverseDelete(\"vabba\", \"v\" ).equals(Arrays.asList(\"abba\", true)),\n                s.reverseDelete(\"mamma\", \"mia\" ).equals(Arrays.asList(\"\", true))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.reverseDelete(\"abcde\", \"ae\" ).equals(Arrays.asList(\"bcd\", false)),\n                s.reverseDelete(\"abcdef\", \"b\" ).equals(Arrays.asList(\"acdef\", false)),\n                s.reverseDelete(\"abcdedcba\", \"ab\" ).equals(Arrays.asList(\"cdedc\", true))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    undertaking \n     We are given two string s and c, you experience to erase all the characters in s that are equal to any fictional character in c\n     then check if the resultant role string be palindrome. \n     A drawstring is called palindrome if it read the same backward as ahead. \n     You should return a tuple control the result chain and true / false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<Object>();\n        if(s == null || c == null) return result;\n        int len = s.length();\n        int[] count = new int[26];\n        for(int i = 0; i < len; i++){\n            count[s.charAt(i) - 'a']++;\n        }\n        int[] cCount = new int[26];\n        for(int i = 0; i < len; i++){\n            cCount[c.charAt(i) - 'a']++;\n        }\n        int i = 0;\n        while(i < len){\n            if(count[s.charAt(i) - 'a'] == 0){\n                i++;\n            }else{\n                int j = i + 1;\n                while(j < len && count[s.charAt(j) - 'a'] == 0){\n                    j++;\n                }\n                int k = j - 1;\n                while(k >= i && count[s.charAt(k) - 'a'] == 0){\n                    k--;\n                }\n                if(k - i + 1 == j - k){\n                    String s1 = s.substring(i, j + 1);\n                    String s2 = s.substring(k, j + 1);\n                    if(s1.equals(s2)){\n                        result.add(s1);\n                        i = j + 1;\n                    }else{\n                        i = j + 1;\n                    }\n                }else{\n                    i = j + 1;\n                }\n            }\n        }\n        return result;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/113", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a list of strings, where each string consist of alone digits, return a list.\n     Each element i of the output should cost \" the numeral of curious elements in the \n     drawstring i of the stimulation. \" where all the i's should be replaced by the number \n     of curious digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n", "canonical_solution": "        List<String> res = new ArrayList<>();\n        for (String arr : lst) {\n            int n = 0;\n            for (char d : arr.toCharArray()) {\n                if ((d - '0') % 2 == 1) {\n                    n += 1;\n                }\n            }\n            res.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" );\n        }\n        return res;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.oddCount(List.of(\"1234567\" )).equals(List.of(\"the number of odd elements 4n the str4ng 4 of the 4nput.\" )),\n                s.oddCount(Arrays.asList(\"3\", \"11111111\" )).equals(Arrays.asList(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\" )),\n                s.oddCount(Arrays.asList(\"271\", \"137\", \"314\" )).equals(Arrays.asList(\n                        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n                        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n                        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n                ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> oddCount(List<String> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.oddCount(List.of(\"1234567\" )).equals(List.of(\"the number of odd elements 4n the str4ng 4 of the 4nput.\" )),\n                s.oddCount(Arrays.asList(\"3\", \"11111111\" )).equals(Arrays.asList(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a list of strings, where each string consist of alone digits, return a list.\n     Each element i of the output should cost \" the numeral of curious elements in the \n     drawstring i of the stimulation. \" where all the i's should be replaced by the number \n     of curious digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<String>();\n        if(lst.size() == 0) return res;\n        int[] odd = new int[lst.size()];\n        for(int i = 0; i < lst.size(); i++) { miners(lst.get(i), odd, 0); }\n        for(int i = 0; i < odd.length; i++) {\n            if(odd[i] == 0) {\n                res.add(\"the number of odd elements \" + (i + 1) + \" the str1ng \" + (i + 1) + \" of the \" + (i + 1) + \"put.\");\n            } else {\n                res.add(\"the number of odd elements \" + (i + 1) + \" the str8ng \" + (i + 1) + \" of the \" + (i + 1) + \"put.\");\n            }._\n        }\n        return res;\n    }\n    \n    private void miners(String s, int[] odd, int i) {\n        if(i == s.length()) {\n            if(odd[i] == 0) {\n                odd[i] = 1;\n            } else {\n                odd[i] = 0;\n            }\n            return;\n        }\n        for(int j = i; j < s.length(); j++) {\n            if(s.charAt(i) == s.charAt(j)) {\n                odd[i]++;\n                miners(s, odd, j + 1);\n                odd[i]--;\n            }\n        }\n    }\n}\n\npublic class OddCount {\n\n\tpublic static void main(String[] args) {\n\t\tSolution s = new Solution();\n\t\tList<String> res = s.oddCount(Arrays.asList(\"1234567\"));\n\t\tfor(String r : res) {\n\t\t\tSystem.out.println(r);\n\t\t}\n\t}\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/114", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish an array of integer nums, find the minimum sum of any non - empty sub - array \n     of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n", "canonical_solution": "        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1,\n                s.minSubArraySum(Arrays.asList(-1, -2, -3)) == -6,\n                s.minSubArraySum(Arrays.asList(-1, -2, -3, 2, -10)) == -14,\n                s.minSubArraySum(List.of(-999999999)) == -999999999,\n                s.minSubArraySum(Arrays.asList(0, 10, 20, 1000000)) == 0,\n                s.minSubArraySum(Arrays.asList(-1, -2, -3, 10, -5)) == -6,\n                s.minSubArraySum(Arrays.asList(100, -1, -2, -3, 10, -5)) == -6,\n                s.minSubArraySum(Arrays.asList(10, 11, 13, 8, 3, 4)) == 3,\n                s.minSubArraySum(Arrays.asList(100, -33, 32, -1, 0, -2)) == -33,\n                s.minSubArraySum(List.of(-10)) == -10,\n                s.minSubArraySum(List.of(7)) == 7,\n                s.minSubArraySum(Arrays.asList(1, -1)) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int minSubArraySum(List<Integer> nums) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1,\n                s.minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish an array of integer nums, find the minimum sum of any non - empty sub - array \n     of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int minSum = Integer.MAX_VALUE;\n        int[] sums = new int[nums.size()];\n        for (int i = 0; i < nums.size(); i++) {\n            sums[i] = nums.get(i);\n        }\n        for (int i = 0; i < sums.length; i++) {\n            for (int j = i + 1; j < sums.length; j++) {\n                sum = sums[i] + sums[j];\n                if (sum < minSum) {\n                    minSum = sum;\n                }\n            }\n        }\n        return minSum;\n    }\n}\n\npublic class MinimumSubArraySum {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\t}\n\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/115", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a rectangular grid of well. Each quarrel represent a individual well, \n     and each 1 in a quarrel stage a individual unit of water system. \n     Each well has a corresponding bucket that can be used to distill water from it, \n     and all buckets consume the like capacity.\n     Your task is to practice the bucket to evacuate the wells. \n     Output the act of times you want to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n", "canonical_solution": "        int sum = 0;\n        for (List<Integer> arr : grid) {\n            sum += Math.ceil((double) arr.stream().reduce(Integer::sum).get() / capacity);\n        }\n        return sum;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 1, 0), Arrays.asList(0, 1, 0, 0), Arrays.asList(1, 1, 1, 1)), 1) == 6,\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 1, 1), Arrays.asList(0, 0, 0, 0), Arrays.asList(1, 1, 1, 1), Arrays.asList(0, 1, 1, 1)), 2) == 5,\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 0), Arrays.asList(0, 0, 0)), 5) == 0,\n                s.maxFill(Arrays.asList(Arrays.asList(1, 1, 1, 1), Arrays.asList(1, 1, 1, 1)), 2) == 4,\n                s.maxFill(Arrays.asList(Arrays.asList(1, 1, 1, 1), Arrays.asList(1, 1, 1, 1)), 9) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 1, 0), Arrays.asList(0, 1, 0, 0), Arrays.asList(1, 1, 1, 1)), 1) == 6,\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 1, 1), Arrays.asList(0, 0, 0, 0), Arrays.asList(1, 1, 1, 1), Arrays.asList(0, 1, 1, 1)), 2) == 5,\n                s.maxFill(Arrays.asList(Arrays.asList(0, 0, 0), Arrays.asList(0, 0, 0)), 5) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a rectangular grid of well. Each quarrel represent a individual well, \n     and each 1 in a quarrel stage a individual unit of water system. \n     Each well has a corresponding bucket that can be used to distill water from it, \n     and all buckets consume the like capacity.\n     Your task is to practice the bucket to evacuate the wells. \n     Output the act of times you want to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int[][] dp = new int[grid.size()][grid.get(0).size()];\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                dp[i][j] = grid.get(i).get(j);\n            }\n        }\n        return dfs(grid, dp, capacity);\n    }\n\n    private int dfs(List<List<Integer>> grid, int[][] dp, int capacity) {\n        int max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (dp[i][j] == 1) {\n                    int curr = dfs(grid, dp, capacity - 1);\n                    if (curr > max) {\n                        max = curr;\n                    }\n                }\n            }\n        }\n        return max;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/116", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you suffer to sort an array of non - damaging integer according to \n     number of ones in their binary representation in ascend decree. \n     For similar phone number of one, sort based on decimal value. \n     < p > \n     It must be enforce like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n", "canonical_solution": "                List < Integer > sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return sorted_arr;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortArray(new ArrayList<>(Arrays.asList(1, 5, 2, 3, 4))).equals(Arrays.asList(1, 2, 4, 3, 5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(-2, -3, -4, -5, -6))).equals(Arrays.asList(-4, -2, -6, -5, -3)),\n                s.sortArray(new ArrayList<>(Arrays.asList(1, 0, 2, 3, 4))).equals(Arrays.asList(0, 1, 2, 4, 3)),\n                s.sortArray(new ArrayList<>(List.of())).equals(List.of()),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4))).equals(Arrays.asList(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)),\n                s.sortArray(new ArrayList<>(Arrays.asList(3, 6, 44, 12, 32, 5))).equals(Arrays.asList(32, 3, 5, 6, 12, 44)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 8, 16, 32))).equals(Arrays.asList(2, 4, 8, 16, 32)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 8, 16, 32))).equals(Arrays.asList(2, 4, 8, 16, 32))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortArray(new ArrayList<>(Arrays.asList(1, 5, 2, 3, 4))).equals(Arrays.asList(1, 2, 4, 3, 5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(-2, -3, -4, -5, -6))).equals(Arrays.asList(-4, -2, -6, -5, -3)),\n                s.sortArray(new ArrayList<>(Arrays.asList(1, 0, 2, 3, 4))).equals(Arrays.asList(0, 1, 2, 4, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you suffer to sort an array of non - damaging integer according to \n     number of ones in their binary representation in ascend decree. \n     For similar phone number of one, sort based on decimal value. \n     < p > \n     It must be enforce like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            sorted.add(arr.get(i));\n        }\n        Collections.sort(sorted, new Comparator<Integer>() {\n            public int compare(Integer a, Integer b) {\n                int aInt = a;\n                int bInt = b;\n                int aSign = aInt < 0? -1 : 1;\n                int bSign = bInt < 0? -1 : 1;\n                int aAbs = Math.abs(aInt);\n                int bAbs = Math.abs(bInt);\n                int aDec = aSign * aAbs;\n                int bDec = bSign * bAbs;\n                if (aDec!= bDec) {\n                    return aDec - bDec;\n                }\n                return aInt - bInt;\n            }\n        });\n        return sorted;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/117", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a string s and a lifelike number n, you have been tax to follow through \n     a function that returns a list of all words from bowed stringed instrument s that control precisely \n     n consonants, in order these lyric appear in the string s.\n     If the string s is empty then the function should return an empty list.\n     Note: you may wear the input chain contains only letters and space.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n", "canonical_solution": "        List<String> result = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            int n_consonants = 0;\n            for (char c : word.toCharArray()) {\n                c = Character.toLowerCase(c);\n                if (\"aeiou\".indexOf(c) == -1) {\n                    n_consonants += 1;\n                }\n            }\n            if (n_consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.selectWords(\"Mary had a little lamb\", 4).equals(List.of(\"little\" )),\n                s.selectWords(\"Mary had a little lamb\", 3).equals(Arrays.asList(\"Mary\", \"lamb\")),\n                s.selectWords(\"simple white space\", 2).equals(List.of()),\n                s.selectWords(\"Hello world\", 4).equals(List.of(\"world\" )),\n                s.selectWords(\"Uncle sam\", 3).equals(List.of(\"Uncle\" )),\n                s.selectWords(\"\", 4).equals(List.of()),\n                s.selectWords(\"a b c d e f\", 1).equals(Arrays.asList(\"b\", \"c\", \"d\", \"f\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> selectWords(String s, int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.selectWords(\"Mary had a little lamb\", 4).equals(List.of(\"little\" )),\n                s.selectWords(\"Mary had a little lamb\", 3).equals(Arrays.asList(\"Mary\", \"lamb\")),\n                s.selectWords(\"simple white space\", 2).equals(List.of()),\n                s.selectWords(\"Hello world\", 4).equals(List.of(\"world\" )),\n                s.selectWords(\"Uncle sam\", 3).equals(List.of(\"Uncle\" ))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a string s and a lifelike number n, you have been tax to follow through \n     a function that returns a list of all words from bowed stringed instrument s that control precisely \n     n consonants, in order these lyric appear in the string s.\n     If the string s is empty then the function should return an empty list.\n     Note: you may wear the input chain contains only letters and space.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> res = new ArrayList<String>();\n        if (s == null || s.length() == 0) return res;\n        if (n == 0) return res;\n        \n        int[] count = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            count[s.charAt(iPresent) - 'a']++;\n        }\n        \n        for (int i = 0; i < count.length; i++) {\n            if (count[i] == n) {\n                res.add(s.substring(i, i + 1));\n            }\n        }\n        return res;\n    }\n}\n\npublic class SelectWords {\n\n\tpublic static void main(String[] args) {\n\t\tSolution s = Italy.new Solution();\n\t\tList<String> res = s.selectWords(\"Mary had a little lamb\", 4);\n\t\tSystem.out.println(res);\n\t}\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/118", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a word. Your task is to discover the close vowel that stand between \n     two consonants from the right slope of the word (subject sensible). \n\n     Vowels in the beginning and end doesn't consider. Return empty string if you didn't \n     find oneself any vowel met the above circumstance. \n\n     You may simulate that the given string contains English letter entirely.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n", "canonical_solution": "        if (word.length() < 3) {\n            return \"\";\n        }\n\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getClosestVowel(\"yogurt\").equals(\"u\"),\n                s.getClosestVowel(\"full\").equals(\"u\"),\n                s.getClosestVowel(\"easy\").equals(\"\"),\n                s.getClosestVowel(\"eAsy\").equals(\"\"),\n                s.getClosestVowel(\"ali\").equals(\"\"),\n                s.getClosestVowel(\"bad\").equals(\"a\"),\n                s.getClosestVowel(\"most\").equals(\"o\"),\n                s.getClosestVowel(\"ab\").equals(\"\"),\n                s.getClosestVowel(\"ba\").equals(\"\"),\n                s.getClosestVowel(\"quick\").equals(\"\"),\n                s.getClosestVowel(\"anime\").equals(\"i\"),\n                s.getClosestVowel(\"Asia\").equals(\"\"),\n                s.getClosestVowel(\"Above\").equals(\"o\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String getClosestVowel(String word) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getClosestVowel(\"yogurt\").equals(\"u\"),\n                s.getClosestVowel(\"FULL\").equals(\"U\"),\n                s.getClosestVowel(\"ab\").equals(\"\"),\n                s.getClosestVowel(\"quick\").equals(\"\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a word. Your task is to discover the close vowel that stand between \n     two consonants from the right slope of the word (subject sensible). \n\n     Vowels in the beginning and end doesn't consider. Return empty string if you didn't \n     find oneself any vowel met the above circumstance. \n\n     You may simulate that the given string contains English letter entirely.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < word.length(); i++) {\n            if (i == 0 || i == word.length() - 1) {\n                continue;\n            }\n            char c = word.charAt(i);\n            if (Character.isLetter(c)) {\n                sb.append(c);\n                continue;\n            }\n            char c1 = word.charAt(i - 1);\n            char c2 = word.charAt(i + 1);\n            if (Character.isLetter(c1) && Character.isLetter(c2)) {\n                sb.append(c);\n                continue;\n            }\n            if (Character.isLetter(c1) && Character.isVowel(c2)) {\n                sb.append(c);\n                continue;\n            }\n            if (Character.isVowel(c1) && Character.isLetter(c2)) { partying(sb, c1, c2); }\n        }\n        return sb.toString();\n    }\n    \n    private void party(StringBuilder sb, char c1, char c2) {\n        if (c1 == 'y' && c2 == 'o') {\n            sb.append('u');\n            return;\n        }\n        if (c1 == 'u' && c2 == 'y') {\n            sb.append('o');\n            return;\n        }\n        if (c1 == 'i' && c2 == 'e') {\n            sb.append('a');\n            return;\n        }\n        if (c1 == 'a' && c2 == 'i') {\n            sb.append('e');\n            return;\n        }\n        if (c1 == 'a' && c2 == 'o') {\n            sb.append('e');\n            return;\n        }\n        if (c1 == 'e' && c2 == 'a') {\n            sb.append('i');\n            return;\n        }\n        if (c1 == 'e' && c2 == 'i') {\n            sb.append('o');\n            return;\n        }\n        if (c1 == 'e' && c2 == 'o') {\n            sb.append('a');\n            return;\n        }\n        if (c1 == 'o' && c2 == 'e') {\n            sb.append('i');\n            return;\n        }\n        if (c1 == 'o' && c2 == 'i') {\n            sb.append('a');\n            return;\n        }\n        if (c1 == 'o' && c2 == 'a') {\n            sb.append('e');\n            return;\n        }\n        if (c1 == 'i' && c2 == 'a') {\n            sb.append('e');\n            return;\n        }\n        if (c1 == 'i' && c2 == 'e') {\n            sb.append('o');\n            return;\n        }\n        if (c1 == 'i' && c2 == 'o') {\n            sb.append('a');\n            return;\n        }\n        if (c1 == 'a' && c2 == 'e') {\n            sb.append('i');\n            return;\n        }\n        if (c1 == 'a' && c2 == 'i') {\n            sb.append('o');\n            return;\n        }\n        if (c1 == 'a' && c2 == 'o') {\n            sb.append('e');\n            return;\n        }\n        if (c1 == 'e' && c2 == 'i') {\n            sb.append('a');\n            return;\n        }\n        if (c1 == 'e' && c2 == 'o') {\n            sb.append('i');\n            return;\n        }\n        if (c1 == 'e' && c2 == 'a') {\n            sb.append('i');\n            return;\n        }\n        if (c1 == 'o' && c2 == 'i') {\n            sb.append('a');\n            return;\n        }\n        if (c1 == 'o' && c2 == 'a') {\n            sb.append('e');\n            return;\n        }\n        if (c1 == 'o' && c2 == 'e') {\n            sb.append('i');\n            return;\n        }\n        if (c1 == 'i' && c2 == 'e') {\n            sb.append('a');\n            return;\n        }\n        if (c1 == 'i' && c2 == 'o') {\n            sb.append('a');\n            return;\n        }\n        if (c1 == 'i' && c2 == 'a') {\n            sb.append('e');\n            return;\n        }\n        if (c1 == 'a' && c2 == 'e') {\n            sb.append('i');\n            return;\n        }\n        if (c1 == 'a' && c2 == 'i') {\n            sb.append('o');\n            return;\n        }\n        if (c1 == 'a' && c2 == 'o') {\n            sb.append('e');\n            return;\n        }\n        if (c1 == 'e' && c2 == 'i') {\n            sb.append('a');\n            return;\n        }\n        if (c1 == 'e' && c2 == 'o') {\n            sb.append('i');\n            return;\n        }\n        if (c1 == 'e' && c2 == 'a') {\n            sb.append('i');\n            return;\n        }\n        if (c1 == 'o' && c2", "passed": 0}
{"task_id": "Java/119", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a list of two strings, both string dwell of overt \n     parenthesis \" (\" or cheeseparing parentheses \") \" merely. \n     Your caper is to match if it is potential to concatenate the two strings in\n     some order, that the resulting string will equal good. \n     A string S is consider to equal good if and only if all parentheses in S\n     exist balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n", "canonical_solution": "        List<String> S = Arrays.asList(lst.get(0) + lst.get(1), lst.get(1) + lst.get(0));\n        for (String s : S) {\n            int val = 0;\n            for (char i : s.toCharArray()) {\n                if (i == '(') {\n                    val += 1;\n                } else {\n                    val -= 1;\n                }\n                if (val < 0) {\n                    break;\n                }\n            }\n            if (val == 0) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.matchParens(Arrays.asList(\"()(\", \")\")).equals(\"Yes\"),\n                s.matchParens(Arrays.asList(\")\", \")\")).equals(\"No\"),\n                s.matchParens(Arrays.asList(\"(()(())\", \"())())\")).equals(\"No\"),\n                s.matchParens(Arrays.asList(\")())\", \"(()()(\")).equals(\"Yes\"),\n                s.matchParens(Arrays.asList(\"(())))\", \"(()())((\")).equals(\"Yes\"),\n                s.matchParens(Arrays.asList(\"()\", \"())\")).equals(\"No\"),\n                s.matchParens(Arrays.asList(\"(()(\", \"()))()\")).equals(\"Yes\"),\n                s.matchParens(Arrays.asList(\"((((\", \"((())\")).equals(\"No\"),\n                s.matchParens(Arrays.asList(\")(()\", \"(()(\")).equals(\"No\"),\n                s.matchParens(Arrays.asList(\")(\", \")(\")).equals(\"No\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String matchParens(List<String> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.matchParens(Arrays.asList(\"()(\", \")\")).equals(\"Yes\"),\n                s.matchParens(Arrays.asList(\")\", \")\")).equals(\"No\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a list of two strings, both string dwell of overt \n     parenthesis \" (\" or cheeseparing parentheses \") \" merely. \n     Your caper is to match if it is potential to concatenate the two strings in\n     some order, that the resulting string will equal good. \n     A string S is consider to equal good if and only if all parentheses in S\n     exist balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        int[] stack = new int[lst.size()];\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).equals(\"(\")) {\n                stack[i] = 1;\n            } else if (lst.get(i).equals(\")\")) {\n                stack[i] = -1;\n            }\n        }\n        boolean good = true;\n        for (int i = 0; i < lst.size(); i++) {\n            if (stack[i] == -1) {\n                good = false;\n                break;\n            }\n        }\n        return good? \"Yes\" : \"No\";\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.matchParens(Arrays.asList(\"()(\", \")\")));\n    }\n    public String matchParens(List<String> lst) {\n        int[] stack = new int[lst.size()];\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).equals(\"(\")) {\n                stack[i] = 1;\n            } else if (lst.get(i).equals(\")\")) {\n                stack[i] = -1;\n            }\n        }\n        boolean good = true;\n        for (int i = 0; i < lst.size(); i++) {\n            if (stack[i] == -1) {\n                good = false;\n                break;\n            }\n        }\n        return good? \"Yes\" : \"No\";\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/12", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. fall the beginning one in case of multiple \n     strings of the like length. Return None in font the stimulation list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n", "canonical_solution": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.longest(new ArrayList<>(List.of())).isEmpty(),\n                Objects.equals(s.longest(new ArrayList<>(Arrays.asList(\"x\", \"y\", \"z\"))).get(), \"x\"),\n                Objects.equals(s.longest(new ArrayList<>(Arrays.asList(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).get(), \"zzzz\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> longest(List<String> strings) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.longest(new ArrayList<>(List.of())).isEmpty(),\n                Objects.equals(s.longest(new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"))).get(), \"a\"),\n                Objects.equals(s.longest(new ArrayList<>(Arrays.asList(\"a\", \"bb\", \"ccc\"))).get(), \"ccc\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. fall the beginning one in case of multiple \n     strings of the like length. Return None in font the stimulation list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n externalTo\n        if (strings.size() == 1) {\n            return Optional.of(strings.get(0));\n        }\n        int max = 0;\n        String longest = \"\";\n        for (String s : strings) {\n            if (s.length() > max) {\n                max = s.length();\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}\n\npublic class LongestString {\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<String> strings = Arrays.asList(\"a\", \"bb\", \"ccc\");\n        System.out.println(sol.longest(strings));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/120", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish an array arr of integer and a positive integer k, return a classify list\n     of duration k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n", "canonical_solution": "        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maximum(new ArrayList<>(Arrays.asList(-3, -4, 5)), 3).equals(Arrays.asList(-4, -3, 5)),\n                s.maximum(new ArrayList<>(Arrays.asList(4, -4, 4)), 2).equals(Arrays.asList(4, 4)),\n                s.maximum(new ArrayList<>(Arrays.asList(-3, 2, 1, 2, -1, -2, 1)), 1).equals(List.of(2)),\n                s.maximum(new ArrayList<>(Arrays.asList(123, -123, 20, 0 , 1, 2, -3)), 3).equals(Arrays.asList(2, 20, 123)),\n                s.maximum(new ArrayList<>(Arrays.asList(-123, 20, 0 , 1, 2, -3)), 4).equals(Arrays.asList(0, 1, 2, 20)),\n                s.maximum(new ArrayList<>(Arrays.asList(5, 15, 0, 3, -13, -8, 0)), 7).equals(Arrays.asList(-13, -8, 0, 0, 3, 5, 15)),\n                s.maximum(new ArrayList<>(Arrays.asList(-1, 0, 2, 5, 3, -10)), 2).equals(Arrays.asList(3, 5)),\n                s.maximum(new ArrayList<>(Arrays.asList(1, 0, 5, -7)), 1).equals(List.of(5)),\n                s.maximum(new ArrayList<>(Arrays.asList(4, -4)), 2).equals(Arrays.asList(-4, 4)),\n                s.maximum(new ArrayList<>(Arrays.asList(-10, 10)), 2).equals(Arrays.asList(-10, 10))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> maximum(List<Integer> arr, int k) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maximum(new ArrayList<>(Arrays.asList(-3, -4, 5)), 3).equals(Arrays.asList(-4, -3, 5)),\n                s.maximum(new ArrayList<>(Arrays.asList(4, -4, 4)), 2).equals(Arrays.asList(4, 4)),\n                s.maximum(new ArrayList<>(Arrays.asList(-3, 2, 1, 2, -1, -2, 1)), 1).equals(List.of(2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish an array arr of integer and a positive integer k, return a classify list\n     of duration k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (arr.size() == 0) return res;\n        int max = arr.get(0);\n        int min = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n        }\n        int diff = max - min;\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) - min <= diff / k) {\n                count++;\n            }\n        }\n        if (count > k) {\n            for (int i = 0; i < count; i++) {\n                res.add(arr.get(i));\n            }\n        }\n        return res;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/121", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a non - empty list of integer, return the sum of all of the leftover element that are in even status.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n", "canonical_solution": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if ((lst.get(i) % 2) == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.solution(Arrays.asList(5, 8, 7, 1)) == 12,\n                s.solution(Arrays.asList(3, 3, 3, 3, 3)) == 9,\n                s.solution(Arrays.asList(30, 13, 24, 321)) == 0,\n                s.solution(Arrays.asList(5, 9)) == 5,\n                s.solution(Arrays.asList(2, 4, 8)) == 0,\n                s.solution(Arrays.asList(30, 13, 23, 32)) == 23,\n                s.solution(Arrays.asList(3, 13, 2, 9)) == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int solution(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.solution(Arrays.asList(5, 8, 7, 1)) == 12,\n                s.solution(Arrays.asList(3, 3, 3, 3, 3)) == 9,\n                s.solution(Arrays.asList(30, 13, 24, 321)) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a non - empty list of integer, return the sum of all of the leftover element that are in even status.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.solution(Arrays.asList(5, 8, 7, 1)));\n        System.out.println(s.solution(Arrays.asList(3, 3, 3, 3, 3)));\n        System.out.println(s.solution(Arrays.asList(30, 13, 24, 321)));\n    }\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/122", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a non - empty array of integer arr and an integer k, return\n     the sum of the elements with at most two digits from the inaugural k chemical element of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n", "canonical_solution": "        arr = arr.subList(0, k);\n        Optional<Integer> sum = arr.stream().filter(p -> String.valueOf(Math.abs(p)).length() <= 2).reduce(Integer::sum);\n        return sum.orElse(0);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.addElements(Arrays.asList(1, -2, -3, 41, 57, 76, 87, 88, 99), 3) == -4,\n                s.addElements(Arrays.asList(111, 121, 3, 4000, 5, 6), 2) == 0,\n                s.addElements(Arrays.asList(11, 21, 3, 90, 5, 6, 7, 8, 9), 4) == 125,\n                s.addElements(Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4) == 24,\n                s.addElements(Arrays.asList(1), 1) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int addElements(List<Integer> arr, int k) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.addElements(Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4) == 24\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a non - empty array of integer arr and an integer k, return\n     the sum of the elements with at most two digits from the inaugural k chemical element of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n            if (sum > k) {\n                sum -= arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\npublic class Solution {\n    public int addElements(int[] arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n            sum += arr[i];\n            if (sum > k) {\n                sum -= arr[i];\n            }\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/123", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive integer n, return a sorted list that have the leftover numbers in collatz sequence. \n\n     The Collatz speculation is a speculation in mathematics that concerns a sequence define \n     as follow: start with any positive integer n. Then each term is obtained from the \n     previous term as take after: if the previous terminus is even, the following condition is one half of \n     the former condition. If the previous term be leftover, the adjacent condition is 3 time the previous \n     condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n     eminence: \n         1. Collatz(1) is [ 1 ]. \n         2. return list classify in increase order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n", "canonical_solution": "        List<Integer> odd_collatz = new ArrayList<>();\n        if (n % 2 == 1) {\n            odd_collatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.add(n);\n            }\n        }\n        Collections.sort(odd_collatz);\n        return odd_collatz;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getOddCollatz(14).equals(Arrays.asList(1, 5, 7, 11, 13, 17)),\n                s.getOddCollatz(5).equals(Arrays.asList(1, 5)),\n                s.getOddCollatz(12).equals(Arrays.asList(1, 3, 5)),\n                s.getOddCollatz(1).equals(List.of(1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> getOddCollatz(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getOddCollatz(5).equals(Arrays.asList(1, 5))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive integer n, return a sorted list that have the leftover numbers in collatz sequence. \n\n     The Collatz speculation is a speculation in mathematics that concerns a sequence define \n     as follow: start with any positive integer n. Then each term is obtained from the \n     previous term as take after: if the previous terminus is even, the following condition is one half of \n     the former condition. If the previous term be leftover, the adjacent condition is 3 time the previous \n     condition plus 1. The speculation is that no matter what value of n, the sequence will always achieve 1. \n\n     eminence: \n         1. Collatz(1) is [ 1 ]. \n         2. return list classify in increase order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> res = new ArrayList<Integer>();\n        if(n <= 0) return res;\n        res.add(n);\n        while(n!= 1) {\n            if(n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            res.add(n);\n        }\n        return res;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/124", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You suffer to compose a affair which validate a give date string and \n     returns truthful if the date be valid otherwise false. \n     The date is valid if all of the follow rules are satisfied: \n     1. The date drawstring is not empty. \n     2. The number of day is not less than 1 or higher than 31 day for months 1,3,5,7,8,10,12. And the issue of days is not less than 1 or higher than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or eminent than 29 for the month 2. \n     3. The calendar month should not be less than 1 or high than 12. \n     4. The date should be in the format: mm - dd - yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n", "canonical_solution": "        try {\n            date = date.strip();\n            String[] dates = date.split(\"-\" );\n            String m = dates[0];\n            while (!m.isEmpty() && m.charAt(0) == '0') {\n                m = m.substring(1);\n            }\n            String d = dates[1];\n            while (!d.isEmpty() && d.charAt(0) == '0') {\n                d = d.substring(1);\n            }\n            String y = dates[2];\n            while (!y.isEmpty() && y.charAt(0) == '0') {\n                y = y.substring(1);\n            }\n            int month = Integer.parseInt(m), day = Integer.parseInt(d), year = Integer.parseInt(y);\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (Arrays.asList(4, 6, 9, 11).contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.validDate(\"03-11-2000\" ) == true,\n                s.validDate(\"15-01-2012\" ) == false,\n                s.validDate(\"04-0-2040\" ) == false,\n                s.validDate(\"06-04-2020\" ) == true,\n                s.validDate(\"01-01-2007\" ) == true,\n                s.validDate(\"03-32-2011\" ) == false,\n                s.validDate(\"\" ) == false,\n                s.validDate(\"04-31-3000\" ) == false,\n                s.validDate(\"06-06-2005\" ) == true,\n                s.validDate(\"21-31-2000\" ) == false,\n                s.validDate(\"04-12-2003\" ) == true,\n                s.validDate(\"04122003\" ) == false,\n                s.validDate(\"20030412\" ) == false,\n                s.validDate(\"2003-04\" ) == false,\n                s.validDate(\"2003-04-12\" ) == false,\n                s.validDate(\"04-2003\" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean validDate(String date) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.validDate(\"03-11-2000\" ) == true,\n                s.validDate(\"15-01-2012\" ) == false,\n                s.validDate(\"04-0-2040\" ) == false,\n                s.validDate(\"06-04-2020\" ) == true,\n                s.validDate(\"06/04/2020\" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You suffer to compose a affair which validate a give date string and \n     returns truthful if the date be valid otherwise false. \n     The date is valid if all of the follow rules are satisfied: \n     1. The date drawstring is not empty. \n     2. The number of day is not less than 1 or higher than 31 day for months 1,3,5,7,8,10,12. And the issue of days is not less than 1 or higher than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or eminent than 29 for the month 2. \n     3. The calendar month should not be less than 1 or high than 12. \n     4. The date should be in the format: mm - dd - yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.length() == 0) return false;\n capitalize:\n        for (int i = 0; i < date.length(); i++) {\n            if (date.charAt(i) >= 'A' && date.charAt(i) <= 'Z') {\n                date = date.substring(0, i) + date.substring(i, i + 1).toLowerCase() + date.substring(i + 1);\n                continue capitalize;\n            }\n        }\n        String[] parts = date.split(\"-\");\n        if (parts.length!= 3) return false;\n        int year = Integer.parseInt(parts[2]);\n        int month = Integer droppingZero(parts[1]);\n        int day = Integer.parseInt(parts[0]);\n        if (month < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) return false;\n        } else if (month == 2) {\n            if (day < 1 || day > 29) return false;\n        } else {\n            if (day < 1 || day > 31) return false;\n        }\n        if (year < 0) return false;\n        if (year > 3000) return false;\n        if (year < 1900) return false;\n        if (year > 3000) return false;\n        return true;\n    }\n    private int droppingZero(String s) {\n        if (s.length() == 1) return 0;\n        return Integer.parseInt(s);\n    }\n}\n\npublic class ValidDate {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.validDate(\"03-11-2000\"));\n        System.out.println(s.validDate(\"15-01-2012\"));\n        System.out.println(s.validDate(\"04-0-2040\"));\n        System.out.println(s.validDate(\"06-04-2020\"));\n        System.out.println(s.validDate(\"06 triangular\"));\n        System.out.println(s.validDate(\"06/04/2020\"));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/125", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a string of news, return a list of lyric split on whitespace, if no whitespaces exists in the text you \n     should split on commas',' if no comma exist you should return the numeral of lower - lawsuit letter with odd order in the \n     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n", "canonical_solution": "        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.splitWords(\"Hello world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.splitWords(\"Hello,world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.splitWords(\"Hello world,!\" ), Arrays.asList(\"Hello\", \"world,!\" )),\n                Objects.equals(s.splitWords(\"Hello,Hello,world !\" ), Arrays.asList(\"Hello,Hello,world\", \"!\" )),\n                Objects.equals(s.splitWords(\"abcdef\" ), 3),\n                Objects.equals(s.splitWords(\"aaabb\" ), 2),\n                Objects.equals(s.splitWords(\"aaaBb\" ), 1),\n                Objects.equals(s.splitWords(\"\" ), 0)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object splitWords(String txt) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.splitWords(\"Hello world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.splitWords(\"Hello,world!\" ), Arrays.asList(\"Hello\", \"world!\" )),\n                Objects.equals(s.splitWords(\"abcdef\" ), 3)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a string of news, return a list of lyric split on whitespace, if no whitespaces exists in the text you \n     should split on commas',' if no comma exist you should return the numeral of lower - lawsuit letter with odd order in the \n     alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        if (txt == null || txt.length() == 0) return new ArrayList<String>();\n        String[] words = txt.split(\"\\\\s+\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            if (word.length() == 0) continue;\n            if (word.length() == 1) {\n                if (word.charAt(0) >= 'a' && word.charAt(0) <= 'z') {\n                    result.add(word.toLowerCase());\n                } else if (word.charAt(0) >= 'A' && word.charAt(0) <= 'Z') {\n                    result.add(word.toUpperCase());\n                } else {\n                    result.add(word);\n                }\n            } else {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.splitWords(\"Hello world!\"));\n        System.out.println(s.splitWords(\"Hello,world!\"));\n        System.out.println(s.splitWords(\"abcdef\"));\n    }\n    public List<String> splitWords(String txt) {\n        List<String> result = new ArrayList<String>();\n        if (txt == null || txt.length() == 0) return result;\n        String[] words = txt.split(\"\\\\s+\");\n        for (String word : words) {\n            if (word.length() == 0) continue;\n            if (word.length() == 1) {\n                if (word.charAt(0) >= 'a' && word.charAt(0) <= 'z') {\n                    result.add(word.toLowerCase());\n                } else if (word.charAt(0) >= 'A' && word.charAt(0) <= 'Z') {\n                    result.add(word.toUpperCase());\n                } else {\n                    result.add(word);\n                }\n            } else {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/126", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a list of numbers, return whether or not they are classify \n     in ascend holy order. If list take more than 1 extra of the same \n     act, return false. Assume no minus numbers pool and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n", "canonical_solution": "        List<Integer> sorted_lst = new ArrayList<>(lst);\n        Collections.sort(sorted_lst);\n        if (!lst.equals(sorted_lst)) {\n            return false;\n        }\n        for (int i = 0; i < lst.size() - 2; i++) {\n            if (lst.get(i) == lst.get(i + 1) && lst.get(i) == lst.get(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isSorted(new ArrayList<>(List.of(5))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5, 6, 7))) == false,\n                s.isSorted(new ArrayList<>(List.of())) == true,\n                s.isSorted(new ArrayList<>(List.of(1))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(3, 2, 1))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 2, 2, 3, 4))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 3, 3, 4))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 2, 3, 3, 4))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4))) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isSorted(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isSorted(new ArrayList<>(List.of(5))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7))) == true,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 3, 2, 4, 5, 6, 7))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 2, 2, 3, 4))) == false,\n                s.isSorted(new ArrayList<>(Arrays.asList(1, 2, 2, 3, 3, 4))) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a list of numbers, return whether or not they are classify \n     in ascend holy order. If list take more than 1 extra of the same \n     act, return false. Assume no minus numbers pool and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) return true;horrible(lst);\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < prev) return false;\n            prev = lst.get(i);\n        }\n        return true;\n    }\n\n    private void horrible(List<Integer> lst) {\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < prev) {\n                int prev2 = lst.get(i - 1);\n                if (prev2 == prev) {\n                    lst.remove(i - 1);\n                    lst.remove(i - 1ynasty);\n                }\n            }\n            prev = lst.get(i);\n        }\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/127", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish two intervals, \n     where each interval be a couple of integer. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n", "canonical_solution": "        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        if (length <= 0) {\n            return \"NO\";\n        }\n        if (length == 1) {\n            return \"NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5)), \"YES\" ),\n                Objects.equals(s.intersection(Arrays.asList(-2, 2), Arrays.asList(-4, 0)), \"YES\" ),\n                Objects.equals(s.intersection(Arrays.asList(-11, 2), Arrays.asList(-1, -1)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(1, 2), Arrays.asList(3, 5)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(1, 2), Arrays.asList(1, 2)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(-2, -2), Arrays.asList(-3, -2)), \"NO\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4)), \"NO\" ),\n                Objects.equals(s.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5)), \"YES\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish two intervals, \n     where each interval be a couple of integer. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size()!= interval2.size()) return \"NO\";\n        int start = interval1.get(0);\n        int end = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        if (start > end || start2 > end2) return \"NO\";\n        int count = 0;\n        for (int i = start; i <= end; i++) {\n            for (int j = start2; j <= end2; j++) {\n                if (i == j) continue;\n                if (i < j) {\n                    if (i <= end && j <= end2) count++;\n                } else {\n                    if (i <= end2 && j <= end) count++;\n                }\n            }\n        }\n        if (count == 0) return \"NO\";\n        return \"YES\";\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3)));\n        System.out.println(s.intersection(Arrays.asList( rifle, knife ), Arrays.asList( knife, knife )));\n    }\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size()!= interval2.size()) return \"NO\";\n        int start = interval1.get(0);\n        int end = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        if (start > end || start2 > end2) return \"NO certain\";\n        int count = 0; orcs = 0;\n        for (int i = start; i <= end; i++) {\n            for (int j = start2; j <= end2; j++) {\n                if (i == j) continue;\n                if (i < j) {\n                    if (i <= end && j <= end2) count++;\n                } else {\n                    if (i <= end2 && j <= end) count++;\n                }\n            }\n        }\n        if (count == 0) return \"NO\";\n        return \"YES\";\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/128", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish an array arr of integer and you need to return\n     sum of order of magnitude of integer breed by product of all signs \n     of each act in the array, represented by 1, -1 or 0. \n     bill: return None for empty arr.\n\n     exemplar:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n", "canonical_solution": "        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.prodSigns(Arrays.asList(1, 2, 2, -4)).get() == -9,\n                s.prodSigns(Arrays.asList(0, 1)).get() == 0,\n                s.prodSigns(Arrays.asList(1, 1, 1, 2, 3, -1, 1)).get() == -10,\n                s.prodSigns(List.of()).isEmpty(),\n                s.prodSigns(Arrays.asList(2, 4,1, 2, -1, -1, 9)).get() == 20,\n                s.prodSigns(Arrays.asList(-1, 1, -1, 1)).get() == 4,\n                s.prodSigns(Arrays.asList(-1, 1, 1, 1)).get() == -4,\n                s.prodSigns(Arrays.asList(-1, 1, 1, 0)).get() == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.prodSigns(Arrays.asList(1, 2, 2, -4)).get() == -9,\n                s.prodSigns(Arrays.asList(0, 1)).get() == 0,\n                s.prodSigns(List.of()).isEmpty()\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish an array arr of integer and you need to return\n     sum of order of magnitude of integer breed by product of all signs \n     of each act in the array, represented by 1, -1 or 0. \n     bill: return None for empty arr.\n\n     exemplar:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) return Optional.empty();\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n        }\n        int sign = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                sign = 1;\n            } else if (arr.get(i) < 0) {\n                sign = -1;\n            } else {\n                sign = 0;\n            }\n            sum += sign * arr.get(i);\n        }\n        return Optional.of(sum);\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/129", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a grid with N rows and N column (N > = 2) and a convinced integer k,\n     each cellular telephone of the grid contains a value. Every integer in the scope [ 1, N * N ] \n     inclusive appears precisely once on the cell of the grid.\n\n     You experience to find the minimum path of distance k in the grid. You can start \n     from any cell, and in each footprint you can be active to any of the neighbor cell, \n     in other word, you can go to cellular telephone which share an boundary with you current \n     cell. \n     Please note that a way of distance k mean visit precisely k cell (not \n     inevitably distinct). \n     You CANNOT go off the grid.\n     A way A (of length k) is considered less than a path bacillus (of distance k) if \n     after making the order tilt of the value on the cells that A and B go \n     through (permit's call them lst_A and lst_B), lst_A is lexicographically less \n     than lst_B, in other words, there exist an integer index i (1 < = i < = k)\n     such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n     lst_A[j ] = lst_B[j ]. \n     It is guarantee that the solution is unique. \n     Return an ordered list of the values on the cell that the minimal path function through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n", "canonical_solution": "        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.minPath(Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(4, 5, 6), Arrays.asList(7, 8, 9)), 3).equals(Arrays.asList(1, 2, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(5, 9, 3), Arrays.asList(4, 1, 6), Arrays.asList(7, 8, 2)), 1).equals(List.of(1)),\n                s.minPath(Arrays.asList(Arrays.asList(1, 2, 3, 4), Arrays.asList(5, 6, 7, 8), Arrays.asList(9, 10, 11, 12), Arrays.asList(13, 14, 15, 16)), 4).equals(Arrays.asList(1, 2, 1, 2)),\n                s.minPath(Arrays.asList(Arrays.asList(6, 4, 13, 10), Arrays.asList(5, 7, 12, 1), Arrays.asList(3, 16, 11, 15), Arrays.asList(8, 14, 9, 2)), 7).equals(Arrays.asList(1, 10, 1, 10, 1, 10, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(8, 14, 9, 2), Arrays.asList(6, 4, 13, 15), Arrays.asList(5, 7, 1, 12), Arrays.asList(3, 10, 11, 16)), 5).equals(Arrays.asList(1, 7, 1, 7, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(11, 8, 7, 2), Arrays.asList(5, 16, 14, 4), Arrays.asList(9, 3, 15, 6), Arrays.asList(12, 13, 10, 1)), 9).equals(Arrays.asList(1, 6, 1, 6, 1, 6, 1, 6, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(12, 13, 10, 1), Arrays.asList(9, 3, 15, 6), Arrays.asList(5, 16, 14, 4), Arrays.asList(11, 8, 7, 2)), 12).equals(Arrays.asList(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6)),\n                s.minPath(Arrays.asList(Arrays.asList(2, 7, 4), Arrays.asList(3, 1, 5), Arrays.asList(6, 8, 9)), 8).equals(Arrays.asList(1, 3, 1, 3, 1, 3, 1, 3)),\n                s.minPath(Arrays.asList(Arrays.asList(6, 1, 5), Arrays.asList(3, 8, 9), Arrays.asList(2, 7, 4)), 8).equals(Arrays.asList(1, 5, 1, 5, 1, 5, 1, 5)),\n                s.minPath(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4)), 10).equals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2)),\n                s.minPath(Arrays.asList(Arrays.asList(1, 3), Arrays.asList(3, 2)), 10).equals(Arrays.asList(1, 3, 1, 3, 1, 3, 1, 3, 1, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.minPath(Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(4, 5, 6), Arrays.asList(7, 8, 9)), 3).equals(Arrays.asList(1, 2, 1)),\n                s.minPath(Arrays.asList(Arrays.asList(5, 9, 3), Arrays.asList(4, 1, 6), Arrays.asList(7, 8, 2)), 1).equals(List.of(1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a grid with N rows and N column (N > = 2) and a convinced integer k,\n     each cellular telephone of the grid contains a value. Every integer in the scope [ 1, N * N ] \n     inclusive appears precisely once on the cell of the grid.\n\n     You experience to find the minimum path of distance k in the grid. You can start \n     from any cell, and in each footprint you can be active to any of the neighbor cell, \n     in other word, you can go to cellular telephone which share an boundary with you current \n     cell. \n     Please note that a way of distance k mean visit precisely k cell (not \n     inevitably distinct). \n     You CANNOT go off the grid.\n     A way A (of length k) is considered less than a path bacillus (of distance k) if \n     after making the order tilt of the value on the cells that A and B go \n     through (permit's call them lst_A and lst_B), lst_A is lexicographically less \n     than lst_B, in other words, there exist an integer index i (1 < = i < = k)\n     such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n     lst_A[j ] = lst_B[j ]. \n     It is guarantee that the solution is unique. \n     Return an ordered list of the values on the cell that the minimal path function through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        if (n == 0) return new ArrayList<Integer>();\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = grid.get(i).get halftime(j);\n            }\n        }\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (dp[i][j] == k) {\n                    res.add(grid.get(i).get(j));\n                }\n            }\n        }\n        return res;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/13", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key a greatest coarse divisor of two integer a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n", "canonical_solution": "        if (a == 0 || b == 0) {\n            return a + b;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a % b, b);\n        } else {\n            return greatestCommonDivisor(a, b % a);\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.greatestCommonDivisor(3, 7) == 1,\n                s.greatestCommonDivisor(10, 15) == 5,\n                s.greatestCommonDivisor(49, 14) == 7,\n                s.greatestCommonDivisor(144, 60) == 12\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int greatestCommonDivisor(int a, int b) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.greatestCommonDivisor(3, 5) == 1,\n                s.greatestCommonDivisor(25, 15) == 5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key a greatest coarse divisor of two integer a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) return b;\n        if (b == 0) return a;\n        if (a == b) return a;\n        if (a < b) {\n            int tmp = a;\n            a = b;\n            b = tmp;\n        }\n        int i = 1;\n        while (a % i!= 0) i++;\n        while (b % i!= 0) i++;\n        return i;\n    }\n}\n\npublic class Solution {\n    public int largestCommonDivisor(int a, int b) {\n        if (a == 0) return b;\n        if (b == 0) return a;\n        if (a == b) return a;\n        if (a < b) {\n            int tmp = a;\n            a = b;\n            b = tmp;\n        }\n        int i = 1;\n        while (a % i!= 0) i++;\n        while (b % i!= 0) i++;\n        return i;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/130", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone know Fibonacci succession, it was analyze profoundly by mathematician in\n     the final couple centuries. However, what people don't acknowledge is Tribonacci succession. \n     Tribonacci sequence is define by the recurrence: \n     tri(1) = 3 \n     tri(n) = 1 + n / 2, if n is even. \n     tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n", "canonical_solution": "        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.tri(3).equals(Arrays.asList(1, 3, 2, 8)),\n                s.tri(4).equals(Arrays.asList(1, 3, 2, 8, 3)),\n                s.tri(5).equals(Arrays.asList(1, 3, 2, 8, 3, 15)),\n                s.tri(6).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4)),\n                s.tri(7).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24)),\n                s.tri(8).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5)),\n                s.tri(9).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)),\n                s.tri(20).equals(Arrays.asList(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)),\n                s.tri(0).equals(List.of(1)),\n                s.tri(1).equals(Arrays.asList(1, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> tri(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.tri(3).equals(Arrays.asList(1, 3, 2, 8))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone know Fibonacci succession, it was analyze profoundly by mathematician in\n     the final couple centuries. However, what people don't acknowledge is Tribonacci succession. \n     Tribonacci sequence is define by the recurrence: \n     tri(1) = 3 \n     tri(n) = 1 + n / 2, if n is even. \n     tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (n == 0) return res;\n        res.add(1);\n        res.add(3);\n        if (n == 1) return res;\n        int n1 = 1, n2 = 3, n3 = 2;\n        for (int i = 2; i <= n; i++) {\n            res.add(n1 + n2 +amins(n1, n2, n3));\n            n1 = n2;\n            n2 = n3;\n            n3 = n1 + n2;\n        }\n        return res;\n    }\n\n    private int amins(int n1, int n2, int n3) {\n        if (n1 == n2) return n1;\n        if (n2 == n3) return n2;\n        return n1 + n2 + n3;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/131", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive integer n, return the product of the odd digits.\n     Return 0 if all digits be even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n", "canonical_solution": "        int product = 1, odd_count = 0;\n        for (char digit : String.valueOf(n).toCharArray()) {\n            int int_digit = digit - '0';\n            if (int_digit % 2 == 1) {\n                product *= int_digit;\n                odd_count += 1;\n            }\n        }\n        if (odd_count == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.digits(5) == 5,\n                s.digits(54) == 5,\n                s.digits(120) == 1,\n                s.digits(5014) == 5,\n                s.digits(98765) == 315,\n                s.digits(5576543) == 2625\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digits(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.digits(1) == 1,\n                s.digits(4) == 0,\n                s.digits(235) == 15\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive integer n, return the product of the odd digits.\n     Return 0 if all digits be even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        int count = 0;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                count++;\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return count == 0? 0 : product;\n    }\n}\n\npublic class Solution {\n    public int digits(int n) {\n        int product = 1;\n        int count = 0;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                count++;\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return count == 0 heads? 0 : product;\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/132", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function that take a string as input signal which check only square brackets. \n     The affair should return genuine if and merely if there is a valid subsequence of bracket \n     where at least one bracket in the subsequence is nested. \n\n     isNested(\"[[]]\") - > true \n     isNested(\"[]]]]]]][[[[[]\") - > false \n     isNested(\"[][]\") - > assumed \n     isNested(\"[]\") - > false \n     isNested(\"[[][]]\") - > on-key \n     isNested(\"[[]][[\") - > true \n      * / \n     public boolean isNested(String string) {\n", "canonical_solution": "        List<Integer> opening_bracket_index = new ArrayList<>(), closing_bracket_index = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                opening_bracket_index.add(i);\n            } else {\n                closing_bracket_index.add(i);\n            }\n        }\n        Collections.reverse(closing_bracket_index);\n        int i = 0, l = closing_bracket_index.size();\n        for (int idx : opening_bracket_index) {\n            if (i < l && idx < closing_bracket_index.get(i)) {\n                i += 1;\n            }\n        }\n        return i >= 2;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isNested(\"[[]]\" ),\n                !s.isNested(\"[]]]]]]][[[[[]\" ),\n                !s.isNested(\"[][]\" ),\n                !s.isNested(\"[]\" ),\n                s.isNested(\"[[[[]]]]\" ),\n                !s.isNested(\"[]]]]]]]]]]\" ),\n                s.isNested(\"[][][[]]\" ),\n                !s.isNested(\"[[]\" ),\n                !s.isNested(\"[]]\" ),\n                s.isNested(\"[[]][[\" ),\n                s.isNested(\"[[][]]\" ),\n                !s.isNested(\"\" ),\n                !s.isNested(\"[[[[[[[[\" ),\n                !s.isNested(\"]]]]]]]]\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isNested(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isNested(\"[[]]\" ),\n                !s.isNested(\"[]]]]]]][[[[[]\" ),\n                !s.isNested(\"[][]\" ),\n                !s.isNested(\"[]\" ),\n                s.isNested(\"[[]][[\" ),\n                s.isNested(\"[[][]]\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function that take a string as input signal which check only square brackets. \n     The affair should return genuine if and merely if there is a valid subsequence of bracket \n     where at least one bracket in the subsequence is nested. \n\n     isNested(\"[[]]\") - > true \n     isNested(\"[]]]]]]][[[[[]\") - > false \n     isNested(\"[][]\") - > assumed \n     isNested(\"[]\") - > false \n     isNested(\"[[][]]\") - > on-key \n     isNested(\"[[]][[\") - > true \n      * / \n     public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    */\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.isNested(\"[[]]\"));\n        System.out.println(s.isNested(\"[]]]]]]][[[[[]\"));\n        System.out.println(s.isNested(\"[][]\"));\n        System.out.println(s.isNested(\"[]\"));\n        System.out.println(s.isNested(\"[[][]]\"));\n        System.out.println(s.isNested(\"[[]][[\"));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/133", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a list of numbers. \n     You want to return the sum of square number in the give list,\n     round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n", "canonical_solution": "        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumSquares(Arrays.asList(1., 2., 3.)) == 14,\n                s.sumSquares(Arrays.asList(1.0, 2., 3.)) == 14,\n                s.sumSquares(Arrays.asList(1., 3., 5., 7.)) == 84,\n                s.sumSquares(Arrays.asList(1.4, 4.2, 0.)) == 29,\n                s.sumSquares(Arrays.asList(-2.4, 1., 1.)) == 6,\n                s.sumSquares(Arrays.asList(100., 1., 15., 2.)) == 10230,\n                s.sumSquares(Arrays.asList(10000., 10000.)) == 200000000,\n                s.sumSquares(Arrays.asList(-1.4, 4.6, 6.3)) == 75,\n                s.sumSquares(Arrays.asList(-1.4, 17.9, 18.9, 19.9)) == 1086,\n                s.sumSquares(List.of(0.)) == 0,\n                s.sumSquares(List.of(-1.)) == 1,\n                s.sumSquares(Arrays.asList(-1., 1., 0.)) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Double> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumSquares(Arrays.asList(1., 2., 3.)) == 14,\n                s.sumSquares(Arrays.asList(1., 4., 9.)) == 98,\n                s.sumSquares(Arrays.asList(1., 3., 5., 7.)) == 84,\n                s.sumSquares(Arrays.asList(1.4, 4.2, 0.)) == 29,\n                s.sumSquares(Arrays.asList(-2.4, 1., 1.)) == 6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a list of numbers. \n     You want to return the sum of square number in the give list,\n     round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(double d:lst) {\n            sum += (int)Math.round(Math.pow(d,2));\n        }\n        return sum;\n    }\n}\n\n cryptocurrencies = [\n    {\n        \"name\": \"Bitcoin\",\n        \"symbol\": \"BTC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Litecoin\",\n        \"symbol\": \"LTC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Dogecoin\",\n        \"symbol\": \"DOGE\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Darkcoin\",\n        \"symbol\": \"DRK\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Monero\",\n        \"symbol\": \"XMR\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Zetacoin\",\n        \"symbol\": \"ZET\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        \"price\": \"1.00\",\n        \"volume\": \"1.00\",\n        \"change\": \"0.00\"\n    },\n    {\n        \"name\": \"Nu\",\n        \"symbol\": \"NMC\",\n        ", "passed": 0}
{"task_id": "Java/134", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function that return truthful if the final character \n     of a given string be an alphabetic fictional character and is not \n     a function of a news, and false otherwise. \n     Note: \" discussion \" is a group of characters divide by distance.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n", "canonical_solution": "        String[] words = txt.split(\" \", -1);\n        String check = words[words.length - 1];\n        return check.length() == 1 && Character.isLetter(check.charAt(0));\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.checkIfLastCharIsALetter(\"apple\" ) == false,\n                s.checkIfLastCharIsALetter(\"apple pi e\" ) == true,\n                s.checkIfLastCharIsALetter(\"eeeee\" ) == false,\n                s.checkIfLastCharIsALetter(\"A\" ) == true,\n                s.checkIfLastCharIsALetter(\"Pumpkin pie \" ) == false,\n                s.checkIfLastCharIsALetter(\"Pumpkin pie 1\" ) == false,\n                s.checkIfLastCharIsALetter(\"\" ) == false,\n                s.checkIfLastCharIsALetter(\"eeeee e \" ) == false,\n                s.checkIfLastCharIsALetter(\"apple pie\" ) == false,\n                s.checkIfLastCharIsALetter(\"apple pi e \" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean checkIfLastCharIsALetter(String txt) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.checkIfLastCharIsALetter(\"apple pi e\" ) == true,\n                s.checkIfLastCharIsALetter(\"\" ) == false,\n                s.checkIfLastCharIsALetter(\"apple pie\" ) == false,\n                s.checkIfLastCharIsALetter(\"apple pi e \" ) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function that return truthful if the final character \n     of a given string be an alphabetic fictional character and is not \n     a function of a news, and false otherwise. \n     Note: \" discussion \" is a group of characters divide by distance.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) return false;\n        char c = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(c)) return true;\n        return false;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/135", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function which return the large exponent of an component which \n     be not greater than or adequate to the element immediately precede it. If \n     no such component exist then return -1. The given array will not contain \n     duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n", "canonical_solution": "        int ind = -1, i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ind = i;\n            }\n            i += 1;\n        }\n        return ind;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.canArrange(Arrays.asList(1, 2, 4, 3, 5)) == 3,\n                s.canArrange(Arrays.asList(1, 2, 4, 5)) == -1,\n                s.canArrange(Arrays.asList(1, 4, 2, 5, 6, 7, 8, 9, 10)) == 2,\n                s.canArrange(Arrays.asList(4, 8, 5, 7, 3)) == 4,\n                s.canArrange(List.of()) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int canArrange(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.canArrange(Arrays.asList(1, 2, 4, 3, 5)) == 3,\n                s.canArrange(Arrays.asList(1, 2, 3)) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function which return the large exponent of an component which \n     be not greater than or adequate to the element immediately precede it. If \n     no such component exist then return -1. The given array will not contain \n     duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if(n <= 1) return -1;\n        int[] arr2 = new int[n];\n        int[] arr3 = new int[n];\n        int[] arr4 = new int[n];\n        int[] arr5 = new int[n];\n        int[] arr6 = new int[n];\n        int[] arr7 = new int[n];\n        int[] arr8 = new int[n];\n        int[] arr9 = new int[n];\n        int[] arr10 = new int[n];\n        int[] arr11 = new int[n];\n        int[] arr12 = new int[n];\n        int[] arr13 = new int[n];\n        int[] arr14 = new int[n];\n        int[] arr15 = new int[n];\n        int[] arr16 = new int[n];\n        int[] arr17 = new int[n];\n        int[] arr18 = new int[n];\n        int[] arr19 = new int[n];\n        int[] arr20 = new int[n];\n        int[] arr21 = new int[n];\n        int[] arr22 = new int[n];\n        int[] arr23 = new int[n];\n        int[] arr24 = new int[n];\n        int[] arr25 = new int[n];\n        int[] arr26 = new int[n];\n        int[] arr27 = new int[n];\n        int[] arr28 = new int[n];\n        int[] arr29 = new int[n];\n        int[] arr30 = new int[n];\n        int[] arr31 = new int[n];\n        int[] arr32 = new int[n];\n        int[] arr33 = new int[n];\n        int[] arr34 = new int[n];\n        int[] arr35 = new int[n];\n        int[] arr36 = new int[n];\n        int[] arr37 = new int[n];\n        int[] arr38 = new int[n];\n        int[] arr39 = new int[n];\n        int[] arr40 = new int[n];\n        int[] arr41 = new int[n];\n        int[] arr42 = new int[n];\n        int[] arr43 = new int[n];\n        int[] arr44 = new int[n];\n        int[] arr45 = new int[n];\n        int[] arr46 = new int[n];\n        int[] arr47 = new int[n];\n        int[] arr48 = new int[n];\n        int[] arr49 = new int[n];\n        int[] arr50 = new int[n];\n        int[] arr51 = new int[n];\n        int[] arr52 = new int[n];\n        int[] arr53 = new int[n];\n        int[] arr54 = new int[n];\n        int[] arr55 = new int[n];\n        int[] arr56 = new int[n];\n        int[] arr57 = new int[n];\n        int[] arr58 = new int[n];\n        int[] arr59 = new int[n];\n        int[] arr60 = new int[n];\n        int[] arr61 = new int[n];\n        int[] arr62 = new int[n];\n        int[] arr63 = new int[n];\n        int[] arr64 = new int[n];\n        int[] arr65 = new int[n];\n        int[] arr66 = new int[n];\n        int[] arr67 = new int[n];\n        int[] arr68 = new int[n];\n        int[] arr69 = new int[n];\n        int[] arr70 = new int[n];\n        int[] arr71 = new int[n];\n        int[] arr72 = new int[n];\n        int[] arr73 = new int[n];\n        int[] arr74 = new int[n];\n        int[] arr75 = new int[n];\n        int[] arr76 = new int[n];\n        int[] arr77 = new int[n];\n        int[] arr78 = new int[n];\n        int[] arr79 = new int[n];\n        int[] arr80 = new int[n];\n        int[] arr81 = new int[n];\n        int[] arr82 = new int[n];\n        int[] arr83 = new int[n];\n        int[] arr84 = new int[n];\n        int[] arr85 = new int[n];\n        int[] arr86 = new int[n];\n        int[] arr87 = new int[n];\n        int[] arr88 = new int[n];\n        int[] arr89 = new int[n];\n        int[] arr90 = new int[n];\n        int[] arr91 = new int[n];\n        int[] arr92 = new int[n];\n        int[] arr93 = new int[n];\n        int[] arr94 = new int[n];\n        int[] arr95 = new int[n];\n        int[] arr96 = new int[n];\n        int[] arr97 = new int[n];\n        int[] arr98 = new int[n];\n        int[] arr99 = new int[n];\n        int[] arr100 = new int[n];\n        int[] arr101 = new int[n];\n        int[] arr102 = new int[n];\n        int[] arr103 = new int[n];\n        int[] arr104 = new int[n];\n        int[] arr105 = new int[n];\n        int[] arr106 = new int[n];\n        int[] arr107 = new int[n];\n        int[] arr108 = new int[n];\n        int[] arr109 = new int[n];\n        int[] arr110 = new int[n];\n        int[] arr111 = new int[n];\n        int[] arr112 = new int[n];\n        int[] arr113 = new int[n];\n        int[] arr114 = new int[n];\n        int[] arr115 = new int[n];\n", "passed": 0}
{"task_id": "Java/136", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function that return a tuple (a, bacillus), where' a' is \n     the largest of damaging integer, and' b' is the smallest\n     of incontrovertible integers in a list.\n     If there is no damaging or incontrovertible integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n", "canonical_solution": "        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)).equals(Arrays.asList(Optional.empty(), Optional.of(1))),\n                s.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7, 0)).equals(Arrays.asList(Optional.empty(), Optional.of(1))),\n                s.largestSmallestIntegers(Arrays.asList(1, 3, 2, 4, 5, 6, -2)).equals(Arrays.asList(Optional.of(-2), Optional.of(1))),\n                s.largestSmallestIntegers(Arrays.asList(4, 5, 3, 6, 2, 7, -7)).equals(Arrays.asList(Optional.of(-7), Optional.of(2))),\n                s.largestSmallestIntegers(Arrays.asList(7, 3, 8, 4, 9, 2, 5, -9)).equals(Arrays.asList(Optional.of(-9), Optional.of(2))),\n                s.largestSmallestIntegers(List.of()).equals(Arrays.asList(Optional.empty(), Optional.empty())),\n                s.largestSmallestIntegers(List.of(0)).equals(Arrays.asList(Optional.empty(), Optional.empty())),\n                s.largestSmallestIntegers(Arrays.asList(-1, -3, -5, -6)).equals(Arrays.asList(Optional.of(-1), Optional.empty())),\n                s.largestSmallestIntegers(Arrays.asList(-1, -3, -5, -6, 0)).equals(Arrays.asList(Optional.of(-1), Optional.empty())),\n                s.largestSmallestIntegers(Arrays.asList(-6, -4, -4, -3, 1)).equals(Arrays.asList(Optional.of(-3), Optional.of(1))),\n                s.largestSmallestIntegers(Arrays.asList(-6, -4, -4, -3, -100, 1)).equals(Arrays.asList(Optional.of(-3), Optional.of(1)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)).equals(Arrays.asList(Optional.empty(), Optional.of(1))),\n                s.largestSmallestIntegers(List.of()).equals(Arrays.asList(Optional.empty(), Optional.empty())),\n                s.largestSmallestIntegers(List.of(0)).equals(Arrays.asList(Optional.empty(), Optional.empty()))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function that return a tuple (a, bacillus), where' a' is \n     the largest of damaging integer, and' b' is the smallest\n     of incontrovertible integers in a list.\n     If there is no damaging or incontrovertible integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        if(lst.isEmpty()){\n            return res;\n        }\n        Collections.sort(lst);\n        Optional<Integer> largest = Optional.empty();\n        Optional<Integer> smallest = Optional.empty();\n        for(int i = 0; i < lst.size(); i++){\n            if(largest.isPresent() && lst.get(i) > largest.get()){\n                largest = Optional.of(lst.get(i));\n            }else if(smallest.isPresent() && lst.get(i) < smallest.get()){ Artist.print(smallest.get());\n                smallest = Optional.of(lst.get(i));\n            }\n        }\n        res.add(largest);\n        res.add(smallest);\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/137", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function that take integer, float, or drawstring representing \n     real phone number, and render the large variable in its give varying type. \n     Return None if the values are adequate. \n     Note: If a real number is represented as a chain, the floating compass point might be. or, \n\n     compareOne(1, 2.5) - > Optional.of(2.5)\n     compareOne(1, \" 2,3 \") - > Optional.of(\"2,3\")\n     compareOne(\"5,1\", \" 6 \") - > Optional.of(\"6\")\n     compareOne(\"1\", 1) - > Optional.empty()\n      * / \n     public Optional<Object> compareOne(Object a, Object b) {\n", "canonical_solution": "        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                (int) s.compareOne(1, 2).get() == 2,\n                (double) s.compareOne(1, 2.5).get() == 2.5,\n                (int) s.compareOne(2, 3).get() == 3,\n                (int) s.compareOne(5, 6).get() == 6,\n                (String) s.compareOne(1, \"2,3\").get() == \"2,3\",\n                (String) s.compareOne(\"5,1\", \"6\").get() == \"6\",\n                (String) s.compareOne(\"1\", \"2\").get() == \"2\",\n                s.compareOne(\"1\", 1).isEmpty()\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n   compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Object> compareOne(Object a, Object b) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                (double) s.compareOne(1, 2.5).get() == 2.5,\n                (String) s.compareOne(1, \"2,3\").get() == \"2,3\",\n                (String) s.compareOne(\"5,1\", \"6\").get() == \"6\",\n               s.compareOne(\"1\", 1).isEmpty()\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function that take integer, float, or drawstring representing \n     real phone number, and render the large variable in its give varying type. \n     Return None if the values are adequate. \n     Note: If a real number is represented as a chain, the floating compass point might be. or, \n\n     compareOne(1, 2.5) - > Optional.of(2.5)\n     compareOne(1, \" 2,3 \") - > Optional.of(\"2,3\")\n     compareOne(\"5,1\", \" 6 \") - > Optional.of(\"6\")\n     compareOne(\"1\", 1) - > Optional.empty()\n      * / \n     public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return compare((Integer) a, (Integer) b Pants.compare((Integer) a, (Integer) b));\n            } else if (b instanceof Float) {\n                return compare((Integer) a, (Float) b);\n            } else iftein (b instanceof String) {\n                return compare((Integer) a, (String) b);\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return compare((Float) a, (Integer) b);\n            } else if (b instanceof Float) {\n                return compare((Float) a, (Float) b);\n            } else if (b instanceof String) {\n                return compare((Float) a, (String) b);\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return compare((String) a, (Integer) b);\n            } else if (b instanceof Float) {\n                return compare((String) a, (Float) b);\n            } else if (b instanceof String) {\n                return compare((String) a, (String) b);\n            }\n        }\n        return Optional.empty();\n    }\n    \n    public Optional<Object> compare(Integer a, Integer b) {\n        return Optional.of(a - b);\n    }\n    \n    public Optional<Object> compare(Float a, Integer b) {hood\n        return Optional.of(a - b);\n    }\n    \n    public Optional<Object> compare(Integer a, Float b) {\n        return Optional.of(a - b);\n    }\n    \n    public Optional<Object> compare(Float a, Float b) {\n        return Optional.of(a - b);\n    }\n    \n    public Optional<Object> compare(String a, Integer b) {\n        return Optional.of(a.length() - b);\n    }\n    \n    public Optional<Object> compare(Integer a, String b) {\n        return Optional.of(a.length() - b.length());\n    }\n    \n    public Optional<Object> compare(String a, Float b) {\n        return Optional.of(a.length() - b);\n    }\n    \n    public Optional<Object> compare(Float a, String b) {\n        return Optional.of(a.length() - b.length());\n    }\n    \n    public Optional<Object> compare(String a, String b) {\n        return Optional.of(a.length() - b.length());\n    }\n    \n    public Optional<Object> compare(String a, Integer b) {\n        return Optional.of(a.length() - b);\n    }\n    \n    public Optional<Object> compare(Integer a, String b) {\n        returnistrate(a, b);\n    }\n    \n    public Optional<Object> compare(String a, Float b) {\n        return Optional.of(a.length() - b);\n    }\n    \n    public Optional<Object> compare(Float a, String b) {\n        return Optional.of(a.length() - b);\n    }\n    \n    public Optional<Object> compare(String a, Float b) {\n        return Optional.of(a.length() - b);\n    }\n    \n    public Optional<Object> compare(Float a, Float b) {\n        return Optional.of(a - b);\n    }\n    \n    public Optional<Object> compare(Integer a, Float b) {\n        return Optional.of(a - b);\n    }\n    \n    public Optional<Object> compare(Float a, Integer b) {\n        return Optional.of(a - b);\n    }\n    \n    public Optional<Object> compare(Integer a, Integer b) {\n        return Optional.of(a - b);\n    }\n    \n    public Optional<Object> compare(Float a, Float b) {\n        return Optional.of(a - b);\n    }\n    \n    public Optional<Object> compare(Integer a, Integer b) {\n        return Optional.of(a - b);\n    }\n    \n    public Optional<Object> compare(Integer a, Float b) {\n        return Optional.of(a - b);\n    }\n    \n    public Optional<Object> compare(Float a, Integer b) {\n        return Optional.of(a - b);\n    }\n    \n    public Optional<Object> compare(Float a, Float b) {\n        return Optional.of(a - b);\n    }\n    \n    public Optional<Object> compare(String a, String b) {\n        return Optional.of(a.length() - b.length());\n    }\n    \n    public Optional<Object> compare(String a, Integer b) {\n        return Optional.of(a.length() - b);\n    }\n    \n    public Optional<Object> compare(Integer a, String b) {\n        return Optional.of(a.length() - b.length());\n    }\n    \n    public Optional<Object> compare(String a, Float b) {\n        return Optional.of(a.length() - b);\n    }\n    \n    public Optional<Object> compare(Float a, String b) {\n        return Optional.of(a.length() - b.length());\n    }\n    \n    public Optional<Object> compare(String a, Float b) {\n        return Optional.of(a.length() - b);\n    }\n    \n    public Optional<Object> compare(Float a, Float b) {\n        return Optional.of(a - b);\n    }\n    \n    public Optional<Object> compare(Integer a, Integer b) {\n        return Optional.of(a", "passed": 0}
{"task_id": "Java/138", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    measure whether the given issue n can be written as the union of precisely 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n", "canonical_solution": "        return n % 2 == 0 && n >= 8;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isEqualToSumEven(4) == false,\n                s.isEqualToSumEven(6) == false,\n                s.isEqualToSumEven(8) == true,\n                s.isEqualToSumEven(10) == true,\n                s.isEqualToSumEven(11) == false,\n                s.isEqualToSumEven(12) == true,\n                s.isEqualToSumEven(13) == false,\n                s.isEqualToSumEven(16) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isEqualToSumEven(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isEqualToSumEven(4) == false,\n                s.isEqualToSumEven(6) == false,\n                s.isEqualToSumEven(8) == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    measure whether the given issue n can be written as the union of precisely 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if (n < 4) return false;\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/139", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is define as: \n     brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n     where n > 0 \n\n     For exercise:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n", "canonical_solution": "        long fact_i = 1, special_fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact *= fact_i;\n        }\n        return special_fact;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.specialFactorial(4) == 288,\n                s.specialFactorial(5) == 34560,\n                s.specialFactorial(7) == 125411328000L,\n                s.specialFactorial(1) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public long specialFactorial(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.specialFactorial(4) == 288\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is define as: \n     brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n     where n > 0 \n\n     For exercise:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        if (n < 0) {\n            return 0;\n        }\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}\n\npublic class Factorial {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        long result = solution.specialFactorial(4);\n        System.out.println(result);\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/14", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key list of all prefixes from shortest to longest of the remark string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n", "canonical_solution": "        List<String> result = new ArrayList<>();\n\n        for (int i = 1; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.allPrefixes(\"\").equals(List.of()),\n                s.allPrefixes(\"asdfgh\").equals(Arrays.asList(\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\")),\n                s.allPrefixes(\"WWW\").equals(Arrays.asList(\"W\", \"WW\", \"WWW\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> allPrefixes(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.allPrefixes(\"abc\").equals(Arrays.asList(\"a\", \"ab\", \"abc\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key list of all prefixes from shortest to longest of the remark string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<String>();\n        if(string == null || string.length() == 0) return result;\n        \n        String[] strs = string.split(\"\");\n        for(int i = 0; i < strs.length; i++) {\n            for(int j = i; j < strs.length; j++) {\n                String prefix = strs[i] + strs[j];\n                if(!result.contains(prefix)) {\n                    result.add(prefix);\n                }\n            }\n        }\n        return result;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/140", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a string text, replace all space in it with underscore, \n     and if a chain has more than 2 back-to-back space, \n     then substitute all back-to-back spaces with - \n\n     fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"_\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.fixSpaces(\"Example\" ), \"Example\" ),\n                Objects.equals(s.fixSpaces(\"Mudasir Hanif \" ), \"Mudasir_Hanif_\" ),\n                Objects.equals(s.fixSpaces(\"Yellow Yellow  Dirty  Fellow\" ), \"Yellow_Yellow__Dirty__Fellow\" ),\n                Objects.equals(s.fixSpaces(\"Exa   mple\" ), \"Exa-mple\" ),\n                Objects.equals(s.fixSpaces(\"   Exa 1 2 2 mple\" ), \"-Exa_1_2_2_mple\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String fixSpaces(String text) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.fixSpaces(\"Example\" ), \"Example\" ),\n                Objects.equals(s.fixSpaces(\"Example 1\" ), \"Example_1\" ),\n                Objects.equals(s.fixSpaces(\" Example 2\" ), \"_Example_2\" ),\n                Objects.equals(s.fixSpaces(\" Example   3\" ), \"_Example-3\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a string text, replace all space in it with underscore, \n     and if a chain has more than 2 back-to-back space, \n     then substitute all back-to-back spaces with - \n\n     fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c =='') {\n                sb.append('_');\n            } else {\n                sb.append(c);\n decorate(sb);\n            }\n        }\n        return sb.toString();\n    }\n\n    private void decorate(StringBuilder sb) {\n        int i = 0;\n        while (i < sb.length() - 1) {\n            if (sb.charAt(i) =='' && sb.charAt(i + 1) =='') {\n                sb.replace(i, i + 2, \"-\");\n                i += 2;\n            } else {\n                i++;\n            }\n        }\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.fixSpaces(\"Example\"));\n        System.out.println(s.fixSpaces(\"Example 1\"));\n        System.out.println(s.fixSpaces(\" Example 2\"));\n        System.out.println(s.fixSpaces(\" Example   3\"));\n    }\n\n    public String fixSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c tum == reimbursement) {\n                sb.append('_');\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/141", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function which take a bowed stringed instrument defend a file's name, and returns \n     \" Yes \" if the the file's name is valid, and returns \" No \" differently. \n     A file's name is considered to exist valid if and only if all the following condition \n     are met: \n     - There should not be more than three digit (' 0'-'9') in the file's name. \n     - The file's name contains exactly one dot'.' \n     - The substring before the dot should not be empty, and it starts with a letter from \n     the latin alphapet (' a'-'z' and' A'-'Z'). \n     - The substring after the dot should cost one of these: [ \" txt \", \" exe \", \" dll \" ]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n", "canonical_solution": "        List<String> suf = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        String[] lst = file_name.split(\"\\\\.\" );\n        if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty() || !Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = (int) lst[0].chars().map(x -> (char) x).filter(Character::isDigit).count();\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.filenameCheck(\"example.txt\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"1example.dll\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"s1sdf3.asd\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"K.dll\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"MY16FILE3.exe\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"His12FILE94.exe\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"_Y.txt\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"?aREYA.exe\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"/this_is_valid.dll\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"this_is_valid.wow\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"this_is_valid.txt\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"this_is_valid.txtexe\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"#this2_i4s_5valid.ten\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"@this1_is6_valid.exe\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"this_is_12valid.6exe4.txt\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"all.exe.txt\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"I563_No.exe\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"Is3youfault.txt\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"no_one#knows.dll\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"1I563_Yes3.exe\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"I563_Yes3.txtt\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"final..txt\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"final132\" ), \"No\" ),\n                Objects.equals(s.filenameCheck(\"_f4indsartal132.\" ), \"No\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String filenameCheck(String file_name) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.filenameCheck(\"example.txt\" ), \"Yes\" ),\n                Objects.equals(s.filenameCheck(\"1example.dll\" ), \"No\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "filenameCheck", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function which take a bowed stringed instrument defend a file's name, and returns \n     \" Yes \" if the the file's name is valid, and returns \" No \" differently. \n     A file's name is considered to exist valid if and only if all the following condition \n     are met: \n     - There should not be more than three digit (' 0'-'9') in the file's name. \n     - The file's name contains exactly one dot'.' \n     - The substring before the dot should not be empty, and it starts with a letter from \n     the latin alphapet (' a'-'z' and' A'-'Z'). \n     - The substring after the dot should cost one of these: [ \" txt \", \" exe \", \" dll \" ]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] str = file_name.split(\"\\\\.\");\n        if (str.length!= 2) return \"No\";\n        if (str[0].length() == 0) return \"No\";\n        if (str[0].length() > 3) return \"No\";\n        if (str[1].length() == 0) return \"No\";\n        if (str[1].length() > 3) return \"No\";\n        if (str[1].length() == 1) return \"No\";\n        if (str[1].charAt(0)!= 't' && str[1].charAt(0)!= 'x' && str[1].charAt(0)!= 'e' && str[1].charAt(0)!= 'd' && str[1].charAt(0)!= 'l') return \"No\";\n        if (str[1].charAt(1)!= '.') return \"No\";\n        return \"Yes\";\n    }\n}\n\npublic class ValidFilename {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.filenameCheck(\"1example.txt\"));\n        System.out.println(s.filenameCheck(\"1example.exe\"));\n        System.out.println(s.filenameCheck(\"1example.dll\"));\n        System.out.println(s.filenameCheck(\"1example.d\"));\n        System.out.println(s.filenameCheck(\"1example.1\"));\n        System.out.println(s.filenameCheck(\"1example.1.txt\"));\n        System.out.println(s.filenameCheck(\"1example.1.exe\"));\n        System.out.println(s.filenameCheck(\"1example.1.dll\"));\n        System.out.println(s.filenameCheck(\"1example.1.d\"));\n        System.out.println(s.filenameCheck(\"1example.1.1\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.txt\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.exe\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.dll\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.d\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.txt\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.exe\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.dll\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.d\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.txt\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.exe\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.dll\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.d\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.1\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.1.txt\"));\n        System.out.println(s.filenameCheck(\"1example.1.1 ties\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.1.txt\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.1.exe\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.1.dll\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.1.d\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.1.1\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.1.1.txt\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.1.1.exe\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.1.1.dll\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.1.1.d\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.1.1.1\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.1.1.1.txt\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.1.1.1.1.exe\"));\n        System.out.println(s.filenameCheck(\"1example.1.1.1.", "passed": 0}
{"task_id": "Java/142", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This affair will take a list of integer. For all entries in the list, the routine shall feather the integer entry if its index be a \n     multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n     change the introduction in the list whose indexes are not a multiple of 3 or 4. The routine shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumSquares(Arrays.asList(1,2,3)) == 6,\n                s.sumSquares(Arrays.asList(1,4,9)) == 14,\n                s.sumSquares(List.of()) == 0,\n                s.sumSquares(Arrays.asList(1,1,1,1,1,1,1,1,1)) == 9,\n                s.sumSquares(Arrays.asList(-1,-1,-1,-1,-1,-1,-1,-1,-1)) == -3,\n                s.sumSquares(List.of(0)) == 0,\n                s.sumSquares(Arrays.asList(-1,-5,2,-1,-5)) == -126,\n                s.sumSquares(Arrays.asList(-56,-99,1,0,-2)) == 3030,\n                s.sumSquares(Arrays.asList(-1,0,0,0,0,0,0,0,-1)) == 0,\n                s.sumSquares(Arrays.asList(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37)) == -14196,\n                s.sumSquares(Arrays.asList(-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10)) == -1448\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumSquares(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumSquares(Arrays.asList(1,2,3)) == 6,\n                s.sumSquares(List.of()) == 0,\n                s.sumSquares(Arrays.asList(-1,-5,2,-1,-5)) == -126\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This affair will take a list of integer. For all entries in the list, the routine shall feather the integer entry if its index be a \n     multiple of 3 and will cube the integer entry if its exponent is a multiple of 4 and not a multiple of 3. The function will not \n     change the introduction in the list whose indexes are not a multiple of 3 or 4. The routine shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}<|endoftext|>", "passed": 1}
{"task_id": "Java/143", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a string exemplify a sentence,\n     the sentence incorporate some discussion separate by a space, \n     and you have to return a bowed stringed instrument that control the actor's line from the original sentence,\n     whose duration be prime numbers, \n     the order of the word in the new string should embody the like as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n", "canonical_solution": "        List<String> new_lst = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            if (word.length() == 1) {\n                continue;\n            }\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                new_lst.add(word);\n            }\n        }\n        return String.join(\" \", new_lst);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.wordsInSentence(\"This is a test\" ), \"is\" ),\n                Objects.equals(s.wordsInSentence(\"lets go for swimming\" ), \"go for\" ),\n                Objects.equals(s.wordsInSentence(\"there is no place available here\" ), \"there is no place\" ),\n                Objects.equals(s.wordsInSentence(\"Hi I am Hussein\" ), \"Hi am Hussein\" ),\n                Objects.equals(s.wordsInSentence(\"go for it\" ), \"go for it\" ),\n                Objects.equals(s.wordsInSentence(\"here\" ), \"\" ),\n                Objects.equals(s.wordsInSentence(\"here is\" ), \"is\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String wordsInSentence(String sentence) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.wordsInSentence(\"This is a test\" ), \"is\" ),\n                Objects.equals(s.wordsInSentence(\"lets go for swimming\" ), \"go for\" )\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a string exemplify a sentence,\n     the sentence incorporate some discussion separate by a space, \n     and you have to return a bowed stringed instrument that control the actor's line from the original sentence,\n     whose duration be prime numbers, \n     the order of the word in the new string should embody the like as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] durations = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            durations[i] = words[i].length();\n        }\n        Arrays.sort(durations);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < durations.length; i++) {\n            sb.append(words[i]);\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/144", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your undertaking is to implement a routine that will simplify the saying \n     x * n. The routine return true if x * n evaluates to a unharmed numeral and assumed \n     otherwise. Both x and n, are drawstring theatrical performance of a fraction, and have the following format, \n     <numerator>/<denominator> where both numerator and denominator are positive whole number. \n\n     You can assume that x, and n are valid fraction, and do not consume zero as denominator. \n\n     simplify(\"1/5\", \" 5/1 \") = truthful \n     simplify(\"1/6\", \" 2/1 \") = false \n     simplify(\"7/10\", \" 10/2 \") = fake \n      * / \n     public boolean simplify(String x, chain n) {\n", "canonical_solution": "        String[] a = x.split(\"/\");\n        String[] b = n.split(\"/\");\n        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);\n        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);\n        return numerator / denom * denom == numerator;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.simplify(\"1/5\", \"5/1\") == true,\n                s.simplify(\"1/6\", \"2/1\") == false,\n                s.simplify(\"5/1\", \"3/1\") == true,\n                s.simplify(\"7/10\", \"10/2\") == false,\n                s.simplify(\"2/10\", \"50/10\") == true,\n                s.simplify(\"7/2\", \"4/2\") == true,\n                s.simplify(\"11/6\", \"6/1\") == true,\n                s.simplify(\"2/3\", \"5/2\") == false,\n                s.simplify(\"5/2\", \"3/5\") == false,\n                s.simplify(\"2/4\", \"8/4\") == true,\n                s.simplify(\"2/4\", \"4/2\") == true,\n                s.simplify(\"1/5\", \"5/1\") == true,\n                s.simplify(\"1/5\", \"1/5\") == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean simplify(String x, String n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.simplify(\"1/5\", \"5/1\") == true,\n                s.simplify(\"1/6\", \"2/1\") == false,\n                s.simplify(\"7/10\", \"10/2\") == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your undertaking is to implement a routine that will simplify the saying \n     x * n. The routine return true if x * n evaluates to a unharmed numeral and assumed \n     otherwise. Both x and n, are drawstring theatrical performance of a fraction, and have the following format, \n     <numerator>/<denominator> where both numerator and denominator are positive whole number. \n\n     You can assume that x, and n are valid fraction, and do not consume zero as denominator. \n\n     simplify(\"1/5\", \" 5/1 \") = truthful \n     simplify(\"1/6\", \" 2/1 \") = false \n     simplify(\"7/10\", \" 10/2 \") = fake \n      * / \n     public boolean simplify(String x, chain n) {\n        if (x.length() == 0) return false;\n        if (n.length() == 0) return false;\n        if (x.length()!= n.length()) return false;\n        int xn = Integer.parseInt(x);\n        int nn = Integer.parseInt(n.get());\n        if (xn == 0) return false;\n        if (nn == 0) return false;\n        if (nn == 1) return true;\n        if (nn == xn) return true;\n        return false;\n    }\n    */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for(int a0 = 0 ; a0 < t; a0++){\n            int n = in.nextInt();\n            int x = in.nextInt();\n            int xn = x;\n            int nn = n;\n            if (xn == 0) {\n                System.out.println(\"0\");\n                continue;\n            }\n            if (nn == 0) {\n                System.out.println(\"0\");\n                continue;\n            }\n            if (nn == 1) {\n                System.out.println(x);\n                continue;\n            }\n            if (nn == xn) {\n                System.out.println(x);\n                continue;\n            }\n            if (nn > xn) {\n                int temp = nn;\n                nn = xn;\n                xn = temp;\n            }\n            int xn1 = xn;\n            int nn1 = nn;\n            int xn2 = xn1;\n            int nn2 = nn1;\n            while (nn2 > 1) {\n                xn2 = xn2 * 2;\n                nn2 = nn2 / 2;\n            }\n            while (nn1 > 1) {\n                xn1 = xn1 * 2;\n                nn1 = nn1 / 2;\n            }\n            if (xn1 == xn2) {\n                System.out.println(x);\n                continue;\n            }\n            if (xn1 > xn2) {\n                int temp = xn1;\n                xn1 = xn2;\n                xn2 = temp;\n            }\n            if (nn1 > nn2) {\n                int temp = nn1;\n                nn1 = nn2;\n                nn2 = temp;\n            }\n            if (nn1 == nn2) {\n                System.out.println(x);\n                continue;\n            }\n            if (nn1 > nn2) {\n                int temp = nn1;\n                nn1 = nn2;\n                nn2 = temp;\n            }\n            if (nn1 == nn2) {\n                System.out.println(x);\n                continue;\n            }\n            if (nn1 < nn2) {\n                int temp = nn1;\n                nn1 = nn2;\n                nn2 = temp;\n            }\n            if (nn1 == nn2) {\n                System.out.println(x);\n                continue;\n            }\n            if (nn1 < nn2) {\n                int temp = nn1;\n                nn Carolyn = new Carolyn();\n                nn1 = nn2;\n                nn2 = temp;\n            }\n            if (nn1 == nn2) {\n                System.out.println(x);\n                continue;\n            }\n            if (nn1 < nn2) {\n                int temp = nn1;\n                nn1 = nn2;\n                nn2 = temp;\n            }\n            if (nn1 == nn2) {\n                System.out.println(x);\n                continue;\n            }\n            if (nn1 < nn2) {\n                int temp = nn1;\n                nn1 = nn2;\n                nn2 = temp;\n            }\n            if (nn1 == nn2) {\n                System.out.println(x);\n                continue;\n            }\n            if (nn1 < nn2) {\n                int temp = nn1;\n                nn1 = nn2;\n                nn2 = temp;\n            }\n            if (nn1 == nn2) {\n                System.out.println(x);\n                continue;\n            }\n            if (nn1 < nn2) {\n                int temp = nn1;\n                nn1 = nn2;\n                nn2 = temp;\n            }\n            if (nn1 == nn2) {\n                System.out.println(x);\n                continue;\n            }\n            if (nn1 < nn2) {\n                int temp = nn1;\n                nn1 = nn2;\n                nn2 = temp;\n            }\n            if (nn1 == nn2) {\n                System.out.println(x);\n                continue;\n            }\n            if (nn1 < nn2) {\n                int temp = nn1;\n                nn1 = nn2;\n                nn2 = temp;\n            }\n            if (nn1 == nn2) {\n                System.out.println(x);\n                continue;\n            }\n            if (nn1 < nn2) {\n                int temp = nn1;\n                nn1 = nn2;\n                nn2 = temp;\n            }\n            if (nn1 == nn2) {\n                System.out.println(x);\n                continue;\n            }\n            if (nn1 < nn", "passed": 0}
{"task_id": "Java/145", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function which classify the pass list of integer \n     in ascend decree according to the kernel of their digit. \n     Note: if there be several detail with alike sum of their digits, \n     order them base on their index in original list.\n\n     For exemplar:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.orderByPoints(new ArrayList<>(Arrays.asList(1, 11, -1, -11, -12))).equals(Arrays.asList(-1, -11, 1, -12, 11)),\n                s.orderByPoints(new ArrayList<>(Arrays.asList(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46))).equals(Arrays.asList(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)),\n                s.orderByPoints(new ArrayList<>(List.of())).equals(List.of()),\n                s.orderByPoints(new ArrayList<>(Arrays.asList(1, -11, -32, 43, 54, -98, 2, -3))).equals(Arrays.asList(-3, -32, -98, -11, 1, 2, 43, 54)),\n                s.orderByPoints(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).equals(Arrays.asList(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9)),\n                s.orderByPoints(new ArrayList<>(Arrays.asList(0, 6, 6, -76, -21, 23, 4))).equals(Arrays.asList(-76, -21, 0, 4, 23, 6, 6))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.orderByPoints(new ArrayList<>(Arrays.asList(1, 11, -1, -11, -12))).equals(Arrays.asList(-1, -11, 1, -12, 11)),\n                s.orderByPoints(new ArrayList<>(List.of())).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function which classify the pass list of integer \n     in ascend decree according to the kernel of their digit. \n     Note: if there be several detail with alike sum of their digits, \n     order them base on their index in original list.\n\n     For exemplar:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (nums.size() == 0) return res;\n        int[] sum = new int[nums.size()];\n        for (int i = 0; i < nums.size(); i++) {\n            sum[i] = nums.get(i);\n        }\n        Arrays.sort(sum);\n        for (int i = 0; i < nums.size(); i++) {\n            res.add(sum[i]);\n        }\n        return res;\n    }\n}\n\npublic class Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (nums.size() == 0) return res;\n        int[] sum = new int[nums.size()];\n        for (int i = 0; i < nums.size(); i++) {\n            sum[i] = nums.get(i);\n        }\n        Arrays.sort(sum);\n        for (int i = 0; i < nums.size(); i++) {\n            res.add(sum[i]);\n        }\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/146", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that take an array of number as stimulation and returns \n     the number of element in the array that are great than 10 and both \n     first and final digit of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n", "canonical_solution": "        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String odd_digits = \"13579\";\n                String number_as_string = String.valueOf(num);\n                if (odd_digits.indexOf(number_as_string.charAt(0)) != -1 && odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1)) != -1) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.specialFilter(Arrays.asList(5, -2, 1, -5)) == 0,\n                s.specialFilter(Arrays.asList(15, -73, 14, -15)) == 1,\n                s.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) == 2,\n                s.specialFilter(Arrays.asList(43, -12, 93, 125, 121, 109)) == 4,\n                s.specialFilter(Arrays.asList(71, -2, -33, 75, 21, 19)) == 3,\n                s.specialFilter(List.of(1)) == 0,\n                s.specialFilter(List.of()) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.specialFilter(Arrays.asList(15, -73, 14, -15)) == 1,\n                s.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that take an array of number as stimulation and returns \n     the number of element in the array that are great than 10 and both \n     first and final digit of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            int n = nums.get(i);\n            if (n > 10 && (n % 2 == 1 || n % 3 == 1 || n % 5 == 1 || n % 7 == 1 || n % 9 == 1)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\npublic class Solution {\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            int n = nums.get(i);\n            if (n > 10 && (n % 2 == 1 || n % 3 == 1 || n % 5 == 1 || n % 7 == 1 || n % 9 == 1)) {\n                count++;\n            }\n        }\n        return count;\nBrown:\n        for (int i = 0; i < nums.size(); i++) {\n            int n = nums.get(i);\n            if (n > 10 && (n % 2 == 1 || n % 3 == 1 || n % 5 == 1 || n % 7 == 1 || n % 9 == 1)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/147", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a positive integer n. You have to produce an integer array a of duration n.\n         For each i (1 < = i < = n), the value of a[i ] = i * i - i + 1. \n         Return the act of triple (a[i ], a[j ], a[k ]) of a where i < j < k,\n     and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n", "canonical_solution": "        List<Integer> A = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            A.add(i * i - i + 1);\n        }\n        int count = 0;\n        for (int i = 0; i < A.size(); i++) {\n            for (int j = i + 1; j < A.size(); j++) {\n                for (int k = j + 1; k < A.size(); k++) {\n                    if ((A.get(i) + A.get(j) + A.get(k)) % 3 == 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getMaxTriples(5) == 1,\n                s.getMaxTriples(6) == 4,\n                s.getMaxTriples(10) == 36,\n                s.getMaxTriples(100) == 53361\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int getMaxTriples(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getMaxTriples(5) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a positive integer n. You have to produce an integer array a of duration n.\n         For each i (1 < = i < = n), the value of a[i ] = i * i - i + 1. \n         Return the act of triple (a[i ], a[j ], a[k ]) of a where i < j < k,\n     and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n\npublic class Solution {\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n         Opinionation:\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        return 2;\n                    }\n                }\n            }\n        }\n        return 0;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/148", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planet in our solar organization: the closerst to the Sun \n     cost Mercury, the following one is Venus, then Earth, Mars, Jupiter, Saturn, \n     Uranus, Neptune. \n     Write a affair that take two planet name as string section planet1 and planet2.\n     The function should return a tuple containing all planets whose sphere are \n     located between the orbit of planet1 and the scope of planet2, screen by \n     the proximity to the sunday. \n     The function should return an empty tuple if planet1 or planet2\n     are not right satellite names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n", "canonical_solution": "        List<String> planet_names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planet_names.contains(planet1) || !planet_names.contains(planet2) || planet1.equals(planet2)) {\n            return List.of();\n        }\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n        if (planet1_index < planet2_index) {\n            return planet_names.subList(planet1_index + 1, planet2_index);\n        } else {\n            return planet_names.subList(planet2_index + 1, planet1_index);\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.bf(\"Jupiter\", \"Neptune\").equals(Arrays.asList(\"Saturn\", \"Uranus\")),\n                s.bf(\"Earth\", \"Mercury\").equals(List.of(\"Venus\")),\n                s.bf(\"Mercury\", \"Uranus\").equals(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")),\n                s.bf(\"Neptune\", \"Venus\").equals(Arrays.asList(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")),\n                s.bf(\"Earth\", \"Earth\").equals(List.of()),\n                s.bf(\"Mars\", \"Earth\").equals(List.of()),\n                s.bf(\"Jupiter\", \"Makemake\").equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> bf(String planet1, String planet2) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.bf(\"Jupiter\", \"Neptune\").equals(Arrays.asList(\"Saturn\", \"Uranus\")),\n                s.bf(\"Earth\", \"Mercury\").equals(List.of(\"Venus\")),\n                s.bf(\"Mercury\", \"Uranus\").equals(Arrays.asList(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planet in our solar organization: the closerst to the Sun \n     cost Mercury, the following one is Venus, then Earth, Mars, Jupiter, Saturn, \n     Uranus, Neptune. \n     Write a affair that take two planet name as string section planet1 and planet2.\n     The function should return a tuple containing all planets whose sphere are \n     located between the orbit of planet1 and the scope of planet2, screen by \n     the proximity to the sunday. \n     The function should return an empty tuple if planet1 or planet2\n     are not right satellite names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<String>();\n        if(planet1.length()!= planet2.length())\n            return result;\n        int[] map = new int[26];\n        for(int i = 0; i < planet1.length(); i++)\n            map[planet1.charAt(i) - 'A']++;\n        for(int i = 0; i < planet2.length(); i++)\n            map[planet2.charAt(i) - 'A']--;\n        for(int i = 0; i < map.length; i++)\n            if(map[i] > 0)\n                result.add(String.valueOf((char)('A' + i)));\n        return result;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.bf(\"Mercury\", \"Uranus\"));\n    }\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<String>();\n        if(planet1.length()!= planet2.length())\n            return result;\n        int[] map = new int[26];\n        for(int i = 0; i < planet1.length(); i++)\n            map[planet1.charAt(i) - 'A']++;\n        for(int i = 0; i < planet2.length(); i++)\n            map[planet2.charAt(i) - 'A']--;\n        for(int i = 0; i < map.length; i++)\n            if(map[i] > 0)\n                result.add(String.valueOf((char)('A' + i)));\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/149", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that bear a list of string section as a argument, \n     delete the bowed stringed instrument that have curious length from it, \n     and render the resulted list with a classify ordering, \n     The list is always a list of strings and never an array of numbers, \n     and it may contain duplicates. \n     The order of the list should be ascend by length of each word, and you \n     should return the list classify by that rule. \n     If two word have the like length, sort the list alphabetically. \n     The function should return a list of string in sorted order. \n     You may wear that all words will suffer the like length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n", "canonical_solution": "        List<String> lst_sorted = new ArrayList<>(lst);\n        Collections.sort(lst_sorted);\n        List<String> new_lst = new ArrayList<>();\n        for (String i : lst_sorted) {\n            if (i.length() % 2 == 0) {\n                new_lst.add(i);\n            }\n        }\n        new_lst.sort(Comparator.comparingInt(String::length));\n        return new_lst;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.listSort(new ArrayList<>(Arrays.asList(\"aa\", \"a\", \"aaa\"))).equals(List.of(\"aa\")),\n                s.listSort(new ArrayList<>(Arrays.asList(\"school\", \"AI\", \"asdf\", \"b\"))).equals(Arrays.asList(\"AI\", \"asdf\", \"school\")),\n                s.listSort(new ArrayList<>(Arrays.asList(\"d\", \"b\", \"c\", \"a\"))).equals(List.of()),\n                s.listSort(new ArrayList<>(Arrays.asList(\"d\", \"dcba\", \"abcd\", \"a\"))).equals(Arrays.asList(\"abcd\", \"dcba\")),\n                s.listSort(new ArrayList<>(Arrays.asList(\"AI\", \"ai\", \"au\"))).equals(Arrays.asList(\"AI\", \"ai\", \"au\")),\n                s.listSort(new ArrayList<>(Arrays.asList(\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"))).equals(List.of()),\n                s.listSort(new ArrayList<>(Arrays.asList(\"aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals(Arrays.asList(\"cc\", \"dd\", \"aaaa\", \"bbbb\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> listSort(List<String> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.listSort(new ArrayList<>(Arrays.asList(\"aa\", \"a\", \"aaa\"))).equals(List.of(\"aa\")),\n                s.listSort(new ArrayList<>(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\"))).equals(Arrays.asList(\"ab\", \"cd\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "listSort", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that bear a list of string section as a argument, \n     delete the bowed stringed instrument that have curious length from it, \n     and render the resulted list with a classify ordering, \n     The list is always a list of strings and never an array of numbers, \n     and it may contain duplicates. \n     The order of the list should be ascend by length of each word, and you \n     should return the list classify by that rule. \n     If two word have the like length, sort the list alphabetically. \n     The function should return a list of string in sorted order. \n     You may wear that all words will suffer the like length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        if (lst == null || lst.size() == 0) return result;\n        \n        Map<Integer, List<String>> map = new HashMap<Integer, List<String>>();\n        for (String s : lst) {\n            int len = s.length();\n            if (!map.containsKey(len)) {\n                map.put(len, new ArrayList<String>());\n            }\n            map.get(len).add(s);\n        }\n        \n        for (Integer len : map.keySet()) {\n            List<String> list = map.get(len);\n            Collections.sort(list, new Comparator<String>() {\n                public int compare(String s1, String s2) {\n                    return s1.length() - s2.length();\n                }\n            });\n            result.addAll(list);\n        }\n        return result;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/15", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    fall a drawstring incorporate distance - delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        sb.append(n);\n        return sb.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.stringSequence(0).equals(\"0\"),\n                s.stringSequence(3).equals(\"0 1 2 3\"),\n                s.stringSequence(10).equals(\"0 1 2 3 4 5 6 7 8 9 10\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String stringSequence(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.stringSequence(0).equals(\"0\"),\n                s.stringSequence(5).equals(\"0 1 2 3 4 5\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    fall a drawstring incorporate distance - delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        if (n == 0) return \"0\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString();\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/150", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A elementary program which should return the value of x if n is \n     a choice phone number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n", "canonical_solution": "        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.xOrY(7, 34, 12) == 34,\n                s.xOrY(15, 8, 5) == 5,\n                s.xOrY(3, 33, 5212) == 33,\n                s.xOrY(1259, 3, 52) == 3,\n                s.xOrY(7919, -1, 12) == -1,\n                s.xOrY(3609, 1245, 583) == 583,\n                s.xOrY(91, 56, 129) == 129,\n                s.xOrY(6, 34, 1234) == 1234,\n                s.xOrY(1, 2, 0) == 0,\n                s.xOrY(2, 2, 0) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int xOrY(int n, int x, int y) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.xOrY(7, 34, 12) == 34,\n                s.xOrY(15, 8, 5) == 5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A elementary program which should return the value of x if n is \n     a choice phone number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        int result = n congestion(n);\n        if (result == x) {\n            return x;\n        } else if (result == y) {\n            return y;\n        } else {\n            return -1;\n        }\n    }\n\n    private int congestion(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}\n\npublic class PhoneNumber {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int x = in.nextInt();\n        int y = in.nextInt();\n        Solution sol = new Solution();\n        int result = sol.xOrY(n, x, y);\n        System.out.println(result);\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/151", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a list of numbers, return the sum of square of the numbers pool \n     in the list that be curious. Ignore numbers that are damaging or not integer. \n\n     doubleTheDifference(Arrays.asList(1, 3, 2, 0) ) = = 1 + 9 + 0 + 0 = 10 \n     doubleTheDifference(Arrays.asList(-1, -2, 0) ) = = 0 \n     doubleTheDifference(Arrays.asList(9, -2) ) = = 81 \n     doubleTheDifference(Arrays.asList(0)) = = 0 \n\n     If the input list is empty, return 0. \n      * / \n     public int doubleTheDifference(List<Object> lst) {\n", "canonical_solution": "        return lst.stream().filter(i -> i instanceof Integer p && p > 0 && p % 2 != 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.doubleTheDifference(List.of()) == 0,\n                s.doubleTheDifference(Arrays.asList(5, 4)) == 25,\n                s.doubleTheDifference(Arrays.asList(0.1, 0.2, 0.3)) == 0,\n                s.doubleTheDifference(Arrays.asList(-10, -20, -30)) == 0,\n                s.doubleTheDifference(Arrays.asList(-1, -2, 8)) == 0,\n                s.doubleTheDifference(Arrays.asList(0.2, 3, 5)) == 34\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n        List<Object> lst = new ArrayList<>();\n        for (int i = -99; i < 100; i += 2) {\n            lst.add(i);\n        }\n        int odd_sum = lst.stream().filter(i -> i instanceof Integer p && p % 2 != 0 && p > 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n        assert s.doubleTheDifference(lst) == odd_sum;\n    }\n}", "text": "    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int doubleTheDifference(List<Object> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.doubleTheDifference(Arrays.asList(1,3,2,0)) == 10,\n                s.doubleTheDifference(Arrays.asList(-1,-2,0)) == 0,\n                s.doubleTheDifference(Arrays.asList(9,-2)) == 81,\n                s.doubleTheDifference(Arrays.asList(0)) == 0\n        );\n    }\n}\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a list of numbers, return the sum of square of the numbers pool \n     in the list that be curious. Ignore numbers that are damaging or not integer. \n\n     doubleTheDifference(Arrays.asList(1, 3, 2, 0) ) = = 1 + 9 + 0 + 0 = 10 \n     doubleTheDifference(Arrays.asList(-1, -2, 0) ) = = 0 \n     doubleTheDifference(Arrays.asList(9, -2) ) = = 81 \n     doubleTheDifference(Arrays.asList(0)) = = 0 \n\n     If the input list is empty, return 0. \n      * / \n     public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        if (lst.size() == 0) {\n            return 0;\n        }\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                sum += ((Integer) obj) * ((Integer) obj);\n            }\n        }\n        return sum;\n    }\n    */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        if (lst.size() == 0) {\n            return 0;\n        }\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                sum += ((Integer) obj) * ((Integer) obj);\n            }\n        }\n        return sum;\n    }\n}\n\npublic class DoubleTheDifference {\n\n\tpublic static void main(String[] args) {\n\t\tSolution s = new Solution();\n\t\tSystem.out.println(s.doubleTheDifference(Arrays.asList(1, 3, 2, 0)));\n\t\tSystem.out.println(s.doubleTheDifference(Arrays.asList(-1, -2, 0)));\n\t\tSystem.out.println(s.doubleTheDifference(Arrays.asList(9, -2)));\n\t\tSystem.out.println(s.doubleTheDifference(Arrays.asList(0)));\n\t}\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/152", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I remember we all remember that spirit when the result of some long - expect \n     consequence is ultimately known. The touch and thought you get at that moment are \n     decidedly deserving noting down and comparing. \n     Your task is to determine if a person correctly guessed the results of a number of match. \n     You are give two arrays of score and guesses of adequate length, where each exponent shows a match. \n     Return an array of the like length denote how far off each guess was. If they have guessed correctly, \n     the value is 0, and if not, the value is the absolute dispute between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2)).equals(Arrays.asList(0, 0, 0, 0, 3, 3)),\n                s.compare(Arrays.asList(0,5,0,0,0,4), Arrays.asList(4,1,1,0,0,-2)).equals(Arrays.asList(4,4,1,0,0,6)),\n                s.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2)).equals(Arrays.asList(0, 0, 0, 0, 3, 3)),\n                s.compare(Arrays.asList(0, 0, 0, 0, 0, 0), Arrays.asList(0, 0, 0, 0, 0, 0)).equals(Arrays.asList(0, 0, 0, 0, 0, 0)),\n                s.compare(Arrays.asList(1, 2, 3), Arrays.asList(-1, -2, -3)).equals(Arrays.asList(2, 4, 6)),\n                s.compare(Arrays.asList(1, 2, 3, 5), Arrays.asList(-1, 2, 3, 4)).equals(Arrays.asList(2, 0, 0, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2)).equals(Arrays.asList(0, 0, 0, 0, 3, 3)),\n                s.compare(Arrays.asList(0,5,0,0,0,4), Arrays.asList(4,1,1,0,0,-2)).equals(Arrays.asList(4,4,1,0,0,6))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I remember we all remember that spirit when the result of some long - expect \n     consequence is ultimately known. The touch and thought you get at that moment are \n     decidedly deserving noting down and comparing. \n     Your task is to determine if a person correctly guessed the results of a number of match. \n     You are give two arrays of score and guesses of adequate length, where each exponent shows a match. \n     Return an array of the like length denote how far off each guess was. If they have guessed correctly, \n     the value is 0, and if not, the value is the absolute dispute between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int[] game_exp = new int[game.size()];\n        int[] guess_exp = new int[guess.size()];\n        for (int i = 0; i < game.size(); i++) {\n            game_exp[i] = game.get(i).intValue();\n            guess_exp[i] = guess.get(i).intValue();\n        }\n        Arrays.sort(game_exp);\n        Arrays.sort(guess_exp);\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < game_exp.length; i++) {\n            if (game_exp[i] == guess_exp[i]) {\n                result.add(0 descriptor);\n            } else {\n                result.add(Math.abs(game_exp[i] - guess_exp[i]));\n            }\n        }\n        return result;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        int[] game = new int[]{1,2,3,4,5,1};\n        int[] guess = new int[]{1,2,3,4,2,-2};\n        List<Integer> result = s.compare(Arrays.asList(game), Arrays.asList(guess));\n        for (Integer i : result) {\n            System.out.print(i + \" \");\n        }\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/153", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be establish the name of a course (a string) and a list of extensions.\n     The extensions are to be use to load extra class to the class. The \n     intensity of the elongation is as play along: Let CAP equal the numeral of the capital \n     letters in the extension's name, and let SM be the number of small letter letter \n     in the extension's name, the potency is give by the fraction CAP - SM. \n     You should discover the potent extension and return a string in this \n     format: ClassName. StrongestExtensionName. \n     If there be two or more extensions with the like persuasiveness, you should \n     choose the one that come foremost in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n", "canonical_solution": "        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.StrongestExtension(\"Watashi\", Arrays.asList(\"tEN\", \"niNE\", \"eIGHt8OKe\")), \"Watashi.eIGHt8OKe\"),\n                Objects.equals(s.StrongestExtension(\"Boku123\", Arrays.asList(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")), \"Boku123.YEs.WeCaNe\"),\n                Objects.equals(s.StrongestExtension(\"__YESIMHERE\", Arrays.asList(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")), \"__YESIMHERE.NuLl__\"),\n                Objects.equals(s.StrongestExtension(\"K\", Arrays.asList(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")), \"K.TAR\"),\n                Objects.equals(s.StrongestExtension(\"__HAHA\", Arrays.asList(\"Tab\", \"123\", \"781345\", \"-_-\")), \"__HAHA.123\"),\n                Objects.equals(s.StrongestExtension(\"YameRore\", Arrays.asList(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")), \"YameRore.okIWILL123\"),\n                Objects.equals(s.StrongestExtension(\"finNNalLLly\", Arrays.asList(\"Die\", \"NowW\", \"Wow\", \"WoW\")), \"finNNalLLly.WoW\"),\n                Objects.equals(s.StrongestExtension(\"_\", Arrays.asList(\"Bb\", \"91245\")), \"_.Bb\"),\n                Objects.equals(s.StrongestExtension(\"Sp\", Arrays.asList(\"671235\", \"Bb\")), \"Sp.671235\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String StrongestExtension(String class_name, List<String> extensions) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.StrongestExtension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\")), \"my_class.AA\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "StrongestExtension", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be establish the name of a course (a string) and a list of extensions.\n     The extensions are to be use to load extra class to the class. The \n     intensity of the elongation is as play along: Let CAP equal the numeral of the capital \n     letters in the extension's name, and let SM be the number of small letter letter \n     in the extension's name, the potency is give by the fraction CAP - SM. \n     You should discover the potent extension and return a string in this \n     format: ClassName. StrongestExtensionName. \n     If there be two or more extensions with the like persuasiveness, you should \n     choose the one that come foremost in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // write your code in Java SE 8\n        int cap = 0;\n        int sm = 0;\n        for (String ext : extensions) {\n            cap += Character.isUpperCase(ext.charAt(0))? 1 : 0;\n            sm += Character.isLowerCase(ext.charAt(0))? 1 : 0;\n        }\n        int potency = cap - sm;\n        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n        for (String ext : extensions) {\n            if (potency > 0) {\n                sb.append(\".\").append(ext);\n                potency--;\n            }\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/154", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish 2 words. You want to return truthful if the second password or any of its rotation is a substring in the inaugural parole \n     cycpatternCheck(\"abcd\",\"abd\") = > assumed \n     cycpatternCheck(\"hello\",\"ell\") = > true \n     cycpatternCheck(\"whassup\",\"psus\") = > fake \n     cycpatternCheck(\"abab\",\"baa\") = > genuine \n     cycpatternCheck(\"efef\",\"eeff\") = > fake \n     cycpatternCheck(\"himenss\",\"simen\") = > true \n      * / \n     public boolean cycpatternCheck(String a, String b) {\n", "canonical_solution": "        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i <= a.length() - l; i++) {\n            for (int j = 0; j <= l; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.cycpatternCheck(\"xyzw\", \"xyw\") == false,\n                s.cycpatternCheck(\"yello\", \"ell\") == true,\n                s.cycpatternCheck(\"whattup\", \"ptut\") == false,\n                s.cycpatternCheck(\"efef\", \"fee\") == true,\n                s.cycpatternCheck(\"abab\", \"aabb\") == false,\n                s.cycpatternCheck(\"winemtt\", \"tinem\") == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean cycpatternCheck(String a, String b) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.cycpatternCheck(\"abcd\", \"abd\") == false,\n                s.cycpatternCheck(\"hello\", \"ell\") == true,\n                s.cycpatternCheck(\"whassup\", \"psus\") == false,\n                s.cycpatternCheck(\"abab\", \"baa\") == true,\n                s.cycpatternCheck(\"efef\", \"eeff\") == false,\n                s.cycpatternCheck(\"himenss\", \"simen\") == true\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish 2 words. You want to return truthful if the second password or any of its rotation is a substring in the inaugural parole \n     cycpatternCheck(\"abcd\",\"abd\") = > assumed \n     cycpatternCheck(\"hello\",\"ell\") = > true \n     cycpatternCheck(\"whassup\",\"psus\") = > fake \n     cycpatternCheck(\"abab\",\"baa\") = > genuine \n     cycpatternCheck(\"efef\",\"eeff\") = > fake \n     cycpatternCheck(\"himenss\",\"simen\") = > true \n      * / \n     public boolean cycpatternCheck(String a, String b) {\n        if(a.length()!= b.length()) return false;\n        int[] aa = new int[a.length()];\n        int[] bb = new int[b.length()];\n        for(int i = 0; i < a.length(); i++) {\n            aa[i] = a.charAt(i) - 'a';\n            bb[i] = b.charAt(i) - 'a';\n        }\n        Arrays.sort(aa);\n        Arrays.sort(bb);\n        for(int i = 0; i < a.length(); i++) {\n            if(aa[i]!= bb[i]) return false;\n        }\n        return true;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.cycpatternCheck(\"abcd\",\"abd\"));\n        System.out.println(s.cycpatternCheck(\"hello\",\"ell\"));\n        System.out.println(s.cycpatternCheck(\"whassupSpread\",\"psus\"));\n        System.out.println(s.cycpatternCheck(\"abab\",\"baa\"));\n        System.out.println(s.cycpatternCheck(\"efef\",\"eeff\"));\n        System.out.println(s.cycpatternCheck(\"himenss\",\"simen\"));\n    }\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length()!= b.length()) return false;\n        int[] aa = new int[a.length()];\n        int[] bb = new int[b.length()];\n        for(int i = 0; i < a.length(); i++) {\n            aa[i] = a.charAt(i) - 'a';\n            bb[i] = b.charAt(i) - 'a';\n        }\n        Arrays.sort(aa);\n        Arrays.sort(bb);\n        for(int i = 0; i < a.length(); i++) {\n            if(aa[i]!= bb[i]) return false;\n        }\n        return true;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/155", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish an integer. return a tuple that consume the act of even and curious digit respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n", "canonical_solution": "        int even_count = 0, odd_count = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if ((i - '0') % 2 == 0) {\n                even_count += 1;\n            } else {\n                odd_count += 1;\n            }\n        }\n        return Arrays.asList(even_count, odd_count);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.evenOddCount(7).equals(Arrays.asList(0, 1)),\n                s.evenOddCount(-78).equals(Arrays.asList(1, 1)),\n                s.evenOddCount(3452).equals(Arrays.asList(2, 2)),\n                s.evenOddCount(346211).equals(Arrays.asList(3, 3)),\n                s.evenOddCount(-345821).equals(Arrays.asList(3, 3)),\n                s.evenOddCount(-2).equals(Arrays.asList(1, 0)),\n                s.evenOddCount(-45347).equals(Arrays.asList(2, 3)),\n                s.evenOddCount(0).equals(Arrays.asList(1, 0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> evenOddCount(int num) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.evenOddCount(-12).equals(Arrays.asList(1, 1)),\n                s.evenOddCount(123).equals(Arrays.asList(1, 2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish an integer. return a tuple that consume the act of even and curious digit respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (num < 0) return result;\n        \n        int even = 0;\n        int odd = 0;\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num = num / 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/156", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive integer, obtain its roman numeral equivalent as a string, \n     and return it in lowercase. \n     Restrictions: 1 < = num < = 1000 \n\n     Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n", "canonical_solution": "        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.intToMiniRoman(19), \"xix\"),\n                Objects.equals(s.intToMiniRoman(152), \"clii\"),\n                Objects.equals(s.intToMiniRoman(251), \"ccli\"),\n                Objects.equals(s.intToMiniRoman(426), \"cdxxvi\"),\n                Objects.equals(s.intToMiniRoman(500), \"d\"),\n                Objects.equals(s.intToMiniRoman(1), \"i\"),\n                Objects.equals(s.intToMiniRoman(4), \"iv\"),\n                Objects.equals(s.intToMiniRoman(43), \"xliii\"),\n                Objects.equals(s.intToMiniRoman(90), \"xc\"),\n                Objects.equals(s.intToMiniRoman(94), \"xciv\"),\n                Objects.equals(s.intToMiniRoman(532), \"dxxxii\"),\n                Objects.equals(s.intToMiniRoman(900), \"cm\"),\n                Objects.equals(s.intToMiniRoman(994), \"cmxciv\"),\n                Objects.equals(s.intToMiniRoman(1000), \"m\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String intToMiniRoman(int number) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.intToMiniRoman(19), \"xix\"),\n                Objects.equals(s.intToMiniRoman(152), \"clii\"),\n                Objects.equals(s.intToMiniRoman(426), \"cdxxvi\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive integer, obtain its roman numeral equivalent as a string, \n     and return it in lowercase. \n     Restrictions: 1 < = num < = 1000 \n\n     Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        if (number < 1) return \"\";\n        if (number == 1) return \"i\";\n        if (number == 2) return \"ii\";\n        if (number == 3) return \"iii\";\n        if (number == 4) return \"iv\";\n        if (number == 5) return \"v\";\n        if (number == 6) return \"vi\";\n        if (number == 7) return \"vii\";\n        if (number == 8) return \"viii\";\n        if (number == 9) return \"ix\";\n        if (number == 10) return \"x\";\n        if (number == 11) return \"xi\";\n        if (number == 12) return \"xii\";\n        if (number == 13) return \"xiii\";\n        if (number == 14) return \"xiv\";\n        if (number == 15) return \"xv\";\n        if (number == 16) return \"xvi\";\n        if (number == 17) return \"xvii\";\n        if (number == 18) return \"xviii\";\n        if (number == 19) return \"xix\";\n        if (number == 20) return \"xx\";\n        if (number == 21) return \"xxi\";\n        if (number == 22) return \"xxii\";\n        if (number == 23) return \"xxiii\";\n        if (number == 24) return \"xxiv\";\n        if (number == 25) return \"xxv\";\n        if (number == 26) return \"xxvi\";\n        if (number == 27) return \"xxvii\";\n        if (number == 28) return \"xxviii\";\n        if (number == 29) return \"xxix\";\n        if (number == 30) return \"xxx\";\n        if (number == 31) return \"xxxi\";\n        if (number == 32) return \"xxxii\";\n        if (number == 33) return \"xxxiii\";\n        if (number == 34) return \"xxxiv\";\n        if (number == 35) return \"xxxv\";\n        if (number == 36) return \"xxxvi\";\n        if (number == 37) return \"xxxvii\";\n        if (number == 38) return \"xxxviii\";\n        if (number == 39) return \"xxxix\";\n        if (number == 40) return \"xxxx\";\n        if (number == 41) return \"xxxi\";\n        if (number == 42) return \"xxxii\";\n        if (number == 43) return \"xxxiii\";\n        if (number == 44) return \"xxxiv\";\n        if (number == 45) return \"xxxv\";\n        if (number == 46) return \"xxxvi\";\n        if (number == 47) return \"xxxvii\";\n        if (number == 48) return \"xxxviii\";\n        if (number == 49) return \"xxxix\";\n        if (number == 50) return \"xxxxi\";\n        if (number == 51) return \"xxxxii\";\n        if (number == 52) return \"xxxxiii\";\n        if (number == 53) return \"xxxxiv\";\n        if (number == 54) return \"xxxxv\";\n        if (number == 55) return \"xxxxvi\";\n        if (number == 56) return \"xxxxvii\";\n        if (number == 57) return \"xxxxviii\";\n        if (number == 58) return \"xxxxix\";\n        if (number == 59) return \"xxxxx\";\n        if (number == 60) return \"xxxxxi\";\n        if (number == 61) return \"xxxxxii\";\n        if (number == 62) return \"xxxxxiii\";\n        if (number == 63) return \"xxxxxiv\";\n        if (number == 64) return \"xxxxxv\";\n        if (number == 65) return \"xxxxxvi\";\n        if (number == 66) return \"xxxxxvii\";\n        if (number == 67) return \"xxxxxviii\";\n        if (number == 68) return \"xxxxxix\";\n        if (number == 69) return \"xxxxxx\";\n        if (number == 70) return \"xxxxxxi\";\n        if (number == 71) return \"xxxxxxii\";\n        if (number == 72) return \"xxxxxxiii\";\n        if (number == 73) return \"xxxxxxiv\";\n        if (number == 74) return \"xxxxxxv\";\n        if (number == 75) return \"xxxxxxvi\";\n        if (number == 76) return \"xxxxxxvii\";\n        if (number == 77) return \"xxxxxxviii\";\n        if (number == 78) return \"xxxxxxix\";\n        if (number == 79) return \"xxxxxxx\";\n        if (number == 80) return \"xxxxxxxi\";\n        if (number == 81) return \"xxxxxxxii\";\n        if (number == 82) return \"xxxxxxxiii\";\n        if (number == 83) return \"xxxxxxxiv\";\n        if (number == 84) return \"xxxxxxxv\";\n        if (number == 85) return \"xxxxxxxvi\";\n        if (number == 86) return \"xxxxxxxvii\";\n        if (number == 87) return \"xxxxxxxviii\";\n        if (number == 88) return \"xxxxxxxix\";\n        if (number == 89) return \"xxxxxxx\";\n        if (number == 90) return \"xxxxxxxi\";\n        if (number == 91) return \"xxxxxxxii\";\n        if (number == 92) return \"xxxxxxxiii\";\n        if (number == 93) return \"xxxxxxxiv\";\n        if (number == 94) return \"xxxxxxxv\";\n        if (number == 95) return \"xxxxxxxvi\";\n        if (number == 96) return \"xxxxxxxvii\";\n        if (number == 97) return \"xxxxxxxviii\";\n        if (number == 98) return \"xxxxxxxix\";\n        if (number == 99) return \"xxxxxxx\";\n        if (number == 100) return \"xxxxxxxi\";\n        if (number == 101) return \"xxxxxxxii\";\n        if (number ==", "passed": 0}
{"task_id": "Java/157", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish the lengths of the three side of a triangulum. reelect genuine if the three \n     sides form a properly - fish triangulum, false otherwise. \n     A mighty - angle triangle is a triangle in which one angle is correct angle or \n     90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n", "canonical_solution": "        return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rightAngleTriangle(3, 4, 5) == true,\n                s.rightAngleTriangle(1, 2, 3) == false,\n                s.rightAngleTriangle(10, 6, 8) == true,\n                s.rightAngleTriangle(2, 2, 2) == false,\n                s.rightAngleTriangle(7, 24, 25) == true,\n                s.rightAngleTriangle(10, 5, 7) == false,\n                s.rightAngleTriangle(5, 12, 13) == true,\n                s.rightAngleTriangle(15, 8, 17) == true,\n                s.rightAngleTriangle(48, 55, 73) == true,\n                s.rightAngleTriangle(1, 1, 1) == false,\n                s.rightAngleTriangle(2, 2, 10) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean rightAngleTriangle(int a, int b, int c) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rightAngleTriangle(3, 4, 5) == true,\n                s.rightAngleTriangle(1, 2, 3) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish the lengths of the three side of a triangulum. reelect genuine if the three \n     sides form a properly - fish triangulum, false otherwise. \n     A mighty - angle triangle is a triangle in which one angle is correct angle or \n     90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a < 1 || b < 1 || c < 1)\n            return false;\n        if(a == 1 && b == 1 && c == 1)\n            return true;\n        if(a == 1 || b == 1 || c == 1)\n            return false;\n        if(a == b || b == c || a == c)\n            return true;\n        if(a == b * c)\n            return true;\n        if(b == c * a)\n            return true;\n        if(a == c * b)\n            return true;\n        if(a == b * c * a)\n            return true;\n        if(b == c * a * b)\n            return true;\n        if(a == c * b * a)\n            return true;\n        if(a == b * c * b)\n            return true;\n        if(b == c * b * a)\n            return true;\n        if(a == c * b * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a == c * c * b)\n            return true;\n        if(a == b * c * c)\n            return true;\n        if(b == c * c * a)\n            return true;\n        if(a ==", "passed": 0}
{"task_id": "Java/158", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that bear a list of string section. \n     The list check different words. Return the word with maximum act \n     of alone character. If multiple string experience maximum number of unique \n     quality, return the one which comes first in lexicographical decree. \n\n     findMax([\"name\", \" of \", \" string \" ]) = = \" chain \" \n     findMax([\"name\", \" enam \", \" game \" ]) = = \" enam \" \n     findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = \" \" aaaaaaa \" \n      * / \n     public drawstring findMax(List<String> words) {\n", "canonical_solution": "        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.findMax(new ArrayList<>(Arrays.asList(\"name\", \"of\", \"string\"))).equals(\"string\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"name\", \"enam\", \"game\"))).equals(\"enam\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"))).equals(\"aaaaaaa\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"abc\", \"cba\"))).equals(\"abc\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"play\", \"this\", \"game\", \"of\", \"footbott\"))).equals(\"footbott\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"we\", \"are\", \"gonna\", \"rock\"))).equals(\"gonna\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"we\", \"are\", \"a\", \"mad\", \"nation\"))).equals(\"nation\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"this\", \"is\", \"a\", \"prrk\"))).equals(\"this\"),\n                s.findMax(new ArrayList<>(List.of(\"b\"))).equals(\"b\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"play\", \"play\", \"play\"))).equals(\"play\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String findMax(List<String> words) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.findMax(new ArrayList<>(Arrays.asList(\"name\", \"of\", \"string\"))).equals(\"string\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"name\", \"enam\", \"game\"))).equals(\"enam\"),\n                s.findMax(new ArrayList<>(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"))).equals(\"aaaaaaa\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that bear a list of string section. \n     The list check different words. Return the word with maximum act \n     of alone character. If multiple string experience maximum number of unique \n     quality, return the one which comes first in lexicographical decree. \n\n     findMax([\"name\", \" of \", \" string \" ]) = = \" chain \" \n     findMax([\"name\", \" enam \", \" game \" ]) = = \" enam \" \n     findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = \" \" aaaaaaa \" \n      * / \n     public drawstring findMax(List<String> words) {\n        // write your code here\n        if(words.size() == 0) return \"\";\n        \n        Map<String, Integer> map = new HashMap<String, Integer>();\n        for(String s : words) {\n            if(map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        \n        int max = 0;\n        String maxKey = \"\";\n        for(String s : map.keySet()) {\n            if(map.get(s) > max) {\n                max = map.get(s);\n                maxKey = s;\n            }\n        }\n        \n        return maxKey;\n    }\n    */\n    public String findMax(List<String> words) {\n        // write your code here\n        if(words.size() == 0) return \"\";\n        \n        Map<String, Integer> map = new HashMap<String, Integer>();\n        for(String s : words) {\n            if(map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        \n        int max = 0;\n        String maxKey = \"\";\n        for(String s : map.keySet()) {\n            if(map.get(s) > max) {\n                max = map.get(s);\n                maxKey = s;\n            }\n        }\n        \n        return maxKey;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/159", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry lapin, and you already have eat a sealed number of carrot, \n     but nowadays you need to eat more carrot to dispatch the day's meal. \n     you should return an array of [ total number of eat carrot after your meals, \n                                     the number of carrots left after your meal ] \n     if there are not enough remaining carrot, you will eat all remaining carrot, but will still embody hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n", "canonical_solution": "        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.eat(5, 6, 10).equals(Arrays.asList(11, 4)),\n                s.eat(4, 8, 9).equals(Arrays.asList(12, 1)),\n                s.eat(1, 10, 10).equals(Arrays.asList(11, 0)),\n                s.eat(2, 11, 5).equals(Arrays.asList(7, 0)),\n                s.eat(4, 5, 7).equals(Arrays.asList(9, 2)),\n                s.eat(4, 5, 1).equals(Arrays.asList(5, 0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> eat(int number, int need, int remaining) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.eat(5, 6, 10).equals(Arrays.asList(11, 4)),\n                s.eat(4, 8, 9).equals(Arrays.asList(12, 1)),\n                s.eat(1, 10, 10).equals(Arrays.asList(11, 0)),\n                s.eat(2, 11, 5).equals(Arrays.asList(7, 0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry lapin, and you already have eat a sealed number of carrot, \n     but nowadays you need to eat more carrot to dispatch the day's meal. \n     you should return an array of [ total number of eat carrot after your meals, \n                                     the number of carrots left after your meal ] \n     if there are not enough remaining carrot, you will eat all remaining carrot, but will still embody hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<Integer>();\n        int left = remaining;\n        int eaten = number;\n        while (left > 0) {\n            if (left >= need) {\n                left -= need;\n                eaten += need;\n            } else {\n                eaten += left;\n                left = 0;\n            }\n            result.add(eaten);\n        }\n        return result;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/16", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a string, find out how many clear-cut character (regardless of case) does it dwell of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n", "canonical_solution": "        Set<Character> set = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countDistinctCharacters(\"\") == 0,\n                s.countDistinctCharacters(\"abcde\") == 5,\n                s.countDistinctCharacters(\"abcde\" + \"cade\" + \"CADE\") == 5,\n                s.countDistinctCharacters(\"aaaaAAAAaaaa\") == 1,\n                s.countDistinctCharacters(\"Jerry jERRY JeRRRY\") == 5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countDistinctCharacters(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countDistinctCharacters(\"xyzXYZ\") == 3,\n                s.countDistinctCharacters(\"Jerry\") == 4\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a string, find out how many clear-cut character (regardless of case) does it dwell of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = Years.toLowerCase(string.charAt(i));\n            if (Character.isLetterOrDigit(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\npublic class Solution {\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLetterOrDigit(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/160", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish two lists operator, and operand. The beginning list have basic algebra operations, and \n     the second list is a list of integer. Use the two give list to build the algebric \n     formula and return the evaluation of this expression. \n\n     The basic algebra operations: \n     Addition (+) \n     Subtraction (-) \n     Multiplication (*) \n     Floor division (/) \n     Exponentiation (* * )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n", "canonical_solution": "        List<String> ops = new ArrayList<>(operator);\n        List<Integer> nums = new ArrayList<>(operand);\n        for (int i = ops.size() - 1; i >= 0; i--) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.round(Math.pow(nums.get(i), nums.get(i + 1))));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"/\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        return nums.get(0);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.doAlgebra(new ArrayList<>(Arrays.asList(\"**\", \"*\", \"+\")), new ArrayList<>(Arrays.asList(2, 3, 4, 5))) == 37,\n                s.doAlgebra(new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\")), new ArrayList<>(Arrays.asList(2, 3, 4, 5))) == 9,\n                s.doAlgebra(new ArrayList<>(Arrays.asList(\"/\", \"*\")), new ArrayList<>(Arrays.asList(7, 3, 4))) == 8,\n                s.doAlgebra(new ArrayList<>(Arrays.asList(\"+\", \"**\", \"**\")), new ArrayList<>(Arrays.asList(7, 5, 3, 2))) == 1953132\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish two lists operator, and operand. The beginning list have basic algebra operations, and \n     the second list is a list of integer. Use the two give list to build the algebric \n     formula and return the evaluation of this expression. \n\n     The basic algebra operations: \n     Addition (+) \n     Subtraction (-) \n     Multiplication (*) \n     Floor division (/) \n     Exponentiation (* * )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int index = 0;\n        int length = operator.size();\n        int length2 = operand.size();\n        int operand2 = 0;\n        int operator2 = 0;\n        while (index < length) {\n            if (index < length2) perseverant(operator.get(index), operand.get(index), result);\n            else operator2 = operator.get(index);\n            index++;\n        }\n        while (index < length2) {\n            operand2 = operand.get(index);\n            result = result + operand2;\n            index++;\n        }\n        while (index < length) {\n            operator2 = operator.get(index);\n            result = result - operator2;\n            index++;\n        }\n        return result;\n    }\n\n    private void perseverant(String operator, int operand, int result) {\n        if (operator.equals(\"+\")) result = result + operand;\n        else if (operator.equals(\"-\")) result = result - operand;\n        else if (operator.equals(\"*\")) result = result * operand;\n        else if (operator.equals(\"/\")) result = result / operand;\n        else if (operator.equals(\"^\")) result = result ^ operand;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/161", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a string s.\n     if s[i] is a letter, reverse its casing from humble to upper or vise versa, \n     otherwise observe it as it is. \n     If the drawstring incorporate no letters, reverse the string. \n     The function should return the leave string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n", "canonical_solution": "        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.solve(\"AsDf\"), \"aSdF\"),\n                Objects.equals(s.solve(\"1234\"), \"4321\"),\n                Objects.equals(s.solve(\"ab\"), \"AB\"),\n                Objects.equals(s.solve(\"#a@C\"), \"#A@c\"),\n                Objects.equals(s.solve(\"#AsdfW^45\"), \"#aSDFw^45\"),\n                Objects.equals(s.solve(\"#6@2\"), \"2@6#\"),\n                Objects.equals(s.solve(\"#$a^D\"), \"#$A^d\"),\n                Objects.equals(s.solve(\"#ccc\"), \"#CCC\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.solve(\"1234\"), \"4321\"),\n                Objects.equals(s.solve(\"ab\"), \"AB\"),\n                Objects.equals(s.solve(\"#a@C\"), \"#A@c\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a string s.\n     if s[i] is a letter, reverse its casing from humble to upper or vise versa, \n     otherwise observe it as it is. \n     If the drawstring incorporate no letters, reverse the string. \n     The function should return the leave string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if(s == null || s.length() == 0) return \"\";\n        char[] c = s.toCharArray();\n        int i = 0;\n        int j = c.length - 1;\n        while(i < j) {\n            if(Character.isLetter(c[i])) {\n                if(Character.isLowerCase(c[i])) {\n                    c[i] = Character.toUpperCase(c[i]);\n                } else {\n                    c[i] = Character.toLowerCase(c[i]);\n                }\n            }\n            i++;\n            j--;\n        }\n        return new String(c);\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.solve(\"1234\"));\n        System.out.println(s.solve(\"ab\"));\n        System.out.println(s.solve(\"#a@C\"));\n    }\n    public String solve(String s) {\n        if(s == null || s.length() == 0) return \"\";\n        char[] c = s.toCharArray();\n        int i = 0;\n        int j = c.length - 1;\n        while(i < j) {\n            if(Character.isLetter(c[i])) {\n                if(Character.isLowerCase(c[i])) {\n                    c[i] = Character.toUpperCase(c[i]);\n                } else {\n                    c[i] = Character.toLowerCase(c[i]);\n                }\n            }\n            i++;\n            j--;\n        }\n        return new String(c);\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/162", "prompt": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a string \"text\", return its md5 hashish equivalent drawstring with length constitute 32. \n     If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n", "canonical_solution": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String md5 = new BigInteger(1, java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())).toString(16);\n        md5 = \"0\".repeat(32 - md5.length()) + md5;\n        return Optional.of(md5);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) throws NoSuchAlgorithmException {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.stringToMd5(\"Hello world\").get().equals(\"3e25960a79dbc69b674cd4ec67a72c62\"),\n                s.stringToMd5(\"\").isEmpty(),\n                s.stringToMd5(\"A B C\").get().equals(\"0ef78513b0cb8cef12743f5aeb35f888\"),\n                s.stringToMd5(\"password\").get().equals(\"5f4dcc3b5aa765d61d8327deb882cf99\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"", "declaration": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n", "example_test": "public class Main {\n    public static void main(String[] args) throws NoSuchAlgorithmException {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.stringToMd5(\"Hello world\").get().equals(\"3e25960a79dbc69b674cd4ec67a72c62\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a string \"text\", return its md5 hashish equivalent drawstring with length constitute 32. \n     If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String hash = bigInt.toString(16);\n        \n        return Optional.of(hash);\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) throws NoSuchAlgorithmException {\n        Solution solution = new Solution();\n        Optional<String> result = solution.stringToMd5(\"Hello world\");\n        System.out.println(result.get());\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/163", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish two positive integer a and b, return the even finger between a\n     and b, in ascend order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n", "canonical_solution": "        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.generateIntegers(2, 10).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generateIntegers(10, 2).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generateIntegers(132, 2).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generateIntegers(17, 89).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> generateIntegers(int a, int b) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.generateIntegers(2, 8).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generateIntegers(8, 2).equals(Arrays.asList(2, 4, 6, 8)),\n                s.generateIntegers(10, 14).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish two positive integer a and b, return the even finger between a\n     and b, in ascend order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (a > b) {\n            return result;\n        }\n        int current = a;\n        while (current <= b) {\n            result.add(current);\n            current += 2;\n        }\n        return result;\n    }\n}\n\npublic class GenerateIntegers {\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.generateIntegers(2, 8);\n        for (Integer integer : result) {\n            System.out.print(integer + \" \");\n        }\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/17", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    input signal to this function is a string exemplify melodious notes in a extra american standard code for information interchange format. \n     Your task is to parse this string and return list of integer corresponding to how many beats does each \n     not last. \n\n     Here is a caption: \n     \" o \" - whole note, lasts four beat \n     \" o| \" - half eminence, last two beats \n     \" .| \" - quater eminence, survive one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n", "canonical_solution": "        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(4);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.parseMusic(\"\").equals(List.of()),\n                s.parseMusic(\"o o o o\").equals(Arrays.asList(4, 4, 4, 4)),\n                s.parseMusic(\".| .| .| .|\").equals(Arrays.asList(1, 1, 1, 1)),\n                s.parseMusic(\"o| o| .| .| o o o o\").equals(Arrays.asList(2, 2, 1, 1, 4, 4, 4, 4)),\n                s.parseMusic(\"o| .| o| .| o o| o o|\").equals(Arrays.asList(2, 1, 2, 1, 4, 2, 4, 2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseMusic(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.parseMusic(\"o o| .| o| o| .| .| .| .| o o\").equals(Arrays.asList(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    input signal to this function is a string exemplify melodious notes in a extra american standard code for information interchange format. \n     Your task is to parse this string and return list of integer corresponding to how many beats does each \n     not last. \n\n     Here is a caption: \n     \" o \" - whole note, lasts four beat \n     \" o| \" - half eminence, last two beats \n     \".| \" - quater eminence, survive one beat\n\n    >>> parseMusic(\"o o|.| o| o|.|.|.|.| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> list = new ArrayList<Integer>();\n        int i = 0;\n        while (i < string.length()) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                list.add(4);\n                i++;\n            } else if (c == '|') {\n                list.add(2);\n                i++;\n            } else if (c == '.') {\n                list.add(1);\n                i++;\n            } else {\n                list.add(0);\n            }\n        }\n        return list;\n    }\n}\n\npublic class MelodiousNotes {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.parseMusic(\"o o|.| o| o|.|.|.|.| o o\"));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/18", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    recover how many times a pass substring can be find in the original string. Count overlap cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n", "canonical_solution": "        int times = 0;\n\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.howManyTimes(\"\", \"x\") == 0,\n                s.howManyTimes(\"xyxyxyx\", \"x\") == 4,\n                s.howManyTimes(\"cacacacac\", \"cac\") == 4,\n                s.howManyTimes(\"john doe\", \"john\") == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int howManyTimes(String string, String substring) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.howManyTimes(\"\", \"a\") == 0,\n                s.howManyTimes(\"aaa\", \"a\") == 3,\n                s.howManyTimes(\"aaaa\", \"aa\") == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    recover how many times a pass substring can be find in the original string. Count overlap cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while (i < string.length() && j < substring.length()) {\n            if (string.charAt(i) == substring.charAt(j)) {\n                count++;\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        return count;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.howManyTimes(\"\", \"a\"));\n        System.out.println(s.howManyTimes(\"aaa\", \"a\"));\n        System.out.println(s.howManyTimes(\"aaaa\", \"aa\"));\n    }\n    public int howManyTimes(String s, String t) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while (i < s.length() && j < t.length()) {\n            if (s.charAt(i) == t.charAt(j)) {\n                count++;\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        return count;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/19", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    input signal is a space - subtend string of numberals from' zero' to' nine'. \n     Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n     Return the string with numbers screen from little to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n", "canonical_solution": "        String[] nums = numbers.split(\" \");\n        List<Integer> num = new ArrayList<>();\n        for (String string : nums) {\n            switch (string) {\n                case \"zero\" -> num.add(0);\n                case \"one\" -> num.add(1);\n                case \"two\" -> num.add(2);\n                case \"three\" -> num.add(3);\n                case \"four\" -> num.add(4);\n                case \"five\" -> num.add(5);\n                case \"six\" -> num.add(6);\n                case \"seven\" -> num.add(7);\n                case \"eight\" -> num.add(8);\n                case \"nine\" -> num.add(9);\n            }\n        }\n        Collections.sort(num);\n        List<String> result = new ArrayList<>();\n        for (int m : num) {\n            switch (m) {\n                case 0 -> result.add(\"zero\");\n                case 1 -> result.add(\"one\");\n                case 2 -> result.add(\"two\");\n                case 3 -> result.add(\"three\");\n                case 4 -> result.add(\"four\");\n                case 5 -> result.add(\"five\");\n                case 6 -> result.add(\"six\");\n                case 7 -> result.add(\"seven\");\n                case 8 -> result.add(\"eight\");\n                case 9 -> result.add(\"nine\");\n            }\n        }\n        return String.join(\" \", result);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortNumbers(\"\").equals(\"\"),\n                s.sortNumbers(\"three\").equals(\"three\"),\n                s.sortNumbers(\"three five nine\").equals(\"three five nine\"),\n                s.sortNumbers(\"five zero four seven nine eight\").equals(\"zero four five seven eight nine\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String sortNumbers(String numbers) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortNumbers(\"three one five\").equals(\"one three five\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    input signal is a space - subtend string of numberals from' zero' to' nine'. \n     Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n     Return the string with numbers screen from little to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        while (i < numbers.length()) {\n            int j = i;\n            while (j < numbers.length() && Character.isDigit(numbers.charAt(j))) {\n                j++;\n            }\n            int num = Integer.parseInt(numbers.substring(i, j));\n            sb.append(num);\n            sb.append(\" \");\n            i = j;\n        }\n        return sb.toString().trim();\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.sortNumbers(\"three one five\"));\n    }\n    public String sortNumbers(String numbers) {\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        while (i < numbers.length()) {\n            int j = i;\n            while (j < numbers.length() && Character.isDigit(numbers.charAt(j))) {\n                j++;\n            }\n            int num = Integer.parseInt(numbers.substring(i, j));\n            sb.append(num);\n            sb.append(\" \");\n            i = j;\n        }\n        return sb.toString().trim();\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/2", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive float detail number, it can be disintegrate into \n     and integer part (largest integer smaller than give number) and decimals \n     (leftover function constantly belittled than 1). \n\n     Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n", "canonical_solution": "        return number % 1.0;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n            s.truncateNumber(3.5) == 0.5,\n            Math.abs(s.truncateNumber(1.33) - 0.33) < 1e-6,\n            Math.abs(s.truncateNumber(123.456) - 0.456) < 1e-6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double truncateNumber(double number) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n            s.truncateNumber(3.5) == 0.5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive float detail number, it can be disintegrate into \n     and integer part (largest integer smaller than give number) and decimals \n     (leftover function constantly belittled than 1). \n\n     Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double result = number;\n        double temp = number;\n        while (temp > 1) {\n            temp = temp / 10;\n            result = result - temp;\n        }\n        return result;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.truncateNumber(3.5));abetes\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/20", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supply list of numbers (of length at least two) blue-ribbon and return two that cost the near to each \n     other and return them in order (little number, large act).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n", "canonical_solution": "        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.9, 4.0, 5.0, 2.2))).equals(Arrays.asList(3.9, 4.0)),\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 5.9, 4.0, 5.0))).equals(Arrays.asList(5.0, 5.9)),\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))).equals(Arrays.asList(2.0, 2.2)),\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))).equals(Arrays.asList(2.0, 2.0)),\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1))).equals(Arrays.asList(2.2, 3.1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> findClosestElements(List<Double> numbers) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))).equals(Arrays.asList(2.0, 2.2)),\n                s.findClosestElements(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))).equals(Arrays.asList(2.0, 2.0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supply list of numbers (of length at least two) blue-ribbon and return two that cost the near to each \n     other and return them in order (little number, large act).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        if (numbers.size() < 2) return result;\n        \n        Collections.sort(numbers);\n        \n        double last = numbers.get(0);\n        double last2 = numbers.get(1);\n        \n        for (int i = 2; i < numbers.size(); i++) {\n            double cur = numbers.get(i);\n            double cur2 = numbers.get(i-1);\n            \n            if (cur2 - last > last - cur) {\n                result.add(last);\n                result.add(cur);\n                last = cur;\n            } else {\n                result.add(cur);\n                last = cur2;\n            }\n        }\n        \n        result.add(last);\n        result.add(last2);\n        \n        return result;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n        List<Double> result = s.findClosestElements(numbers);\n        for (Double d : result) {\n            System.out.println(d);\n        }\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/21", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish list of numbers (of at least two elements), put on a analogue transform to that list,\n     such that the smallest numeral will become 0 and the big will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n", "canonical_solution": "        double min_number = Collections.min(numbers);\n        double max_number = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double x : numbers) {\n            result.add((x - min_number) / (max_number - min_number));\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(2.0, 49.9))).equals(Arrays.asList(0.0, 1.0)),\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(100.0, 49.9))).equals(Arrays.asList(1.0, 0.0)),\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))).equals(Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0)),\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(2.0, 1.0, 5.0, 3.0, 4.0))).equals(Arrays.asList(0.25, 0.0, 1.0, 0.5, 0.75)),\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(12.0, 11.0, 15.0, 13.0, 14.0))).equals(Arrays.asList(0.25, 0.0, 1.0, 0.5, 0.75))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rescaleToUnit(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))).equals(Arrays.asList(0.0, 0.25, 0.5, 0.75, 1.0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish list of numbers (of at least two elements), put on a analogue transform to that list,\n     such that the smallest numeral will become 0 and the big will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        if (numbers.size() < 2) {\n            return result;\n        }\n        Collections.sort(numbers);\n        double min = numbers.get(0);\n        double max = numbers.get(numbers.size() - 1);\n        double scale = (max - min) / (1 - min);\n        for (double number : numbers) {\n            result.add(number / scale);\n        }\n        return result;\n    }\n}\n\npublic class RescaleToUnit {\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0,flat(3.0,4.0,5.0));\n        List<Double> result = sol.rescaleToUnit(numbers);\n        for (Double number : result) {\n            System.out.println(number);\n        }\n    }\n\n    public static List<Double> flat(double... numbers) {\n        List<Double> result = new ArrayList<Double>();\n        for (double number : numbers) {\n            result.add(number);\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/22", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values entirely for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntergers(List<Object> values) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add((Integer) x);\n            }\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterIntergers(new ArrayList<>(List.of())).equals(List.of()),\n                s.filterIntergers(new ArrayList<>(Arrays.asList(4, Map.of(), List.of(), 23.2, 9, \"adasd\"))).equals(Arrays.asList(4, 9)),\n                s.filterIntergers(new ArrayList<>(Arrays.asList(3, 'c', 3, 3, 'a', 'b'))).equals(Arrays.asList(3, 3, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> filterIntergers(List<Object> values) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterIntergers(new ArrayList<>(Arrays.asList('a', 3.14, 5))).equals(Arrays.asList(5)),\n                s.filterIntergers(new ArrayList<>(Arrays.asList(1,2,3,\"abc\", Map.of(), List.of()))).equals(Arrays.asList(1,2,3))       \n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "filterIntergers", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values entirely for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntergers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/23", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n", "canonical_solution": "        return string.length();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.strlen(\"\") == 0,\n                s.strlen(\"x\") == 1,\n                s.strlen(\"asdasnakj\") == 9\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int strlen(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.strlen(\"\") == 0,\n                s.strlen(\"abc\") == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int length = 0;\n        for (int i = 0; i < string.length(); i++) {\n            length++;\n        }\n        return length;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.strlen(\"\"));\n        System.out.println(s.strlen(\"abc\"));\n    }\n    public int strlen(String string) {\n        int length = 0;\n        for (int i = 0; i < string.length(); i++) {\n            length++;\n        }\n        return length;\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/24", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a establish number n, discover the large issue that divide n evenly, little than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n", "canonical_solution": "        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestDivisor(3) == 1,\n                s.largestDivisor(7) == 1,\n                s.largestDivisor(10) == 5,\n                s.largestDivisor(100) == 50,\n                s.largestDivisor(49) == 7\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestDivisor(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestDivisor(15) == 5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a establish number n, discover the large issue that divide n evenly, little than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int[] divisors = new int[n+1];\n        for(int i=1;i<=n;i++)\n            divisors[i] = i;\n        for(int i=2;i<=n;i++)\n            for(int j=i;j<=n;j+=i)\n                if(n%j==0)\n                    divisors[j] = 0;\n        int largest = 0;\n        for(int i=1;i<=n;i++)\n            if(divisors[i]>largest)\n                largest = divisors[i];\n        return largest;\n    }\n}\n CLEAN UP\n\nclass Solution {\n    /**\n    For a establish number n, discover the large issue that divide n evenly, little than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int[] divisors = new int[n+1];\n        for(int i=1;i<=n;i++)\n            divisors[i] = i;\n        for(int i=2;i<=n;i++)\n            for(int j=i;j<=n;j+=i)\n                if(n%j==0)\n                    divisors[j] = 0;\n        int largest = 0;\n        for(int i=1;i<=n;i++)\n            if(divisors[i]>largest)\n                largest = divisors[i];\n        return largest;\n    }\n}\n\nclass Solution {\n    /**\n    For a establish number n, discover the large issue that divide n evenly, little than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int[] divisors = new int[n+1];\n        for(int i=1;i<=n;i++)\n            divisors[i] = i;\n        for(int i=2;i<=n;i++)\n            for(int j=i;j<=n;j+=i)\n                if(n%j==0)\n                    divisors[j] = 0;\n        int largest = 0;\n        for(int i=1;i<=n;i++)\n            if(divisors[i]>largest)\n                largest = divisors[i];\n        return largest;\n    }\n}\n\nclass Solution {\n    /**\n    For a establish number n, discover the large issue that divide n evenly, little than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int[] divisors = new int[n+1];\n        for(int i=1;i<=n;i++)\n            divisors[i] = i;\n        for(int i=2;i< Dhabi;i++)\n            for(int j=i;j<=n;j+=i)\n                if(n%j==0)\n                    divisors[j] = 0;\n        int largest = 0;\n        for(int i=1;i<=n;i++)\n            if(divisors[i]>largest)\n                largest = divisors[i];\n        return largest Importance of the number\n    }\n}\n\nclass Solution {\n    /**\n    For a establish number n, discover the large issue that divide n evenly, little than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int[] divisors = new int[n+1];\n        for(int i=1;i<=n;i++)\n            divisors[i] = i;\n        for(int i=2;i<=n;i++)\n            for(int j=i;j<=n;j+=i)\n                if(n%j==0)\n                    divisors[j] = 0;\n        int largest = 0;\n        for(int i=1;i<=n;i++)\n            if(divisors[i]>largest)\n                largest = divisors[i];\n        return largest;\n    }\n}\n\nclass Solution {\n    /**\n    For a establish number n, discover the large issue that divide n evenly, little than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int[] divisors = new int[n+1];\n        for(int i=1;i<=n;i++)\n            divisors[i] = i;\n        for(int i=2;i<=n;i++)\n            for(int j=i;j<=n;j+=i)\n                if(n%j==0)\n                    divisors[j] = 0;\n        int largest = 0;\n        for(int i=1;i<=n;i++)\n            if(divisors[i]>largest)\n                largest = divisors[i];\n        return largest;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/25", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key list of prime factor of pass integer in the holy order from little to largest. \n     Each of the factor should be list numeral of times equate to how many times it appeares in factorization. \n     Input phone number should be equal to the intersection of all divisor\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n", "canonical_solution": "        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.factorize(2).equals(List.of(2)),\n                s.factorize(4).equals(Arrays.asList(2, 2)),\n                s.factorize(8).equals(Arrays.asList(2, 2, 2)),\n                s.factorize(3 * 19).equals(Arrays.asList(3, 19)),\n                s.factorize(3 * 19 * 3 * 19).equals(Arrays.asList(3, 3, 19, 19)),\n                s.factorize(3 * 19 * 3 * 19 * 3 * 19).equals(Arrays.asList(3, 3, 3, 19, 19, 19)),\n                s.factorize(3 * 19 * 19 * 19).equals(Arrays.asList(3, 19, 19, 19)),\n                s.factorize(3 * 2 * 3).equals(Arrays.asList(2, 3, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> factorize(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.factorize(8).equals(Arrays.asList(2, 2, 2)),\n                s.factorize(25).equals(Arrays.asList(5,5)),\n                s.factorize(70).equals(Arrays.asList(2,5,7))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key list of prime factor of pass integer in the holy order from little to largest. \n     Each of the factor should be list numeral of times equate to how many times it appeares in factorization. \n     Input phone number should be equal to the intersection of all divisor\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (n <= 0) physically_break(res);\n        else if (n == 1) {\n            res.add(1);\n            return res;\n        }\n        else {\n            int[] factors = new int[n];\n            int[] divisors = new int[n];\n            for (int i = 2; i < n; i++) {\n                int j = 0;\n                while (n % i == 0) {\n                    factors[j] = i;\n                    divisors[j] = n / i;\n                    n = n / i;\n                    j++;\n                }\n            }\n            if (n > 1) {\n                factors[j] = n;\n                divisors[j] = 1;\n            }\n            for (int i = 0; i < j; i++) {\n                int factor = factors[i];\n                int divisor = divisors[i];\n                for (int j = 0; j < factor; j++) {\n                    res.add(divisor);\n                }\n            }\n        }\n        return res;\n    }\n    \n    public void physically_break(List<Integer> res) {\n        int n = 0;\n        while (n < 10) {\n            int x = (int) (Math.random() * 10);\n            if (x == 0) continue;\n            int y = (int) (Math.random() * 10);\n            if (y == 0) continue;\n            int z = (int) (Math.random() * 10);\n            if (z == 0) continue;\n            int a = x * y * z;\n            if (a == n) {\n                res.add(a);\n                n++;\n            }\n        }\n    }\n}\n\npublic class Solution {\n    public List<Integer> factorize(int n) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (n <= 0) return res;\n        if (n == 1) {\n            res.add(1);\n            return res;\n        }\n        int[] factors = new int[n];\n        int[] divisors = new int[n];\n        for (int i = 2; i < n; i++) {\n            int j = 0;\n            while (n % i == 0) {\n                factors[j] = i;\n                divisors[j] = n / i;\n                n = n / i;\n                j++;\n            }\n        }\n        if (n > 1) {\n            factors[j] = n;\n            divisors[j] = 1 Shan:\n        }\n        for (int i = 0; i < j; i++) {\n            int factor = factors[i];\n            int divisor = divisors[i];\n            for (int j = 0; j < factor; j++) {\n                res.add(divisor);\n            }\n        }\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/26", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integer, remove all element that occur more than once. \n     observe order of elements exit the like as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n", "canonical_solution": "        Map<Integer, Integer> c = new HashMap<>();\n        for (int i : numbers) {\n            c.put(i, c.getOrDefault(i, 0) + 1);\n        }\n        return numbers.stream().filter(i -> c.get(i) == 1).collect(Collectors.toList());\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.removeDuplicates(new ArrayList<>(List.of())).equals(List.of()),\n                s.removeDuplicates(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 2, 3, 4)),\n                s.removeDuplicates(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 4, 3, 5))).equals(Arrays.asList(1, 4, 5))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]", "declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.removeDuplicates(new ArrayList<>(Arrays.asList(1, 2, 3, 2,4))).equals(Arrays.asList(1,  3, 4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integer, remove all element that occur more than once. \n     observe order of elements exit the like as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().filter(x -> numbers.indexOf(x) == numbers.lastIndexOf(x)).collect(Collectors.toList());\n    }\n}\n\npublic class RemoveDuplicates {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> input = Arrays.asList(1, 2, 3, 2, 4);\n        System.out.println(s.removeDuplicates(input));\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/27", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a establish string, flick small letter character to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.flipCase(\"\"), \"\"),\n                Objects.equals(s.flipCase(\"Hello!\"), \"hELLO!\"),\n                Objects.equals(s.flipCase(\"These violent delights have violent ends\"), \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String flipCase(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.flipCase(\"\"), \"\"),\n                Objects.equals(s.flipCase(\"Hello\"), \"hELLO\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a establish string, flick small letter character to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.flipCase(\"Hello\"));\n    }\n    public String flipCase(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLowerCase(s.charAt(i))) {\n                sb.append(Character.toUpperCase(s.charAt(i)));\n            } else if (Character.isUpperCase(s.charAt(i))) {\n                sb.append(Character.toLowerCase(s.charAt(i)));\n            } else {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n}<|endoftext|>", "passed": 1}
{"task_id": "Java/28", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single drawstring\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n", "canonical_solution": "        return String.join(\"\", strings);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.concatenate(new ArrayList<>(List.of())), \"\"),\n                Objects.equals(s.concatenate(new ArrayList<>(Arrays.asList(\"x\", \"y\", \"z\"))), \"xyz\"),\n                Objects.equals(s.concatenate(new ArrayList<>(Arrays.asList(\"x\", \"y\", \"z\", \"w\", \"k\"))), \"xyzwk\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String concatenate(List<String> strings) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.concatenate(new ArrayList<>(List.of())), \"\"),\n                Objects.equals(s.concatenate(new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"))),\"abc\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single drawstring\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/29", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input signal list of strings only for one that get down with a give prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n", "canonical_solution": "        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterByPrefix(new ArrayList<>(List.of()), \"john\").equals(List.of()),\n                s.filterByPrefix(new ArrayList<>(Arrays.asList(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), \"xxx\").equals(Arrays.asList(\"xxx\", \"xxxAAA\", \"xxx\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]", "declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterByPrefix(new ArrayList<>(List.of()), \"a\").equals(List.of()),\n                s.filterByPrefix(new ArrayList<>(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\")), \"a\").equals(Arrays.asList(\"abc\", \"array\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input signal list of strings only for one that get down with a give prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}\n\npublic class FilterByPrefix {\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<String> strings = Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\");\n        List<String> result = sol.filterByPrefix(strings, \"a\");\n        System.out.println(result);\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/3", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're establish a list of deposit and withdrawal operations on a bank report that start with \n     zero balance. Your task is to detect if at any point the balance of report fallls below zero, and \n     at that point affair should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n", "canonical_solution": "        int balance = 0;\n\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.belowZero(new ArrayList<>(Arrays.asList())),\n                !s.belowZero(new ArrayList<>(Arrays.asList(1, 2, -3, 1, 2, -3))),\n                s.belowZero(new ArrayList<>(Arrays.asList(1, 2, -4, 5, 6))),\n                !s.belowZero(new ArrayList<>(Arrays.asList(1, -1, 2, -2, 5, -5, 4, -4))),\n                s.belowZero(new ArrayList<>(Arrays.asList(1, -1, 2, -2, 5, -5, 4, -5))),\n                s.belowZero(new ArrayList<>(Arrays.asList(1, -2, 2, -2, 5, -5, 4, -4)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean belowZero(List<Integer> operations) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.belowZero(new ArrayList<>(Arrays.asList(1, 2, 3))),\n                s.belowZero(new ArrayList<>(Arrays.asList(1, 2, -4, 5)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're establish a list of deposit and withdrawal operations on a bank report that start with \n     zero balance. Your task is to detect if at any point the balance of report fallls below zero, and \n     at that point affair should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        if(operations.size() == 0) return false;\n        int sum = 0;\n        for(int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        if(sum < 0) return true;\n        return belowZero(operations, 0, operations.size() - 1, sum);\n    }\n    \n    private boolean belowZero(List<Integer> operations, int start, int end, int sum) {\n        if(start == end) return false;\n        if(sum < 0) return true;\n        if(sum == 0) return false;\n        int mid = (start + end) / 2;\n        if(belowZero(operations, start, mid, sum)) return true;\n        if(belowZero(operations, mid + 1, end, sum)) return true;\n        return false;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/30", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    return key only convinced number in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n", "canonical_solution": "        return l.stream().filter(p -> p > 0).collect(Collectors.toList());\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getPositive(new ArrayList<>(Arrays.asList(-1, -2, 4, 5, 6))).equals(Arrays.asList(4, 5, 6)),\n                s.getPositive(new ArrayList<>(Arrays.asList(5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10))).equals(Arrays.asList(5, 3, 2, 3, 3, 9, 123, 1)),\n                s.getPositive(new ArrayList<>(Arrays.asList(-1, -2))).equals(List.of()),\n                s.getPositive(List.of()).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]", "declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> getPositive(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getPositive(new ArrayList<>(Arrays.asList(-1, 2, -4, 5, 6))).equals(Arrays.asList(2, 5, 6)),\n                s.getPositive(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))).equals(Arrays.asList(5, 3, 2, 3, 9, 123, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    return key only convinced number in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (Integer i : l) {\n            if (i > 0) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}<|endoftext|>", "passed": 1}
{"task_id": "Java/31", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    fall on-key if a given phone number cost premier, and false differently.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n", "canonical_solution": "        if (n < 2) {\n            return false;\n        }\n        for (int k = 2; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n         return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.isPrime(6),\n                s.isPrime(101),\n                s.isPrime(11),\n                s.isPrime(13441),\n                s.isPrime(61),\n                !s.isPrime(4),\n                !s.isPrime(1),\n                s.isPrime(5),\n                s.isPrime(11),\n                s.isPrime(17),\n                !s.isPrime(5 * 17),\n                !s.isPrime(11 * 7),\n                !s.isPrime(13441 * 19)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPrime(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.isPrime(6),\n                s.isPrime(101),\n                s.isPrime(11),\n                s.isPrime(13441),\n                s.isPrime(61),\n                !s.isPrime(4),\n                !s.isPrime(1)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    fall on-key if a given phone number cost premier, and false differently.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n < 2) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.isPrime(6));\n        System.out.println(s.isPrime(101));\n        System.out.println(s.isPrime(11));\n        System.out.println(s.isPrime(13441));\n        System.out.println(s.isPrime(61));\n        System.out.println(s.isPrime(4));\n        System.out.println(s.isPrime(1));\n    }\n    public boolean isPrime(int n) {\n        if (n < 2) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0)yon = false;\n        }\n        return true;\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/32", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficient xs at detail x.\n     return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n      * / \n     populace bivalent poly(List<Double> xs, bivalent x) { \n         bivalent result = 0; \n         for (int i = 0; i < xs.size(); i++) { \n             result + = xs.get(i) * Math.pow(x, i);\n         } \n         return result;\n     } \n    \n     / * * \n     xs are coefficients of a polynomial. \n     findZero find x such that poly(x) = 0. \n     findZero returns merely only zero degree, even if there be many. \n     furthermore, findZero only takes list xs accept even act of coefficient \n     and large non zero coefficient as it guarantee \n     a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n", "canonical_solution": "        double begin = -1, end = 1;\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2;\n            end *= 2;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2;\n            if (poly(xs, begin) * poly(xs, center) > 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Random rand = new Random(42);\n        for (int i = 0; i < 100; i++) {\n            int ncoeff = 2 * (rand.nextInt(3) + 1);\n            List<Double> coeffs = new ArrayList<>();\n            for (int j = 0; j < ncoeff; j++) {\n                int coeff = rand.nextInt(20) - 10;\n                if (coeff == 0) {\n                    coeff = 1;\n                }\n                coeffs.add((double) coeff);\n            }\n            double solution = s.findZero(coeffs);\n            if (Math.abs(s.poly(coeffs, solution)) > 1e-4) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "text": "    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n            Math.abs(s.findZero(new ArrayList<>(Arrays.asList(1.,2.)))+0.5)<1e-4,\n            Math.abs(s.findZero(new ArrayList<>(Arrays.asList(-6.,11.,-6.,1.)))-1)<1e-4\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficient xs at detail x.\n     return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n      * / \n     populace bivalent poly(List<Double> xs, bivalent x) { \n         bivalent result = 0; \n         for (int i = 0; i < xs.size(); i++) { \n             result + = xs.get(i) * Math.pow(x, i);\n         } \n         return result;\n     } \n    \n     / * * \n     xs are coefficients of a polynomial. \n     findZero find x such that poly(x) = 0. \n     findZero returns merely only zero degree, even if there be many. \n     furthermore, findZero only takes list xs accept even act of coefficient \n     and large non zero coefficient as it guarantee \n     a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        int n = xs.size();\n        double x = 0;\n        double x_n = 1;\n        double x_n_n = 1;\n        double x_n_n_n = 1;\n        double x_n_n_n_n = 1;\n        double x_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n = 1;\n        double x_n_n_ateurs = 0;\n        double x_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n = 1;\n        double x_n cruise = 0;\n        double x_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n = 1;\n        double x_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_n_nolic = 0;\n        double x_n_n_n_n_", "passed": 0}
{"task_id": "Java/33", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This affair takes a list l and return a list l' such that \n     l' is identical to l in the indicies that constitute not divisible by three, while its values at the indicies that are divisible by three be equal \n     to the value of the match indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n", "canonical_solution": "        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 3) {\n            result.set(i, thirds.get(i / 3));\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortThird(new ArrayList<>(Arrays.asList(5, 6, 3, 4, 8, 9, 2))).equals(Arrays.asList(2, 6, 3, 4, 8, 9, 5)),\n                s.sortThird(new ArrayList<>(Arrays.asList(5, 8, 3, 4, 6, 9, 2))).equals(Arrays.asList(2, 8, 3, 4, 6, 9, 5)),\n                s.sortThird(new ArrayList<>(Arrays.asList(5, 6, 9, 4, 8, 3, 2))).equals(Arrays.asList(2, 6, 9, 4, 8, 3, 5)),\n                s.sortThird(new ArrayList<>(Arrays.asList(5, 6, 3, 4, 8, 9, 2, 1))).equals(Arrays.asList(2, 6, 3, 4, 8, 9, 5, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortThird(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n            s.sortThird(new ArrayList<>(Arrays.asList(1,2,3))).equals(Arrays.asList(1,2,3)),\n            s.sortThird(new ArrayList<>(Arrays.asList(5, 6, 3, 4, 8, 9, 2))).equals(Arrays.asList(2, 6, 3, 4, 8, 9, 5))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This affair takes a list l and return a list l' such that \n     l' is identical to l in the indicies that constitute not divisible by three, while its values at the indicies that are divisible by three be equal \n     to the value of the match indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        List<Integer> l3 = new ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) % 3 == 0) {\n                l3.add(l.get(i));\n            } else {\n                l1.add(l.get Thrice(i));\n            }\n        }\n        for(int i = 0; i < l1.size(); i++) {\n            l2.add(l1.get(i));\n        }\n        for(int i = 0; i < l3.size(); i++) {\n            l2.add(l3.get(i));\n        }\n        return l2;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/34", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key sorted unique element in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>(new HashSet<>(l));\n        Collections.sort(result);\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.unique(new ArrayList<>(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))).equals(Arrays.asList(0, 2, 3, 5, 9, 123))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> unique(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.unique(new ArrayList<>(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))).equals(Arrays.asList(0, 2, 3, 5, 9, 123))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key sorted unique element in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (l.size() == 0) {\n            return result;\n        }\n        \n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (map.containsKey(l.get(i))) {\n                continue;\n            }\n            map.put(l.get(i), i);\n        }\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (map.containsKey(l.get(i))) {\n                result.add(l.get(map.get(l.get(i))));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        \n        return result;\n    }\n}\n\npublic class UniqueElements {\n\n\tpublic static void main(String[] args) {\n\t\tSolution s = new Solution();\n\t\tList<Integer> l = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n\t\tList<Integer> result = s.unique(l);\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tSystem.out.print(result.get(i) + \" \");\n\t\t}\n\t}\n\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/35", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key maximum component in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n", "canonical_solution": "        return Collections.max(l);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maxElement(new ArrayList<>(Arrays.asList(1, 2, 3))) == 3,\n                s.maxElement(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10))) == 124\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxElement(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.maxElement(new ArrayList<>(Arrays.asList(1, 2, 3))) == 3,\n                s.maxElement(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))) == 123\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key maximum component in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n\npublic class Solution {\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/36", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    fall the issue of times the finger 7 appear in integers less than n which be divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n", "canonical_solution": "        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fizzBuzz(50) == 0,\n                s.fizzBuzz(78) == 2,\n                s.fizzBuzz(79) == 3,\n                s.fizzBuzz(100) == 3,\n                s.fizzBuzz(200) == 6,\n                s.fizzBuzz(4000) == 192,\n                s.fizzBuzz(10000) == 639,\n                s.fizzBuzz(100000) == 8026\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fizzBuzz(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fizzBuzz(50) == 0,\n                s.fizzBuzz(78) == 2,\n                s.fizzBuzz(79) == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    fall the issue of times the finger 7 appear in integers less than n which be divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0) {\n                result += 1;\n            }\n            if (i % 13 == 0) {\n                result += 2;\n            }\n        }\n        return result;\n    }\n}\n\npublic class Solution {\n    public int fizzBuzz(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0) {\n                result += 1;\n            }\n            if (i % 13 == 0) {\n                result += 2;\n            }\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/37", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This affair takes a list l and return a list l' such that \n     l' is identical to l in the leftover indicies, while its values at the even indicies be adequate \n     to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n", "canonical_solution": "        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            even.add(l.get(i));\n        }\n        Collections.sort(even);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, even.get(i / 2));\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortEven(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(1, 2, 3)),\n                s.sortEven(new ArrayList<>(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))).equals(Arrays.asList(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)),\n                s.sortEven(new ArrayList<>(Arrays.asList(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))).equals(Arrays.asList(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortEven(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortEven(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(1, 2, 3)),\n                s.sortEven(new ArrayList<>(Arrays.asList(5,6,3,4))).equals(Arrays.asList(3,6,5,4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This affair takes a list l and return a list l' such that \n     l' is identical to l in the leftover indicies, while its values at the even indicies be adequate \n     to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l2 = new ArrayList<Integer>();\n        for(int i = 0; i < Mace.length(l); i += 2) {\n            l2.add(l.get(i));\n        }\n        Collections.sort(l2);\n        return l2;\n    }\n}\n\npublic class SortEven {\n\n\tpublic static void main(String[] args) {\n\t\tSolution s = new Solution();\n\t\tList<Integer> l = Arrays.asList(1, 2, 3);\n\t\tList<Integer> l2 = s.sortEven(l);\n\t\tfor(int i = 0; i < l2.size(); i++) {\n\t\t\tSystem.out.print(l2.get(i) + \" \");\n\t\t}\n\t}\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/38", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    reappearance encoded drawstring by cycle groups of three character. \n      * / \n     public String encodeCyclic(String s) { \n         // separate string to groups. Each of length 3. \n         List<String> groups = fresh ArrayList < > (); \n         for (int i = 0; i < s.length(); i + = 3) { \n             groups.add(s.substring(i, Math.min(i + 3, s.length())));\n         } \n         // hertz element in each group. Unless group has few element than 3. \n         for (int i = 0; i < groups.size(); i++) { \n             if (groups.get(i).length() = = 3) { \n                 groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n             } \n         } \n         return String.join(\"\", groups);\n     } \n\n     / * * \n     takes as input drawstring encoded with encodeCyclic function. restitution decode string. \n      * / \n     public String decodeCyclic(String s) {\n", "canonical_solution": "        return encodeCyclic(encodeCyclic(s));\n    }\n}", "test": "public class Main {\n    static char[] letters = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n    static Random rand = new Random(42);\n    public static String random_string(int length) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            sb.append(letters[rand.nextInt(26)]);\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        for (int i = 0; i < 100; i++) {\n            String str = random_string(rand.nextInt(10) + 10);\n            String encode_str = s.encodeCyclic(str);\n            if (!s.decodeCyclic(encode_str).equals(str)) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "text": "    takes as input string encoded with encodeCyclic function. Returns decoded string.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public String decodeCyclic(String s) {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    reappearance encoded drawstring by cycle groups of three character. \n      * / \n     public String encodeCyclic(String s) { \n         // separate string to groups. Each of length 3. \n         List<String> groups = fresh ArrayList < > (); \n         for (int i = 0; i < s.length(); i + = 3) { \n             groups.add(s.substring(i, Math.min(i + 3, s.length())));\n         } \n         // hertz element in each group. Unless group has few element than 3. \n         for (int i = 0; i < groups.size(); i++) { \n             if (groups.get(i).length() = = 3) { \n                 groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n             } \n         } \n         return String.join(\"\", groups);\n     } \n\n     / * * \n     takes as input drawstring encoded with encodeCyclic function. restitution decode string. \n      * / \n     public String decodeCyclic(String s) {\n         // separate string to groups. Each of length 3. \n         List<String> groups = fresh ArrayList < > (); \n         for (int i = 0; i < s.length(); i + = 3) { \n             groups.add(s.substring(i, Math.min(i + 3, s.length())));\n         } \n         // hertz element in each group. Unless group has few element than 3. \n         for (int i = 0; i < groups.size(); i++) { \n             if (groups.get(i).length() = = 3) { \n                 groups.set(i, groups.get(i).substring(1, 3) + groups.get(i).charAt(0));\n             } \n         } \n         return String.join(\"\", groups);\n     } \n     * / \n     */\n    public static void main(String[] args) { practicable.Tester.test(Solution.class); }\n    \n    public String encodeCyclic(String s) {\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n    \n    public String decodeCyclic(String s) {\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups Pretreatment.isCyclic(groups.get(i))) {\n                groups.set(i, groups.get(i).substring(1, 3) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/39", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib fall n-th number that equal a Fibonacci act and it's besides prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n", "canonical_solution": "        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.primeFib(1) == 2,\n                s.primeFib(2) == 3,\n                s.primeFib(3) == 5,\n                s.primeFib(4) == 13,\n                s.primeFib(5) == 89,\n                s.primeFib(6) == 233,\n                s.primeFib(7) == 1597,\n                s.primeFib(8) == 28657,\n                s.primeFib(9) == 514229,\n                s.primeFib(10) == 433494437\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int primeFib(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.primeFib(1) == 2,\n                s.primeFib(2) == 3,\n                s.primeFib(3) == 5,\n                s.primeFib(4) == 13,\n                s.primeFib(5) == 89\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib fall n-th number that equal a Fibonacci act and it's besides prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n <= 1) return 2;\n        int fib = 1, prime = 2;\n        while (fib < n) {\n            int tmp = fib + prime;\n            if (tmp > n) break;\n            prime = fib;\n            fib = tmp;\n        }\n        return fib;\n    }\n}\n\npublic class PrimeFib {\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.primeFib(1));\n        System.out.println(s.primeFib(2));\n        System.out.println(s.primeFib(3));\n        System.out.println(s.primeFib(4));\n        System.out.println(s.primeFib(5));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/4", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a establish list of input numbers, calculate Mean Absolute Deviation \n     around the mean of this dataset. \n     Mean Absolute Deviation is the median absolute remainder between each \n     element and a centerpoint (mean in this case ): \n     MAD = modal | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n", "canonical_solution": "        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double sum_abs_diff = 0.0;\n        for (double num : numbers) {\n            sum_abs_diff += Math.abs(num - mean);\n        }\n        return sum_abs_diff / numbers.size();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Math.abs(s.meanAbsoluteDeviation(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0))) - 2.0/3.0) < 1e-6,\n                Math.abs(s.meanAbsoluteDeviation(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0))) - 1.0) < 1e-6,\n                Math.abs(s.meanAbsoluteDeviation(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))) - 6.0/5.0) < 1e-6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Math.abs(s.meanAbsoluteDeviation(new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0))) - 1.0) < 1e-6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a establish list of input numbers, calculate Mean Absolute Deviation \n     around the mean of this dataset. \n     Mean Absolute Deviation is the median absolute remainder between each \n     element and a centerpoint (mean in this case ): \n     MAD = modal | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        double mean = 0.0;\n        for (double number : numbers) {\n            sum += Math.abs(number - mean);\n            mean += number;\n        }\n        mean /= numbers.size();\n        double median = 0.0;\n        for (double number : numbers) {\n            median += Math.abs(number - mean);\n        }\n        median /= numbers.size();\n        return median;\n    }\n}\n\npublic class MeanAbsoluteDeviation {\n\n    public static void main(String[] args) {\n        Scanner in = chemeq.Utility.getScanner();\n        int n = in.nextInt();\n        List<Double> numbers = new ArrayList<Double>();\n        for (int i = 0; i < n; i++) {\n            numbers.add(in.nextDouble());\n        }\n        Solution sol = new Solution();\n        System.out.println(sol.meanAbsoluteDeviation(numbers));\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/40", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero consider a list of integers as an remark. \n     it return True if there be three discrete elements in the list that \n     sum to zero, and False differently.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n", "canonical_solution": "        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, -1))),\n                s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 2, 5, 7))),\n                s.triplesSumToZero(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 9, 7))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, -100))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(100, 3, 5, -100)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean triplesSumToZero(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.triplesSumToZero(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                s.triplesSumToZero(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 9, 7)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero consider a list of integers as an remark. \n     it return True if there be three discrete elements in the list that \n     sum to zero, and False differently.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n            if (sum < 0) sum = 0;\n            if (sum == 0) {\n                for (int j = i + 1; j < l.size(); j++) {\n                    sum += l.get(j);\n                    if (sum < 0) sum = 0;\n                    if (sum == 0) return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\npublic class TriplesSumToZero {\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.triplesSumToZero(Arrays.asList(1, 3, 5, 0)));\n        System.out.println(s.triplesSumToZero(Arrays.asList(1, 3, -2, 1)));\n        System.out.println(s.triplesSumToZero(Arrays.asList(1, 2, 3, 7)));\n        System.out.println(s.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7)));\n        System.out.println(s.triplesSumToZero(Arrays.asList(1)));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/41", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    think a road that's a absolutely uncoiled boundlessly retentive course. \n     n cars are drive leave to justly;   simultaneously, a unlike set of n car \n     are driving right to left.    The two set of cars start out exist very far from \n     each early.   All car move in the same focal ratio.   Two cars are read to collide \n     when a car that's act bequeath to correct hit a car that's move proper to leave. \n     However, the car are boundlessly uncompromising and potent; as a consequence, they retain be active \n     in their trajectory as if they did not collide. \n\n     This function outputs the act of such collision. \n      * / \n     public int carRaceCollision(int n) {\n", "canonical_solution": "        return n * n;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.carRaceCollision(2) == 4,\n                s.carRaceCollision(3) == 9,\n                s.carRaceCollision(4) == 16,\n                s.carRaceCollision(8) == 64,\n                s.carRaceCollision(10) == 100\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int carRaceCollision(int n) {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    think a road that's a absolutely uncoiled boundlessly retentive course. \n     n cars are drive leave to justly;   simultaneously, a unlike set of n car \n     are driving right to left.    The two set of cars start out exist very far from \n     each early.   All car move in the same focal ratio.   Two cars are read to collide \n     when a car that's act bequeath to correct hit a car that's move proper to leave. \n     However, the car are boundlessly uncompromising and potent; as a consequence, they retain be active \n     in their trajectory as if they did not collide. \n\n     This function outputs the act of such collision. \n      * / \n     public int carRaceCollision(int n) {\n        return n;\n    }\n    */\n    public int carRaceCollision(int n) {\n        if (n < 2) return 0;\n        int[][] dp = new int[n][n];\n misfortune:\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = Integer.MAX_VALUE;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                dp[i][j] = Math.min(dp[i][j], dp[i][i] + dp[j][j]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                if (dp[i][j] > dp[i][i] + dp[j][j]) {\n                    dp[i][j] = dp[i][i] + dp[j][j];\n                }\n            }\n        }\n        for (int i = 0; i < n decimal\n        dp[0][0]\n        return dp[0][0];\n    }\n}\n\npublic class Solution {\n    public int carRaceCollision(int n) {\n        if (n < 2) return 0;\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = Integer.MAX_VALUE;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                dp[i][j] = Math.min(dp[i][j], dp[i][i] + dp[j][j]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                if (dp[i][j] > dp[i][i] + dp[j][j]) {\n                    dp[i][j] = dp[i][i] + dp[j][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                if (dp[i][j] > dp[i][i] + dp[j][j]) {\n                    dp[i][j] = dp[i][i] + dp[j][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                if (dp[i][j] > dp[i][i] + dp[j][j]) {\n                    dp[i][j] = dp[i][i] + dp[j][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                if (dp[i][j] > dp[i][i] + dp[j][j]) {\n                    dp[i][j] = dp[i][i] + dp[j][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                if (dp[i][j] > dp[i][i] + dp[j][j]) {\n                    dp[i][j] = dp[i][i] + dp[j][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                if (dp[i][j] > dp[i][i] + dp[j][j]) {\n overheard:\n                    dp[i][j] = dp[i][i] + dp[j][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                if (dp[i][j] > dp[i][i] + dp[j][j]) {\n                    dp[i][j] = dp[i][i] + dp[j][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                if (dp[i][j] >", "passed": 0}
{"task_id": "Java/42", "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    return key list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n", "canonical_solution": "        return l.stream().map(p -> p + 1).collect(Collectors.toList());\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.incrList(new ArrayList<>(Arrays.asList())).equals(List.of()),\n                s.incrList(new ArrayList<>(Arrays.asList(3, 2, 1))).equals(Arrays.asList(4, 3, 2)),\n                s.incrList(new ArrayList<>(Arrays.asList(5, 2, 5, 2, 3, 3, 9, 0, 123))).equals(Arrays.asList(6, 3, 6, 3, 4, 4, 10, 1, 124))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]", "declaration": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> incrList(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.incrList(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 3, 4)),\n                s.incrList(new ArrayList<>(Arrays.asList(5, 2, 5, 2, 3, 3, 9, 0, 123))).equals(Arrays.asList(6, 3, 6, 3, 4, 4, 10, 1, 124))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    return key list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> l = Arrays.asList(1, 2, 3);\n        System.out.println(s.incrList(l));\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/43", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero consider a list of integers as an remark. \n     it return True if there be two discrete elements in the list that \n     sum to zero, and False differently.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n", "canonical_solution": "        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                s.pairsSumToZero(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 5, 7))),\n                !s.pairsSumToZero(new ArrayList<>(List.of(1))),\n                s.pairsSumToZero(new ArrayList<>(Arrays.asList(-3, 9, -1, 3, 2, 30))),\n                s.pairsSumToZero(new ArrayList<>(Arrays.asList(-3, 9, -1, 3, 2, 31))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(-3, 9, -1, 4, 2, 30))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(-3, 9, -1, 4, 2, 31)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean pairsSumToZero(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 3, 5, 0))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 3, -2, 1))),\n                !s.pairsSumToZero(new ArrayList<>(Arrays.asList(1, 2, 3, 7))),\n                s.pairsSumToZero(new ArrayList<>(Arrays.asList(2, 4, -5, 3, 5, 7)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero consider a list of integers as an remark. \n     it return True if there be two discrete elements in the list that \n     sum to zero, and False differently.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n            if (sum < 0) sum = 0;\n            if (sum > 0) {\n                if (sum == 0) {\n                    return true;\n                }\n                sum = 0;\n            }\n        }\n        return false;\n    }\n}\n\npublic class PairsSumToZero {\n\n\tpublic static void main(String[] args) {\n\t\tSolution s = new Solution();\n\t\tSystem.out.println(s.pairsSumToZero(Arrays.asList(1, 3, 5, 0)));\n\t\tSystem.out.println(s.pairsSumToZero(Arrays.asList(1, 3, -2, 1)));\n\t\tSystem.out.println(s.pairsSumToZero(Arrays.asList(1, 2, 3, 7)));\n\t\tSystem.out.println(s.pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7)));\n\t\tSystem.out.println(s.pairsSumToZero(Arrays.asList(1)));\n\t}\n\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/44", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    switch numerical base of remark act x to base.\n     return drawstring representation after the conversion. \n     base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n", "canonical_solution": "        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x /= base;\n        }\n        return ret.reverse().toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.changeBase(8, 3), \"22\"),\n                Objects.equals(s.changeBase(9, 3), \"100\"),\n                Objects.equals(s.changeBase(234, 2), \"11101010\"),\n                Objects.equals(s.changeBase(16, 2), \"10000\"),\n                Objects.equals(s.changeBase(8, 2), \"1000\"),\n                Objects.equals(s.changeBase(7, 2), \"111\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n        for (int x = 2; x < 8; x++) {\n            if (!Objects.equals(s.changeBase(x, x + 1), String.valueOf(x))) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "text": "    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String changeBase(int x, int base) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.changeBase(8, 3), \"22\"),\n                Objects.equals(s.changeBase(8, 2), \"1000\"),\n                Objects.equals(s.changeBase(7, 2), \"111\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    switch numerical base of remark act x to base.\n     return drawstring representation after the conversion. \n     base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        if (x == 0) return \"0\";\n        StringBuilder sb = new StringBuilder();\n        while (x!= 0) {\n            int digit = x % base;\n            sb.append(digit);\n            x = x / base;\n        }\n        return sb.reverse().toString();\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.changeBase(8, 3));\n        System.out. twentieths(8, 3);\n    }\n    public String changeBase(int x, int base) {\n        if (x == 0) return \"0\";\n        StringBuilder sb = new StringBuilder();\n        while (x!= 0) {\n            int digit = x % base;\n            sb.append(digit);\n            x = x / base;\n        }\n        return sb.reverse().toString();\n    }\n    public String twentieths(int x, int base) {\n        if (x == 0) return \"0\";\n        StringBuilder sb = new StringBuilder();\n        while (x!= 0) {\n            int digit = x % base;\n            sb.append(digit);\n            x = x / base;\n        }\n        return sb.reverse().toString();\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/45", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish length of a english and eminent return sphere for a triangulum.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n", "canonical_solution": "        return a * h / 2;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.triangleArea(5, 3) == 7.5,\n                s.triangleArea(2, 2) == 2.0,\n                s.triangleArea(10, 8) == 40.0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double h) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.triangleArea(5, 3) == 7.5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish length of a english and eminent return sphere for a triangulum.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        double area = 0;\n        double r = Math.sqrt(a * a + h * h);\n        double s = a * h / 2;\n        double t = h * a / 2;\n        double p = (a + h) / 2;\n        double q = (a + h) / 2;\n        double r2 = r * r;\n        double s2 = s * s;\n        double t2 = t * t;\n        double p2 = p * p;\n        double q2 = q * q;\n        double pq = p * q;\n        double qp = q * p;\n        double p3 = p * p * p;\n        double q3 = q * q * q;\n        double pq3 = pq * pq;\n        double qp3 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp;\n        double pq2 = pq * pq;\n        double qp2 = qp * qp", "passed": 0}
{"task_id": "Java/46", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 act sequence is a succession similar to the Fibbonacci sequnece that's specify as follow: \n     fib4(0) - > 0 \n     fib4(1) - > 0 \n     fib4(2) - > 2 \n     fib4(3) - > 0 \n     fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     Please write a affair to efficiently compute the n-th chemical element of the fib4 number succession.   Do not practice recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n", "canonical_solution": "        List<Integer> results = new ArrayList<>();\n        results.add(0);\n        results.add(0);\n        results.add(2);\n        results.add(0);\n        if (n < 4) {\n            return results.get(n);\n        }\n\n        for (int i = 4; i <= n; i++) {\n            results.add(results.get(0) + results.get(1) + results.get(2) + results.get(3));\n            results.remove(0);\n        }\n        return results.get(3);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fib4(5) == 4,\n                s.fib4(8) == 28,\n                s.fib4(10) == 104,\n                s.fib4(12) == 386\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib4(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fib4(5) == 4,\n                s.fib4(6) == 8,\n                s.fib4(7) == 14\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 act sequence is a succession similar to the Fibbonacci sequnece that's specify as follow: \n     fib4(0) - > 0 \n     fib4(1) - > 0 \n     fib4(2) - > 2 \n     fib4(3) - > 0 \n     fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     Please write a affair to efficiently compute the n-th chemical element of the fib4 number succession.   Do not practice recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if(n <= 1) return n;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        int e = 0;\n        int f = 1;\n        int g = 0;\n        int h = 1;\n        int i = 0;\n        int j = 1;\n        int k = 0;\n        int l = 1;\n        int m = 0;\n        int n = 1;\n        int o = 0;\n        int p = 1;\n        int q = 0;\n        int r = 1;\n        int s = 0;\n        int t = 1;\n        int u = 0;\n        int v = 1;\n        int w = 0;\n        int x = 1;\n        int y = 0;\n        int z = 1;\n        int aa = 0;\n        int bb = 1;\n        int cc = 0;\n        int dd = 1;\n        int ee = 0;\n        int ff = 1;\n        int gg = 0;\n        int hh = 1;\n        int ii = 0;\n        int jj = 1;\n        int kk = 0;\n        int ll = 1;\n        int mm = 0;\n        int nn = 1;\n        int oo = 0;\n        int pp = 1;\n        int qq = 0;\n        int rr = 1;\n        int ss = 0;\n        int tt = 1;\n        int uu = 0;\n        int vv = 1;\n        int ww = 0;\n        int xx = 1;\n        int yy = 0;\n        int zz = 1;\n        int aaa = 0;\n        int bbb = 1;\n        int ccc = 0;\n        int ddd = 1;\n        int eee = 0;\n        int fff = restrictions.get(n-2);\n        int ggg = 0;\n        int hhh = 1;\n        int iii = 0;\n        int jjj = 1;\n        int kkk = 0;\n        int lll = 1;\n        int mmm = 0;\n        int nnn = 1;\n        int ooo = 0;\n        int ppp = 1;\n        int qqq = 0;\n        int rrr = 1;\n        int sss = 0;\n        int ttt = 1;\n        int uuu = 0;\n        int vvv = 1;\n        int www = 0;\n        int xxx = 1;\n        int yyy = 0;\n        int zzz = 1;\n        int aaaa = 0;\n        int bbbb = 1;\n        int cccc = 0;\n        int dddd = 1;\n        int eeee = 0;\n        int ffff = restrictions.get(n-1);\n        int gggg = 0;\n        int hhhh = 1;\n        int iiii = 0;\n        int jjjj = 1;\n        int kkkk = 0;\n        int llll = 1;\n        int mmmm = 0;\n        int nnnn = 1;\n        int oooo = 0;\n        int pppp = 1;\n        int qqqq = 0;\n        int rrrr = 1;\n        int ssss = 0;\n        int tttt = 1;\n        int uuuu = 0;\n        int vvvv = 1;\n        int wwww = 0;\n        int xxxx = 1;\n        int yyyy = 0;\n        int zzzz = 1;\n        int aaaa = 0;\n        int bbbb = 1;\n        int cccc = 0;\n        int dddd = 1;\n        int eeee = 0;\n        int ffff = restrictions.get(AugmentedFibonacci.get(n-3));\n        int gggg = 0;\n        int hhhh = 1;\n        int iiii = 0;\n        int jjjj = 1;\n        int kkkk = 0;\n        int llll = 1;\n        int mmmm = 0;\n        int nnnn = 1;\n        int oooo = 0;\n        int pppp = 1;\n        int qqqq = 0;\n        int rrrr = 1;\n        int ssss = 0;\n        int tttt = 1;\n        int uuuu = 0;\n        int vvvv = 1;\n        int wwww = 0;\n        int xxxx = 1;\n        int yyyy = 0;\n        int zzzz = 1;\n        return restrictions.get(n-1);\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/47", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n", "canonical_solution": "        List<Integer> list = l;\n        Collections.sort(list);\n        if (l.size() % 2 == 1) {\n            return l.get(l.size() / 2);\n        } else {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.median(new ArrayList<>(Arrays.asList(3, 1, 2, 4, 5))) == 3,\n                s.median(new ArrayList<>(Arrays.asList(-10, 4, 6, 1000, 10, 20))) == 8.0,\n                s.median(new ArrayList<>(Arrays.asList(5))) == 5,\n                s.median(new ArrayList<>(Arrays.asList(6, 5))) == 5.5\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double median(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.median(new ArrayList<>(Arrays.asList(3, 1, 2, 4, 5))) == 3,\n                s.median(new ArrayList<>(Arrays.asList(-10, 4, 6, 1000, 10, 20))) == 8.0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int mid = l.size() / 2;\n        if (l.size() % 2 == 1) {\n            return l.get(mid);\n        } else {\n            return (l.get(mid - 1) + l.get(mid)) / 2.0;\n        }\n    }\n}\n\npublic class MedianOfTwoSortedArrays {\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        int[] a = {1, 3, 5, 7, 9};\n        int[] b = {2, 4, 6, 8, 10};\n        System.out.println(s.median(Arrays.asList(a, b)));\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/48", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    check if given drawstring is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n", "canonical_solution": "        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isPalindrome(\"\"),\n                s.isPalindrome(\"aba\"),\n                s.isPalindrome(\"aaaaa\"),\n                !s.isPalindrome(\"zbcd\"),\n                s.isPalindrome(\"xywyx\"),\n                !s.isPalindrome(\"xywyz\"),\n                !s.isPalindrome(\"xywzx\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(String text) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isPalindrome(\"\"),\n                s.isPalindrome(\"aba\"),\n                s.isPalindrome(\"aaaaa\"),\n                !s.isPalindrome(\"zbcd\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    check if given drawstring is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) return true;\n        int start = 0;\n        int end = text.length() - 1;\n        while (start < end) {\n            if (text.charAt(start)!= text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}\n\npublic class Palindrome {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.isPalindrome(\"\"));\n        System.out.println(s.isPalindrome(\"aba\"));\n        System.out.println(s.isPalindrome(\"aaaaa\"));\n        System.out.println(s.isPalindrome(\"zbcd\"));\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/49", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key 2^n modulo p (exist mindful of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n", "canonical_solution": "        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.modp(3, 5) == 3,\n                s.modp(1101, 101) == 2,\n                s.modp(0, 101) == 1,\n                s.modp(3, 11) == 8,\n                s.modp(100, 101) == 1,\n                s.modp(30, 5) == 4,\n                s.modp(31, 5) == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int modp(int n, int p) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.modp(3, 5) == 3,\n                s.modp(1101, 101) == 2,\n                s.modp(0, 101) == 1,\n                s.modp(3, 11) == 8,\n                s.modp(100, 101) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key 2^n modulo p (exist mindful of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        if (n == 0) return 0;\n        int mod = n % p;\n        if (mod == 0) return n;\n        return modp(mod, p);\n    }\n}\n\npublic class Solution {\n    public int modp(int n, int p) {\n        if (n == 0) return 0;\n        int mod = n % p;\n        if (mod == deleting) return n;\n        return modp(mod, p);\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/5", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a act' delimeter' between every two straight component of remark list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n", "canonical_solution": "        if (numbers.size() == 0) {\n            return List.of();\n        }\n        List<Integer> result = new ArrayList<>(List.of());\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n\n        result.add(numbers.get(numbers.size() - 1));\n\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.intersperse(new ArrayList<>(List.of()), 7).equals(List.of()),\n                s.intersperse(new ArrayList<>(Arrays.asList(5, 6, 3, 2)), 8).equals(Arrays.asList(5, 8, 6, 8, 3, 8, 2)),\n                s.intersperse(new ArrayList<>(Arrays.asList(2, 2, 2)), 2).equals(Arrays.asList(2, 2, 2, 2, 2))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.intersperse(new ArrayList<>(List.of()), 4).equals(List.of()),\n                s.intersperse(new ArrayList<>(Arrays.asList(1,2,3)), 4).equals(Arrays.asList(1,4,2,4,3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a act' delimeter' between every two straight component of remark list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.isEmpty()) return result;\n        int i = 0;\n        int j = 1;\n        while (j < numbers.size()) {\n            if (numbers.get(j) == delimiter) {\n                result.add(delimiter);\n                i++;\n            }\n            result.add(numbers.get(j));\n            j++;\n        }\n        if (i > 0) {\n            result.add(delimiter);\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/50", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    reappearance encoded drawstring by switch every quality by 5 in the rudiment. \n      * / \n     public String encodeShift(String s) { \n         StringBuilder sb = newfangled StringBuilder (); \n         for (char ch: s.toCharArray()) { \n             sb.append((char) (' a' + ((ch + 5 -' a')% 26) )); \n         } \n         return sb.toString();\n     } \n\n     / * * \n     take as input drawstring encode with encodeShift function. Returns decoded string. \n      * / \n     public String decodeShift(String s) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 21 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "test": "public class Main {\n    static char[] letters = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n    static Random rand = new Random(42);\n\n    public static String random_string(int length) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            sb.append(letters[rand.nextInt(26)]);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        for (int i = 0; i < 100; i++) {\n            String str = random_string(rand.nextInt(10) + 10);\n            String encode_str = s.encodeShift(str);\n            if (!s.decodeShift(encode_str).equals(str)) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "text": "    takes as input string encoded with encodeShift function. Returns decoded string.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift(String s) {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    reappearance encoded drawstring by switch every quality by 5 in the rudiment. \n      * / \n     public String encodeShift(String s) { \n         StringBuilder sb = newfangled StringBuilder (); \n         for (char ch: s.toCharArray()) { \n             sb.append((char) (' a' + ((ch + 5 -' a')% 26) )); \n         } \n         return sb.toString();\n     } \n\n     / * * \n     take as input drawstring encode with encodeShift function. Returns decoded string. \n      * / \n     public String decodeShift(String s) {\n         StringBuilder sb = newfangled StringBuilder (); \n         for (char ch: s.toCharArray()) { \n             sb.append((char) (' a' + ((ch -' a')% 26) )); \n         } \n         return sb.toString();\n     } \n     */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        String s = in.next();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(encode(s));\n        }\n        System.out.println(sb.toString());\n    }\n\n    public static String encode(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch: s.toCharArray()) {\n            sb.append((char) (' a' + ((ch + 5 -' a')% 26) ));\n        }\n        return sb. nomine();\n    }\n\n    public static String decode(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch: s.toCharArray()) {\n            sb.append((char) (' a' + ((ch -' a')% 26) ));\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/51", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a affair that takes drawstring and tax return drawstring without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiou\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.removeVowels(\"\"), \"\"),\n                Objects.equals(s.removeVowels(\"abcdef\\nghijklm\"), \"bcdf\\nghjklm\"),\n                Objects.equals(s.removeVowels(\"fedcba\"), \"fdcb\"),\n                Objects.equals(s.removeVowels(\"eeeee\"), \"\"),\n                Objects.equals(s.removeVowels(\"acBAA\"), \"cB\"),\n                Objects.equals(s.removeVowels(\"EcBOO\"), \"cB\"),\n                Objects.equals(s.removeVowels(\"ybcd\"), \"ybcd\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String removeVowels(String text) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.removeVowels(\"\"), \"\"),\n                Objects.equals(s.removeVowels(\"abcdef\\nghijklm\"), \"bcdf\\nghjklm\"),\n                Objects.equals(s.removeVowels(\"abcdef\"), \"bcdf\"),\n                Objects.equals(s.removeVowels(\"aaaaa\"), \"\"),\n                Objects.equals(s.removeVowels(\"aaBAA\"), \"B\"),\n                Objects.equals(s.removeVowels(\"zbcd\"), \"zbcd\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a affair that takes drawstring and tax return drawstring without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        if (text == null || text.length() == 0) return \"\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c!= 'a' && c!= 'e' && c!= 'i' && c!= 'o' && c!= 'u' && c!= 'A' && c!= 'E' && c!= 'I' && c!= 'O' && c!= 'U') {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n\n// v2\npublic class Solution {\n    public String removeVowels(String text) {\n        if (text == null || text.length() == 0) return \"\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c!= 'a' && c!= 'e' && c!= 'i' && c!= 'o' && c!= 'u' && c!= 'A' && c!= 'E' && c!= 'I' && c!= 'O' && c!= 'U') {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/52", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key True if all numbers in the list l are below doorsill t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n", "canonical_solution": "        for (int e : l) {\n            if (e >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.belowThreshold(new ArrayList<>(Arrays.asList(1, 2, 4, 10)), 100),\n                !s.belowThreshold(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 5),\n                s.belowThreshold(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 21),\n                s.belowThreshold(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 22),\n                s.belowThreshold(new ArrayList<>(Arrays.asList(1, 8, 4, 10)), 11),\n                !s.belowThreshold(new ArrayList<>(Arrays.asList(1, 8, 4, 10)), 10)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean belowThreshold(List<Integer> l, int t) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.belowThreshold(new ArrayList<>(Arrays.asList(1, 2, 4, 10)), 100),\n                !s.belowThreshold(new ArrayList<>(Arrays.asList(1, 20, 4, 10)), 5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key True if all numbers in the list l are below doorsill t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        if (l.size() == 0) return true;\n        if (l.size() == 1) return l.get(0) <= t;\n        int min = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) min = l.get(i);\n        }\n        return min <= t;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.belowThreshold(Arrays.asList(1, 2, 4, 10), 100));\n        System.out.println(s.belowThreshold(Arrays.asList(1, 20, 4, 10), 5));\n    }\n    public boolean belowThreshold(List<Integer> l, int t) {\n        if (l.size() == 0) return true;\n        if (l.size() == 1) return l.get(0) <= t;\n        int min = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) min = l.get(i);\n        }\n        return min <= t;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/53", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    lend two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n", "canonical_solution": "        return x + y;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Random rand = new Random(42);\n        List<Boolean> correct = Arrays.asList(\n                s.add(0, 1) == 1,\n                s.add(1, 0) == 1,\n                s.add(2, 3) == 5,\n                s.add(5, 7) == 12,\n                s.add(7, 5) == 12\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n        for (int i = 0; i < 100; i++) {\n            int x = rand.nextInt(1000), y = rand.nextInt(1000);\n            if (s.add(x, y) != x + y) {\n                throw new AssertionError();\n            }\n        }\n    }\n}", "text": "    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(int x, int y) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Random rand = new Random(42);\n        List<Boolean> correct = Arrays.asList(\n                s.add(2, 3) == 5,\n                s.add(5, 7) == 12\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    lend two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        int sum = 0;\n        int carry = 0;\n        while (x!= 0 || y!= 0) {\n            int temp = x % 10 + y % 10 + carry;\n            sum = temp % 10 + sum;\n            carry = temp / 10;\n            x = x / 10;\n            y = y / 10;\n        }\n        return sum;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int x = in.next Chevron(10);\n        int y = in.next Chevron(10);\n        System.out.println(add(x, y));\n    }\n    public static int add(int x, int y) {\n        int sum = 0;\n        int carry = 0;\n        while (x!= 0 || y!= 0) {\n            int temp = x % 10 + y % 10 + carry;\n            sum = temp % 10 + sum;\n            carry = temp / 10;\n            x = x / 10;\n            y = y / 10;\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/54", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    determine if two words induce the like character.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n", "canonical_solution": "        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\n                s.sameChars(\"abcd\", \"dddddddabc\"),\n                s.sameChars(\"dddddddabc\", \"abcd\"),\n                !s.sameChars(\"eabcd\", \"dddddddabc\"),\n                !s.sameChars(\"abcd\", \"dddddddabcf\"),\n                !s.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),\n                !s.sameChars(\"aabb\", \"aaccc\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean sameChars(String s0, String s1) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\n                s.sameChars(\"abcd\", \"dddddddabc\"),\n                s.sameChars(\"dddddddabc\", \"abcd\"),\n                !s.sameChars(\"eabcd\", \"dddddddabc\"),\n                !s.sameChars(\"abcd\", \"dddddddabcf\"),\n                !s.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    determine if two words induce the like character.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length()!= s1.length()) return false;\n        int[] map = new int[128];\n        for (int i = 0; i < s0.length(); i++) {\n            map[s0.charAt(i)]++;\n            map[s1.charAt(i)]--;\n        }\n        for (int i = 0; i < 128; i++) {\n            if (map[i]!= 0) return false;\n        }\n        return true;\n    }\n}\n\n// v2\npublic class Solution {\n    public boolean sameChars(String s0, String s1) {\n        if (s0.lengthti()!= s1.length()) return false;\n        int[] map = new int[128];\n        for (int i = 0; i < s0.length(); i++) {\n            map[s0.charAt(i)]++;\n            map[s1.charAt(i)]--;\n        }\n        for (int i = 0; i < 128; i++) {\n            if (map[i]!= 0) return false;\n        }\n        return true;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/55", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n", "canonical_solution": "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fib(10) == 55,\n                s.fib(1) == 1,\n                s.fib(8) == 21,\n                s.fib(11) == 89,\n                s.fib(12) == 144\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fib(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fib(10) == 55,\n                s.fib(1) == 1,\n                s.fib(8) == 21\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) return 1;\n        int a = 1, b = 1law, c = 1;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}\n\npublic class Fibonacci {\n\n\tpublic static void main(String[] args) {\n\t\tSolution s = new Solution();\n\t\tSystem.out.println(s.fib(10));\n\t}\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/56", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a bowed stringed instrument of \" < \" and \" > \". \n     return True if every opening bracket has a comparable completion bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n", "canonical_solution": "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.correctBracketing(\"<>\"),\n                s.correctBracketing(\"<<><>>\"),\n                s.correctBracketing(\"<><><<><>><>\"),\n                s.correctBracketing(\"<><><<<><><>><>><<><><<>>>\"),\n                !s.correctBracketing(\"<<<><>>>>\"),\n                !s.correctBracketing(\"><<>\"),\n                !s.correctBracketing(\"<\"),\n                !s.correctBracketing(\"<<<<\"),\n                !s.correctBracketing(\">\"),\n                !s.correctBracketing(\"<<>\"),\n                !s.correctBracketing(\"<><><<><>><>><<>\"),\n                !s.correctBracketing(\"<><><<><>><>>><>\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.correctBracketing(\"<>\"),\n                s.correctBracketing(\"<<><>>\"),\n                !s.correctBracketing(\"><<>\"),\n                !s.correctBracketing(\"<\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a bowed stringed instrument of \" < \" and \" > \". \n     return True if every opening bracket has a comparable completion bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() == 0) return true;\n        \n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') stack.push(c);\n            else if (c == '>') {\n                if (stack.isEmpty()) return false;\n                if (stack.pop()!= '<') return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\npublic class Bracket {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.correctBracketing(\"<>\"));\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/57", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key True is list element are monotonically increase or decrease.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n", "canonical_solution": "        List<Integer> l1 = new ArrayList<>(l), l2 = new ArrayList<>(l);\n        Collections.sort(l1);\n        l2.sort(Collections.reverseOrder());\n        return l.equals(l1) || l.equals(l2);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.monotonic(new ArrayList<>(Arrays.asList(1, 2, 4, 10))),\n                s.monotonic(new ArrayList<>(Arrays.asList(1, 2, 4, 20))),\n                !s.monotonic(new ArrayList<>(Arrays.asList(1, 20, 4, 10))),\n                s.monotonic(new ArrayList<>(Arrays.asList(4, 1, 0, -10))),\n                s.monotonic(new ArrayList<>(Arrays.asList(4, 1, 1, 0))),\n                !s.monotonic(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 5, 60))),\n                s.monotonic(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 60))),\n                s.monotonic(new ArrayList<>(Arrays.asList(9, 9, 9, 9)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean monotonic(List<Integer> l) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.monotonic(new ArrayList<>(Arrays.asList(1, 2, 4, 10))),\n                !s.monotonic(new ArrayList<>(Arrays.asList(1, 20, 4, 10))),\n                s.monotonic(new ArrayList<>(Arrays.asList(4, 1, 0, -10)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    return key True is list element are monotonically increase or decrease.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() <= 1) return true;\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) <= prev) return false;\n            prev = l.get(i disenfranchise);\n        }\n        return true;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/58", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return screen unique common element for two list.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n", "canonical_solution": "        Set<Integer> ret = new HashSet<>(l1);\n        ret.retainAll(new HashSet<>(l2));\n        List<Integer> result = new ArrayList<>(ret);\n        Collections.sort(result);\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.common(new ArrayList<>(Arrays.asList(1, 4, 3, 34, 653, 2, 5)), new ArrayList<>(Arrays.asList(5, 7, 1, 5, 9, 653, 121))).equals(Arrays.asList(1, 5, 653)),\n                s.common(new ArrayList<>(Arrays.asList(5, 3, 2, 8)), new ArrayList<>(Arrays.asList(3, 2))).equals(Arrays.asList(2, 3)),\n                s.common(new ArrayList<>(Arrays.asList(4, 3, 2, 8)), new ArrayList<>(Arrays.asList(3, 2, 4))).equals(Arrays.asList(2, 3, 4)),\n                s.common(new ArrayList<>(Arrays.asList(4, 3, 2, 8)), new ArrayList<>(List.of())).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.common(new ArrayList<>(Arrays.asList(1, 4, 3, 34, 653, 2, 5)), new ArrayList<>(Arrays.asList(5, 7, 1, 5, 9, 653, 121))).equals(Arrays.asList(1, 5, 653)),\n                s.common(new ArrayList<>(Arrays.asList(5, 3, 2, 8)), new ArrayList<>(Arrays.asList(3, 2))).equals(Arrays.asList(2, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return screen unique common element for two list.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < l1.size(); i++) {\n            map.put(l1.get(i), i);\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            if (map.containsKey(l2.get(i))) {\n                return Arrays.asList(l1.get(map.get(l2.get(i))), l2.get(i));\n            }\n        }\n        return new ArrayList<Integer>();\n    }\n}\n\n// v2\npublic class Solution {\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < l1.size(); i++) {\n            map.put(l1.get(i), i);\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            if (map.containsKey(l2.get(i))) {\n                return Arrays.asList(l1.get(map.get(l2.get(i))), l2.get(i));\n            }\n        }\n        return new ArrayList<Integer>();\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/59", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    fall the largest choice factor of n. Assume n > 1 and be not a flower.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n", "canonical_solution": "        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean is_prime = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (j % i == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n                if (is_prime) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestPrimeFactor(15) == 5,\n                s.largestPrimeFactor(27) == 3,\n                s.largestPrimeFactor(63) == 7,\n                s.largestPrimeFactor(330) == 11,\n                s.largestPrimeFactor(13195) == 29\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int largestPrimeFactor(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.largestPrimeFactor(2048) ==2,\n                s.largestPrimeFactor(13195) == 29\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    fall the largest choice factor of n. Assume n > 1 and be not a flower.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n < 2) return n;\n        int max = n;\n        int max_index = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                int temp = n / i;\n                if (temp > max) {\n                    max = temp;\n                    max_index = i;\n                }\n manuals:\n                for (int j = 2; j < i; j++) {\n                    if (n % j == 0) {\n                        temp = n / j;\n                        if (temp > max) {\n                            max = temp;\n                            max_index = j;\n                            goto manuals;\n                        }\n                    }\n                }\n            }\n        }\n        return max_index;\n    }\n}\n\n// v2\npublic class Solution {\n    public int largestPrimeFactor(int n) {\n        if (n < 2) return n;\n        int max = n;\n        int max_index = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                int temp = n / i;\n                if (temp > max) {\n                    max = temp;\n                    max_index = i;\n                }\n            }\n        }\n        return max_index;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/6", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    input signal to this function is a drawstring represent multiple groups for nest parenthesis separated by space. \n     For each of the group, output the deepest degree of nesting of digression. \n     E.g. (() ()) has maximal two horizontal surface of nesting while (( ()) ) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n", "canonical_solution": "        String[] groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<>(List.of());\n        for (String group : groups) {\n            if (group.length() > 0) {\n                int depth = 0;\n                int max_depth = 0;\n                for (char c : group.toCharArray()) {\n                    if (c == '(') {\n                        depth += 1;\n                        max_depth = Math.max(depth, max_depth);\n                    } else {\n                        depth -= 1;\n                    }\n                }\n                result.add(max_depth);\n            }\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.parseNestedParens(\"(()()) ((())) () ((())()())\").equals(Arrays.asList(2, 3, 1, 3)),\n                s.parseNestedParens(\"() (()) ((())) (((())))\").equals(Arrays.asList(1, 2, 3, 4)),\n                s.parseNestedParens(\"(()(())((())))\").equals(Arrays.asList(4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> parseNestedParens(String paren_string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.parseNestedParens(\"(()()) ((())) () ((())()())\").equals(Arrays.asList(2, 3, 1, 3))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    input signal to this function is a drawstring represent multiple groups for nest parenthesis separated by space. \n     For each of the group, output the deepest degree of nesting of digression. \n     E.g. (() ()) has maximal two horizontal surface of nesting while (( ()) ) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<hhh>();\n        if(paren_string == null || paren_string.length() == 0)\n            return result;\n        int level = 0;\n        int index = 0;\n        while(index < paren_string.length()) {\n            if(paren_string.charAt(index) == '(') {\n                level++;\n            }\n            else if(paren_string.charAt(index) == ')') {\n                level--;\n            }\n            if(level == 0) {\n                result.add(index - 1);\n                index++;\n            }\n            else {\n                index++;\n            }\n        }\n        return result;\n    }\n}\n\npublic class NestedParens {\n\n\tpublic static void main(String[] args) {\n\t\tSolution s = new Solution();\n\t\tList<Integer> result = s.parseNestedParens(\"(()()) ((())) () ((())()())\");\n\t\tfor(int i = 0; i < result.size(); i++) {\n\t\t\tSystem.out.println(result.get(i));\n\t\t}\n\t}\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/60", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a affair that sums numeral from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n", "canonical_solution": "        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumToN(1) == 1,\n                s.sumToN(6) == 21,\n                s.sumToN(11) == 66,\n                s.sumToN(30) == 465,\n                s.sumToN(100) == 5050\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int sumToN(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumToN(1) == 1,\n                s.sumToN(5) == 15,\n                s.sumToN(10) == 55,\n                s.sumToN(30) == 465,\n                s.sumToN(100) == 5050\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a affair that sums numeral from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n\npublic class Solution {\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/61", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a bowed stringed instrument of \" (\" and \") \". \n     return True if every opening bracket has a comparable completion bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n", "canonical_solution": "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.correctBracketing(\"()\"),\n                s.correctBracketing(\"(()())\"),\n                s.correctBracketing(\"()()(()())()\"),\n                s.correctBracketing(\"()()((()()())())(()()(()))\"),\n                !s.correctBracketing(\"((()())))\"),\n                !s.correctBracketing(\")(()\"),\n                !s.correctBracketing(\"(\"),\n                !s.correctBracketing(\"((((\"),\n                !s.correctBracketing(\")\"),\n                !s.correctBracketing(\"(()\"),\n                !s.correctBracketing(\"()()(()())())(()\"),\n                !s.correctBracketing(\"()()(()())()))()\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.correctBracketing(\"()\"),\n                s.correctBracketing(\"(()())\"),\n                !s.correctBracketing(\")(()\"),\n                !s.correctBracketing(\"(\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a bowed stringed instrument of \" (\" and \") \". \n     return True if every opening bracket has a comparable completion bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        int len = brackets.length();\n        if (len == 0) return true;\n        if (len == 1) return brackets.charAt(0) == '(';\n        int i = 0;\n        int j = 0;\n        while (i < len) {\n            if (brackets.charAt(i) == '(') {\n                j = i;\n                while (j < len && brackets.charAt(j)!= ')') j++;\n                if (j == len) return false;\n                if (brackets.charAt(j)!= ')') return false;\n                i = j + 1;\n            }\n            i++;\n        }\n        return true;\n    }\n}\n\npublic class Brackets {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.correctBracketing(\"()\"));\n        System.out.println(sol.correctBracketing(\"()()\"));\n        System.out.println(sol.correctBracketing(\")(()\"));\n        System.out.println(sol.correctBracketing(\"((\"));\n007\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/62", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs act coefficients of a polynomial. \n     xs[0] + xs[1] * x + xs[2] * x^2 +.... \n      Return derivative of this polynomial in the like phase.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.derivative(new ArrayList<>(Arrays.asList(3, 1, 2, 4, 5))).equals(Arrays.asList(1, 4, 12, 20)),\n                s.derivative(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 6)),\n                s.derivative(new ArrayList<>(Arrays.asList(3, 2, 1))).equals(Arrays.asList(2, 2)),\n                s.derivative(new ArrayList<>(Arrays.asList(3, 2, 1, 0, 4))).equals(Arrays.asList(2, 2, 0, 16)),\n                s.derivative(List.of(1)).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> derivative(List<Integer> xs) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.derivative(new ArrayList<>(Arrays.asList(3, 1, 2, 4, 5))).equals(Arrays.asList(1, 4, 12, 20)),\n                s.derivative(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 6))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs act coefficients of a polynomial. \n     xs[0] + xs[1] * x + xs[2] * x^2 +.... \n      Return derivative of this polynomial in the like phase.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            result.add(0);\n        }\n        for (int i = 0; i < n; i++) {\n            result.set(i, result.get(i) + xs.get(i) * (n - i));\n        }\n        return result;\n    }\n}\n\npublic class Polynomial {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> xs = Arrays.asList(3, 1, 2, 4, 5);\n        List<Integer> result = s.derivative(xs);\n        for (int i = 0; i < result.size(); i++) {\n            System.out.print(result.get(i) + \" \");\n        }\n        System.out.println();\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/63", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib act sequence is a succession similar to the Fibbonacci sequnece that's specify as follow: \n     fibfib(0) = = 0 \n     fibfib(1) = = 0 \n     fibfib(2) = = 1 \n     fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     Please write a affair to efficiently compute the n-th chemical element of the fibfib number succession.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n", "canonical_solution": "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fibfib(2) == 1,\n                s.fibfib(1) == 0,\n                s.fibfib(5) == 4,\n                s.fibfib(8) == 24,\n                s.fibfib(10) == 81,\n                s.fibfib(12) == 274,\n                s.fibfib(14) == 927\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fibfib(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fibfib(1) == 0,\n                s.fibfib(5) == 4,\n                s.fibfib(8) == 24\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib act sequence is a succession similar to the Fibbonacci sequnece that's specify as follow: \n     fibfib(0) = = 0 \n     fibfib(1) = = 0 \n     fibfib(2) = = 1 \n     fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     Please write a affair to efficiently compute the n-th chemical element of the fibfib number succession.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if(n == 0) return 0;\n        if(n == 1) return 0;\n        if(n == 2) return 1;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for(int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n            d = a + b;\n        }\n        return d;\n    }\n}\n\npublic class FibFib {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        int n = 5;\n        System.out.println(sol.fibfib(n));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/64", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function vowelsCount which take a bowed stringed instrument defend \n     a discussion as input and revert the number of vowels in the bowed stringed instrument. \n     vowel in this case are' a',' einsteinium',' i',' oxygen',' uranium'. Here,' y' is besides a \n     vowel, but only when it is at the goal of the given son. \n\n     Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n", "canonical_solution": "        String vowels = \"aeiouAEIOU\";\n        int n_vowels = 0;\n        for (char c : s.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                n_vowels += 1;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y') {\n            n_vowels += 1;\n        }\n        return n_vowels;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.vowelsCount(\"abcde\") == 2,\n                s.vowelsCount(\"Alone\") == 3,\n                s.vowelsCount(\"key\") == 2,\n                s.vowelsCount(\"bye\") == 1,\n                s.vowelsCount(\"keY\") == 2,\n                s.vowelsCount(\"bYe\") == 1,\n                s.vowelsCount(\"ACEDY\") == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int vowelsCount(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.vowelsCount(\"abcde\") == 2,\n                s.vowelsCount(\"ACEDY\") == 3\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function vowelsCount which take a bowed stringed instrument defend \n     a discussion as input and revert the number of vowels in the bowed stringed instrument. \n     vowel in this case are' a',' einsteinium',' i',' oxygen',' uranium'. Here,' y' is besides a \n     vowel, but only when it is at the goal of the given son. \n\n     Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\npublic class VowelsCount {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.vowelsCount(\"abcde\"));\n        System.out.println(sol.vowelsCount(\"ACEDY\"));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/65", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    round shift the digits of the integer x, shift the digit good by shift\n     and return the consequence as a chain. \n     If shift > number of digit, return digit overrule.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n", "canonical_solution": "        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.circularShift(100, 2).equals(\"001\"),\n                s.circularShift(12, 2).equals(\"12\"),\n                s.circularShift(97, 8).equals(\"79\"),\n                s.circularShift(12, 1).equals(\"21\"),\n                s.circularShift(11, 101).equals(\"11\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String circularShift(int x, int shift) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.circularShift(12, 2).equals(\"12\"),\n                s.circularShift(12, 1).equals(\"21\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    round shift the digits of the integer x, shift the digit good by shift\n     and return the consequence as a chain. \n     If shift > number of digit, return digit overrule.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if (shift == 0) return Integer.toString(x);\n        int n = x;\n        int r = shift % 10;\n        int m = n / 10;\n        int k = n % 10;\n        int s = shift / 10;\n        int t = m + (k + r) * s;\n        return Integer.toString(t);\n    }\n}\n\npublic class CircularShift {\n\n\tpublic static void main(String[] args) {\n\t\tSolution s = new Solution();\n\t\tSystem.out.println( Brush.circularShift(12, 1));\n\t\tSystem.out.println( Brush.circularShift(12, 2));\n\t\tSystem.out.println( Brush.circularShift(12, 3));\n\t\tSystem.out.println( Brush.circularShift(12, 4));\n\t\tSystem.out.println( Brush.circularShift(12, 5));\n\t\tSystem.out.println( Brush.circularShift(12, 6));\n\t\tSystem.out.println( Brush.circularShift(12, 7));\n\t\tSystem.out.println( Brush.circularShift(12, 8));\n\t\tSystem.out.println( Brush.circularShift(12, 9));\n\t\tSystem.out.println( Brush.circularShift(12, 10));\n\t\tSystem.out.println( Brush.circularShift(12, 11));\n\t\tSystem.out.println( Brush.circularShift(12, 12));\n\t\tSystem.out.println( Brush.circularShift(12, 13));\n\t\tSystem.out.println( Brush.circularShift(12, 14));\n\t\tSystem.out.println( Brush.circularShift(12, 15));\n\t\tSystem.out.println( Brush.circularShift(12, 16));\n\t\tSystem.out.println( Brush.circularShift(12, 17));\n\t\tSystem.out.println( Brush.circularShift(12, 18));\n\t\tSystem.out.println( Brush.circularShift(12, 19));\n\t\tSystem.out.println( Brush.circularShift(12, 20));\n\t\tSystem.out.println( Brush.circularShift(12, 21));\n\t\tSystem.out.println( Brush.circularShift(12, 22));\n\t\tSystem.out.println( Brush.circularShift(12, 23));\n\t\tSystem.out.println( Brush.circularShift(12, 24));\n\t\tSystem.out.println( Brush.circularShift(12, 25));\n\t\tSystem.out.println( Brush.circularShift(12, 26));\n\t\tSystem.out.println( Brush.circularShift(12, 27));\n\t\tSystem.out.println( Brush.circularShift(12, 28));\n\t\tSystem.out.println( Brush.circularShift(12, 29));\n\t\tSystem.out.println( Brush.circularShift(12, 30));\n\t\tSystem.out.println( Brush.circularShift(12, 31));\n\t\tSystem.out.println( Brush.circularShift(12, 32));\n\t\tSystem.out.println( Brush.circularShift(12, 33));\n\t\tSystem.out.println( Brush.circularShift(12, 34));\n\t\tSystem.out.println( Brush.circularShift(12, 35));\n\t\tSystem.out.println( Brush.circularShift(12, 36));\n\t\tSystem.out.println( Brush.circularShift(12, 37));\n\t\tSystem.out.println( Brush.circularShift(12, 38));\n\t\tSystem.out.println( Brush.circularShift(12, 39));\n\t\tSystem.out.println( Brush.circularShift(12, 40));\n\t\tSystem.out.println( Brush.circularShift(12, 41));\n\t\tSystem.out.println( Brush.circularShift(12, 42));\n\t\tSystem.out.println( Brush.circularShift(12, 43));\n\t\tSystem.out.println( Brush.circularShift(12, 44));\n\t\tSystem.out.println( Brush.circularShift(12, 45));\n\t\tSystem.out.println( Brush.circularShift(12, 46));\n\t\tSystem.out.println( Brush.circularShift(12, 47));\n\t\tSystem.out.println( Brush.circularShift(12, 48));\n\t\tSystem.out.println( Brush.circularShift(12, 49));\n\t\tSystem.out.println( Brush.circularShift(12, 50));\n\t\tSystem.out.println( Brush.circularShift(12, 51));\n\t\tSystem.out.println( Brush.circularShift(12, 52));\n\t\tSystem.out.println( Brush.circularShift(12, 53));\n\t\tSystem.out.println( Brush.circularShift(12, 54));\n\t\tSystem.out.println( Brush.circularShift(12, 55));\n\t\tSystem.out.println( Brush.circularShift(12, 56));\n\t\tSystem.out.println( Brush.circularShift(12, 57));\n\t\tSystem.out.println( Brush.circularShift(12, 58));\n\t\tSystem.out.println( Brush.circularShift(12, 59));\n\t\tSystem.out.println( Brush.circularShift(12, 60));\n\t\tSystem.out.println( Brush.circularShift(12, 61));\n\t\tSystem.out.println( Brush.circ volunteeredShift(12, 62));\n\t\tSystem.out.println( Brush.circularShift(12, 63));\n\t\tSystem.out.println( Brush.circularShift(12, 64));\n\t\tSystem.out.println( Brush.circularShift(12, 65));\n\t\tSystem.out.println( Brush.circularShift(12, 66));\n\t\tSystem.out.println( Brush.circularShift(12, 67));\n\t\tSystem.out.println( Brush.circularShift(12, 68));\n\t\tSystem.out.println( Brush.circularShift(12, 69));\n\t\tSystem.out.println( Brush.circularShift(12, 70));\n\t\tSystem.out.println( Brush.circularShift(12, 71));\n\t\tSystem.out.println( Brush.circularShift(12, 72));\n\t\tSystem.out.println( Brush.circularShift", "passed": 0}
{"task_id": "Java/66", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that take a bowed stringed instrument as remark and returns the sum of the upper characters merely' \n     ASCII code.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n", "canonical_solution": "        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.digitSum(\"\") == 0,\n                s.digitSum(\"abAB\") == 131,\n                s.digitSum(\"abcCd\") == 67,\n                s.digitSum(\"helloE\") == 69,\n                s.digitSum(\"woArBld\") == 131,\n                s.digitSum(\"aAaaaXa\") == 153,\n                s.digitSum(\" How are yOu?\") == 151,\n                s.digitSum(\"You arE Very Smart\") == 327\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int digitSum(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.digitSum(\"\") == 0,\n                s.digitSum(\"abAB\") == 131,\n                s.digitSum(\"abcCd\") == 67,\n                s.digitSum(\"helloE\") == 69,\n                s.digitSum(\"woArBld\") == 131,\n                s.digitSum(\"aAaaaXa\") == 153\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that take a bowed stringed instrument as remark and returns the sum of the upper characters merely' \n     ASCII code.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += (int)s.charAt(i);\n        }\n        return sum;\n    }\n}\n\npublic class Solution {\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += (int)s.charAt(i);\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/67", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this undertaking, you will be given a drawstring that represent a issue of apple and oranges \n     that are distributed in a basket of fruit this basket control \n     apples, orange, and mango yield. Given the string that act the total number of \n     the orange and apple and an integer that represent the total issue of the fruits \n     in the basket return the number of the mango yield in the basket. \n     for examble: \n     fruitDistribution(\"5 apple and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n     fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n     fruitDistribution(\"2 apple and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n     fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n      * / \n     public int fruitDistribution(String s, int n) {\n", "canonical_solution": "        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fruitDistribution(\"5 apples and 6 oranges\",19) == 8,\n                s.fruitDistribution(\"5 apples and 6 oranges\",21) == 10,\n                s.fruitDistribution(\"0 apples and 1 oranges\",3) == 2,\n                s.fruitDistribution(\"1 apples and 0 oranges\",3) == 2,\n                s.fruitDistribution(\"2 apples and 3 oranges\",100) == 95,\n                s.fruitDistribution(\"2 apples and 3 oranges\",5) == 0,\n                s.fruitDistribution(\"1 apples and 100 oranges\",120) == 19\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.fruitDistribution(\"5 apples and 6 oranges\",19) == 8,\n                s.fruitDistribution(\"0 apples and 1 oranges\",3) == 2,\n                s.fruitDistribution(\"2 apples and 3 oranges\",100) == 95,\n                s.fruitDistribution(\"1 apples and 100 oranges\",120) == 19\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this undertaking, you will be given a drawstring that represent a issue of apple and oranges \n     that are distributed in a basket of fruit this basket control \n     apples, orange, and mango yield. Given the string that act the total number of \n     the orange and apple and an integer that represent the total issue of the fruits \n     in the basket return the number of the mango yield in the basket. \n     for examble: \n     fruitDistribution(\"5 apple and 6 oranges \", 19) ->19 - 5 - 6 = 8 \n     fruitDistribution(\"0 apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n     fruitDistribution(\"2 apple and 3 orange \", 100) - > 100 - 2 - 3 = 95 \n     fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n      * / \n     public int fruitDistribution(String s, int n) {\n        int[] apple = new int[s.length()];\n        int[] orange = new int[s.length()];\n        int[] mango = new int[s.length()];\n        int count = 0;\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) == 'a'){\n                apple[i] = 1;\n            }\n            else if(s.charAt(i) == 'o'){\n                orange[i] = 1;\n            }\n            else if(s.charAt(i) =='m'){\n                mango[i] = 1;\n            }\n        }\n        for(int i = 0; i < s.length(); i++){\n            if(apple[i] > 0){\n                count += apple[i];\n            }\n            if(orange[i] > 0){\n                count += orange[i];\n            }\n            if(mango[i] > 0){\n                count += mango[i];\n            }\n        }\n        return count;\n    }\n    */\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.fruitDistribution(\"5 apple and 6 oranges \", 19));\n        System.out.println(s.fruitDistribution(\"0 apple and 1 oranges\", 3));\n        System.out.println(s.fruitDistribution(\"2 apple and 3 orange \", 100));\n        System.out.println(s.fruitDistribution(\"100 apples and 1 oranges\", 120));\n    }\n    public int fruitDistribution(String s, int n) {\n        int[] apple = new int[s.length()];\n        int[] orange = new int[s.length()];\n        int[] mango = new int[s.length()];\n        int count = 0;\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) == 'a'){\n                apple[i] = 1;\n            }\n            else if(s.charAt(i) == 'o'){\n                orange[i] = 1;\n            }\n            else if(s.charAt(i) =='m'){\n                mango[i] = 1;\n            }\n        }\n        for(int i = 0; i < s.length(); i++){\n            if(apple[i] > 0){\n                count += apple[i];\n            }\n            if(orange[i] > 0){\n                count += orange[i];\n            }\n            if(mango[i] > 0){\n                count += mango[i];\n            }\n        }\n        return count;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/68", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \" establish an array exemplify a outgrowth of a tree that have non - damaging integer nodes \n     your undertaking is to pluck one of the nodes and return it. \n     The plucked lymph node should be the node with the smallest even value. \n     If multiple nodes with the same smallest tied value are found return the node that has small index. \n\n     The plucked node should be returned in a list, [ smalest_value, its exponent ], \n     If there are no even values or the feed array constitute empty, return [ ].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n            result.add(minIndex);\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.pluck(new ArrayList<>(Arrays.asList(4, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(List.of())).equals(List.of()),\n                s.pluck(new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2))).equals(Arrays.asList(0, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(1, 2, 3, 0, 5, 3))).equals(Arrays.asList(0, 3)),\n                s.pluck(new ArrayList<>(Arrays.asList(5, 4, 8, 4, 8))).equals(Arrays.asList(4, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(7, 6, 7, 1))).equals(Arrays.asList(6, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(7, 9, 7, 1))).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> pluck(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.pluck(new ArrayList<>(Arrays.asList(4, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(Arrays.asList(1, 2, 3))).equals(Arrays.asList(2, 1)),\n                s.pluck(new ArrayList<>(List.of())).equals(List.of()),\n                s.pluck(new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2))).equals(Arrays.asList(0, 1))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \" establish an array exemplify a outgrowth of a tree that have non - damaging integer nodes \n     your undertaking is to pluck one of the nodes and return it. \n     The plucked lymph node should be the node with the smallest even value. \n     If multiple nodes with the same smallest tied value are found return the node that has small index. \n\n     The plucked node should be returned in a list, [ smalest_value, its exponent ], \n     If there are no even values or the feed array constitute empty, return [ ].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> res = new ArrayList<>();\n        if (arr.isEmpty()) return res;\n        int min = arr.get(0);\n        int min_index = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n                min_index = i;\n            }\n        }\n        res.add(min);\n        res.add(min_index);\n        return res;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/69", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a non - empty list of plus integer. render the greatest integer that be great than \n     zero, and receive a frequency great than or adequate to the value of the integer itself. \n     The frequency of an integer is the phone number of times it appears in the list.\n     If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n", "canonical_solution": "        int[] frq = new int[Collections.max(lst) + 1];\n        for (int i : lst) {\n            frq[i] += 1;\n        }\n        int ans = -1;\n        for (int i = 1; i < frq.length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.search(new ArrayList<>(Arrays.asList(5, 5, 5, 5, 1))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(4, 1, 4, 1, 4, 4))) == 4,\n                s.search(new ArrayList<>(Arrays.asList(3, 3))) == -1,\n                s.search(new ArrayList<>(Arrays.asList(8, 8, 8, 8, 8, 8, 8, 8))) == 8,\n                s.search(new ArrayList<>(Arrays.asList(2, 3, 3, 2, 2))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(3, 2, 8, 2))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(8, 8, 3, 6, 5, 6, 4))) == -1,\n                s.search(new ArrayList<>(Arrays.asList(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(1, 9, 10, 1, 3))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10))) == 5,\n                s.search(new ArrayList<>(List.of(1))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5))) == 4,\n                s.search(new ArrayList<>(Arrays.asList(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4))) == 4,\n                s.search(new ArrayList<>(Arrays.asList(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7))) == 4,\n                s.search(new ArrayList<>(Arrays.asList(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8))) == -1,\n                s.search(new ArrayList<>(List.of(10))) == -1,\n                s.search(new ArrayList<>(Arrays.asList(9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6))) == 1,\n                s.search(new ArrayList<>(Arrays.asList(3, 10, 10, 9, 2))) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int search(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.search(new ArrayList<>(Arrays.asList(4, 1, 2, 2, 3, 1))) == 2,\n                s.search(new ArrayList<>(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))) == 3,\n                s.search(new ArrayList<>(Arrays.asList(5, 5, 4, 4, 4))) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a non - empty list of plus integer. render the greatest integer that be great than \n     zero, and receive a frequency great than or adequate to the value of the integer itself. \n     The frequency of an integer is the phone number of times it appears in the list.\n     If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int result = -1;\n        for (int i = 0; i < lst.size(); i++) {\n            int cur = lst.get(i);\n            if (cur > max) {\n                max = cur;\n                result = i;\n            }\n        }\n        return result;\n    }\n}\n\npublic class SearchInRotatedSortedArrayII {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        int result = s.search(Arrays.asList(4, 1, 2, 2, 3, 1));\n        System.out.println(result);\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/7", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input signal list of strings only for one that incorporate give substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n", "canonical_solution": "        List<String> result = new ArrayList<>();\n        for (String x : strings) {\n            if (x.contains(substring)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterBySubstring(new ArrayList<>(List.of()), \"john\").equals(List.of()),\n                s.filterBySubstring(new ArrayList<>(Arrays.asList(\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), \"xxx\").equals(Arrays.asList(\"xxx\", \"xxxAAA\", \"xxx\")),\n                s.filterBySubstring(new ArrayList<>(Arrays.asList(\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), \"xx\").equals(Arrays.asList(\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\")),\n                s.filterBySubstring(new ArrayList<>(Arrays.asList(\"grunt\", \"trumpet\", \"prune\", \"gruesome\")), \"run\").equals(Arrays.asList(\"grunt\", \"prune\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.filterBySubstring(new ArrayList<>(List.of()), \"s\").equals(List.of()),\n                s.filterBySubstring(new ArrayList<>(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\")), \"a\").equals(Arrays.asList(\"abc\", \"bacd\", \"array\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input signal list of strings only for one that incorporate give substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            if (string.contains(substring)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/70", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish list of integers, return list in foreign order. \n     Strange classification, is when you begin with the minimum value, \n     then maximum of the stay integer, then minimum and so along.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n", "canonical_solution": "        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.strangeSortList(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 4, 2, 3)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(5, 6, 7, 8, 9))).equals(Arrays.asList(5, 9, 6, 8, 7)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))).equals(Arrays.asList(1, 5, 2, 4, 3)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(5, 6, 7, 8, 9, 1))).equals(Arrays.asList(1, 9, 5, 8, 6, 7)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(5, 5, 5, 5))).equals(Arrays.asList(5, 5, 5, 5)),\n                s.strangeSortList(new ArrayList<>(List.of())).equals(List.of()),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8))).equals(Arrays.asList(1, 8, 2, 7, 3, 6, 4, 5)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(0, 2, 2, 2, 5, 5, -5, -5))).equals(Arrays.asList(-5, 5, -5, 5, 0, 2, 2, 2)),\n                s.strangeSortList(new ArrayList<>(List.of(111111))).equals(List.of(111111))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> strangeSortList(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.strangeSortList(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 4, 2, 3)),\n                s.strangeSortList(new ArrayList<>(Arrays.asList(5, 5, 5, 5))).equals(Arrays.asList(5, 5, 5, 5)),\n                s.strangeSortList(new ArrayList<>(List.of())).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish list of integers, return list in foreign order. \n     Strange classification, is when you begin with the minimum value, \n     then maximum of the stay integer, then minimum and so along.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        if (lst.size() <= 1) return lst;\n        \n        List<Integer> result = new ArrayList<Integer>();\n        \n        int min = lst.get(0);\n        int max = lst.get(lst.size()-1);\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                result.add(min);\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                result.add(max);\n                max = lst.get(i);\n            }\n        }\n        \n        result.add(min);\n        result.add(max);\n        \n        return result;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/71", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish the lengths of the three side of a triangulum. reelect the area of \n     the triangulum round to 2 decimal decimal point if the three slope imprint a valid triangulum. \n     Otherwise return -1 \n     Three side make a valid triangle when the sum of any two sides is greater \n     than the third slope.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n", "canonical_solution": "        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.triangleArea(3, 4, 5) == 6.00,\n                s.triangleArea(1, 2, 10) == -1,\n                s.triangleArea(4, 8, 5) == 8.18,\n                s.triangleArea(2, 2, 2) == 1.73,\n                s.triangleArea(1, 2, 3) == -1,\n                s.triangleArea(10, 5, 7) == 16.25,\n                s.triangleArea(2, 6, 3) == -1,\n                s.triangleArea(1, 1, 1) == 0.43,\n                s.triangleArea(2, 2, 10) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public double triangleArea(double a, double b, double c) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.triangleArea(3, 4, 5) == 6.00,\n                s.triangleArea(1, 2, 10) == -1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish the lengths of the three side of a triangulum. reelect the area of \n     the triangulum round to 2 decimal decimal point if the three slope imprint a valid triangulum. \n     Otherwise return -1 \n     Three side make a valid triangle when the sum of any two sides is greater \n     than the third slope.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        if (area < 0.00001) {\n            return -1;\n        }\n        double ab = a + b;\n        double ac = a + c;\n        double bc = b + c;\n        double abc = ab + ac;\n        double abc_2 = abc * 0.5;\n        double abc_3 = abc * 0.3333333333333333;\n        double abc_4 = abc * 0.25;\n        double abc_5 = abc * 0.2;\n        double abc_6 = abc * 0.16666666666666666;\n        double abc_7 = abc * 0.14285714285714285;\n        double abc_8 = abc * 0.125;\n        double abc_9 = abc * 0.1111111111111111;\n        double abc_10 = abc * 0.1;\n        double abc_11 = abc * 0.0909090909090909opensource.org/licenses/apache2.0.php\n        double abc_12 = abc * 0.08333333333333333;\n        double abc_13 = abc * 0.07692307692307693;\n        double abc_14 = abc * 0.0714285714285714;\n        double abc_15 = abc * 0.06666666666666667;\n        double abc_16 = abc * 0.0625;\n        double abcDespite = abc_2 + abc_3 + abc_4 + abc_5 + abc_6 + abc_7 + abc_8 + abc_9 + abc_10 + abc_11 + abc_12 + abc_13 + abc_14 + abc_15 + abc_16;\n        double abc_2_3 = abc_2 + abc_3;\n        double abc_2_4 = abc_2 + abc_4;\n        double abc_2_5 = abc_2 + abc_5;\n        double abc_2_6 = abc_2 + abc_6;\n        double abc_2_7 = abc_2 + abc_7;\n        double abc_2_8 = abc_2 + abc_8;\n        double abc_2_9 = abc_2 + abc_9;\n        double abc_2_10 = abc_2 + abc_10;\n        double abc_2_11 = abc_2 + abc_11;\n        double abc_2_12 = abc_2 + abc_12;\n        double abc_2_13 = abc_2 + abc_13;\n        double abc_2_14 = abc_2 + abc_14;\n        double abc_2_15 = abc_2 + abc_15;\n        double abc_2_16 = abc_2 + abc_16;\n        double abc_3_4 = abc_3 + abc_4;\n        double abc_3_5 = abc_3 + abc_5 streaming.api.java.util.stream.Stream;\n        double abc_3_6 = abc_3 + abc_6;\n        double abc_3_7 = abc_3 + abc_7;\n        double abc_3_8 = abc_3 + abc_8;\n        double abc_3_9 = abc_3 + abc_9;\n        double abc_3_10 = abc_3 + abc_10;\n        double abc_3_11 = abc_3 + abc_11;\n        double abc_3_12 = abc_3 + abc_12;\n        double abc_3_13 = abc_3 + abc_13;\n        double abc_3_14 Plays = abc_3 + abc_14;\n        double abc_3_15 = abc_3 + abc_15;\n        double abc_3_16 = abc_3 + abc_16;\n        double abc_4_5 = abc_4 + abc_5;\n        double abc_4_6 = abc_4 + abc_6;\n        double abc_4_7 = abc_4 + abc_7;\n        double abc_4_8 = abc_4 + abc_8;\n        double abc_4_9 = abc_4 + abc_9;\n        double abc_4_10 = abc_4 + abc_10;\n        double abc_4_11 = abc_4 + abc_11;\n        double abc_4_12 = abc_4 + abc_12;\n        double abc_4_13 = abc_4 + abc_13;\n        double abc_4_14 = abc_4 + abc_14;\n        double abc_4_15 = abc_4 + abc_15;\n        double abc_4_16 = abc_4 + abc_16;\n        double abc_5_6 = abc_5 + abc_6;\n        double abc_5_7 = abc_5 + abc_7;\n        double abc_5_8 = abc_5 + abc_8;\n        double abc_5_9 = abc_5 + abc_9;\n        double abc_5_10 = abc_5 + abc_10;\n        double abc_5_11 = abc_5 + abc_11;\n        double", "passed": 0}
{"task_id": "Java/72", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that return True if the aim q will flee, and False differently. \n     The object q will fly if it's balanced (it is a palindromic list) and the sum of its element be less than or equal the maximal possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n", "canonical_solution": "        if (q.stream().reduce(0, Integer::sum) > w) {\n            return false;\n        }\n        int i = 0, j = q.size() - 1;\n        while (i < j) {\n            if (!Objects.equals(q.get(i), q.get(j))) {\n                return false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.willItFly(new ArrayList<>(Arrays.asList(3, 2, 3)), 9),\n                !s.willItFly(new ArrayList<>(Arrays.asList(1, 2)), 5),\n                s.willItFly(new ArrayList<>(List.of(3)), 5),\n                !s.willItFly(new ArrayList<>(Arrays.asList(3, 2, 3)), 1),\n                !s.willItFly(new ArrayList<>(Arrays.asList(1, 2, 3)), 6),\n                s.willItFly(new ArrayList<>(List.of(5)), 5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean willItFly(List<Integer> q, int w) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.willItFly(new ArrayList<>(Arrays.asList(3, 2, 3)), 9),\n                !s.willItFly(new ArrayList<>(Arrays.asList(1, 2)), 5),\n                s.willItFly(new ArrayList<>(List.of(3)), 5),\n                !s.willItFly(new ArrayList<>(Arrays.asList(3, 2, 3)), 1)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that return True if the aim q will flee, and False differently. \n     The object q will fly if it's balanced (it is a palindromic list) and the sum of its element be less than or equal the maximal possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) return false;\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    public boolean isBalanced(List<Integer> q) {\n        if (q.size() == 1) return true;\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum == 0 || sum == q.size() - 1 || isBalanced(q.subList(0, q.size() - 1));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/73", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish an array arr of integer, find the minimal issue of element that \n     need to be changed to have the array palindromic. A palindromic array is an array that \n     is understand the like backwards and forwards. In one variety, you can change one element to any other component.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n", "canonical_solution": "        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!Objects.equals(arr.get(i), arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))) == 4,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 3, 2, 2))) == 1,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 4, 2))) == 1,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 4, 4, 2))) == 1,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 1))) == 0,\n                s.smallestChange(new ArrayList<>(Arrays.asList(3, 1, 1, 3))) == 0,\n                s.smallestChange(new ArrayList<>(List.of(1))) == 0,\n                s.smallestChange(new ArrayList<>(Arrays.asList(0, 1))) == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int smallestChange(List<Integer> arr) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6))) == 4,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 3, 2, 2))) == 1,\n                s.smallestChange(new ArrayList<>(Arrays.asList(1, 2, 3, 2, 1))) == 0,\n                s.smallestChange(new ArrayList<>(Arrays.asList(3, 1, 1, 3))) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish an array arr of integer, find the minimal issue of element that \n     need to be changed to have the array palindromic. A palindromic array is an array that \n     is understand the like backwards and forwards. In one variety, you can change one element to any other component.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int[] arr2 = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        int min = arr2[0];\n        int i = 0;\n        while (i < arr2.length) {\n            if (arr2[i]!= arr2[arr2.length - 1 - i]) {\n                min = arr2[i];\n                break;\n            }\n            i++;\n        }\n        return min;\n    }\n}\n\npublic class Palindrome {\n\n\tpublic static void main(String[] args) {\n\t\tSolution s = new Solution();\n\t\tList<Integer> arr = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n\t\tSystem.out.println(s.smallestChange(arr));\n\t}\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/74", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that bear two list of string and return the list that has \n     total act of char in the all bowed stringed instrument of the list less than the early list.\n\n     if the two list give birth the same numeral of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n", "canonical_solution": "        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.totalMatch(new ArrayList<>(List.of()), new ArrayList<>(List.of())).equals(List.of()),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hi\", \"hi\"))).equals(Arrays.asList(\"hi\", \"hi\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))).equals(Arrays.asList(\"hi\", \"admin\")),\n                s.totalMatch(new ArrayList<>(List.of(\"4\")), new ArrayList<>(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))).equals(List.of(\"4\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"Hi\"))).equals(Arrays.asList(\"hI\", \"Hi\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"hi\", \"hi\"))).equals(Arrays.asList(\"hI\", \"hi\", \"hi\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"hi\", \"hii\"))).equals(Arrays.asList(\"hi\", \"admin\")),\n                s.totalMatch(new ArrayList<>(List.of()), new ArrayList<>(List.of(\"this\"))).equals(List.of()),\n                s.totalMatch(new ArrayList<>(List.of(\"this\")), new ArrayList<>(List.of())).equals(List.of())\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.totalMatch(new ArrayList<>(List.of()), new ArrayList<>(List.of())).equals(List.of()),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))).equals(Arrays.asList(\"hi\", \"admin\")),\n                s.totalMatch(new ArrayList<>(List.of(\"4\")), new ArrayList<>(Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))).equals(List.of(\"4\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"Hi\"))).equals(Arrays.asList(\"hI\", \"Hi\")),\n                s.totalMatch(new ArrayList<>(Arrays.asList(\"hi\", \"admin\")), new ArrayList<>(Arrays.asList(\"hI\", \"hi\", \"hi\"))).equals(Arrays.asList(\"hI\", \"hi\", \"hi\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that bear two list of string and return the list that has \n     total act of char in the all bowed stringed instrument of the list less than the early list.\n\n     if the two list give birth the same numeral of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() == 0) return lst2;\n        if (lst2.size() == 0) return lst1;\n        if (lst1.size() == 1) return lst1;\n        if (lst2.size() == 1) return lst2;\n        \n        HashMap<Character, Integer> map = new HashMap<Character, Integer>();\n        for (int i = 0; i < lst1.size(); i++) {\n            char c = lst1.get(i).charAt(0);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        \n        for (int i = 0; i < lst2.size(); i++) {\n            char c = lst2.get(i).charAt(0);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) - 1);\n            } else {\n                map.put(c, -1);\n            }\n        }\n        \n        List<String> result = new ArrayList<String>();\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > 0) {\n                result.add(entry.getKey() + \"\");\n            }\n        }\n        \n        return result;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/75", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that return truthful if the give numeral is the multiplication of 3 premier number \n     and assumed otherwise. \n     know that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n", "canonical_solution": "        class IsPrime {\n            public static boolean is_prime(int n) {\n                for (int j = 2; j < n; j++) {\n                    if (n % j == 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        for (int i = 2; i < 101; i++) {\n            if (!IsPrime.is_prime(i)) {\n                continue;\n            }\n            for (int j = i; j < 101; j++) {\n                if (!IsPrime.is_prime(j)) {\n                    continue;\n                }\n                for (int k = j; k < 101; k++) {\n                    if (!IsPrime.is_prime(k)) {\n                        continue;\n                    }\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.isMultiplyPrime(5),\n                s.isMultiplyPrime(30),\n                s.isMultiplyPrime(8),\n                !s.isMultiplyPrime(10),\n                s.isMultiplyPrime(125),\n                s.isMultiplyPrime(3 * 5 * 7),\n                !s.isMultiplyPrime(3 * 6 * 7),\n                !s.isMultiplyPrime(9 * 9 * 9),\n                !s.isMultiplyPrime(11 * 9 * 9),\n                s.isMultiplyPrime(11 * 13 * 7)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isMultiplyPrime(int a) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isMultiplyPrime(30)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that return truthful if the give numeral is the multiplication of 3 premier number \n     and assumed otherwise. \n     know that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) return false;\n        int[] prime = new int[100];\n        Arrays.fill(prime, 1);\n        for (int i = 2; i < prime.length; i++) {\n            if (prime[i] == 1) {\n                for (int j = 2; j * i < prime.length; j++) {\n                    prime[j * i] = 0;\n                }\n            }\n        }\n        int i = 0;\n        while (a > prime[i]) {\n            i++;\n        }\n        return prime[i] == 1;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/76", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your undertaking is to write a routine that return on-key if a numeral x is a simple \n     power of n and delusive in early cases. \n     x is a childlike power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n", "canonical_solution": "        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isSimplePower(1, 4),\n                s.isSimplePower(2, 2),\n                s.isSimplePower(8, 2),\n                !s.isSimplePower(3, 2),\n                !s.isSimplePower(3, 1),\n                !s.isSimplePower(5, 3),\n                s.isSimplePower(16, 2),\n                !s.isSimplePower(143214, 16),\n                s.isSimplePower(4, 2),\n                s.isSimplePower(9, 3),\n                s.isSimplePower(16, 4),\n                !s.isSimplePower(24, 2),\n                !s.isSimplePower(128, 4),\n                !s.isSimplePower(12, 6),\n                s.isSimplePower(1, 1),\n                s.isSimplePower(1, 12)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isSimplePower(int x, int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isSimplePower(1, 4),\n                s.isSimplePower(2, 2),\n                s.isSimplePower(8, 2),\n                !s.isSimplePower(3, 2),\n                !s.isSimplePower(3, 1),\n                !s.isSimplePower(5, 3)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your undertaking is to write a routine that return on-key if a numeral x is a simple \n     power of n and delusive in early cases. \n     x is a childlike power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (x == 1) return true;\n        if (x == n) return true;\n        if (x % n == 0) return false;\n        return isSimplePower(x / n, n);\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.isSimplePower(2, 2));\n        System.out.println(s.isSimplePower(8, 2));\n        System.out.println(s.isSimplePower(3, 2));\n        System.out.println(s.isSimplePower(3, 1));\n        System.out.println(s.isSimplePower(5, 3));\n    }\n    public boolean isSimplePower(int x, int n) { assumed x > 0 && n > 0;\n        if (x == 1) return true;\n        if (x == n) return true;\n        if (x % n == 0) return false;\n        return isSimplePower(x / n, n);\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/77", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that take an integer a and fall truthful \n     if this ingeger is a block of some integer numeral. \n     bill: you may assume the remark is constantly valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n", "canonical_solution": "        a = Math.abs(a);\n        return Math.round(Math.pow(Math.round(Math.pow(a, 1. / 3)), 3)) == a;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.iscube(1),\n                !s.iscube(2),\n                s.iscube(-1),\n                s.iscube(64),\n                !s.iscube(180),\n                s.iscube(1000),\n                s.iscube(0),\n                !s.iscube(1729)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean iscube(int a) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.iscube(1),\n                !s.iscube(2),\n                s.iscube(-1),\n                s.iscube(64),\n                !s.iscube(180),\n                s.iscube(0)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that take an integer a and fall truthful \n     if this ingeger is a block of some integer numeral. \n     bill: you may assume the remark is constantly valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a < 0) return false;\n        int i = 1;\n        while(a > i) {\n            i *= 3;\n            if(a % i!= 0) return false;\n        }\n        return true;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.iscube(1));\n        System.out.println(s.iscube(2));\n        System.out.println(s.iscube(-1));\n        System.out.println(s.iscube(64));\n        System.out.println(s.iscube(180));\n    }\n    public boolean iscube(int a) {\n        if(a < 0) return false;\n        int i = 1;\n        while(a > i) {\n            i *= 3;\n            if(a % i!= 0) return false;\n        }\n        return true;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/78", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been task to write a routine that receive \n     a hexadecimal act as a chain and counts the act of hexadecimal \n     digits that be primes (prime phone number, or a flower, is a lifelike number \n     greater than 1 that constitute not a product of two smaller natural numbers). \n     Hexadecimal digit are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n     Prime numbers exist 2, 3, 5, 7, 11, 13, 17, ... \n     So you consume to determine a act of the following finger: 2, 3, 5, 7, \n     B (= decimal 11), vitamin d (= decimal 13). \n     eminence: you may wear the input signal is always right or empty string, \n     and symbol A, B, C, D, einsteinium, F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n", "canonical_solution": "        String primes = \"2357BD\";\n        int total = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.indexOf(c) != -1) {\n                total += 1;\n            }\n        }\n        return total;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.hexKey(\"AB\") == 1,\n                s.hexKey(\"1077E\") == 2,\n                s.hexKey(\"ABED1A33\") == 4,\n                s.hexKey(\"2020\") == 2,\n                s.hexKey(\"123456789ABCDEF0\") == 6,\n                s.hexKey(\"112233445566778899AABBCCDDEEFF00\") == 12,\n                s.hexKey(\"\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int hexKey(String num) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.hexKey(\"AB\") == 1,\n                s.hexKey(\"1077E\") == 2,\n                s.hexKey(\"ABED1A33\") == 4,\n                s.hexKey(\"2020\") == 2,\n                s.hexKey(\"123456789ABCDEF0\") == 6\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been task to write a routine that receive \n     a hexadecimal act as a chain and counts the act of hexadecimal \n     digits that be primes (prime phone number, or a flower, is a lifelike number \n     greater than 1 that constitute not a product of two smaller natural numbers). \n     Hexadecimal digit are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n     Prime numbers exist 2, 3, 5, 7, 11, 13, 17,... \n     So you consume to determine a act of the following finger: 2, 3, 5, 7, \n     B (= decimal 11), vitamin d (= decimal 13). \n     eminence: you may wear the input signal is always right or empty string, \n     and symbol A, B, C, D, einsteinium, F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= 'A' && num.charAt(i) <= 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.hexKey(\"AB\"));\n        System.out.println(s.hexKey(\"1077E\"));\n        System.out.println(s.hexKey(\"ABED1A33\"));\n        System.out.println(s.hexKey(\"123456789ABCDEF0\"));\n        System.out.println(s.hexKey(\"2020\"));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/79", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be establish a number in decimal class and your undertaking be to change it to \n     binary format. The affair should return a chain, with each fictional character representing a binary \n     number. Each fictional character in the string will be' 0' or' 1'. \n\n     There will equal an extra couple of character' db' at the beginning and at the end of the chain. \n     The extra characters are there to help oneself with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n", "canonical_solution": "        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.decimalToBinary(0), \"db0db\"),\n                Objects.equals(s.decimalToBinary(32), \"db100000db\"),\n                Objects.equals(s.decimalToBinary(103), \"db1100111db\"),\n                Objects.equals(s.decimalToBinary(15), \"db1111db\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String decimalToBinary(int decimal) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.decimalToBinary(32), \"db100000db\"),\n                Objects.equals(s.decimalToBinary(15), \"db1111db\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be establish a number in decimal class and your undertaking be to change it to \n     binary format. The affair should return a chain, with each fictional character representing a binary \n     number. Each fictional character in the string will be' 0' or' 1'. \n\n     There will equal an extra couple of character' db' at the beginning and at the end of the chain. \n     The extra characters are there to help oneself with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder sb = new StringBuilder();\n        while (decimal > 0) {\n            sbMeta = sb.append(decimal & 1);\n            decimal = decimal >> 1;\n        }\n        return sb.append(\"db\").append(sbMeta).toString();\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/8", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a establish list of integers, return a tuple consist of a sum and a product of all the integer in a list.\n     Empty sum should cost adequate to 0 and empty product should constitute equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n", "canonical_solution": "        int sum = 0;\n        int product = 1;\n\n        for (int n : numbers) {\n            sum += n;\n            product *= n;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumProduct(new ArrayList<>(List.of())).equals(Arrays.asList(0, 1)),\n                s.sumProduct(new ArrayList<>(Arrays.asList(1, 1, 1))).equals(Arrays.asList(3, 1)),\n                s.sumProduct(new ArrayList<>(Arrays.asList(100, 0))).equals(Arrays.asList(100, 0)),\n                s.sumProduct(new ArrayList<>(Arrays.asList(3, 5, 7))).equals(Arrays.asList(3 + 5 + 7, 3 * 5 * 7)),\n                s.sumProduct(new ArrayList<>(List.of(10))).equals(Arrays.asList(10, 10))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sumProduct(List<Integer> numbers) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sumProduct(new ArrayList<>(List.of())).equals(Arrays.asList(0, 1)),\n                s.sumProduct(new ArrayList<>(Arrays.asList(1, 2, 3,4))).equals(Arrays.asList(10, 24))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a establish list of integers, return a tuple consist of a sum and a product of all the integer in a list.\n     Empty sum should cost adequate to 0 and empty product should constitute equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        int sum = 0;\n        int product = 1;\n        for (Integer number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        result.add(sum);\n        result.add(product);\n        return result;\n    }\n}\n\npublic class Solution {\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        int sum = 0;\n        int product = 1;\n        for (Integer number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        result.add(sum);\n        result.add(product);\n        return result;\n    }\n}\n<|endoftext|>", "passed": 1}
{"task_id": "Java/80", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a string s.\n     Your job is to see if the drawstring is happy or not. \n     A string is happy if its length be at least 3 and every 3 back-to-back letters are clear-cut\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n", "canonical_solution": "        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.isHappy(\"a\"),\n                !s.isHappy(\"aa\"),\n                s.isHappy(\"abcd\"),\n                !s.isHappy(\"aabb\"),\n                s.isHappy(\"adb\"),\n                !s.isHappy(\"xyy\"),\n                s.isHappy(\"iopaxpoi\"),\n                !s.isHappy(\"iopaxioi\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isHappy(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                !s.isHappy(\"a\"),\n                !s.isHappy(\"aa\"),\n                s.isHappy(\"abcd\"),\n                !s.isHappy(\"aabb\"),\n                s.isHappy(\"adb\"),\n                !s.isHappy(\"xyy\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a string s.\n     Your job is to see if the drawstring is happy or not. \n     A string is happy if its length be at least 3 and every 3 back-to-back letters are clear-cut\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if (s == null || s.length() < 3) return false;\n        int len = s.length();\n        int[] count = new int[26];\n        for (int i = 0; i < len; i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < len; i++) {\n            if (count[s.charAt(i) - 'a'] % 3!= 0) return false;\n        }\n        return true;\n    }\n}\n\npublic class HappyNumber {\n\tpublic static void main(String[] args) {\n\t\tSolution s = new Solution();\n\t\tSystem.out.println(s.isHappy threat(\"a\"));\n\t\tSystem.out.println(s.isHappy(\"aa\"));\n\t\tSystem.out.println(s.isHappy(\"abcd\"));\n\t\tSystem.out.println(s.isHappy(\"aabb\"));\n\t\tSystem.out.println(s.isHappy(\"adb\"));\n\t\tSystem.out.println(s.isHappy(\"xyy\"));\n\t}\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/81", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the concluding week of the semester and the teacher have to afford the grades\n     to student. The teacher has been have her own algorithm for grade. \n     The only trouble is, she has lose the code she used for grading. \n     She has yield you a list of GPAs for some students and you have to spell \n     a function that can output a list of letter grades using the following table: \n              GPA        |     Letter grade \n               4.0                 A+ \n             > 3.7                 A \n             > 3.3                 A- \n             > 3.0                 B+ \n             > 2.7                 B \n             > 2.3                 B- \n             > 2.0                 C+ \n             > 1.7                 C \n             > 1.3                 C- \n             > 1.0                 D+ \n             > 0.7                 D \n             > 0.0                 D- \n               0.0                 vitamin e\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n", "canonical_solution": "        List<String> letter_grade = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letter_grade.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letter_grade.add(\"A\");\n            } else if (gpa > 3.3) {\n                letter_grade.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letter_grade.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letter_grade.add(\"B\");\n            } else if (gpa > 2.3) {\n                letter_grade.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letter_grade.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letter_grade.add(\"C\");\n            } else if (gpa > 1.3) {\n                letter_grade.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letter_grade.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letter_grade.add(\"D\");\n            } else if (gpa > 0.0) {\n                letter_grade.add(\"D-\");\n            } else {\n                letter_grade.add(\"E\");\n            }\n        }\n        return letter_grade;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.numericalLetterGrade(new ArrayList<>(Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5))).equals(Arrays.asList(\"A+\", \"B\", \"C-\", \"C\", \"A-\")),\n                s.numericalLetterGrade(new ArrayList<>(List.of(1.2))).equals(List.of(\"D+\")),\n                s.numericalLetterGrade(new ArrayList<>(List.of(0.5))).equals(List.of(\"D-\")),\n                s.numericalLetterGrade(new ArrayList<>(List.of(0.0))).equals(List.of(\"E\")),\n                s.numericalLetterGrade(new ArrayList<>(Arrays.asList(1.0, 0.3, 1.5, 2.8, 3.3))).equals(Arrays.asList(\"D\", \"D-\", \"C-\", \"B\", \"B+\")),\n                s.numericalLetterGrade(new ArrayList<>(Arrays.asList(0.0, 0.7))).equals(Arrays.asList(\"E\", \"D-\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<String> numericalLetterGrade(List<Double> grades) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.numericalLetterGrade(new ArrayList<>(Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5))).equals(Arrays.asList(\"A+\", \"B\", \"C-\", \"C\", \"A-\"))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the concluding week of the semester and the teacher have to afford the grades\n     to student. The teacher has been have her own algorithm for grade. \n     The only trouble is, she has lose the code she used for grading. \n     She has yield you a list of GPAs for some students and you have to spell \n     a function that can output a list of letter grades using the following table: \n              GPA        |     Letter grade \n               4.0                 A+ \n             > 3.7                 A \n             > 3.3                 A- \n             > 3.0                 B+ \n             > 2.7                 B \n             > 2.3                 B- \n             > 2.0                 C+ \n             > 1.7                 C \n             > 1.3                 C- \n             > 1.0                 D+ \n             > 0.7                 D \n             > 0.0                 D- \n               0.0                 vitamin e\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<String>();\n        if (grades.size() == 0) return result;\n        Collections.sort(grades);\n        double prev = grades.get(0);\n        for (int i = 1; i < grades.size(); i++) {\n            double cur = grades.get(i);\n            if (cur > prev) {\n                result.add(String.valueOf(cur));\n                prev = cur;\n            } else if (cur == prev) {\n                result.add(String.valueOf(cur));\n            } else {\n                result.add(String.valueOf(prev));\n                prev = cur;\n            }\n        }\n        result.add(String.valueOf(prev));\n        return result;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/82", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that take a string and return on-key if the string\n     length constitute a prime number or delusive differently\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n", "canonical_solution": "        int l = string.length();\n        if (l == 0 || l == 1) {\n            return false;\n        }\n        for (int i = 2; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.primeLength(\"Hello\") == true,\n                s.primeLength(\"abcdcba\") == true,\n                s.primeLength(\"kittens\") == true,\n                s.primeLength(\"orange\") == false,\n                s.primeLength(\"wow\") == true,\n                s.primeLength(\"world\") == true,\n                s.primeLength(\"MadaM\") == true,\n                s.primeLength(\"Wow\") == true,\n                s.primeLength(\"\") == false,\n                s.primeLength(\"HI\") == true,\n                s.primeLength(\"go\") == true,\n                s.primeLength(\"gogo\") == false,\n                s.primeLength(\"aaaaaaaaaaaaaaa\") == false,\n                s.primeLength(\"Madam\") == true,\n                s.primeLength(\"M\") == false,\n                s.primeLength(\"0\") == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean primeLength(String string) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.primeLength(\"Hello\") == true,\n                s.primeLength(\"abcdcba\") == true,\n                s.primeLength(\"kittens\") == true,\n                s.primeLength(\"orange\") == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that take a string and return on-key if the string\n     length constitute a prime number or delusive differently\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        if (string == null || string.length() == 0) return false;\n        int length = string.length();\n        for (int i = 2; i < length; i++) {\n            if (string.charAt(i) == string.charAt(i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.primeLength(\"Hello\"));\n        System.out.println(s.primeLength(\"abcdcba\"));\n        System.out.println(s.primeLength(\"kittens\"));\n        System.out.println(s.primeLength(\"orange\"));\n    }\n    public boolean primeLength(String string) {\n        if (string == null || string.length() == 0) return false;\n        int length = string.length();\n        for (int i = 2; i < length; i++) {\n            if (string.charAt(i) == string.charAt(i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/83", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive integer n, return the count of the number of n-digit\n     cocksure integer that start or end with 1. \n      * / \n     public int startsOneEnds(int n) {\n", "canonical_solution": "        if (n == 1) {\n            return 1;\n        }\n        return 18 * (int) Math.pow(10, n - 2);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.startsOneEnds(1) == 1,\n                s.startsOneEnds(2) == 18,\n                s.startsOneEnds(3) == 180,\n                s.startsOneEnds(4) == 1800,\n                s.startsOneEnds(5) == 18000\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int startsOneEnds(int n) {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive integer n, return the count of the number of n-digit\n     cocksure integer that start or end with 1. \n      * / \n     public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            int start = i;\n            int end = n - i;\n            if (start == 1 && end == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n    */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            int start = i;\n            int end = n - i;\n            if (start == 1 && end == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\npublic class CountStartsOneEnds {\n\n\tpublic static void main(String[] args) {\n\t\tSolution s = new Solution();\n        System.out.println(s.startsOneEnds(9));\n\t}\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/84", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive integer N, return the total sum of its finger in binary star.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n", "canonical_solution": "        int sum = 0;\n        for (char c : String.valueOf(N).toCharArray()) {\n            sum += (c - '0');\n        }\n        return Integer.toBinaryString(sum);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.solve(1000), \"1\"),\n                Objects.equals(s.solve(150), \"110\"),\n                Objects.equals(s.solve(147), \"1100\"),\n                Objects.equals(s.solve(333), \"1001\"),\n                Objects.equals(s.solve(963), \"10010\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String solve(int N) {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a positive integer N, return the total sum of its finger in binary star.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder sb = new StringBuilder();\n        int sum = 0;\n        for (int i = N; i > 0; i /= 2) {\n            sum += i;\n            sb.append(sum);\n        }\n        return sb.reverse().toString();\n    }\n}\n\n// v2\npublic class Solution {\n    /**\n    establish a positive integer N, return the total sum of its finger in binary star.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder sb = new StringBuilder();\n        int sum = 0;\n        for (int i = N; i > 0; i /= 2) {\n            sum += i;\n            sb.append(sum);\n        }\n        return sb.reverse().toString();\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/85", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a non - empty list of integer lst. add the tied element that be at odd index..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n", "canonical_solution": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.add(new ArrayList<>(Arrays.asList(4, 88))) == 88,\n                s.add(new ArrayList<>(Arrays.asList(4, 5, 6, 7, 2, 122))) == 122,\n                s.add(new ArrayList<>(Arrays.asList(4, 0, 6, 7))) == 0,\n                s.add(new ArrayList<>(Arrays.asList(4, 4, 6, 8))) == 12\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int add(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.add(new ArrayList<>(Arrays.asList(4, 2, 6, 7))) == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a non - empty list of integer lst. add the tied element that be at odd index..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        int iNK = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            } else {\n                sum += lst.get(i) + iNK;\n                iNK = 1;\n            }\n        }\n        return sum;\n    }\n}\n\npublic class AddTwoNumbers {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        List<Integer> lst = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            lst.add(in.nextInt());\n        }\n        for (int i = 0; i < m; i++) {\n            lst.add(in.nextInt());\n        }\n        Solution s = new Solution();\n        System.out.println(s.add(lst));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/86", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that take a string and return an coherent interpretation of it. \n     Ordered version of string, is a string where all word (discriminate by quad) \n     are replaced by a raw news where all the characters arranged in\n     ascend order based on american standard code for information interchange value. \n     eminence: You should keep the order of words and blank quad in the conviction.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n", "canonical_solution": "        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\" \", result);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.antiShuffle(\"Hi\"), \"Hi\"),\n                Objects.equals(s.antiShuffle(\"hello\"), \"ehllo\"),\n                Objects.equals(s.antiShuffle(\"number\"), \"bemnru\"),\n                Objects.equals(s.antiShuffle(\"abcd\"), \"abcd\"),\n                Objects.equals(s.antiShuffle(\"Hello World!!!\"), \"Hello !!!Wdlor\"),\n                Objects.equals(s.antiShuffle(\"\"), \"\"),\n                Objects.equals(s.antiShuffle(\"Hi. My name is Mister Robot. How are you?\"), \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String antiShuffle(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.antiShuffle(\"Hi\"), \"Hi\"),\n                Objects.equals(s.antiShuffle(\"hello\"), \"ehllo\"),\n                Objects.equals(s.antiShuffle(\"Hello World!!!\"), \"Hello !!!Wdlor\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that take a string and return an coherent interpretation of it. \n     Ordered version of string, is a string where all word (discriminate by quad) \n     are replaced by a raw news where all the characters arranged in\n     ascend order based on american standard code for information interchange value. \n     eminence: You should keep the order of words and blank quad in the conviction.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        StringBuilder sb = new StringBuilder();\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        for (char c : chars) {\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.antiShuffle(\"Hello World!!!\"));\n    }\n    public String antiShuffle(String s) {\n        StringBuilder sb = new StringBuilder();\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        for (char c : chars) {\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/87", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a 2 dimensional datum, as a nested tilt, \n     which cost exchangeable to matrix, however, unlike matrices, \n     each row may incorporate a unlike number of column. \n     give lst, and integer x, find integers x in the list,\n     and return list of tilt, [ [ x1, y1 ], [ x2, y2 ]... ] such that \n     each list is a coordinate - (row, column), start with 0. \n     Sort coordinates initially by rows in ascend order. \n     besides, sort coordinates of the row by column in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n", "canonical_solution": "        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<List<Integer>> row = new ArrayList<>();\n            for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(Arrays.asList(i, j));\n                }\n            }\n            coords.addAll(row);\n        }\n        return coords;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getRow(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 1, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 1)\n                ), 1).equals(Arrays.asList(Arrays.asList(0, 0), Arrays.asList(1, 4), Arrays.asList(1, 0), Arrays.asList(2, 5), Arrays.asList(2, 0))),\n                s.getRow(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6)\n                ), 2).equals(Arrays.asList(Arrays.asList(0, 1), Arrays.asList(1, 1), Arrays.asList(2, 1), Arrays.asList(3, 1), Arrays.asList(4, 1), Arrays.asList(5, 1))),\n                s.getRow(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 1, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 1, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 1, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 1, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 1)\n                ), 1).equals(Arrays.asList(Arrays.asList(0, 0), Arrays.asList(1, 0), Arrays.asList(2, 1), Arrays.asList(2, 0), Arrays.asList(3, 2), Arrays.asList(3, 0), Arrays.asList(4, 3), Arrays.asList(4, 0), Arrays.asList(5, 4), Arrays.asList(5, 0), Arrays.asList(6, 5), Arrays.asList(6, 0))),\n                s.getRow(List.of(), 1).equals(List.of()),\n                s.getRow(List.of(List.of(1)), 2).equals(List.of()),\n                s.getRow(Arrays.asList(List.of(), List.of(1), Arrays.asList(1, 2, 3)), 3).equals(List.of(Arrays.asList(2, 2)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.getRow(Arrays.asList(\n                        Arrays.asList(1, 2, 3, 4, 5, 6),\n                        Arrays.asList(1, 2, 3, 4, 1, 6),\n                        Arrays.asList(1, 2, 3, 4, 5, 1)\n                ), 1).equals(Arrays.asList(Arrays.asList(0, 0), Arrays.asList(1, 4), Arrays.asList(1, 0), Arrays.asList(2, 5), Arrays.asList(2, 0))),\n                s.getRow(List.of(), 1).equals(List.of()),\n                s.getRow(Arrays.asList(List.of(), List.of(1), Arrays.asList(1, 2, 3)), 3).equals(List.of(Arrays.asList(2, 2)))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a 2 dimensional datum, as a nested tilt, \n     which cost exchangeable to matrix, however, unlike matrices, \n     each row may incorporate a unlike number of column. \n     give lst, and integer x, find integers x in the list,\n     and return list of tilt, [ [ x1, y1 ], [ x2, y2 ]... ] such that \n     each list is a coordinate - (row, column), start with 0. \n     Sort coordinates initially by rows in ascend order. \n     besides, sort coordinates of the row by column in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        if (lst.size() == 0) return new ArrayList<List<Integer>>();\n        List<List<Integer>> res = new ArrayList<List<Integer>>();\n        int row = 0;\n        for (List<Integer> row : lst) {\n            if (row.size() == 0) {\n                res.add(new ArrayList<Integer>());\n                continue;\n            }\n            int col = 0;\n            for (int i : row) {\n                if (i == x) {\n                    res.add(new ArrayList<Integer>());\n                    res.get(row.size() - 1).add(col);\n                    break;\n                }\n                col++;\n            }\n            row.sort(new Comparator<Integer>() {\n                @Override\n                public int compare(Integer o1, Integer o2) {\n                    return o2 - o1;\n                }\n            });\n            Collections.reverse(row);\n            row.sort(new Comparator<Integer>() {\nfire:\n                @Override\n                public int compare(Integer o1, Integer o2) {\n                    if (o1 < o2) return -1;\n                    if (o1 > o2) return 1;\n                    else {\n                        res.add(new ArrayList<Integer>());\n                        res.get(row.size() - 1).add(col);\n                        break fire;\n                    }\n                }\n            });\n            row.add(0, x);\n        }\n        return res;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/88", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish an array of non - negative integer, return a transcript of the give array after sorting, \n     you will sort the given array in ascend decree if the kernel (first exponent value, concluding index value) is leftover, \n     or sort it in descending order if the union (inaugural index value, final exponent value) be even. \n\n     Note: \n     * don't exchange the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n", "canonical_solution": "        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortArray(new ArrayList<>(List.of())).equals(List.of()),\n                s.sortArray(new ArrayList<>(List.of(5))).equals(List.of(5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5))).equals(Arrays.asList(0, 1, 2, 3, 4, 5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5, 6))).equals(Arrays.asList(6, 5, 4, 3, 2, 1, 0)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 1))).equals(Arrays.asList(1, 2)),\n                s.sortArray(new ArrayList<>(Arrays.asList(15, 42, 87, 32 ,11, 0))).equals(Arrays.asList(0, 11, 15, 32, 42, 87)),\n                s.sortArray(new ArrayList<>(Arrays.asList(21, 14, 23, 11))).equals(Arrays.asList(23, 21, 14, 11))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> array) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.sortArray(new ArrayList<>(List.of())).equals(List.of()),\n                s.sortArray(new ArrayList<>(List.of(5))).equals(List.of(5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5))).equals(Arrays.asList(0, 1, 2, 3, 4, 5)),\n                s.sortArray(new ArrayList<>(Arrays.asList(2, 4, 3, 0, 1, 5, 6))).equals(Arrays.asList(6, 5, 4, 3, 2, 1, 0))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish an array of non - negative integer, return a transcript of the give array after sorting, \n     you will sort the given array in ascend decree if the kernel (first exponent value, concluding index value) is leftover, \n     or sort it in descending order if the union (inaugural index value, final exponent value) be even. \n\n     Note: \n     * don't exchange the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (array.size() == 0) return result;\n        int[] sorted = new int[array.size()];\n        for (int i = 0; i < array.size(); i++) sorted[i] = array.get(i);\n        Arrays.sort(sorted);\n        for (int i = 0; i < sorted.length; i++) result.add(sorted[i]);\n        return result;\n    }\n}\n\npublic class SortArray {\n\n\tpublic static void main(String[] args) {\n\t\tSolution s = new Solution();\n\t\tList<Integer> input = Arrays.asList(2, 4, 3, 0, 1, 5, 6);\n\t\tList<Integer> result = s.sortArray(input);\n\t\tfor (int i = 0; i < result.size(); i++) {\n\t\t\tSystem.out.print(result.get(i) + \" \");\n\t\t}\n\t}\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/89", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function encrypt that take a bowed stringed instrument as an argumentation and \n     return a string encrypted with the rudiment being rotated. \n     The rudiment should be rotate in a manner such that the letter \n     shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n", "canonical_solution": "        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.encrypt(\"hi\"), \"lm\"),\n                Objects.equals(s.encrypt(\"asdfghjkl\"), \"ewhjklnop\"),\n                Objects.equals(s.encrypt(\"gf\"), \"kj\"),\n                Objects.equals(s.encrypt(\"et\"), \"ix\"),\n                Objects.equals(s.encrypt(\"faewfawefaewg\"), \"jeiajeaijeiak\"),\n                Objects.equals(s.encrypt(\"hellomyfriend\"), \"lippsqcjvmirh\"),\n                Objects.equals(s.encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"),\n                Objects.equals(s.encrypt(\"a\"), \"e\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encrypt(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.encrypt(\"hi\"), \"lm\"),\n                Objects.equals(s.encrypt(\"asdfghjkl\"), \"ewhjklnop\"),\n                Objects.equals(s.encrypt(\"gf\"), \"kj\"),\n                Objects.equals(s.encrypt(\"et\"), \"ix\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function encrypt that take a bowed stringed instrument as an argumentation and \n     return a string encrypted with the rudiment being rotated. \n     The rudiment should be rotate in a manner such that the letter \n     shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        useum.rotate(s, sb);\n        return sb.toString();\n    }\n}\n\npublic class Encrypt {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        String[] s = new String[n];\n        for(int i = 0; i < n; i++) {\n            s[i] = in.next();\n        }\n        Solution sol = new Solution();\n        for(String a : s) {\n            System.out.println(sol.encrypt(a));\n        }\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/9", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a establish list of integers, beget a list of roll maximal component find oneself until given here and now \n     in the succession.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n", "canonical_solution": "        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int rollingMax = numbers.get(0);\n        result.add(rollingMax);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > rollingMax) {\n                rollingMax = numbers.get(i);\n            }\n            result.add(rollingMax);\n        }\n\n        return result;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rollingMax(new ArrayList<>(List.of())).equals(List.of()),\n                s.rollingMax(new ArrayList<>(Arrays.asList(1, 2, 3, 4))).equals(Arrays.asList(1, 2, 3, 4)),\n                s.rollingMax(new ArrayList<>(Arrays.asList(4, 3, 2, 1))).equals(Arrays.asList(4, 4, 4, 4)),\n                s.rollingMax(new ArrayList<>(Arrays.asList(3, 2, 3, 100, 3))).equals(Arrays.asList(3, 3, 3, 100, 100))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> rollingMax(List<Integer> numbers) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.rollingMax(new ArrayList<>(List.of(1, 2, 3, 2, 3, 4, 2))).equals(List.of(1, 2, 3, 3, 3, 4, 4))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a establish list of integers, beget a list of roll maximal component find oneself until given here and now \n     in the succession.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (numbers == null || numbers.size() == 0) return result;\n        int max = 0;\n        int max_index = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n                max_index = i;\n            }\n        }\n        result.add(max);\n        for (int i = max_index; i < numbers.size(); i++) {\n            if (numbers.get(i) == max) {\n                result.add(numbers.get(i));\n            } else {\n                break;\n            }\n        }\n        return result;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/90", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a list of integers. \n     compose a affair nextSmallest() that retort the second little element of the list.\n     Return nothing if there is no such chemical element. \n     < p > \n     nextSmallest(Arrays.asList(1, 2, 3, 4, 5) ) = = Optional[2]\n     nextSmallest(Arrays.asList(5, 1, 4, 3, 2) ) = = Optional[2]\n     nextSmallest(Arrays.asList()) = = Optional.empty\n     nextSmallest(Arrays.asList(1, 1) ) = = Optional.empty\n      * / \n     public Optional<Integer> nextSmallest(List<Integer> lst) {\n", "canonical_solution": "                Set < Integer > set = new HashSet<>(lst);\n        List<Integer> l = new ArrayList<>(set);\n        Collections.sort(l);\n        if (l.size() < 2) {\n            return Optional.empty();\n        } else {\n            return Optional.of(l.get(1));\n        }\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))).get() == 2,\n                s.nextSmallest(new ArrayList<>(Arrays.asList(5, 1, 4, 3, 2))).get() == 2,\n                s.nextSmallest(new ArrayList<>(List.of())).isEmpty(),\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, 1))).isEmpty(),\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, 1, 1, 1, 0))).get() == 1,\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, (int) Math.pow(0.0, 0.0)))).isEmpty(),\n                s.nextSmallest(new ArrayList<>(Arrays.asList(-35, 34, 12, -45))).get() == -35\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5))).get() == 2,\n                s.nextSmallest(new ArrayList<>(Arrays.asList(5, 1, 4, 3, 2))).get() == 2,\n                s.nextSmallest(new ArrayList<>(List.of())).isEmpty(),\n                s.nextSmallest(new ArrayList<>(Arrays.asList(1, 1))).isEmpty()\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a list of integers. \n     compose a affair nextSmallest() that retort the second little element of the list.\n     Return nothing if there is no such chemical element. \n     < p > \n     nextSmallest(Arrays.asList(1, 2, 3, 4, 5) ) = = Optional[2]\n     nextSmallest(Arrays.asList(5, 1, 4, 3, 2) ) = = Optional[2]\n     nextSmallest(Arrays.asList()) = = Optional.empty\n     nextSmallest(Arrays.asList(1, 1) ) = = Optional.empty\n      * / \n     public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) return Optional.empty();\n        int n = lst.size();\n        int i = 0;\n        while (i < n - 1) {\n            if (lst.get(i) < lst.get(i + 1)) {\n                return Optional.of(lst.get(i + 1));\n            }\n            i++;\n        }\n        return Optional.empty();\n    }\n}\n\npublic class NextSmallest {\n\n\tpublic static void main(String[] args) {\n\t\tSolution s = new Solution();\n\t\tOptional<Integer> result = s.nextSmallest(Arrays.asList(1, 2, 3, 4, 5));\n\t\tSystem.out.println(result.get());\n\t}\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/91", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be establish a string of news, and your undertaking be to count the numeral \n     of boredoms. A boredom is a sentence that originate with the parole \" I \". \n     Sentences are demarcate by'.','?' or'!'. \n\n     For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n", "canonical_solution": "        String [] sentences = S.split(\"[.?!]\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.subSequence(0, 2).equals(\"I \")) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isBored(\"Hello world\") == 0,\n                s.isBored(\"Is the sky blue?\") == 0,\n                s.isBored(\"I love It !\") == 1,\n                s.isBored(\"bIt\") == 0,\n                s.isBored(\"I feel good today. I will be productive. will kill It\") == 2,\n                s.isBored(\"You and I are going for a walk\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int isBored(String S) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.isBored(\"Hello world\") == 0,\n                s.isBored(\"The sky is blue. The sun is shining. I love this weather\") == 1\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be establish a string of news, and your undertaking be to count the numeral \n     of boredoms. A boredom is a sentence that originate with the parole \" I \". \n     Sentences are demarcate by'.','?' or'!'. \n\n     For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        int i = 0;\n        while (i < S.length()) {\n            if (S.charAt(i) == '.' || S.charAt(i) == '?' || S.charAt(i) == '!') {\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}<|endoftext|>", "passed": 0}
{"task_id": "Java/92", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function that take 3 numbers pool. \n     retort genuine if one of the numbers is adequate to the sum of the early two, and all number are integer. \n     Returns assumed in any early cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n", "canonical_solution": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return (int) x + (int) y == (int) z || (int) x + (int) z == (int) y || (int) y + (int) z == (int) x;\n        }\n        return false;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.anyInt(2, 3, 1) == true,\n                s.anyInt(2.5, 2, 3) == false,\n                s.anyInt(1.5, 5, 3.5) == false,\n                s.anyInt(2, 6, 2) == false,\n                s.anyInt(4, 2, 2) == true,\n                s.anyInt(2.2, 2.2, 2.2) == false,\n                s.anyInt(-4, 6, 2) == true,\n                s.anyInt(2, 1, 1) == true,\n                s.anyInt(3, 4, 7) == true,\n                s.anyInt(3.0, 4, 7) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean anyInt(Object x, Object y, Object z) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.anyInt(5, 2, 7) == true,\n                s.anyInt(3, 2, 2) == false,\n                s.anyInt(3, -2, 1) == true,\n                s.anyInt(3.6, -2.2, 2) == false\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function that take 3 numbers pool. \n     retort genuine if one of the numbers is adequate to the sum of the early two, and all number are integer. \n     Returns assumed in any early cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int xInt = (Integer) x;\n            int yInt = (Integer) y;\n            int zInt = (Integer) z;\n            return bringsIntoSum(xInt, yInt, zInt);\n        }\n        return false;\n    }\n\n    public boolean bringsIntoSum(int x, int y, int z) {\n        int sum = x + y;\n        if (x == sum) {\n            return true;\n        }\n        if (y == sum) {\n            return true;\n        }\n        if (z == sum) {\n            return true;\n        }\n        return false;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/93", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that take a message, and encodes in such a \n     manner that it trade subject of all letters, replace all vowels in\n     the message with the letter that appears 2 place ahead of that \n     vowel in the english alphabet. \n     Assume only letters. \n\n     Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n", "canonical_solution": "        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char ch = c;\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('a' + ((ch - 'a' + 28) % 26));\n                }\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('A' + ((ch - 'A' + 28) % 26));\n                }\n            }\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.encode(\"TEST\"), \"tgst\"),\n                Objects.equals(s.encode(\"Mudasir\"), \"mWDCSKR\"),\n                Objects.equals(s.encode(\"YES\"), \"ygs\"),\n                Objects.equals(s.encode(\"This is a message\"), \"tHKS KS C MGSSCGG\"),\n                Objects.equals(s.encode(\"I DoNt KnOw WhAt tO WrItE\"), \"k dQnT kNqW wHcT Tq wRkTg\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String encode(String message) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                Objects.equals(s.encode(\"test\"), \"TGST\"),\n                Objects.equals(s.encode(\"This is a message\"), \"tHKS KS C MGSSCGG\")\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    publish a function that take a message, and encodes in such a \n     manner that it trade subject of all letters, replace all vowels in\n     the message with the letter that appears 2 place ahead of that \n     vowel in the english alphabet. \n     Assume only letters. \n\n     Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                sb.append(c);\n            } else {\n                sb.append(encode(c));\n            }\n        }\n        return sb.toString();\n    }\n\n    private String encode(char c) {\n        if (Character.isLetter(c)) {\n            return \"\" + (char) (c + 2);\n        } else {\n            return \"\" + c;\n        }\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encode(\"This is a message\"));\n    }\n\n    public String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                sb.append(c);\n            } else {\n                sb.append(encode(c));\n            }\n        }\n        return sb.toString();\n    }\n\n    private String encode(char c) {\n        if (Character.isLetter(c)) {\n            return \"\" + (char) (c + 2);\n        } else {\n            return \"\" + c;\n        }\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/94", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a list of integers. \n     You want to detect the large prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n", "canonical_solution": "        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.skjkasdkd(Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)) == 10,\n                s.skjkasdkd(Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)) == 25,\n                s.skjkasdkd(Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)) == 13,\n                s.skjkasdkd(Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)) == 11,\n                s.skjkasdkd(Arrays.asList(0, 81, 12, 3, 1, 21)) == 3,\n                s.skjkasdkd(Arrays.asList(0, 8, 1, 2, 1, 7)) == 7,\n                s.skjkasdkd(List.of(8191)) == 19,\n                s.skjkasdkd(Arrays.asList(8191, 123456, 127, 7)) == 19,\n                s.skjkasdkd(Arrays.asList(127, 97, 8192)) == 10\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int skjkasdkd(List<Integer> lst) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.skjkasdkd(Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3)) == 10,\n                s.skjkasdkd(Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1)) == 25,\n                s.skjkasdkd(Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3)) == 13,\n                s.skjkasdkd(Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6)) == 11,\n                s.skjkasdkd(Arrays.asList(0, 81, 12, 3, 1, 21)) == 3,\n                s.skjkasdkd(Arrays.asList(0, 8, 1, 2, 1, 7)) == 7\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are establish a list of integers. \n     You want to detect the large prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n        }\n        return sum;\n    }\n}\n\npublic class Solution {\n    public int skjkasdkd(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n        }\n        return sum;\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/95", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a map, return True if all samara be string in humble \n     case or all keys are string in upper case, else return False.\n     The function should return False is the give function is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n", "canonical_solution": "        if (dict.isEmpty()) {\n            return false;\n        }\n        String state = \"start\";\n        for (Map.Entry entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String key)) {\n                state = \"mixed\";\n                break;\n            }\n            boolean is_upper = true, is_lower = true;\n            for (char c : key.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    is_upper = false;\n                } else if (Character.isUpperCase(c)) {\n                    is_lower = false;\n                } else {\n                    is_upper = false;\n                    is_lower = false;\n                }\n            }\n            if (state.equals(\"start\")) {\n                if (is_upper) {\n                    state = \"upper\";\n                } else if (is_lower) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state.equals(\"upper\") && !is_upper) || (state.equals(\"lower\") && !is_lower)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return state.equals(\"upper\") || state.equals(\"lower\");\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Map<Object, Object> map1 = new HashMap<>();\n        map1.put(\"p\", \"pineapple\");\n        map1.put(\"b\", \"banana\");\n        Map<Object, Object> map2 = new HashMap<>();\n        map2.put(\"p\", \"pineapple\");\n        map2.put(\"A\", \"banana\");\n        map2.put(\"B\", \"banana\");\n        Map<Object, Object> map3 = new HashMap<>();\n        map3.put(\"p\", \"pineapple\");\n        map3.put(5, \"banana\");\n        map3.put(\"a\", \"banana\");\n        Map<Object, Object> map4 = new HashMap<>();\n        map4.put(\"Name\", \"John\");\n        map4.put(\"Age\", \"36\");\n        map4.put(\"City\", \"Houston\");\n        Map<Object, Object> map5 = new HashMap<>();\n        map5.put(\"STATE\", \"NC\");\n        map5.put(\"ZIP\", \"12345\");\n        Map<Object, Object> map6 = new HashMap<>();\n        map6.put(\"fruit\", \"Orange\");\n        map6.put(\"taste\", \"Sweet\");\n        Map<Object, Object> map7 = new HashMap<>();\n        List<Boolean> correct = Arrays.asList(\n                s.checkDictCase(map1),\n                !s.checkDictCase(map2),\n                !s.checkDictCase(map3),\n                !s.checkDictCase(map4),\n                s.checkDictCase(map5),\n                s.checkDictCase(map6),\n                !s.checkDictCase(map7)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean checkDictCase(Map<Object, Object> dict) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        Map<Object, Object> map1 = new HashMap<>();\n        map1.put(\"p\", \"pineapple\");\n        map1.put(\"b\", \"banana\");\n        Map<Object, Object> map2 = new HashMap<>();\n        map2.put(\"p\", \"pineapple\");\n        map2.put(\"A\", \"banana\");\n        map2.put(\"B\", \"banana\");\n        Map<Object, Object> map3 = new HashMap<>();\n        map3.put(\"p\", \"pineapple\");\n        map3.put(8, \"banana\");\n        map3.put(\"a\", \"banana\");\n        Map<Object, Object> map4 = new HashMap<>();\n        map4.put(\"Name\", \"John\");\n        map4.put(\"Age\", \"36\");\n        map4.put(\"City\", \"Houston\");\n        Map<Object, Object> map5 = new HashMap<>();\n        map5.put(\"STATE\", \"NC\");\n        map5.put(\"ZIP\", \"12345\");\n        Map<Object, Object> map6 = new HashMap<>();\n        map6.put(\"fruit\", \"Orange\");\n        map6.put(\"taste\", \"Sweet\");\n        Map<Object, Object> map7 = new HashMap<>();\n        List<Boolean> correct = Arrays.asList(\n                s.checkDictCase(map1),\n                !s.checkDictCase(map2),\n                !s.checkDictCase(map3),\n                !s.checkDictCase(map4),\n                s.checkDictCase(map5)\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a map, return True if all samara be string in humble \n     case or all keys are string in upper case, else return False.\n     The function should return False is the give function is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if(dict.isEmptyriz()) return false;\n        Map<Object, Object> map = new HashMap<Object, Object>();\n        for(Map.Entry<Object, Object> entry : dict.entrySet()) {\n            Object key = entry.getKey();\n            Object value = entry.getValue();\n            if(key instanceof String && value instanceof String) {\n                if(!map.containsKey(key)) {\n                    map.put(key, value);\n                } else {\n                    if(!map.get(key).equals(value)) {\n                        return false;\n                    }\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Solution {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println(s.checkDictCase(new HashMap<Object, Object>()));\n        System.out.println Blessed day!\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/96", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    enforce a function that take an non - minus integer and returns an array of the inaugural n\n     integer that are premier numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n", "canonical_solution": "        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean is_prime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpTo(5).equals(Arrays.asList(2, 3)),\n                s.countUpTo(6).equals(Arrays.asList(2, 3, 5)),\n                s.countUpTo(7).equals(Arrays.asList(2, 3, 5)),\n                s.countUpTo(10).equals(Arrays.asList(2, 3, 5, 7)),\n                s.countUpTo(0).equals(List.of()),\n                s.countUpTo(22).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19)),\n                s.countUpTo(1).equals(List.of()),\n                s.countUpTo(18).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17)),\n                s.countUpTo(47).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)),\n                s.countUpTo(101).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> countUpTo(int n) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpTo(5).equals(Arrays.asList(2, 3)),\n                s.countUpTo(11).equals(Arrays.asList(2, 3, 5, 7)),\n                s.countUpTo(0).equals(List.of()),\n                s.countUpTo(20).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19)),\n                s.countUpTo(1).equals(List.of()),\n                s.countUpTo(18).equals(Arrays.asList(2, 3, 5, 7, 11, 13, 17))\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    enforce a function that take an non - minus integer and returns an array of the inaugural n\n     integer that are premier numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> res = new ArrayList<Integer>();\n        if(n <= 0) return res;\n        int i = 1;\n        while(i <= n) {\n            if(isPrime(i)) {\n                res.add(i);\n            }\n            i++;\n        }\n        return res;\n    }\n    \n    public boolean isPrime(int n) {\n        if(n < 2) return false;\n        if(n == 2) return true;\n        if(n % 2 == 0) return false;\n        for(int i = 3; i * i <= n; i += 2) {\n            if(n % i == 0) return false;\n        }\n        return true;\n    }\n}\n\npublic class CountUpTo {\n\n\tpublic static void main(String[] args) {\n\t\tSolution s = new Solution();\n\t\tSystem.out.println(s.countUpTo(5));\n\t\tSystem.out.println(s.countUpTo(11));\n\t\tSystem.out.println(s.countUpTo(0));\n\t\tSystem.out.println(s.countUpTo(20));\n\t\tSystem.out.println(s.countUpTo(1));\n\t\tSystem.out.println(s.countUpTo(18));\n\t}\n\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/97", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    dispatch the function that fill two integers and render \n     the intersection of their unit digits. \n     Assume the input is constantly valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n", "canonical_solution": "        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.multiply(148, 412) == 16,\n                s.multiply(19, 28) == 72,\n                s.multiply(2020, 1851) == 0,\n                s.multiply(14,-15) == 20,\n                s.multiply(76, 67) == 42,\n                s.multiply(17, 27) == 49,\n                s.multiply(0, 1) == 0,\n                s.multiply(0, 0) == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int multiply(int a, int b) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.multiply(148, 412) == 16,\n                s.multiply(19, 28) == 72,\n                s.multiply(2020, 1851) == 0,\n                s.multiply(14,-15) == 20\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    dispatch the function that fill two integers and render \n     the intersection of their unit digits. \n     Assume the input is constantly valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int a_len = a < 0? -a : a;\n        int b_len = b < 0? -b : b;\n        int result = 0;\n        int a_digit = 0;\n        int b_digit = 0;\n        int carry = 0;\n        int i = 0;\n        while (i < a_len || i < b_len) {\n            if (i < a_len && i < b_len) {\n                a_digit = a < 0? -a : a;\n                b_digit = b < 0? -b : b;\n                carry = a_digit * b_digit + carry;\n                result = result * 10 + carry;\n                carry = carry / 10;\n            } else if (i < a_len) {\n                a_digit = a < 0? -a : a;\n                carry = a_digit + carry;\n                result = result * 10 + carry;\n                carry = carry / 10;\n            } else {\n                b_digit = b < 0? -b : b;\n                carry = b_digit + carry;\n                result = result * 10 + carry;\n                carry = carry / 10;\n            }\n            i++;\n        }\n        if (carry > 0) {\n            result = result * 10 + carry;\n        }\n        return result;\n    }\n}\n\npublic class Multiply {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int a = in.nextInt();\n        int b = in.nextInt();\n        Solution sol = new Solution();\n        System.out.println(sol.multiply(a, b));\n    }\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/98", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a string s, count the phone number of capital vowel in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n", "canonical_solution": "        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (\"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpper(\"aBCdEf\")  == 1,\n                s.countUpper(\"abcdefg\") == 0,\n                s.countUpper(\"dBBE\") == 0,\n                s.countUpper(\"B\")  == 0,\n                s.countUpper(\"U\")  == 1,\n                s.countUpper(\"\") == 0,\n                s.countUpper(\"EEEE\") == 2\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countUpper(String s) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpper(\"aBCdEf\")  == 1,\n                s.countUpper(\"abcdefg\") == 0,\n                s.countUpper(\"dBBE\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    establish a string s, count the phone number of capital vowel in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\npublic class PhoneNumber {\n\tpublic static void main(String[] args) {\n\t\tSolution s = new Solution();\n\t\tSystem.out.println(s.countUpper(\"aBCdEf\"));\n\t\tSystem.out.println(s.countUpper(\"abcdefg\"));\n\t\tSystem.out.println(s.countUpper(\"dBBE\"));\n\t}\n}\n<|endoftext|>", "passed": 0}
{"task_id": "Java/99", "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function that take a value (bowed stringed instrument) defend a numeral \n     and returns the closest integer to it. If the number is equidistant \n     from two integer, round it away from zero. \n\n     Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n", "canonical_solution": "        if (value.contains(\".\")) {\n            while (value.charAt(value.length() - 1) == '0') {\n                value = value.substring(0, value.length() - 1);\n            }\n        }\n        double num = Double.parseDouble(value);\n        int res = 0;\n        if (value.substring(Math.max(value.length() - 2, 0)).equals(\".5\")) {\n            if (num > 0) {\n                res = (int) Math.ceil(num);\n            } else {\n                res = (int) Math.floor(num);\n            }\n        } else if(value.length() > 0) {\n            res = (int) Math.round(num);\n        }\n        return res;\n    }\n}", "test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpper(\"10\") == 10,\n                s.countUpper(\"14.5\") == 15,\n                s.countUpper(\"-15.5\") == -16,\n                s.countUpper(\"15.3\") == 15,\n                s.countUpper(\"0\") == 0\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}", "text": "    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.", "declaration": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int countUpper(String value) {\n", "example_test": "public class Main {\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Boolean> correct = Arrays.asList(\n                s.countUpper(\"10\") == 10,\n                s.countUpper(\"15.3\") == 15\n        );\n        if (correct.contains(false)) {\n            throw new AssertionError();\n        }\n    }\n}\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    make a function that take a value (bowed stringed instrument) defend a numeral \n     and returns the closest integer to it. If the number is equidistant \n     from two integer, round it away from zero. \n\n     Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        int num = 0;\n        int num2 = 0;\n        int num3 = 0;\n        int num4 = 0;\n        int num5 = 0;\n        int num6 = 0;\n        int num7 = 0;\n        int num8 = 0;\n        int num9 = 0;\n        int num10 = 0;\n        int num11 = 0;\n        int num12 = 0;\n        int num13 = 0;\n        int num14 = 0;\n        int num15 = 0;\n        int num16 = 0;\n        int num17 = 0;\n        int num18 = 0;\n        int num19 = 0;\n        int num20 = 0;\n        int num21 = 0;\n        int num22 = 0;\n        int num23 = 0;\n        int num24 = 0;\n        int num25 = 0;\n        int num26 = 0;\n        int num27 = 0;\n        int num28 = 0;\n        int num29 = 0;\n        int num30 = 0;\n        int num31 = 0;\n        int num32 = 0;\n        int num33 = 0;\n        int num34 = 0;\n        int num35 = 0;\n        int num36 = 0;\n        int num37 = 0;\n        int num38 = 0;\n        int num39 = 0;\n        int num40 = 0;\n        int num41 = 0;\n        int num42 = 0;\n        int num43 = 0;\n        int num44 = 0;\n        int num45 = 0;\n        int num46 = 0;\n        int num47 = 0;\n        int num48 = 0;\n        int num49 = 0;\n        int num50 = 0;\n        int num51 = 0;\n        int num52 = 0;\n        int num53 = 0;\n        int num54 = 0;\n        int num55 = 0;\n        int num56 = 0;\n        int num57 = 0;\n        int num58 = 0;\n        int num59 = 0;\n        int num60 = 0;\n        int num61 = 0;\n        int num62 = 0;\n        int num63 = 0;\n        int num64 = 0;\n        int num65 = 0;\n        int num66 = 0;\n        int num67 = 0;\n        int numワ = 0;\n        int num68 = 0;\n        int num69 = 0;\n        int num70 = 0;\n        int num71 = 0;\n        int num72 = 0;\n        int num73 = 0;\n        int num74 = 0;\n        int num75 = 0;\n        int num76 = 0;\n        int num77 = 0;\n        int num78 = 0;\n        int num79 = 0;\n        int num80 = 0;\n        int num81 = 0;\n        int num82 = 0;\n        int num83 = 0;\n        int num84 = 0;\n        int num85 = 0;\n        int num86 = 0;\n        int num87 = 0;\n        int num88 = 0;\n        int num89 = 0;\n        int num90 = 0;\n        int num91 = 0;\n        int num92 = 0;\n        int num93 = 0;\n        int num94 = 0;\n        int num95 = 0;\n        int num96 = 0;\n        int num97 = 0;\n        int num98 = 0;\n        int num99 = 0;\n        int num100 = 0;\n        int num101 = 0;\n        int num102 = 0;\n        int num103 = 0;\n        int num104 = 0;\n        int num105 = 0;\n        int num106 = 0;\n        int num107 = 0;\n        int num108 = 0;\n        int num109 = 0;\n        int num110 = 0;\n        int num111 = 0;\n        int num112 = 0;\n        int num113 = 0;\n        int num114 = 0;\n        int num115 = 0;\n        int num116 = 0;\n        int num117 = 0;\n        int num118 = 0;\n        int num119 = 0;\n        int num120 = 0;\n        int num121 = 0;\n        int num122 = 0;\n        int num123 = 0;\n        int num124 = 0;\n        int num125 = 0;\n        int num126 = 0;\n        int num127 = 0;\n        int num128 = 0;\n        int num129 = 0;\n        int num130 = 0;\n        int num131 = 0;\n        int num132 = 0;\n        int num133 = 0;\n        int num134 = 0;\n        int num135 = 0;\n        int num136 = 0;\n        int num137 = 0;\n        int num138 = 0;\n        int num139 = 0;\n        int num140 = 0;\n        int num141 = 0;\n        int num142 = reforming(value);\n        int num143 = 0;\n        int num144 = 0;\n        int num145 = 0;\n        int num146 = 0;\n        int num147 = 0;\n        int num148 = 0;\n        int num149 = 0;\n        int num150 = 0;\n        int num151 = 0;\n        int num152 = 0;\n        int num153 = 0;\n        int num154 = 0;\n        int num155 = 0;\n        int num156 = 0;\n        int num157 = 0;\n        int num158 = 0;\n        int num159 = 0;\n        int num160 = 0;\n        int num161 = 0;\n        int num162 = 0;\n        int num163 = 0;\n        int num164 = 0;\n        int num165 = 0;\n        int num166 = 0", "passed": 0}
