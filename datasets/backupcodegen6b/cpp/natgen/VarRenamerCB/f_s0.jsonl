{"task_id": "CPP/0", "prompt": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include <stdio.h>\n#include<vector>\n#include<math.h>\nusingnamespace std;\nbool has_close_elements(vector < float > numbers, float threshold) {\n    int i, i2;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (i = 0; i<numbers.size(); i++)\n    \n    for (i2 = i + 1; i2 < numbers.size(); i2++)\n    if (abs(numbers [ i ] - numbers [ i2 ]) < threshold)\n    return true;\n    \n    return false;\n    }\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (has_close_elements({1.0, 2.0, 3.0}, 0.5) == false && \"failure 1\");\n    assert (has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3) && \"failure 2\") ;\n}\n", "entry_point": "has_close_elements", "partial": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    int i,j;\n    \n    # print('@@this is the line to split##')\n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n", "gc": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include <stdio.h>\n#include<vector>\n#include<math.h>\nusingnamespace std;\nbool has_close_elements(vector < float > numbers, float threshold) {\n    int i, i2;\n   \n    for (i = 0; i < numbers.size() - 1; i++) {\n        for (i2 = i + 1; i2 < numbers.size(); i2++) {\n            if (fabs(numbers[i] - numbers[i2]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/1", "prompt": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > separate_paren_groups(string paren_string) {\n    vector < string > all_parens;\n    string current_paren;\n    int level = 0;\n    char p;\n    int i;\n    for (i = 0; i < paren_string.length(); i++)\n     {\n        p = paren_string [ i ];\n        if (p == ' ')\n         {\n           \n", "canonical_solution": "print(' @ this is the line to split ## ' level+=1;\n            current_paren+=p;\n            }\n        if (p == ' ')\n         {\n            level-=1;\n            current_paren+=p;\n            if (level == 0) {\n                all_parens.push_back(current_paren);\n                current_paren = \"\";\n                }\n            }\n        }\n    return all_parens;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}\n", "entry_point": "separate_paren_groups", "partial": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        # print('@@this is the line to split##')\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n", "gc": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > separate_paren_groups(string paren_string) {\n    vector < string > all_parens;\n    string current_paren;\n    int level = 0;\n    char p;\n    int i;\n    for (i = 0; i < paren_string.length(); i++)\n     {\n        p = paren_string [ i ];\n        if (p =='')\n         {\n           \n         }\n        else if (p == '(')\n         {\n            level++;\n            current_paren = \"\";\n         }\n        else if (p == ')')\n         {\n            level--;\n            if (level == 0)\n             {\n                all_parens.push_back(current_paren);\n                current_paren = \"\";\n             }\n            else\n             {\n                current_paren += p;\n             }\n         }\n        else\n         {\n            current_paren += p;\n         }\n     }\n    return all_parens;\n}\nint main()\n{\n    string paren_string = \"()()()\";\n    vector < string > all_parens = separate_paren_groups(paren_string);\n    for (int i = 0; i < all_parens.size(); i++)\n     {\n        cout << all_parens [ i ] << endl;\n     }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\nint i2;\nfor (i2 = 0; i2 < str.length(); i2++)\n {\n    string rstr = str.substr(i2);\n    if (is_palindrome(rstr))\n     {\n        string nstr;\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' nstr = str.substr(0, i2);\n        string n2str(nstr.rbegin(), nstr.rend());\n        return str + n2str;\n        }\n    }\nstring n2str(str.rbegin(), str.rend());\nreturn str + n2str;\n}", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"cat\") == \"catac\");\n     assert (make_palindrome(\"cata\") == \"catac\");\n}\n", "entry_point": "make_palindrome", "partial": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            # print('@@this is the line to split##')\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n", "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\nint i2;\nfor (i2 = 0; i2 < str.length(); i2++)\n {\n    string rstr = str.substr(i2);\n    if (is_palindrome(rstr))\n     {\n        string nstr;\n       \n        nstr = rstr;\n        nstr.append(str.substr(0,i2));\n        return nstr;\n     }\n }\nreturn str;\n}\nint main()\n{\n    string str;\n    while(cin>>str)\n    {\n        cout<<make_palindrome(str)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/100", "prompt": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > make_a_pile(int n) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' vector < int > n2 = {\n        n}\n    ;\n    for (int i = 1; i < n; i++)\n    n2.push_back(n2 [ n2.size() - 1 ] + 2);\n    return n2;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n}\n", "entry_point": "make_a_pile", "partial": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    # print('@@this is the line to split##')\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n", "gc": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > make_a_pile(int n) {\n   \n    vector<int> pile;\n    int i = 0;\n    while(i < n) {\n        if(i % 2 == 0) {\n            pile.push_back(i);\n            i++;\n        }\n        else {\n            pile.push_back(i+1);\n            i++;\n        }\n    }\n    return pile;\n}\nint main() {\n    int n;\n    printf(\"Enter the number of stones in the pile: \");\n    scanf(\"%d\", &n);\n    vector < int > pile = make_a_pile(n);\n    for(int i = 0; i < pile.size(); i++) {\n        printf(\"%d \", pile[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/101", "prompt": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > words_string(string current2) {\n    string current = \"\";\n    vector < string > out = {\n        }\n    ;\n    current2 = current2 + ' ';\n    for (int i = 0; i < current2.length(); i++)\n    if (current2 [ i ] == ' ' or current2 [ i ] == ' ')\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (current.length() > 0)\n         {\n            out.push_back(current);\n            current = \"\";\n            }\n        }\n    else current = current + current2 [ i ];\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n}\n", "entry_point": "words_string", "partial": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     # print('@@this is the line to split##')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n", "gc": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\",'six\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > words_string(string current2) {\n    string current = \"\";\n    vector < string > out = {\n        }\n    ;\n    current2 = current2 +'';\n    for (int i = 0; i < current2.length(); i++)\n    if (current2 [ i ] =='' or current2 [ i ] =='')\n   \n    {\n        current = current +'';\n        out.push_back(current);\n        current = \"\";\n    }\n    else\n    {\n        current = current + current2 [ i ];\n    }\n    return out;\n}\nint main() {\n    string current2;\n    getline(cin, current2);\n    vector < string > out = words_string(current2);\n    for (int i = 0; i < out.size(); i++)\n    {\n        cout << out [ i ] << endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/102", "prompt": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include <stdio.h>\nusingnamespace std;\nint choose_num(int x, int ma) {\n    if (ma < x) return -1;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (ma == x and ma % 2 == 1) return - 1;\n    if (ma % 2 == 1) return ma - 1;\n    return ma;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n}\n", "entry_point": "choose_num", "partial": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    if (y<x) return -1;\n    # print('@@this is the line to split##')\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n", "gc": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include <stdio.h>\nusingnamespace std;\nint choose_num(int x, int ma) {\n    if (ma < x) return -1;\n   \n    int i = x;\n    int j = ma;\n    int k = 0;\n    while (i < j) {\n        k = i + (j - i) / 2;\n        if (k % 2 == 0) {\n            i = k;\n        } else {\n            j = k;\n        }\n    }\n    return k;\n}\nint main() {\n    int x, y;\n    printf(\"Enter two positive numbers: \");\n    scanf(\"%d %d\", &x, &y);\n    printf(\"The biggest even number in the range [%d, %d] is %d\\n\", x, y, choose_num(x, y));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/103", "prompt": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include <stdio.h>\n#include<math.h>\n#include<string>\nusingnamespace std;\nstring rounded_avg(int n, int m) {\n    if (n > m) return \"-1\";\n    int out2 =(m + n) / 2;\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string out = \"\";\n    while (out2 > 0)\n     {\n        out = to_string(out2 % 2) + out;\n        out2 = out2 / 2;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(10,20) == \"1111\");\n    assert (rounded_avg(20,33) == \"11010\");\n}\n", "entry_point": "rounded_avg", "partial": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    # print('@@this is the line to split##')\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n", "gc": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include <stdio.h>\n#include<math.h>\n#include<string>\nusingnamespace std;\nstring rounded_avg(int n, int m) {\n    if (n > m) return \"-1\";\n    int out2 =(m + n) / 2;\n   \n    int out1 = (int)floor(out2);\n    return to_string(out1);\n}\nint main()\n{\n    int n, m;\n    printf(\"Enter the first number: \");\n    scanf(\"%d\", &n);\n    printf(\"Enter the second number: \");\n    scanf(\"%d\", &m);\n    printf(\"The rounded average is %s\\n\", rounded_avg(n, m).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/104", "prompt": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > unique_digits(vector < int > x) {\n    vector < int > out = {\n        }\n    ;\n    for (int i = 0; i < x.size(); i++)\n     {\n        int u2 = x [ i ];\n        bool u = true;\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (u2 == 0) u = false;\n        while (u2 > 0 and u)\n         {\n            if (u2 % 2 == 0) u = false;\n            u2 = u2 / 10;\n            }\n        if (u) out.push_back(x [ i ]);\n        }\n    sort(out.begin(), out.end());\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n}\n", "entry_point": "unique_digits", "partial": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            # print('@@this is the line to split##')\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "gc": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > unique_digits(vector < int > x) {\n    vector < int > out = {\n        }\n    ;\n    for (int i = 0; i < x.size(); i++)\n     {\n        int u2 = x [ i ];\n        bool u = true;\n       \n        for (int j = 0; j < out.size(); j++)\n        {\n            if (out [ j ] == u2)\n            {\n                u = false;\n                break;\n            }\n        }\n        if (u)\n        {\n            out.push_back(u2);\n        }\n    }\n    return out;\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > x;\n    for (int i = 0; i < n; i++)\n    {\n        int x;\n        scanf(\"%d\", &x);\n        x = x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        x = x * 10 + x % 10;\n        ", "passed": 0}
{"task_id": "CPP/105", "prompt": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusingnamespace std;\nvector < string > by_length(vector < int > out2) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' map < int, string > numto = {\n         {\n            0, \"Zero\"}\n        , {\n            1, \"One\"}\n        , {\n            2, \"Two\"}\n        , {\n            3, \"Three\"}\n        , {\n            4, \"Four\"}\n        , {\n            5, \"Five\"}\n        , {\n            6, \"Six\"}\n        , {\n            7, \"Seven\"}\n        , {\n            8, \"Eight\"}\n        , {\n            9, \"Nine\"}\n        }\n    ;\n    sort(out2.begin(), out2.end());\n    vector < string > out = {\n        }\n    ;\n    for (int i = out2.size() - 1; i >= 0; i-=1)\n    if (out2 [ i ] >= 1 and out2 [ i ] <= 9)\n    out.push_back(numto [ out2 [ i ] ]);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n}\n", "entry_point": "by_length", "partial": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    # print('@@this is the line to split##')\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n", "gc": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1, 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusingnamespace std;\nvector < string > by_length(vector < int > out2) {\n   \n    vector < string > out;\n    map < int, string > m;\n    for (int i = 0; i < out2.size(); i++) {\n        m[out2[i]] = \"\";\n    }\n    for (int i = 0; i < out2.size(); i++) {\n        m[out2[i]] += \" \";\n    }\n    for (map < int, string >::iterator it = m.begin(); it!= m.end(); it++) {\n        out.push_back(it->second);\n    }\n    return out;\n}\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > out(n);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &out[i]);\n    }\n    vector < string > out2 = by_length(out);\n    for (int i = 0; i < out2.size(); i++) {\n        printf(\"%s\\n\", out2[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/106", "prompt": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > f(int n) {\n    int sum = 0, prod = 1;\n    vector < int > out = {\n        }\n    ;\n    for (int c = 1; c <= n; c++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        sum+=c;\n        prod *= c;\n        if (c % 2 == 0) out.push_back(prod);\n        else out.push_back(sum);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n}\n", "entry_point": "f", "partial": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    # print('@@this is the line to split##')\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n", "gc": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > f(int n) {\n    int sum = 0, prod = 1;\n    vector < int > out = {\n        }\n    ;\n    for (int c = 1; c <= n; c++)\n   \n    {\n        sum += prod;\n        prod *= c;\n    }\n    return out;\n}\n\nint main() {\n    int n;\n    printf(\"Enter the number of elements in the vector: \");\n    scanf(\"%d\", &n);\n    vector < int > out = f(n);\n    for (int i = 0; i < n; i++)\n        printf(\"%d \", out[i]);\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/107", "prompt": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < int > even_odd_palindrome(int n) {\n    int num1 = 0, num2 = 0;\n    for (int w2 = 1; w2 <= n; w2++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' string w = to_string(w2);\n        string p(w.rbegin(), w.rend());\n        if (w == p and w2 % 2 == 1) num1+=1;\n        if (w == p and w2 % 2 == 0) num2+=1;\n        }\n    return {\n        num2, num1}\n    ;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n}\n", "entry_point": "even_odd_palindrome", "partial": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        # print('@@this is the line to split##')\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n", "gc": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < int > even_odd_palindrome(int n) {\n    int num1 = 0, num2 = 0;\n    for (int w2 = 1; w2 <= n; w2++)\n     {\n       \n       for (int w1 = 1; w1 <= n; w1++)\n       {\n         if (w1 % 2 == 0 && w2 % 2 == 0)\n         {\n           num1++;\n         }\n         else if (w1 % 2 == 1 && w2 % 2 == 1)\n         {\n           num2++;\n         }\n       }\n     }\n    vector < int > ans;\n    ans.push_back(num1);\n    ans.push_back(num2);\n    return ans;\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > ans = even_odd_palindrome(n);\n    for (int i = 0; i < ans.size(); i++)\n    {\n        printf(\"%d \", ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/108", "prompt": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nint count_nums(vector < int > n) {\n    int num = 0;\n    for (int i = 0; i < n.size(); i++)\n    if (n [ i ] > 0) num+=1;\n    else\n     {\n        int sum = 0;\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' int n2;\n        n2 = abs(n [ i ]);\n        while (n2 >= 10)\n         {\n            sum+=n2 % 10;\n            n2 = n2 / 10;\n            }\n        sum-=n2;\n        if (sum > 0) num+=1;\n        }\n    return num;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, 11, -11}) == 1);\n    assert (count_nums({1, 1, 2}) == 3);\n}\n", "entry_point": "count_nums", "partial": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            # print('@@this is the line to split##')\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n", "gc": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nint count_nums(vector < int > n) {\n    int num = 0;\n    for (int i = 0; i < n.size(); i++)\n    if (n [ i ] > 0) num+=1;\n    else\n     {\n        int sum = 0;\n       \n        while (n [ i ] < 0)\n        {\n            sum = sum + n [ i ] % 10;\n            n [ i ] = n [ i ] / 10;\n        }\n        num = num - sum;\n    }\n    return num;\n}\nint main()\n{\n    vector < int > n;\n    int num = 0;\n    while (scanf(\"%d\", &n [ num ])!= EOF)\n    {\n        num++;\n    }\n    printf(\"%d\\n\", count_nums(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/109", "prompt": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nbool move_one_ball(vector < int > vector) {\n    int num = 0;\n    if (vector.size() == 0) return true;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i =1;i<arr.size(); i++)\n    if (vector [ i ] < vector [ i - 1 ]) num+=1;\n    if (vector [ vector.size() - 1 ] > vector [ 0 ]) num+=1;\n    if (num < 2) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n}\n", "entry_point": "move_one_ball", "partial": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    int num=0;\n    if (arr.size()==0) return true;\n    # print('@@this is the line to split##')\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n", "gc": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2],..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nbool move_one_ball(vector < int > vector) {\n    int num = 0;\n    if (vector.size() == 0) return true;\n   \n    for (int i = 0; i < vector.size(); i++) {\n        num = vector[i];\n        for (int j = i; j < vector.size() - 1; j++) {\n            vector[j] = vector[j + 1];\n        }\n        vector[vector.size() - 1] = num;\n    }\n    return true;\n}\n\nint main() {\n    int t;\n    scanf(\"%d\", &t);\n    while (t--) {\n        int n;\n        scanf(\"%d\", &n);\n        vector < int > vector;\n        for (int i = 0; i < n; i++) {\n            int num;\n            scanf(\"%d\", &num);\n            vector.push_back(num);\n        }\n        if (move_one_ball(vector)) {\n            printf(\"YES\\n\");\n        } else {\n            printf(\"NO\\n\");\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/11", "prompt": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring string_xor(string a, string b) {\n    string output = \"\";\n    for (int i2 = 0;(i2 < a.length() and i2 < b.length()); i2++)\n     {\n        if (i2 < a.length() and i2 < b.length())\n         {\n            if (a [ i2 ] == b [ i2 ]) {\n                output+=' ';\n                }\n           \n", "canonical_solution": "print(' @ this is the line to split ## ' else output+=' ';\n            }\n        else\n         {\n            if (i2 >= a.length()) {\n                output+=b [ i2 ];\n                }\n            else output+=a [ i2 ];\n            }\n        }\n    return output;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"010\", \"110\") == \"100\");\n}\n", "entry_point": "string_xor", "partial": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            # print('@@this is the line to split##')\n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n", "gc": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring string_xor(string a, string b) {\n    string output = \"\";\n    for (int i2 = 0;(i2 < a.length() and i2 < b.length()); i2++)\n     {\n        if (i2 < a.length() and i2 < b.length())\n         {\n            if (a [ i2 ] == b [ i2 ]) {\n                output+=' ';\n                }\n           \n            else {\n                output+=a[i2];\n                }\n            }\n        else {\n            if (i2 < a.length()) {\n                output+=a[i2];\n                }\n            else {\n                output+=b[i2];\n                }\n            }\n        }\n    return output;\n    }\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/110", "prompt": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nstring exchange(vector < int > lst1, vector < int > lst2) {\n    int num = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int num2 =0;i<lst1.size(); num2++)\n    if (lst1 [ num2 ] % 2 == 0) num+=1;\n    for (int num2 = 0; num2 < lst2.size(); num2++)\n    if (lst2 [ num2 ] % 2 == 0) num+=1;\n    if (num >= lst1.size()) return \"YES\";\n    return \"NO\";\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n}\n", "entry_point": "exchange", "partial": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int num=0;\n    # print('@@this is the line to split##')\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n", "gc": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nstring exchange(vector < int > lst1, vector < int > lst2) {\n    int num = 0;\n   \n    for(int i = 0; i < lst1.size(); i++) {\n        num = lst1[i];\n        if(num % 2 == 0) {\n            lst1[i] = lst2[i];\n        }\n    }\n    if(lst1.size() == lst2.size()) {\n        return \"YES\";\n    }\n    else {\n        return \"NO\";\n    }\n}\nint main() {\n    int n, m;\n    vector < int > lst1, lst2;\n    while(scanf(\"%d %d\", &n, &m)!= EOF) {\n        lst1.clear();\n        lst2.clear();\n        for(int i = 0; i < n; i++) {\n            int num;\n            scanf(\"%d\", &num);\n            lst1.push_back(num);\n        }\n        for(int i = 0; i < m; i++) {\n            int num;\n            scanf(\"%d\", &num);\n            lst2.push_back(num);\n        }\n        string ans = exchange(lst1, lst2);\n        if(ans == \"YES\") {\n            printf(\"%d\\n\", n);\n        }\n        else {\n            printf(\"%d\\n\", m);\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/111", "prompt": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include <stdio.h>\n#include<string>\n#include<map>\nusingnamespace std;\nmap < char, int > histogram(string test) {\n    map < char, int > count = {\n        }\n    , out = {\n        }\n    ;\n    map < char, int > :: iterator it;\n    int max = 0;\n    for (int i2 = 0; i2 < test.length(); i2++)\n    if (test [ i2 ] != ' ')\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' count [ test [ i2 ] ]+=1;\n        if (count [ test [ i2 ] ] > max) max = count [ test [ i2 ] ];\n        }\n    for (it = count.begin(); it != count.end(); it++)\n     {\n        char w1 = it -> first;\n        int w2 = it -> second;\n        if (w2 == max) out [ w1 ] = w2;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c\") , {{'a', 1},{'b', 1},{'c', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"\") , {}));\n}\n", "entry_point": "histogram", "partial": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            # print('@@this is the line to split##')\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n", "gc": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include <stdio.h>\n#include<string>\n#include<map>\nusingnamespace std;\nmap < char, int > histogram(string test) {\n    map < char, int > count = {\n        }\n   , out = {\n        }\n    ;\n    map < char, int > :: iterator it;\n    int max = 0;\n    for (int i2 = 0; i2 < test.length(); i2++)\n    if (test [ i2 ]!='')\n     {\n       \n        it = histogram.find(test [ i2 ]);\n        if (it!= histogram.end())\n        {\n            it -> second++;\n        }\n        else\n        {\n            histogram.insert(pair < char, int > (test [ i2 ], 1));\n        }\n        if (it -> second > max)\n        {\n            max = it -> second;\n        }\n    }\n    for (it = histogram.begin(); it!= histogram.end(); it++)\n    {\n        out.insert(pair < char, int > (it -> first, it -> second / max));\n    }\n    return out;\n}\nint main()\n{\n    string test;\n    cin >> test;\n    map < char, int > histogram = histogram(test);\n    for (auto it = histogram.begin(); it!= histogram.end(); it++)\n    {\n        cout << it -> first << \" \" << it -> second << endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/112", "prompt": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nvector < string > reverse_delete(string s, string c) {\n    string In = \"\";\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i =0;i<s.length(); i++)\n    if (find(c.begin(), c.end(), s [ i ]) == c.end())\n    In = In + s [ i ];\nif (In.length() == 0) return {\n        In, \"True\"}\n    ;\n    string w(In.rbegin(), In.rend());\n    if (w == In) return {\n        In, \"True\"}\n    ;\n    return {\n        In, \"False\"}\n    ;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n}\n", "entry_point": "reverse_delete", "partial": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    # print('@@this is the line to split##')\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n", "gc": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nvector < string > reverse_delete(string s, string c) {\n    string In = \"\";\n   \n    for(int i = 0; i < s.length(); i++) {\n        if(s[i]!= c[0]) {\n            In += s[i];\n        }\n    }\n    \n    return {In, \"False\"};\n}\n\nint main() {\n    string s, c;\n    cin >> s >> c;\n    vector < string > result = reverse_delete(s, c);\n    cout << result[0] << endl;\n    cout << result[1] << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/113", "prompt": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusingnamespace std;\nvector < string > odd_count(vector < string > lst) {\n    vector < string > out = {\n        }\n    ;\n    for (int i = 0; i < lst.size(); i++)\n     {\n        int sum = 0;\n        for (int i2 = 0; i2 < lst [ i ].length(); i2++)\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (lst [ i ] [ i2 ] >= 48 and lst [ i ] [ i2 ] <= 57 and lst [ i ] [ i2 ] % 2 == 1)\n        sum+=1;\n        string s = \"the number of odd elements in the string i of the input.\";\n        string s2 = \"\";\n        for (int i2 = 0; i2 < s.length(); i2++)\n        if (s [ i2 ] == ' ') s2 = s2 + to_string(sum);\n        else s2 = s2 + s [ i2 ];\n        out.push_back(s2);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n}\n", "entry_point": "odd_count", "partial": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                # print('@@this is the line to split##')\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n", "gc": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusingnamespace std;\nvector < string > odd_count(vector < string > lst) {\n    vector < string > out = {\n        }\n    ;\n    for (int i = 0; i < lst.size(); i++)\n     {\n        int sum = 0;\n        for (int i2 = 0; i2 < lst [ i ].length(); i2++)\n       \n        {\n            if (lst [ i ][ i2 ] == '1')\n            {\n                sum++;\n            }\n        }\n        out.push_back(to_string(sum));\n    }\n    return out;\n}\nint main()\n{\n    vector < string > lst = {\n        \"3\",\n        \"11111111\"\n    };\n    vector < string > out = odd_count(lst);\n    for (int i = 0; i < out.size(); i++)\n    {\n        printf(\"%s\\n\", out[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/114", "prompt": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nlong long minSubArraySum(vector < long long > nums) {\n    long long min2, min;\n    min2 = nums [ 0 ];\n    min = nums [ 0 ];\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i =1;i<nums.size(); i++)\n     {\n        if (min2 < 0) min2 = min2 + nums [ i ];\n        else min2 = nums [ i ];\n        if (min2 < min) min = min2;\n        }\n    return min;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n}\n", "entry_point": "minSubArraySum", "partial": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    # print('@@this is the line to split##')\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n", "gc": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nlong long minSubArraySum(vector < long long > nums) {\n    long long min2, min;\n    min2 = nums [ 0 ];\n    min = nums [ 0 ];\n   \n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] < min2) {\n            min2 = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return min;\n}\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector < long long > nums;\n    for (int i = 0; i < n; i++) {\n        long long num;\n        scanf(\"%lld\", &num);\n        nums.push_back(num);\n    }\n    printf(\"%lld\\n\", minSubArraySum(nums));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/115", "prompt": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint max_fill(vector < vector < int > > grid, int capacity) {\n    int out = 0;\n    for (int f = 0; f < grid.size(); f++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' int sum = 0;\n        for (int j = 0; j < grid [ f ].size(); j++)\n        sum+=grid [ f ] [ j ];\n        if (sum > 0) out+=(sum - 1) / capacity + 1;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n}\n", "entry_point": "max_fill", "partial": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        # print('@@this is the line to split##')\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n", "gc": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint max_fill(vector < vector < int > > grid, int capacity) {\n    int out = 0;\n    for (int f = 0; f < grid.size(); f++)\n     {\n       \n        for (int i = 0; i < grid[f].size(); i++)\n        {\n            if (grid[f][i] == 1)\n            {\n                out++;\n                grid[f][i] = 0;\n            }\n        }\n    }\n    return out;\n}\nint main()\n{\n    int t;\n    scanf(\"%d\", &t);\n    while(t--)\n    {\n        int n, m;\n        scanf(\"%d %d\", &n, &m);\n        vector < vector < int > > grid(n, vector<int>(m, 0));\n        for(int i = 0; i < n; i++)\n        {\n            for(int j = 0; j < m; j++)\n            {\n                scanf(\"%d\", &grid[i][j]);\n            }\n        }\n        int capacity = 0;\n        scanf(\"%d\", &capacity);\n        int out = max_fill(grid, capacity);\n        printf(\"%d\\n\", out);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/116", "prompt": "/*\nIn this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > sort_array(vector < int > arr) {\n    vector < int > bin = {\n        }\n    ;\n    int m;\n    \n    for (int i = 0; i < arr.size(); i++)\n     {\n        int b = 0, n = abs(arr [ i ]);\n        while (n > 0)\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n            b+=n % 2; n = n / 2;\n            }\n        bin.push_back(b);\n        }\n    for (int i = 0; i < arr.size(); i++)\n    for (int i2 = 1; i2 < arr.size(); i2++)\n    if (bin [ i2 ] < bin [ i2 - 1 ] or(bin [ i2 ] == bin [ i2 - 1 ] and arr [ i2 ] < arr [ i2 - 1 ]))\n     {\n        m = arr [ i2 ]; arr [ i2 ] = arr [ i2 - 1 ]; arr [ i2 - 1 ] = m;\n        m = bin [ i2 ]; bin [ i2 ] = bin [ i2 - 1 ]; bin [ i2 - 1 ] = m;\n        }\n    return arr;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n}\n", "entry_point": "sort_array", "partial": "/*\nIn this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        # print('@@this is the line to split##')\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n", "gc": "/*\nIn this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > sort_array(vector < int > arr) {\n    vector < int > bin = {\n        }\n    ;\n    int m;\n    \n    for (int i = 0; i < arr.size(); i++)\n     {\n        int b = 0, n = abs(arr [ i ]);\n        while (n > 0)\n       \n        {\n            b = b + (n & 1);\n            n = n >> 1;\n        }\n        bin.push_back(b);\n    }\n    return bin;\n}\nint main()\n{\n    int arr[] = {1, 5, 2, 3, 4};\n    vector < int > bin = sort_array(arr);\n    for (int i = 0; i < bin.size(); i++)\n        printf(\"%d \", bin[i]);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/117", "prompt": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nvector < string > select_words(string by, int n) {\n    string vowels = \"aeiouAEIOU\";\n    string current = \"\";\n    vector < string > out = {\n        }\n    ;\n    int numc = 0;\n    by = by + ' ';\n    for (int i = 0; i < by.length(); i++)\n    if (by [ i ] == ' ')\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (numc == n) out.push_back(current);\n        current = \"\";\n        numc = 0;\n        }\n    else\n     {\n        current = current + by [ i ];\n        if ((by [ i ] >= 65 and by [ i ] <= 90) or(by [ i ] >= 97 and by [ i ] <= 122))\n        if (find(vowels.begin(), vowels.end(), by [ i ]) == vowels.end())\n        numc+=1;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n}\n", "entry_point": "select_words", "partial": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        # print('@@this is the line to split##')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n", "gc": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nvector < string > select_words(string by, int n) {\n    string vowels = \"aeiouAEIOU\";\n    string current = \"\";\n    vector < string > out = {\n        }\n    ;\n    int numc = 0;\n    by = by +'';\n    for (int i = 0; i < by.length(); i++)\n    if (by [ i ] =='')\n   \n    {\n        if (numc == n)\n        {\n            out.push_back(current);\n            current = \"\";\n            numc = 0;\n        }\n        else\n        {\n            current += by [ i ];\n            numc++;\n        }\n    }\n    else\n    {\n        if (numc == n)\n        {\n            out.push_back(current);\n            current = \"\";\n            numc = 0;\n        }\n        else\n        {\n            current += by [ i ];\n            numc++;\n        }\n    }\n    return out;\n}\nint main()\n{\n    string by = \"Mary had a little lamb\";\n    int n = 4;\n    vector < string > out = select_words(by, n);\n    for (int i = 0; i < out.size(); i++)\n    {\n        printf(\"%s\\n\", out [ i ].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/118", "prompt": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nstring get_closest_vowel(string word) {\n    string out = \"\";\n    string word2 = \"AEIOUaeiou\";\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i = word.length() - 2; i >= 1; i-=1)\n    if (find(word2.begin(), word2.end(), word [ i ]) != word2.end())\n    if (find(word2.begin(), word2.end(), word [ i + 1 ]) == word2.end())\n    if (find(word2.begin(), word2.end(), word [ i - 1 ]) == word2.end())\n    return out + word [ i ];\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"FULL\") == \"U\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n}\n", "entry_point": "get_closest_vowel", "partial": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    # print('@@this is the line to split##')\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n", "gc": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nstring get_closest_vowel(string word) {\n    string out = \"\";\n    string word2 = \"AEIOUaeiou\";\n   \n    for(int i = word.length()-1; i >= 0; i--) {\n        if(word2.find(word[i])!= string::npos) {\n            out = word[i];\n            break;\n        }\n    }\n    return out;\n}\nint main() {\n    string word;\n    getline(cin, word);\n    cout << get_closest_vowel(word);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/119", "prompt": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nstring match_parens(vector < string > lst) {\n    string l1 = lst [ 0 ] + lst [ 1 ];\n    int\nif, count = 0;\n    bool can = true;\n    for (\nif = 0;\nif < l1.length();\nif++)\n     {\n        if (l1 [\nif ] == ' ') count+=1;\n        if (l1 [\nif ] == ' ') count-=1;\n        if (count < 0) can = false;\n       \n", "canonical_solution": "print(' @ this is the line to split ## '}\n    if (count != 0) return \"No\";\n    if (can == true) return \"Yes\";\n    l1 = lst [ 1 ] + lst [ 0 ];\n    can = true;\n    for (\nif = 0;\nif < l1.length();\nif++)\n     {\n        if (l1 [\nif ] == ' ') count+=1;\n        if (l1 [\nif ] == ' ') count-=1;\n        if (count < 0) can = false;\n        }\n    if (can == true) return \"Yes\";\n    return \"No\";\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n}\n", "entry_point": "match_parens", "partial": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n            # print('@@this is the line to split##')\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n", "gc": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nstring match_parens(vector < string > lst) {\n    string l1 = lst [ 0 ] + lst [ 1 ];\n    int\nif, count = 0;\n    bool can = true;\n    for (\nif = 0;\nif < l1.length();\nif++)\n     {\n        if (l1 [\nif ] =='') count+=1;\n        if (l1 [\nif ] =='') count-=1;\n        if (count < 0) can = false;\n       \n     }\n    return can? \"Yes\" : \"No\";\n}\nint main()\n{\n    vector < string > lst;\n    lst.push_back( \"()\" );\n    lst.push_back( \")\" );\n    cout << match_parens( lst );\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/12", "prompt": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nstring longest(vector < string > strings) {\n    string out;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i2 = 0; i<strings.size(); i2++)\n    \n     {\n        if (strings [ i2 ].length() > out.length()) out = strings [ i2 ];\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"a\", \"b\", \"c\"}) == \"a\");\n    assert (longest({\"a\", \"bb\", \"ccc\"}) == \"ccc\");\n}\n", "entry_point": "longest", "partial": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    string out;\n    # print('@@this is the line to split##')\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n", "gc": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nstring longest(vector < string > strings) {\n    string out;\n   \n    for(int i = 0; i < strings.size(); i++) {\n        if(strings[i].size() > out.size()) {\n            out = strings[i];\n        }\n    }\n    return out;\n}\nint main() {\n    vector < string > strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"bb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"ddd\");\n    strings.push_back(\"eee\");\n    strings.push_back(\"fff\");\n    strings.push_back(\"ggg\");\n    strings.push_back(\"hhh\");\n    strings.push_back(\"iii\");\n    strings.push_back(\"jjj\");\n    strings.push_back(\"kkk\");\n    strings.push_back(\"lll\");\n    strings.push_back(\"mmm\");\n    strings.push_back(\"nnn\");\n    strings.push_back(\"ooo\");\n    strings.push_back(\"ppp\");\n    strings.push_back(\"qqq\");\n    strings.push_back(\"rrr\");\n    strings.push_back(\"sss\");\n    strings.push_back(\"ttt\");\n    strings.push_back(\"uuu\");\n    strings.push_back(\"vvv\");\n    strings.push_back(\"www\");\n    strings.push_back(\"xxx\");\n    strings.push_back(\"yyy\");\n    strings.push_back(\"zzz\");\n    strings.push_back(\"aaa\");\n    strings.push_back(\"bbb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"ddd\");\n    strings.push_back(\"eee\");\n    strings.push_back(\"fff\");\n    strings.push_back(\"ggg\");\n    strings.push_back(\"hhh\");\n    strings.push_back(\"iii\");\n    strings.push_back(\"jjj\");\n    strings.push_back(\"kkk\");\n    strings.push_back(\"lll\");\n    strings.push_back(\"mmm\");\n    strings.push_back(\"nnn\");\n    strings.push_back(\"ooo\");\n    strings.push_back(\"ppp\");\n    strings.push_back(\"qqq\");\n    strings.push_back(\"rrr\");\n    strings.push_back(\"sss\");\n    strings.push_back(\"ttt\");\n    strings.push_back(\"uuu\");\n    strings.push_back(\"vvv\");\n    strings.push_back(\"www\");\n    strings.push_back(\"xxx\");\n    strings.push_back(\"yyy\");\n    strings.push_back(\"zzz\");\n    strings.push_back(\"aaa\");\n    strings.push_back(\"bbb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"ddd\");\n    strings.push_back(\"eee\");\n    strings.push_back(\"fff\");\n    strings.push_back(\"ggg\");\n    strings.push_back(\"hhh\");\n    strings.push_back(\"iii\");\n    strings.push_back(\"jjj\");\n    strings.push_back(\"kkk\");\n    strings.push_back(\"lll\");\n    strings.push_back(\"mmm\");\n    strings.push_back(\"nnn\");\n    strings.push_back(\"ooo\");\n    strings.push_back(\"ppp\");\n    strings.push_back(\"qqq\");\n    strings.push_back(\"rrr\");\n    strings.push_back(\"sss\");\n    strings.push_back(\"ttt\");\n    strings.push_back(\"uuu\");\n    strings.push_back(\"vvv\");\n    strings.push_back(\"www\");\n    strings.push_back(\"xxx\");\n    strings.push_back(\"yyy\");\n    strings.push_back(\"zzz\");\n    strings.push_back(\"aaa\");\n    strings.push_back(\"bbb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"ddd\");\n    strings.push_back(\"eee\");\n    strings.push_back(\"fff\");\n    strings.push_back(\"ggg\");\n    strings.push_back(\"hhh\");\n    strings.push_back(\"iii\");\n    strings.push_back(\"jjj\");\n    strings.push_back(\"kkk\");\n    strings.push_back(\"lll\");\n    strings.push_back(\"mmm\");\n    strings.push_back(\"nnn\");\n    strings.push_back(\"ooo\");\n    strings.push_back(\"ppp\");\n    strings.push_back(\"qqq\");\n    strings.push_back(\"rrr\");\n    strings.push_back(\"sss\");\n    strings.push_back(\"ttt\");\n    strings.push_back(\"uuu\");\n    strings.push_back(\"vvv\");\n    strings.push_back(\"www\");\n    strings.push_back(\"xxx\");\n    strings.push_back(\"yyy\");\n    strings.push_back(\"zzz\");\n    strings.push_back(\"aaa\");\n    strings.push_back(\"bbb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"ddd\");\n    strings.push_back(\"eee\");\n    strings.push_back(\"fff\");\n    strings.push_back(\"ggg\");\n    strings.push_back(\"hhh\");\n    strings.push_back(\"iii\");\n    strings.push_back(\"jjj\");\n    strings.push_back(\"kkk\");\n    strings.push_back(\"lll\");\n    strings.push_back(\"mmm\");\n    strings.push_back(\"nnn\");\n    strings.push_back(\"ooo\");\n    strings.push_back(\"ppp\");\n    strings.push_back(\"qqq\");\n    strings.push_back(\"rrr\");\n    strings.push_back(\"sss\");\n    strings.push_back(\"ttt\");\n    strings.push_back(\"uuu\");\n    strings", "passed": 0}
{"task_id": "CPP/120", "prompt": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\n", "canonical_solution": "print(' @ this is the line to split ## ' vector < int > maximum(vector < int > v, int k) {\n    sort(v.begin(), v.end());\n    vector < int > out(v.end() - k, v.end());\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n}\n", "entry_point": "maximum", "partial": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n# print('@@this is the line to split##')\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n", "gc": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\n\nclass Solution {\npublic:\n    vector<int> maxSlidingWindow(vector<int>& nums, int k) {\n        vector<int> res;\n        int i = 0;\n        while (i < nums.size()) {\n            int j = i;\n            int max = nums[i];\n            while (j < nums.size() && j - i < k) {\n                if (max < nums[j]) {\n                    max = nums[j];\n                }\n                j++;\n            }\n            res.push_back(max);\n            i = j;\n        }\n        return res;\n    }\n};\n\nint main() {\n    Solution s;\n    vector<int> nums = {-3, -4, 5};\n    vector<int> res = s.maxSlidingWindow(nums, 3);\n    for (auto i : res) {\n        printf(\"%d \", i);\n    }\n    printf(\"\\n\");\n    return 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/121", "prompt": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint solutions(vector < int > lst) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' int sum = 0;\n    for (int i2 = 0; i2 * 2 < lst.size(); i2++)\n    if (lst [ i2 * 2 ] % 2 == 1) sum+=lst [ i2 * 2 ];\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n    assert (solutions({5, 9}) == 5);\n    assert (solutions({2, 4, 8}) == 0);\n    assert (solutions({30, 13, 23, 32}) == 23);\n    assert (solutions({3, 13, 2, 9}) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n}\n", "entry_point": "solutions", "partial": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n    # print('@@this is the line to split##')\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n", "gc": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint solutions(vector < int > lst) {\n   \n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > lst;\n    for(int i = 0; i < n; i++) {\n        int x;\n        scanf(\"%d\", &x);\n        lst.push_back(x);\n    }\n    printf(\"%d\", solutions(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/122", "prompt": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint add_elements(vector < int > arr, int k) {\n    int sum = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int nt = 0; nt < k; nt++)\n    if (arr [ nt ] > = -99 and arr [ nt ] <= 99)\n    sum+=arr [ nt ];\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n}\n", "entry_point": "add_elements", "partial": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    # print('@@this is the line to split##')\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n", "gc": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint add_elements(vector < int > arr, int k) {\n    int sum = 0;\n   \n    for(int i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > arr(n);\n    for(int i = 0; i < n; i++) {\n        scanf(\"%d\", &arr[i]);\n    }\n    int k;\n    scanf(\"%d\", &k);\n    int sum = add_elements(arr, k);\n    printf(\"%d\", sum);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/123", "prompt": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > get_odd_collatz(int In) {\n    vector < int > out = {\n        1}\n    ;\n    while (In != 1)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (In % 2 == 1) {\n            out.push_back(In); In = In * 3 + 1;}\n        else In = In / 2;\n        }\n    sort(out.begin(), out.end());\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n}\n", "entry_point": "get_odd_collatz", "partial": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> out={1};\n    while (n!=1)\n    # print('@@this is the line to split##')\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "gc": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > get_odd_collatz(int In) {\n    vector < int > out = {\n        1}\n    ;\n    while (In!= 1)\n   \n    {\n        if (In % 2 == 0)\n        {\n            In /= 2;\n        }\n        else\n        {\n            In = 3 * In + 1;\n        }\n        out.push_back(In);\n    }\n    return out;\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > odd = get_odd_collatz(n);\n    for (int i = 0; i < odd.size(); i++)\n    {\n        printf(\"%d \", odd[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/124", "prompt": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool valid_date(string date) {\n    int dd2, dd, yy, i;\n    if (date.length() != 10) return false;\n    for (int i = 0; i < 10; i++)\n    if (i == 2 or i == 5)\n     {\n        if (date [ i ] != ' ') return false;\n        }\n    else\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (date [ i ] < 48 or date [ i ] > 57) return false;\n    \n    dd2 = atoi(date.substr(0, 2).c_str());\n    dd = atoi(date.substr(3, 2).c_str());\n    yy = atoi(date.substr(6, 4).c_str());\n    if (dd2 < 1 or dd2 > 12) return false;\n    if (dd < 1 or dd > 31) return false;\n    if (dd == 31 and(dd2 == 4 or dd2 == 6 or dd2 == 9 or dd2 == 11 or dd2 == 2)) return false;\n    if (dd == 30 and dd2 == 2) return false;\n    return true;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"06/04/2020\") == false);\n}\n", "entry_point": "valid_date", "partial": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            # print('@@this is the line to split##')\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n", "gc": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool valid_date(string date) {\n    int dd2, dd, yy, i;\n    if (date.length()!= 10) return false;\n    for (int i = 0; i < 10; i++)\n    if (i == 2 or i == 5)\n     {\n        if (date [ i ]!='') return false;\n        }\n    else\n   \n    if (date [ i ]!= '-') return false;\n    dd = date [ 3 ] - '0';\n    dd2 = date [ 6 ] - '0';\n    yy = date [ 0 ] - '0';\n    if (dd < 1 or dd > 31) return false;\n    if (dd2 < 1 or dd2 > 30) return false;\n    if (date [ 2 ]!= '-' or date [ 4 ]!= '-' or date [ 6 ]!= '-' or date [ 8 ]!= '-' or date [ 9 ]!='') return false;\n    if (date [ 1 ] < '1' or date [ 1 ] > '12') return false;\n    if (date [ 3 ] < '1' or date [ 3 ] > '12') return false;\n    if (date [ 5 ] < '1' or date [ 5 ] > '12') return false;\n    if (date [ 7 ] < '1' or date [ 7 ] > '12') return false;\n    if (date [ 9 ] < '1' or date [ 9 ] > '12') return false;\n    return true;\n}\nint main()\n{\n    string date;\n    while (getline(cin, date))\n    {\n        if (valid_date(date))\n        printf(\"%s is a valid date\\n\", date.c_str());\n        else\n        printf(\"%s is not a valid date\\n\", date.c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/125", "prompt": "/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nvector < string > split_words(string current2) {\n    int i;\n    string current = \"\";\n    vector < string > out = {\n        }\n    ;\n    if (find(current2.begin(), current2.end(), ' ') != current2.end())\n     {\n        current2 = current2 + ' ';\n        for (i = 0; i < current2.length(); i++)\n        if (current2 [ i ] == ' ') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + current2 [ i ];\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' return out;\n        }\n    if (find(current2.begin(), current2.end(), ' ') != current2.end())\n     {\n        current2 = current2 + ' ';\n        for (i = 0; i < current2.length(); i++)\n        if (current2 [ i ] == ' ') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + current2 [ i ];\n        return out;\n        }\n    int num = 0;\n    for (i = 0; i < current2.length(); i++)\n    if (current2 [ i ] >= 97 and current2 [ i ] <= 122 and current2 [ i ] % 2 == 0)\n    num+=1;\n    return {\n        to_string(num)}\n    ;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n}\n", "entry_point": "split_words", "partial": "/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n            # print('@@this is the line to split##')\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n", "gc": "/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1,... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nvector < string > split_words(string current2) {\n    int i;\n    string current = \"\";\n    vector < string > out = {\n        }\n    ;\n    if (find(current2.begin(), current2.end(),'')!= current2.end())\n     {\n        current2 = current2 +'';\n        for (i = 0; i < current2.length(); i++)\n        if (current2 [ i ] =='') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + current2 [ i ];\n       \n        }\n    else if (find(current2.begin(), current2.end(), ',')!= current2.end())\n    {\n        current2 = current2 + ',';\n        for (i = 0; i < current2.length(); i++)\n        if (current2 [ i ] == ',') {\n            if (current.length() > 0) out.push_back(current); current = \"\";\n            }\n        else current = current + current2 [ i ];\n        }\n    else if (find(current2.begin(), current2.end(),'') == current2.end())\n    {\n        if (current.length() > 0) out.push_back(current);\n        }\n    else if (find(current2.begin(), current2.end(), ',') == current2.end())\n    {\n        if (current.length() > 0) out.push_back(current);\n        }\n    else\n    {\n        if (current.length() > 0) out.push_back(current);\n        current = current2;\n        }\n    return out;\n    }\nint main()\n{\n    string current;\n    while (cin >> current)\n    {\n        vector < string > out = split_words(current);\n        for (int i = 0; i < out.size(); i++)\n        cout << out [ i ] << endl;\n        }\n    return 0;\n    }\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/126", "prompt": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nbool is_sorted(vector < int > lst) {\n    for (int i2 = 1; i2 < lst.size(); i2++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (lst [ i2 ] < lst [ i2 - 1 ]) return false;\n        if (i2 >= 2 and lst [ i2 ] == lst [ i2 - 1 ] and lst [ i2 ] == lst [ i2 - 2 ]) return false;\n        }\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n}\n", "entry_point": "is_sorted", "partial": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    for (int i=1;i<lst.size();i++)\n    # print('@@this is the line to split##')\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n", "gc": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nbool is_sorted(vector < int > lst) {\n    for (int i2 = 1; i2 < lst.size(); i2++)\n   \n        if (lst[i2] < lst[i2 - 1])\n            return false;\n    return true;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > lst;\n    for (int i = 0; i < n; i++) {\n        int x;\n        scanf(\"%d\", &x);\n        lst.push_back(x);\n    }\n    if (is_sorted(lst))\n        printf(\"%s\\n\", \"True\");\n    else\n        printf(\"%s\\n\", \"False\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/127", "prompt": "/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nstring intersection(vector < int > interval1, vector < int > interval2) {\n    int inter1, inter2, l, l2;\n    inter1 = max(interval1 [ 0 ], interval2 [ 0 ]);\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' inter2 = min(interval1 [ 1 ], interval2 [ 1 ]);\n    l = inter2 - inter1;\n    if (l < 2) return \"NO\";\n    for (l2 = 2; l2 * l2 <= l; l2++)\n    if (l % l2 == 0) return \"NO\";\n    return \"YES\";\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n}\n", "entry_point": "intersection", "partial": "/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    # print('@@this is the line to split##')\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n", "gc": "/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nstring intersection(vector < int > interval1, vector < int > interval2) {\n    int inter1, inter2, l, l2;\n    inter1 = max(interval1 [ 0 ], interval2 [ 0 ]);\n   \n    inter2 = min(interval1 [ 1 ], interval2 [ 1 ]);\n    l = inter2 - inter1 + 1;\n    if (l % 2 == 0) {\n        return \"NO\";\n    }\n    l2 = l / 2;\n    return \"YES\";\n}\nint main() {\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n    vector < int > interval1(n), interval2(m);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &interval1[i]);\n    }\n    for (int i = 0; i < m; i++) {\n        scanf(\"%d\", &interval2[i]);\n    }\n    string res = intersection(interval1, interval2);\n    if (res == \"YES\") {\n        printf(\"%d\\n\", l);\n    } else {\n        printf(\"%s\\n\", res.c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/128", "prompt": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nint prod_signs(vector < int > arr) {\n    if (arr.size() == 0) return -32768;\n    int\nif, sum = 0, prods = 1;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (\nif = 0; i<arr.size();\nif++)\n    \n     {\n        sum+=abs(arr [\nif ]);\n        if (arr [\nif ] == 0) prods = 0;\n        if (arr [\nif ] < 0) prods = - prods;\n        }\n    return sum * prods;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({}) == -32768);\n}\n", "entry_point": "prod_signs", "partial": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    # print('@@this is the line to split##')\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n", "gc": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nint prod_signs(vector < int > arr) {\n    if (arr.size() == 0) return -32768;\n    int\nif, sum = 0, prods = 1;\n   \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == 0) return -32768;\n        if (arr[i] == 1) {\n            sum += arr[i];\n            prods *= 1;\n        }\n        if (arr[i] == -1) {\n            sum -= arr[i];\n            prods *= -1;\n        }\n    }\n    return sum * prods;\n}\n\nint main() {\n    int arr[] = {1, 2, 2, -4};\n    vector < int > arr1(arr, arr + sizeof(arr) / sizeof(arr[0]));\n    printf(\"%d\\n\", prod_signs(arr1));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/129", "prompt": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > minPath(vector < vector < int > > data, int k) {\n    int i, j, x, y, min;\n    for (i = 0; i < data.size(); i++)\n    for (j = 0; j < data [ i ].size(); j++)\n    if (data [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' min = data.size() * data.size();\n    if (x > 0 and data [ x - 1 ] [ y ] < min) min = data [ x - 1 ] [ y ];\n    if (x < data.size() - 1 and data [ x + 1 ] [ y ] < min) min = data [ x + 1 ] [ y ];\n    if (y > 0 and data [ x ] [ y - 1 ] < min) min = data [ x ] [ y - 1 ];\n    if (y < data.size() - 1 and data [ x ] [ y + 1 ] < min) min = data [ x ] [ y + 1 ];\n    vector < int > out = {\n        }\n    ;\n    for (i = 0; i < k; i++)\n    if (i % 2 == 0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n}\n", "entry_point": "minPath", "partial": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n            # print('@@this is the line to split##')\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n", "gc": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > minPath(vector < vector < int > > data, int k) {\n    int i, j, x, y, min;\n    for (i = 0; i < data.size(); i++)\n    for (j = 0; j < data [ i ].size(); j++)\n    if (data [ i ] [ j ] == 1) {\n        x = i; y = j;\n        }\n   \n    vector < int > min_path;\n    min = data [ x ][ y ];\n    min_path.push_back(min);\n    while (k > 1) {\n        x = x - 1;\n        y = y - 1;\n        if (x < 0 || y < 0) break;\n        if (data [ x ][ y ] < min) {\n            min = data [ x ][ y ];\n            min_path.clear();\n            min_path.push_back(min);\n            }\n        else if (data [ x ][ y ] == min) {\n            min_path.push_back(min);\n            }\n        }\n    return min_path;\n    }\n\nint main() {\n    int n, k;\n    scanf(\"%d %d\", &n, &k);\n    vector < vector < int > > grid(n, vector<int>(n));\n    for (int i = 0; i < n; i++)\n    for (int j = 0; j < n; j++)\n    scanf(\"%d\", &grid[i][j]);\n    vector < vector < int > > min_path = minPath(grid, k);\n    for (int i = 0; i < min_path.size(); i++)\n    printf(\"%d \", min_path[i]);\n    printf(\"\\n\");\n    return 0;\n    }\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/13", "prompt": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include <stdio.h>\nusingnamespace std;\nint greatest_common_divisor(int b2, int b) {\n    int out, m;\n    while (true) {\n        if (b2 < b)\n", "canonical_solution": "print(' @ this is the line to split ## ' {\n            m = b2; b2 = b; b = m;\n            }\n        b2 = b2 % b;\n        if (b2 == 0) return b;\n        }\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "declaration": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 5) == 1);\n     assert (greatest_common_divisor(25, 15) == 5);\n}\n", "entry_point": "greatest_common_divisor", "partial": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    int out,m;\n    while (true){\n        if (a<b) \n        # print('@@this is the line to split##')\n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n", "gc": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include <stdio.h>\nusingnamespace std;\nint greatest_common_divisor(int b2, int b) {\n    int out, m;\n    while (true) {\n        if (b2 < b)\n            b2 = b;\n        else\n            b = b2;\n        m = b2 % b;\n        if (m == 0)\n            return b;\n    }\n}\nint main() {\n    int a, b;\n    while (scanf(\"%d %d\", &a, &b)!= EOF) {\n        printf(\"%d\\n\", greatest_common_divisor(a, b));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/130", "prompt": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > tri(int n) {\n    vector < int > out = {\n        1, 3}\n    ;\n    if (n == 0) return {\n        1}\n    ;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int nt = 2; nt <= n; nt++)\n     {\n        if (nt % 2 == 0) out.push_back(1 + nt / 2);\n        else out.push_back(out [ nt - 1 ] + out [ nt - 2 ] + 1 +(nt + 1) / 2);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n}\n", "entry_point": "tri", "partial": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    # print('@@this is the line to split##')\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n", "gc": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > tri(int n) {\n    vector < int > out = {\n        1, 3}\n    ;\n    if (n == 0) return {\n        1}\n    ;\n   \n    if (n == 1) return {\n        3}\n    ;\n    \n    if (n == 2) return {\n        3, 2}\n    ;\n    \n    if (n == 3) return {\n        3, 2, 1}\n    ;\n    \n    if (n % 2 == 0) {\n        for (int i = 2; i <= n; i += 2) {\n            out.push_back(out[i - 1] + out[i - 2] + out[i + 1]);\n        }\n    } else {\n        for (int i = 3; i <= n; i += 2) {\n            out.push_back(out[i - 1] + out[i - 2] + out[i + 1]);\n        }\n    }\n    return out;\n}\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > out = tri(n);\n    for (int i = 0; i < out.size(); i++) {\n        printf(\"%d \", out[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/131", "prompt": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nint digits(int n) {\n    int prod = 1, has = 0;\n    string s = to_string(n);\n    for (int i2 = 0; i2 < s.length(); i2++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (s [ i2 ] % 2 == 1) {\n        has = 1;\n        prod = prod *(s [ i2 ] - 48);\n        }\n    if (has == 0) return 0;\n    return prod;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(1) == 1);\n    assert (digits(4) == 0);\n    assert (digits(235) ==15);\n}\n", "entry_point": "digits", "partial": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        # print('@@this is the line to split##')\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n", "gc": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nint digits(int n) {\n    int prod = 1, has = 0;\n    string s = to_string(n);\n    for (int i2 = 0; i2 < s.length(); i2++)\n   \n    {\n        if (s[i2] % 2 == 1)\n        {\n            prod *= s[i2];\n            has = 1;\n        }\n    }\n    if (has == 0)\n        return 0;\n    else\n        return prod;\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\", digits(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/132", "prompt": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") ➞ true\nis_nested(\"[]]]]]]][[[[[]\") ➞ false\nis_nested(\"[][]\") ➞ false\nis_nested(\"[]\") ➞ false\nis_nested(\"[[][]]\") ➞ true\nis_nested(\"[[]][[\") ➞ true\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool is_nested(string str) {\n    int max = 0, maxcount = 0;\n    for (int i = 0; i < str.length(); i++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (str [ i ] == ' ') max+=1;\n        if (str [ i ] == ' ') max-=1;\n        if (max < 0) max = 0;\n        if (max > maxcount) maxcount = max;\n        if (max <= maxcount - 2) return true;\n        }\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested(\"[]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n}\n", "entry_point": "is_nested", "partial": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") ➞ true\nis_nested(\"[]]]]]]][[[[[]\") ➞ false\nis_nested(\"[][]\") ➞ false\nis_nested(\"[]\") ➞ false\nis_nested(\"[[][]]\") ➞ true\nis_nested(\"[[]][[\") ➞ true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        # print('@@this is the line to split##')\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n", "gc": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") ➞ true\nis_nested(\"[]]]]]]][[[[[]\") ➞ false\nis_nested(\"[][]\") ➞ false\nis_nested(\"[]\") ➞ false\nis_nested(\"[[][]]\") ➞ true\nis_nested(\"[[]][[\") ➞ true\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool is_nested(string str) {\n    int max = 0, maxcount = 0;\n    for (int i = 0; i < str.length(); i++)\n     {\n       \n        if (str[i] == '[')\n        {\n            if (maxcount == 0)\n            {\n                maxcount++;\n                max = i;\n            }\n            else\n            {\n                if (maxcount == 1)\n                {\n                    maxcount++;\n                    max = i;\n                }\n                else\n                {\n                    maxcount--;\n                }\n            }\n        }\n        else\n        {\n            if (maxcount == 1)\n            {\n                maxcount--;\n            }\n        }\n    }\n    return maxcount == 0;\n}\nint main()\n{\n    string str;\n    getline(cin, str);\n    cout<<is_nested(str)<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/133", "prompt": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nint sum_squares(vector < float > lst) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' int sum = 0;\n    for (int f = 0; f < lst.size(); f++)\n    sum+=ceil(lst [ f ]) * ceil(lst [ f ]);\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1,4,9})==98);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n}\n", "entry_point": "sum_squares", "partial": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    # print('@@this is the line to split##')\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n", "gc": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nint sum_squares(vector < float > lst) {\n   \n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        sum += (int)floor(lst[i]*pow(10,floor(log10(lst[i]))));\n    }\n    return sum;\n}\nint main()\n{\n    int t;\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n        int n;\n        scanf(\"%d\",&n);\n        vector < float > lst;\n        for(int i = 0; i < n; i++)\n        {\n            float x;\n            scanf(\"%f\",&x);\n            lst.push_back(x);\n        }\n        int sum = sum_squares(lst);\n        printf(\"%d\\n\",sum);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/134", "prompt": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool check_if_last_char_is_a_letter(string txt) {\n    if (txt.length() == 0) return false;\n    char mask = txt [ txt.length() - 1 ];\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (mask < 65 or(mask > 90 and mask < 97) or mask > 122) return false;\n    if (txt.length() == 1) return true;\n    mask = txt [ txt.length() - 2 ];\n    if ((mask >= 65 and mask <= 90) or(mask >= 97 and mask <= 122)) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "entry_point": "check_if_last_char_is_a_letter", "partial": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    # print('@@this is the line to split##')\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n", "gc": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool check_if_last_char_is_a_letter(string txt) {\n    if (txt.length() == 0) return false;\n    char mask = txt [ txt.length() - 1 ];\n   \n    for (int i = 0; i < txt.length(); i++) {\n        if (txt [ i ] == mask) return true;\n    }\n    return false;\n}\n\nint main() {\n    string txt = \"apple pie\";\n    cout << check_if_last_char_is_a_letter(txt) << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/135", "prompt": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint can_arrange(vector < int > arr) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' int max = -1;\n    for (int ask = 0; ask < arr.size(); ask++)\n    if (arr [ ask ] <= ask) max = ask;\n    return max;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,3})==-1);\n}\n", "entry_point": "can_arrange", "partial": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    # print('@@this is the line to split##')\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n", "gc": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint can_arrange(vector < int > arr) {\n   \n   int i,j,k,max;\n   for(i=0;i<arr.size();i++)\n   {\n      for(j=i;j<arr.size();j++)\n      {\n         if(arr[j]<=arr[i])\n         {\n            max=arr[j];\n            for(k=j;k<arr.size();k++)\n            {\n               if(arr[k]>max)\n               {\n                  max=arr[k];\n               }\n            }\n            return max;\n         }\n      }\n   }\n   return -1;\n}\nint main()\n{\n   int arr[]={1,2,3,4,5};\n   vector < int > v(arr,arr+5);\n   printf(\"%d\\n\",can_arrange(v));\n   return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/136", "prompt": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > largest_smallest_integers(vector < int > lst) {\n    int maxneg = 0, minpos = 0;\n    for (int m = 0; m < lst.size(); m++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (lst [ m ] < 0 and(maxneg == 0 or lst [ m ] > maxneg)) maxneg = lst [ m ];\n        if (lst [ m ] > 0 and(minpos == 0 or lst [ m ] < minpos)) minpos = lst [ m ];\n        }\n    return {\n        maxneg, minpos}\n    ;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n}\n", "entry_point": "largest_smallest_integers", "partial": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    # print('@@this is the line to split##')\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n", "gc": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > largest_smallest_integers(vector < int > lst) {\n    int maxneg = 0, minpos = 0;\n    for (int m = 0; m < lst.size(); m++)\n   \n    {\n        if (lst[m] < 0)\n        {\n            if (maxneg < lst[m])\n            {\n                maxneg = lst[m];\n            }\n        }\n        else\n        {\n            if (minpos > lst[m])\n            {\n                minpos = lst[m];\n            }\n        }\n    }\n    vector < int > result;\n    if (maxneg == 0 && minpos == 0)\n    {\n        result.push_back(0);\n        result.push_back(0);\n    }\n    else if (maxneg > 0)\n    {\n        result.push_back(maxneg);\n        result.push_back(minpos);\n    }\n    else if (minpos < 0)\n    {\n        result.push_back(minpos);\n        result.push_back(maxneg);\n    }\n    return result;\n}\nint main()\n{\n    int a, b;\n    vector < int > lst;\n    while (scanf(\"%d %d\", &a, &b)!= EOF)\n    {\n        lst.push_back(a);\n        lst.push_back(b);\n    }\n    vector < int > result = largest_smallest_integers(lst);\n    for (int i = 0; i < result.size(); i++)\n    {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/137", "prompt": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) ➞ 2.5\ncompare_one(1, \"2,3\") ➞ \"2,3\"\ncompare_one(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ \"None\"\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusingnamespace std;\nboost :: any compare_one(boost :: any a, boost :: any b) {\n    double numa, numb;\n    boost :: any out;\n    if (a.type() == typeid(string))\n     {\n        string a2;\n        a2 = boost :: any_cast < string >(a);\n        if (find(a2.begin(), a2.end(), ' ') != a2.end())\n        for (int i = 0; i < a2.length(); i++)\n        if (a2 [ i ] == ' ') a2 = a2.substr(0, i) + ' ' + a2.substr(i + 1);\n        numa = atof(a2.c_str());\n        }\n    else {\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (a.type() == typeid(int)) numa = boost :: any_cast < int >(a);\n        if (a.type() == typeid(double)) numa = boost :: any_cast < double >(a);\n        }\n    if (b.type() == typeid(string))\n     {\n        string a2;\n        a2 = boost :: any_cast < string >(b);\n        if (find(a2.begin(), a2.end(), ' ') != a2.end())\n        for (int i = 0; i < a2.length(); i++)\n        if (a2 [ i ] == ' ') a2 = a2.substr(0, i) + ' ' + a2.substr(i + 1);\n        numb = atof(a2.c_str());\n        }\n    else {\n        if (b.type() == typeid(int)) numb = boost :: any_cast < int >(b);\n        if (b.type() == typeid(double)) numb = boost :: any_cast < double >(b);\n        }\n    \n    if (numa == numb) return string(\"None\");\n    if (numa < numb) return b;\n    if (numa > numb) return a;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "entry_point": "compare_one", "partial": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) ➞ 2.5\ncompare_one(1, \"2,3\") ➞ \"2,3\"\ncompare_one(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        # print('@@this is the line to split##')\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n", "gc": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be. or,\n\ncompare_one(1, 2.5) ➞ 2.5\ncompare_one(1, \"2,3\") ➞ \"2,3\"\ncompare_one(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ \"None\"\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusingnamespace std;\nboost :: any compare_one(boost :: any a, boost :: any b) {\n    double numa, numb;\n    boost :: any out;\n    if (a.type() == typeid(string))\n     {\n        string a2;\n        a2 = boost :: any_cast < string >(a);\n        if (find(a2.begin(), a2.end(),'')!= a2.end())\n        for (int i = 0; i < a2.length(); i++)\n        if (a2 [ i ] =='') a2 = a2.substr(0, i) +'' + a2.substr(i + 1);\n        numa = atof(a2.c_str());\n        }\n    else {\n       \n        numa = boost :: any_cast < double >(a);\n        }\n    if (b.type() == typeid(string))\n    {\n        string b2;\n        b2 = boost :: any_cast < string >(b);\n        if (find(b2.begin(), b2.end(),'')!= b2.end())\n        for (int i = 0; i < b2.length(); i++)\n        if (b2 [ i ] =='') b2 = b2.substr(0, i) +'' + b2.substr(i + 1);\n        numb = atof(b2.c_str());\n        }\n    else {\n        numb = boost :: any_cast < double >(b);\n        }\n    if (numa > numb) out = a;\n    else if (numa < numb) out = b;\n    else out = boost :: any();\n    return out;\n    }\nint main()\n{\n    int a, b;\n    string a2, b2;\n    cin >> a >> b;\n    cin >> a2 >> b2;\n    cout << compare_one(a, b) << endl;\n    cout << compare_one(a2, b2) << endl;\n    return 0;\n    }\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/138", "prompt": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include <stdio.h>\nusingnamespace std;\nbool is_equal_to_sum_even(int In) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (In % 2 == 0 and In >= 8) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n}\n", "entry_point": "is_equal_to_sum_even", "partial": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    # print('@@this is the line to split##')\n    if (n%2==0 and n>=8) return true;\n    return false;\n}\n", "gc": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include <stdio.h>\nusingnamespace std;\nbool is_equal_to_sum_even(int In) {\n   \n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int sum = 0;\n    \n    while (i < In) {\n        sum = sum + i;\n        i++;\n    }\n    \n    while (j < In) {\n        sum = sum + j;\n        j++;\n    }\n    \n    while (k < In) {\n        sum = sum + k;\n        k++;\n    }\n    \n    while (l < In) {\n        sum = sum + l;\n        l++;\n    }\n    \n    while (m < In) {\n        sum = sum + m;\n        m++;\n    }\n    \n    if (sum % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nint main() {\n    int n;\n    \n    printf(\"Enter the number: \");\n    scanf(\"%d\", &n);\n    \n    if (is_equal_to_sum_even(n)) {\n        printf(\"The number is equal to sum of 4 even numbers\");\n    }\n    else {\n        printf(\"The number is not equal to sum of 4 even numbers\");\n    }\n    \n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/139", "prompt": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include <stdio.h>\nusingnamespace std;\nlong long special_factorial(int n) {\n    long long fact = 1, bfact = 1;\n    for (int c = 1; c <= n; c++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        fact = fact * c;\n        bfact = bfact * fact;\n        }\n    return bfact;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n}\n", "entry_point": "special_factorial", "partial": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    # print('@@this is the line to split##')\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n", "gc": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include <stdio.h>\nusingnamespace std;\nlong long special_factorial(int n) {\n    long long fact = 1, bfact = 1;\n    for (int c = 1; c <= n; c++)\n   \n    {\n        fact *= c;\n        bfact = bfact * (c - 1);\n    }\n    return fact;\n}\n\nint main() {\n    int n;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    printf(\"The special factorial of %d is %lld\\n\", n, special_factorial(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/14", "prompt": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > all_prefixes(string str) {\n    vector < string > out;\n    string out2 = \"\";\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i =0;i<str.length(); i++)\n     {\n        out2 = out2 + str [ i ];\n        out.push_back(out2);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"abc\"),{\"a\",\"ab\",\"abc\"}));\n}\n", "entry_point": "all_prefixes", "partial": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    # print('@@this is the line to split##')\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n", "gc": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > all_prefixes(string str) {\n    vector < string > out;\n    string out2 = \"\";\n   \n    for (int i = 0; i < str.length(); i++) {\n        out2 = out2 + str[i];\n        if (i == str.length() - 1) {\n            out.push_back(out2);\n        }\n        else {\n            for (int j = i + 1; j < str.length(); j++) {\n                out2 = out2 + str[j];\n                out.push_back(out2);\n            }\n        }\n    }\n    return out;\n}\n\nint main() {\n    string str = \"abc\";\n    vector < string > out = all_prefixes(str);\n    for (int i = 0; i < out.size(); i++) {\n        printf(\"%s\\n\", out[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/140", "prompt": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring fix_spaces(string text) {\n    string text2 = \"\";\n    int spacelen = 0;\n    for (int i = 0; i < text.length(); i++)\n    if (text [ i ] == ' ') spacelen+=1;\n    else\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (spacelen == 1) text2 = text2 + ' ';\n        if (spacelen == 2) text2 = text2 + \"__\";\n        if (spacelen > 2) text2 = text2 + ' ';\n        spacelen = 0;\n        text2 = text2 + text [ i ];\n        }\n    if (spacelen == 1) text2 = text2 + ' ';\n    if (spacelen == 2) text2 = text2 + \"__\";\n    if (spacelen > 2) text2 = text2 + ' ';\n    return text2;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Example 1\") == \"Example_1\");\n    assert (fix_spaces(\" Example 2\") == \"_Example_2\");\n    assert (fix_spaces(\" Example   3\") == \"_Example-3\");\n}\n", "entry_point": "fix_spaces", "partial": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        # print('@@this is the line to split##')\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n", "gc": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring fix_spaces(string text) {\n    string text2 = \"\";\n    int spacelen = 0;\n    for (int i = 0; i < text.length(); i++)\n    if (text [ i ] =='') spacelen+=1;\n    else\n     {\n       \n        if (spacelen > 2)\n        {\n            text2 = text2 + text [ i ];\n            text2 = text2 + \"-\";\n            spacelen = 0;\n        }\n        else text2 = text2 + text [ i ];\n        \n    }\n    return text2;\n}\n\nint main()\n{\n    string text = \"Example\";\n    printf(\"%s\\n\",fix_spaces(text).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/141", "prompt": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring file_name_check(string string) {\n    int numdigit = 0, numdot = 0;\n    if (string.length() < 5) return \"No\";\n    char w = string [ 0 ];\n    if (w < 65 or(w > 90 and w < 97) or w > 122) return \"No\";\n    string last = string.substr(string.length() - 4, 4);\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (last != \".txt\" and last != \".exe\" and last != \".dll\") return \"No\";\n    for (int i = 0; i < string.length(); i++)\n     {\n        if (string [ i ] >= 48 and string [ i ] <= 57) numdigit+=1;\n        if (string [ i ] == ' ') numdot+=1;\n        }\n    if (numdigit > 3 or numdot != 1) return \"No\";\n    return \"Yes\";}", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n}\n", "entry_point": "file_name_check", "partial": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    # print('@@this is the line to split##')\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n", "gc": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring file_name_check(string string) {\n    int numdigit = 0, numdot = 0;\n    if (string.length() < 5) return \"No\";\n    char w = string [ 0 ];\n    if (w < 65 or(w > 90 and w < 97) or w > 122) return \"No\";\n    string last = string.substr(string.length() - 4, 4);\n   \n    if (last == \".txt\" or last == \".exe\" or last == \".dll\") return \"Yes\";\n    else return \"No\";\n}\n\nint main() {\n    string s;\n    while (getline(cin, s)) {\n        cout << file_name_check(s) << endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/142", "prompt": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint sum_squares(vector < int > lst) {\n    int sum = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int sk =0;i<lst.size(); sk++)\n    if (sk % 3 == 0) sum+=lst [ sk ] * lst [ sk ];\n    else\nif (sk % 4 == 0) sum+=lst [ sk ] * lst [ sk ] * lst [ sk ];\n    else sum+=lst [ sk ];\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n}\n", "entry_point": "sum_squares", "partial": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum=0;\n    # print('@@this is the line to split##')\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n", "gc": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint sum_squares(vector < int > lst) {\n    int sum = 0;\n   \n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        }\n        if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    vector < int > lst;\n    int n;\n    printf(\"Enter the number of elements in the vector: \");\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n        int x;\n        printf(\"Enter the element: \");\n        scanf(\"%d\", &x);\n        lst.push_back(x);\n    }\n    printf(\"The sum of the squares is: %d\", sum_squares(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/143", "prompt": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring words_in_sentence(string sentence) {\n    string out = \"\";\n    string sentence2 = \"\";\n    sentence = sentence + ' ';\n    \n    for (int i = 0; i < sentence.size(); i++)\n    if (sentence [ i ] != ' ') sentence2 = sentence2 + sentence [ i ];\n    else\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' bool isp = true;\n        int l = sentence2.length();\n        if (l < 2) isp = false;\n        for (int j = 2; j * j <= l; j++)\n        if (l % j == 0) isp = false;\n        if (isp) out = out + sentence2 + ' ';\n        sentence2 = \"\";}\n    if (out.length() > 0)\n    out.pop_back();\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n}\n", "entry_point": "words_in_sentence", "partial": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        # print('@@this is the line to split##')\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n", "gc": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring words_in_sentence(string sentence) {\n    string out = \"\";\n    string sentence2 = \"\";\n    sentence = sentence +'';\n    \n    for (int i = 0; i < sentence.size(); i++)\n    if (sentence [ i ]!='') sentence2 = sentence2 + sentence [ i ];\n    else\n     {\n       \n       for (int j = 0; j < sentence2.size(); j++)\n       {\n         if (sentence2 [ j ] =='')\n         {\n           out = out + sentence2 [ j ];\n           sentence2 = sentence2.substr(j + 1);\n         }\n       }\n       sentence2 = sentence2.substr(0, sentence2.size() - 1);\n     }\n    return out;\n}\n\nint main()\n{\n    string sentence;\n    cin >> sentence;\n    cout << words_in_sentence(sentence);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/144", "prompt": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool simplify(string x, string n) {\n    int a, b, c, d, i2;\n    for (i2 = 0; i2 < x.size(); i2++)\n    if (x [ i2 ] == ' ') {\n        a = atoi(x.substr(0, i2).c_str());\n        b = atoi(x.substr(i2 + 1).c_str());\n       \n", "canonical_solution": "print(' @ this is the line to split ## '}\n    for (i2 = 0; i2 < n.size(); i2++)\n    if (n [ i2 ] == ' ') {\n        c = atoi(n.substr(0, i2).c_str());\n        d = atoi(n.substr(i2 + 1).c_str());\n        }\n    if ((a * c) %(b * d) == 0) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n}\n", "entry_point": "simplify", "partial": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n            # print('@@this is the line to split##')\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n", "gc": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool simplify(string x, string n) {\n    int a, b, c, d, i2;\n    for (i2 = 0; i2 < x.size(); i2++)\n    if (x [ i2 ] =='') {\n        a = atoi(x.substr(0, i2).c_str());\n        b = atoi(x.substr(i2 + 1).c_str());\n       \n        c = atoi(n.substr(0, i2).c_str());\n        d = atoi(n.substr(i2 + 1).c_str());\n        if (a * d == b * c)\n            return true;\n        else\n            return false;\n    }\n    return false;\n}\n\nint main() {\n    string x, n;\n    while (cin >> x >> n)\n        if (simplify(x, n))\n            cout << \"Yes\" << endl;\n        else\n            cout << \"No\" << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/145", "prompt": "/*\nWrite a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < int > order_by_points(vector < int > nums) {\n    vector < int > sumdigit = {\n        }\n    ;\n    for (int i = 0; i < nums.size(); i++)\n     {\n        string w = to_string(abs(nums [ i ]));\n        int sum = 0;\n        for (int i2 = 1; i2 < w.length(); i2++)\n        sum+=w [ i2 ] - 48;\n        if (nums [ i ] > 0) sum+=w [ 0 ] - 48;\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' else sum-=w [ 0 ] - 48;\n        sumdigit.push_back(sum);\n        }\n    int m;\n    for (int i = 0; i < nums.size(); i++)\n    for (int i2 = 1; i2 < nums.size(); i2++)\n    if (sumdigit [ i2 - 1 ] > sumdigit [ i2 ])\n     {\n        m = sumdigit [ i2 ]; sumdigit [ i2 ] = sumdigit [ i2 - 1 ]; sumdigit [ i2 - 1 ] = m;\n        m = nums [ i2 ]; nums [ i2 ] = nums [ i2 - 1 ]; nums [ i2 - 1 ] = m;\n        }\n    return nums;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({}) , {}));\n}\n", "entry_point": "order_by_points", "partial": "/*\nWrite a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        # print('@@this is the line to split##')\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n", "gc": "/*\nWrite a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < int > order_by_points(vector < int > nums) {\n    vector < int > sumdigit = {\n        }\n    ;\n    for (int i = 0; i < nums.size(); i++)\n     {\n        string w = to_string(abs(nums [ i ]));\n        int sum = 0;\n        for (int i2 = 1; i2 < w.length(); i2++)\n        sum+=w [ i2 ] - 48;\n        if (nums [ i ] > 0) sum+=w [ 0 ] - 48;\n       \n        if (sumdigit.empty())\n        {\n            sumdigit.push_back(sum);\n        }\n        else\n        {\n            if (sumdigit [ sumdigit.size() - 1 ]!= sum)\n            {\n                sumdigit.push_back(sum);\n            }\n        }\n    }\n    return sumdigit;\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > nums;\n    for (int i = 0; i < n; i++)\n    {\n        int x;\n        scanf(\"%d\", &x);\n        nums.push_back(x);\n    }\n    vector < int > sumdigit = order_by_points(nums);\n    for (int i = 0; i < sumdigit.size(); i++)\n    {\n        printf(\"%d \", sumdigit [ i ]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/146", "prompt": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nint specialFilter(vector < int > nums) {\n    int num = 0;\n    for (int num2 = 0; num2 < nums.size(); num2++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (nums [ num2 ] > 10)\n     {\n        string w = to_string(nums [ num2 ]);\n        if (w [ 0 ] % 2 == 1 and w [ w.length() - 1 ] % 2 == 1) num+=1;\n        }\n    return num;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n}\n", "entry_point": "specialFilter", "partial": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    # print('@@this is the line to split##')\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n", "gc": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nint specialFilter(vector < int > nums) {\n    int num = 0;\n    for (int num2 = 0; num2 < nums.size(); num2++)\n   \n    {\n        if (nums[num2] > 10 && nums[num2] % 2 == 1 && nums[num2] % 10 == 1)\n        {\n            num++;\n        }\n    }\n    return num;\n}\nint main()\n{\n    int num;\n    vector < int > nums;\n    while (scanf(\"%d\", &num)!= EOF)\n    {\n        nums.push_back(num);\n    }\n    int num2 = specialFilter(nums);\n    printf(\"%d\", num2);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/147", "prompt": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint get_matrix_triples(int n) {\n    vector < int > a;\n    vector < vector < int > > sum = {\n         {\n            0, 0, 0}\n        }\n    ;\n    vector < vector < int > > sum2 = {\n         {\n            0, 0, 0}\n        }\n    ;\n    for (int n2 = 1; n2 <= n; n2++)\n     {\n        a.push_back((n2 * n2 - n2 + 1) % 3);\n        sum.push_back(sum [ sum.size() - 1 ]);\n        sum [ n2 ] [ a [ n2 - 1 ] ]+=1;\n        }\n    for (int times = 1; times < 3; times++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        for (int n2 = 1; n2 <= n; n2++)\n         {\n            sum2.push_back(sum2 [ sum2.size() - 1 ]);\n            if (n2 >= 1)\n            for (int j = 0; j <= 2; j++)\n            sum2 [ n2 ] [(a [ n2 - 1 ] + j) % 3 ]+=sum [ n2 - 1 ] [ j ];\n            }\n        sum = sum2;\n        sum2 = {\n             {\n                0, 0, 0}\n            }\n        ;\n        }\n    \n    return sum [ n ] [ 0 ];\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n    assert (get_matrix_triples(6) == 4);\n    assert (get_matrix_triples(10) == 36);\n    assert (get_matrix_triples(100) == 53361);\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n}\n", "entry_point": "get_matrix_triples", "partial": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    # print('@@this is the line to split##')\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n", "gc": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint get_matrix_triples(int n) {\n    vector < int > a;\n    vector < vector < int > > sum = {\n         {\n            0, 0, 0}\n        }\n    ;\n    vector < vector < int > > sum2 = {\n         {\n            0, 0, 0}\n        }\n    ;\n    for (int n2 = 1; n2 <= n; n2++)\n     {\n        a.push_back((n2 * n2 - n2 + 1) % 3);\n        sum.push_back(sum [ sum.size() - 1 ]);\n        sum [ n2 ] [ a [ n2 - 1 ] ]+=1;\n        }\n    for (int times = 1; times < 3; times++)\n   \n    {\n        for (int n3 = 1; n3 <= n; n3++)\n        {\n            for (int n4 = n3 + 1; n4 <= n; n4++)\n            {\n                if (sum [ n3 ][ a [ n3 - 1 ] ] + sum [ n4 ][ a [ n4 - 1 ] ] + sum [ n3 ][ a [ n4 - 1 ] ] == times)\n                {\n                    sum2.push_back(sum [ n3 ]);\n                    sum2.push_back(sum [ n4 ]);\n                    sum2.push_back(sum [ n3 ][ a [ n3 - 1 ] ] + sum [ n4 ][ a [ n4 - 1 ] ]);\n                }\n            }\n        }\n    }\n    return sum2.size();\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", get_matrix_triples(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/148", "prompt": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > bf(string planet1, string planet2) {\n    vector < string > planets = {\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    ;\n    int pos1 = -1, pos2 = -1, i;\n    for (i = 0; i < planets.size(); i++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (planets [ i ] == planet1) pos1 = i;\n        if (planets [ i ] == planet2) pos2 = i;\n        }\n    if (pos1 == -1 or pos2 == -1) return {\n        }\n    ;\n    if (pos1 > pos2) {\n        i = pos1; pos1 = pos2; pos2 = i;}\n    vector < string > out = {\n        }\n    ;\n    for (i = pos1 + 1; i < pos2; i++)\n    out.push_back(planets [ i ]);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n}\n", "entry_point": "bf", "partial": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    # print('@@this is the line to split##')\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n", "gc": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > bf(string planet1, string planet2) {\n    vector < string > planets = {\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    ;\n    int pos1 = -1, pos2 = -1, i;\n    for (i = 0; i < planets.size(); i++)\n     {\n       \n        if (planets[i] == planet1)\n            pos1 = i;\n        if (planets[i] == planet2)\n            pos2 = i;\n        if (pos1!= -1 && pos2!= -1)\n            break;\n    }\n    if (pos1 == -1 || pos2 == -1)\n        return {};\n    vector < string > result;\n    int j = 0;\n    while (pos1 < pos2)\n    {\n        result.push_back(planets[j]);\n        j++;\n        if (j >= planets.size())\n            break;\n    }\n    return result;\n}\nint main()\n{\n    vector < string > result = bf(\"Mercury\", \"Jupiter\");\n    for (int i = 0; i < result.size(); i++)\n        printf(\"%s\\n\", result[i].c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/149", "prompt": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nvector < string > sorted_list_sum(vector < string > lst) {\n    vector < string > mid2 = {\n        }\n    ;\n    for (int i = 0; i < lst.size(); i++)\n    if (lst [ i ].length() % 2 == 0) mid2.push_back(lst [ i ]);\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string mid;\n    sort(mid2.begin(), mid2.end());\n    for (int i = 0; i < mid2.size(); i++)\n    for (int j = 1; j < mid2.size(); j++)\n    if (mid2 [ j ].length() < mid2 [ j - 1 ].length())\n     {\n        mid = mid2 [ j ]; mid2 [ j ] = mid2 [ j - 1 ]; mid2 [ j - 1 ] = mid;\n        }\n    return mid2;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"ab\", \"a\", \"aaa\", \"cd\"}) , {\"ab\", \"cd\"}));\n}\n", "entry_point": "sorted_list_sum", "partial": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    # print('@@this is the line to split##')\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n", "gc": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nvector < string > sorted_list_sum(vector < string > lst) {\n    vector < string > mid2 = {\n        }\n    ;\n    for (int i = 0; i < lst.size(); i++)\n    if (lst [ i ].length() % 2 == 0) mid2.push_back(lst [ i ]);\n   \n    sort(mid2.begin(), mid2.end());\n    return mid2;\n}\nint main()\n{\n    vector < string > lst = {\n        \"aa\", \"a\", \"aaa\", \"ab\", \"a\", \"cd\"\n    };\n    vector < string > mid = sorted_list_sum(lst);\n    for (int i = 0; i < mid.size(); i++)\n        printf(\"%s\\n\", mid [ i ].c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/15", "prompt": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring string_sequence(int n) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string out = \"0\";\n    for (int nt = 1; nt <= n; nt++)\n    out = out + \" \" + to_string(nt);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(5) == \"0 1 2 3 4 5\");\n}\n", "entry_point": "string_sequence", "partial": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    # print('@@this is the line to split##')\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n", "gc": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring string_sequence(int n) {\n   \n    string s;\n    int i;\n    for(i=0;i<n;i++)\n        s+=to_string(i+1);\n    return s;\n}\n\nint main()\n{\n    int n;\n    printf(\"Enter the number of elements to be generated: \");\n    scanf(\"%d\",&n);\n    printf(\"%s\\n\",string_sequence(n).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/150", "prompt": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include <stdio.h>\nusingnamespace std;\nint x_or_y(int n, int x, int y) {\n    bool isp = true;\n    if (n < 2) isp = false;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int n2 = 2; n2 * n2 <= n; n2++)\n    if (n % n2 == 0) isp = false;\n    if (isp) return x;\n    return y;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n}\n", "entry_point": "x_or_y", "partial": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    bool isp=true;\n    if (n<2) isp=false;\n    # print('@@this is the line to split##')\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n", "gc": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include <stdio.h>\nusingnamespace std;\nint x_or_y(int n, int x, int y) {\n    bool isp = true;\n    if (n < 2) isp = false;\n   \n    if (isp) return x;\n    else return y;\n}\n\nint main() {\n    int n, x, y;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    x = x_or_y(n, 1, 2);\n    y = x_or_y(n, 3, 4);\n    printf(\"%d\\n\", x);\n    printf(\"%d\\n\", y);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/151", "prompt": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nlong long double_the_difference(vector < float > lst) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' long long sum = 0;\n    for (int nt = 0; nt < lst.size(); nt++)\n    if (lst [ nt ] - round(lst [ nt ]) < 1e-4)\n    if (lst [ nt ] > 0 and(int)(round(lst [ nt ])) % 2 == 1) sum+=(int)(round(lst [ nt ])) *(int)(round(lst [ nt ]));\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({1, 3, 2, 0}) == 10);\n    assert (double_the_difference({-1, -2, 0}) == 0);\n    assert (double_the_difference({9, -2}) == 81 );\n    assert (double_the_difference({0}) == 0  );\n}\n", "entry_point": "double_the_difference", "partial": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    # print('@@this is the line to split##')\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n", "gc": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nlong long double_the_difference(vector < float > lst) {\n   \n   long long int sum = 0;\n   for (int i = 0; i < lst.size(); i++) {\n      if (lst[i] > 0) {\n         sum += lst[i] * lst[i];\n      }\n   }\n   return sum;\n}\nint main() {\n   \n   vector < float > lst;\n   int n;\n   printf(\"Enter the number of elements in the vector\\n\");\n   scanf(\"%d\", &n);\n   printf(\"Enter the elements of the vector\\n\");\n   for (int i = 0; i < n; i++) {\n      float x;\n      scanf(\"%f\", &x);\n      lst.push_back(x);\n   }\n   printf(\"The sum of the odd numbers in the vector is %lld\\n\", double_the_difference(lst));\n   return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/152", "prompt": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nvector < int > compare(vector < int > game, vector < int > guess) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' vector < int > out;\n    for (int c = 0; c < game.size(); c++)\n    out.push_back(abs(game [ c ] - guess [ c ]));\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n}\n", "entry_point": "compare", "partial": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    # print('@@this is the line to split##')\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n", "gc": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nvector < int > compare(vector < int > game, vector < int > guess) {\n   \n    vector < int > result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = game.size();\n    int m = guess.size();\n    while (i < n && j < m) {\n        if (game[i] == guess[j]) {\n            result.push_back(0);\n            i++;\n            j++;\n        }\n        else if (game[i] > guess[j]) {\n            result.push_back(game[i] - guess[j]);\n            i++;\n        }\n        else {\n            result.push_back(guess[j] - game[i]);\n            j++;\n        }\n    }\n    return result;\n}\n\nint main() {\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n    vector < int > game(n);\n    vector < int > guess(m);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &game[i]);\n    }\n    for (int i = 0; i < m; i++) {\n        scanf(\"%d\", &guess[i]);\n    }\n    vector < int > result = compare(game, guess);\n    for (int i = 0; i < result.size(); i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/153", "prompt": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nstring Strongest_Extension(string class_name, vector < string > extensions) {\n    string strongest = \"\";\n    int max = -1000;\n    for (int it = 0; it < extensions.size(); it++)\n     {\n        int strength = 0;\n        for (int j = 0; j < extensions [ it ].length(); j++)\n         {\n           \n", "canonical_solution": "print(' @ this is the line to split ## ' char chr = extensions [ it ] [ j ];\n            if (chr >= 65 and chr <= 90) strength+=1;\n            if (chr >= 97 and chr <= 122) strength-=1;\n            }\n        if (strength > max) {\n            max = strength;\n            strongest = extensions [ it ];\n            }\n        }\n    return class_name + ' ' + strongest;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\");\n}\n", "entry_point": "Strongest_Extension", "partial": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            # print('@@this is the line to split##')\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n", "gc": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nstring Strongest_Extension(string class_name, vector < string > extensions) {\n    string strongest = \"\";\n    int max = -1000;\n    for (int it = 0; it < extensions.size(); it++)\n     {\n        int strength = 0;\n        for (int j = 0; j < extensions [ it ].length(); j++)\n         {\n           \n            if (extensions [ it ][ j ] == class_name [ j ])\n             {\n                strength++;\n             }\n            else\n             {\n                strength = 0;\n             }\n         }\n        if (strength > max)\n         {\n            max = strength;\n            strongest = extensions [ it ];\n         }\n     }\n    return class_name + \".\" + strongest;\n}\nint main()\n{\n    string class_name = \"\";\n    vector < string > extensions = {};\n    cin >> class_name;\n    cin >> extensions;\n    cout << Strongest_Extension(class_name, extensions);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/154", "prompt": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool cycpattern_check(string a, string b) {\n    for (int i2 = 0; i2 < b.size(); i2++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' string rotate = b.substr(i2) + b.substr(0, i2);\n        if (a.find(rotate) != string :: npos) return true;\n        }\n    return false;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"abcd\",\"abd\") == false );\n    assert  (cycpattern_check(\"hello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whassup\",\"psus\") == false );\n    assert  (cycpattern_check(\"abab\",\"baa\") == true );\n    assert  (cycpattern_check(\"efef\",\"eeff\") == false );\n    assert  (cycpattern_check(\"himenss\",\"simen\") == true );\n}\n", "entry_point": "cycpattern_check", "partial": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\n    for (int i=0;i<b.size();i++)\n    {\n        # print('@@this is the line to split##')\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n", "gc": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool cycpattern_check(string a, string b) {\n    for (int i2 = 0; i2 < b.size(); i2++)\n     {\n       \n        for (int i1 = 0; i1 < a.size(); i1++)\n        {\n            if (a[i1] == b[i2])\n            {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nint main()\n{\n    string a,b;\n    cin>>a>>b;\n    if(cycpattern_check(a,b))\n        cout<<\"true\";\n    else\n        cout<<\"false\";\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/155", "prompt": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusingnamespace std;\nvector < int > even_odd_count(int num) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string w = to_string(abs(num));\n    int n1 = 0, n2 = 0;\n    for (int i2 = 0; i2 < w.length(); i2++)\n    if (w [ i2 ] % 2 == 1) n1+=1;\n    else n2+=1;\n    return {\n        n2, n1}\n    ;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(-12) , {1, 1}));\n    assert (issame(even_odd_count(123) , {1, 2}));\n}\n", "entry_point": "even_odd_count", "partial": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    # print('@@this is the line to split##')\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n", "gc": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusingnamespace std;\nvector < int > even_odd_count(int num) {\n   \n   vector<int> even_odd;\n   int i = 0;\n   while(num > 0) {\n      if(num % 2 == 0) {\n         even_odd.push_back(2);\n      } else {\n         even_odd.push_back(1);\n      }\n      num = num / 2;\n   }\n   return even_odd;\n}\nint main() {\n   int num;\n   scanf(\"%d\", &num);\n   vector<int> even_odd = even_odd_count(num);\n   for(int i = 0; i < even_odd.size(); i++) {\n      printf(\"%d \", even_odd[i]);\n   }\n   printf(\"\\n\");\n   return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/156", "prompt": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nstring int_to_mini_romank(int pos2) {\n    string current = \"\";\n    vector < string > rep = {\n        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    ;\n    vector < int > num = {\n        1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    ;\n    int pos = 0;\n    while (pos2 > 0)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        while (pos2 >= num [ pos ])\n         {\n            current = current + rep [ pos ];\n            pos2-=num [ pos ];\n            }\n        if (pos2 > 0) pos+=1;\n        }\n    return current;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(251) == \"ccli\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n    assert (int_to_mini_romank(500) == \"d\");\n    assert (int_to_mini_romank(1) == \"i\");\n    assert (int_to_mini_romank(4) == \"iv\");\n    assert (int_to_mini_romank(43) == \"xliii\");\n    assert (int_to_mini_romank(90) == \"xc\");\n    assert (int_to_mini_romank(94) == \"xciv\");\n    assert (int_to_mini_romank(532) == \"dxxxii\");\n    assert (int_to_mini_romank(900) == \"cm\");\n    assert (int_to_mini_romank(994) == \"cmxciv\");\n    assert (int_to_mini_romank(1000) == \"m\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n}\n", "entry_point": "int_to_mini_romank", "partial": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    # print('@@this is the line to split##')\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n", "gc": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nstring int_to_mini_romank(int pos2) {\n    string current = \"\";\n    vector < string > rep = {\n        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    ;\n    vector < int > num = {\n        1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    ;\n    int pos = 0;\n    while (pos2 > 0)\n   \n    {\n        if (pos2 >= num[pos])\n        {\n            pos2 -= num[pos];\n            current += rep[pos];\n        }\n        else\n        {\n            pos++;\n        }\n    }\n    return current;\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%s\\n\", int_to_mini_romank(n).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/157", "prompt": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\n", "canonical_solution": "print(' @ this is the line to split ## ' bool right_angle_triangle(float b2, float b, float c) {\n    if (abs(b2 * b2 + b * b - c * c) < 1e-4 or abs(b2 * b2 + c * c - b * b) < 1e-4 or abs(b * b + c * c - b2 * b2) < 1e-4) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n}\n", "entry_point": "right_angle_triangle", "partial": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n# print('@@this is the line to split##')\nbool right_angle_triangle(float a,float b,float c){\n    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n", "gc": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\n\nbool right_angle_triangle(int a, int b, int c)\n{\n    double s = (double)a + (double)b + (double)c;\n    double s2 = sqrt(s*(s-a)*(s-b)*(s-c));\n    if(s2 == 0)\n        return false;\n    return true;\n}\n\nint main()\n{\n    int a, b, c;\n    while(scanf(\"%d %d %d\", &a, &b, &c)!= EOF)\n    {\n        if(right_angle_triangle(a, b, c))\n            printf(\"right angle triangle\\n\");\n        else\n            printf(\"not right angle triangle\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/158", "prompt": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nstring find_max(vector < string > words) {\n    string max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < words.size(); i++)\n     {\n        string max2 = \"\";\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int j = 0; j < words [ i ].length(); j++)\n        if (find(max2.begin(), max2.end(), words [ i ] [ j ]) == max2.end())\n        max2 = max2 + words [ i ] [ j ];\n        if (max2.length() > maxu or(max2.length() == maxu and words [ i ] < max))\n        \n         {\n            max = words [ i ];\n            maxu = max2.length();\n            }\n        }\n    return max;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n}\n", "entry_point": "find_max", "partial": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        # print('@@this is the line to split##')\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n", "gc": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\",'string\"}) =='string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\",\"cc\"}) == \"aaaaaaa\"\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nstring find_max(vector < string > words) {\n    string max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < words.size(); i++)\n     {\n        string max2 = \"\";\n       \n        for (int j = 0; j < words[i].size(); j++)\n        {\n            if (words[i][j] > maxu)\n            {\n                maxu = words[i][j];\n                max = words[i];\n            }\n            if (words[i][j] < maxu)\n            {\n                maxu = words[i][j];\n                max = words[i];\n            }\n        }\n    }\n    return max;\n}\nint main()\n{\n    vector < string > words;\n    words.push_back(\"name\");\n    words.push_back(\"of\");\n    words.push_back(\"string\");\n    words.push_back(\"game\");\n    words.push_back(\"aaaaaaa\");\n    words.push_back(\"bb\");\n    words.push_back(\"cc\");\n    string max = find_max(words);\n    cout<<max;\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/159", "prompt": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\n", "canonical_solution": "print(' @ this is the line to split ## ' vector < int > eat(int number, int number2, int remaining) {\n    if (number2 > remaining) return {\n        number + remaining, 0}\n    ;\n    return {\n        number + number2, remaining - number2}\n    ;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n}\n", "entry_point": "eat", "partial": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n# print('@@this is the line to split##')\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n", "gc": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\n\nint main(){\n    int number, need, remaining;\n    scanf(\"%d %d %d\", &number, &need, &remaining);\n    vector<int> v;\n    if(number >= need){\n        v.push_back(number - need);\n        v.push_back(remaining);\n    }else{\n        v.push_back(remaining);\n    }\n    printf(\"%d %d\", v[0], v[1]);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/16", "prompt": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nint count_distinct_characters(string str) {\n    vector < char > distinct = {\n        }\n    ;\n    transform(str.begin(), str.end(), str.begin(), :: tolower);\n    for (int nt = 0; nt < str.size(); nt++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        bool isin = false;\n        for (int j = 0; j<distinct.size(); j++)\n        if (distinct [ j ] == str [ nt ])\n        isin = true;\n        if (isin == false) distinct.push_back(str [ nt ]);\n        \n        }\n    return distinct.size();\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"xyzXYZ\") == 3);\n    assert (count_distinct_characters(\"Jerry\") == 4);\n}\n", "entry_point": "count_distinct_characters", "partial": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    # print('@@this is the line to split##')\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n", "gc": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nint count_distinct_characters(string str) {\n    vector < char > distinct = {\n        }\n    ;\n    transform(str.begin(), str.end(), str.begin(), :: tolower);\n    for (int nt = 0; nt < str.size(); nt++)\n   \n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/160", "prompt": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusingnamespace std;\n#include <algorithm>\n#include<stdlib.h> int do_algebra(vector < string > operato, vector < int > operand) {\n    vector < int > num = {\n        }\n    ;\n    vector < int > posto = {\n        }\n    ;\n    for (int i2 = 0; i2 < operand.size(); i2++)\n    posto.push_back(i2);\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"**\") {\n        while (posto [ posto [ i2 ] ] != posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n        while (posto [ posto [ i2 + 1 ] ] != posto [ i2 + 1 ]) posto [ i2 + 1 ] = posto [ posto [ i2 + 1 ] ];\n        operand [ posto [ i2 ] ] = pow(operand [ posto [ i2 ] ], operand [ posto [ i2 + 1 ] ]);\n        posto [ i2 + 1 ] = posto [ i2 ];\n        }\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"*\" or operato [ i2 ] == \"//\")\n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        while (posto [ posto [ i2 ] ] != posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n        while (posto [ posto [ i2 + 1 ] ] != posto [ i2 + 1 ]) posto [ i2 + 1 ] = posto [ posto [ i2 + 1 ] ];\n        if (operato [ i2 ] == \"*\")\n        operand [ posto [ i2 ] ] = operand [ posto [ i2 ] ] * operand [ posto [ i2 + 1 ] ];\n        else\n        operand [ posto [ i2 ] ] = operand [ posto [ i2 ] ] / operand [ posto [ i2 + 1 ] ];\n        posto [ i2 + 1 ] = posto [ i2 ];\n        }\n    for (int i2 = 0; i<operato.size(); i2++)\n    \n    if (operato [ i2 ] == \"+\" or operato [ i2 ] == \"-\") {\n        while (posto [ posto [ i2 ] ] != posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n        while (posto [ posto [ i2 + 1 ] ] != posto [ i2 + 1 ]) posto [ i2 + 1 ] = posto [ posto [ i2 + 1 ] ];\n        if (operato [ i2 ] == \"+\")\n        operand [ posto [ i2 ] ] = operand [ posto [ i2 ] ] + operand [ posto [ i2 + 1 ] ];\n        else\n        operand [ posto [ i2 ] ] = operand [ posto [ i2 ] ] - operand [ posto [ i2 + 1 ] ];\n        posto [ i2 + 1 ] = posto [ i2 ];\n        }\n    return operand [ 0 ];\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "example_test": "", "entry_point": "do_algebra", "partial": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        # print('@@this is the line to split##')\n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n", "gc": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusingnamespace std;\n#include <algorithm>\n#include<stdlib.h> int do_algebra(vector < string > operato, vector < int > operand) {\n    vector < int > num = {\n        }\n    ;\n    vector < int > posto = {\n        }\n    ;\n    for (int i2 = 0; i2 < operand.size(); i2++)\n    posto.push_back(i2);\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"**\") {\n        while (posto [ posto [ i2 ] ]!= posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n        while (posto [ posto [ i2 + 1 ] ]!= posto [ i2 + 1 ]) posto [ i2 + 1 ] = posto [ posto [ i2 + 1 ] ];\n        operand [ posto [ i2 ] ] = pow(operand [ posto [ i2 ] ], operand [ posto [ i2 + 1 ] ]);\n        posto [ i2 + 1 ] = posto [ i2 ];\n        }\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"*\" or operato [ i2 ] == \"//\")\n        while (posto [ posto [ i2 ] ]!= posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"+\" or operato [ i2 ] == \"-\")\n        while (posto [ posto [ i2 ] ]!= posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"**\")\n        while (posto [ posto [ i2 ] ]!= posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"*\" or operato [ i2 ] == \"//\")\n        while (posto [ posto [ i2 ] ]!= posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"+\" or operato [ i2 ] == \"-\")\n        while (posto [ posto [ i2 ] ]!= posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"**\")\n        while (posto [ posto [ i2 ] ]!= posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"*\" or operato [ i2 ] == \"//\")\n        while (posto [ posto [ i2 ] ]!= posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"+\" or operato [ i2 ] == \"-\")\n        while (posto [ posto [ i2 ] ]!= posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"**\")\n        while (posto [ posto [ i2 ] ]!= posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"*\" or operato [ i2 ] == \"//\")\n        while (posto [ posto [ i2 ] ]!= posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"+\" or operato [ i2 ] == \"-\")\n        while (posto [ posto [ i2 ] ]!= posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"**\")\n        while (posto [ posto [ i2 ] ]!= posto [ i2 ]) posto [ i2 ] = posto [ posto [ i2 ] ];\n    for (int i2 = 0; i2 < operato.size(); i2++)\n    if (operato [ i2 ] == \"*\" or operato [ i2 ] == \"//\")\n        while (posto [ posto [ i2 ] ]!= posto", "passed": 0}
{"task_id": "CPP/161", "prompt": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring solve(string s) {\n    int nletter = 0;\n    string out = \"\";\n    for (int i = 0; i < s.length(); i++)\n     {\n        char out2 = s [ i ];\n        if (out2 >= 65 and out2 <= 90) out2 = out2 + 32;\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' else\nif (out2 >= 97 and out2 <= 122) out2 = out2 - 32;\n        else nletter+=1;\n        out = out + out2;\n        }\n    if (nletter == s.length())\n     {\n        string p(s.rbegin(), s.rend());\n        return p;\n        }\n    else return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n}\n", "entry_point": "solve", "partial": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        # print('@@this is the line to split##')\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n", "gc": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring solve(string s) {\n    int nletter = 0;\n    string out = \"\";\n    for (int i = 0; i < s.length(); i++)\n     {\n        char out2 = s [ i ];\n        if (out2 >= 65 and out2 <= 90) out2 = out2 + 32;\n       \n        if (out2 >= 97 and out2 <= 122) out2 = out2 - 32;\n        out = out + out2;\n        nletter++;\n    }\n    if (nletter == 0) out = \"\";\n    return out;\n}\nint main()\n{\n    string s;\n    cin>>s;\n    cout<<solve(s);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/162", "prompt": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include <stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusingnamespace std;\nstring string_to_md5(string text) {\n    unsigned char md [ 16 ];\n    if (text.length() == 0) return \"None\";\n    MD5_CTX c;\n    int c2;\n    MD5_Init( & c);\n    MD5_Update( & c,(unsigned char *) text.c_str(), text.length());\n    MD5_Final(md, & c);\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string out_str = \"\";\n    for (int c2 = 0; c2 < 16; c2++)\n     {\n        char w;\n        if (md [ c2 ] < 160) w = 48 + md [ c2 ] / 16;\n        else w = 87 + md [ c2 ] / 16;\n        out_str = out_str + w;\n        if (md [ c2 ] % 16 < 10) w = 48 + md [ c2 ] % 16;\n        else w = 87 + md [ c2 ] % 16;\n        out_str = out_str + w;\n        }\n    return out_str;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert (string_to_md5(\"\") == \"None\");\n    assert (string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert (string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n", "entry_point": "string_to_md5", "partial": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    # print('@@this is the line to split##')\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n", "gc": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include <stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusingnamespace std;\nstring string_to_md5(string text) {\n    unsigned char md [ 16 ];\n    if (text.length() == 0) return \"None\";\n    MD5_CTX c;\n    int c2;\n    MD5_Init( & c);\n    MD5_Update( & c,(unsigned char *) text.c_str(), text.length());\n    MD5_Final(md, & c);\n   \n    for (int i = 0; i < 16; i++) {\n        c2 = (int) md[i];\n        c2 = c2 & 0xff;\n        printf(\"%02x\", c2);\n    }\n    return string( (char *) md);\n}\n\n/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include <stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusingnamespace std;\nstring string_to_md5(string text) {\n    unsigned char md [ 16 ];\n    if (text.length() == 0) return \"None\";\n    MD5_CTX c;\n    int c2;\n    MD5_Init( & c);\n    MD5_Update( & c,(unsigned char *) text.c_str(), text.length());\n    MD5_Final(md, & c);\n   \n    for (int i = 0; i < 16; i++) {\n        c2 = (int) md[i];\n        c2 = c2 & 0xff;\n        printf(\"%02x\", c2);\n    }\n    return string( (char *) md);\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/163", "prompt": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > generate_integers(int a, int b) {\n    int m;\n    if (b < a)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' m = a; a = b; b = m;\n        }\n    \n    vector < int > out = {\n        }\n    ;\n    for (int c = a; c <= b; c++)\n    if (c < 10 and c % 2 == 0) out.push_back(c);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 8) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(8, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10,14) , {}));\n}\n", "entry_point": "generate_integers", "partial": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    int m;\n    if (b<a)\n    {\n        # print('@@this is the line to split##')\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n", "gc": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > generate_integers(int a, int b) {\n    int m;\n    if (b < a)\n     {\n       \n        m = a;\n        a = b;\n        b = m;\n     }\n    vector<int> v;\n    for (int i = a; i <= b; i++)\n    {\n        if (i % 2 == 0)\n        {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main()\n{\n    int a, b;\n    scanf(\"%d %d\", &a, &b);\n    vector<int> v = generate_integers(a, b);\n    for (int i = 0; i < v.size(); i++)\n    {\n        printf(\"%d \", v[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/17", "prompt": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < int > parse_music(string current2) {\n    string current = \"\";\n    vector < int > out = {\n        }\n    ;\n    if (current2.length() > 0)\n    current2 = current2 + ' ';\n    for (int i = 0; i < current2.length(); i++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (current2 [ i ] == ' ')\n         {\n            if (current == \"o\") out.push_back(4);\n            if (current == \"o|\") out.push_back(2);\n            if (current == \".|\") out.push_back(1);\n            current = \"\";\n            }\n        else current+=current2 [ i ];\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"o o| .| o| o| .| .| .| .| o o\") , {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}));\n}\n", "entry_point": "parse_music", "partial": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        # print('@@this is the line to split##')\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n", "gc": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o|.| o| o|.|.|.|.| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < int > parse_music(string current2) {\n    string current = \"\";\n    vector < int > out = {\n        }\n    ;\n    if (current2.length() > 0)\n    current2 = current2 +'';\n    for (int i = 0; i < current2.length(); i++)\n     {\n       \n        if (current2[i] == 'o')\n        {\n            out.push_back(4);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(2);\n        }\n        else if (current2[i] == '.')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == '|')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(4);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(2);\n        }\n        else if (current2[i] == '.')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == '|')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(4);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(2);\n        }\n        else if (current2[i] == '.')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == '|')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(4);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(2);\n        }\n        else if (current2[i] == '.')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == '|')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(4);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(2);\n        }\n        else if (current2[i] == '.')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == '|')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(4);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(2);\n        }\n        else if (current2[i] == '.')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == '|')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(4);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(2);\n        }\n        else if (current2[i] == '.')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == '|')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(4);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(2);\n        }\n        else if (current2[i] == '.')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == '|')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(4);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(2);\n        }\n        else if (current2[i] == '.')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == '|')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(4);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(2);\n        }\n        else if (current2[i] == '.')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == '|')\n        {\n            out.push_back(1);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(4);\n        }\n        else if (current2[i] == 'o')\n        {\n            out.push_back(2);\n        }\n        else if (current2[i] == '.')\n        {\n            out.push_back(1);\n        }\n", "passed": 0}
{"task_id": "CPP/18", "prompt": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nint how_many_times(string str, string substring) {\n    int out = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (str.length() == 0) return 0;\n    for (int i2 = 0; i2 <= str.length() - substring.length(); i2++)\n    if (str.substr(i2, substring.length()) == substring)\n    out+=1;\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"a\") == 0);\n    assert (how_many_times(\"aaa\", \"a\") == 3);\n    assert (how_many_times(\"aaaa\", \"aa\") == 3);\n}\n", "entry_point": "how_many_times", "partial": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int out=0;\n    # print('@@this is the line to split##')\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n", "gc": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nint how_many_times(string str, string substring) {\n    int out = 0;\n   \n    for(int i = 0; i < str.length(); i++) {\n        for(int j = 0; j < substring.length(); j++) {\n            if(str[i] == substring[j]) {\n                out++;\n            }\n        }\n    }\n    return out;\n}\nint main() {\n    string str, substr;\n    cin >> str >> substr;\n    cout << how_many_times(str, substr);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/19", "prompt": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include <stdio.h>\n#include<string>\n#include<map>\nusingnamespace std;\nstring sort_numbers(string numbers) {\n    map < string, int > tonum = {\n         {\n            \"zero\", 0}\n        , {\n            \"one\", 1}\n        , {\n            \"two\", 2}\n        , {\n            \"three\", 3}\n        , {\n            \"four\", 4}\n        , {\n            \"five\", 5}\n        , {\n            \"six\", 6}\n        , {\n            \"seven\", 7}\n        , {\n            \"eight\", 8}\n        , {\n            \"nine\", 9}\n        }\n    ;\n    map < int, string > numto = {\n         {\n            0, \"zero\"}\n        , {\n            1, \"one\"}\n        , {\n            2, \"two\"}\n        , {\n            3, \"three\"}\n        , {\n            4, \"four\"}\n        , {\n            5, \"five\"}\n        , {\n            6, \"six\"}\n        , {\n            7, \"seven\"}\n        , {\n            8, \"eight\"}\n        , {\n            9, \"nine\"}\n        }\n    ;\n    int count [ 10 ];\n    for (int i2 = 0; i2 < 10; i2++)\n    count [ i2 ] = 0;\n    string out = \"\", current = \"\";\n    if (numbers.length() > 0) numbers = numbers + ' ';\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i2 = 0; i<numbers.length(); i2++)\n    \n    if (numbers [ i2 ] == ' ')\n     {\n        count [ tonum [ current ] ]+=1;\n        current = \"\";\n        }\n    else current+=numbers [ i2 ];\n    for (int i2 = 0; i2 < 10; i2++)\n    for (int j = 0; j < count [ i2 ]; j++)\n    out = out + numto [ i2 ] + ' ';\n    if (out.length() > 0) out.pop_back();\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"three one five\") == \"one three five\");\n}\n", "entry_point": "sort_numbers", "partial": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    # print('@@this is the line to split##')\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n", "gc": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\",'six\",'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include <stdio.h>\n#include<string>\n#include<map>\nusingnamespace std;\nstring sort_numbers(string numbers) {\n    map < string, int > tonum = {\n         {\n            \"zero\", 0}\n       , {\n            \"one\", 1}\n       , {\n            \"two\", 2}\n       , {\n            \"three\", 3}\n       , {\n            \"four\", 4}\n       , {\n            \"five\", 5}\n       , {\n            \"six\", 6}\n       , {\n            \"seven\", 7}\n       , {\n            \"eight\", 8}\n       , {\n            \"nine\", 9}\n        }\n    ;\n    map < int, string > numto = {\n         {\n            0, \"zero\"}\n       , {\n            1, \"one\"}\n       , {\n            2, \"two\"}\n       , {\n            3, \"three\"}\n       , {\n            4, \"four\"}\n       , {\n            5, \"five\"}\n       , {\n            6, \"six\"}\n       , {\n            7, \"seven\"}\n       , {\n            8, \"eight\"}\n       , {\n            9, \"nine\"}\n        }\n    ;\n    int count [ 10 ];\n    for (int i2 = 0; i2 < 10; i2++)\n    count [ i2 ] = 0;\n    string out = \"\", current = \"\";\n    if (numbers.length() > 0) numbers = numbers +'';\n   \n    for (int i = 0; i < numbers.length(); i++) {\n        if (tonum.find(numbers.substr(i, 1))!= tonum.end()) {\n            count [ tonum[numbers.substr(i, 1)] ]++;\n            current = numto[tonum[numbers.substr(i, 1)]];\n        }\n        else {\n            current = \"\";\n        }\n        out = out + current;\n    }\n    return out;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/2", "prompt": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\n", "canonical_solution": "print(' @ this is the line to split ## ' float truncate_number(float f) {\n    return f - int(f);\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n}\n", "entry_point": "truncate_number", "partial": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n# print('@@this is the line to split##')\nfloat truncate_number(float number){\n    return number-int(number);\n}\n", "gc": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\n\nint truncate_number(double number)\n{\n    int int_part = (int)number;\n    double decimals = number - int_part;\n    if(decimals >= 0.5)\n    {\n        int_part++;\n    }\n    return int_part;\n}\n\nint main()\n{\n    double number;\n    printf(\"Enter a number: \");\n    scanf(\"%lf\", &number);\n    printf(\"The decimal part of %lf is %d\\n\", number, truncate_number(number));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/20", "prompt": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nvector < float > find_closest_elements(vector < float > numbers) {\n    vector < float > number = {\n        }\n    ;\n    for (int i = 0; i < numbers.size(); i++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int j = i + 1; j<numbers.size(); j++)\n    \n    if (number.size() == 0 or abs(numbers [ i ] - numbers [ j ]) < abs(number [ 0 ] - number [ 1 ]))\n    number = {\n        numbers [ i ], numbers [ j ]}\n    ;\n    if (number [ 0 ] > number [ 1 ])\n    number = {\n        number [ 1 ], number [ 0 ]}\n    ;\n    return number;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n}\n", "entry_point": "find_closest_elements", "partial": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    # print('@@this is the line to split##')\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n", "gc": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nvector < float > find_closest_elements(vector < float > numbers) {\n    vector < float > number = {\n        }\n    ;\n    for (int i = 0; i < numbers.size(); i++)\n   \n    {\n        for (int j = 0; j < numbers.size(); j++)\n        {\n            if (abs(numbers[i] - numbers[j]) < abs(numbers[i] - number[j]))\n            {\n                number[i] = numbers[i];\n            }\n            else\n            {\n                number[j] = numbers[j];\n            }\n        }\n    }\n    return number;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/21", "prompt": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nvector < float > rescale_to_unit(vector < float > numbers) {\n    float min = 100000, max = -100000;\n    for (int i2 = 0; i2 < numbers.size(); i2++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (numbers [ i2 ] < min) min = numbers [ i2 ];\n        if (numbers [ i2 ] > max) max = numbers [ i2 ];\n        }\n    for (int i2 = 0; i<numbers.size(); i2++)\n    numbers [ i2 ] =(numbers [ i2 ] - min) /(max - min);\n    return numbers;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n}\n", "entry_point": "rescale_to_unit", "partial": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        # print('@@this is the line to split##')\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n", "gc": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nvector < float > rescale_to_unit(vector < float > numbers) {\n    float min = 100000, max = -100000;\n    for (int i2 = 0; i2 < numbers.size(); i2++)\n   \n    {\n        if (numbers[i2] < min)\n            min = numbers[i2];\n        if (numbers[i2] > max)\n            max = numbers[i2];\n    }\n    float scale = 1.0 / (max - min);\n    vector < float > result;\n    for (int i2 = 0; i2 < numbers.size(); i2++)\n        result.push_back((numbers[i2] - min) * scale);\n    return result;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/22", "prompt": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list> typedef std :: list < boost :: any > list_any;\nusing namespace std;\nvector < int > filter_integers(list_any values) {\n    list_any :: iterator anything;\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' boost :: any anyone;\n    vector < int > out;\n    for (anything = values.begin(); anything != values.end(); anything++)\n     {\n        anyone = * anything;\n        if (anyone.type() == typeid(int))\n        out.push_back(boost :: any_cast < int >( * anything));\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({string(\"a\"), 3.14, 5}),{5}));\n    assert (issame(filter_integers({1, 2, 3, string(\"abc\"), {}, {}}),{1,2,3}));\n}\n", "entry_point": "filter_integers", "partial": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    list_any::iterator it;\n    # print('@@this is the line to split##')\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n", "gc": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list> typedef std :: list < boost :: any > list_any;\nusing namespace std;\nvector < int > filter_integers(list_any values) {\n    list_any :: iterator anything;\n   \n    vector < int > result;\n    for (anything = values.begin(); anything!= values.end(); ++anything) {\n        if (boost::any_cast<int>((*anything))!= 0) {\n            result.push_back(boost::any_cast<int>((*anything)));\n        }\n    }\n    return result;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/23", "prompt": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\n", "canonical_solution": "print(' @ this is the line to split ## ' int strlen(std2 str) {\n    return str.length();\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"abc\") == 3);\n}\n", "entry_point": "strlen", "partial": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\n# print('@@this is the line to split##')\nint strlen(string str){\n    return str.length();\n}\n", "gc": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nint main()\n{\n    string str;\n    int len;\n    printf(\"Enter a string: \");\n    cin>>str;\n    len=str.length();\n    printf(\"Length of string is %d\\n\",len);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/24", "prompt": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include <stdio.h>\nusingnamespace std;\nint largest_divisor(int n) {\n    for (int c = 2; c * c <= n; c++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (n % c == 0) return n / c;\n    return 1;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(15) == 5);\n}\n", "entry_point": "largest_divisor", "partial": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    for (int i=2;i*i<=n;i++)\n        # print('@@this is the line to split##')\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n", "gc": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include <stdio.h>\nusingnamespace std;\nint largest_divisor(int n) {\n    for (int c = 2; c * c <= n; c++)\n   \n    return n / c;\n}\n\nint main() {\n    int n;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    printf(\"The largest divisor of %d is %d\\n\", n, largest_divisor(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/25", "prompt": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > factorize(int n) {\n    vector < int > out = {\n        }\n    ;\n    for (int n2 = 2; n2 * n2 <= n; n2++)\n    if (n % n2 == 0)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        n = n / n2;\n        out.push_back(n2);\n        n2-=1;\n        }\n    out.push_back(n);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(25) , {5,5}));\n    assert (issame(factorize(70) , {2,5,7})); \n}\n", "entry_point": "factorize", "partial": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        # print('@@this is the line to split##')\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n", "gc": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > factorize(int n) {\n    vector < int > out = {\n        }\n    ;\n    for (int n2 = 2; n2 * n2 <= n; n2++)\n    if (n % n2 == 0)\n   \n    {\n        out.push_back(n2);\n        while (n % n2 == 0)\n        {\n            n /= n2;\n        }\n    }\n    return out;\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > out = factorize(n);\n    for (int i = 0; i < out.size(); i++)\n    {\n        printf(\"%d \", out[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/26", "prompt": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > remove_duplicates(vector < int > numbers) {\n    vector < int > out = {\n        }\n    ;\n    vector < int > has1 = {\n        }\n    ;\n    vector < int > has2 = {\n        }\n    ;\n    for (int i2 = 0; i2 < numbers.size(); i2++)\n     {\n        if (find(has2.begin(), has2.end(), numbers [ i2 ]) != has2.end()) continue;\n        if (find(has1.begin(), has1.end(), numbers [ i2 ]) != has1.end())\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n            \n            has2.push_back(numbers [ i2 ]);\n            }\n        else has1.push_back(numbers [ i2 ]);\n        }\n    for (int i2 = 0; i2 < numbers.size(); i2++)\n    if (find(has2.begin(), has2.end(), numbers [ i2 ]) == has2.end())\n    out.push_back(numbers [ i2 ]);\n    return out;\n    \n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(remove_duplicates({1, 2, 3, 2,4}) , {1,  3, 4}));\n}\n", "entry_point": "remove_duplicates", "partial": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        # print('@@this is the line to split##')\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n", "gc": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > remove_duplicates(vector < int > numbers) {\n    vector < int > out = {\n        }\n    ;\n    vector < int > has1 = {\n        }\n    ;\n    vector < int > has2 = {\n        }\n    ;\n    for (int i2 = 0; i2 < numbers.size(); i2++)\n     {\n        if (find(has2.begin(), has2.end(), numbers [ i2 ])!= has2.end()) continue;\n        if (find(has1.begin(), has1.end(), numbers [ i2 ])!= has1.end())\n       \n        {\n            has2.push_back(numbers [ i2 ]);\n            continue;\n        }\n        has1.push_back(numbers [ i2 ]);\n        out.push_back(numbers [ i2 ]);\n    }\n    return out;\n}\nint main()\n{\n    int a[] = {1, 2, 3, 2, 4};\n    vector < int > b(a, a + sizeof(a) / sizeof(int));\n    vector < int > c = remove_duplicates(b);\n    for (int i = 0; i < c.size(); i++)\n    {\n        printf(\"%d \", c [ i ]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/27", "prompt": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring filp_case(string str) {\n    string out = \"\";\n    for (int i = 0; i < str.length(); i++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' char mask = str [ i ];\n        if (mask >= 97 and mask <= 122) {\n            mask-=32;}\n        else\n        if (mask >= 65 and mask <= 90) {\n            mask+=32;}\n        out = out + mask;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"\") == \"\");\n    assert (filp_case(\"Hello!\") == \"hELLO!\");\n    assert (filp_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"Hello\") == \"hELLO\");\n}\n", "entry_point": "filp_case", "partial": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        # print('@@this is the line to split##')\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n", "gc": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring filp_case(string str) {\n    string out = \"\";\n    for (int i = 0; i < str.length(); i++)\n     {\n       \n        if (str[i] >= 'a' && str[i] <= 'z')\n        {\n            out += (char)(str[i] + ('A' - 'a'));\n        }\n        else if (str[i] >= 'A' && str[i] <= 'Z')\n        {\n            out += (char)(str[i] - ('A' - 'a'));\n        }\n        else\n        {\n            out += str[i];\n        }\n    }\n    return out;\n}\nint main()\n{\n    string str;\n    cin>>str;\n    cout<<filp_case(str);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/28", "prompt": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nstring concatenate(vector < string > strings) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string out = \"\";\n    for (int i2 = 0; i2 < strings.size(); i2++)\n    out = out + strings [ i2 ];\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n    assert (concatenate({\"a\", \"b\", \"c\"}) == \"abc\");\n}\n", "entry_point": "concatenate", "partial": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    # print('@@this is the line to split##')\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n", "gc": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nstring concatenate(vector < string > strings) {\n   \n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++) {\n        result += strings[i];\n    }\n    return result;\n}\n\nint main() {\n    vector < string > strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"b\");\n    strings.push_back(\"c\");\n    cout << concatenate(strings);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/29", "prompt": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > filter_by_prefix(vector < string > strings, string prefix) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' vector < string > out = {\n        }\n    ;\n    for (int x = 0; x < strings.size(); x++)\n    if (strings [ x ].substr(0, prefix.length()) == prefix) out.push_back(strings [ x ]);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"a\") , {}));\n    assert (issame(filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\") , {\"abc\", \"array\"}));\n}\n", "entry_point": "filter_by_prefix", "partial": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    # print('@@this is the line to split##')\n    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n", "gc": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > filter_by_prefix(vector < string > strings, string prefix) {\n   \n    vector < string > output;\n    for(int i = 0; i < strings.size(); i++) {\n        if(strings[i].find(prefix) == 0) {\n            output.push_back(strings[i]);\n        }\n    }\n    return output;\n}\n\nint main() {\n    vector < string > strings = { \"abc\", \"bcd\", \"cde\", \"vector\" };\n    vector < string > output = filter_by_prefix(strings, \"a\");\n    for(int i = 0; i < output.size(); i++) {\n        printf(\"%s\\n\", output[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/3", "prompt": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nbool below_zero(vector < int > operations) {\n    int num = 0;\n    for (int num2 = 0; num2 < operations.size(); num2++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        num+=operations [ num2 ];\n        if (num < 0) return true;\n        }\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({1, 2, 3}) == false);\n    assert (below_zero({1, 2, -4, 5}) == true);\n}\n", "entry_point": "below_zero", "partial": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    # print('@@this is the line to split##')\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n", "gc": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nbool below_zero(vector < int > operations) {\n    int num = 0;\n    for (int num2 = 0; num2 < operations.size(); num2++)\n   \n    return false;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/30", "prompt": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nvector < float > get_positive(vector < float > l) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' vector < float > out = {\n        }\n    ;\n    for (int i2 = 0; i2 < l.size(); i2++)\n    if (l [ i2 ] > 0) out.push_back(l [ i2 ]);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, 2, -4, 5, 6}) , {2, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, -3,3, 9, 0, 123, 1, -10}) , {5, 3, 2,  3, 9, 123, 1}));\n}\n", "entry_point": "get_positive", "partial": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    # print('@@this is the line to split##')\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n", "gc": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nvector < float > get_positive(vector < float > l) {\n   \n    vector < float > r;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] > 0) {\n            r.push_back(l[i]);\n        }\n    }\n    return r;\n}\nint main() {\n    vector < float > l;\n    l.push_back(-1);\n    l.push_back(2);\n    l.push_back(-4);\n    l.push_back(5);\n    l.push_back(6);\n    l = get_positive(l);\n    for(int i = 0; i < l.size(); i++) {\n        printf(\"%f\\n\", l[i]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/31", "prompt": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include <stdio.h>\nusingnamespace std;\nbool is_prime(long long n) {\n    if (n < 2) return false;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (long long n2 = 2; n2 * n2 <= n; n2++)\n    if (n % n2 == 0) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n}\n", "entry_point": "is_prime", "partial": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if (n<2) return false;\n    # print('@@this is the line to split##')\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n", "gc": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include <stdio.h>\nusingnamespace std;\nbool is_prime(long long n) {\n    if (n < 2) return false;\n   \n    for (long long i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int t;\n    scanf(\"%d\", &t);\n    while (t--) {\n        long long n;\n        scanf(\"%lld\", &n);\n        if (is_prime(n)) printf(\"Prime\\n\");\n        else printf(\"Not prime\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\ndouble value2 = 0;\ndouble value;\nvalue = poly(xs, value2);\nwhile (abs(value) > 1e-6)\n {\n    double driv = 0;\n    for (int i = 1; i < xs.size(); i++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' driv+=xs [ i ] * pow(value2, i - 1) * i;\n        }\n    value2 = value2 - value / driv;\n    value = poly(xs, value2);\n    }\nreturn value2;\n\n}", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (find_zero({1,2})+0.5<1e-4);\n    assert (find_zero({-6,11,-6,1})-1<1e-4);\n}\n", "entry_point": "for", "partial": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            # print('@@this is the line to split##')\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n", "gc": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\ndouble value2 = 0;\ndouble value;\nvalue = poly(xs, value2);\nwhile (abs(value) > 1e-6)\n {\n    double driv = 0;\n    for (int i = 1; i < xs.size(); i++)\n     {\n       \n        driv = driv + xs[i] * pow(value2, i);\n     }\n    value2 = value2 - driv / value;\n    value = poly(xs, value2);\n }\nreturn value2;\n}\n\nint main()\n{\n    vector<double> xs;\n    double x, y;\n    int i;\n    for (i = 0; i < 10; i++)\n    {\n        xs.push_back(i);\n    }\n    x = find_zero(xs);\n    y = poly(xs, x);\n    printf(\"x = %f, y = %f\\n\", x, y);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/33", "prompt": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > sort_third(vector < int > l) {\n    vector < int > third = {\n        }\n    ;\n    int i2;\n    for (i2 = 0; i2 * 3 < l.size(); i2++)\n    third.push_back(l [ i2 * 3 ]);\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' sort(third.begin(), third.end());\n    \n    vector < int > out = {\n        }\n    ;\n    for (i2 = 0; i2 < l.size(); i2++)\n     {\n        if (i2 % 3 == 0) {\n            out.push_back(third [ i2 / 3 ]);}\n        else out.push_back(l [ i2 ]);\n        }\n    return out;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , {1, 2, 3}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n}\n", "entry_point": "sort_third", "partial": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    # print('@@this is the line to split##')\n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n", "gc": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > sort_third(vector < int > l) {\n    vector < int > third = {\n        }\n    ;\n    int i2;\n    for (i2 = 0; i2 * 3 < l.size(); i2++)\n    third.push_back(l [ i2 * 3 ]);\n   \n    sort(third.begin(), third.end());\n    return third;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/34", "prompt": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > unique(vector < int > l) {\n    vector < int > l2 = {\n        }\n    ;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i =0;i<l.size(); i++)\n    if (find(l2.begin(), l2.end(), l [ i ]) == l2.end())\n    l2.push_back(l [ i ]);\n    sort(l2.begin(), l2.end());\n    return l2;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "entry_point": "unique", "partial": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    vector<int> out={};\n    # print('@@this is the line to split##')\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "gc": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > unique(vector < int > l) {\n    vector < int > l2 = {\n        }\n    ;\n   \n    sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i]!= l2[i]) {\n            l2.push_back(l[i]);\n        }\n    }\n    return l2;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > v;\n    for (int i = 0; i < n; i++) {\n        int x;\n        scanf(\"%d\", &x);\n        v.push_back(x);\n    }\n    vector < int > l = unique(v);\n    for (int i = 0; i < l.size(); i++) {\n        printf(\"%d \", l[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/35", "prompt": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nfloat max_element(vector < float > l) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' float max = -10000;\n    for (int t = 0; t < l.size(); t++)\n    if (max < l [ t ]) max = l [ t ];\n    return max;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})- 123)<1e-4);\n}\n", "entry_point": "max_element", "partial": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n  # print('@@this is the line to split##')\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n", "gc": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nfloat max_element(vector < float > l) {\n   \n   float max = l[0];\n   for(int i = 1; i < l.size(); i++)\n      if(l[i] > max)\n         max = l[i];\n   return max;\n}\nint main() {\n   \n   vector < float > l;\n   l.push_back(1);\n   l.push_back(2);\n   l.push_back(3);\n   l.push_back(5);\n   l.push_back(3);\n   l.push_back(9);\n   l.push_back(0);\n   l.push_back(123);\n   l.push_back(1);\n   l.push_back(-10);\n   printf(\"%f\\n\", max_element(l));\n   return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/36", "prompt": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include <stdio.h>\nusingnamespace std;\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int f = 0; f < n; f++)\n    if (f % 11 == 0 or f % 13 == 0)\n     {\n        int q = f;\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nwhile (q > 0)\n         {\n            if (q % 10 == 7) count+=1;\n            q = q / 10;\n            }\n        }\n    return count;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n}\n", "entry_point": "fizz_buzz", "partial": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        # print('@@this is the line to split##')\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n", "gc": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include <stdio.h>\nusingnamespace std;\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int f = 0; f < n; f++)\n    if (f % 11 == 0 or f % 13 == 0)\n     {\n        int q = f;\n       \n        while (q % 11 == 0 or q % 13 == 0)\n        {\n            count++;\n            q /= 11;\n        }\n    }\n    return count;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/37", "prompt": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < float > sort_even(vector < float > l) {\n    vector < float > out = {\n        }\n    ;\n    vector < float > even = {\n        }\n    ;\n    for (int i2 = 0; i2 * 2 < l.size(); i2++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' even.push_back(l [ i2 * 2 ]);\n    sort(even.begin(), even.end());\n    for (int i2 = 0; i2 < l.size(); i2++)\n     {\n        if (i2 % 2 == 0) out.push_back(even [ i2 / 2 ]);\n        if (i2 % 2 == 1) out.push_back(l [ i2 ]);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 6,3,4}) , {3,6,5,4}));\n}\n", "entry_point": "sort_even", "partial": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        # print('@@this is the line to split##')\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n", "gc": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < float > sort_even(vector < float > l) {\n    vector < float > out = {\n        }\n    ;\n    vector < float > even = {\n        }\n    ;\n    for (int i2 = 0; i2 * 2 < l.size(); i2++)\n   \n    {\n        for (int i = i2 * 2; i < l.size(); i += 2)\n        {\n            if (l[i] > l[i + 1])\n            {\n                swap(l[i], l[i + 1]);\n            }\n        }\n    }\n    return out;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\nint l = s.length();\nint num =(l + 2) / 3;\nstring output2, output;\nint i;\nfor (i = 0; i * 3 < l; i++)\n {\n    output2 = s.substr(i * 3, 3);\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (output2.length() == 3) output2 = output2 [ 2 ] + output2.substr(0, 2);\n    output = output + output2;\n    }\nreturn output;\n\n\n}", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n", "example_test": "", "entry_point": "decode_cyclic", "partial": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        # print('@@this is the line to split##')\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n\n\n}\n", "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\nint l = s.length();\nint num =(l + 2) / 3;\nstring output2, output;\nint i;\nfor (i = 0; i * 3 < l; i++)\n {\n    output2 = s.substr(i * 3, 3);\n   \n    if (output2.length() == 3)\n    {\n        output2 = output2.substr(1, 1) + output2[0] + output2.substr(2, 1);\n    }\n    output = output + output2;\n }\nreturn output;\n}\n\nint main(){\n    string s;\n    cin>>s;\n    cout<<encode_cyclic(s)<<endl;\n    cout<<decode_cyclic(encode_cyclic(s))<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/39", "prompt": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include <stdio.h>\nusingnamespace std;\nint prime_fib(int n) {\n    int f, f2, m;\n    f = 1; f2 = 2;\n    int count = 0;\n    while (count < n)\n     {\n        f = f + f2;\n        m = f; f = f2; f2 = m;\n       \n", "canonical_solution": "print(' @ this is the line to split ## ' bool isprime = true;\n        for (int w = 2; w * w <= f; w++)\n        if (f % w == 0)\n         {\n            isprime = false; break;\n            }\n        if (isprime) count+=1;\n        if (count == n) return f;\n        }\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n}\n", "entry_point": "prime_fib", "partial": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        # print('@@this is the line to split##')\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n", "gc": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include <stdio.h>\nusingnamespace std;\nint prime_fib(int n) {\n    int f, f2, m;\n    f = 1; f2 = 2;\n    int count = 0;\n    while (count < n)\n     {\n        f = f + f2;\n        m = f; f = f2; f2 = m;\n       \n        if (f % 2 == 0)\n            count++;\n    }\n    return f;\n}\n\nint main() {\n    int n;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    printf(\"%d-th fibonacci number is %d\\n\", n, prime_fib(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/4", "prompt": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nfloat mean_absolute_deviation(vector < float > numbers) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i2 = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (i2 = 0; i<numbers.size(); i2++)\n    sum+=numbers [ i2 ];\n    avg = sum / numbers.size();\n    msum = 0;\n    for (i2 = 0; i2 < numbers.size(); i2++)\n    msum+=abs(numbers [ i2 ] - avg);\n    return msum / numbers.size();\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n}\n", "entry_point": "mean_absolute_deviation", "partial": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    # print('@@this is the line to split##')\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n", "gc": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nfloat mean_absolute_deviation(vector < float > numbers) {\n    float sum = 0;\n    float avg, msum, mavg;\n    int i2 = 0;\n   \n    for (i2 = 0; i2 < numbers.size(); i2++) {\n        sum += numbers[i2];\n    }\n    avg = sum / numbers.size();\n    msum = 0;\n    mavg = 0;\n    for (i2 = 0; i2 < numbers.size(); i2++) {\n        msum += pow(numbers[i2] - avg, 2);\n        mavg += pow(numbers[i2] - mavg, 2);\n    }\n    return sqrt(msum / numbers.size() - mavg / numbers.size());\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/40", "prompt": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nbool triples_sum_to_zero(vector < int > r) {\n    for (int i = 0; i < r.size(); i++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int j =i+1;j<l.size(); j++)\n    for (int k = j + 1; k < r.size(); k++)\n    if (r [ i ] + r [ j ] + r [ k ] == 0) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n}\n", "entry_point": "triples_sum_to_zero", "partial": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n    # print('@@this is the line to split##')\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n", "gc": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nbool triples_sum_to_zero(vector < int > r) {\n    for (int i = 0; i < r.size(); i++)\n   \n    return false;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > r;\n    for (int i = 0; i < n; i++) {\n        int x;\n        scanf(\"%d\", &x);\n        r.push_back(x);\n    }\n    if (triples_sum_to_zero(r))\n        printf(\"true\");\n    else\n        printf(\"false\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/41", "prompt": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include <stdio.h>\nusingnamespace std;\n", "canonical_solution": "print(' @ this is the line to split ## ' int car_race_collision(int In) {\n    return In * In;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n", "example_test": "", "entry_point": "car_race_collision", "partial": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\n# print('@@this is the line to split##')\nint car_race_collision(int n){\n    return n*n;\n}\n", "gc": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include <stdio.h>\nusingnamespace std;\n\nint main()\n{\n    int n, i, j, k, l, m, n1, n2, count = 0;\n    printf(\"Enter the number of cars: \");\n    scanf(\"%d\", &n);\n    printf(\"Enter the number of cars: \");\n    scanf(\"%d\", &m);\n    int a[n][m], b[n][m];\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            scanf(\"%d\", &a[i][j]);\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            scanf(\"%d\", &b[i][j]);\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            for(k = 0; k < m; k++)\n            {\n                for(l = 0; l < m; l++)\n                {\n                    if(i == 0 && j == 0)\n                    {\n                        n1 = a[i][j];\n                        n2 = b[i][k];\n                    }\n                    else if(i == 0)\n                    {\n                        n1 = a[i][j];\n                        n2 = b[i][k];\n                    }\n                    else if(j == 0)\n                    {\n                        n1 = a[i][j];\n                        n2 = b[i][k];\n                    }\n                    else\n                    {\n                        n1 = a[i][j];\n                        n2 = b[i][k];\n                    }\n                    if(n1 == n2)\n                    {\n                        if(k < l)\n                        {\n                            if(a[i][j] == b[i][k] && a[i][j] == b[i][l])\n                            {\n                                count++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    printf(\"The number of collisions is %d\", count);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/42", "prompt": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > incr_list(vector < int > r) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i =0;i<l.size(); i++)\n    r [ i ]+=1;\n    return r;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({1, 2, 3}) , {2, 3, 4}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "entry_point": "incr_list", "partial": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    # print('@@this is the line to split##')\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n", "gc": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > incr_list(vector < int > r) {\n   \n    vector < int > r1;\n    for(int i=0;i<r.size();i++)\n    {\n        r1.push_back(r[i]+1);\n    }\n    return r1;\n}\nint main()\n{\n    vector < int > r;\n    int n;\n    printf(\"Enter the size of the vector\\n\");\n    scanf(\"%d\",&n);\n    r.push_back(1);\n    r.push_back(2);\n    r.push_back(3);\n    r=incr_list(r);\n    for(int i=0;i<r.size();i++)\n    {\n        printf(\"%d \",r[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/43", "prompt": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nbool pairs_sum_to_zero(vector < int > l) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i =0;i<l.size(); i++)\n    for (int j2 = i + 1; j2 < l.size(); j2++)\n    if (l [ i ] + l [ j2 ] == 0) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n}\n", "entry_point": "pairs_sum_to_zero", "partial": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    # print('@@this is the line to split##')\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n", "gc": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nbool pairs_sum_to_zero(vector < int > l) {\n   \n   int i = 0;\n   int j = 0;\n   int sum = 0;\n   \n   while(i < l.size()-1) {\n      j = i+1;\n      while(j < l.size()) {\n         sum = l[i] + l[j];\n         if(sum == 0) {\n            return true;\n         }\n         j++;\n      }\n      i++;\n   }\n   return false;\n}\n\nint main() {\n   \n   vector < int > l;\n   int i = 0;\n   int j = 0;\n   int sum = 0;\n   \n   while(i < 10) {\n      l.push_back(i);\n      i++;\n   }\n   \n   while(j < l.size()) {\n      sum = l[j] + l[j+1];\n      if(sum == 0) {\n         return 0;\n      }\n      j++;\n   }\n   \n   return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/44", "prompt": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring change_base(int base2, int base) {\n    string out = \"\";\n    while (base2 > 0)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        out = to_string(base2 % base) + out;\n        base2 = base2 / base;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n}\n", "entry_point": "change_base", "partial": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    # print('@@this is the line to split##')\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n", "gc": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring change_base(int base2, int base) {\n    string out = \"\";\n    while (base2 > 0)\n   \n    {\n        int digit = base2 % base;\n        out = (char)(digit + '0') + out;\n        base2 = base2 / base;\n    }\n    return out;\n}\nint main()\n{\n    int base2, base;\n    string out;\n    while (scanf(\"%d %d\", &base2, &base)!= EOF)\n    {\n        out = change_base(base2, base);\n        printf(\"%s\\n\", out.c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/45", "prompt": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\n", "canonical_solution": "print(' @ this is the line to split ## ' float triangle_area(float dec, float h) {\n    return(dec * h) * 0.5;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n}\n", "entry_point": "triangle_area", "partial": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n# print('@@this is the line to split##')\nfloat triangle_area(float a,float h){\nreturn (a*h)*0.5;\n\n}\n", "gc": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\n\ndouble triangle_area(double length, double height)\n{\n\treturn (length * height) / 2;\n}\n\nint main()\n{\n\tdouble length, height;\n\tprintf(\"Enter length of the side: \");\n\tscanf(\"%lf\", &length);\n\tprintf(\"Enter height of the triangle: \");\n\tscanf(\"%lf\", &height);\n\tdouble area = triangle_area(length, height);\n\tprintf(\"Area of the triangle is: %.2lf\", area);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/46", "prompt": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include <stdio.h>\nusingnamespace std;\nint fib4(int n) {\n    int b [ 100 ];\n    b [ 0 ] = 0;\n    b [ 1 ] = 0;\n    b [ 2 ] = 2;\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' b [ 3 ] = 0;\n    for (int i = 4; i <= n; i++)\n     {\n        b [ i ] = b [ i - 1 ] + b [ i - 2 ] + b [ i - 3 ] + b [ i - 4 ];\n        }\n    return b [ n ];\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(6) == 8);\n    assert (fib4(7) == 14);\n}\n", "entry_point": "fib4", "partial": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    # print('@@this is the line to split##')\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n", "gc": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include <stdio.h>\nusingnamespace std;\nint fib4(int n) {\n    int b [ 100 ];\n    b [ 0 ] = 0;\n    b [ 1 ] = 0;\n    b [ 2 ] = 2;\n   \n    for (int i = 3; i <= n; i++) {\n        b [ i ] = b [ i - 1 ] + b [ i - 2 ] + b [ i - 3 ];\n    }\n    return b [ n ];\n}\n\nint main() {\n    int n;\n    printf(\"Enter the number of element to be computed\\n\");\n    scanf(\"%d\", &n);\n    printf(\"The fib4 number is %d\\n\", fib4(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/47", "prompt": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\n", "canonical_solution": "print(' @ this is the line to split ## ' float median(vector < float > r) {\n    sort(r.begin(), r.end());\n    if (r.size() % 2 == 1) return r [ r.size() / 2 ];\n    return 0.5 *(r [ r.size() / 2 ] + r [ r.size() / 2 - 1 ]);\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n}\n", "entry_point": "median", "partial": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n# print('@@this is the line to split##')\nfloat median(vector<float> l){\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n", "gc": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\n\nint main()\n{\n    vector<int> v;\n    int n,i;\n    printf(\"Enter the number of elements in the vector\\n\");\n    scanf(\"%d\",&n);\n    for(i=0;i<n;i++)\n    {\n        printf(\"Enter the element %d\\n\",i+1);\n        scanf(\"%d\",&v[i]);\n    }\n    sort(v.begin(),v.end());\n    if(n%2==0)\n    {\n        printf(\"The median is %d\\n\",(v[n/2-1]+v[n/2])/2);\n    }\n    else\n    {\n        printf(\"The median is %d\\n\",v[n/2]);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/48", "prompt": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\n", "canonical_solution": "print(' @ this is the line to split ## ' bool is_palindrome(string line2) {\n    string pr(line2.rbegin(), line2.rend());\n    return pr == line2;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n}\n", "entry_point": "is_palindrome", "partial": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\n# print('@@this is the line to split##')\nbool is_palindrome(string text){\n    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n", "gc": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\n\nbool is_palindrome(string str)\n{\n    int i = 0, j = str.length() - 1;\n    while (i < j)\n    {\n        if (str[i]!= str[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\n\nint main()\n{\n    string str;\n    while (getline(cin, str))\n    {\n        if (is_palindrome(str))\n            cout << \"True\" << endl;\n        else\n            cout << \"False\" << endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/49", "prompt": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include <stdio.h>\nusingnamespace std;\nint modp(int n, int p) {\n    int i2 = 1;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i = 0; i < n; i++)\n    i2 =(i2 * 2) % p;\n    return i2;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n}\n", "entry_point": "modp", "partial": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    int out=1;\n    # print('@@this is the line to split##')\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n", "gc": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include <stdio.h>\nusingnamespace std;\nint modp(int n, int p) {\n    int i2 = 1;\n   \n    while (n > 0) {\n        if (n % p == 0) {\n            return i2;\n        }\n        i2 = i2 * 2;\n        n = n / p;\n    }\n    return i2;\n}\nint main() {\n    int n, p;\n    printf(\"Enter n: \");\n    scanf(\"%d\", &n);\n    printf(\"Enter p: \");\n    scanf(\"%d\", &p);\n    printf(\"%d\\n\", modp(n, p));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/5", "prompt": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > intersperse(vector < int > out2, int delimeter) {\n    vector < int > out = {\n        }\n    ;\n    if (out2.size() > 0) out.push_back(out2 [ 0 ]);\n    for (int i = 1; i < out2.size(); i++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        out.push_back(delimeter);\n        out.push_back(out2 [ i ]);\n        \n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 4), {}));\n    assert (issame(intersperse({1, 2, 3}, 4),{1, 4, 2, 4, 3}));\n}\n", "entry_point": "intersperse", "partial": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    # print('@@this is the line to split##')\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n", "gc": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > intersperse(vector < int > out2, int delimeter) {\n    vector < int > out = {\n        }\n    ;\n    if (out2.size() > 0) out.push_back(out2 [ 0 ]);\n    for (int i = 1; i < out2.size(); i++)\n   \n    {\n        out.push_back(out2 [ i ]);\n        out.push_back(delimeter);\n    }\n    return out;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/50", "prompt": "#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring encode_shift(string s) {\n    string out;\n    int i2;\n    for (i2 = 0; i2 < s.length(); i2++)\n     {\n        int w =((int) s [ i2 ] + 5 -(int) ' ') % 26 +(int) ' '; out = out +(char) w;\n        }\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' return out;\n    }\nstring decode_shift(string s) {\n    string out;\n    int i2;\n    for (i2 = 0; i2 < s.length(); i2++)\n     {\n        int w =((int) s [ i2 ] + 21 -(int) ' ') % 26 +(int) ' '; out = out +(char) w;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n", "example_test": "", "entry_point": "encode_shift", "partial": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    # print('@@this is the line to split##')\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "gc": "#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring encode_shift(string s) {\n    string out;\n    int i2;\n    for (i2 = 0; i2 < s.length(); i2++)\n     {\n        int w =((int) s [ i2 ] + 5 -(int)'') % 26 +(int)''; out = out +(char) w;\n        }\n   \n    return out;\n    }\nstring decode_shift(string s) {\n    string out;\n    int i2;\n    for (i2 = 0; i2 < s.length(); i2++)\n     {\n        int w =(int) s [ i2 ] -(int)'';\n        out = out +(char) w;\n        }\n   \n    return out;\n    }\nint main()\n{\n    string s;\n    cin >> s;\n    cout << decode_shift(encode_shift(s));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/51", "prompt": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nstring remove_vowels(string text) {\n    string out = \"\";\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string vowels = \"AEIOUaeiou\";\n    for (int i2 = 0; i2 < text.length(); i2++)\n    if (find(vowels.begin(), vowels.end(), text [ i2 ]) == vowels.end())\n    out = out + text [ i2 ];\n    return out;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"abcdef\") == \"bcdf\");\n    assert (remove_vowels(\"aaaaa\") == \"\");\n    assert (remove_vowels(\"aaBAA\") == \"B\");\n    assert (remove_vowels(\"zbcd\") == \"zbcd\");\n}\n", "entry_point": "remove_vowels", "partial": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string out=\"\";\n    # print('@@this is the line to split##')\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n", "gc": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nstring remove_vowels(string text) {\n    string out = \"\";\n   \n    for(int i = 0; i < text.length(); i++) {\n        if(text[i]!= 'a' && text[i]!= 'e' && text[i]!= 'i' && text[i]!= 'o' && text[i]!= 'u' && text[i]!= 'A' && text[i]!= 'E' && text[i]!= 'I' && text[i]!= 'O' && text[i]!= 'U') {\n            out += text[i];\n        }\n    }\n    return out;\n}\n\nint main() {\n    string text;\n    getline(cin, text);\n    cout << remove_vowels(text) << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/52", "prompt": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nbool below_threshold(vector < int > l, int t) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int c =0;i<l.size(); c++)\n    if (l [ c ] >= t) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n}\n", "entry_point": "below_threshold", "partial": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    # print('@@this is the line to split##')\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n", "gc": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nbool below_threshold(vector < int > l, int t) {\n   \n   for(int i=0; i<l.size(); i++) {\n      if(l[i] > t) {\n         return false;\n      }\n   }\n   return true;\n}\nint main() {\n   \n   vector < int > l;\n   int t;\n   scanf(\"%d\", &t);\n   for(int i=0; i<t; i++) {\n      scanf(\"%d\", &l[i]);\n   }\n   \n   if(below_threshold(l, t)) {\n      printf(\"true\");\n   } else {\n      printf(\"false\");\n   }\n   \n   return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/53", "prompt": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include <stdio.h>\n#include<stdlib.h>\nusingnamespace std;\n", "canonical_solution": "print(' @ this is the line to split ## ' int add(int x, int y2) {\n    return x + y2;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n}\n", "entry_point": "add", "partial": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n# print('@@this is the line to split##')\nint add(int x,int y){\n    return x+y;\n}\n", "gc": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include <stdio.h>\n#include<stdlib.h>\nusingnamespace std;\n\nint add(int x, int y)\n{\n    return x + y;\n}\n\nint main()\n{\n    int x, y;\n    printf(\"Enter two numbers: \");\n    scanf(\"%d %d\", &x, &y);\n    printf(\"The sum of %d and %d is %d\\n\", x, y, add(x, y));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/54", "prompt": "/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nbool same_chars(string s0, string s1) {\n    for (int nt = 0; nt < s0.length(); nt++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (find(s1.begin(), s1.end(), s0 [ nt ]) == s1.end())\n    return false;\n    for (int nt = 0; nt < s1.length(); nt++)\n    if (find(s0.begin(), s0.end(), s1 [ nt ]) == s0.end())\n    return false;\n    return true;}", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n}\n", "entry_point": "same_chars", "partial": "/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n    for (int i=0;i<s0.length();i++)\n    # print('@@this is the line to split##')\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n", "gc": "/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nbool same_chars(string s0, string s1) {\n    for (int nt = 0; nt < s0.length(); nt++)\n   \n    return false;\n}\nint main() {\n    int t;\n    scanf(\"%d\", &t);\n    while (t--) {\n        string s0, s1;\n        cin >> s0 >> s1;\n        if (same_chars(s0, s1))\n            printf(\"true\\n\");\n        else\n            printf(\"false\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/55", "prompt": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include <stdio.h>\nusingnamespace std;\nint fib(int n) {\n    int m [ 1000 ];\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' m [ 0 ] = 0; m [ 1 ] = 1;\n    for (int i = 2; i <= n; i++)\n    m [ i ] = m [ i - 1 ] + m [ i - 2 ];\n    return m [ n ];\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n}\n", "entry_point": "fib", "partial": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    int f[1000];\n    # print('@@this is the line to split##')\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n", "gc": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include <stdio.h>\nusingnamespace std;\nint fib(int n) {\n    int m [ 1000 ];\n   \n    m[0] = 0;\n    m[1] = 1;\n    for(int i = 2; i < n; i++) {\n        m[i] = m[i-1] + m[i-2];\n    }\n    return m[n-1];\n}\n\nint main() {\n    int n;\n    printf(\"Enter n: \");\n    scanf(\"%d\", &n);\n    printf(\"Fibonacci number of %d is %d\\n\", n, fib(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool correct_bracketing(string brackets) {\n    int i2 = 0;\n    for (int i = 0; i < brackets.length(); i++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (brackets [ i ] == ' ') i2+=1;\n        if (brackets [ i ] == ' ') i2-=1;\n        if (i2 < 0) return false;\n        }\n    if (i2 != 0) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n}\n", "entry_point": "correct_bracketing", "partial": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        # print('@@this is the line to split##')\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "gc": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool correct_bracketing(string brackets) {\n    int i2 = 0;\n    for (int i = 0; i < brackets.length(); i++)\n     {\n       \n        if (brackets[i] == '<')\n        {\n            i2 = i;\n            while (brackets[i2]!= '>')\n            {\n                i2++;\n            }\n            if (i2 == brackets.length() - 1)\n            {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main()\n{\n    string brackets;\n    cin>>brackets;\n    if (correct_bracketing(brackets))\n    {\n        cout<<\"yes\"<<endl;\n    }\n    else\n    {\n        cout<<\"no\"<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/57", "prompt": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nbool monotonic(vector < float > l) {\n    int incr, decr;\n    incr = 0; decr = 0;\n    for (int nt = 1; nt < l.size(); nt++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (l [ nt ] > l [ nt - 1 ]) incr = 1;\n        if (l [ nt ] < l [ nt - 1 ]) decr = 1;\n        }\n    if (incr + decr == 2) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n}\n", "entry_point": "monotonic", "partial": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    # print('@@this is the line to split##')\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n", "gc": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nbool monotonic(vector < float > l) {\n    int incr, decr;\n    incr = 0; decr = 0;\n    for (int nt = 1; nt < l.size(); nt++)\n   \n    if (l[nt] < l[nt - 1])\n        incr++;\n    else\n        decr++;\n    if (incr > 1 || decr > 1)\n        return false;\n    else\n        return true;\n}\nint main() {\n    int t;\n    scanf(\"%d\", &t);\n    while (t--) {\n        int n;\n        scanf(\"%d\", &n);\n        vector < float > l;\n        for (int i = 0; i < n; i++) {\n            float x;\n            scanf(\"%f\", &x);\n            l.push_back(x);\n        }\n        if (monotonic(l))\n            printf(\"true\\n\");\n        else\n            printf(\"false\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/58", "prompt": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > common(vector < int > l1, vector < int > l2) {\n    vector < int > l = {\n        }\n    ;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i =0;i<l1.size(); i++)\n    if (find(l.begin(), l.end(), l1 [ i ]) == l.end())\n    if (find(l2.begin(), l2.end(), l1 [ i ]) != l2.end())\n    l.push_back(l1 [ i ]);\n    sort(l.begin(), l.end());\n    return l;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n}\n", "entry_point": "common", "partial": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> out={};\n    # print('@@this is the line to split##')\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "gc": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > common(vector < int > l1, vector < int > l2) {\n    vector < int > l = {\n        }\n    ;\n   \n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    int i = 0;\n    int j = 0;\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n            l.push_back(l1[i]);\n            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return l;\n}\nint main() {\n    int n1, n2;\n    scanf(\"%d %d\", &n1, &n2);\n    vector < int > l1(n1);\n    vector < int > l2(n2);\n    for (int i = 0; i < n1; i++) {\n        scanf(\"%d\", &l1[i]);\n    }\n    for (int i = 0; i < n2; i++) {\n        scanf(\"%d\", &l2[i]);\n    }\n    vector < int > l = common(l1, l2);\n    for (int i = 0; i < l.size(); i++) {\n        printf(\"%d \", l[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/59", "prompt": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include <stdio.h>\nusingnamespace std;\nint largest_prime_factor(int In) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i = 2; i * i <= In; i++)\n    while (In % i == 0 and In > i) In = In / i;\n    return In;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(2048) == 2);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "entry_point": "largest_prime_factor", "partial": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    # print('@@this is the line to split##')\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n", "gc": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include <stdio.h>\nusingnamespace std;\nint largest_prime_factor(int In) {\n   \n   int i, j, k, n, m, p, q;\n   \n   for (i = 2; i < In; i++) {\n      if (In % i == 0) {\n         for (j = 2; j < i; j++) {\n            if (In % j == 0) {\n               n = In / i;\n               m = In / j;\n               p = largest_prime_factor(i);\n               q = largest_prime_factor(j);\n               if (p * q > n) {\n                  return p * q;\n               }\n            }\n         }\n      }\n   }\n   return In;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/6", "prompt": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < int > parse_nested_parens(string paren_string) {\n    vector < int > all_levels;\n    string current_paren;\n    int level = 0, max_level = 0;\n    char level2;\n    int i;\n    for (i = 0; i < paren_string.length(); i++)\n     {\n        level2 = paren_string [ i ];\n        if (level2 == ' ')\n         {\n            level+=1;\n           \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (level > max_level) max_level = level;\n            current_paren+=level2;\n            }\n        if (level2 == ' ')\n         {\n            level-=1;\n            current_paren+=level2;\n            if (level == 0) {\n                all_levels.push_back(max_level);\n                current_paren = \"\";\n                max_level = 0;\n                }\n            }\n        }\n    return all_levels;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n}\n", "entry_point": "parse_nested_parens", "partial": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        # print('@@this is the line to split##')\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n", "gc": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < int > parse_nested_parens(string paren_string) {\n    vector < int > all_levels;\n    string current_paren;\n    int level = 0, max_level = 0;\n    char level2;\n    int i;\n    for (i = 0; i < paren_string.length(); i++)\n     {\n        level2 = paren_string [ i ];\n        if (level2 =='')\n         {\n            level+=1;\n           \n        }\n        else if (level2 == ')')\n         {\n            level -= 1;\n            if (level == 0)\n             {\n                all_levels.push_back(level);\n                level = 0;\n                max_level = max(max_level, level);\n            }\n        }\n        else if (level2 == '(')\n         {\n            level += 1;\n        }\n    }\n    return all_levels;\n}\n\nint main()\n{\n    string paren_string;\n    cin >> paren_string;\n    vector < int > all_levels = parse_nested_parens(paren_string);\n    for (int i = 0; i < all_levels.size(); i++)\n     {\n        cout << all_levels[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/60", "prompt": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include <stdio.h>\nusingnamespace std;\n", "canonical_solution": "print(' @ this is the line to split ## ' int sum_to_n(int i) {\n    return i *(i + 1) / 2;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(5) == 15);\n    assert (sum_to_n(10) == 55);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "entry_point": "sum_to_n", "partial": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\n# print('@@this is the line to split##')\nint sum_to_n(int n){\n    return n*(n+1)/2;\n}\n", "gc": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include <stdio.h>\nusingnamespace std;\n\nint sum_to_n(int n)\n{\n    int sum = 0;\n    for(int i = 1; i <= n; i++)\n    {\n        sum += i;\n    }\n    return sum;\n}\n\nint main()\n{\n    int n;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    printf(\"Sum of numbers from 1 to %d is %d\\n\", n, sum_to_n(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool correct_bracketing(string brackets) {\n    int i2 = 0;\n    for (int i = 0; i < brackets.length(); i++)\n     {\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (brackets [ i ] == ' ') i2+=1;\n        if (brackets [ i ] == ' ') i2-=1;\n        if (i2 < 0) return false;\n        }\n    if (i2 != 0) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n}\n", "entry_point": "correct_bracketing", "partial": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        # print('@@this is the line to split##')\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "gc": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool correct_bracketing(string brackets) {\n    int i2 = 0;\n    for (int i = 0; i < brackets.length(); i++)\n     {\n       \n        if (brackets[i] == '(')\n        {\n            i2++;\n        }\n        else if (brackets[i] == ')')\n        {\n            if (i2 == 0)\n            {\n                return false;\n            }\n            else\n            {\n                i2--;\n            }\n        }\n    }\n    return i2 == 0;\n}\n\nint main() {\n    string brackets;\n    while (cin >> brackets)\n    {\n        if (correct_bracketing(brackets))\n        {\n            cout << \"yes\" << endl;\n        }\n        else\n        {\n            cout << \"no\" << endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/62", "prompt": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nvector < float > derivative(vector < float > xs) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' vector < float > out = {\n        }\n    ;\n    for (int i2 = 1; i2 < xs.size(); i2++)\n    out.push_back(i2 * xs [ i2 ]);\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n}\n", "entry_point": "derivative", "partial": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    # print('@@this is the line to split##')\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n", "gc": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 +....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include <stdio.h>\n#include<math.h>\n#include<vector>\nusingnamespace std;\nvector < float > derivative(vector < float > xs) {\n   \n   vector < float > xs_derivative;\n   int n = xs.size();\n   for (int i = 0; i < n; i++) {\n      xs_derivative.push_back(0);\n   }\n   for (int i = 0; i < n; i++) {\n      xs_derivative[i] = xs[i];\n      for (int j = i; j < n; j++) {\n         xs_derivative[j] = xs_derivative[j] + xs[j] * xs[i];\n      }\n   }\n   return xs_derivative;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/63", "prompt": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include <stdio.h>\nusingnamespace std;\nint fibfib(int n) {\n    int b [ 100 ];\n    b [ 0 ] = 0;\n    b [ 1 ] = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' b [ 2 ] = 1;\n    for (int i = 3; i <= n; i++)\n    b [ i ] = b [ i - 1 ] + b [ i - 2 ] + b [ i - 3 ];\n    return b [ n ];\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n}\n", "entry_point": "fibfib", "partial": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    # print('@@this is the line to split##')\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n", "gc": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include <stdio.h>\nusingnamespace std;\nint fibfib(int n) {\n    int b [ 100 ];\n    b [ 0 ] = 0;\n    b [ 1 ] = 0;\n   \n    for ( int i = 2; i < n; i++ ) {\n        b [ i ] = b [ i - 1 ] + b [ i - 2 ];\n    }\n    return b [ n - 1 ];\n}\nint main() {\n    int n;\n    printf(\"Enter the number of element to be computed: \");\n    scanf(\"%d\", &n);\n    printf(\"The fibfib number sequence is: \");\n    printf(\"%d\", fibfib(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/64", "prompt": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nint vowels_count(string whites) {\n    string vowels = \"aeiouAEIOU\";\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' int count = 0;\n    for (int i = 0; i < whites.length(); i++)\n    if (find(vowels.begin(), vowels.end(), whites [ i ]) != vowels.end())\n    count+=1;\n    if (whites [ whites.length() - 1 ] == ' ' or whites [ whites.length() - 1 ] == ' ') count+=1;\n    return count;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"ACEDY\") == 3);\n}\n", "entry_point": "vowels_count", "partial": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    string vowels=\"aeiouAEIOU\";\n    # print('@@this is the line to split##')\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n", "gc": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nint vowels_count(string whites) {\n    string vowels = \"aeiouAEIOU\";\n   \n    int count = 0;\n    for(int i = 0; i < whites.size(); i++) {\n        if(vowels.find(whites[i])!= string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    string whites;\n    cin >> whites;\n    cout << vowels_count(whites);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/65", "prompt": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring circular_shift(int x, int shift) {\n    string s2;\n    s2 = to_string(x);\n    if (s2.length() < shift)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        string s(s2.rbegin(), s2.rend());\n        return s;\n        }\n    s2 = s2.substr(s2.length() - shift) + s2.substr(0, s2.length() - shift);\n    return s2;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(12, 1) == \"21\");\n}\n", "entry_point": "circular_shift", "partial": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    # print('@@this is the line to split##')\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n", "gc": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring circular_shift(int x, int shift) {\n    string s2;\n    s2 = to_string(x);\n    if (s2.length() < shift)\n   \n    return s2;\n    else {\n        int i;\n        for (i = 0; i < shift; i++)\n            s2 = s2 + \"0\";\n        return s2;\n    }\n}\n\nint main() {\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n    int i;\n    for (i = 0; i < n; i++)\n        cout << circular_shift(s[i], i);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/66", "prompt": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nint digitSum(string s) {\n    int sum = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int sk =0;i<s.length(); sk++)\n    if (s [ sk ] >= 65 and s [ sk ] <= 90)\n    sum+=s [ sk ];\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n}\n", "entry_point": "digitSum", "partial": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum=0;\n    # print('@@this is the line to split##')\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n", "gc": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nint digitSum(string s) {\n    int sum = 0;\n   \n    for (int i = 0; i < s.length(); i++) {\n        sum += s[i] - 'A' + 1;\n    }\n    return sum;\n}\nint main() {\n    string s;\n    while (cin >> s) {\n        cout << digitSum(s) << endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/67", "prompt": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nint fruit_distribution(string s, int n) {\n    string num1 = \"\", num2 = \"\";\n    int is12;\n    is12 = 0;\n    for (int i2 = 0; i2 < s.size(); i2++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (s [ i2 ] >= 48 and s [ i2 ] <= 57)\n     {\n        if (is12 == 0) num1 = num1 + s [ i2 ];\n        if (is12 == 1) num2 = num2 + s [ i2 ];\n        }\n    else\n    if (is12 == 0 and num1.length() > 0) is12 = 1;\n    return n - atoi(num1.c_str()) - atoi(num2.c_str());\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "entry_point": "fruit_distribution", "partial": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        # print('@@this is the line to split##')\n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n", "gc": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nint fruit_distribution(string s, int n) {\n    string num1 = \"\", num2 = \"\";\n    int is12;\n    is12 = 0;\n    for (int i2 = 0; i2 < s.size(); i2++)\n   \n    {\n        if (s[i2] == '1')\n        {\n            num1 = num1 + \"1\";\n            is12 = 1;\n        }\n        else if (s[i2] == '2')\n        {\n            num2 = num2 + \"2\";\n            is12 = 1;\n        }\n        else if (s[i2] == '3')\n        {\n            num2 = num2 + \"3\";\n            is12 = 1;\n        }\n        else if (s[i2] == '4')\n        {\n            num2 = num2 + \"4\";\n            is12 = 1;\n        }\n        else if (s[i2] == '5')\n        {\n            num1 = num1 + \"5\";\n            is12 = 1;\n        }\n        else if (s[i2] == '6')\n        {\n            num1 = num1 + \"6\";\n            is12 = 1;\n        }\n        else if (s[i2] == '7')\n        {\n            num1 = num1 + \"7\";\n            is12 = 1;\n        }\n        else if (s[i2] == '8')\n        {\n            num1 = num1 + \"8\";\n            is12 = 1;\n        }\n        else if (s[i2] == '9')\n        {\n            num1 = num1 + \"9\";\n            is12 = 1;\n        }\n        else if (s[i2] == '0')\n        {\n            num1 = num1 + \"0\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'a')\n        {\n            num1 = num1 + \"a\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'b')\n        {\n            num1 = num1 + \"b\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'c')\n        {\n            num1 = num1 + \"c\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'd')\n        {\n            num1 = num1 + \"d\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'e')\n        {\n            num1 = num1 + \"e\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'f')\n        {\n            num1 = num1 + \"f\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'g')\n        {\n            num1 = num1 + \"g\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'h')\n        {\n            num1 = num1 + \"h\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'i')\n        {\n            num1 = num1 + \"i\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'j')\n        {\n            num1 = num1 + \"j\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'k')\n        {\n            num1 = num1 + \"k\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'l')\n        {\n            num1 = num1 + \"l\";\n            is12 = 1;\n        }\n        else if (s[i2] =='m')\n        {\n            num1 = num1 + \"m\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'n')\n        {\n            num1 = num1 + \"n\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'o')\n        {\n            num1 = num1 + \"o\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'p')\n        {\n            num1 = num1 + \"p\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'q')\n        {\n            num1 = num1 + \"q\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'r')\n        {\n            num1 = num1 + \"r\";\n            is12 = 1;\n        }\n        else if (s[i2] =='s')\n        {\n            num1 = num1 + \"s\";\n            is12 = 1;\n        }\n        else if (s[i2] == 't')\n        {\n            num1 = num1 + \"t\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'u')\n        {\n            num1 = num1 + \"u\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'v')\n        {\n            num1 = num1 + \"v\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'w')\n        {\n            num1 = num1 + \"w\";\n            is12 = 1;\n        }\n        else if (s[i2] == 'x')\n        {", "passed": 0}
{"task_id": "CPP/68", "prompt": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > pluck(vector < int > arr) {\n    vector < int > out = {\n        }\n    ;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int sk =0;i<arr.size(); sk++)\n    if (arr [ sk ] % 2 == 0 and(out.size() == 0 or arr [ sk ] < out [ 0 ]))\n    out = {\n        arr [ sk ], sk}\n    ;\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n}\n", "entry_point": "pluck", "partial": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    # print('@@this is the line to split##')\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n", "gc": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > pluck(vector < int > arr) {\n    vector < int > out = {\n        }\n    ;\n   \n    return out;\n}\n\nint main() {\n    int arr[] = {4,2,3};\n    vector < int > arr1 = {4,2,3};\n    vector < int > arr2 = {1,2,3};\n    vector < int > arr3 = {5,0,3,0,4,2};\n    vector < int > arr4 = {};\n    vector < int > arr5 = {5,0,3,0,4,2,1,2,3};\n    vector < int > arr6 = {5,0,3,0,4,2,1,2,3,4,5};\n    vector < int > arr7 = {5,0,3,0,4,2,1,2,3,4,5,6};\n    vector < int > arr8 = {5,0,3,0,4,2,1,2,3,4,5,6,7};\n    vector < int > arr9 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8};\n    vector < int > arr10 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9};\n    vector < int > arr11 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9,10};\n    vector < int > arr12 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9,10,11};\n    vector < int > arr13 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9,10,11,12};\n    vector < int > arr14 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9,10,11,12,13};\n    vector < int > arr15 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14};\n    vector < int > arr16 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n    vector < int > arr17 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\n    vector < int > arr18 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17};\n    vector < int > arr19 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18};\n    vector < int > arr20 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n    vector < int > arr21 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};\n    vector < int > arr22 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21};\n    vector < int > arr23 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22};\n    vector < int > arr24 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23};\n    vector < int > arr25 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};\n    vector < int > arr26 = {5,0,3,0,4,2,1,2,3,4,5,6,7,8", "passed": 0}
{"task_id": "CPP/69", "prompt": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint search(vector < int > lst) {\n    vector < vector < int > > lines = {\n        }\n    ;\n    int max = -1;\n    for (int i = 0; i < lst.size(); i++)\n     {\n        bool has = false;\n        for (int j = 0; j < lines.size(); j++)\n        if (lst [ i ] == lines [ j ] [ 0 ]) {\n           \n", "canonical_solution": "print(' @ this is the line to split ## ' lines [ j ] [ 1 ]+=1;\n            has = true;\n            if (lines [ j ] [ 1 ] >= lines [ j ] [ 0 ] and lines [ j ] [ 0 ] > max) max = lines [ j ] [ 0 ];\n            }\n        if (not(has)) {\n            lines.push_back( {\n                lst [ i ], 1}\n            );\n            if (max == -1 and lst [ i ] == 1) max = 1;\n            }\n        }\n    return max;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({4, 1, 2, 2, 3, 1}) == 2);\n    assert (search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3);\n    assert (search({5, 5, 4, 4, 4}) == -1);\n}\n", "entry_point": "search", "partial": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            # print('@@this is the line to split##')\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n", "gc": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint search(vector < int > lst) {\n    vector < vector < int > > lines = {\n        }\n    ;\n    int max = -1;\n    for (int i = 0; i < lst.size(); i++)\n     {\n        bool has = false;\n        for (int j = 0; j < lines.size(); j++)\n        if (lst [ i ] == lines [ j ] [ 0 ]) {\n           \n            has = true;\n            break;\n        }\n        if (!has) {\n            lines.push_back (vector < int > (1, lst [ i ]));\n        }\n        if (lines [ lines.size() - 1 ][ 0 ] > max) {\n            max = lines [ lines.size() - 1 ][ 0 ];\n        }\n    }\n    return max;\n}\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > lst;\n    for (int i = 0; i < n; i++) {\n        int x;\n        scanf(\"%d\", &x);\n        lst.push_back(x);\n    }\n    int res = search(lst);\n    printf(\"%d\\n\", res);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/7", "prompt": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > filter_by_substring(vector < string > strings, string substring) {\n    vector < string > out;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i2 = 0; i<strings.size(); i2++)\n    \n     {\n        if (strings [ i2 ].find(substring) != strings [ i2 ].npos)\n        out.push_back(strings [ i2 ]);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"a\"),{}));\n     assert (issame(filter_by_substring({\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\"), {\"abc\", \"bacd\", \"array\"}));\n}\n", "entry_point": "filter_by_substring", "partial": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> out;\n    # print('@@this is the line to split##')\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n", "gc": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > filter_by_substring(vector < string > strings, string substring) {\n    vector < string > out;\n   \n    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)!= string::npos) {\n            out.push_back(strings[i]);\n        }\n    }\n    return out;\n}\n\nint main() {\n    vector < string > strings = { \"abc\", \"bacd\", \"cde\", \"vector\" };\n    vector < string > out = filter_by_substring(strings, \"a\");\n    for (int i = 0; i < out.size(); i++) {\n        printf(\"%s\\n\", out[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/70", "prompt": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > strange_sort_list(vector < int > out2) {\n    vector < int > out = {\n        }\n    ;\n    sort(out2.begin(), out2.end());\n    int l = 0, r = out2.size() - 1;\n    while (l < r)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        out.push_back(out2 [ l ]);\n        l+=1;\n        out.push_back(out2 [ r ]);\n        r-=1;\n        }\n    if (l == r) out.push_back(out2 [ l ]);\n    return out;\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n}\n", "entry_point": "strange_sort_list", "partial": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    # print('@@this is the line to split##')\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n", "gc": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > strange_sort_list(vector < int > out2) {\n    vector < int > out = {\n        }\n    ;\n    sort(out2.begin(), out2.end());\n    int l = 0, r = out2.size() - 1;\n    while (l < r)\n   \n    {\n        int temp = out2[l];\n        out2[l] = out2[r];\n        out2[r] = temp;\n        l++;\n        r--;\n    }\n    return out2;\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > out;\n    for (int i = 0; i < n; i++)\n    {\n        int x;\n        scanf(\"%d\", &x);\n        out.push_back(x);\n    }\n    vector < int > out2 = strange_sort_list(out);\n    for (int i = 0; i < n; i++)\n    {\n        printf(\"%d \", out2[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/71", "prompt": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\nfloat triangle_area(float a2, float b, float c) {\n    if (a2 + b <= c or a2 + c <= b or b + c <= a2) return -1;\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' float h =(a2 + b + c) / 2;\n    float area;\n    area = pow(h *(h - a2) *(h - b) *(h - c), 0.5);\n    return area;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n}\n", "entry_point": "triangle_area", "partial": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    # print('@@this is the line to split##')\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n", "gc": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\nfloat triangle_area(float a2, float b, float c) {\n    if (a2 + b <= c or a2 + c <= b or b + c <= a2) return -1;\n   \n    return (a2 * b) / 2;\n}\n\nint main() {\n    float a, b, c;\n    printf(\"Enter the length of side 1: \");\n    scanf(\"%f\", &a);\n    printf(\"Enter the length of side 2: \");\n    scanf(\"%f\", &b);\n    printf(\"Enter the length of side 3: \");\n    scanf(\"%f\", &c);\n    printf(\"The area of the triangle is %f\\n\", triangle_area(a, b, c));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/72", "prompt": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nbool will_it_fly(vector < int > q, int w) {\n    int sum = 0;\n    for (int c = 0; c < q.size(); c++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (q [ c ] != q [ q.size() - 1 - c ]) return false;\n        sum+=q [ c ];\n        }\n    if (sum > w) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n}\n", "entry_point": "will_it_fly", "partial": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    # print('@@this is the line to split##')\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n", "gc": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nbool will_it_fly(vector < int > q, int w) {\n    int sum = 0;\n    for (int c = 0; c < q.size(); c++)\n   \n    sum += q[c];\n    if (sum <= w)\n        return true;\n    else\n        return false;\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > q;\n    for (int i = 0; i < n; i++)\n    {\n        int x;\n        scanf(\"%d\", &x);\n        q.push_back(x);\n    }\n    int w;\n    scanf(\"%d\", &w);\n    if (will_it_fly(q, w))\n        printf(\"true\");\n    else\n        printf(\"false\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/73", "prompt": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint smallest_change(vector < int > arr) {\n    int out = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i2 =0;i<arr.size() - 1 - i2; i2++)\n    \n    if (arr [ i2 ] != arr [ arr.size() - 1 - i2 ])\n    out+=1;\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n}\n", "entry_point": "smallest_change", "partial": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int out=0;\n    # print('@@this is the line to split##')\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n", "gc": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint smallest_change(vector < int > arr) {\n    int out = 0;\n   \n    for(int i = 0; i < arr.size(); i++) {\n        int j = arr.size() - 1 - i;\n        if(arr[i]!= arr[j]) {\n            out++;\n        }\n    }\n    return out;\n}\nint main() {\n    int t;\n    scanf(\"%d\", &t);\n    while(t--) {\n        int n;\n        scanf(\"%d\", &n);\n        vector < int > arr(n);\n        for(int i = 0; i < n; i++) {\n            scanf(\"%d\", &arr[i]);\n        }\n        printf(\"%d\\n\", smallest_change(arr));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/74", "prompt": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > total_match(vector < string > lst1, vector < string > lst2) {\n    int num1, num2, i2;\n    num1 = 0; num2 = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (i2 = 0; i<lst1.size(); i2++)\n    num1+=lst1 [ i2 ].length();\n    for (i2 = 0; i2 < lst2.size(); i2++)\n    num2+=lst2 [ i2 ].length();\n    if (num1 > num2) return lst2;\n    return lst1;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n}\n", "entry_point": "total_match", "partial": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1,num2,i;\n    num1=0;num2=0;\n    # print('@@this is the line to split##')\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n", "gc": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > total_match(vector < string > lst1, vector < string > lst2) {\n    int num1, num2, i2;\n    num1 = 0; num2 = 0;\n   \n    for(i2 = 0; i2 < lst2.size(); i2++) {\n        num2 = num2 + lst2[i2].size();\n    }\n    for(i2 = 0; i2 < lst2.size(); i2++) {\n        num1 = num1 + lst1[i2].size();\n    }\n    if(num1 == num2) {\n        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nint main() {\n    vector < string > lst1, lst2;\n    lst1.push_back(\"hi\");\n    lst1.push_back(\"admin\");\n    lst2.push_back(\"hI\");\n    lst2.push_back(\"Hi\");\n    lst2.push_back(\"admin\");\n    lst2.push_back(\"project\");\n    lst1 = total_match(lst1, lst2);\n    for(int i = 0; i < lst1.size(); i++) {\n        cout << lst1[i] << endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/75", "prompt": "/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include <stdio.h>\nusingnamespace std;\nbool is_multiply_prime(int a) {\n    int num = 0;\n    for (int num2 = 2; num2 * num2 <= a; num2++)\n    while (a % num2 == 0 and a > num2)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        a = a / num2;\n        num+=1;\n        }\n    if (num == 2) return true;\n    return false;}", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(30) == true);\n}\n", "entry_point": "is_multiply_prime", "partial": "/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    # print('@@this is the line to split##')\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n", "gc": "/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include <stdio.h>\nusingnamespace std;\nbool is_multiply_prime(int a) {\n    int num = 0;\n    for (int num2 = 2; num2 * num2 <= a; num2++)\n    while (a % num2 == 0 and a > num2)\n   \n    return true;\n}\nint main() {\n    int a;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &a);\n    if (is_multiply_prime(a))\n        printf(\"%d is a prime number\\n\", a);\n    else\n        printf(\"%d is not a prime number\\n\", a);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/76", "prompt": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\nbool is_simple_power(int x, int n) {\n    int n2 = 1, count = 0;\n    while (n2 <= x and count < 100)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (n2 == x) return true;\n        n2 = n2 * n; count+=1;\n        }\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n}\n", "entry_point": "is_simple_power", "partial": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n    int p=1,count=0;\n    while (p<=x and count<100)\n    # print('@@this is the line to split##')\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n", "gc": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\nbool is_simple_power(int x, int n) {\n    int n2 = 1, count = 0;\n    while (n2 <= x and count < 100)\n   \n    {\n        if (x % n2 == 0)\n        {\n            count++;\n            if (count == n)\n                return true;\n        }\n        n2 *= n;\n    }\n    return false;\n}\n\nint main()\n{\n    int n, x;\n    printf(\"Enter n: \");\n    scanf(\"%d\", &n);\n    printf(\"Enter x: \");\n    scanf(\"%d\", &x);\n    if (is_simple_power(x, n))\n        printf(\"%d is a simple power of %d\", x, n);\n    else\n        printf(\"%d is not a simple power of %d\", x, n);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/77", "prompt": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\nbool iscuber(int a) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int a2 =0;i*i*i<=abs(a); a2++)\n    \n    if (a2 * a2 * a2 == abs(a)) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(1000) == true);\n    assert (iscuber(0) == true);\n    assert (iscuber(1729) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(0) == true);\n}\n", "entry_point": "iscuber", "partial": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n    # print('@@this is the line to split##')\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n", "gc": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\nbool iscuber(int a) {\n   \n    if(a == 0) return true;\n    if(a < 0) return false;\n    int i = 1;\n    while(i*i <= a) {\n        if(a % i == 0) return true;\n        i++;\n    }\n    return false;\n}\nint main() {\n    int a;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\",&a);\n    if(iscuber(a)) {\n        printf(\"%d is a cube of some integer number\\n\",a);\n    }\n    else {\n        printf(\"%d is not a cube of some integer number\\n\",a);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/78", "prompt": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nint hex_key(string num) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' string key = \"2357BD\";\n    int out = 0;\n    for (int i2 = 0; i2 < num.length(); i2++)\n    if (find(key.begin(), key.end(), num [ i2 ]) != key.end()) out+=1;\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n}\n", "entry_point": "hex_key", "partial": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    # print('@@this is the line to split##')\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n", "gc": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nint hex_key(string num) {\n   \n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] >= 'A' && num[i] <= 'F') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    int count = 0;\n    string num;\n    cin >> num;\n    count = hex_key(num);\n    cout << count;\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/79", "prompt": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring decimal_to_binary(int out2) {\n    string out = \"\";\n    if (out2 == 0) return \"db0db\";\n    while (out2 > 0)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        out = to_string(out2 % 2) + out;\n        out2 = out2 / 2;\n        }\n    out = \"db\" + out + \"db\";\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n}\n", "entry_point": "decimal_to_binary", "partial": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    # print('@@this is the line to split##')\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n", "gc": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring decimal_to_binary(int out2) {\n    string out = \"\";\n    if (out2 == 0) return \"db0db\";\n    while (out2 > 0)\n   \n    {\n        out = out + (out2 & 1);\n        out2 = out2 >> 1;\n    }\n    return out + \"db\";\n}\n\nint main() {\n    int out2;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &out2);\n    printf(\"%s\\n\", decimal_to_binary(out2));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/8", "prompt": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > sum_product(vector < int > numbers) {\n    int sum = 0, product = 1;\n    for (int i2 = 0; i2 < numbers.size(); i2++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        sum+=numbers [ i2 ];\n        product *= numbers [ i2 ];\n        }\n    return {\n        sum, product}\n    ;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 2, 3,4}), {10, 24}));\n}\n", "entry_point": "sum_product", "partial": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    # print('@@this is the line to split##')\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n", "gc": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > sum_product(vector < int > numbers) {\n    int sum = 0, product = 1;\n    for (int i2 = 0; i2 < numbers.size(); i2++)\n   \n    {\n        sum += numbers[i2];\n        product *= numbers[i2];\n    }\n    return vector < int > {sum, product};\n}\n\nint main()\n{\n    vector < int > numbers;\n    numbers.push_back(1);\n    numbers.push_back(2);\n    numbers.push_back(3);\n    numbers.push_back(4);\n    vector < int > sum_product = sum_product(numbers);\n    printf(\"%d\\n\", sum_product[0]);\n    printf(\"%d\\n\", sum_product[1]);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/80", "prompt": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool is_happy(string s) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (s.length() < 3) return false;\n    for (int i2 = 2; i2 < s.length(); i2++)\n    if (s [ i2 ] == s [ i2 - 1 ] or s [ i2 ] == s [ i2 - 2 ]) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n}\n", "entry_point": "is_happy", "partial": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    # print('@@this is the line to split##')\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n", "gc": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool is_happy(string s) {\n   \n    int len = s.length();\n    if(len < 3)\n        return false;\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while(i < len) {\n        if(s[i] == s[i+1]) {\n            count++;\n            i++;\n        }\n        else {\n            if(count > 1)\n                return false;\n            count = 0;\n            i++;\n        }\n    }\n    return true;\n}\nint main() {\n    string s;\n    cin >> s;\n    if(is_happy(s))\n        cout << \"Happy\";\n    else\n        cout << \"Unhappy\";\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/81", "prompt": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > numerical_letter_grade(vector < float > grades) {\n    vector < string > out = {\n        }\n    ;\n    for (int i2 = 0; i2 < grades.size(); i2++)\n     {\n        if (grades [ i2 ] >= 3.9999) out.push_back(\"A+\");\n        if (grades [ i2 ] > 3.7001 and grades [ i2 ] < 3.9999) out.push_back(\"A\");\n        if (grades [ i2 ] > 3.3001 and grades [ i2 ] <= 3.7001) out.push_back(\"A-\");\n        if (grades [ i2 ] > 3.0001 and grades [ i2 ] <= 3.3001) out.push_back(\"B+\");\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (grades [ i2 ] > 2.7001 and grades [ i2 ] <= 3.0001) out.push_back(\"B\");\n        if (grades [ i2 ] > 2.3001 and grades [ i2 ] <= 2.7001) out.push_back(\"B-\");\n        if (grades [ i2 ] > 2.0001 and grades [ i2 ] <= 2.3001) out.push_back(\"C+\");\n        if (grades [ i2 ] > 1.7001 and grades [ i2 ] <= 2.0001) out.push_back(\"C\");\n        if (grades [ i2 ] > 1.3001 and grades [ i2 ] <= 1.7001) out.push_back(\"C-\");\n        if (grades [ i2 ] > 1.0001 and grades [ i2 ] <= 1.3001) out.push_back(\"D+\");\n        if (grades [ i2 ] > 0.7001 and grades [ i2 ] <= 1.0001) out.push_back(\"D\");\n        if (grades [ i2 ] > 0.0001 and grades [ i2 ] <= 0.7001) out.push_back(\"D-\");\n        if (grades [ i2 ] <= 0.0001) out.push_back(\"E\");\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n}\n", "entry_point": "numerical_letter_grade", "partial": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        # print('@@this is the line to split##')\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n", "gc": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nvector < string > numerical_letter_grade(vector < float > grades) {\n    vector < string > out = {\n        }\n    ;\n    for (int i2 = 0; i2 < grades.size(); i2++)\n     {\n        if (grades [ i2 ] >= 3.9999) out.push_back(\"A+\");\n        if (grades [ i2 ] > 3.7001 and grades [ i2 ] < 3.9999) out.push_back(\"A\");\n        if (grades [ i2 ] > 3.3001 and grades [ i2 ] <= 3.7001) out.push_back(\"A-\");\n        if (grades [ i2 ] > 3.0001 and grades [ i2 ] <= 3.3001) out.push_back(\"B+\");\n       \n        if (grades [ i2 ] > 2.7001 and grades [ i2 ] <= 3.0001) out.push_back(\"B\");\n        if (grades [ i2 ] > 2.3001 and grades [ i2 ] <= 2.7001) out.push_back(\"B-\");\n        if (grades [ i2 ] > 2.0001 and grades [ i2 ] <= 2.3001) out.push_back(\"C+\");\n        if (grades [ i2 ] > 1.7001 and grades [ i2 ] <= 2.0001) out.push_back(\"C\");\n        if (grades [ i2 ] > 1.3001 and grades [ i2 ] <= 1.7001) out.push_back(\"C-\");\n        if (grades [ i2 ] > 1.0001 and grades [ i2 ] <= 1.3001) out.push_back(\"D+\");\n        if (grades [ i2 ] <= 1.0001) out.push_back(\"D\");\n        if (grades [ i2 ] <= 1.3001) out.push_back(\"D-\");\n        if (grades [ i2 ] <= 1.7001) out.push_back(\"E\");\n        if (grades [ i2 ] <= 2.0001) out.push_back(\"F\");\n        if (grades [ i2 ] <= 2.3001) out.push_back(\"F\");\n        if (grades [ i2 ] <= 2.7001) out.push_back(\"F\");\n        if (grades [ i2 ] <= 3.0001) out.push_back(\"G\");\n        if (grades [ i2 ] <= 3.3001) out.push_back(\"G\");\n        if (grades [ i2 ] <= 3.7001) out.push_back(\"G\");\n        if (grades [ i2 ] <= 4.0001) out.push_back(\"H\");\n        if (grades [ i2 ] <= 4.3001) out.push_back(\"H\");\n        if (grades [ i2 ] <= 4.7001) out.push_back(\"H\");\n        if (grades [ i2 ] <= 5.0001) out.push_back(\"I\");\n        if (grades [ i2 ] <= 5.3001) out.push_back(\"I\");\n        if (grades [ i2 ] <= 5.7001) out.push_back(\"I\");\n        if (grades [ i2 ] <= 6.0001) out.push_back(\"J\");\n        if (grades [ i2 ] <= 6.3001) out.push_back(\"J\");\n        if (grades [ i2 ] <= 6.7001) out.push_back(\"J\");\n        if (grades [ i2 ] <= 7.0001) out.push_back(\"K\");\n        if (grades [ i2 ] <= 7.3001) out.push_back(\"K\");\n        if (grades [ i2 ] <= 7.7001) out.push_back(\"K\");\n        if (grades [ i2 ] <= 8.0001) out.push_back(\"L\");\n        if (grades [ i2 ] <= 8.3001) out.push_back(\"L\");\n        if (grades [ i2 ] <= 8.7001) out.push_back(\"L\");\n        if (grades [ i2 ] <= 9.0001) out.push_back(\"M\");\n        if (grades [ i2 ] <= 9.3001) out.push_back(\"M\");\n        if (grades [ i2 ] <= 9.7001) out.push_back(\"M\");\n        if (grades [ i2 ] <= 10.0001) out.push_back(\"N\");\n        if (grades [ i2 ] <= 10.3001) out.push_back(\"N\");\n        if (grades [ i2 ] <= 10.7001) out.push_back(\"N\");\n        if (grades [ i2 ] <= 11.0001) out.push_back(\"O\");\n        if (grades [ i2 ] <= 11.3001) out.push_back(\"O\");\n        if (grades [ i2 ] <= 11.7001) out.push_back(\"O\");\n        if (grades [ i2 ] <= 12.0001) out.push_back(\"P\");\n        if (grades [ i2 ] <= 12.3001) out.push_back(\"P\");\n        if (grades [ i2 ] <= 12.7001) out.push_back(\"P\");\n        if (grades [ i2 ] <= 13.0001) out.push_back(\"Q\");\n        if (grades [ i2 ] <= 13.3001) out.push_back(\"Q\");\n        if (", "passed": 0}
{"task_id": "CPP/82", "prompt": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool prime_length(string str) {\n    int l, eng;\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' l = str.length();\n    if (l < 2) return false;\n    for (eng = 2; eng * eng <= l; eng++)\n    if (l % eng == 0) return false;\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n}\n", "entry_point": "prime_length", "partial": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int l,i;\n    # print('@@this is the line to split##')\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n", "gc": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nbool prime_length(string str) {\n    int l, eng;\n   \n    l = str.length();\n    eng = 0;\n    for (int i = 0; i < l; i++) {\n        if (str[i] =='') {\n            eng = 0;\n        } else {\n            eng = eng * 10 + str[i] - '0';\n        }\n    }\n    if (eng % 2 == 0) {\n        return false;\n    }\n    for (int i = 3; i <= eng; i += 2) {\n        if (eng % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    string str;\n    while (getline(cin, str)) {\n        if (prime_length(str)) {\n            cout << \"Prime\" << endl;\n        } else {\n            cout << \"Not prime\" << endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/83", "prompt": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include <stdio.h>\nusingnamespace std;\nint starts_one_ends(int pri) {\n    if (pri < 1) return 0;\n    if (pri == 1) return 1;\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' int out = 18;\n    for (int i = 2; i < pri; i++)\n    out = out * 10;\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n", "example_test": "", "entry_point": "starts_one_ends", "partial": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    if (n<1) return 0;\n    if (n==1) return 1;\n    # print('@@this is the line to split##')\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n", "gc": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include <stdio.h>\nusingnamespace std;\nint starts_one_ends(int pri) {\n    if (pri < 1) return 0;\n    if (pri == 1) return 1;\n   \n    int count = 0;\n    int i = 1;\n    while (i < pri) {\n        if (pri % i == 0) {\n            count++;\n            i++;\n        }\n        else {\n            i++;\n        }\n    }\n    return count;\n}\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", starts_one_ends(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/84", "prompt": "/*\nGiven a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring solve(int N) {\n    string str, bi = \"\";\n    str = to_string(N);\n    int i, bi2 = 0;\n    for (int i = 0; i < str.length(); i++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' bi2+=str [ i ] - 48;\n    while (bi2 > 0)\n     {\n        bi = to_string(bi2 % 2) + bi;\n        bi2 = bi2 / 2;\n        }\n    return bi;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n", "example_test": "", "entry_point": "solve", "partial": "/*\nGiven a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        # print('@@this is the line to split##')\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n", "gc": "/*\nGiven a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring solve(int N) {\n    string str, bi = \"\";\n    str = to_string(N);\n    int i, bi2 = 0;\n    for (int i = 0; i < str.length(); i++)\n   \n    {\n        bi2 = bi2 * 2 + str[i] - '0';\n        bi = bi + to_string(bi2);\n    }\n    return bi;\n}\nint main() {\n    int N;\n    cin >> N;\n    cout << solve(N);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/85", "prompt": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint add(vector < int > lst) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' int sum = 0;\n    for (int i2 = 0; i2 * 2 + 1 < lst.size(); i2++)\n    if (lst [ i2 * 2 + 1 ] % 2 == 0) sum+=lst [ i2 * 2 + 1 ];\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 2, 6, 7}) == 2);\n}\n", "entry_point": "add", "partial": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    # print('@@this is the line to split##')\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n", "gc": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nint add(vector < int > lst) {\n   \n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    vector < int > lst;\n    int n;\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++) {\n        int x;\n        scanf(\"%d\", &x);\n        lst.push_back(x);\n    }\n    printf(\"%d\", add(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/86", "prompt": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nstring anti_shuffle(string s) {\n    string out = \"\";\n    string out2 = \"\";\n    s = s + ' ';\n    for (int i = 0; i < s.length(); i++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (s [ i ] == ' ')\n     {\n        sort(out2.begin(), out2.end());\n        if (out.length() > 0) out = out + ' ';\n        out = out + out2;\n        out2 = \"\";\n        }\n    else out2 = out2 + s [ i ];\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n}\n", "entry_point": "anti_shuffle", "partial": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    # print('@@this is the line to split##')\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n", "gc": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nstring anti_shuffle(string s) {\n    string out = \"\";\n    string out2 = \"\";\n    s = s +'';\n    for (int i = 0; i < s.length(); i++)\n   \n    {\n        if (s[i] >= 'a' && s[i] <= 'z')\n        {\n            out2 = out2 + s[i];\n        }\n        else if (s[i] >= 'A' && s[i] <= 'Z')\n        {\n            out2 = out2 + s[i];\n        }\n        else if (s[i] >= '0' && s[i] <= '9')\n        {\n            out2 = out2 + s[i];\n        }\n        else if (s[i] =='')\n        {\n            out2 = out2 + '_';\n        }\n        else\n        {\n            out2 = out2 + s[i];\n        }\n    }\n    return out2;\n}\n\nint main() {\n    string s = \"Hello World!!!\";\n    cout << anti_shuffle(s);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/87", "prompt": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < vector < int > > get_row(vector < vector < int > > lst, int x) {\n  vector < vector < int > > out = {\n    }\n  ;\n \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i2 =0;i<lst.size(); i2++)\n  for (int j = lst [ i2 ].size() - 1; j >= 0; j-=1)\n  if (lst [ i2 ] [ j ] == x) out.push_back( {\n    i2, j}\n  );\n  return out;\n  }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "entry_point": "get_row", "partial": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> out={};\n    # print('@@this is the line to split##')\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n", "gc": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2}...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < vector < int > > get_row(vector < vector < int > > lst, int x) {\n  vector < vector < int > > out = {\n    }\n  ;\n \n  for (int i = 0; i < lst.size(); i++) {\n    vector < int > row = {};\n    for (int j = 0; j < lst[i].size(); j++) {\n      row.push_back(lst[i][j]);\n    }\n    sort(row.begin(), row.end());\n    sort(row.rbegin(), row.rend());\n    out.push_back(row);\n  }\n  return out;\n}\n\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n  vector < vector < int > > lst = {};\n  for (int i = 0; i < n; i++) {\n    vector < int > row = {};\n    for (int j = 0; j < n; j++) {\n      int x;\n      scanf(\"%d\", &x);\n      row.push_back(x);\n    }\n    lst.push_back(row);\n  }\n  int x;\n  scanf(\"%d\", &x);\n  vector < vector < int > > out = get_row(lst, x);\n  for (int i = 0; i < out.size(); i++) {\n    for (int j = 0; j < out[i].size(); j++) {\n      printf(\"%d \", out[i][j]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/88", "prompt": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > sort_array(vector < int > vector) {\n    if (vector.size() == 0) return {\n        }\n    ;\n    if ((vector [ 0 ] + vector [ vector.size() - 1 ]) % 2 == 1)\n     {\n        sort(vector.begin(), vector.end());\n        return vector;\n       \n", "canonical_solution": "print(' @ this is the line to split ## '}\n    else\n     {\n        sort(vector.begin(), vector.end());\n        vector < int > out = {\n            }\n        ;\n        for (int i = vector.size() - 1; i >= 0; i-=1)\n        out.push_back(vector [ i ]);\n        return out;\n        }\n    \n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n}\n", "entry_point": "sort_array", "partial": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n        # print('@@this is the line to split##')\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n", "gc": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nvector < int > sort_array(vector < int > vector) {\n    if (vector.size() == 0) return {\n        }\n    ;\n    if ((vector [ 0 ] + vector [ vector.size() - 1 ]) % 2 == 1)\n     {\n        sort(vector.begin(), vector.end());\n        return vector;\n       \n     }\n    else\n     {\n        sort(vector.rbegin(), vector.rend());\n        return vector;\n     }\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > vector;\n    for (int i = 0; i < n; i++)\n     {\n        int x;\n        scanf(\"%d\", &x);\n        vector.push_back(x);\n     }\n    vector = sort_array(vector);\n    for (int i = 0; i < n; i++)\n     {\n        printf(\"%d \", vector [ i ]);\n     }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/89", "prompt": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring encrypt(string s) {\n    string out;\n    int c;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (c = 0; i<s.length(); c++)\n    \n     {\n        int w =((int) s [ c ] + 4 -(int) ' ') % 26 +(int) ' '; out = out +(char) w;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n}\n", "entry_point": "encrypt", "partial": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string out;\n    int i;\n    # print('@@this is the line to split##')\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "gc": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nstring encrypt(string s) {\n    string out;\n    int c;\n   \n    for(int i=0; i<s.size(); i++) {\n        c = s[i];\n        out += (char)(c + (c << 1));\n    }\n    return out;\n}\nint main() {\n    string s;\n    getline(cin, s);\n    cout << encrypt(s);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/9", "prompt": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > rolling_max(vector < int > numbers) {\n    vector < int > out;\n    int number = 0;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int i = 0; i<numbers.size(); i++)\n    \n     {\n        if (numbers [ i ] > number) number = numbers [ i ];\n        out.push_back(number);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({1, 2, 3, 2, 3, 4, 2}),{1, 2, 3, 3, 3, 4, 4}));\n}\n", "entry_point": "rolling_max", "partial": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> out;\n    int max=0;\n    # print('@@this is the line to split##')\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n", "gc": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > rolling_max(vector < int > numbers) {\n    vector < int > out;\n    int number = 0;\n   \n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > number) {\n            number = numbers[i];\n        }\n    }\n    out.push_back(number);\n    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > number) {\n            number = numbers[i];\n        }\n        if (numbers[i] == number) {\n            out.push_back(number);\n        }\n    }\n    return out;\n}\n\nint main() {\n    vector < int > numbers = {1, 2, 3, 2, 3, 4, 2};\n    vector < int > out = rolling_max(numbers);\n    for (int i = 0; i < out.size(); i++) {\n        printf(\"%d \", out[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/90", "prompt": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nint next_smallest(vector < int > vector) {\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' sort(vector.begin(), vector.end());\n    for (int i = 1; i < vector.size(); i++)\n    if (vector [ i ] != vector [ i - 1 ]) return vector [ i ];\n    return -1;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n}\n", "entry_point": "next_smallest", "partial": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    # print('@@this is the line to split##')\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n", "gc": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include <stdio.h>\n#include<vector>\n#include<algorithm>\nusingnamespace std;\nint next_smallest(vector < int > vector) {\n   \n    int min = vector[0];\n    int i = 0;\n    for(i = 1; i < vector.size(); i++) {\n        if(vector[i] < min) {\n            min = vector[i];\n        }\n    }\n    return min;\n}\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector < int > vector;\n    for(int i = 0; i < n; i++) {\n        int x;\n        scanf(\"%d\", &x);\n        vector.push_back(x);\n    }\n    int next = next_smallest(vector);\n    if(next == NULL) {\n        printf(\"None\");\n    } else {\n        printf(\"%d\", next);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/91", "prompt": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nint is_bored(string S) {\n    bool isstart = true;\n    bool isi = false;\n    int sum = 0;\n    for (int start = 0; start < S.length(); start++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        if (S [ start ] == ' ' and isi) {\n            isi = false; sum+=1;}\n        if (S [ start ] == ' ' and isstart) {\n            isi = true;}\n        else isi = false;\nif (S [ start ] != ' ') {\n            isstart = false;}\n        if (S [ start ] == ' ' or S [ start ] == ' ' or S [ start ] == ' ') isstart = true;\n        }\n    return sum;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1);\n}\n", "entry_point": "is_bored", "partial": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    # print('@@this is the line to split##')\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n", "gc": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include <stdio.h>\n#include<string>\nusingnamespace std;\nint is_bored(string S) {\n    bool isstart = true;\n    bool isi = false;\n    int sum = 0;\n    for (int start = 0; start < S.length(); start++)\n   \n    {\n        if (S[start] == '.' || S[start] == '?' || S[start] == '!')\n        {\n            if (isstart)\n            {\n                isstart = false;\n                continue;\n            }\n            if (S[start] == '?')\n            {\n                if (isi)\n                {\n                    sum++;\n                }\n                isi = false;\n                continue;\n            }\n            if (S[start] == '!')\n            {\n                if (!isi)\n                {\n                    sum++;\n                }\n                isi = true;\n                continue;\n            }\n        }\n        if (S[start] == 'I')\n        {\n            if (isstart)\n            {\n                isstart = false;\n                continue;\n            }\n            if (S[start + 1] =='')\n            {\n                sum++;\n                isi = true;\n                start++;\n                continue;\n            }\n            if (S[start + 1] =='')\n            {\n                sum++;\n                isi = true;\n                start++;\n                continue;\n            }\n        }\n    }\n    return sum;\n}\nint main()\n{\n    string S;\n    cin >> S;\n    cout << is_bored(S);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/92", "prompt": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\nbool any_int(float a2, float b, float c) {\n    if (round(a2) != a2) return false;\n   \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (round(b) != b) return false;\n    if (round(c) != c) return false;\n    if (a2 + b == c or a2 + c == b or b + c == a2) return true;\n    return false;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(5, 2, 7)==true);\n    assert (any_int(3, 2, 2)==false);\n    assert (any_int(3, -2, 1)==true);\n    assert (any_int(3.6, -2.2, 2)==false);\n}\n", "entry_point": "any_int", "partial": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if (round(a)!=a) return false;\n    # print('@@this is the line to split##')\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n", "gc": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\nbool any_int(float a2, float b, float c) {\n    if (round(a2)!= a2) return false;\n   \n    if (round(b)!= b) return false;\n    if (round(c)!= c) return false;\n    \n    return (a2 == b + c) || (a2 == b - c) || (a2 == c - b) || (a2 == b * c) || (a2 == b / c) || (a2 == c / b);\n}\n\nint main() {\n    float a2, b, c;\n    printf(\"Enter 3 numbers: \");\n    scanf(\"%f %f %f\", &a2, &b, &c);\n    \n    if (any_int(a2, b, c)) {\n        printf(\"%f is equal to %f + %f\", a2, b, c);\n    } else {\n        printf(\"%f is not equal to %f + %f\", a2, b, c);\n    }\n    \n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/93", "prompt": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nstring encode(string message) {\n    string vowels = \"aeiouAEIOU\";\n    string out = \"\";\n    for (int i = 0; i < message.length(); i++)\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' {\n        char i2 = message [ i ];\n        if (i2 >= 97 and i2 <= 122) {\n            i2 = i2 - 32;}\n        else\nif (i2 >= 65 and i2 <= 90) i2 = i2 + 32;\n        if (find(vowels.begin(), vowels.end(), i2) != vowels.end()) i2 = i2 + 2;\n        out = out + i2;\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"test\") == \"TGST\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n}\n", "entry_point": "encode", "partial": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    # print('@@this is the line to split##')\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n", "gc": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nstring encode(string message) {\n    string vowels = \"aeiouAEIOU\";\n    string out = \"\";\n    for (int i = 0; i < message.length(); i++)\n   \n    {\n        if (vowels.find(message[i])!= string::npos)\n        {\n            out += message[i] + message[i + 1];\n            i++;\n        }\n        else\n        {\n            out += message[i];\n        }\n    }\n    return out;\n}\n\nint main() {\n    string message;\n    cin >> message;\n    cout << encode(message);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/94", "prompt": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nint skjkasdkd(vector < int > lst) {\n    int largest = 0;\n    for (int i2 = 0; i2 < lst.size(); i2++)\n    if (lst [ i2 ] > largest)\n     {\n        bool prime = true;\n        for (int j = 2; j * j <= lst [ i2 ]; j++)\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nif (lst [ i2 ] % j == 0) prime = false;\n        if (prime) largest = lst [ i2 ];\n        }\n    int sum = 0;\n    string s;\n    s = to_string(largest);\n    for (int i2 = 0; i2 < s.length(); i2++)\n    sum+=s [ i2 ] - 48;\n    return sum;\n    }\n#undef NDEBUG\n#include <assert.h>", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n}\n", "entry_point": "skjkasdkd", "partial": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                # print('@@this is the line to split##')\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n", "gc": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include <stdio.h>\n#include<vector>\n#include<string>\nusingnamespace std;\nint skjkasdkd(vector < int > lst) {\n    int largest = 0;\n    for (int i2 = 0; i2 < lst.size(); i2++)\n    if (lst [ i2 ] > largest)\n     {\n        bool prime = true;\n        for (int j = 2; j * j <= lst [ i2 ]; j++)\n       \n        if (lst [ i2 ] % j == 0)\n        {\n            prime = false;\n            break;\n        }\n        if (prime)\n        {\n            largest = lst [ i2 ];\n        }\n    }\n    return largest;\n}\nint main()\n{\n    int n;\n    vector < int > lst;\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++)\n    {\n        int a;\n        scanf(\"%d\", &a);\n        lst.push_back(a);\n    }\n    int largest = skjkasdkd(lst);\n    printf(\"%d\", largest);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/95", "prompt": "/*\nGiven a map, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include <stdio.h>\n#include<string>\n#include<map>\nusingnamespace std;\nbool check_dict_case(map < string, string > dict) {\n    map < string, string > :: iterator it;\n    int islower = 0, isupper = 0;\n    if (dict.size() == 0) return false;\n    for (it = dict.begin(); it != dict.end(); it++)\n     {\n        string key = it -> first;\n       \n", "canonical_solution": "print(' @ this is the line to split ## '\nfor (int if2 =0;i<key.length(); if2++)\n         {\n            if (key [ if2 ] < 65 or(key [ if2 ] > 90 and key [ if2 ] < 97) or key [ if2 ] > 122) return false;\n            if (key [ if2 ] >= 65 and key [ if2 ] <= 90) isupper = 1;\n            if (key [ if2 ] >= 97 and key [ if2 ] <= 122) islower = 1;\n            if (isupper + islower == 2) return false;\n            }\n        \n        }\n    return true;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n}\n", "entry_point": "check_dict_case", "partial": "/*\nGiven a map, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n        # print('@@this is the line to split##')\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n", "gc": "/*\nGiven a map, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include <stdio.h>\n#include<string>\n#include<map>\nusingnamespace std;\nbool check_dict_case(map < string, string > dict) {\n    map < string, string > :: iterator it;\n    int islower = 0, isupper = 0;\n    if (dict.size() == 0) return false;\n    for (it = dict.begin(); it!= dict.end(); it++)\n     {\n        string key = it -> first;\n       \n        if (key.size() > 1) {\n            if (key[0] == key[0].upper()) {\n                islower++;\n            }\n            else {\n                isupper++;\n            }\n        }\n        else {\n            if (key[0] == key[0].lower()) {\n                islower++;\n            }\n            else {\n                isupper++;\n            }\n        }\n    }\n    if (islower == dict.size()) return true;\n    else if (isupper == dict.size()) return false;\n    else return false;\n}\nint main() {\n    map < string, string > dict;\n    dict[\"a\"] = \"apple\";\n    dict[\"b\"] = \"banana\";\n    dict[\"c\"] = \"carrot\";\n    dict[\"d\"] = \"durian\";\n    dict[\"e\"] = \"elephant\";\n    dict[\"f\"] = \"falcon\";\n    dict[\"g\"] = \"giraffe\";\n    dict[\"h\"] = \"hippo\";\n    dict[\"i\"] = \"iguana\";\n    dict[\"j\"] = \"jaguar\";\n    dict[\"k\"] = \"kangaroo\";\n    dict[\"l\"] = \"lion\";\n    dict[\"m\"] = \"monkey\";\n    dict[\"n\"] = \"nightmare\";\n    dict[\"o\"] = \"orchid\";\n    dict[\"p\"] = \"penguin\";\n    dict[\"q\"] = \"quail\";\n    dict[\"r\"] = \"raccoon\";\n    dict[\"s\"] = \"sparrow\";\n    dict[\"t\"] = \"tiger\";\n    dict[\"u\"] = \"unicorn\";\n    dict[\"v\"] = \"vulture\";\n    dict[\"w\"] = \"wolf\";\n    dict[\"x\"] = \"x-ray\";\n    dict[\"y\"] = \"yak\";\n    dict[\"z\"] = \"zebra\";\n    if (check_dict_case(dict)) {\n        printf(\"all keys are in lower case\\n\");\n    }\n    else {\n        printf(\"some keys are in upper case\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/96", "prompt": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > count_up_to(int n) {\n    vector < int > out = {\n        }\n    ;\n    int i2, j;\n    for (i2 = 2; i2 < n; i2++)\n    if (out.size() == 0) {\n        out.push_back(i2);}\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' else\n     {\n        bool isp = true;\n        for (j = 0; out [ j ] * out [ j ] <= i2; j++)\n        if (i2 % out [ j ] == 0) isp = false;\n        if (isp) out.push_back(i2);\n        }\n    return out;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(11) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(20) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n}\n", "entry_point": "count_up_to", "partial": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        # print('@@this is the line to split##')\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n", "gc": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include <stdio.h>\n#include<vector>\nusingnamespace std;\nvector < int > count_up_to(int n) {\n    vector < int > out = {\n        }\n    ;\n    int i2, j;\n    for (i2 = 2; i2 < n; i2++)\n    if (out.size() == 0) {\n        out.push_back(i2);}\n   \n    for (j = out.size(); j > 0; j--)\n    if (out[j - 1] * i2 > n) {\n        out.erase(out.begin() + j - 1);\n    }\n    return out;\n}\n\nint main()\n{\n    int n;\n    printf(\"Enter the number: \");\n    scanf(\"%d\", &n);\n    vector < int > out = count_up_to(n);\n    for (int i = 0; i < out.size(); i++)\n    printf(\"%d \", out[i]);\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/97", "prompt": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\n", "canonical_solution": "print(' @ this is the line to split ## ' int multiply(int a2, int b) {\n    return(abs(a2) % 10) *(abs(b) % 10);\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n}\n", "entry_point": "multiply", "partial": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n# print('@@this is the line to split##')\nint multiply(int a,int b){\n    return (abs(a)%10)*(abs(b)%10);\n}\n", "gc": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include <stdio.h>\n#include<math.h>\nusingnamespace std;\n\nint multiply(int a, int b)\n{\n    int i, j, k, n, m, p, q, r, s, t, u, v, w, x, y, z;\n    if(a < 0)\n        a = -a;\n    if(b < 0)\n        b = -b;\n    if(a == 0)\n        return 0;\n    if(b == 0)\n        return 1;\n    if(a < b)\n    {\n        p = a;\n        q = b;\n    }\n    else\n    {\n        p = b;\n        q = a;\n    }\n    r = p;\n    s = q;\n    while(r!= 0)\n    {\n        n = r;\n        m = s;\n        while(m!= 0)\n        {\n            t = n;\n            u = m;\n            while(u!= 0)\n            {\n                v = t;\n                w = u;\n                x = v * w;\n                y = x / 10;\n                z = x - y * 10;\n                if(z!= 0)\n                {\n                    x = y;\n                    y = z;\n                }\n                t = t - x;\n                u = u - w;\n            }\n            m = m - t;\n        }\n        r = r - n;\n        s = s - m;\n    }\n    return p;\n}\n\nint main()\n{\n    int a, b;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &a, &b);\n    printf(\"%d\\n\", multiply(a, b));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/98", "prompt": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nint count_upper(string s) {\n    string s2 = \"AEIOU\";\n   \n", "canonical_solution": "print(' @ this is the line to split ## ' int count = 0;\n    for (int i = 0; i * 2 < s.length(); i++)\n    if (find(s2.begin(), s2.end(), s [ i * 2 ]) != s2.end())\n    count+=1;\n    return count;\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n}\n", "entry_point": "count_upper", "partial": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    # print('@@this is the line to split##')\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n", "gc": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include <stdio.h>\n#include<string>\n#include<algorithm>\nusingnamespace std;\nint count_upper(string s) {\n    string s2 = \"AEIOU\";\n   \n    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s2.find(s[i])!= string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    string s;\n    cin >> s;\n    int count = count_upper(s);\n    cout << count;\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/99", "prompt": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include <stdio.h>\n#include<math.h>\n#include<string>\nusingnamespace std;\n", "canonical_solution": "print(' @ this is the line to split ## ' int closest_integer(string value) {\n    double value2;\n    value2 = atof(value.c_str());\n    return round(value2);\n    }", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"15.3\") == 15);\n}\n", "entry_point": "closest_integer", "partial": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n# print('@@this is the line to split##')\nint closest_integer(string value){\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n", "gc": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include <stdio.h>\n#include<math.h>\n#include<string>\nusingnamespace std;\n\nint closest_integer(string num)\n{\n    int num_int = atoi(num.c_str());\n    double num_float = atof(num.c_str());\n    double diff = abs(num_int - num_float);\n    if (diff < 0.5)\n        return num_int;\n    else if (diff > 0.5)\n        return num_int + 1;\n    else\n        return num_int + (num_int > 0? 1 : -1);\n}\n\nint main()\n{\n    string num;\n    while (cin >> num)\n        cout << closest_integer(num) << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0}
