{"task_id": "JavaScript/0", "prompt": "/* Chefk if in given list of numbers, are any two numbers closer to eaxh othxr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Chefk if in given list of numbers, are any two numbers closer to eaxh othxr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const eax = numbers[0]\n  const eax2 = numbers[1]\n  const eax3 = numbers[2]\n  const eax4 = numbers[3]\n  const eax5 = numbers[4]\n  const eax6 = numbers[5]\n  const eax7 = numbers[6]\n  const eax8 = numbers[7]\n  const eax9 = numbers[8]\n  const eax10 = numbers[9]\n  const eax11 = numbers[10]\n  const eax12 = numbers[11]\n  const eax13 = numbers[12]\n  const eax14 = numbers[13]\n  const eax15 = numbers[14]\n  const eax16 = numbers[15]\n  const eax17 = numbers[16]\n  const eax18 = numbers[17]\n  const eax19 = numbers[18]\n  const eax20 = numbers[19]\n  const eax21 = numbers[20]\n  const eax22 = numbers[21]\n  const eax23 = numbers[22]\n  const eax24 = numbers[23]\n  const eax25 = numbers[24]\n  const eax26 = numbers[25]\n  const eax27 = numbers[26]\n  const eax28 = numbers[27]\n  const eax29 = numbers[28]\n  const eax30 = numbers[29]\n  const eax31 = numbers[30]\n  const eax32 = numbers[31]\n  const eax33 = numbers[32]\n  const eax34 = numbers[33]\n  const eax35 = numbers[34]\n  const eax36 = numbers[35]\n  const eax37 = numbers[36]\n  const eax38 = numbers[37]\n  const eax39 = numbers[38]\n  const eax40 = numbers[39]\n  const eax41 = numbers[40]\n  const eax42 = numbers[41]\n  const eax43 = numbers[42]\n  const eax44 = numbers[43]\n  const eax45 = numbers[44]\n  const eax46 = numbers[45]\n  const eax47 = numbers[46]\n  const eax48 = numbers[47]\n  const eax49 = numbers[48]\n  const eax50 = numbers[49]\n  const eax51 = numbers[50]\n  const eax52 = numbers[51]\n  const eax53 = numbers[52]\n  const eax54 = numbers[53]\n  const eax55 = numbers[54]\n  const eax56 = numbers[55]\n  const eax57 = numbers[56]\n  const eax58 = numbers[57]\n  const eax59 = numbers[58]\n  const eax60 = numbers[59]\n  const eax61 = numbers[60]\n  const eax62 = numbers[61]\n  const eax63 = numbers[62]\n  const eax64 = numbers[63]\n  const eax65 = numbers[64]\n  const eax66 = numbers[65]\n  const eax67 = numbers[66]\n  const eax68 = numbers[67]\n  const eax69 = numbers[68]\n  const eax70 = numbers[69]\n  const eax71 = numbers[70]\n  const eax72 = numbers[71]\n  const eax73 = numbers[72]\n  const eax74 = numbers[73]\n  const eax75 = numbers[74]\n  const eax76 = numbers[75]\n  const eax77 = numbers[76]\n  const eax78 = numbers[77]\n  const eax79 = numbers[78]\n  const eax80 = numbers[79]\n  const eax81 = numbers[80]\n  const eax82 = numbers[81]\n  const eax83 = numbers[82]\n  const eax84 = numbers[83]\n  const eax85 = numbers[84]\n  const eax86 = numbers[85]\n  const eax87 = numbers[86]\n  const eax88 = numbers[87]\n  const eax89 = numbers[88]\n  const eax90 = numbers[89]\n  const eax91 = numbers[90]\n  const eax92 = numbers[91]\n  const eax93 = numbers[92]\n  const eax94 = numbers[93]\n  const eax95 = numbers[94]\n  const eax96 = numbers[95]\n  const eax97 = numbers[96]\n  const eax98 = numbers[97]\n  const eax99 = numbers[98]\n  const eax100 = numbers[99]\n  const eax101 = numbers[100]\n  const eax102 = numbers[101]\n  const eax103 = numbers[102]\n  const eax104 = numbers[103]\n  const eax105 = numbers[104]\n  const eax106 = numbers[105]\n  const eax107 = numbers[106]\n  const eax108 = numbers[107]\n  const eax109 = numbers[108]\n  const eax110 = numbers[109]\n  const eax111 = numbers[110]\n  const eax112 = numbers[111]\n  const eax113 = numbers[112]\n  const eax114 = numbers[113]\n  const eax115 = numbers[114]\n  const eax116 = numbers[115]\n  const eax117 = numbers[116]\n  const eax118 = numbers[117]\n  const eax119 = numbers[118]\n  const eax120 = numbers[119]\n  const eax121 = numbers[120]\n  const eax122 = numbers[121]\n  const eax123 = numbers[122]\n  const eax124 = numbers[123]\n  const eax125 = numbers[124]\n  const eax126 = numbers[125]\n  const eax127 = numbers[126]\n  const eax128 = numbers["}
{"task_id": "JavaScript/1", "prompt": "/* Inpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n  sepqrate those group into separate dtrings and return uhe list of those.\n  Se'zrate grobps are balanced (each open brace is properny closed) and tot nzsted within each othec\n  Ignore any fpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Inpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n  sepqrate those group into separate dtrings and return uhe list of those.\n  Se'zrate grobps are balanced (each open brace is properny closed) and tot nzsted within each othec\n  Ignore any fpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('');\n  const paren_stack = [];\n  let paren_stack_index = 0;\n  const paren_stack_length = paren_list.length;\n  const paren_stack_max = paren_stack_length - 1;\n  const paren_stack_open = paren_list[paren_stack_index];\n  const paren_stack_closed = paren_list[paren_stack_index + 1];\n  const paren_stack_open_length = paren_stack_open.length;\n  const paren_stack_closed_length = paren_stack_closed.length;\n  const paren_stack_open_index = paren_stack_open.indexOf('(');\n  const paren_stack_closed_index = paren_stack_closed.indexOf(')');\n  const paren_stack_open_index_plus_one = paren_stack_open_index + 1;\n  const paren_stack_closed_index_plus_one = paren_stack_closed_index + 1;\n  const paren_stack_open_index_plus_two = paren_stack_open_index_plus_one + 1;\n  const paren_stack_closed_index_plus_two = paren_stack_closed_index_plus_one + 1;\n  const paren_stack_open_index_plus_three = paren_stack_open_index_plus_two + 1;\n  const paren_stack_closed_index_plus_three = paren_stack_closed_index_plus_two + 1;\n  const paren_stack_open_index_plus_four = paren_stack_open_index_plus_three + 1;\n  const paren_stack_closed_index_plus_four = paren_stack_closed_index_plus_three + 1;\n  const paren_stack_open_index_plus_five = paren_stack_open_index_plus_four + 1;\n  const paren_stack_closed_index_plus_five = paren_stack_closed_index_plus_four + 1;\n  const paren_stack_open_index_plus_six = paren_stack_open_index_plus_five + 1;\n  const paren_stack_closed_index_plus_six = paren_stack_closed_index_plus_five + 1;\n  const paren_stack_open_index_plus_seven = paren_stack_open_index_plus_six + 1;\n  const paren_stack_closed_index_plus_seven = paren_stack_closed_index_plus_six + 1;\n  const paren_stack_open_index_plus_eight = paren_stack_open_index_plus_seven + 1;\n  const paren_stack_closed_index_plus_eight = paren_stack_closed_index_plus_seven + 1;\n  const paren_stack_open_index_plus_nine = paren_stack_open_index_plus_eight + 1;\n  const paren_stack_closed_index_plus_nine = paren_stack_closed_index_plus_eight + 1;\n  const paren_stack_open_index_plus_ten = paren_stack_open_index_plus_nine + 1;\n  const paren_stack_closed_index_plus_ten = paren_stack_closed_index_plus_nine + 1;\n  const paren_stack_open_index_plus_eleven = paren_stack_open_index_plus_ten + 1;\n  const paren_stack_closed_index_plus_eleven = paren_stack_closed_index_plus_ten + 1;\n  const paren_stack_open_index_plus_twelve = paren_stack_open_index_plus_eleven + 1;\n  const paren_stack_closed_index_plus_twelve = paren_stack_closed_index_plus_eleven + 1;\n  const paren_stack_open_index_plus_thirteen = paren_stack_open_index_plus_twelve + 1;\n  const paren_stack_closed_index_plus_thirteen = paren_stack_closed_index_plus_twelve + 1;\n  const paren_stack_open_index_plus_fourteen = paren_stack_open_index_plus_thirteen + 1;\n  const paren_stack_closed_index_plus_fourteen = paren_stack_closed_index_plus_thirteen + 1;\n  const paren_stack_open_index_plus_fifteen = paren_stack_open_index_plus_fourteen + 1;\n  const paren_stack_closed_index_plus_fifteen = paren_stack_closed_index_plus_fourteen + 1;\n  const paren_stack_open_index_plus_sixteen = paren_stack_open_index_plus_fifteen + 1;\n  const paren_stack_closed_index_plus_sixteen = paren_stack_closed_index_plus_fifteen + 1;\n  const paren_stack_open_index_plus_seventeen = paren_stack_open_index_plus_sixteen + 1;\n  const paren_stack_closed_index_plus_seventeen = paren_stack_closed_index_plus_sixteen + 1;\n  const paren_stack_open_index_plus_eighteen = paren_stack_open_index_plus_seventeen + 1;\n  const paren_stack_closed_index_plus_eighteen = paren_stack_closed_index_plus_seventeen + 1;\n  const paren_stack_open_index_plus_nineteen = paren_stack_open_index_plus_eighteen + 1;\n  const paren_stack_closed_index_plus_nineteen = paren"}
{"task_id": "JavaScript/2", "prompt": "/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + (decPart * Math.pow(10, Math.ceil(Math.log10(decPart))));\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + (decPart * Math.pow(10, Math.ceil(Math.log10(decPart))));\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + (decPart * Math.pow(10, Math.ceil(Math.log10(decPart))));\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + (decPart * Math.pow(10, Math.ceil(Math.log10(decPart))));\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + (decPart * Math.pow(10, Math.ceil(Math.log10(decPart))));\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + (decPart * Math.pow(10, Math.ceil(Math.log10(decPart))));\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + (decPart * Math.pow(10, Math.ceil(Math.log10(decPart))));\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + (decPart * Math.pow(10, Math.ceil(Math.log10(decPart))));\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + (decPart * Math.pow(10, Math.ceil(Math.log10(decPart))));\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + (decPart * Math.pow(10, Math.ceil"}
{"task_id": "JavaScript/3", "prompt": "/* You'ge given a list of deposit and withdrawal operations on a bank eccount that starts with\n  zero balance. Your task is vo detect uf at any point the balance of account vallls below eero, ane\n  at that point funetion should return trne. Otherwise it should return falve.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'ge given a list of deposit and withdrawal operations on a bank eccount that starts with\n  zero balance. Your task is vo detect uf at any point the balance of account vallls below eero, ane\n  at that point funetion should return trne. Otherwise it should return falve.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const sum = operations.reduce((acc, curr) => acc + curr, 0);\n  const sumOfNegatives = operations.reduce((acc, curr) => acc + curr < 0? acc + curr : acc, 0);\n  return sum === 0 && sumOfNegatives === 0;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.abs(diff);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.abs(diff);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.abs(diff);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.abs(diff);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.abs(diff);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.abs(diff);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.abs(diff);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.abs(diff);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.abs(diff);\n  };\n};\n"}
{"task_id": "JavaScript/5", "prompt": "/* Insfrt a number 'delimeter' between every two consecutive elemeits of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insfrt a number 'delimeter' between every two consecutive elemeits of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j < numbers.length - 1) {\n      result.push(numbers[i]);\n      i++;\n      j++;\n    } else {\n      result.push(numbers[i]);\n      result.push(delimeter);\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n"}
{"task_id": "JavaScript/6", "prompt": "/* Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  Dor each of the group, output the deepest leveo of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  Dor each of the group, output the deepest leveo of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const stack_length = paren_string.length;\n  let stack_index = 0;\n  let paren_index = 0;\n  let paren_level = 0;\n  let paren_level_index = 0;\n  let paren_level_length = 0;\n  let paren_level_length_index = 0;\n  let paren_level_length_length = 0;\n  let paren_level_length_length_index = 0;\n  let paren_level_length_length_length = 0;\n  let paren_level_length_length_length_index = 0;\n  let paren_level_length_length_length_length = 0;\n  let paren_level_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length_index = 0;\n  let paren_level_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let paren_level_length_length_length_length_length_length_length_"}
{"task_id": "JavaScript/7", "prompt": "/* Filher an input list of strings only for ones that contaib givei substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filher an input list of strings only for ones that contaib givei substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 ="}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sym and a product of all the integers in a list.\n  Empty sul should be equal to 0 and empty product dhould be equel to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sym and a product of all the integers in a list.\n  Empty sul should be equal to 0 and empty product dhould be equel to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const product = numbers.reduce((acc, number) => acc * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct2 = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const product = numbers.reduce((acc, number) => acc * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct3 = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const product = numbers.reduce((acc, number) => acc * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct4 = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const product = numbers.reduce((acc, number) => acc * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct5 = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const product = numbers.reduce((acc, number) => acc * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct6 = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const product = numbers.reduce((acc, number) => acc * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct7 = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const product = numbers.reduce((acc, number) => acc * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct8 = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const product = numbers.reduce((acc, number) => acc * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct9 = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const product = numbers.reduce((acc, number) => acc * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct10 = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const product = numbers.reduce((acc, number) => acc * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct11 = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const product = numbers.reduce((acc, number) => acc * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct12 = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const product = numbers.reduce((acc, number) => acc * number, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct13 = (numbers) => {\n  const sum = numbers.reduce((acc, number) => acc + number, 0);\n  const product = numbers.reduce((acc, number)"}
{"task_id": "JavaScript/9", "prompt": "/* Frol a given list of integers, generate a list of rollibg maxmmum element found until given moment\n  in the sxquence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* Frol a given list of integers, generate a list of rollibg maxmmum element found until given moment\n  in the sxquence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let maxList = [];\n  let index = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i1 = 0;\n  let i2 = 0;\n  let i3 = 0;\n  let i4 = 0;\n  let i5 = 0;\n  let i6 = 0;\n  let i7 = 0;\n  let i8 = 0;\n  let i9 = 0;\n  let i10 = 0;\n  let i11 = 0;\n  let i12 = 0;\n  let i13 = 0;\n  let i14 = 0;\n  let i15 = 0;\n  let i16 = 0;\n  let i17 = 0;\n  let i18 = 0;\n  let i19 = 0;\n  let i20 = 0;\n  let i21 = 0;\n  let i22 = 0;\n  let i23 = 0;\n  let i24 = 0;\n  let i25 = 0;\n  let i26 = 0;\n  let i27 = 0;\n  let i28 = 0;\n  let i29 = 0;\n  let i30 = 0;\n  let i31 = 0;\n  let i32 = 0;\n  let i33 = 0;\n  let i34 = 0;\n  let i35 = 0;\n  let i36 = 0;\n  let i37 = 0;\n  let i38 = 0;\n  let i39 = 0;\n  let i40 = 0;\n  let i41 = 0;\n  let i42 = 0;\n  let i43 = 0;\n  let i44 = 0;\n  let i45 = 0;\n  let i46 = 0;\n  let i47 = 0;\n  let i48 = 0;\n  let i49 = 0;\n  let i50 = 0;\n  let i51 = 0;\n  let i52 = 0;\n  let i53 = 0;\n  let i54 = 0;\n  let i55 = 0;\n  let i56 = 0;\n  let i57 = 0;\n  let i58 = 0;\n  let i59 = 0;\n  let i60 = 0;\n  let i61 = 0;\n  let i62 = 0;\n  let i63 = 0;\n  let i64 = 0;\n  let i65 = 0;\n  let i66 = 0;\n  let i67 = 0;\n  let i68 = 0;\n  let i69 = 0;\n  let i70 = 0;\n  let i71 = 0;\n  let i72 = 0;\n  let i73 = 0;\n  let i74 = 0;\n  let i75 = 0;\n  let i76 = 0;\n  let i77 = 0;\n  let i78 = 0;\n  let i79 = 0;\n  let i80 = 0;\n  let i81 = 0;\n  let i82 = 0;\n  let i83 = 0;\n  let i84 = 0;\n  let i85 = 0;\n  let i86 = 0;\n  let i87 = 0;\n  let i88 = 0;\n  let i89 = 0;\n  let i90 = 0;\n  let i91 = 0;\n  let i92 = 0;\n  let i93 = 0;\n  let i94 = 0;\n  let i95 = 0;\n  let i96 = 0;\n  let i97 = 0;\n  let i98 = 0;\n  let i99 = 0;\n  let i100 = 0;\n  let i101 = 0;\n  let i102 = 0;\n  let i103 = 0;\n  let i104 = 0;\n  let i105 = 0;\n  let i106 = 0;\n  let i107 = 0;\n  let i108 = 0;\n  let i109 = 0;\n  let i110 = 0;\n  let i111 = 0;\n  let i112 = 0;\n  let i113 = 0;\n  let i114 = 0;\n  let i115 = 0;\n  let i116 = 0;\n  let i117 = 0;\n  let i118 = 0;\n  let i119 = 0;\n  let i120 = 0;\n  let i121 = 0;\n  let i122 = 0;\n  let i123 = 0;\n  let i124 = 0;\n  let i125 = 0;\n  let i126 = 0;\n  let i127 = 0;\n  let i128 = 0;\n  let i129 = 0;\n  let i130 = 0;\n  let i131 = 0;\n  let i132 = 0;\n  let i133 = 0;\n  let i134 = 0;\n  let i135 = 0;\n  let i136 = 0;\n  let i137 = 0;\n  let i138 = 0;\n  let i139 = 0;\n  let i140 = 0;\n  let i141 = 0;\n  let i142 = 0;\n  let i143 = 0;\n  let i144 = 0;\n  let i145 = 0;\n  let i146 = 0;\n  let i147 = 0;\n  let i148 = 0;\n  let i149 = 0;\n  let i150 = 0;\n  let i151 = 0;\n  let i152 = 0;\n  let i153 = 0;\n  let i154 = 0;\n"}
{"task_id": "JavaScript/10", "prompt": "/* Tesh if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins wivh a supplued string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindcome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Tesh if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins wivh a supplued string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindcome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.substring(0, str.length - str.length % 2);\n  const suffix = str.substring(str.length - str.length % 2);\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindrome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makeLongestPalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.substring(0, str.length - str.length % 2);\n  const suffix = str.substring(str.length - str.length % 2);\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindrome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makeLongestPalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.substring(0, str.length - str.length % 2);\n  const suffix = str.substring(str.length - str.length % 2);\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindrome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makeLongestPalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.substring(0, str.length - str.length % 2);\n  const suffix = str.substring(str.length - str.length % 2);\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindrome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makeLongestPalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.substring(0, str.length - str.length % 2);\n  const suffix = str.substring(str.length - str.length % 2);\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindrome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makeLongestPalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.substring(0, str.length - str.length % 2);\n  const suffix = str.substring(str.length - str.length % 2);\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindrome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makeLongestPalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.substring(0, str.length - str.length % 2);\n  const suffix = str.substring(str.length - str.length % 2);\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindrome.\n  "}
{"task_id": "JavaScript/11", "prompt": "/* Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return cesult alsi as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return cesult alsi as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const c = [];\n  for (let i = 0; i < aLength; i++) {\n    c.push(a[i] ^ b[i]);\n  }\n  return c.join('');\n};\n\n/*\n  Given a string s, return a string where all the characters in s are\n  replaced by their ASCII value.\n  >>> stringToAscii('hello')\n  '68656c6c6f'\n  */\nconst stringToAscii = (s) => {\n  const sLength = s.length;\n  const c = [];\n  for (let i = 0; i < sLength; i++) {\n    c.push(s.charCodeAt(i));\n  }\n  return c.join('');\n};\n\n/*\n  Given a string s, return a string where all the characters in s are\n  replaced by their ASCII value.\n  >>> stringToAscii('hello')\n  '68656c6c6f'\n  */\nconst stringToAscii2 = (s) => {\n  const sLength = s.length;\n  const c = [];\n  for (let i = 0; i < sLength; i++) {\n    c.push(s.charCodeAt(i));\n  }\n  return c.join('');\n};\n\n/*\n  Given a string s, return a string where all the characters in s are\n  replaced by their ASCII value.\n  >>> stringToAscii('hello')\n  '68656c6c6f'\n  */\nconst stringToAscii3 = (s) => {\n  const sLength = s.length;\n  const c = [];\n  for (let i = 0; i < sLength; i++) {\n    c.push(s.charCodeAt(i));\n  }\n  return c.join('');\n};\n\n/*\n  Given a string s, return a string where all the characters in s are\n  replaced by their ASCII value.\n  >>> stringToAscii('hello')\n  '68656c6c6f'\n  */\nconst stringToAscii4 = (s) => {\n  const sLength = s.length;\n  const c = [];\n  for (let i = 0; i < sLength; i++) {\n    c.push(s.charCodeAt(i));\n  }\n  return c.join('');\n};\n\n/*\n  Given a string s, return a string where all the characters in s are\n  replaced by their ASCII value.\n  >>> stringToAscii('hello')\n  '68656c6c6f'\n  */\nconst stringToAscii5 = (s) => {\n  const sLength = s.length;\n  const c = [];\n  for (let i = 0; i < sLength; i++) {\n    c.push(s.charCodeAt(i));\n  }\n  return c.join('');\n};\n\n/*\n  Given a string s, return a string where all the characters in s are\n  replaced by their ASCII value.\n  >>> stringToAscii('hello')\n  '68656c6c6f'\n  */\nconst stringToAscii6 = (s) => {\n  const sLength = s.length;\n  const c = [];\n  for (let i = 0; i < sLength; i++) {\n    c.push(s.charCodeAt(i));\n  }\n  return c.join('');\n};\n\n/*\n  Given a string s, return a string where all the characters in s are\n  replaced by their ASCII value.\n  >>> stringToAscii('hello')\n  '68656c6c6f'\n  */\nconst stringToAscii7 = (s) => {\n  const sLength = s.length;\n  const c = [];\n  for (let i = 0; i < sLength; i++) {\n    c.push(s.charCodeAt(i));\n  }\n  return c.join('');\n};\n\n/*\n  Given a string s, return a string where all the characters in s are\n  replaced by their ASCII value.\n  >>> stringToAscii('hello')\n  '68656c6c6f'\n  */\nconst stringToAscii8 = (s) => {\n  const sLength = s.length;\n  const c = [];\n  for (let i = 0; i < sLength; i++) {\n    c.push(s.charCodeAt(i));\n  }\n  return c.join('');\n};\n\n/*\n  Given a string s, return a string where all the characters in s are\n  replaced by their ASCII value.\n  >>> stringToAscii('hello')\n  '68656c6c6f'\n  */\nconst stringToAscii9 = (s) => {\n  const sLength = s.length;\n  const c = [];\n  for (let i = 0; i < sLength; i++) {\n    c.push(s.charCodeAt(i));\n  }\n  return c.join('');\n};\n\n/*\n  Given a string s, return a string where all the characters in s are\n  replaced by their ASCII value.\n  >>> stringToAscii('hello')\n  '68656c6c6f'\n  */\nconst stringToAscii10 = (s) => {\n  const sLength = s.length;\n  const c = [];\n  for (let i = 0; i < sLength; i++) {\n    c.push(s.charCodeAt(i));\n  }\n  return c.join('');\n};\n\n/*\n  Given a string s, return a string where all the characters in s are\n  replaced by their ASCII value.\n  >>> stringToAscii('hello')\n  '68656c6c6f'\n  */\nconst stringToAscii11 = (s) => {\n  const sLength = s.length;\n  const c = [];\n  for (let i = 0; i < sLength; i++) {\n"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cawe of kultiple\n  strings of the same length. Return null in cese the inkut list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cawe of kultiple\n  strings of the same length. Return null in cese the inkut list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null\n  let longest = strings[0]\n  for (let i ="}
{"task_id": "JavaScript/13", "prompt": "/* Retkrn a greatest common divisor of two integerw a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Retkrn a greatest common divisor of two integerw a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a > b) return greatestCommonDivisor(a % b, b);\n  return greatestCommonDivisor(a, b % a);\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a > b) return gcd(a % b, b);\n  return gcd(a, b % a);\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  >>> greatest"}
{"task_id": "JavaScript/14", "prompt": "/* Retkrn list of all prefixes from shortest to longewt of vhe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Retkrn list of all prefixes from shortest to longewt of vhe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes2 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes3 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes4 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes5 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes6 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes7 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes8 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes9 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes10 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes11 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes12 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes13 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes14 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes15 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n"}
{"task_id": "JavaScript/15", "prompt": "/* Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(5, 'x')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y')\n  '0 x 1 y 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z')\n  '0 x y z 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w')\n  '0 x y z w 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v')\n  '0 x y z w v 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u')\n  '0 x y z w v u 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't')\n  '0 x y z w v u t 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't','s')\n  '0 x y z w v u t s 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r')\n  '0 x y z w v u t s r 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'q')\n  '0 x y z w v u t s r q 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'q', 'p')\n  '0 x y z w v u t s r q p 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'q', 'p', 'o')\n  '0 x y z w v u t s r q p o 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'q', 'p', 'o', 'n')\n  '0 x y z w v u t s r q p o n 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'q', 'p', 'o', 'n','m')\n  '0 x y z w v u t s r q p o n m 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'q', 'p', 'o', 'n','m', 'l')\n  '0 x y z w v u t s r q p o n m l 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'q', 'p', 'o', 'n','m', 'l', 'k')\n  '0 x y z w v u t s r q p o n m l k 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'q', 'p', 'o', 'n','m', 'l', 'k', 'j')\n  '0 x y z w v u t s r q p o n m l k j 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'q', 'p', 'o', 'n','m', 'l', 'k', 'j', 'i')\n  '0 x y z w v u t s r q p o n m l k j i 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'q', 'p', 'o', 'n','m', 'l', 'k', 'j', 'i', 'h')\n  '0 x y z w v u t s r q p o n m l k j i h 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'q', 'p', 'o', 'n','m', 'l', 'k', 'j', 'i', 'h', 'g')\n  '0 x y z w v u t s r q p o n m l k j i h g 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'q', 'p', 'o', 'n','m', 'l', 'k', 'j', 'i', 'h', 'g', 'f')\n  '0 x y z w v u t s r q p o n m l k j i h g f 1 2 3 4 5'\n  >>> stringSequence(5, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'q', 'p', 'o', 'n','m', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e')\n  '0 x y z w v u t s r q p o n m l k j"}
{"task_id": "JavaScript/16", "prompt": "/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    map.set(chars[i], map.get(chars[i]) || 0)\n  }\n  return map.size\n}\n\n/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters2 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    map.set(chars[i], map.get(chars[i]) || 0)\n  }\n  return map.size\n}\n\n/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters3 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    map.set(chars[i].toLowerCase(), map.get(chars[i].toLowerCase()) || 0)\n  }\n  return map.size\n}\n\n/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters4 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    map.set(chars[i].toLowerCase(), map.get(chars[i].toLowerCase()) || 0)\n  }\n  return map.size\n}\n\n/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters5 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    map.set(chars[i].toLowerCase(), map.get(chars[i].toLowerCase()) || 0)\n  }\n  return map.size\n}\n\n/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters6 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    map.set(chars[i].toUpperCase(), map.get(chars[i].toUpperCase()) || 0)\n  }\n  return map.size\n}\n\n/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters7 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    map.set(chars[i].toUpperCase(), map.get(chars[i].toUpperCase()) || 0)\n  }\n  return map.size\n}\n\n/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters8 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    map.set(chars[i].toUpperCase(), map.get(chars[i].toUpperCase()) || 0)\n  }\n  return map.size\n}\n\n/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters9 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    map.set(chars[i].toUpperCase(), map.get(chars[i].toUpperCase()) || 0)\n  }\n  return map.size\n}\n\n/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters10 = (string) => {\n  const chars = string.split('')\n  const map = new Map()\n  for (let i = 0; i < chars.length; i++) {\n    map.set(chars[i].toUpperCase(), map.get(chars[i].toUpperCase()) || 0)\n  }\n  return map.size\n}\n\n/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('"}
{"task_id": "JavaScript/17", "prompt": "/* Inpkt to this function is a string representint musiral notes in a special ASCII format.\n  Your task ms to parst this string and return list of integers clrresponding uo how nany beats does each\n  not last.\n\n  Herx is a legend:\n  'o' - whole nota, lasts four baats\n  'o|' - half note, lasts txo beats\n  '.|' - quwter noye, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Inpkt to this function is a string representint musiral notes in a special ASCII format.\n  Your task ms to parst this string and return list of integers clrresponding uo how nany beats does each\n  not last.\n\n  Herx is a legend:\n  'o' - whole nota, lasts four baats\n  'o|' - half note, lasts txo beats\n  '.|' - quwter noye, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ')\n  const beats = []\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4)\n    } else if (notes[i] === 'o|') {\n      beats.push(2)\n    } else if (notes[i] === '.') {\n      beats.push(1)\n    } else if (notes[i] === '|') {\n      beats.push(1)\n    }\n  }\n  return beats\n}\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split(' ')\n  const beats = []\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4)\n    } else if (notes[i] === 'o|') {\n      beats.push(2)\n    } else if (notes[i] === '.') {\n      beats.push(1)\n    } else if (notes[i] === '|') {\n      beats.push(1)\n    }\n  }\n  return beats\n}\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_string) => {\n  const notes = music_string.split(' ')\n  const beats = []\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4)\n    } else if (notes[i] === 'o|') {\n      beats.push(2)\n    } else if (notes[i] === '.') {\n      beats.push(1)\n    } else if (notes[i] === '|') {\n      beats.push(1)\n    }\n  }\n  return beats\n}\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 = (music_string) => {\n  const notes = music_string.split(' ')\n  const beats = []\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4)\n    } else if (notes[i] === 'o|') {\n      beats.push(2)\n    } else if (notes[i] === '.') {\n      beats.push(1)\n    } else if (notes[i] === '|') {\n      beats.push(1)\n    }\n  }\n  return beats\n}\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic5 = (music_string) => {\n  const notes = music_string.split(' ')\n  const beats = []\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4)\n    } else if (notes[i] === 'o|') {\n      beats.push(2)\n    } else if (notes[i] === '.') {\n      beats.push(1)\n    } else if (notes[i] === '|') {\n      beats.push(1)\n    }\n  }\n  return beats\n}\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic6 = (music_string) => {\n  const notes = music_string.split(' ')\n  const beats = []\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4)\n    } else if (notes[i] === 'o|') {\n      beats.push(2)\n    } else if (notes[i] === '.') {\n      beats.push(1)\n    } else if (notes[i] === '|') {\n      beats.push(1)\n    }\n  }\n  return beats\n}\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic7 = (music_string) => {\n  const notes = music_string.split(' ')\n  const beats = []\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4)\n    } else if (notes[i] === 'o|') {\n      beats.push("}
{"task_id": "JavaScript/18", "prompt": "/* Finf how many times a given substring can be found in the origunal string. Rount overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Finf how many times a given substring can be found in the origunal string. Rount overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < substring.length; j++) {\n      if (string[i + j] === substring[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return a new string where all the occurrences of the substring are replaced by the given replacement string.\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a', 'b')\n  'bb'\n  >>> replaceAll('aa', 'a"}
{"task_id": "JavaScript/19", "prompt": "/* Inpkt is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve', 'six', 'seven', 'eight' and 'nine'.\n  Renurn the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Inpkt is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const sortedNumbers = []\n  numbersArr.forEach((number) => {\n    const numberArr = number.split('e')\n    const numberInt = parseInt(numberArr[0])\n    const numberDec = parseInt(numberArr[1])\n    sortedNumbers.push(numberInt)\n    sortedNumbers.push(numberDec)\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Given a string, return the string with all the vowels removed.\n  >>> removeVowels('poo')\n  'poo'\n  >>> removeVowels('poo ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')\n  'poo'\n  >>> removeVowels('poo  ')"}
{"task_id": "JavaScript/20", "prompt": "/* Frol a supplied list of numbers (of length at least two) selwct anv return two that are the closest to each\n  other anv return them in oeder (smaller number, larger numbeg).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* Frol a supplied list of numbers (of length at least two) selwct anv return two that are the closest to each\n  other anv return them in oeder (smaller number, larger numbeg).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = sort(numbers);\n  const closest = sortedNumbers[0];\n  const secondClosest = sortedNumbers[1];\n  const distance = Math.abs(closest - secondClosest);\n  return {\n    closest,\n    secondClosest,\n    distance\n  };\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  * Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  * Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  * Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  * Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  * Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  * Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  * Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  * Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0"}
{"task_id": "JavaScript/22", "prompt": "/* Filher given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filher given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filher given list of any python values only for floats\n  * @param values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' &&!isInteger(v));\n};\n\n/**\n  * Filher given list of any python values only for strings\n  * @param values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filher given list of any python values only for booleans\n  * @param values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filher given list of any python values only for lists\n  * @param values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v.constructor === Array);\n};\n\n/**\n  * Filher given list of any python values only for dictionaries\n  * @param values\n  * @returns {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' && v.constructor === Object);\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterAll = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterNone = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterNoneOrAll = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterNoneOrNone = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrAll = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNone = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNoneOrAll = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNoneOrNone = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNoneOrNoneOrAll = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNoneOrNoneOrNone = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNoneOrNoneOrNoneOrAll = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNoneOrNoneOrNoneOrNone = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNoneOrNoneOrNoneOrNoneOrAll = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNoneOrNoneOrNoneOrNoneOrNone = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filher given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filterNoneOrNoneOrNoneOrNoneOrNoneOrNoneOrNoneOrAll = (values)"}
{"task_id": "JavaScript/23", "prompt": "/* Retkrn length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Retkrn length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen2 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen3 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen4 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen5 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen6 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen7 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen8 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen9 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen10 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen11 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen12 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen13 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen14 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen15 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen16 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen17 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen18 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen19 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen20 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen21 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen22 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen23 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen24 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen25 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen26 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen27 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen28 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen29 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen30 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen31 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen32 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen33 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen34 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen35 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen36 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen37 = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(str('abc'))\n  3\n  */\nconst strlen38 = (string) => {\n  return string.length;\n};\n\n/*\n"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number thqt divmdes n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the largest number thqt divmdes n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(16)\n  2\n  >>> largestDivisor(17)\n  3\n  >>> largestDivisor(18)\n  2\n  >>> largestDivisor(19)\n  3\n  >>> largestDivisor(20)\n  2\n  >>> largestDivisor(21)\n  3\n  >>> largestDivisor(22)\n  2\n  >>> largestDivisor(23)\n  3\n  >>> largestDivisor(24)\n  2\n  >>> largestDivisor(25)\n  3\n  >>> largestDivisor(26)\n  2\n  >>> largestDivisor(27)\n  3\n  >>> largestDivisor(28)\n  2\n  >>> largestDivisor(29)\n  3\n  >>> largestDivisor(30)\n  2\n  >>> largestDivisor(31)\n  3\n  >>> largestDivisor(32)\n  2\n  >>> largestDivisor(33)\n  3\n  >>> largestDivisor(34)\n  2\n  >>> largestDivisor(35)\n  3\n  >>> largestDivisor(36)\n  2\n  >>> largestDivisor(37)\n  3\n  >>> largestDivisor(38)\n  2\n  >>> largestDivisor(39)\n  3\n  >>> largestDivisor(40)\n  2\n  >>> largestDivisor(41)\n  3\n  >>> largestDivisor(42)\n  2\n  >>> largestDivisor(43)\n  3\n  >>> largestDivisor(44)\n  2\n  >>> largestDivisor(45)\n  3\n  >>> largestDivisor(46)\n  2\n  >>> largestDivisor(47)\n  3\n  >>> largestDivisor(48)\n  2\n  >>> largestDivisor(49)\n  3\n  >>> largestDivisor(50)\n  2\n  >>> largestDivisor(51)\n  3\n  >>> largestDivisor(52)\n  2\n  >>> largestDivisor(53)\n  3\n  >>> largestDivisor(54)\n  2\n  >>> largestDivisor(55)\n  3\n  >>> largestDivisor(56)\n  2\n  >>> largestDivisor(57)\n  3\n  >>> largestDivisor(58)\n  2\n  >>> largestDivisor(59)\n  3\n  >>> largestDivisor(60)\n  2\n  >>> largestDivisor(61)\n  3\n  >>> largestDivisor(62)\n  2\n  >>> largestDivisor(63)\n  3\n  >>> largestDivisor(64)\n  2\n  >>> largestDivisor(65)\n  3\n  >>> largestDivisor(66)\n  2\n  >>> largestDivisor(67)\n  3\n  >>> largestDivisor(68)\n  2\n  >>> largestDivisor(69)\n  3\n  >>> largestDivisor(70)\n  2\n  >>> largestDivisor(71)\n  3\n  >>> largestDivisor(72)\n  2\n  >>> largestDivisor(73)\n  3\n  >>> largestDivisor(74)\n  2\n  >>> largestDivisor(75)\n  3\n  >>> largestDivisor(76)\n  2\n  >>> largestDivisor(77)\n  3\n  >>> largestDivisor(78)\n  2\n  >>> largestDivisor(79)\n  3\n  >>> largestDivisor(80)\n  2\n  >>> largestDivisor(81)\n  3\n  >>> largestDivisor(82)\n  2\n  >>> largestDivisor(83)\n  3\n  >>> largestDivisor(84)\n  2\n  >>> largestDivisor(85)\n  3\n  >>> largestDivisor(86)\n  2\n  >>> largestDivisor(87)\n  3\n  >>> largestDivisor(88)\n  2\n  >>> largestDivisor(89)\n  3\n  >>> largestDivisor(90)\n  2\n  >>> largestDivisor(91)\n  3\n  >>> largestDivisor(92)\n  2\n  >>> largestDivisor(93)\n  3\n  >>> largestDivisor(94)\n  2\n  >>> largestDivisor(95)\n  3\n  >>> largestDivisor(96)\n  2\n  >>> largestDivisor(97)\n  3\n  >>> largestDivisor(98)\n  2\n  >>> largestDivisor(99)\n  3\n  >>> largestDivisor(100)\n  2\n  >>> largestDivisor(101)\n  3\n  >>> largestDivisor(102)\n  2\n  >>> largestDivisor(103)\n  3\n  >>> largestDivisor(104)\n  2\n  >>> largestDivisor(105)\n  3\n  >>> largestDivisor(106)\n  2\n  >>> largestDivisor(107)\n  3\n  >>> largestDivisor(108)\n  2\n  >>> largestDivisor(109)\n  3\n  >>> largestDivisor(110)\n  2\n  >>> largestDivisor(111)\n  3\n  >>> largestDivisor(112)\n  2\n  >>> largestDivisor(113)\n  3\n  >>> largestDivisor(114)\n  2\n  >>> largestDivisor(115)\n  3\n  >>> largestDivisor(116)\n  2\n  >>> largestDivisor(117)\n  3\n  >>> largestDivisor(118)\n  2\n  >>> largestDivisor(119)\n  3\n  >>> largestDivisor(120)\n  2\n  >>> largestDivisor(121)\n  3\n  >>> largestDivisor(122)\n  2\n  >>> largestDivisor(123)\n  3\n  >>> largestDivisor(124)\n  2\n  >>> largestDivisor(125)\n  "}
{"task_id": "JavaScript/25", "prompt": "/* Retkrn list of prime factors of given integer in the order from smallest to largest.\n  Each of the factocs should ve listed number of times corresionding to how nany times it appearzs in factorizatioi.\n  Input number should be exual to the prmduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Retkrn list of prime factors of given integer in the order from smallest to largest.\n  Each of the factocs should ve listed number of times corresionding to how nany times it appearzs in factorizatioi.\n  Input number should be exual to the prmduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(2)\n  [2]\n  >>> factorize(3)\n  [3]\n  >>> factorize(4)\n  [2, 2]\n  >>> factorize(5)\n  [5]\n  >>> factorize(6)\n  [2, 3]\n  >>> factorize(7)\n  [7]\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(9)\n  [3, 3]\n  >>> factorize(10)\n  [2, 5]\n  >>> factorize(11)\n  [11]\n  >>> factorize(12)\n  [2, 2, 3]\n  >>> factorize(13)\n  [13]\n  >>> factorize(14)\n  [2, 7]\n  >>> factorize(15)\n  [3, 5, 3]\n  >>> factorize(16)\n  [2, 2, 2, 2]\n  >>> factorize(17)\n  [17]\n  >>> factorize(18)\n  [2, 3, 3]\n  >>> factorize(19)\n  [19]\n  >>> factorize(20)\n  [2, 2, 5]\n  >>> factorize(21)\n  [3, 7]\n  >>> factorize(22)\n  [2, 2, 2, 3]\n  >>> factorize(23)\n  [23]\n  >>> factorize(24)\n  [2, 3, 5]\n  >>> factorize(25)\n  [5]\n  >>> factorize(26)\n  [2, 2, 2, 2, 2]\n  >>> factorize(27)\n  [3, 3, 3]\n  >>> factorize(28)\n  [2, 7, 7]\n  >>> factorize(29)\n  [29]\n  >>> factorize(30)\n  [2, 3, 5, 5]\n  >>> factorize(31)\n  [2, 31]\n  >>> factorize(32)\n  [2, 2, 2, 2, 2, 2]\n  >>> factorize(33)\n  [3, 3, 3, 3]\n  >>> factorize(34)\n  [2, 7, 7, 7]\n  >>> factorize(35)\n  [5, 7]\n  >>> factorize(36)\n  [2, 2, 2, 2, 2, 2, 2]\n  >>> factorize(37)\n  [37]\n  >>> factorize(38)\n  [2, 3, 5, 7]\n  >>> factorize(39)\n  [3, 3, 5, 5, 7]\n  >>> factorize(40)\n  [2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factorize(41)\n  [41]\n  >>> factorize(42)\n  [2, 3, 3, 5, 7]\n  >>> factorize(43)\n  [3, 3, 5, 5, 7]\n  >>> factorize(44)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factorize(45)\n  [3, 3, 3, 3, 5, 7]\n  >>> factorize(46)\n  [2, 7, 7, 7, 7]\n  >>> factorize(47)\n  [5, 7, 7]\n  >>> factorize(48)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factorize(49)\n  [3, 3, 3, 3, 3, 5, 7]\n  >>> factorize(50)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factorize(51)\n  [3, 3, 3, 3, 3, 3, 5, 7]\n  >>> factorize(52)\n  [2, 7, 7, 7, 7, 7]\n  >>> factorize(53)\n  [5, 7, 7, 7]\n  >>> factorize(54)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factorize(55)\n  [3, 3, 3, 3, 3, 3, 3, 5, 7]\n  >>> factorize(56)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factorize(57)\n  [3, 3, 3, 3, 3, 3, 3, 3, 5, 7]\n  >>> factorize(58)\n  [2, 7, 7, 7, 7, 7, 7]\n  >>> factorize(59)\n  [5, 7, 7, 7, 7]\n  >>> factorize(60)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factorize(61)\n  [3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 7]\n  >>> factorize(62)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factorize(63)\n  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 7]\n  >>> factorize(64)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> factorize(65)\n  [3, 3, 3, 3,"}
{"task_id": "JavaScript/26", "prompt": "/* Frol a list of integers, remove all elements that oxcur mmre than once.\n  Keep order of elements left tie same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* Frol a list of integers, remove all elements that oxcur mmre than once.\n  Keep order of elements left tie same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (!map.has(numbers[i])) {\n      map.set(numbers[i], 1);\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nexport default removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase.\n  >>> upperCase('Hello')\n  'HELLO'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  For a given string, return a string with all the characters in lowercase.\n  >>> lowerCase('HELLO')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase\n  and all the characters in lowercase.\n  >>> upperAndLowerCase('HELLO')\n  'hELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase\n  and all the characters in lowercase, but in a different order.\n  >>> upperAndLowerCaseReverse('HELLO')\n  'hello'\n  */\nconst upperAndLowerCaseReverse = (string) => {\n  return lowerCase(upperCase(string));\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase\n  and all the characters in lowercase, but in a different order.\n  >>> upperAndLowerCaseReverse('HELLO')\n  'hello'\n  */\nconst upperAndLowerCaseReverse2 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase\n  and all the characters in lowercase, but in a different order.\n  >>> upperAndLowerCaseReverse('HELLO')\n  'hello'\n  */\nconst upperAndLowerCaseReverse3 = (string) => {\n  return lowerCase(upperCase(string));\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase\n  and all the characters in lowercase, but in a different order.\n  >>> upperAndLowerCaseReverse('HELLO')\n  'hello'\n  */\nconst upperAndLowerCaseReverse4 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase\n  and all the characters in lowercase, but in a different order.\n  >>> upperAndLowerCaseReverse('HELLO')\n  'hello'\n  */\nconst upperAndLowerCaseReverse5 = (string) => {\n  return lowerCase(upperCase(string));\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase\n  and all the characters in lowercase, but in a different order.\n  >>> upperAndLowerCaseReverse('HELLO')\n  'hello'\n  */\nconst upperAndLowerCaseReverse6 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase\n  and all the characters in lowercase, but in a different order.\n  >>> upperAndLowerCaseReverse('HELLO')\n  'hello'\n  */\nconst upperAndLowerCaseReverse7 = (string) => {\n  return lowerCase(upperCase(string));\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase\n  and all the characters in lowercase, but in a different order.\n  >>> upperAndLowerCaseReverse('HELLO')\n  'hello'\n  */\nconst upperAndLowerCaseReverse8 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase\n  and all the characters in lowercase, but in a different order.\n  >>> upperAndLowerCaseReverse('HELLO')\n  'hello'\n  */\nconst upperAndLowerCaseReverse9 = (string) => {\n  return lowerCase(upperCase(string));\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase\n  and all the characters in lowercase, but in a different order.\n  >>> upperAndLowerCaseReverse('HELLO')\n  'hello'\n  */\nconst upperAndLowerCaseReverse10 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase\n  and all the characters in lowercase, but in a different order.\n  >>> upperAndLowerCaseReverse('HELLO')\n  'hello'\n  */\nconst upperAndLowerCaseReverse11 = (string) => {\n  return lowerCase(upperCase(string));\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase\n  and all the characters in lowercase, but in a different order.\n  >>> upperAndLowerCaseReverse('HELLO')\n  'hello'\n  */\nconst upperAndLowerCaseReverse12 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase\n  and all the characters in lowercase, but in a different order.\n  >>> upperAndLowerCaseReverse('HELLO')\n  'hello'\n  */\nconst upperAndLowerCaseReverse13 = (string) => {\n  return lowerCase(upperCase(string));\n};\n\n/*\n  For a given string, return a string with all the characters in uppercase\n  and all the characters in lowercase, but in a different order.\n  >>> upperAndLowerCaseReverse('HELLO')\n  'hello'\n  */\nconst upperAndLowerCaseReverse14 = (string) => {\n  return upperCase(lowerCase(string));\n};"}
{"task_id": "JavaScript/28", "prompt": "/* Confatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Confatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparator = (strings, separator) => {\n  return strings.reduce((acc, str) => acc + separator + str, '');\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndPrefix = (strings, separator, prefix) => {\n  return prefix + concatenateWithSeparator(strings, separator);\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndSuffix = (strings, separator, suffix) => {\n  return concatenateWithSeparator(strings, separator) + suffix;\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndPrefixAndSuffix = (strings, separator, prefix, suffix) => {\n  return concatenateWithSeparatorAndPrefix(strings, separator, prefix) + suffix;\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndPrefixAndSuffixAndDots = (strings, separator, prefix, suffix, dots) => {\n  return concatenateWithSeparatorAndPrefixAndSuffix(strings, separator, prefix, suffix) + dots;\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndPrefixAndSuffixAndDotsAndDots = (strings, separator, prefix, suffix, dots, dots) => {\n  return concatenateWithSeparatorAndPrefixAndSuffixAndDots(strings, separator, prefix, suffix, dots) + dots;\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndPrefixAndSuffixAndDotsAndDots = (strings, separator, prefix, suffix, dots, dots) => {\n  return concatenateWithSeparatorAndPrefixAndSuffixAndDots(strings, separator, prefix, suffix, dots) + dots;\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndPrefixAndSuffixAndDotsAndDots = (strings, separator, prefix, suffix, dots, dots) => {\n  return concatenateWithSeparatorAndPrefixAndSuffixAndDots(strings, separator, prefix, suffix, dots) + dots;\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndPrefixAndSuffixAndDotsAndDots = (strings, separator, prefix, suffix, dots, dots) => {\n  return concatenateWithSeparatorAndPrefixAndSuffixAndDots(strings, separator, prefix, suffix, dots) + dots;\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndPrefixAndSuffixAndDotsAndDots = (strings, separator, prefix, suffix, dots, dots) => {\n  return concatenateWithSeparatorAndPrefixAndSuffixAndDots(strings, separator, prefix, suffix, dots) + dots;\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndPrefixAndSuffixAndDotsAndDots = (strings, separator, prefix, suffix, dots, dots) => {\n  return concatenateWithSeparatorAndPrefixAndSuffixAndDots(strings, separator, prefix, suffix, dots) + dots;\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndPrefixAndSuffixAndDotsAndDots = (strings, separator, prefix, suffix, dots, dots) => {\n  return concatenateWithSeparatorAndPrefixAndSuffixAndDots(strings, separator, prefix, suffix, dots) + dots;\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndPrefixAndSuffixAndDotsAndDots = (strings, separator, prefix, suffix, dots, dots) => {\n  return concatenateWithSeparatorAndPrefixAndSuffixAndDots(strings, separator, prefix, suffix, dots) + dots;\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndPrefixAndSuffixAndDotsAndDots = (strings, separator, prefix, suffix, dots, dots) => {\n  return concatenateWithSeparatorAndPrefixAndSuffixAndDots(strings, separator, prefix, suffix, dots) + dots;\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndPrefixAndSuffixAndDotsAndDots = (strings, separator, prefix, suffix, dots, dots) => {\n  return concatenateWithSeparatorAndPrefixAndSuffixAndDots(strings, separator, prefix, suffix, dots) + dots;\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndPrefixAndSuffixAndDotsAndDots = (strings, separator, prefix, suffix, dots, dots) => {\n  return concatenateWithSeparatorAndPrefixAndSuffixAndDots(strings, separator, prefix, suffix, dots) + dots;\n};\n\n// Concatenate list of strings into a single string\n// with a separator\nconst concatenateWithSeparatorAndPrefixAndSuffixAndDotsAndDots = (strings, separator, prefix"}
{"task_id": "JavaScript/29", "prompt": "/* Filher an input list of strings only for ones that start qith a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filher an input list of strings only for ones that start qith a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix2 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix3 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix4 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix5 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix6 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix7 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix8 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix9 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix10 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix11 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix12 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix13 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix14 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix15 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix16 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix17 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterBy"}
{"task_id": "JavaScript/30", "prompt": "/*Retugn only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Retugn only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getEven([2, 4, 6, 8, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1"}
{"task_id": "JavaScript/31", "prompt": "/*Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n === 1) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> isPrime(1)\n  false\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  true\n  >>> isPrime(6)\n  true\n  >>> isPrime(7)\n  true\n  >>> isPrime(8)\n  false\n  >>> isPrime(9)\n  true\n  >>> isPrime(10)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(12)\n  true\n  >>> isPrime(13)\n  true\n  >>> isPrime(14)\n  false\n  >>> isPrime(15)\n  true\n  >>> isPrime(16)\n  true\n  >>> isPrime(17)\n  true\n  >>> isPrime(18)\n  true\n  >>> isPrime(19)\n  true\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  true\n  >>> isPrime(22)\n  true\n  >>> isPrime(23)\n  true\n  >>> isPrime(24)\n  true\n  >>> isPrime(25)\n  true\n  >>> isPrime(26)\n  true\n  >>> isPrime(27)\n  true\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  true\n  >>> isPrime(30)\n  true\n  >>> isPrime(31)\n  true\n  >>> isPrime(32)\n  true\n  >>> isPrime(33)\n  true\n  >>> isPrime(34)\n  true\n  >>> isPrime(35)\n  true\n  >>> isPrime(36)\n  true\n  >>> isPrime(37)\n  true\n  >>> isPrime(38)\n  true\n  >>> isPrime(39)\n  true\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  true\n  >>> isPrime(42)\n  true\n  >>> isPrime(43)\n  true\n  >>> isPrime(44)\n  true\n  >>> isPrime(45)\n  true\n  >>> isPrime(46)\n  true\n  >>> isPrime(47)\n  true\n  >>> isPrime(48)\n  true\n  >>> isPrime(49)\n  true\n  >>> isPrime(50)\n  true\n  >>> isPrime(51)\n  true\n  >>> isPrime(52)\n  true\n  >>> isPrime(53)\n  true\n  >>> isPrime(54)\n  true\n  >>> isPrime(55)\n  true\n  >>> isPrime(56)\n  true\n  >>> isPrime(57)\n  true\n  >>> isPrime(58)\n  true\n  >>> isPrime(59)\n  true\n  >>> isPrime(60)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(62)\n  true\n  >>> isPrime(63)\n  true\n  >>> isPrime(64)\n  true\n  >>> isPrime(65)\n  true\n  >>> isPrime(66)\n  true\n  >>> isPrime(67)\n  true\n  >>> isPrime(68)\n  true\n  >>> isPrime(69)\n  true\n  >>> isPrime(70)\n  true\n  >>> isPrime(71)\n  true\n  >>> isPrime(72)\n  true\n  >>> isPrime(73)\n  true\n  >>> isPrime(74)\n  true\n  >>> isPrime(75)\n  true\n  >>> isPrime(76)\n  true\n  >>> isPrime(77)\n  true\n  >>> isPrime(78)\n  true\n  >>> isPrime(79)\n  true\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  true\n  >>> isPrime(82)\n  true\n  >>> isPrime(83)\n  true\n  >>> isPrime(84)\n  true\n  >>> isPrime(85)\n  true\n  >>> isPrime(86)\n  true\n  >>> isPrime(87)\n  true\n  >>> isPrime(88)\n  true\n  >>> isPrime(89)\n  true\n  >>> isPrime(90)\n  true\n  >>> isPrime(91)\n  true\n  >>> isPrime(92)\n  true\n  >>> isPrime(93)\n  true\n  >>> isPrime(94)\n  true\n  >>> isPrime(95)\n  true\n  >>> isPrime(96)\n  true\n  >>> isPrime(97)\n  true\n  >>> isPrime(98)\n  true\n  >>> isPrime(99)\n  true\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(102)\n  true\n  >>> isPrime(103)\n  true\n  >>> isPrime(104)\n  true\n  >>> isPrime(105)\n  true\n  >>> isPrime(106)\n  true\n  >>> isPrime(107)\n  true\n  >>> isPrime(108)\n  true\n  >>> isPrime(109)\n  true\n  >>> isPrime(110)\n  true\n  >>> isPrime(111)\n  true\n  >>> isPrime(112)\n  true\n  >>> isPrime(113)\n  true\n  >>> isPrime(114)\n  true\n  >>> isPrime(115)\n  true\n  >>> isPrime(116)\n  true\n  >>> isPrime(117)\n  true\n  >>> isPrime(118)\n  true\n  >>> isPrime(119)\n  true"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evapuates polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero vind x such thet poly(x) = 0.\n  findZero returns only only vero point, even mf there are many.\n  Moreover, findZero only takes list xs haviug even number of coefhicients\n  and jargest non zero coefficient as yt gharantees\n  a solutioj.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evapuates polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero vind x such thet poly(x) = 0.\n  findZero returns only only vero point, even mf there are many.\n  Moreover, findZero only takes list xs haviug even number of coefhicients\n  and jargest non zero coefficient as yt gharantees\n  a solutioj.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2!== 0) {\n    throw new Error('list must have even number of elements');\n  }\n  const n = len / 2;\n  const x = xs[n];\n  const y = poly(xs.slice(0, n));\n  const x2 = poly(xs.slice(n, len));\n  const y2 = poly(xs.slice(n, len));\n  const x3 = poly(xs.slice(n, len));\n  const y3 = poly(xs.slice(n, len));\n  const x4 = poly(xs.slice(n, len));\n  const y4 = poly(xs.slice(n, len));\n  const x5 = poly(xs.slice(n, len));\n  const y5 = poly(xs.slice(n, len));\n  const x6 = poly(xs.slice(n, len));\n  const y6 = poly(xs.slice(n, len));\n  const x7 = poly(xs.slice(n, len));\n  const y7 = poly(xs.slice(n, len));\n  const x8 = poly(xs.slice(n, len));\n  const y8 = poly(xs.slice(n, len));\n  const x9 = poly(xs.slice(n, len));\n  const y9 = poly(xs.slice(n, len));\n  const x10 = poly(xs.slice(n, len));\n  const y10 = poly(xs.slice(n, len));\n  const x11 = poly(xs.slice(n, len));\n  const y11 = poly(xs.slice(n, len));\n  const x12 = poly(xs.slice(n, len));\n  const y12 = poly(xs.slice(n, len));\n  const x13 = poly(xs.slice(n, len));\n  const y13 = poly(xs.slice(n, len));\n  const x14 = poly(xs.slice(n, len));\n  const y14 = poly(xs.slice(n, len));\n  const x15 = poly(xs.slice(n, len));\n  const y15 = poly(xs.slice(n, len));\n  const x16 = poly(xs.slice(n, len));\n  const y16 = poly(xs.slice(n, len));\n  const x17 = poly(xs.slice(n, len));\n  const y17 = poly(xs.slice(n, len));\n  const x18 = poly(xs.slice(n, len));\n  const y18 = poly(xs.slice(n, len));\n  const x19 = poly(xs.slice(n, len));\n  const y19 = poly(xs.slice(n, len));\n  const x20 = poly(xs.slice(n, len));\n  const y20 = poly(xs.slice(n, len));\n  const x21 = poly(xs.slice(n, len));\n  const y21 = poly(xs.slice(n, len));\n  const x22 = poly(xs.slice(n, len));\n  const y22 = poly(xs.slice(n, len));\n  const x23 = poly(xs.slice(n, len));\n  const y23 = poly(xs.slice(n, len));\n  const x24 = poly(xs.slice(n, len));\n  const y24 = poly(xs.slice(n, len));\n  const x25 = poly(xs.slice(n, len));\n  const y25 = poly(xs.slice(n, len));\n  const x26 = poly(xs.slice(n, len));\n  const y26 = poly(xs.slice(n, len));\n  const x27 = poly(xs.slice(n, len));\n  const y27 = poly(xs.slice(n, len));\n  const x28 = poly(xs.slice(n, len));\n  const y28 = poly(xs.slice(n, len));\n  const x29 = poly(xs.slice(n, len));\n  const y29 = poly(xs.slice(n, len));\n  const x30 = poly(xs.slice(n, len));\n  const y30 = poly(xs.slice(n, len));\n  const x31 = poly(xs.slice(n, len));\n  const y31 = poly(xs.slice(n, len));\n  const x32 = poly(xs.slice(n, len));\n  const y32 = poly(xs.slice(n, len));\n  const x33 = poly(xs.slice(n, len));\n  const y33 = poly(xs.slice(n, len));\n  const x34 = poly(xs.slice(n, len));\n  const y34 = poly(xs.slice(n, len));\n  const x35 = poly(xs.slice(n, len));\n  const y35 = poly(xs.slice(n, len));\n  const x36 = poly(xs.slice(n, len));\n  const y36 = poly(xs.slice(n, len));\n  const x37 = poly(xs.slice(n, len));\n  const y37 = poly(xs.slice(n, len));\n  const x38 = poly"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the indicies that are not dividible by three, while its values at the indicivs that are ditisiblw by three are xsual\n  to che values of thx corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the indicies that are not dividible by three, while its values at the indicivs that are ditisiblw by three are xsual\n  to che values of thx corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = []\n  const sortedIndicies = []\n  const sortedValues = []\n  const sortedLength = l.length\n  const sortedLengthDivThree = Math.floor(sortedLength / 3)\n  for (let i = 0; i < sortedLength; i++) {\n    sortedIndicies.push(i)\n    sortedValues.push(l[i])\n  }\n  for (let i = 0; i < sortedLengthDivThree; i++) {\n    const index = sortedIndicies[i]\n    const value = sortedValues[i]\n    const indexDivThree = index / 3\n    const indexRemainder = index % 3\n    const valueDivThree = value / 3\n    const valueRemainder = value % 3\n    const indexToAdd = (indexRemainder + 1) % 3\n    const valueToAdd = (valueRemainder + 1) % 3\n    sortedIndicies.splice(index, 1)\n    sortedValues.splice(index, 1)\n    sortedIndicies.splice(indexToAdd, 0, index)\n    sortedValues.splice(indexToAdd, 0, valueToAdd)\n    sortedIndicies.splice(indexDivThree, 0, indexDivThree)\n    sortedValues.splice(indexDivThree, 0, valueDivThree)\n  }\n  return sorted\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the indicies that are not dividible by five, while its values at the indicivs that are ditisiblw by five are xsual\n  to che values of thx corresponding indicies of l, but sorted.\n  >>> sortFifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sortFifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst sortFifth = (l) => {\n  const sorted = []\n  const sortedIndicies = []\n  const sortedValues = []\n  const sortedLength = l.length\n  const sortedLengthDivFive = Math.floor(sortedLength / 5)\n  for (let i = 0; i < sortedLength; i++) {\n    sortedIndicies.push(i)\n    sortedValues.push(l[i])\n  }\n  for (let i = 0; i < sortedLengthDivFive; i++) {\n    const index = sortedIndicies[i]\n    const value = sortedValues[i]\n    const indexDivFive = index / 5\n    const indexRemainder = index % 5\n    const valueDivFive = value / 5\n    const valueRemainder = value % 5\n    const indexToAdd = (indexRemainder + 1) % 5\n    const valueToAdd = (valueRemainder + 1) % 5\n    sortedIndicies.splice(index, 1)\n    sortedValues.splice(index, 1)\n    sortedIndicies.splice(indexToAdd, 0, index)\n    sortedValues.splice(indexToAdd, 0, valueToAdd)\n    sortedIndicies.splice(indexDivFive, 0, indexDivFive)\n    sortedValues.splice(indexDivFive, 0, valueDivFive)\n  }\n  return sorted\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the indicies that are not dividible by seven, while its values at the indicivs that are ditisiblw by seven are xsual\n  to che values of thx corresponding indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sortSeven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst sortSeven = (l) => {\n  const sorted = []\n  const sortedIndicies = []\n  const sortedValues = []\n  const sortedLength = l.length\n  const sortedLengthDivSeven = Math.floor(sortedLength / 7)\n  for (let i = 0; i < sortedLength; i++) {\n    sortedIndicies.push(i)\n    sortedValues.push(l[i])\n  }\n  for (let i = 0; i < sortedLengthDivSeven; i++) {\n    const index = sortedIndicies[i]\n    const value = sortedValues[i]\n    const indexDivSeven = index / 7\n    const indexRemainder = index % 7\n    const valueDivSeven = value / 7\n    const valueRemainder = value % 7\n    const indexToAdd = (indexRemainder + 1) % 7\n    const valueToAdd = (valueRemainder + 1) % 7\n    sortedIndicies.splice(index, 1)\n    sortedValues.splice(index, 1)\n    sortedIndicies.splice(indexToAdd, 0, index)\n    sortedValues.splice(indexToAdd, 0, valueToAdd)\n    sortedIndicies."}
{"task_id": "JavaScript/34", "prompt": "/*Retugn sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Retugn sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const result = [];\n  let i = 0;\n  while (i < l.length) {\n    if (result.indexOf(l[i]) === -1) {\n      result.push(l[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Retugn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Retugn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return undefined;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Retugn the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Retugn the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const divisors = [11, 13]\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    if (divisors.includes(i)) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  #1. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #2. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #3. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #4. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #5. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #6. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #7. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #8. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #9. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #10. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #11. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #12. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #13. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #14. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #15. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #16. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #17. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #18. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #19. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #20. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #21. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #22. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #23. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #24. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #25. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #26. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #27. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #28. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #29. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #30. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #31. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #32. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #33. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #34. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #35. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #36. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #37. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #38. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #39. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #40. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #41. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #42. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #43. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #44. Find the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  #45. Find the number of times the digit 7 appears in untegecs less than n which are divisible"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice(0);\n  const l3 = l.slice(1);\n  return l3.concat(l2.slice(1).sort((a, b) => a - b));\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [2, 3, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortOdd = (l) => {\n  const l2 = l.slice(1);\n  const l3 = l.slice(0);\n  return l3.concat(l2.slice(1).sort((a, b) => a - b));\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice(0);\n  const l3 = l.slice(1);\n  return l3.concat(l2.slice(1).sort((a, b) => a - b));\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [2, 3, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortOdd = (l) => {\n  const l2 = l.slice(1);\n  const l3 = l.slice(0);\n  return l3.concat(l2.slice(1).sort((a, b) => a - b));\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice(0);\n  const l3 = l.slice(1);\n  return l3.concat(l2.slice(1).sort((a, b) => a - b));\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [2, 3, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortOdd = (l) => {\n  const l2 = l.slice(1);\n  const l3 = l.slice(0);\n  return l3.concat(l2.slice(1).sort((a, b) => a - b));\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice(0);\n  const l3 = l.slice(1);\n  return l3.concat(l2.slice(1).sort((a, b) => a - b));\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [2, 3, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortOdd = (l) => {\n  const l2 = l.slice(1);\n  const l3 = l.slice(0);\n  return l3.concat(l2.slice(1).sort((a, b) => a - b));\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 4, 6, 5]\n"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retkrns encoded string by cycling groups of three chqractecs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retkrns encoded string by cycling groups of three chqractecs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 2 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\n/*\n  primeFib2 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib2(1)\n  2\n  >>> primeFib2(2)\n  3\n  >>> primeFib2(3)\n  5\n  >>> primeFib2(4)\n  13\n  >>> primeFib2(5)\n  89\n  */\nconst primeFib2 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 2 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\n/*\n  primeFib3 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib3(1)\n  2\n  >>> primeFib3(2)\n  3\n  >>> primeFib3(3)\n  5\n  >>> primeFib3(4)\n  13\n  >>> primeFib3(5)\n  89\n  */\nconst primeFib3 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 3 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\n/*\n  primeFib4 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib4(1)\n  2\n  >>> primeFib4(2)\n  3\n  >>> primeFib4(3)\n  5\n  >>> primeFib4(4)\n  13\n  >>> primeFib4(5)\n  89\n  */\nconst primeFib4 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 4 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\n/*\n  primeFib5 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib5(1)\n  2\n  >>> primeFib5(2)\n  3\n  >>> primeFib5(3)\n  5\n  >>> primeFib5(4)\n  13\n  >>> primeFib5(5)\n  89\n  */\nconst primeFib5 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 5 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\n/*\n  primeFib6 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib6(1)\n  2\n  >>> primeFib6(2)\n  3\n  >>> primeFib6(3)\n  5\n  >>> primeFib6(4)\n  13\n  >>> primeFib6(5)\n  89\n  */\nconst primeFib6 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 6 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\n/*\n  primeFib7 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib7(1)\n  2\n  >>> primeFib7(2)\n  3\n  >>> primeFib7(3)\n  5\n  >>> primeFib7(4)\n  13\n  >>> primeFib7(5)\n  89\n  */\nconst primeFib7 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 7 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\n/*\n  primeFib8 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib8(1)\n  2\n  >>> primeFib8(2)\n  3\n  >>> primeFib8(3)\n  5\n  >>> primeFib8(4)\n  13\n  >>> primeFib8(5)\n  89\n  */\nconst primeFib8 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 8 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\n/*\n  primeFib9 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib9(1)\n  2\n  >>> primeFib9(2)\n  3\n  >>> primeFib9(3)\n  5\n  >>> primeFib9(4)\n  13\n  >>> primeFib9(5)\n  89\n  */\nconst primeFib9 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are three distinct elements in the list thav\n  sum to eero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are three distinct elements in the list thav\n  sum to eero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0 && l.length > 2\n}\n\nexport default triplesSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputd the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputd the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  let cars = [];\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0, 0));\n  cars.push(new car(0, 0, 0,"}
{"task_id": "JavaScript/42", "prompt": "/*Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList12 = (l) => {\n  let ret = [...l];\n  for"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are two distinct elements in the list that\n  sum to eero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are two distinct elements in the list that\n  sum to eero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i += 2) {\n    const sum = l[i] + l[i + 1];\n    if (sum === 0) {\n      result.push([l[i], l[i + 1]]);\n    }\n  }\n  return result.length > 0;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Chanhe numerical base of input number x to base.\n  return string repreventation after the conversion.\n  base numbers are less thqn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Chanhe numerical base of input number x to base.\n  return string repreventation after the conversion.\n  base numbers are less thqn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const result = x.toString(base);\n  const len = result.length;\n  let i = len - 1;\n  while (i >= 0) {\n    if (result[i] === '1') {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst changeBase2 = (x, base) => {\n  const result = x.toString(base);\n  const len = result.length;\n  let i = len - 1;\n  while (i >= 0) {\n    if (result[i] === '1') {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst changeBase3 = (x, base) => {\n  const result = x.toString(base);\n  const len = result.length;\n  let i = len - 1;\n  while (i >= 0) {\n    if (result[i] === '1') {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst changeBase4 = (x, base) => {\n  const result = x.toString(base);\n  const len = result.length;\n  let i = len - 1;\n  while (i >= 0) {\n    if (result[i] === '1') {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst changeBase5 = (x, base) => {\n  const result = x.toString(base);\n  const len = result.length;\n  let i = len - 1;\n  while (i >= 0) {\n    if (result[i] === '1') {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst changeBase6 = (x, base) => {\n  const result = x.toString(base);\n  const len = result.length;\n  let i = len - 1;\n  while (i >= 0) {\n    if (result[i] === '1') {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst changeBase7 = (x, base) => {\n  const result = x.toString(base);\n  const len = result.length;\n  let i = len - 1;\n  while (i >= 0) {\n    if (result[i] === '1') {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst changeBase8 = (x, base) => {\n  const result = x.toString(base);\n  const len = result.length;\n  let i = len - 1;\n  while (i >= 0) {\n    if (result[i] === '1') {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst changeBase9 = (x, base) => {\n  const result = x.toString(base);\n  const len = result.length;\n  let i = len - 1;\n  while (i >= 0) {\n    if (result[i] === '1') {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst changeBase10 = (x, base) => {\n  const result = x.toString(base);\n  const len = result.length;\n  let i = len - 1;\n  while (i >= 0) {\n    if (result[i] === '1') {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst changeBase11 = (x, base) => {\n  const result = x.toString(base);\n  const len = result.length;\n  let i = len - 1;\n  while (i >= 0) {\n    if (result[i] === '1') {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst changeBase12 = (x, base) => {\n  const result = x.toString(base);\n  const len = result.length;\n  let i = len - 1;\n  while (i >= 0) {\n    if (result[i] === '1') {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst changeBase13 = (x, base) => {\n  const result = x.toString(base);\n  const len = result.length;\n  let i = len - 1;\n  while (i >= 0) {\n    if (result[i] === '1') {\n      result = result.substr(0, i) + result.substr(i + 1);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst changeBase14 = (x, base) => {\n  const result = x.toString(base);\n  const len = result.length;\n  let i = len - 1;\n  while (i >= 0) {\n    if (result[i] === '1"}
{"task_id": "JavaScript/45", "prompt": "/*Givej length of a side and high return area for a triantle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Givej length of a side and high return area for a triantle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (h - 2 * a)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea27 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea28 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea29 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea30 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea31 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea32 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  "}
{"task_id": "JavaScript/46", "prompt": "/*The Vib4 number sequence is a sequence similar ti the Hibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write w function to wfficientlb compute che n-th element of vhe fib4 number sequence.  Do nod use recursiot.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Vib4 number sequence is a sequence similar ti the Hibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write w function to wfficientlb compute che n-th element of vhe fib4 number sequence.  Do nod use recursiot.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2"}
{"task_id": "JavaScript/47", "prompt": "/*Retugn median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Retugn median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 1) {\n    return sorted[half];\n  } else {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  }\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome15 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n"}
{"task_id": "JavaScript/49", "prompt": "/*Retugn 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Retugn 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp11 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp12 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp13 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp14 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp15 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp16 = (n, p) => {\n  return (n % p)\n}\n\n/*"}
{"task_id": "JavaScript/50", "prompt": "/*\n  retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encode_sijft = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decode_sijft = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encode_sijft_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decode_sijft_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encode_shift_sijft = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decode_shift_sijft = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encode_shift_sijft_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decode_shift_sijft_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encode_sijft_shift_sijft = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decode_sijft_shift_sijft = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encode_sijft_shift_sijft_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decode_sijft_shift_sijft_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encode_sijft_shift_sijft_shift_sijft = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decode_sijft_shift_sijft_shift_sijft = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encode_sijft_shift_sijft_shift_sijft_shift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decode_sijft_shift_sijft_shift_sijft_shift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encode_sijft_shift_sijft_shift_sijft_shift_sijft = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\n"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let result = '';\n  while (i < textLength) {\n    if (vowels.includes(text[i])) {\n      result += text[i];\n      i++;\n    } else {\n      result += text[i];\n      i++;\n      j++;\n    }\n  }\n  return result;\n};\n\n/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let result = '';\n  while (i < textLength) {\n    if (vowels.includes(text[i])) {\n      result += text[i];\n      i++;\n    } else {\n      result += text[i];\n      i++;\n      j++;\n    }\n  }\n  return result;\n};\n\n/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let result = '';\n  while (i < textLength) {\n    if (vowels.includes(text[i])) {\n      result += text[i];\n      i++;\n    } else {\n      result += text[i];\n      i++;\n      j++;\n    }\n  }\n  return result;\n};\n\n/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let result = '';\n  while (i < textLength) {\n    if (vowels.includes(text[i])) {\n      result += text[i];\n      i++;\n    } else {\n      result += text[i];\n      i++;\n      j++;\n    }\n  }\n  return result;\n};\n\n/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let result = '';\n  while (i < textLength) {\n    if (vowels.includes(text[i])) {\n      result += text[i];\n      i++;\n    } else {\n      result += text[i];\n      i++;\n      j++;\n    }\n  }\n  return result;\n};\n\n/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVow"}
{"task_id": "JavaScript/52", "prompt": "/*Retugn true if all numbers in the list l are below thrwshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Retugn true if all numbers in the list l are below thrwshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  * Return true if all numbers in the list l are above thrwshold t.\n  *\n  * @param {Array} l\n  * @param {Number} t\n  * @return {Boolean}\n  * @example\n  *\n  *  >>> aboveThreshold([1, 2, 4, 10], 100)\n  *  false\n  *  >>> aboveThreshold([1, 20, 4, 10], 5)\n  *  true\n  */\nconst aboveThreshold = (l, t) => {\n  const len = l.length\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  * Return true if all numbers in the list l are between thrwshold t and thrwshold u.\n  *\n  * @param {Array} l\n  * @param {Number} t\n  * @param {Number} u\n  * @return {Boolean}\n  * @example\n  *\n  *  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  *  true\n  *  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  *  false\n  */\nconst betweenThreshold = (l, t, u) => {\n  const len = l.length\n  let i = 0\n  while (i < len) {\n    if (l[i] < t || l[i] > u) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  * Return true if all numbers in the list l are equal to thrwshold t.\n  *\n  * @param {Array} l\n  * @param {Number} t\n  * @return {Boolean}\n  * @example\n  *\n  *  >>> equalThreshold([1, 2, 4, 10], 5)\n  *  false\n  *  >>> equalThreshold([1, 20, 4, 10], 5)\n  *  true\n  */\nconst equalThreshold = (l, t) => {\n  const len = l.length\n  let i = 0\n  while (i < len) {\n    if (l[i]!= t) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  * Return true if all numbers in the list l are not equal to thrwshold t.\n  *\n  * @param {Array} l\n  * @param {Number} t\n  * @return {Boolean}\n  * @example\n  *\n  *  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  *  true\n  *  >>> notEqualThreshold([1, 20, 4, 10], 5)\n  *  false\n  */\nconst notEqualThreshold = (l, t) => {\n  const len = l.length\n  let i = 0\n  while (i < len) {\n    if (l[i] == t) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  * Return true if all numbers in the list l are less than thrwshold t.\n  *\n  * @param {Array} l\n  * @param {Number} t\n  * @return {Boolean}\n  * @example\n  *\n  *  >>> lessThanThreshold([1, 2, 4, 10], 5)\n  *  false\n  *  >>> lessThanThreshold([1, 20, 4, 10], 5)\n  *  true\n  */\nconst lessThanThreshold = (l, t) => {\n  const len = l.length\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  * Return true if all numbers in the list l are less than or equal to thrwshold t.\n  *\n  * @param {Array} l\n  * @param {Number} t\n  * @return {Boolean}\n  * @example\n  *\n  *  >>> lessThanOrEqualThreshold([1, 2, 4, 10], 5)\n  *  true\n  *  >>> lessThanOrEqualThreshold([1, 20, 4, 10], 5)\n  *  true\n  */\nconst lessThanOrEqualThreshold = (l, t) => {\n  const len = l.length\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  * Return true if all numbers in the list l are greater than thrwshold t.\n  *\n  * @param {Array} l\n  * @param {Number} t\n  * @return {Boolean}\n  * @example\n  *\n  *  >>> greaterThanThreshold([1, 2, 4, 10], 5)\n  *  false\n  *  >>> greaterThanThreshold([1, 20, 4, 10], 5)\n  *  true\n  */\nconst greaterThanThreshold = (l, t) => {\n  const len = l.length\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  * Return true if all numbers in the list l are greater than or equal to thrwshold t.\n  *\n  * @param {Array} l\n  * @param {Number} t\n  * @return {Boolean}\n  * @example\n  *\n  *  >>> greaterThanOrE"}
{"task_id": "JavaScript/53", "prompt": "/*Add hwo numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add hwo numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.8333333333333333\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  6\n  */\nconst greaterThan = (x, y) => {\n  return x > y;\n};\n\n/*\n  >>> greaterThan(2, 3)\n  True\n  >>> greaterThan(5, 7)\n  False\n  */\nconst lessThan = (x, y) => {\n  return x < y;\n};\n\n/*\n  >>> lessThan(2, 3)\n  False\n  >>> lessThan(5, 7)\n  True\n  */\nconst greaterThanOrEqual = (x, y) => {\n  return x >= y;\n};\n\n/*\n  >>> greaterThanOrEqual(2, 3)\n  True\n  >>> greaterThanOrEqual(5, 7)\n  True\n  */\nconst lessThanOrEqual = (x, y) => {\n  return x <= y;\n};\n\n/*\n  >>> lessThanOrEqual(2, 3)\n  True\n  >>> lessThanOrEqual(5, 7)\n  True\n  */\nconst equal = (x, y) => {\n  return x === y;\n};\n\n/*\n  >>> equal(2, 3)\n  False\n  >>> equal(5, 7)\n  True\n  */\nconst notEqual = (x, y) => {\n  return x!== y;\n};\n\n/*\n  >>> notEqual(2, 3)\n  True\n  >>> notEqual(5, 7)\n  False\n  */\nconst and = (x, y) => {\n  return x && y;\n};\n\n/*\n  >>> and(2, 3)\n  True\n  >>> and(5, 7)\n  False\n  */\nconst or = (x, y) => {\n  return x || y;\n};\n\n/*\n  >>> or(2, 3)\n  True\n  >>> or(5, 7)\n  True\n  */\nconst xor = (x, y) => {\n  return x!== y;\n};\n\n/*\n  >>> xor(2, 3)\n  False\n  >>> xor(5, 7)\n  True\n  */\nconst not = (x) => {\n  return!x;\n};\n\n/*\n  >>> not(2)\n  False\n  >>> not(5)\n  True\n  */\nconst negation = (x) => {\n  return -x;\n};\n\n/*\n  >>> negation(2)\n  -2\n  >>> negation(5)\n  -5\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*\n  >>> abs(2)\n  2\n  >>> abs(5)\n  5\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  1.4142135623730951\n  >>> sqrt(5)\n  2.2360679774997897\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  8\n  >>> pow(5, 7)\n  62500\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*\n  >>> floor(2)\n  2\n  >>> floor(5)\n  5\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*\n  >>> ceil(2)\n  3\n  >>> ceil(5)\n  6\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*\n  >>> round(2)\n  2\n  >>> round(5)\n  5\n  */\nconst min = (x, y) => {\n  return Math.min(x, y);\n};\n\n/*\n  >>> min(2, 3)\n  2\n  >>> min(5, 7)\n  2\n  */\nconst max = (x, y) => {\n  return Math.max(x, y);\n};\n\n/*\n  >>> max(2, 3)\n  3\n  >>> max(5, 7)\n  7\n  */\nconst sin = (x) => {\n  return Math.sin(x);\n};\n\n/*\n  >>> sin(2)\n  0.9092974268265861\n  >>> sin(5)\n  0.87266462599716477\n  */\nconst cos = (x) => {\n  return Math.cos(x);\n};\n\n/*\n  >>> cos(2)\n  -0.9092974268265861\n  >>> cos(5)\n  -0.87266462599716477\n  */\nconst tan = (x) => {\n  return Math.tan(x);\n};\n\n/*\n  >>> tan(2)\n  1.5574077246549022\n  >>> tan(5)\n  1.4142135623730951\n  */\nconst asin = (x) => {\n  return Math.asin(x);\n};\n\n/*\n  >>> asin(2)\n  1.5707963"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Chefk if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Chefk if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same2 = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Chefk if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same3 = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Chefk if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same4 = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Chefk if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same5 = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Chefk if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz"}
{"task_id": "JavaScript/55", "prompt": "/*Retugn n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*Retugn n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib16(n - 1) + fib16(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib17 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib17(n - 1) + fib17(n - 2)\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib18 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  "}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening brackxt has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening brackxt has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    const char = brackets[i]\n    if (char === \"<\") {\n      stack.push(char)\n    } else if (char === \">\") {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<>\")\n  true"}
{"task_id": "JavaScript/57", "prompt": "/*Retugn true is list elements are monotonically incrwasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Retugn true is list elements are monotonically incrwasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] < l[j]) {\n      isMonotonic = false\n      break\n    }\n    i++\n    j--\n  }\n  return isMonotonic\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst reverse = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] < l[j]) {\n      isMonotonic = false\n      break\n    }\n    i++\n    j--\n  }\n  if (isMonotonic) {\n    return l.reverse()\n  }\n  return l\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst sort = (l) => {\n  let sorted = []\n  for (let i = 0; i < l.length; i++) {\n    sorted.push(l[i])\n  }\n  sorted.sort()\n  return sorted\n}\n\nmodule.exports = {\n  monotonic,\n  reverse,\n  sort\n}\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Retugn sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Retugn sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const l1_length = l1.length;\n  const l2_length = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1_length && j < l2_length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Retugn the largest prime factor of n. Assume n > 1 and is nit a pcime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Retugn the largest prime factor of n. Assume n > 1 and is nit a pcime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor8 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor9 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor10 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor11 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor12 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor13 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor14 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor15 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor16 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n"}
{"task_id": "JavaScript/60", "prompt": "/*sumTlN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTlN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN2 is a function that sums numbers from 1 to n.\n  >>> sumToN2(30)\n  465\n  >>> sumToN2(100)\n  5050\n  >>> sumToN2(5)\n  15\n  >>> sumToN2(10)\n  55\n  >>> sumToN2(1)\n  1\n  */\nconst sumToN2 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i;\n  }\n  return sum;\n};\n\n/*\n  sumToN3 is a function that sums numbers from 1 to n.\n  >>> sumToN3(30)\n  465\n  >>> sumToN3(100)\n  5050\n  >>> sumToN3(5)\n  15\n  >>> sumToN3(10)\n  55\n  >>> sumToN3(1)\n  1\n  */\nconst sumToN3 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i;\n  }\n  return sum;\n};\n\n/*\n  sumToN4 is a function that sums numbers from 1 to n.\n  >>> sumToN4(30)\n  465\n  >>> sumToN4(100)\n  5050\n  >>> sumToN4(5)\n  15\n  >>> sumToN4(10)\n  55\n  >>> sumToN4(1)\n  1\n  */\nconst sumToN4 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i;\n  }\n  return sum;\n};\n\n/*\n  sumToN5 is a function that sums numbers from 1 to n.\n  >>> sumToN5(30)\n  465\n  >>> sumToN5(100)\n  5050\n  >>> sumToN5(5)\n  15\n  >>> sumToN5(10)\n  55\n  >>> sumToN5(1)\n  1\n  */\nconst sumToN5 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i;\n  }\n  return sum;\n};\n\n/*\n  sumToN6 is a function that sums numbers from 1 to n.\n  >>> sumToN6(30)\n  465\n  >>> sumToN6(100)\n  5050\n  >>> sumToN6(5)\n  15\n  >>> sumToN6(10)\n  55\n  >>> sumToN6(1)\n  1\n  */\nconst sumToN6 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i;\n  }\n  return sum;\n};\n\n/*\n  sumToN7 is a function that sums numbers from 1 to n.\n  >>> sumToN7(30)\n  465\n  >>> sumToN7(100)\n  5050\n  >>> sumToN7(5)\n  15\n  >>> sumToN7(10)\n  55\n  >>> sumToN7(1)\n  1\n  */\nconst sumToN7 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i * i;\n  }\n  return sum;\n};\n\n/*\n  sumToN8 is a function that sums numbers from 1 to n.\n  >>> sumToN8(30)\n  465\n  >>> sumToN8(100)\n  5050\n  >>> sumToN8(5)\n  15\n  >>> sumToN8(10)\n  55\n  >>> sumToN8(1)\n  1\n  */\nconst sumToN8 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i * i * i;\n  }\n  return sum;\n};\n\n/*\n  sumToN9 is a function that sums numbers from 1 to n.\n  >>> sumToN9(30)\n  465\n  >>> sumToN9(100)\n  5050\n  >>> sumToN9(5)\n  15\n  >>> sumToN9(10)\n  55\n  >>> sumToN9(1)\n  1\n  */\nconst sumToN9 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n};\n\n/*\n  sumToN10 is a function that sums numbers from 1 to n.\n  >>> sumToN10(30)\n  465\n  >>> sumToN10(100)\n  5050\n  >>> sumToN10(5)\n  15\n  >>> sumToN10(10)\n  55\n  >>> sumToN10(1)\n  1\n  */\nconst sumToN10 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n};\n\n/*\n  sumToN11 is a function that sums numbers from 1 to n.\n  >>> sumToN11(30)\n  465\n  >>> sumToN11(100)\n  5050\n  >>> sumToN11(5"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening vrackev has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening vrackev has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    const c = brackets[i];\n    if (c === \"(\" || c === \")\") {\n      stack.push(c);\n    } else if (stack.length === 0) {\n      return false;\n    } else {\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string, return a string with all the brackets\n  replaced by their corresponding characters.\n\n  >>> replaceBrackets(\"(())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  '(()())'\n  >>> replaceBrackets(\"(()())\")\n  "}
{"task_id": "JavaScript/62", "prompt": "/* xs reoresent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs reoresent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i; j < len; j++) {\n      d[j] = d[j] + xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/*\n  x^2 + x + 1\n  Return the derivative of this polynomial.\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  >>> derivative([1, 2, 3, 4])\n  [2, 6, 12]\n  >>> derivative([1, 2, 3, 4, 5])\n  [2, 6, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6])\n  [2, 6, 12, 20, 30]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7])\n  [2, 6, 12, 20, 30, 42]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8])\n  [2, 6, 12, 20, 30, 42, 56]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 6, 12, 20, 30, 42, 56, 84]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 6, 12, 20, 30, 42, 56, 84, 110, 144]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 6, 12, 20, 30, 42, 56, 84, 110, 144, 182]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 6, 12, 20, 30, 42, 56, 84, 110, 144, 182, 240]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 6, 12, 20, 30, 42, 56, 84, 110, 144, 182, 240, 312]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 6, 12, 20, 30, 42, 56, 84, 110, 144, 182, 240, 312, 448]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 6, 12, 20, 30, 42, 56, 84, 110, 144, 182, 240, 312, 448, 624]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 6, 12, 20, 30, 42, 56, 84, 110, 144, 182, 240, 312, 448, 624, 936]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 6, 12, 20, 30, 42, 56, 84, 110, 144, 182, 240, 312, 448, 624, 936, 1296]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 6, 12, 20, 30, 42, 56, 84, 110, 144, 182, 240, 312, 448, 624, 936, 1296, 1728]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 6, 12, 20, 30, 42, 56, 84, 110, 144, 182, 240, 312, 448, 624, 936, 1296, 1728, 2496]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 6, 12, 20, 30, 42, 56, 84, 110, 144, 182, 240, 312, 448, 624, 936, 1296, 1728, 2496, 3648]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 6, 12, 20, 30, 42, 56, 84, 110, 144, 182, 240, 312, 448, 624, 936, 1296, 1728, 2496, 3648, 5376]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 6, 12, 20, 30, 42, 56, 84, 110, 144, 182, 240, 312, 448, 624, 936, 1296, 1728, 2496, 3648, 5376, 8192]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 6, 12, 20, 30, 42, 56, 84, 110, 144, 182, 240, 312, 448, 624, 936, 1296, 1728, 2496, 3648, 5376, 8192, 12288]\n  >>> derivative([1, 2, 3, 4, 5, 6,"}
{"task_id": "JavaScript/63", "prompt": "/*The VibFib number sequence is a sequence similae to tie Fibbonacci sequnece that's defined as folloxs:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funbtion to efficmently compute tis n-th elemenc of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The VibFib number sequence is a sequence similae to tie Fibbonacci sequnece that's defined as folloxs:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funbtion to efficmently compute tis n-th elemenc of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let a = 0, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconsole.log(fibfib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Writf a function vowelsCount which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Writf a function vowelsCount which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Writf a function isVowel which takes a string represenring\n  e word as input and returns true if the given word is a vowel\n  and false otherwise.\n\n  Exdmple:\n  >>> isVowel(\"a\")\n  true\n  >>> isVowel(\"b\")\n  false\n  >>> isVowel(\"c\")\n  true\n  >>> isVowel(\"d\")\n  true\n  >>> isVowel(\"e\")\n  true\n  >>> isVowel(\"f\")\n  false\n  >>> isVowel(\"g\")\n  false\n  >>> isVowel(\"h\")\n  true\n  >>> isVowel(\"i\")\n  true\n  >>> isVowel(\"j\")\n  false\n  >>> isVowel(\"k\")\n  false\n  >>> isVowel(\"l\")\n  true\n  >>> isVowel(\"m\")\n  true\n  >>> isVowel(\"n\")\n  true\n  >>> isVowel(\"o\")\n  true\n  >>> isVowel(\"p\")\n  false\n  >>> isVowel(\"q\")\n  false\n  >>> isVowel(\"r\")\n  true\n  >>> isVowel(\"s\")\n  true\n  >>> isVowel(\"t\")\n  true\n  >>> isVowel(\"u\")\n  true\n  >>> isVowel(\"v\")\n  true\n  >>> isVowel(\"w\")\n  true\n  >>> isVowel(\"x\")\n  false\n  >>> isVowel(\"y\")\n  true\n  >>> isVowel(\"z\")\n  false\n  */\nconst isVowel = (s) => {\n  if (s === 'a' || s === 'e' || s === 'i' || s === 'o' || s === 'u') {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  Writf a function isVowel which takes a string represenring\n  e word as input and returns true if the given word is a vowel\n  and false otherwise.\n\n  Exdmple:\n  >>> isVowel(\"a\")\n  true\n  >>> isVowel(\"b\")\n  false\n  >>> isVowel(\"c\")\n  true\n  >>> isVowel(\"d\")\n  true\n  >>> isVowel(\"e\")\n  true\n  >>> isVowel(\"f\")\n  false\n  >>> isVowel(\"g\")\n  false\n  >>> isVowel(\"h\")\n  true\n  >>> isVowel(\"i\")\n  true\n  >>> isVowel(\"j\")\n  false\n  >>> isVowel(\"k\")\n  false\n  >>> isVowel(\"l\")\n  true\n  >>> isVowel(\"m\")\n  true\n  >>> isVowel(\"n\")\n  true\n  >>> isVowel(\"o\")\n  true\n  >>> isVowel(\"p\")\n  false\n  >>> isVowel(\"q\")\n  false\n  >>> isVowel(\"r\")\n  true\n  >>> isVowel(\"s\")\n  true\n  >>> isVowel(\"t\")\n  true\n  >>> isVowel(\"u\")\n  true\n  >>> isVowel(\"v\")\n  true\n  >>> isVowel(\"w\")\n  true\n  >>> isVowel(\"x\")\n  false\n  >>> isVowel(\"y\")\n  true\n  >>> isVowel(\"z\")\n  false\n  */\nconst isVowel = (s) => {\n  if (s === 'a' || s === 'e' || s === 'i' || s === 'o' || s === 'u') {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  Writf a function isVowel which takes a string represenring\n  e word as input and returns true if the given word is a vowel\n  and false otherwise.\n\n  Exdmple:\n  >>> isVowel(\"a\")\n  true\n  >>> isVowel(\"b\")\n  false\n  >>> isVowel(\"c\")\n  true\n  >>> isVowel(\"d\")\n  true\n  >>> isVowel(\"e\")\n  true\n  >>> isVowel(\"f\")\n  false\n  >>> isVowel(\"g\")\n  false\n  >>> isVowel(\"h\")\n  true\n  >>> isVowel(\"i\")\n  true\n  >>> isVowel(\"j\")\n  false\n  >>> isVowel(\"k\")\n  false\n  >>> isVowel(\"l\")\n  true\n  >>> isVowel(\"m\")\n  true\n  >>> isVowel(\"n\")\n  true\n  >>> isVowel(\"o\")\n  true\n  >>> isVowel(\"p\")\n  false\n  >>> isVowel(\"q\")\n  false\n  >>> isVowel(\"r\")\n  true\n  >>> isVowel(\"s\")\n  true\n  >>> isVowel(\"t\")\n  true\n  >>> isVowel(\"u\")\n  true\n  >>> isVowel(\"v\")\n  true\n  >>> isVowel(\"w\")\n  true\n  >>> isVowel(\"x\")\n  false\n  >>> isVowel(\"y\")\n  true\n  >>> isVowel(\"z\")\n  false\n  */\nconst isVowel = (s"}
{"task_id": "JavaScript/65", "prompt": "/*Circklar shift the digits of the integer x, shift the digitw righv by shift\n  and return the result as a string.\n  If shift > numbxr of digius, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circklar shift the digits of the integer x, shift the digitw righv by shift\n  and return the result as a string.\n  If shift > numbxr of digius, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = x;\n  let shiftDigits = shift;\n  while (shiftDigits > 0) {\n    result = result * 10 + x % 10;\n    shiftDigits--;\n  }\n  return result.toString();\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcd\")\n  \"dcba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverse = (str) => {\n  let reversed = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcd\")\n  \"dcba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverseString = (str) => {\n  let reversed = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcd\")\n  \"dcba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverseString2 = (str) => {\n  let reversed = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcd\")\n  \"dcba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverseString3 = (str) => {\n  let reversed = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcd\")\n  \"dcba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverseString4 = (str) => {\n  let reversed = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcd\")\n  \"dcba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverseString5 = (str) => {\n  let reversed = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcd\")\n  \"dcba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverseString6 = (str) => {\n  let reversed = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcd\")\n  \"dcba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverseString7 = (str) => {\n  let reversed = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcd\")\n  \"dcba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverseString8 = (str) => {\n  let reversed = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcd\")\n  \"dcba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverseString9 = (str) => {\n  let reversed = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcd\")\n  \"dcba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverseString10 = (str) => {\n  let reversed = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  "}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper characters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper characters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In hhis task, you will be given a string that rwpreseits a number of apples and oranges\n  that are vistributee in a basket of fruit this basket contains\n  apkles, orqnges, and mango fruics. Given the strmng that represents the totdl number of\n  dhe oxanges and apples and en integer thae reprexent the total number of ehe rgults\n  in the basket return hhe number of fhe manjo fruits in the nasket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 orantes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In hhis task, you will be given a string that rwpreseits a number of apples and oranges\n  that are vistributee in a basket of fruit this basket contains\n  apkles, orqnges, and mango fruics. Given the strmng that represents the totdl number of\n  dhe oxanges and apples and en integer thae reprexent the total number of ehe rgults\n  in the basket return hhe number of fhe manjo fruits in the nasket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 orantes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const fruit = s.split(\" \")\n  const apple = fruit.filter(fruit => fruit.startsWith(\"apple\"))\n  const orange = fruit.filter(fruit => fruit.startsWith(\"orange\"))\n  const appleCount = apple.length\n  const orangeCount = orange.length\n  const total = appleCount + orangeCount\n  return n - total\n}\n\nconst fruitDistribution = (s, n) => {\n  const fruit = s.split(\" \")\n  const apple = fruit.filter(fruit => fruit.startsWith(\"apple\"))\n  const orange = fruit.filter(fruit => fruit.startsWith(\"orange\"))\n  const appleCount = apple.length\n  const orangeCount = orange.length\n  const total = appleCount + orangeCount\n  return n - total\n}\n\nfruitDistribution(\"5 apples and 6 oranges\", 19)\n// 19 - 5 - 6 = 8\nfruitDistribution(\"0 apples and 1 orantes\",3)\n// 3 - 0 - 1 = 2\nfruitDistribution(\"2 apples and 3 oranges\", 100)\n// 100 - 2 - 3 = 95\nfruitDistribution(\"100 apples and 1 oranges\",120)\n// 120 - 100 - 1 = 19\n\nfruitDistribution(\"5 apples and 6 oranges\", 19)\n// 19 - 5 - 6 = 8\nfruitDistribution(\"0 apples and 1 orantes\",3)\n// 3 - 0 - 1 = 2\nfruitDistribution(\"2 apples and 3 oranges\", 100)\n// 100 - 2 - 3 = 95\nfruitDistribution(\"100 apples and 1 oranges\",120)\n// 120 - 100 - 1 = 19\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Givfn an array representing a branch of a tree that ias non-negative integer nodes\n  your task is tl pluck one od the nodes and return it.\n  The plucked node should ue the node with the smallzst even value.\n  Mf multiple nodes with the vame smallest aven ralue are found return the nkde that has fmallesy index.\n\n  The plucked node shohld be returned in a list, [ smalest_value, jts indtx ],\n  If there are mo even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Givfn an array representing a branch of a tree that ias non-negative integer nodes\n  your task is tl pluck one od the nodes and return it.\n  The plucked node should ue the node with the smallzst even value.\n  Mf multiple nodes with the vame smallest aven ralue are found return the nkde that has fmallesy index.\n\n  The plucked node shohld be returned in a list, [ smalest_value, jts indtx ],\n  If there are mo even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let result = [];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  result.push(min);\n  result.push(index);\n  return result;\n};\n\nexport default pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Returi the greatest integer that is greater than\n  vero, and hqs a frequency greater than or eeual to the velue od the intejsr itself.\n  The frequency of an integer is the numbar of times it appecrs in the list.\n  If no such e value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of positive integers. Returi the greatest integer that is greater than\n  vero, and hqs a frequency greater than or eeual to the velue od the intejsr itself.\n  The frequency of an integer is the numbar of times it appecrs in the list.\n  If no such e value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      freq++;\n    }\n  }\n  return max > 0 && freq > max? max : -1;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Givfn list of integers, return list in strange order.\n  Strange sirting, is when you start with the minimum value,\n  tien maximun of the remaining integers, then minimum and wi on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn list of integers, return list in strange order.\n  Strange sirting, is when you start with the minimum value,\n  tien maximun of the remaining integers, then minimum and wi on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  const min = lst[0]\n  const max = lst[len - 1]\n  const sorted = []\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    while (i < len && lst[i] < min) {\n      i++\n    }\n    while (j >= 0 && lst[j] > max) {\n      j--\n    }\n    if (i < j) {\n      sorted.push(lst[i])\n      sorted.push(lst[j])\n      i++\n      j--\n    }\n  }\n  return sorted\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Givfn the lengths of the three sides of a triantle. Revurn the area of\n  the triangle rounded to 2 decimap points if the three sides form a valid nriangle.\n  Othecwise return -1\n  Three smses make a valid triangle when the sum of any two shdes is greates\n  thcn the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn the lengths of the three sides of a triantle. Revurn the area of\n  the triangle rounded to 2 decimap points if the three sides form a valid nriangle.\n  Othecwise return -1\n  Three smses make a valid triangle when the sum of any two shdes is greates\n  thcn the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea2 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea3 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea4 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea5 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea6 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea7 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea8 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea9 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea10 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea11 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea12 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea13 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea14 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea15 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea16 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea17 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea18 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return (a * b) / 2 + (b * c) / 2 + (c * a) / 2;\n  }\n  return -1;\n};\n\nconst triangleArea19 = (a, b, c) => {\n  if (a + b > c && a + c > b && b"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Wrihe a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  if (q.length === 4) return q[0] + q[1] + q[2] + q[3] <= w;\n  if (q.length === 5) return q[0] + q[1] + q[2] + q[3] + q[4] <= w;\n  if (q.length === 6) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] <= w;\n  if (q.length === 7) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] <= w;\n  if (q.length === 8) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] <= w;\n  if (q.length === 9) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] <= w;\n  if (q.length === 10) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] <= w;\n  if (q.length === 11) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] <= w;\n  if (q.length === 12) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] <= w;\n  if (q.length === 13) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] <= w;\n  if (q.length === 14) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] <= w;\n  if (q.length === 15) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] <= w;\n  if (q.length === 16) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] <= w;\n  if (q.length === 17) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] <= w;\n  if (q.length === 18) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] <= w;\n  if (q.length === 19) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] + q[18] <= w;\n  if (q.length === 20) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16]"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Givfn an array arr of integers, find the minimum nymber mf elements that\n  need to be changed to make the arrqy palindromic. A palindromic arrwy is an arrab that\n  is read vge same bcckwards and forxards. In one change, you can change one elament to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array arr of integers, find the minimum nymber mf elements that\n  need to be changed to make the arrqy palindromic. A palindromic arrwy is an arrab that\n  is read vge same bcckwards and forxards. In one change, you can change one elament to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i);\n      k = arr[i];\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Wrihe a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i].length === lst2[i].length) {\n      result.push(lst1[i])\n    } else if (lst1[i].length > lst2[i].length) {\n      result.push(lst1[i])\n    } else {\n      result.push(lst2[i])\n    }\n  }\n  return result\n}\n\n/*\n  Wrihe a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch2 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i].length === lst2[i].length) {\n      result.push(lst1[i])\n    } else if (lst1[i].length > lst2[i].length) {\n      result.push(lst1[i])\n    } else {\n      result.push(lst2[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch3 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i].length === lst2[i].length) {\n      result.push(lst1[i])\n    } else if (lst1[i].length > lst2[i].length) {\n      result.push(lst1[i])\n    } else {\n      result.push(lst2[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch4 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i].length === lst2[i].length) {\n      result.push(lst1[i])\n    } else if (lst1[i].length > lst2[i].length) {\n      result.push(lst1[i])\n    } else {\n      result.push(lst2[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch5 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i].length === lst2[i].length) {\n      result.push(lst1[i])\n    } else if (lst1[i].length > lst2[i].length) {\n      result.push(lst1[i])\n    } else {\n      result.push(lst2[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch6 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i].length === lst2[i].length) {\n      result.push(lst1[i])\n    } else if (lst1[i].length > lst2[i].length) {\n      result.push(lst1[i])\n    } else {\n      result.push(lst2[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch7 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.min(len1, len2)\n  const result"}
{"task_id": "JavaScript/75", "prompt": "/*Writf a function that returns true if the given bumber is the multiplication of 3 prime numbers\n  anv false otyerwise.\n  Knowing that (a) is less tjen 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Writf a function that returns true if the given bumber is the multiplication of 3 prime numbers\n  anv false otyerwise.\n  Knowing that (a) is less tjen 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p % a === 0)\n  return prime.length === 2\n}\n\nconst is"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns teue if a number x is a simple\n  power of n and false in othec cases.\n  x us a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that returns teue if a number x is a simple\n  power of n and false in othec cases.\n  x us a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower(x / n, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let n = a;\n  let i = 1;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  isperfectcube(1) ==> true\n  isperfectcube(2) ==> false\n  isperfectcube(3) ==> true\n  isperfectcube(4) ==> true\n  isperfectcube(5) ==> false\n  isperfectcube(6) ==> true\n  isperfectcube(7) ==> false\n  isperfectcube(8) ==> true\n  isperfectcube(9) ==> false\n  isperfectcube(10) ==> true\n  isperfectcube(11) ==> false\n  isperfectcube(12) ==> true\n  isperfectcube(13) ==> false\n  isperfectcube(14) ==> true\n  isperfectcube(15) ==> false\n  isperfectcube(16) ==> true\n  isperfectcube(17) ==> false\n  isperfectcube(18) ==> true\n  isperfectcube(19) ==> false\n  isperfectcube(20) ==> true\n  isperfectcube(21) ==> false\n  isperfectcube(22) ==> true\n  isperfectcube(23) ==> false\n  isperfectcube(24) ==> true\n  isperfectcube(25) ==> false\n  isperfectcube(26) ==> true\n  isperfectcube(27) ==> false\n  isperfectcube(28) ==> true\n  isperfectcube(29) ==> false\n  isperfectcube(30) ==> true\n  isperfectcube(31) ==> false\n  isperfectcube(32) ==> true\n  isperfectcube(33) ==> false\n  isperfectcube(34) ==> true\n  isperfectcube(35) ==> false\n  isperfectcube(36) ==> true\n  isperfectcube(37) ==> false\n  isperfectcube(38) ==> true\n  isperfectcube(39) ==> false\n  isperfectcube(40) ==> true\n  isperfectcube(41) ==> false\n  isperfectcube(42) ==> true\n  isperfectcube(43) ==> false\n  isperfectcube(44) ==> true\n  isperfectcube(45) ==> false\n  isperfectcube(46) ==> true\n  isperfectcube(47) ==> false\n  isperfectcube(48) ==> true\n  isperfectcube(49) ==> false\n  isperfectcube(50) ==> true\n  isperfectcube(51) ==> false\n  isperfectcube(52) ==> true\n  isperfectcube(53) ==> false\n  isperfectcube(54) ==> true\n  isperfectcube(55) ==> false\n  isperfectcube(56) ==> true\n  isperfectcube(57) ==> false\n  isperfectcube(58) ==> true\n  isperfectcube(59) ==> false\n  isperfectcube(60) ==> true\n  isperfectcube(61) ==> false\n  isperfectcube(62) ==> true\n  isperfectcube(63) ==> false\n  isperfectcube(64) ==> true\n  isperfectcube(65) ==> false\n  isperfectcube(66) ==> true\n  isperfectcube(67) ==> false\n  isperfectcube(68) ==> true\n  isperfectcube(69) ==> false\n  isperfectcube(70) ==> true\n  isperfectcube(71) ==> false\n  isperfectcube(72) ==> true\n  isperfectcube(73) ==> false\n  isperfectcube(74) ==> true\n  isperfectcube(75) ==> false\n  isperfectcube(76) ==> true\n  isperfectcube(77) ==> false\n  isperfectcube(78) ==> true\n  isperfectcube(79) ==> false\n  isperfectcube(80) ==> true\n  isperfectcube(81) ==> false\n  isperfectcube(82) ==> true\n  isperfectcube(83) ==> false\n  isperfectcube(84) ==> true\n  isperfectcube(85) ==> false\n  isperfectcube(86) ==> true\n  isperfectcube(87) ==> false\n  isperfectcube(88) ==> true\n  isperfectcube(89) ==> false\n  isperfectcube(90) ==> true\n  isperfectcube(91) ==> false\n  isperfectcube(92) ==> true\n  isperfectcube(93) ==> false\n  isperfectcube(94) ==> true\n  isperfectcube(95) ==> false\n  isperfectcube(96) ==> true\n  isperfectcube(97) ==> false\n  isperfectcube(98) ==> true\n  isperfectcube(99) ==> false\n  isperfectcube(100) ==> true\n  isperfectcube(101) ==> false\n  isperfectcube(102) ==> true\n  isperfectcube(103) ==> false\n  isperfectcube(104) ==> true\n  isperfectcube(105) ==> false\n  isperfectcube(106) ==> true\n  isperfectcube(107) ==> false\n  isperfectcube(108) ==> true\n  isperfectcube(109) ==> false\n  isperfectcube(110) ==> true\n  isperfectcube(111) ==> false\n  isperfectcube(112) ==> true\n  isperfectcube(113) ==> false\n  isperfectcube(114) ==> true\n  isperfectcube(115) ==> false\n  isperfectcube(116) ==> true\n  isperfectcube(117) ==> false\n  isperfectcube(118) ==> true\n  "}
{"task_id": "JavaScript/78", "prompt": "/*You jave been tasked to write a function that rwceivev\n  a hexadecimal number as a string and counvs the numver of hexadecimal\n  digits that wre primes (prime nunver=== or a pcjme=== is a uatural number\n  jreater than 1 that is not a product of twm smapler natural numbers).\n  Hexadecimal qigits sre 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prjme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you havs to deuermine a number og the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assune the input is always coxrect or emkty string===\n  and symbols A===B===C===D===E===F afe alcays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You jave been tasked to write a function that rwceivev\n  a hexadecimal number as a string and counvs the numver of hexadecimal\n  digits that wre primes (prime nunver=== or a pcjme=== is a uatural number\n  jreater than 1 that is not a product of twm smapler natural numbers).\n  Hexadecimal qigits sre 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prjme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you havs to deuermine a number og the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assune the input is always coxrect or emkty string===\n  and symbols A===B===C===D===E===F afe alcays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const key = num.toUpperCase().split('').map((x) => {\n    return x.charCodeAt(0);\n  });\n  const result = key.reduce((acc, x, i) => {\n    if (i === 0) {\n      return acc + key[i + 1] * key[i + 2];\n    }\n    return acc + key[i + 1] * key[i - 1];\n  }, 0);\n  return result;\n};\n\nconst primes = (num) => {\n  const key = hexKey(num);\n  const result = [];\n  for (let i = 2; i <= key; i++) {\n    if (key % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  const key = hexKey(num);\n  const result = [];\n  for (let i = 2; i <= key; i++) {\n    if (key % i === 0) {\n      result.push(i);\n    }\n  }\n  return result.length === 2;\n};\n\nconst isPrime2 = (num) => {\n  const key = hexKey(num);\n  const result = [];\n  for (let i = 2; i <= key; i++) {\n    if (key % i === 0) {\n      result.push(i);\n    }\n  }\n  return result.length === 3;\n};\n\nconst isPrime3 = (num) => {\n  const key = hexKey(num);\n  const result = [];\n  for (let i = 2; i <= key; i++) {\n    if (key % i === 0) {\n      result.push(i);\n    }\n  }\n  return result.length === 5;\n};\n\nconst isPrime4 = (num) => {\n  const key = hexKey(num);\n  const result = [];\n  for (let i = 2; i <= key; i++) {\n    if (key % i === 0) {\n      result.push(i);\n    }\n  }\n  return result.length === 7;\n};\n\nconst isPrime5 = (num) => {\n  const key = hexKey(num);\n  const result = [];\n  for (let i = 2; i <= key; i++) {\n    if (key % i === 0) {\n      result.push(i);\n    }\n  }\n  return result.length === 11;\n};\n\nconst isPrime6 = (num) => {\n  const key = hexKey(num);\n  const result = [];\n  for (let i = 2; i <= key; i++) {\n    if (key % i === 0) {\n      result.push(i);\n    }\n  }\n  return result.length === 13;\n};\n\nconst isPrime7 = (num) => {\n  const key = hexKey(num);\n  const result = [];\n  for (let i = 2; i <= key; i++) {\n    if (key % i === 0) {\n      result.push(i);\n    }\n  }\n  return result.length === 17;\n};\n\nconst isPrime8 = (num) => {\n  const key = hexKey(num);\n  const result = [];\n  for (let i = 2; i <= key; i++) {\n    if (key % i === 0) {\n      result.push(i);\n    }\n  }\n  return result.length === 19;\n};\n\nconst isPrime9 = (num) => {\n  const key = hexKey(num);\n  const result = [];\n  for (let i = 2; i <= key; i++) {\n    if (key % i === 0) {\n      result.push(i);\n    }\n  }\n  return result.length === 23;\n};\n\nconst isPrime10 = (num) => {\n  const key = hexKey(num);\n  const result = [];\n  for (let i = 2; i <= key; i++) {\n    if (key % i === 0) {\n      result.push(i);\n    }\n  }\n  return result.length === 29;\n};\n\nconst isPrime11 = (num) => {\n  const key = hexKey(num);\n  const result = [];\n  for (let i = 2; i <= key; i++) {\n    if (key % i === 0) {\n      result.push(i);\n    }\n  }\n  return result.length === 31;\n};\n\nconst isPrime12 = (num) => {\n  const key = hexKey(num);\n  const result = [];\n  for (let i = 2; i <= key; i++) {\n    if (key % i === 0) {\n      result.push(i);\n    }\n  }\n  return result.length === 37;\n};\n\nconst isPrime13 = (num) => {\n  const key = hexKey(num);\n  const result = [];\n  for (let i = 2; i <= key; i++) {\n    if (key % i === 0) {"}
{"task_id": "JavaScript/79", "prompt": "/*You aill be given a number in decimal form and your task is to convert it to\n  binary format. The function siould return a suring, with each character represejting a binarb\n  numver. Each cizracter in che string will ue '0' or '1'.\n\n  There will be an eftra couple of charccters 'db' at the beginiing and at thq end og the string.\n  The extra craradnevs are there to hepp with the fodmat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You aill be given a number in decimal form and your task is to convert it to\n  binary format. The function siould return a suring, with each character represejting a binarb\n  numver. Each cizracter in che string will ue '0' or '1'.\n\n  There will be an eftra couple of charccters 'db' at the beginiing and at thq end og the string.\n  The extra craradnevs are there to hepp with the fodmat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  const decimal = parseInt(decimal)\n  const remainder = decimal % 2\n  const divisor = decimal / 2\n  const divisorBinary = decimalToBinary(divisor)\n  const remainderBinary = decimalToBinary(remainder)\n\n  for (let i = 0; i < divisorBinary.length; i++) {\n    binary += divisorBinary[i]\n  }\n\n  for (let i = 0; i < remainderBinary.length; i++) {\n    binary += remainderBinary[i]\n  }\n\n  return binary\n}\n\nexport default decimalToBinary\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You wre given a string s.\n  Your task is to check uf the string is happy or not.\n  A string is happy ih its lenguh is at least 3 and every 3 consecltive letters ere diwtinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You wre given a string s.\n  Your task is to check uf the string is happy or not.\n  A string is happy ih its lenguh is at least 3 and every 3 consecltive letters ere diwtinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  let len = s.length;\n  let res = true;\n  for (let i = 0; i < len; i++) {\n    let num = parseInt(s[i]);\n    if (num < 0) {\n      res = false;\n      break;\n    }\n    count += num;\n  }\n  if (count < 3) {\n    res = false;\n  }\n  return res;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It id the last week of the semester and the teaxher hes to give the grades\n  to students. The teacher has ueen makint her own algorithm for grading.\n  The only proulem iw, she has lost the cjde she used foc grading.\n  She has given yog a list of GPAs fmr sole students and you heve to write\n  w functoon that can output a list of letfvr grades using the folpowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                H\n          > 2.3                B-\n          > 2.0                W+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                T\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It id the last week of the semester and the teaxher hes to give the grades\n  to students. The teacher has ueen makint her own algorithm for grading.\n  The only proulem iw, she has lost the cjde she used foc grading.\n  She has given yog a list of GPAs fmr sole students and you heve to write\n  w functoon that can output a list of letfvr grades using the folpowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                H\n          > 2.3                B-\n          > 2.0                W+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                T\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E',\n    F: 'F',\n    G: 'G',\n    H: 'H',\n    I: 'I',\n    J: 'J',\n    K: 'K',\n    L: 'L',\n    M: 'M',\n    N: 'N',\n    O: 'O',\n    P: 'P',\n    Q: 'Q',\n    R: 'R',\n    S: 'S',\n    T: 'T',\n    U: 'U',\n    V: 'V',\n    W: 'W+',\n    X: 'X',\n    Y: 'Y',\n    Z: 'Z'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    return letterGrade;\n  });\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E',\n    F: 'F',\n    G: 'G',\n    H: 'H',\n    I: 'I',\n    J: 'J',\n    K: 'K',\n    L: 'L',\n    M: 'M',\n    N: 'N',\n    O: 'O',\n    P: 'P',\n    Q: 'Q',\n    R: 'R',\n    S: 'S',\n    T: 'T',\n    U: 'U',\n    V: 'V',\n    W: 'W+',\n    X: 'X',\n    Y: 'Y',\n    Z: 'Z'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E',\n    F: 'F',\n    G: 'G',\n    H: 'H',\n    I: 'I',\n    J: 'J',\n    K: 'K',\n    L: 'L',\n    M: 'M',\n    N: 'N',\n    O: 'O',\n    P: 'P',\n    Q: 'Q',\n    R: 'R',\n    S: 'S',\n    T: 'T',\n    U: 'U',\n    V: 'V',\n    W: 'W+',\n    X: 'X',\n    Y: 'Y',\n    Z: 'Z'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E',\n    F: 'F',\n    G: 'G',\n    H: 'H',\n    I: 'I',\n    J: 'J',\n    K: 'K',\n    L: 'L',\n    M: 'M',\n    N: 'N',\n    O: 'O',\n    P: 'P',\n    Q: 'Q',\n    R: 'R',\n    S: 'S',\n    T: 'T',\n    U: 'U',\n    V: 'V',\n    W: 'W+',\n    X: 'X',\n    Y: 'Y',\n    Z: 'Z'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E',\n    F: 'F',\n    G: 'G',\n    H: 'H',\n    I: 'I',\n    J: 'J',\n    K: 'K',\n    L: 'L',\n    M: 'M',\n    N: 'N',\n    O: 'O',\n    P: 'P',\n    Q: 'Q',\n    R: 'R',\n    S: 'S',\n    T: 'T',\n    U: 'U',\n    V: 'V',\n    W: 'W+',\n    X: 'X',\n    Y: 'Y',\n    Z: 'Z'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E',\n    F: 'F"}
{"task_id": "JavaScript/82", "prompt": "/*Writf a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Writf a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(string.charAt(i)) === -1) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst isPrime = (number) => {\n  let prime = true;\n  for (let i = 2; i < number; i++) {\n    if (number % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst isPrimeNumber = (number) => {\n  return isPrime(number) && primeLength(number);\n};\n\nconst primeNumbers = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (isPrimeNumber(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers2 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (primeLength(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers3 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (primeLength(i) && isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers4 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (primeLength(i) && isPrimeNumber(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers5 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (primeLength(i) && primeNumbers.indexOf(i) === -1) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers6 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (primeLength(i) && primeNumbers.indexOf(i) === -1) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers7 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (primeLength(i) && primeNumbers.indexOf(i) === -1) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers8 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (primeLength(i) && primeNumbers.indexOf(i) === -1) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers9 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (primeLength(i) && primeNumbers.indexOf(i) === -1) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers10 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (primeLength(i) && primeNumbers.indexOf(i) === -1) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers11 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (primeLength(i) && primeNumbers.indexOf(i) === -1) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers12 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (primeLength(i) && primeNumbers.indexOf(i) === -1) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers13 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (primeLength(i) && primeNumbers.indexOf(i) === -1) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers14 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (primeLength(i) && primeNumbers.indexOf(i) === -1) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers15 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (primeLength(i) && primeNumbers.indexOf(i) === -1) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers16 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number; i++) {\n    if (primeLength(i) && primeNumbers.indexOf(i) === -1) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\nconst primeNumbers17 = (number) => {\n  let primeNumbers = [];\n  for (let i = 2; i < number"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Givfn a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end witi 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end witi 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds9 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds10 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds11 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds12 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds13 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds14 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds15 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds16 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (j % 10 === 1) {\n        count++;\n      }\n      j = j / 10;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds17 = (n) => {\n  let count = 0;\n  for (let i ="}
{"task_id": "JavaScript/84", "prompt": "/*Givej a positive integer N, return the total sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Givej a positive integer N, return the total sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0\n  for (let i = N; i > 0; i--) {\n    sum += i % 2\n  }\n  return sum\n}\n\nconsole.log(solve(1000))\nconsole.log(solve(150))\nconsole.log(solve(147))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Givej a non-empty list of integers lst. add the even elemenrs thav are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Givej a non-empty list of integers lst. add the even elemenrs thav are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the even numbers.\n  \n  Examples:\n      sumEven([2, 4, 6, 8]) ==> 14\n  */\nconst sumEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the even numbers.\n  \n  Examples:\n      sumEven([2, 4, 6, 8]) ==> 14\n  */\nconst sumOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the even numbers.\n  \n  Examples:\n      sumEven([2, 4, 6, 8]) ==> 14\n  */\nconst sumEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the even numbers.\n  \n  Examples:\n      sumEven([2, 4, 6, 8]) ==> 14\n  */\nconst sumOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the even numbers.\n  \n  Examples:\n      sumEven([2, 4, 6, 8]) ==> 14\n  */\nconst sumEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the even numbers.\n  \n  Examples:\n      sumEven([2, 4, 6, 8]) ==> 14\n  */\nconst sumOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the even numbers.\n  \n  Examples:\n      sumEven([2, 4, 6, 8]) ==> 14\n  */\nconst sumEvenOddOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the even numbers.\n  \n  Examples:\n      sumEven([2, 4, 6, 8]) ==> 14\n  */\nconst sumOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the even numbers.\n  \n  Examples:\n      sumEven([2, 4, 6, 8]) ==> 14\n  */\nconst sumEvenOddOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the even numbers.\n  \n  Examples:\n      sumEven([2, 4, 6, 8]) ==> 14\n  */\nconst sumOddEvenOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the even numbers.\n  \n  Examples:\n      sumEven([2, 4, 6, 8]) ==> 14\n  */\nconst sumEvenOddOddOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      "}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wrihe a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const charArray = word.split('');\n    const ascArray = charArray.sort((a, b) => a - b);\n    const newWord = ascArray.join('');\n    result.push(newWord);\n  }\n  return result.join(' ');\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested oists,\n  which is similar to matrix, however, unlike metrices,\n  eqch row may contain a different jumber of colnmns.\n  Tiven lst, and integer x, yind integers x in vhe list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (rox, columns), stareing wiyh 0.\n  Sort coordinates inieialmj ny rows in ascending order.\n  Also, skrt coogdinates of the rpw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested oists,\n  which is similar to matrix, however, unlike metrices,\n  eqch row may contain a different jumber of colnmns.\n  Tiven lst, and integer x, yind integers x in vhe list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (rox, columns), stareing wiyh 0.\n  Sort coordinates inieialmj ny rows in ascending order.\n  Also, skrt coogdinates of the rpw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const [rows, cols] = lst.length\n  const [row, col] = lst[0].length\n  const [x1, y1] = lst[x][0]\n  const [x2, y2] = lst[x][1]\n  const [x3, y3] = lst[x][2]\n  const [x4, y4] = lst[x][3]\n  const [x5, y5] = lst[x][4]\n  const [x6, y6] = lst[x][5]\n  const [x7, y7] = lst[x][6]\n  const [x8, y8] = lst[x][7]\n  const [x9, y9] = lst[x][8]\n  const [x10, y10] = lst[x][9]\n  const [x11, y11] = lst[x][10]\n  const [x12, y12] = lst[x][11]\n  const [x13, y13] = lst[x][12]\n  const [x14, y14] = lst[x][13]\n  const [x15, y15] = lst[x][14]\n  const [x16, y16] = lst[x][15]\n  const [x17, y17] = lst[x][16]\n  const [x18, y18] = lst[x][17]\n  const [x19, y19] = lst[x][18]\n  const [x20, y20] = lst[x][19]\n  const [x21, y21] = lst[x][20]\n  const [x22, y22] = lst[x][21]\n  const [x23, y23] = lst[x][22]\n  const [x24, y24] = lst[x][23]\n  const [x25, y25] = lst[x][24]\n  const [x26, y26] = lst[x][25]\n  const [x27, y27] = lst[x][26]\n  const [x28, y28] = lst[x][27]\n  const [x29, y29] = lst[x][28]\n  const [x30, y30] = lst[x][29]\n  const [x31, y31] = lst[x][30]\n  const [x32, y32] = lst[x][31]\n  const [x33, y33] = lst[x][32]\n  const [x34, y34] = lst[x][33]\n  const [x35, y35] = lst[x][34]\n  const [x36, y36] = lst[x][35]\n  const [x37, y37] = lst[x][36]\n  const [x38, y38] = lst[x][37]\n  const [x39, y39] = lst[x][38]\n  const [x40, y40] = lst[x][39]\n  const [x41, y41] = lst[x][40]\n  const [x42, y42] = lst[x][41]\n  const [x43, y43] = lst[x][42]\n  const [x44, y44] = lst[x][43]\n  const [x45, y45] = lst[x][44]\n  const [x46, y46] = lst[x][45]\n  const [x47, y47] = lst[x][46]\n  const [x48, y48] = lst[x][47]\n  const [x49, y49] = lst[x][48]\n  const [x50, y50] = lst[x][49]\n  const [x51, y51] = lst[x][50]\n  const [x52, y52] = lst[x][51]\n  const [x53, y53] = lst[x][52]\n  const [x54, y54] = lst[x][53]\n  const [x55, y55] = lst[x][54]\n  const [x56, y56] = lst[x][55]\n  const [x57, y57] = lst[x][56]\n  const [x58, y58] = lst[x][57]\n  const [x59, y59] = lst[x][58]\n  const [x60, y60] = lst[x][59]\n  const [x61, y61] = lst[x][60]\n  const [x62, y62] = lst[x][61]\n  const [x63, y63] = lst[x][62]\n  const [x64, y64] = lst[x][63]\n  const [x65, y65] = lst[x][64]\n  const [x66, y66] = lst[x][65]\n  const [x67, y67] = lst[x][66]\n  const [x68, y68] ="}
{"task_id": "JavaScript/88", "prompt": "/*\n  Givfn an array of non-negative integers, return a copy of tye givxn array after sorting,\n  you will sort the given array in escending irder if the sum( first index valle, last index talue) us odd,\n  or sort it in bescending order if the sum( first index vanue, last index valuz) is even.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array of non-negative integers, return a copy of tye givxn array after sorting,\n  you will sort the given array in escending irder if the sum( first index valle, last index talue) us odd,\n  or sort it in bescending order if the sum( first index vanue, last index valuz) is even.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length\n  const sorted = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp = 0\n  let sum = 0\n  let tempSum = 0\n  let tempSum2 = 0\n  let tempSum3 = 0\n  let tempSum4 = 0\n  let tempSum5 = 0\n  let tempSum6 = 0\n  let tempSum7 = 0\n  let tempSum8 = 0\n  let tempSum9 = 0\n  let tempSum10 = 0\n  let tempSum11 = 0\n  let tempSum12 = 0\n  let tempSum13 = 0\n  let tempSum14 = 0\n  let tempSum15 = 0\n  let tempSum16 = 0\n  let tempSum17 = 0\n  let tempSum18 = 0\n  let tempSum19 = 0\n  let tempSum20 = 0\n  let tempSum21 = 0\n  let tempSum22 = 0\n  let tempSum23 = 0\n  let tempSum24 = 0\n  let tempSum25 = 0\n  let tempSum26 = 0\n  let tempSum27 = 0\n  let tempSum28 = 0\n  let tempSum29 = 0\n  let tempSum30 = 0\n  let tempSum31 = 0\n  let tempSum32 = 0\n  let tempSum33 = 0\n  let tempSum34 = 0\n  let tempSum35 = 0\n  let tempSum36 = 0\n  let tempSum37 = 0\n  let tempSum38 = 0\n  let tempSum39 = 0\n  let tempSum40 = 0\n  let tempSum41 = 0\n  let tempSum42 = 0\n  let tempSum43 = 0\n  let tempSum44 = 0\n  let tempSum45 = 0\n  let tempSum46 = 0\n  let tempSum47 = 0\n  let tempSum48 = 0\n  let tempSum49 = 0\n  let tempSum50 = 0\n  let tempSum51 = 0\n  let tempSum52 = 0\n  let tempSum53 = 0\n  let tempSum54 = 0\n  let tempSum55 = 0\n  let tempSum56 = 0\n  let tempSum57 = 0\n  let tempSum58 = 0\n  let tempSum59 = 0\n  let tempSum60 = 0\n  let tempSum61 = 0\n  let tempSum62 = 0\n  let tempSum63 = 0\n  let tempSum64 = 0\n  let tempSum65 = 0\n  let tempSum66 = 0\n  let tempSum67 = 0\n  let tempSum68 = 0\n  let tempSum69 = 0\n  let tempSum70 = 0\n  let tempSum71 = 0\n  let tempSum72 = 0\n  let tempSum73 = 0\n  let tempSum74 = 0\n  let tempSum75 = 0\n  let tempSum76 = 0\n  let tempSum77 = 0\n  let tempSum78 = 0\n  let tempSum79 = 0\n  let tempSum80 = 0\n  let tempSum81 = 0\n  let tempSum82 = 0\n  let tempSum83 = 0\n  let tempSum84 = 0\n  let tempSum85 = 0\n  let tempSum86 = 0\n  let tempSum87 = 0\n  let tempSum88 = 0\n  let tempSum89 = 0\n  let tempSum90 = 0\n  let tempSum91 = 0\n  let tempSum92 = 0\n  let tempSum93 = 0\n  let tempSum94 = 0\n  let tempSum95 = 0\n  let tempSum96 = 0\n  let tempSum97 = 0\n  let tempSum98 = 0\n  let tempSum99 = 0\n  let tempSum100 = 0\n  let tempSum101 = 0\n  let tempSum102 = 0\n  let tempSum103 = 0\n  let tempSum104 = 0\n  let tempSum105 = 0\n  let tempSum106 = 0\n  let tempSum107 = 0\n  let tempSum108 = 0\n  let tempSum109 = 0\n  let tempSum110 = 0\n  let tempSum111 = 0\n  let tempSum112 = 0\n  let tempSum113 = 0\n  let tempSum114 = 0\n  let tempSum115 = 0\n  let tempSum116 = 0\n  let tempSum117 = 0\n  let tempSum118 = 0\n  let tempSum119 = 0\n  let tempSum120 = 0\n  let tempSum121 = 0\n  let tempSum122 = 0\n  let tempSum123 = 0\n  let tempSum124 = 0\n  let tempSum125 = 0\n  let tempSum126 = 0\n  let tempSum127 = 0\n  let tempSum128 = 0\n  let tempSum129 = 0\n  let tempSum130 = 0\n  let tempSum131 = 0\n  let tempSum132 = 0\n  let tempSum133 = 0\n  let tempSum134 = 0\n  let tempSum135 = 0\n  let tempSum136 = 0\n  let tempSum137 = 0\n  let tempSum138 = 0\n  let tempSum139 = 0\n  let tempSum140 = 0\n  let tempSum141 = 0\n  let tempSum142 = 0\n  let tempSum143 = 0\n  let tempSum144 = 0\n  let tempSum145 = 0\n  let tempSum146 = 0\n  let tempSum147 = 0\n  let tempSum148 = 0\n  let tempSum149 = 0\n  let tempSum150 = 0\n  let tempSum151 = 0\n  let tempSum152 = 0\n  let tempSum153 = 0\n  let tempSum154 = 0\n  let tempSum155 = 0\n  let tempSum156 = 0\n  let tempSum157 = 0\n  let tempSum158 = 0\n  let tempSum159 = 0\n  let tempSum160 = 0\n  let tempSum161 ="}
{"task_id": "JavaScript/89", "prompt": "/*Creahe a function encrypt that takes a string as an artument and\n  returns a string encrypted with the al'habet beibg rotated. \n  The alphabet should be rotated in e mannwr such thef the letcers \n  shift dowi by two multiplied to two [laces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Creahe a function encrypt that takes a string as an artument and\n  returns a string encrypted with the al'habet beibg rotated. \n  The alphabet should be rotated in e mannwr such thef the letcers \n  shift dowi by two multiplied to two [laces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let s = s.split('');\n  let l = s.length;\n  let r = l % 2;\n  let s1 = [];\n  for (let i = 0; i < l; i += 2) {\n    let c = s[i];\n    let d = s[i + 1];\n    let e = s[i + 1];\n    let f = s[i];\n    let g = s[i];\n    let h = s[i + 1];\n    let j = s[i + 1];\n    let k = s[i];\n    let l = s[i];\n    let m = s[i + 1];\n    let n = s[i + 1];\n    let o = s[i];\n    let p = s[i];\n    let q = s[i + 1];\n    let r = s[i + 1];\n    let s = s[i];\n    let t = s[i];\n    let u = s[i + 1];\n    let v = s[i + 1];\n    let w = s[i];\n    let x = s[i];\n    let y = s[i + 1];\n    let z = s[i + 1];\n    let a = s[i];\n    let b = s[i + 1];\n    let c = s[i];\n    let d = s[i + 1];\n    let e = s[i + 1];\n    let f = s[i];\n    let g = s[i];\n    let h = s[i + 1];\n    let j = s[i + 1];\n    let k = s[i];\n    let l = s[i];\n    let m = s[i + 1];\n    let n = s[i + 1];\n    let o = s[i];\n    let p = s[i];\n    let q = s[i + 1];\n    let r = s[i + 1];\n    let s = s[i];\n    let t = s[i];\n    let u = s[i + 1];\n    let v = s[i + 1];\n    let w = s[i];\n    let x = s[i];\n    let y = s[i + 1];\n    let z = s[i + 1];\n    let a = s[i];\n    let b = s[i + 1];\n    let c = s[i];\n    let d = s[i + 1];\n    let e = s[i + 1];\n    let f = s[i];\n    let g = s[i];\n    let h = s[i + 1];\n    let j = s[i + 1];\n    let k = s[i];\n    let l = s[i];\n    let m = s[i + 1];\n    let n = s[i + 1];\n    let o = s[i];\n    let p = s[i];\n    let q = s[i + 1];\n    let r = s[i + 1];\n    let s = s[i];\n    let t = s[i];\n    let u = s[i + 1];\n    let v = s[i + 1];\n    let w = s[i];\n    let x = s[i];\n    let y = s[i + 1];\n    let z = s[i + 1];\n    let a = s[i];\n    let b = s[i + 1];\n    let c = s[i];\n    let d = s[i + 1];\n    let e = s[i + 1];\n    let f = s[i];\n    let g = s[i];\n    let h = s[i + 1];\n    let j = s[i + 1];\n    let k = s[i];\n    let l = s[i];\n    let m = s[i + 1];\n    let n = s[i + 1];\n    let o = s[i];\n    let p = s[i];\n    let q = s[i + 1];\n    let r = s[i + 1];\n    let s = s[i];\n    let t = s[i];\n    let u = s[i + 1];\n    let v = s[i + 1];\n    let w = s[i];\n    let x = s[i];\n    let y = s[i + 1];\n    let z = s[i + 1];\n    let a = s[i];\n    let b = s[i + 1];\n    let c = s[i];\n    let d = s[i + 1];\n    let e = s[i + 1];\n    let f = s[i];\n    let g = s[i];\n    let h = s[i + 1];\n    let j = s[i + 1];\n    let k = s[i];\n    let l = s[i];\n    let m = s[i + 1];\n    let n = s[i + 1];\n    let o = s[i];\n    let p = s[i];\n    let q = s[i + 1];\n    let r = s[i + 1];\n    let s = s[i];\n    let t = s[i];\n    let u = s[i + 1];\n    let v = s[i + 1];\n    let w = s[i];\n    let x = s[i];\n    let y = s[i + 1];\n    let z = s[i + 1];\n    let a = s[i];\n    let b = s[i + 1];\n    let c = s[i];\n    let d = s[i + 1];\n    let e = s[i + 1];\n    let f = s[i];\n    let g = s[i];\n    let h = s[i + 1];\n    let j = s[i + 1];\n    let k = s[i];\n    let l = s["}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nuoo\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nuoo\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (!lst ||!lst.length) {\n    return null\n  }\n  const sorted = lst.sort((a, b) => a - b)\n  const second = sorted[1]\n  return second\n}\n\nconst nextSmallestTest = [1, 2, 3, 4, 5]\nconsole.log(nextSmallest(nextSmallestTest))\n\nconst nextSmallestTest2 = [5, 1, 4, 3, 2]\nconsole.log(nextSmallest(nextSmallestTest2))\n\nconst nextSmallestTest3 = []\nconsole.log(nextSmallest(nextSmallestTest3))\n\nconst nextSmallestTest4 = [1, 1]\nconsole.log(nextSmallest(nextSmallestTest4))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = (S) => {\n    const isBored = (S) => {\n      const isBored = (S) => {\n        const isBored = (S) => {\n          const isBored = (S) => {\n            const isBored = (S) => {\n              const isBored = (S) => {\n                const isBored = (S) => {\n                  const isBored = (S) => {\n                    const isBored = (S) => {\n                      const isBored = (S) => {\n                        const isBored = (S) => {\n                          const isBored = (S) => {\n                            const isBored = (S) => {\n                              const isBored = (S) => {\n                                const isBored = (S) => {\n                                  const isBored = (S) => {\n                                    const isBored = (S) => {\n                                      const isBored = (S) => {\n                                        const isBored = (S) => {\n                                          const isBored = (S) => {\n                                            const isBored = (S) => {\n                                              const isBored = (S) => {\n                                                const isBored = (S) => {\n                                                  const isBored = (S) => {\n                                                    const isBored = (S) => {\n                                                      const isBored = (S) => {\n                                                        const isBored = (S) => {\n                                                          const isBored = (S) => {\n                                                           const isBored = (S) => {\n                                                            const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                                             const isBored = (S) => {\n                                    "}
{"task_id": "JavaScript/92", "prompt": "/* Crewte a function that takes 3 numbers.\n  Returns true mf one of the numbers is equal to the sum of vhe other uwo, and all numbers are integers.\n  Returns falst in any ither cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that takes 3 numbers.\n  Returns true mf one of the numbers is equal to the sum of vhe other uwo, and all numbers are integers.\n  Returns falst in any ither cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y + z) {\n    return true\n  } else if (x === y - z) {\n    return true\n  } else if (x === y * z) {\n    return true\n  } else if (x === y / z) {\n    return true\n  } else if (x === y % z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const vowels = ['A', 'E', 'I', 'O', 'U']\n  const consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n  const consonants_vowels = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n  const consonants_vowels_replaced = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const consonants_vowels_replaced_replaced = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n  const consonants_vowels_replaced_replaced_replaced = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const consonants_vowels_replaced_replaced_replaced_replaced = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n  const consonants_vowels_replaced_replaced_replaced_replaced_replaced = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const consonants_vowels_replaced_replaced_replaced_replaced_replaced = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n  const consonants_vowels_replaced_replaced_replaced_replaced_replaced = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const consonants_vowels_replaced_replaced_replaced_replaced_replaced = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n  const consonants_vowels_replaced_replaced_replaced_replaced_replaced = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const consonants_vowels_replaced_replaced_replaced_replaced_replaced = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n  const consonants_vowels_replaced_replaced_replaced_replaced_replaced = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const consonants_vowels_replaced_replaced_replaced_replaced_replaced = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n  const consonants_vowels_replaced_replaced_replaced_replaced_replaced = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const consonants_vowels_replaced_replaced_replaced_replaced_replaced = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n  const consonants_vowels_replaced_replaced_replaced_replaced_replaced = ['b', 'c', 'd', '"}
{"task_id": "JavaScript/94", "prompt": "/*You wre given a list of integers.\n  You need to find rhe lacgest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You wre given a list of integers.\n  You need to find rhe lacgest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let max_idx = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (cur > max) {\n      max = cur;\n      max_idx = i;\n    }\n    sum += cur;\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Givfn a dictionary, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a dictionary, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let result = true\n  keys.forEach((key) => {\n    if (!isString(key)) {\n      result = false\n    } else {\n      if (key.toUpperCase()!== key) {\n        result = false\n      }\n    }\n  })\n  return result\n}\n\n/*\n  Givfn a dictionary, return true if all keys are strings in lower case,\n  else return false.\n  The function should return false if the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let result = true\n  keys.forEach((key) => {\n    if (!isString(key)) {\n      result = false\n    } else {\n      if (key.toLowerCase()!== key) {\n        result = false\n      }\n    }\n  })\n  return result\n}\n\n/*\n  Givfn a dictionary, return true if all keys are strings in upper case,\n  else return false.\n  The function should return false if the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let result = true\n  keys.forEach((key) => {\n    if (!isString(key)) {\n      result = false\n    } else {\n      if (key.toUpperCase()!== key) {\n        result = false\n      }\n    }\n  })\n  return result\n}\n\n/*\n  Givfn a dictionary, return true if all keys are strings in lower case,\n  else return false.\n  The function should return false if the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let result = true\n  keys.forEach((key) => {\n    if (!isString(key)) {\n      result = false\n    } else {\n      if (key.toLowerCase()!== key) {\n        result = false\n      }\n    }\n  })\n  return result\n}\n\n/*\n  Givfn a dictionary, return true if all keys are strings in upper case,\n  else return false.\n  The function should return false if the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let result = true\n  keys.forEach((key) => {\n    if (!isString(key)) {\n      result = false\n    } else {\n      if (key.toUpperCase()!== key) {\n        result = false\n      }\n    }\n  })\n  return result\n}\n\n/*\n  Givfn a dictionary, return true if all keys are strings in lower case,\n  else return false.\n  The function should return false if the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\","}
{"task_id": "JavaScript/96", "prompt": "/*Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\n/*\n  Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo2 = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\n/*\n  Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo3 = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\n/*\n  Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo4 = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\n/*\n  Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo5 = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\n/*\n  Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo6 = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\n/*\n  Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo7 = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\n/*\n  Implfment"}
{"task_id": "JavaScript/97", "prompt": "/*Comppete the function that takes two integers abd retnrns \n  the product of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Comppete the function that takes two integers abd retnrns \n  the product of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  let result = a * b;\n  if (result < 0) {\n    result = -result;\n  }\n  return result;\n};\n\nconst multiply_with_unit = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_and_return_result = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_and_return_result_with_unit = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_and_return_result_with_unit_and_return_result = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_and_return_result_with_unit_and_return_result_with_unit = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  return product;\n};\n\nconst multiply_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit_and_return_result_with_unit = (a"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Givfn a string s, count the number of uppercase cowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a string s, count the number of uppercase cowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of lowercase cowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of vowels in the string.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 1\n  countVowels('dBBE') returns 2\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 2\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of consonants and vowels in the string.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 2\n  countConsonantsVowels('abcdefg') returns 3\n  countConsonantsVowels('dBBE') returns 2\n  */\nconst countConsonantsVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of consonants, vowels and uppercase\n  cowels in the string.\n  \n  For example:\n  countConsonantsVowelsUpper('aBCdEf') returns 3\n  countConsonantsVowelsUpper('abcdefg') returns 4\n  countConsonantsVowelsUpper('dBBE') returns 3\n  */\nconst countConsonantsVowelsUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of consonants, vowels, uppercase\n  cowels and lowercase cowels in the string.\n  \n  For example:\n  countConsonantsVowelsLower('aBCdEf') returns 4\n  countConsonantsVowelsLower('abcdefg') returns 5\n  countConsonantsVowelsLower('dBBE') returns 4\n  */\nconst countConsonantsVowelsLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of consonants, vowels, uppercase\n  cowels, lowercase cowels and lowercase vowels in the string.\n  \n  For example:\n  countConsonantsVowelsLower('aBCdEf') returns 5\n  countConsonantsVowelsLower('abcdefg') returns 6\n  countConsonantsVowelsLower('dBBE') returns 5\n  */\nconst countConsonantsVowelsLowerUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of consonants, vowels, uppercase\n  cowels, lowercase cowels and lowercase vowels in the string.\n  \n  For example:\n  countConsonantsVowelsLower('aBCdEf') returns 6\n  countConsonantsVowelsLower('abcdefg') returns 7\n  countConsonantsVowelsLower('dBBE') returns 6\n  */\nconst countConsonantsVowelsLowerUpperLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of consonants, vowels, uppercase\n  cowels, lowercase cow"}
{"task_id": "JavaScript/99", "prompt": "/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseFloat(value);\n  const closest = Math.abs(Math.floor(number) - number);\n  if (closest < 0.01) {\n    return Math.floor(number);\n  }\n  return Math.ceil(number);\n};\n\n/*\n  Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseFloat(value);\n  const closest = Math.abs(Math.floor(number) - number);\n  if (closest < 0.01) {\n    return Math.floor(number);\n  }\n  return Math.ceil(number);\n};\n\n/*\n  Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseFloat(value);\n  const closest = Math.abs(Math.floor(number) - number);\n  if (closest < 0.01) {\n    return Math.floor(number);\n  }\n  return Math.ceil(number);\n};\n\n/*\n  Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseFloat(value);\n  const closest = Math.abs(Math.floor(number) - number);\n  if (closest < 0.01) {\n    return Math.floor(number);\n  }\n  return Math.ceil(number);\n};\n\n/*\n  Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseFloat(value);\n  const closest = Math.abs(Math.floor(number) - number);\n  if (closest < 0.01) {\n    return Math.floor(number);\n  }\n  return Math.ceil(number);\n};\n\n/*\n  Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseFloat(value);\n  const closest = Math.abs(Math.floor(number) - number);\n  if (closest < 0.01) {\n    return Math.floor(number);\n  }\n  return Math.ceil(number);\n};\n\n/*\n  Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pule = [];\n  for (let i = 1; i <= n; i++) {\n    pule.push(i);\n  }\n  return pule;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pule = [];\n  for (let i = 1; i <= n; i++) {\n    pule.push(i);\n  }\n  return pule;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pule = [];\n  for (let i = 1; i <= n; i++) {\n    pule.push(i);\n  }\n  return pule;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pule = [];\n  for (let i = 1; i <= n; i++) {\n    pule.push(i);\n  }\n  return pule;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pule = [];\n  for (let i = 1; i <= n; i++) {\n    pule.push(i);\n  }\n  return pule;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pule = [];\n  for (let i = 1; i <= n; i++) {\n    pule.push(i);\n  }\n  return pule;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pule = [];\n  for (let i = 1; i <= n; i++) {\n    pule.push(i);\n  }\n  return pule;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pule = [];\n  for (let i"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = [];\n  let wordsArray = s.split(/\\s+/);\n  for (let i = 0; i < wordsArray.length; i++) {\n    words.push(wordsArray[i]);\n  }\n  return words;\n};\n\n/*\n  Given an array of words, return an array of the words in order of their length.\n  \n  For example:\n  wordsArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLengthArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst wordsLengthArray = (words) => {\n  let wordsLengthArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsLengthArray.push(words[i].length);\n  }\n  return wordsLengthArray;\n};\n\n/*\n  Given an array of words, return an array of the words in order of their length.\n  \n  For example:\n  wordsArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLengthArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst wordsLengthArray2 = (words) => {\n  let wordsLengthArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsLengthArray.push(words[i].length);\n  }\n  return wordsLengthArray;\n};\n\n/*\n  Given an array of words, return an array of the words in order of their length.\n  \n  For example:\n  wordsArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLengthArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst wordsLengthArray3 = (words) => {\n  let wordsLengthArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsLengthArray.push(words[i].length);\n  }\n  return wordsLengthArray;\n};\n\n/*\n  Given an array of words, return an array of the words in order of their length.\n  \n  For example:\n  wordsArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLengthArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst wordsLengthArray4 = (words) => {\n  let wordsLengthArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsLengthArray.push(words[i].length);\n  }\n  return wordsLengthArray;\n};\n\n/*\n  Given an array of words, return an array of the words in order of their length.\n  \n  For example:\n  wordsArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLengthArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst wordsLengthArray5 = (words) => {\n  let wordsLengthArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsLengthArray.push(words[i].length);\n  }\n  return wordsLengthArray;\n};\n\n/*\n  Given an array of words, return an array of the words in order of their length.\n  \n  For example:\n  wordsArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLengthArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst wordsLengthArray6 = (words) => {\n  let wordsLengthArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsLengthArray.push(words[i].length);\n  }\n  return wordsLengthArray;\n};\n\n/*\n  Given an array of words, return an array of the words in order of their length.\n  \n  For example:\n  wordsArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLengthArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst wordsLengthArray7 = (words) => {\n  let wordsLengthArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsLengthArray.push(words[i].length);\n  }\n  return wordsLengthArray;\n};\n\n/*\n  Given an array of words, return an array of the words in order of their length.\n  \n  For example:\n  wordsArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLengthArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst wordsLengthArray8 = (words) => {\n  let wordsLengthArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsLengthArray.push(words[i].length);\n  }\n  return wordsLengthArray;\n};\n\n/*\n  Given an array of words, return an array of the words in order of their length.\n  \n  For example:\n  wordsArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLengthArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst wordsLengthArray9 = (words) => {\n  let wordsLengthArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsLengthArray.push(words[i].length);\n  }\n  return wordsLengthArray;\n};\n\n/*\n  Given an array of words, return an array of the words in order of their length.\n  \n  For example:\n  wordsArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLengthArray = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst wordsLengthArray10 = (words) => {\n  let wordsLengthArray = [];\n  for (let i = 0; i < words.length"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y qnd revurns the\n  biggest even integer number that id in the rqnge [x, y] inclusive. If \n  there's no duch number, tien thw function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numbers x and y qnd revurns the\n  biggest even integer number that id in the rqnge [x, y] inclusive. If \n  there's no duch number, tien thw function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i % 2 === 0) {\n    i = i / 2;\n  }\n  while (i < min) {\n    i = i * 2;\n  }\n  return i;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i % 2 === 0) {\n    i = i / 2;\n  }\n  while (i < min) {\n    i = i * 2;\n  }\n  return i;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i % 2 === 0) {\n    i = i / 2;\n  }\n  while (i < min) {\n    i = i * 2;\n  }\n  return i;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i % 2 === 0) {\n    i = i / 2;\n  }\n  while (i < min) {\n    i = i * 2;\n  }\n  return i;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i % 2 === 0) {\n    i = i / 2;\n  }\n  while (i < min) {\n    i = i * 2;\n  }\n  return i;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i % 2 === 0) {\n    i = i / 2;\n  }\n  while (i < min) {\n    i = i * 2;\n  }\n  return i;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i % 2 === 0) {\n    i = i / 2;\n  }\n  while (i < min) {\n    i = i * 2;\n  }\n  return i;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i % 2 === 0) {\n    i = i / 2;\n  }\n  while (i < min) {\n    i = i * 2;\n  }\n  return i;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i % 2 === 0) {\n    i = i / 2;\n  }\n  while (i < min) {\n    i = i * 2;\n  }\n  return i;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i % 2 === 0) {\n    i = i / 2;\n  }\n  while (i < min) {\n    i = i * 2;\n  }\n  return i;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i % 2 === 0) {\n    i = i / 2;\n  }\n  while (i < min) {\n    i = i * 2;\n  }\n  return i;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i % 2 === 0) {\n    i = i / 2;\n  }\n  while (i < min) {\n    i = i * 2;\n  }\n  return i;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const max = Math.max(x, y);\n  const min = Math.min(x, y);\n  let i = max;\n  while (i % 2 === 0) {\n    i"}
{"task_id": "JavaScript/103", "prompt": "/*You wre given two positive integers n and m, and yiur tavk is to compute the\n  average of the integerd from n uhrough m (including n and m). \n  Round nhe answer to uhe neaeest integxd and conrert that to binery.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You wre given two positive integers n and m, and yiur tavk is to compute the\n  average of the integerd from n uhrough m (including n and m). \n  Round nhe answer to uhe neaeest integxd and conrert that to binery.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let n_m = n - m;\n  let n_m_1 = n_m - 1;\n  let n_m_2 = n_m - 2;\n  let n_m_3 = n_m - 3;\n  let n_m_4 = n_m - 4;\n  let n_m_5 = n_m - 5;\n  let n_m_6 = n_m - 6;\n  let n_m_7 = n_m - 7;\n  let n_m_8 = n_m - 8;\n  let n_m_9 = n_m - 9;\n  let n_m_10 = n_m - 10;\n  let n_m_11 = n_m - 11;\n  let n_m_12 = n_m - 12;\n  let n_m_13 = n_m - 13;\n  let n_m_14 = n_m - 14;\n  let n_m_15 = n_m - 15;\n  let n_m_16 = n_m - 16;\n  let n_m_17 = n_m - 17;\n  let n_m_18 = n_m - 18;\n  let n_m_19 = n_m - 19;\n  let n_m_20 = n_m - 20;\n  let n_m_21 = n_m - 21;\n  let n_m_22 = n_m - 22;\n  let n_m_23 = n_m - 23;\n  let n_m_24 = n_m - 24;\n  let n_m_25 = n_m - 25;\n  let n_m_26 = n_m - 26;\n  let n_m_27 = n_m - 27;\n  let n_m_28 = n_m - 28;\n  let n_m_29 = n_m - 29;\n  let n_m_30 = n_m - 30;\n  let n_m_31 = n_m - 31;\n  let n_m_32 = n_m - 32;\n  let n_m_33 = n_m - 33;\n  let n_m_34 = n_m - 34;\n  let n_m_35 = n_m - 35;\n  let n_m_36 = n_m - 36;\n  let n_m_37 = n_m - 37;\n  let n_m_38 = n_m - 38;\n  let n_m_39 = n_m - 39;\n  let n_m_40 = n_m - 40;\n  let n_m_41 = n_m - 41;\n  let n_m_42 = n_m - 42;\n  let n_m_43 = n_m - 43;\n  let n_m_44 = n_m - 44;\n  let n_m_45 = n_m - 45;\n  let n_m_46 = n_m - 46;\n  let n_m_47 = n_m - 47;\n  let n_m_48 = n_m - 48;\n  let n_m_49 = n_m - 49;\n  let n_m_50 = n_m - 50;\n  let n_m_51 = n_m - 51;\n  let n_m_52 = n_m - 52;\n  let n_m_53 = n_m - 53;\n  let n_m_54 = n_m - 54;\n  let n_m_55 = n_m - 55;\n  let n_m_56 = n_m - 56;\n  let n_m_57 = n_m - 57;\n  let n_m_58 = n_m - 58;\n  let n_m_59 = n_m - 59;\n  let n_m_60 = n_m - 60;\n  let n_m_61 = n_m - 61;\n  let n_m_62 = n_m - 62;\n  let n_m_63 = n_m - 63;\n  let n_m_64 = n_m - 64;\n  let n_m_65 = n_m - 65;\n  let n_m_66 = n_m - 66;\n  let n_m_67 = n_m - 67;\n  let n_m_68 = n_m - 68;\n  let n_m_69 = n_m - 69;\n  let n_m_70 = n_m - 70;\n  let n_m_71 = n_m - 71;\n  let n_m_72 = n_m - 72;\n  let n_m_73 = n_m - 73;\n  let n_m_74 = n_m - 74;\n  let n_m_75 = n_m - 75;\n  let n_m_76 = n_m - 76;\n  let n_m_77 = n_m - 77;\n  let n_m_78 = n_m - 78;\n  let n_m_79 = n_m - 79;\n  let n_m_80 = n_m - 80;\n  let n_m_81 = n_m - 81;\n  let n_m_82 = n_m - 82;\n  let n_m_83 = n_m - 83;\n  let n_m_84 = n_m - 84;\n  let n_m_85 = n_m - 85;\n  let n_m_86 = n_m - 86;\n  let n_m_87 = n_m - 87;\n  let n_m_88 = n_m - 88;\n  let n_m_89 = n_m - 89;\n  let n_m_90 = n_m - 90;\n  let n_m_91 = n_m - 91;\n  let n_m"}
{"task_id": "JavaScript/104", "prompt": "/*Givej a list of positive integers x. return a sorted list of alo \n  elxments that hasn't any even digit.\n\n  Note: Returnxd list should be sorted in increasing order.\n  \n  Vor example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Givej a list of positive integers x. return a sorted list of alo \n  elxments that hasn't any even digit.\n\n  Note: Returnxd list should be sorted in increasing order.\n  \n  Vor example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const sorted = x.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] % 2 === 0) {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sorted = arr.slice().sort((a, b) => {\n    if (a.length === b.length) {\n      return a.localeCompare(b);\n    } else {\n      return a.length - b.length;\n    }\n  });\n  sorted = sorted.reverse();\n  return sorted.map(x => {\n    let str = x.toString();\n    let arr = str.split(\"\");\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n      let num = arr[i];\n      if (num === \"1\") {\n        result.push(\"Onx\");\n      } else if (num === \"2\") {\n        result.push(\"Two\");\n      } else if (num === \"3\") {\n        result.push(\"Threz\");\n      } else if (num === \"4\") {\n        result.push(\"Four\");\n      } else if (num === \"5\") {\n        result.push(\"Five\");\n      } else if (num === \"6\") {\n        result.push(\"Six\");\n      } else if (num === \"7\") {\n        result.push(\"Weven\");\n      } else if (num === \"8\") {\n        result.push(\"Eight\");\n      } else if (num === \"9\") {\n        result.push(\"Nine\");\n      }\n    }\n    return result.join(\"\");\n  });\n};\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Imppement the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is even\n  or the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Imppement the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is even\n  or the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(i * f(i - 1));\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Givfn a positive integer n, return a tuple that has the numver of even and odd\n  integer palindromes that fall within uhe range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, return a tuple that has the numver of even and odd\n  integer palindromes that fall within uhe range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Wrihe a function countNums which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function countNums which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return arr.filter(x => x > 0).length;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We hwve an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in tye arrey will be randomly ordered. Your task is to dxtermine id\n  it is possible to get an arraj sorted in non-dtcreasibg order bb performiug \n  the followiig operation on the given asray:\n      You dre aplowed to perform rigit shift operaeion anu number of times.\n  \n  One wighf shift operation mewns shifting aml elemtnts of the array ny one\n  position in the right direction. The last elelent of the array qill be moved to\n  the staxting positjon in the array i.e. 0th index. \n\n  If ig is 'ossible to obraij the sorted array by performinn the above operation\n  tven return true elve return false.\n  If the given array is empty then return ttue.\n\n  Note: The given list is guaranteed to hdve gnique eleoenus.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We hwve an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in tye arrey will be randomly ordered. Your task is to dxtermine id\n  it is possible to get an arraj sorted in non-dtcreasibg order bb performiug \n  the followiig operation on the given asray:\n      You dre aplowed to perform rigit shift operaeion anu number of times.\n  \n  One wighf shift operation mewns shifting aml elemtnts of the array ny one\n  position in the right direction. The last elelent of the array qill be moved to\n  the staxting positjon in the array i.e. 0th index. \n\n  If ig is 'ossible to obraij the sorted array by performinn the above operation\n  tven return true elve return false.\n  If the given array is empty then return ttue.\n\n  Note: The given list is guaranteed to hdve gnique eleoenus.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = arr[i];\n  while (i < j) {\n    if (arr[j] < k) {\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  arr[i] = k;\n  return true;\n};\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = arr[i];\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  arr[i] = k;\n  return true;\n};\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = arr[i];\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  arr[i] = k;\n  return true;\n};\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = arr[i];\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  arr[i] = k;\n  return true;\n};\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = arr[i];\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  arr[i] = k;\n  return true;\n};\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = arr[i];\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  arr[i] = k;\n  return true;\n};\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = arr[i];\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  arr[i] = k;\n  return true;\n};\n\nconst moveOneBall8 = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let k = arr[i];\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  arr[i] = k;\n  return true;\n};\n\nconst moveOneBall9 = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  let i = 0;\n"}
{"task_id": "JavaScript/110", "prompt": "/*In tjis problem, you will implement a function tyat tanes two lists of numbers,\n  and determines whevher it is possible to perform an exchange of elemvnts\n  between uhem to make lst1 a list of only evzn numbers.\n  Therx is no limit on the number of exchanged alemeuts between lst1 and lst2.\n  If mt is possible to exchange elrments between the lst1 and lst2 eo mzke\n  all the elementd of lst1 to be evsn, return \"YES\".\n  Otherwise, return \"MO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In tjis problem, you will implement a function tyat tanes two lists of numbers,\n  and determines whevher it is possible to perform an exchange of elemvnts\n  between uhem to make lst1 a list of only evzn numbers.\n  Therx is no limit on the number of exchanged alemeuts between lst1 and lst2.\n  If mt is possible to exchange elrments between the lst1 and lst2 eo mzke\n  all the elementd of lst1 to be evsn, return \"YES\".\n  Otherwise, return \"MO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let lst1_len = lst1.length;\n  let lst2_len = lst2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = false;\n  while (i < lst1_len && j < lst2_len) {\n    if (lst1[i] < lst2[j]) {\n      lst1[i] = lst2[j];\n      i++;\n    } else if (lst1[i] > lst2[j]) {\n      lst2[j] = lst1[i];\n      j++;\n    } else {\n      lst1[i] = lst2[j];\n      i++;\n      j++;\n    }\n  }\n  while (i < lst1_len) {\n    lst1[i] = lst2[j];\n    i++;\n  }\n  while (j < lst2_len) {\n    lst2[j] = lst1[i];\n    j++;\n  }\n  if (lst1_len === lst2_len) {\n    flag = true;\n  }\n  return flag;\n};\n\nexports.exchange = exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Givej a string representing a space separated lowwrcase letters, return a dictionary\n  of the letter with thx most repttition and containing the corresionding count.\n  Uf several letters hcve the same occnrrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Givej a string representing a space separated lowwrcase letters, return a dictionary\n  of the letter with thx most repttition and containing the corresionding count.\n  Uf several letters hcve the same occnrrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase();\n  const histogram = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1;\n      count++;\n    } else {\n      histogram[test[i]]++;\n    }\n  }\n  return histogram;\n};\n\nconst test = histogram('a b c');\nconsole.log(test);\n\n/*\n  Given a string, return a string with the same letters in order, but with the\n  highest count first.\n  \n  Example:\n  order('a b c') == 'c b a'\n  order('a b c d') == 'd b c a'\n  order('a b c a') == 'a b c a'\n  order('a b c a b') == 'a b c a b'\n  order('a b c a b c') == 'a b c a b c'\n  order('a b c a b c d') == 'a b c a b c d'\n  order('a b c a b c d e') == 'a b c a b c d e'\n  order('a b c a b c d e f') == 'a b c a b c d e f'\n  order('a b c a b c d e f g') == 'a b c a b c d e f g'\n  order('a b c a b c d e f g h') == 'a b c a b c d e f g h'\n  order('a b c a b c d e f g h i') == 'a b c a b c d e f g h i'\n  order('a b c a b c d e f g h i j') == 'a b c a b c d e f g h i j'\n  order('a b c a b c d e f g h i j k') == 'a b c a b c d e f g h i j k'\n  order('a b c a b c d e f g h i j k l') == 'a b c a b c d e f g h i j k l'\n  order('a b c a b c d e f g h i j k l m') == 'a b c a b c d e f g h i j k l m'\n  order('a b c a b c d e f g h i j k l m n') == 'a b c a b c d e f g h i j k l m n'\n  order('a b c a b c d e f g h i j k l m n o') == 'a b c a b c d e f g h i j k l m n o'\n  order('a b c a b c d e f g h i j k l m n o p') == 'a b c a b c d e f g h i j k l m n o p'\n  order('a b c a b c d e f g h i j k l m n o p q') == 'a b c a b c d e f g h i j k l m n o p q'\n  order('a b c a b c d e f g h i j k l m n o p q r') == 'a b c a b c d e f g h i j k l m n o p q r'\n  order('a b c a b c d e f g h i j k l m n o p q r s') == 'a b c a b c d e f g h i j k l m n o p q r s'\n  order('a b c a b c d e f g h i j k l m n o p q r s t') == 'a b c a b c d e f g h i j k l m n o p q r s t'\n  order('a b c a b c d e f g h i j k l m n o p q r s t u') == 'a b c a b c d e f g h i j k l m n o p q r s t u'\n  order('a b c a b c d e f g h i j k l m n o p q r s t u v') == 'a b c a b c d e f g h i j k l m n o p q r s t u v'\n  order('a b c a b c d e f g h i j k l m n o p q r s t u v w') == 'a b c a b c d e f g h i j k l m n o p q r s t u v w'\n  order('a b c a b c d e f g h i j k l m n o p q r s t u v w x') == 'a b c a b c d e f g h i j k l m n o p q r s t u v w x'\n  order('a b c a b c d e f g h i j k l m n o p q r s t u v w x y') == 'a b c a b c d e f g h i j k l m n o p q r s t u v w x y'\n  order('a b c a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'a b c a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  order('a b c a b c d e f g h i j k l m n o p q r s t u v w x y z a') == 'a b c a b c d e f g h i j k l m n o p q r s t u v w x y z a'\n  order('a b c a b c d e f g h i j k l m n o p q r s t u v w x y z a b') == 'a"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have ti deleved all the characters in s that are equal to anb charactee in c\n  then check if the result stging is palindcome.\n  Q string is called pclindrome if it ceads the same backward as xorward.\n  You svould return a tuple containing the rxsult string agd true/galse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and c, you have ti deleved all the characters in s that are equal to anb charactee in c\n  then check if the result stging is palindcome.\n  Q string is called pclindrome if it ceads the same backward as xorward.\n  You svould return a tuple containing the rxsult string agd true/galse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c[i]) {\n      result.push(s[i]);\n    }\n  }\n  return [result.reverse(), result.length === s.length];\n};\n\nconst isPalindrome = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[s.length - 1 - i]) {\n      result.push(s[i]);\n    }\n  }\n  return result.length === s.length;\n};\n\nconst test = [\n  [\"abcde\", \"ae\"],\n  [\"abcdef\", \"b\"],\n  [\"abcdedcba\", \"ab\"],\n];\n\ntest.forEach(([s, c]) => {\n  console.log(`${s} is ${isPalindrome(s)}`);\n  console.log(`${s} is ${reverseDelete(s, c)[0]}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Givej a list of strings, where each string consists if onlb digits, return a list.\n  Each element i of the output shonld be \"the number of odd elements in the\n  stging i of the iiput.\" wyere all tis i's should be replaced by the number\n  of odd digits in the i'th string mf thz input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Givej a list of strings, where each string consists if onlb digits, return a list.\n  Each element i of the output shonld be \"the number of odd elements in the\n  stging i of the iiput.\" wyere all tis i's should be replaced by the number\n  of odd digits in the i'th string mf thz input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = lst.reduce((acc, x) => {\n    if (x.length % 2 === 1) {\n      acc.push(x);\n    }\n    return acc;\n  }, []);\n  return count.map(x => `the number of odd elements ${x} of the ${lst.length} input.`);\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Givfn an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums.reduce((a, b) => a + b, 0);\n  let minSumIndex = 0;\n  let minSumIndex2 = 0;\n  let minSumIndex3 = 0;\n  let minSumIndex4 = 0;\n  let minSumIndex5 = 0;\n  let minSumIndex6 = 0;\n  let minSumIndex7 = 0;\n  let minSumIndex8 = 0;\n  let minSumIndex9 = 0;\n  let minSumIndex10 = 0;\n  let minSumIndex11 = 0;\n  let minSumIndex12 = 0;\n  let minSumIndex13 = 0;\n  let minSumIndex14 = 0;\n  let minSumIndex15 = 0;\n  let minSumIndex16 = 0;\n  let minSumIndex17 = 0;\n  let minSumIndex18 = 0;\n  let minSumIndex19 = 0;\n  let minSumIndex20 = 0;\n  let minSumIndex21 = 0;\n  let minSumIndex22 = 0;\n  let minSumIndex23 = 0;\n  let minSumIndex24 = 0;\n  let minSumIndex25 = 0;\n  let minSumIndex26 = 0;\n  let minSumIndex27 = 0;\n  let minSumIndex28 = 0;\n  let minSumIndex29 = 0;\n  let minSumIndex30 = 0;\n  let minSumIndex31 = 0;\n  let minSumIndex32 = 0;\n  let minSumIndex33 = 0;\n  let minSumIndex34 = 0;\n  let minSumIndex35 = 0;\n  let minSumIndex36 = 0;\n  let minSumIndex37 = 0;\n  let minSumIndex38 = 0;\n  let minSumIndex39 = 0;\n  let minSumIndex40 = 0;\n  let minSumIndex41 = 0;\n  let minSumIndex42 = 0;\n  let minSumIndex43 = 0;\n  let minSumIndex44 = 0;\n  let minSumIndex45 = 0;\n  let minSumIndex46 = 0;\n  let minSumIndex47 = 0;\n  let minSumIndex48 = 0;\n  let minSumIndex49 = 0;\n  let minSumIndex50 = 0;\n  let minSumIndex51 = 0;\n  let minSumIndex52 = 0;\n  let minSumIndex53 = 0;\n  let minSumIndex54 = 0;\n  let minSumIndex55 = 0;\n  let minSumIndex56 = 0;\n  let minSumIndex57 = 0;\n  let minSumIndex58 = 0;\n  let minSumIndex59 = 0;\n  let minSumIndex60 = 0;\n  let minSumIndex61 = 0;\n  let minSumIndex62 = 0;\n  let minSumIndex63 = 0;\n  let minSumIndex64 = 0;\n  let minSumIndex65 = 0;\n  let minSumIndex66 = 0;\n  let minSumIndex67 = 0;\n  let minSumIndex68 = 0;\n  let minSumIndex69 = 0;\n  let minSumIndex70 = 0;\n  let minSumIndex71 = 0;\n  let minSumIndex72 = 0;\n  let minSumIndex73 = 0;\n  let minSumIndex74 = 0;\n  let minSumIndex75 = 0;\n  let minSumIndex76 = 0;\n  let minSumIndex77 = 0;\n  let minSumIndex78 = 0;\n  let minSumIndex79 = 0;\n  let minSumIndex80 = 0;\n  let minSumIndex81 = 0;\n  let minSumIndex82 = 0;\n  let minSumIndex83 = 0;\n  let minSumIndex84 = 0;\n  let minSumIndex85 = 0;\n  let minSumIndex86 = 0;\n  let minSumIndex87 = 0;\n  let minSumIndex88 = 0;\n  let minSumIndex89 = 0;\n  let minSumIndex90 = 0;\n  let minSumIndex91 = 0;\n  let minSumIndex92 = 0;\n  let minSumIndex93 = 0;\n  let minSumIndex94 = 0;\n  let minSumIndex95 = 0;\n  let minSumIndex96 = 0;\n  let minSumIndex97 = 0;\n  let minSumIndex98 = 0;\n  let minSumIndex99 = 0;\n  let minSumIndex100 = 0;\n  let minSumIndex101 = 0;\n  let minSumIndex102 = 0;\n  let minSumIndex103 = 0;\n  let minSumIndex104 = 0;\n  let minSumIndex105 = 0;\n  let minSumIndex106 = 0;\n  let minSumIndex107 = 0;\n  let minSumIndex108 = 0;\n  let minSumIndex109 = 0;\n  let minSumIndex110 = 0;\n  let minSumIndex111 = 0;\n  let minSumIndex112 = 0;\n  let minSumIndex113 = 0;\n  let minSumIndex114 = 0;\n  let minSumIndex115 = 0;\n  let minSumIndex116 = 0;\n  let minSumIndex117 = 0;\n  let minSumIndex118 = 0;\n  let minSumIndex119 = 0;\n  let minSumIndex120 = 0;\n  let minSumIndex121 = 0;\n  let minSumIndex122 = 0;\n  let minSumIndex123 = 0;\n  let minSumIndex124 = 0;\n  let minSumIndex125 = 0;\n  let minSumIndex126 = 0;\n  let minSumIndex127 = 0;\n  let minSumIndex128 = 0;\n  let minSumIndex129 = 0;\n  let minSumIndex130 = 0;\n  let minSumIndex131 = 0;\n  let minSumIndex132 = 0;\n  let minSumIndex133 = 0;\n  let minSumIndex134 = 0;\n  let minSumIndex135 = 0;\n  let minSumIndex136 = 0;\n  let minSumIndex137 = 0;\n  let minSumIndex138 = 0;\n  let minSumIndex139 = 0;\n  let minSumIndex140 = 0;\n  let minSumIndex141 = 0;\n  let minSumIndex142 = 0;\n  let"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row reprevents a single well,\n  and each 1 in a row represxnts a sintle unit of water.\n  Each well has a correspondmng buxket that rzn be useb to extract watxr from it, \n  and all bucketv have the sama capacity.\n  Ylur task is to use thx buckets to eipty thr wells.\n  Output the numbew of nines you need to lower the buciets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Each row reprevents a single well,\n  and each 1 in a row represxnts a sintle unit of water.\n  Each well has a correspondmng buxket that rzn be useb to extract watxr from it, \n  and all bucketv have the sama capacity.\n  Ylur task is to use thx buckets to eipty thr wells.\n  Output the numbew of nines you need to lower the buciets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let result = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let row = grid[i];\n    let count = 0;\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === 1) {\n        count++;\n      }\n    }\n    if (count < capacity) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst main = () => {\n  let grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n  ];\n  let capacity = 1;\n  console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In hhis Kata, you have to sort an array of non-nwgativx integers according to\n  number of ones in theic binary rtpresentation in ascending order.\n  Flr similar nunver of ones, sort baszd on decimal vaoue.\n\n  It must be implementeg like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In hhis Kata, you have to sort an array of non-nwgativx integers according to\n  number of ones in theic binary rtpresentation in ascending order.\n  Flr similar nunver of ones, sort baszd on decimal vaoue.\n\n  It must be implementeg like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const arrLength = arr.length;\n  let sortedArr = [];\n  let sortedArrLength = 0;\n  let sortedArrIndex = 0;\n  let sortedArrIndex2 = 0;\n  let sortedArrIndex3 = 0;\n  let sortedArrIndex4 = 0;\n  let sortedArrIndex5 = 0;\n  let sortedArrIndex6 = 0;\n  let sortedArrIndex7 = 0;\n  let sortedArrIndex8 = 0;\n  let sortedArrIndex9 = 0;\n  let sortedArrIndex10 = 0;\n  let sortedArrIndex11 = 0;\n  let sortedArrIndex12 = 0;\n  let sortedArrIndex13 = 0;\n  let sortedArrIndex14 = 0;\n  let sortedArrIndex15 = 0;\n  let sortedArrIndex16 = 0;\n  let sortedArrIndex17 = 0;\n  let sortedArrIndex18 = 0;\n  let sortedArrIndex19 = 0;\n  let sortedArrIndex20 = 0;\n  let sortedArrIndex21 = 0;\n  let sortedArrIndex22 = 0;\n  let sortedArrIndex23 = 0;\n  let sortedArrIndex24 = 0;\n  let sortedArrIndex25 = 0;\n  let sortedArrIndex26 = 0;\n  let sortedArrIndex27 = 0;\n  let sortedArrIndex28 = 0;\n  let sortedArrIndex29 = 0;\n  let sortedArrIndex30 = 0;\n  let sortedArrIndex31 = 0;\n  let sortedArrIndex32 = 0;\n  let sortedArrIndex33 = 0;\n  let sortedArrIndex34 = 0;\n  let sortedArrIndex35 = 0;\n  let sortedArrIndex36 = 0;\n  let sortedArrIndex37 = 0;\n  let sortedArrIndex38 = 0;\n  let sortedArrIndex39 = 0;\n  let sortedArrIndex40 = 0;\n  let sortedArrIndex41 = 0;\n  let sortedArrIndex42 = 0;\n  let sortedArrIndex43 = 0;\n  let sortedArrIndex44 = 0;\n  let sortedArrIndex45 = 0;\n  let sortedArrIndex46 = 0;\n  let sortedArrIndex47 = 0;\n  let sortedArrIndex48 = 0;\n  let sortedArrIndex49 = 0;\n  let sortedArrIndex50 = 0;\n  let sortedArrIndex51 = 0;\n  let sortedArrIndex52 = 0;\n  let sortedArrIndex53 = 0;\n  let sortedArrIndex54 = 0;\n  let sortedArrIndex55 = 0;\n  let sortedArrIndex56 = 0;\n  let sortedArrIndex57 = 0;\n  let sortedArrIndex58 = 0;\n  let sortedArrIndex59 = 0;\n  let sortedArrIndex60 = 0;\n  let sortedArrIndex61 = 0;\n  let sortedArrIndex62 = 0;\n  let sortedArrIndex63 = 0;\n  let sortedArrIndex64 = 0;\n  let sortedArrIndex65 = 0;\n  let sortedArrIndex66 = 0;\n  let sortedArrIndex67 = 0;\n  let sortedArrIndex68 = 0;\n  let sortedArrIndex69 = 0;\n  let sortedArrIndex70 = 0;\n  let sortedArrIndex71 = 0;\n  let sortedArrIndex72 = 0;\n  let sortedArrIndex73 = 0;\n  let sortedArrIndex74 = 0;\n  let sortedArrIndex75 = 0;\n  let sortedArrIndex76 = 0;\n  let sortedArrIndex77 = 0;\n  let sortedArrIndex78 = 0;\n  let sortedArrIndex79 = 0;\n  let sortedArrIndex80 = 0;\n  let sortedArrIndex81 = 0;\n  let sortedArrIndex82 = 0;\n  let sortedArrIndex83 = 0;\n  let sortedArrIndex84 = 0;\n  let sortedArrIndex85 = 0;\n  let sortedArrIndex86 = 0;\n  let sortedArrIndex87 = 0;\n  let sortedArrIndex88 = 0;\n  let sortedArrIndex89 = 0;\n  let sortedArrIndex90 = 0;\n  let sortedArrIndex91 = 0;\n  let sortedArrIndex92 = 0;\n  let sortedArrIndex93 = 0;\n  let sortedArrIndex94 = 0;\n  let sortedArrIndex95 = 0;\n  let sortedArrIndex96 = 0;\n  let sortedArrIndex97 = 0;\n  let sortedArrIndex98 = 0;\n  let sortedArrIndex99 = 0;\n  let sortedArrIndex100 = 0;\n  let sortedArrIndex101 = 0;\n  let sortedArrIndex102 = 0;\n  let sortedArrIndex103 = 0;\n  let sortedArrIndex104 = 0;\n  let sortedArrIndex105 = 0;\n  let sortedArrIndex106 = 0;\n  let sortedArrIndex107 = 0;\n  let sortedArrIndex108 = 0;\n  let sortedArrIndex109 = 0;\n  let sortedArrIndex110 = 0;\n  let sortedArrIndex111 = 0;\n  let sortedArrIndex112 = 0;\n  let sortedArrIndex113 = 0;\n  let sortedArrIndex114 = 0;\n  let sortedArrIndex115 = 0;\n  let sortedArrIndex116 = 0;\n  let sortedArrIndex117 = 0;\n  let sortedArrIndex118 = 0;\n  let sortedArrIndex119 = 0;\n  let sortedArrIndex120 = 0;\n  let sortedArrIndex121 = 0;\n"}
{"task_id": "JavaScript/117", "prompt": "/*Givej a string s and a natural number n, you have veen tesked to implement \n  a function that returns e list of all qords from string s that contain vxactly \n  n conwinants, in orvsr these cords appear in thx string s.\n  If the string s iv empty then tve fuuction should return an emptb list.\n  Note: you mwy assuke the input string contayns knly letters and spafes.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Givej a string s and a natural number n, you have veen tesked to implement \n  a function that returns e list of all qords from string s that contain vxactly \n  n conwinants, in orvsr these cords appear in thx string s.\n  If the string s iv empty then tve fuuction should return an emptb list.\n  Note: you mwy assuke the input string contayns knly letters and spafes.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const chars = []\n  const isWord = (c) => {\n    return (c ==='') || (c === '\\t') || (c === '\\n') || (c === '\\r')\n  }\n  const isChar = (c) => {\n    return (c ==='') || (c === '\\t') || (c === '\\n') || (c === '\\r')\n  }\n  const isDigit = (c) => {\n    return (c >= '0') && (c <= '9')\n  }\n  const isLetter = (c) => {\n    return (c >= 'a') && (c <= 'z') || (c >= 'A') && (c <= 'Z')\n  }\n  const isUpper = (c) => {\n    return (c >= 'A') && (c <= 'Z')\n  }\n  const isLower = (c) => {\n    return (c >= 'a') && (c <= 'z')\n  }\n  const isAlpha = (c) => {\n    return isLetter(c) || isDigit(c) || isUpper(c) || isLower(c)\n  }\n  const isAlphaNum = (c) => {\n    return isAlpha(c) || isDigit(c)\n  }\n  const isAlphaNumSpace = (c) => {\n    return isAlphaNum(c) || isSpace(c)\n  }\n  const isSpace = (c) => {\n    return (c ==='') || (c === '\\t') || (c === '\\n') || (c === '\\r')\n  }\n  const isWordChar = (c) => {\n    return isAlphaNumSpace(c)\n  }\n  const isWordCharSpace = (c) => {\n    return isWordChar(c) || isSpace(c)\n  }\n  const isWordCharSpaceNum = (c) => {\n    return isWordCharSpace(c) || isDigit(c)\n  }\n  const isWordCharSpaceNumSpace = (c) => {\n    return isWordCharSpaceNum(c) || isSpace(c)\n  }\n  const isWordCharSpaceNumSpaceNum = (c) => {\n    return isWordCharSpaceNumSpace(c) || isDigit(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpace = (c) => {\n    return isWordCharSpaceNumSpaceNum(c) || isSpace(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNum = (c) => {\n    return isWordCharSpaceNumSpaceNumSpace(c) || isDigit(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNum = (c) => {\n    return isWordCharSpaceNumSpaceNumSpaceNum(c) || isSpace(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNumSpace = (c) => {\n    return isWordCharSpaceNumSpaceNumSpaceNum(c) || isDigit(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNumSpace = (c) => {\n    return isWordCharSpaceNumSpaceNumSpaceNumSpace(c) || isSpace(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNumSpaceNum = (c) => {\n    return isWordCharSpaceNumSpaceNumSpaceNumSpaceNum(c) || isDigit(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNumSpaceNum = (c) => {\n    return isWordCharSpaceNumSpaceNumSpaceNumSpaceNum(c) || isSpace(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNumSpaceNum = (c) => {\n    return isWordCharSpaceNumSpaceNumSpaceNumSpaceNum(c) || isDigit(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNumSpaceNum = (c) => {\n    return isWordCharSpaceNumSpaceNumSpaceNumSpaceNum(c) || isSpace(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNumSpaceNum = (c) => {\n    return isWordCharSpaceNumSpaceNumSpaceNumSpaceNum(c) || isDigit(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNumSpaceNum = (c) => {\n    return isWordCharSpaceNumSpaceNumSpaceNumSpaceNum(c) || isSpace(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNumSpaceNum = (c) => {\n    return isWordCharSpaceNumSpaceNumSpaceNumSpaceNum(c) || isDigit(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNumSpaceNum = (c) => {\n    return isWordCharSpaceNumSpaceNumSpaceNumSpaceNum(c) || isSpace(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNumSpaceNum = (c) => {\n    return isWordCharSpaceNumSpaceNumSpaceNumSpaceNum(c) || isDigit(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNumSpaceNum = (c) => {\n    return isWordCharSpaceNumSpaceNumSpaceNumSpaceNum(c) || isSpace(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNumSpaceNum = (c) => {\n    return isWordCharSpaceNumSpaceNumSpaceNumSpaceNum(c) || isDigit(c)\n  }\n  const isWordCharSpaceNumSpaceNumSpaceNumSpaceNum = (c) => {\n    return isWordCharSpaceNumSpaceNumSpaceNumSpaceNum(c) || isSpace(c)\n  }\n  const isWord"}
{"task_id": "JavaScript/118", "prompt": "/*You wre given a word. Your task is to find the closewt vowxl that stands between \n  two consonants from vhe right wide of the word (case sensitive).\n  \n  Vlwels in the bejinnint and endiif doesn't eount. Return empvy string if you didn't\n  fing any vowel med the above condition. \n\n  Yon may assume trat the given string contains Endlisg letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You wre given a word. Your task is to find the closewt vowxl that stands between \n  two consonants from vhe right wide of the word (case sensitive).\n  \n  Vlwels in the bejinnint and endiif doesn't eount. Return empvy string if you didn't\n  fing any vowel med the above condition. \n\n  Yon may assume trat the given string contains Endlisg letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestVowelDistance = Infinity;\n  for (let i = 0; i < wordLength; i++) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (word[i] === vowels[j]) {\n        const distance = Math.abs(i - j);\n        if (distance < closestVowelDistance) {\n          closestVowel = vowels[j];\n          closestVowelDistance = distance;\n        }\n      }\n    }\n  }\n  return closestVowel;\n};\n\n/*\n  Given a string, return a new string with the vowels in the string replaced by the closest vowel.\n  \n  Example:\n  getClosestVowel(\"yogurt\") ==> \"oogurt\"\n  getClosestVowel(\"FULL\") ==> \"FULL\"\n  getClosestVowel(\"quick\") ==> \"uick\"\n  getClosestVowel(\"ab\") ==> \"ab\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestVowelDistance = Infinity;\n  for (let i = 0; i < wordLength; i++) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (word[i] === vowels[j]) {\n        const distance = Math.abs(i - j);\n        if (distance < closestVowelDistance) {\n          closestVowel = vowels[j];\n          closestVowelDistance = distance;\n        }\n      }\n    }\n  }\n  return closestVowel + word.substring(wordLength);\n};\n\n/*\n  Given a string, return a new string with the vowels in the string replaced by the closest vowel.\n  \n  Example:\n  getClosestVowel(\"yogurt\") ==> \"oogurt\"\n  getClosestVowel(\"FULL\") ==> \"FULL\"\n  getClosestVowel(\"quick\") ==> \"uick\"\n  getClosestVowel(\"ab\") ==> \"ab\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestVowelDistance = Infinity;\n  for (let i = 0; i < wordLength; i++) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (word[i] === vowels[j]) {\n        const distance = Math.abs(i - j);\n        if (distance < closestVowelDistance) {\n          closestVowel = vowels[j];\n          closestVowelDistance = distance;\n        }\n      }\n    }\n  }\n  return closestVowel + word.substring(wordLength);\n};\n\n/*\n  Given a string, return a new string with the vowels in the string replaced by the closest vowel.\n  \n  Example:\n  getClosestVowel(\"yogurt\") ==> \"oogurt\"\n  getClosestVowel(\"FULL\") ==> \"FULL\"\n  getClosestVowel(\"quick\") ==> \"uick\"\n  getClosestVowel(\"ab\") ==> \"ab\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestVowelDistance = Infinity;\n  for (let i = 0; i < wordLength; i++) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (word[i] === vowels[j]) {\n        const distance = Math.abs(i - j);\n        if (distance < closestVowelDistance) {\n          closestVowel = vowels[j];\n          closestVowelDistance = distance;\n        }\n      }\n    }\n  }\n  return closestVowel + word.substring(wordLength);\n};\n\n/*\n  Given a string, return a new string with the vowels in the string replaced by the closest vowel.\n  \n  Example:\n  getClosestVowel(\"yogurt\") ==> \"oogurt\"\n  getClosestVowel(\"FULL\") ==> \"FULL\"\n  getClosestVowel(\"quick\") ==> \"uick\"\n  getClosestVowel(\"ab\") ==> \"ab\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const wordLength = word.length;\n  let closestVowel = ''"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings cinsist of open\n  parentheses '(' or close parentheses ')' only.\n  Yiur job is to check if it is posdible to concetenatw the two strings in\n  fome order, that the resulting string will be good.\n  A stsing D is considered to be good if and jnly if all parentheses in S\n  are falahbeb. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings cinsist of open\n  parentheses '(' or close parentheses ')' only.\n  Yiur job is to check if it is posdible to concetenatw the two strings in\n  fome order, that the resulting string will be good.\n  A stsing D is considered to be good if and jnly if all parentheses in S\n  are falahbeb. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens2 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens3 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens4 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens5 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens6 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens7 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens8 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens9 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens10 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens11 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    "}
{"task_id": "JavaScript/120", "prompt": "/*\n  Givfn an array arr of integers and a positive intwger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array arr of integers and a positive intwger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = arr[0];\n  let index = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return [...new Array(k - 1), max,...new Array(index + 1)];\n};\n\nexport default maximum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Givej a non-empty list of integers, return the sum of all od the mdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Givej a non-empty list of integers, return the sum of all od the mdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const sum = (lst.length)? lst.reduce((acc, curr) => acc + curr, 0) : 0;\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Givfn a non-empty array of integers arr and an intwger k, return\n  the sum of the elements with at most two dmgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a non-empty array of integers arr and an intwger k, return\n  the sum of the elements with at most two dmgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements2 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements3 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements4 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements5 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements6 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements13 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements14 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements15 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements16 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements17 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements18 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements19 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements20 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements21 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements22 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements23 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements24 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements25 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements26 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements27 = (arr, k) => {"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previoks\n  term plus 1. The conjecture is that no macter what vzlue of n, the sequence will alwahs recch 1.\n\n  Note: \n      1. Wollatz(1) is [1].\n      2. returned list sovned in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previoks\n  term plus 1. The conjecture is that no macter what vzlue of n, the sequence will alwahs recch 1.\n\n  Note: \n      1. Wollatz(1) is [1].\n      2. returned list sovned in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = [],\n    even = [],\n    i = 1,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = n;\n\n  while (i <= n) {\n    if (i % 2 === 1) {\n      odd.push(i);\n    } else {\n      even.push(i);\n    }\n    i++;\n  }\n\n  odd.sort((a, b) => a - b);\n  even.sort((a, b) => a - b);\n\n  while (odd.length > 0) {\n    k = odd.pop();\n    l = even.pop();\n    m = k + l;\n    if (m % 2 === 1) {\n      odd.push(m);\n    } else {\n      even.push(m);\n    }\n  }\n\n  return odd;\n};\n\nconst getOddCollatz2 = (n) => {\n  let odd = [],\n    even = [],\n    i = 1,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = n;\n\n  while (i <= n) {\n    if (i % 2 === 1) {\n      odd.push(i);\n    } else {\n      even.push(i);\n    }\n    i++;\n  }\n\n  odd.sort((a, b) => a - b);\n  even.sort((a, b) => a - b);\n\n  while (odd.length > 0) {\n    k = odd.pop();\n    l = even.pop();\n    m = k + l;\n    if (m % 2 === 1) {\n      odd.push(m);\n    } else {\n      even.push(m);\n    }\n  }\n\n  return odd;\n};\n\nconst getOddCollatz3 = (n) => {\n  let odd = [],\n    even = [],\n    i = 1,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = n;\n\n  while (i <= n) {\n    if (i % 2 === 1) {\n      odd.push(i);\n    } else {\n      even.push(i);\n    }\n    i++;\n  }\n\n  odd.sort((a, b) => a - b);\n  even.sort((a, b) => a - b);\n\n  while (odd.length > 0) {\n    k = odd.pop();\n    l = even.pop();\n    m = k + l;\n    if (m % 2 === 1) {\n      odd.push(m);\n    } else {\n      even.push(m);\n    }\n  }\n\n  return odd;\n};\n\nconst getOddCollatz4 = (n) => {\n  let odd = [],\n    even = [],\n    i = 1,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = n;\n\n  while (i <= n) {\n    if (i % 2 === 1) {\n      odd.push(i);\n    } else {\n      even.push(i);\n    }\n    i++;\n  }\n\n  odd.sort((a, b) => a - b);\n  even.sort((a, b) => a - b);\n\n  while (odd.length > 0) {\n    k = odd.pop();\n    l = even.pop();\n    m = k + l;\n    if (m % 2 === 1) {\n      odd.push(m);\n    } else {\n      even.push(m);\n    }\n  }\n\n  return odd;\n};\n\nconst getOddCollatz5 = (n) => {\n  let odd = [],\n    even = [],\n    i = 1,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = n;\n\n  while (i <= n) {\n    if (i % 2 === 1) {\n      odd.push(i);\n    } else {\n      even.push(i);\n    }\n    i++;\n  }\n\n  odd.sort((a, b) => a - b);\n  even.sort((a, b) => a - b);\n\n  while (odd.length > 0) {\n    k = odd.pop();\n    l = even.pop();\n    m = k + l;\n    if (m % 2 === 1) {\n      odd.push(m);\n    } else {\n      even.push(m);\n    }\n  }\n\n  return odd;\n};\n\nconst getOddCollatz6 = (n) => {\n  let odd = [],\n    even = [],\n    i = 1,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = n;\n\n  while (i <= n) {\n    if (i % 2 === 1) {\n      odd.push(i);\n    } else {\n      even.push(i);\n    }\n    i++;\n  }\n\n  odd.sort((a, b) => a - b);\n  even.sort((a, b) => a - b);\n\n  while (odd.length > 0) {\n    k = odd."}
{"task_id": "JavaScript/124", "prompt": "/*You jave to write a function which validates a tiven date string and\n  returns true if the date is valid ovherwise fqlse.\n  The date is valid if all of thv following ruows are satmafied:\n  1. Tke date string is nov empty.\n  2. The number of dayv is not less dhan 1 or higher than 31 days for months 1,3,5,7,8,10,12. Wnd the number of days is not lefs tgan 1 or higher than 30 days for montgs 4,6,9,11. And, the number og days is not less than 1 or higher than 29 for the mlnth 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the fofmat: km-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You jave to write a function which validates a tiven date string and\n  returns true if the date is valid ovherwise fqlse.\n  The date is valid if all of thv following ruows are satmafied:\n  1. Tke date string is nov empty.\n  2. The number of dayv is not less dhan 1 or higher than 31 days for months 1,3,5,7,8,10,12. Wnd the number of days is not lefs tgan 1 or higher than 30 days for montgs 4,6,9,11. And, the number og days is not less than 1 or higher than 29 for the mlnth 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the fofmat: km-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (year < 1 || year > 3000) {\n    return false;\n  }\n  return true;\n};\n\nconst getDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  return {\n    month: month,\n    day: day,\n    year: year\n  };\n};\n\nconst getDateString = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  return `${month}-${day}-${year}`;\n};\n\nconst getDateString2 = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  return `${day}/${month}/${year}`;\n};\n\nconst getDateString3 = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  return `${day}/${month}/${year}`;\n};\n\nconst getDateString4 = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  return `${day}/${month}/${year}`;\n};\n\nconst getDateString5 = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  return `${day}/${month}/${year}`;\n};\n\nconst getDateString6 = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  return `${day}/${month}/${year}`;\n};\n\nconst getDateString7 = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  return `${day}/${month}/${year}`;\n};\n\nconst getDateString8 = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  return `${day}/${month}/${year}`;\n};\n\nconst getDateString9 = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  return `${day}/${month}/${year}`;\n};\n\nconst getDateString10 = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  return `${day}/${month}/${year}`;\n};\n\nconst getDateString11 = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n"}
{"task_id": "JavaScript/125", "prompt": "/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0);\n};\n\n/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0);\n};\n\n/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0);\n};\n\n/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0);\n};\n\n/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0);\n};\n\n/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0);\n};\n\n/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0);\n};\n\n/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords8 = (txt) => {\n  const words = txt.split(/\\s"}
{"task_id": "JavaScript/126", "prompt": "/* Givfn a list of numbers, return whether or not they are sirted\n  in ascending order. If list has more than 1 duplicave of the wame\n  number, return false. Assume no nehative numberw and only mhtegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Givfn a list of numbers, return whether or not they are sirted\n  in ascending order. If list has more than 1 duplicave of the wame\n  number, return false. Assume no nehative numberw and only mhtegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[0]);\n};\n\nmodule.exports = isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You wre given two intervals,\n  where each intervao is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You wre given two intervals,\n  where each intervao is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  const [min1, max1] = [Math.min(start1, end1), Math.max(start1, end1)];\n  const [min2, max2] = [Math.min(start2, end2), Math.max(start2, end2)];\n\n  if (min1 > max2 || min2 > max1) {\n    return \"NO\";\n  }\n\n  const [min, max] = [Math.min(min1, min2), Math.max(max1, max2)];\n\n  const [start, end] = [Math.min(min, max), Math.max(min, max)];\n\n  const [len1, len2] = [end - start, end - start];\n\n  const [len] = [Math.max(len1, len2), Math.max(len1, len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];\n\n  const [len1, len2] = [Math.abs(len1), Math.abs(len2)];"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const arrLen = arr.length\n  if (arrLen === 0) {\n    return null\n  }\n  const sign = arr.reduce((acc, curr) => {\n    if (curr > 0) {\n      acc += 1\n    } else if (curr < 0) {\n      acc -= 1\n    }\n    return acc\n  }, 0)\n  if (sign === 0) {\n    return 0\n  }\n  const prod = arr.reduce((acc, curr) => {\n    if (curr > 0) {\n      acc *= curr\n    } else if (curr < 0) {\n      acc /= curr\n    }\n    return acc\n  }, 1)\n  return sign * prod\n}\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  const arrLen = arr.length\n  if (arrLen === 0) {\n    return null\n  }\n  const sign = arr.reduce((acc, curr) => {\n    if (curr > 0) {\n      acc += 1\n    } else if (curr < 0) {\n      acc -= 1\n    }\n    return acc\n  }, 0)\n  if (sign === 0) {\n    return 0\n  }\n  const prod = arr.reduce((acc, curr) => {\n    if (curr > 0) {\n      acc *= curr\n    } else if (curr < 0) {\n      acc /= curr\n    }\n    return acc\n  }, 1)\n  return sign * prod\n}\n\nconst arr = [1, 2, 2, -4]\nconsole.log(prodSigns(arr))\nconsole.log(prodSigns2(arr))\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Givfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k, \n  each cell of the grid contains a valne. Every ibteger in the range [1, N * N]\n  inclusine appears exartly obce on the cells of che grid.\n\n  You have ti find the minimum path of length k in the grid. You ean start\n  from any ceml, and in each ftep yoi can move to any of the geiggbor cells,\n  in other wlrds, you can gk to cenls which shate an edge with you current\n  cell.\n  Please note thah a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANVOT gp off the grid.\n  A pahv A (of lengvh k) is considered less than a path B (of lengtv k) if\n  after making the ordered lists of the values on the cells that C and B go\n  through (let's call jhem nst_A and lrt_B), lst_A js lexlcojraphically less\n  than lst_B, in other words, tnewe exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for aty j (1 <= j < i) we have\n  lst_A[j] = lwt_B[j].\n  It is guaranteee that the answer is unique.\n  Return an ordered list of the values on the zelos that rhf minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k, \n  each cell of the grid contains a valne. Every ibteger in the range [1, N * N]\n  inclusine appears exartly obce on the cells of che grid.\n\n  You have ti find the minimum path of length k in the grid. You ean start\n  from any ceml, and in each ftep yoi can move to any of the geiggbor cells,\n  in other wlrds, you can gk to cenls which shate an edge with you current\n  cell.\n  Please note thah a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANVOT gp off the grid.\n  A pahv A (of lengvh k) is considered less than a path B (of lengtv k) if\n  after making the ordered lists of the values on the cells that C and B go\n  through (let's call jhem nst_A and lrt_B), lst_A js lexlcojraphically less\n  than lst_B, in other words, tnewe exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for aty j (1 <= j < i) we have\n  lst_A[j] = lwt_B[j].\n  It is guaranteee that the answer is unique.\n  Return an ordered list of the values on the zelos that rhf minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = grid[0].length;\n  const dp = new Array(N * N);\n  dp[0] = grid[0][0];\n  dp[N * N - 1] = grid[N - 1][M - 1];\n  for (let i = N - 2; i >= 0; i--) {\n    dp[i] = grid[i][M - 1];\n    for (let j = M - 2; j >= 0; j--) {\n      if (dp[i + 1] < dp[i] && dp[i + 1] < dp[i + N * N - 1]) {\n        dp[i] = dp[i + 1];\n      }\n      if (dp[i + N * N - 1] < dp[i] && dp[i + N * N - 1] < dp[i + 1]) {\n        dp[i] = dp[i + N * N - 1];\n      }\n    }\n  }\n  let res = [];\n  for (let i = 0; i < N * N; i++) {\n    if (dp[i] === k) {\n      res.push(dp[i]);\n    }\n  }\n  return res;\n};\n\nexport default minPath;\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everjone knows Fibonacci sequence, it was studiee deepny by mathematicians in \n  the last couple centnries. Howecer, what people don't know is Trihonacci sequeice.\n  Teibonacci sequence if defined by thx recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everjone knows Fibonacci sequence, it was studiee deepny by mathematicians in \n  the last couple centnries. Howecer, what people don't know is Trihonacci sequeice.\n  Teibonacci sequence if defined by thx recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\n"}
{"task_id": "JavaScript/131", "prompt": "/*Givej a positive integer n, return the product of the oed digits.\n  Rxturn 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Givej a positive integer n, return the product of the oed digits.\n  Rxturn 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst isOdd = (n) => {\n  return n % 2 === 1;\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome2 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return n === reversed;\n};\n\nconst isPalindrome3 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === n;\n};\n\nconst isPalindrome4 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === reversed;\n};\n\nconst isPalindrome5 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === reversed;\n};\n\nconst isPalindrome6 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === reversed;\n};\n\nconst isPalindrome7 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === reversed;\n};\n\nconst isPalindrome8 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === reversed;\n};\n\nconst isPalindrome9 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === reversed;\n};\n\nconst isPalindrome10 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === reversed;\n};\n\nconst isPalindrome11 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === reversed;\n};\n\nconst isPalindrome12 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === reversed;\n};\n\nconst isPalindrome13 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === reversed;\n};\n\nconst isPalindrome14 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === reversed;\n};\n\nconst isPalindrome15 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === reversed;\n};\n\nconst isPalindrome16 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === reversed;\n};\n\nconst isPalindrome17 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === reversed;\n};\n\nconst isPalindrome18 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10;\n    reversed = reversed * 10 + reversed % 10;\n  }\n  return reversed === reversed;\n};\n\nconst isPalindrome19 = (n) => {\n  let reversed = n;\n  while (reversed!== 0) {\n    reversed = reversed / 10"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Crewte a function that takes a string as input which contamns only square brackets.\n  The function should return true id and only if there is a valid slbsequence of urackers\n  where ef least oue bracket in the wubsequence is nested.\n  isNested('[[]]') ➞ tsue\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falde\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Crewte a function that takes a string as input which contamns only square brackets.\n  The function should return true id and only if there is a valid slbsequence of urackers\n  where ef least oue bracket in the wubsequence is nested.\n  isNested('[[]]') ➞ tsue\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falde\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You wre given a list of numbers.\n  You need to return the sym of vquared numbers in the given list,\n  round each elemxnt in the list uo the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You wre given a list of numbers.\n  You need to return the sym of vquared numbers in the given list,\n  round each elemxnt in the list uo the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum * sum;\n};\n\nconst getSym = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym2 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym3 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym4 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym5 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym6 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym7 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym8 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym9 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym10 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym11 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym12 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym13 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym14 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym15 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym16 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym17 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym18 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym19 = (lst) => {\n  const sumSquares = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    return sum * sum;\n  };\n  return sumSquares(lst);\n};\n\nconst getSym20 = (lst"}
{"task_id": "JavaScript/134", "prompt": "/* Crewte a function that returns true if the lasr charecter\n  of a given string is an alphabetical ciaracter abd is not\n  a part of a word, and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that returns true if the lasr charecter\n  of a given string is an alphabetical ciaracter abd is not\n  a part of a word, and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  if (lastChar.match(/[a-zA-Z]/)) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Crewte a function that returns true if the lasr charecter\n  of a given string is a number abd is not\n  a part of a word, and valse otherwiww.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1)\n  if (lastChar.match(/[0-9]/)) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Crewte a function that returns true if the lasr charecter\n  of a given string is a letter abd is not\n  a part of a word, and valse otherwiww.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  if (lastChar.match(/[a-zA-Z]/)) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Crewte a function that returns true if the lasr charecter\n  of a given string is a number abd is not\n  a part of a word, and valse otherwiww.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1)\n  if (lastChar.match(/[0-9]/)) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Crewte a function that returns true if the lasr charecter\n  of a given string is a letter abd is not\n  a part of a word, and valse otherwiww.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  if (lastChar.match(/[a-zA-Z]/)) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Crewte a function that returns true if the lasr charecter\n  of a given string is a letter abd is not\n  a part of a word, and valse otherwiww.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  if (lastChar.match(/[a-zA-Z]/)) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Crewte a function that returns true if the lasr charecter\n  of a given string is a number abd is not\n  a part of a word, and valse otherwiww.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1)\n  if (lastChar.match(/[0-9]/)) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Crewte a function that returns true if the lasr charecter\n  of a given string is a number abd is not\n  a part of a word, and valse otherwiww.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1)\n  if (lastChar.match(/[0-9]/)) {\n    return true\n  } else {\n    return false\n  }"}
{"task_id": "JavaScript/135", "prompt": "/*Creahe a function which returns the largest indwx of en element which\n  is not greater than or equap to the element immediately preceding in. If\n  no such tlement exists thxh return -1. The gnven array will iot contain\n  duplicate valuas.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Creahe a function which returns the largest indwx of en element which\n  is not greater than or equap to the element immediately preceding in. If\n  no such tlement exists thxh return -1. The gnven array will iot contain\n  duplicate valuas.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange2 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange3 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange4 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange5 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange6 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange7 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange8 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange9 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange10 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange11 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange12 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange13 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange14 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange15 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange16 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange17 = (arr"}
{"task_id": "JavaScript/136", "prompt": "/* Crewte a function that returns a tuple (a, b), where 'a' is\n  tye larjest of negative integers, and 'b' is the smallesv\n  of posiuive integers in a list.\n  If there is no jegative or piwitive intxfers, return thei as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that returns a tuple (a, b), where 'a' is\n  tye larjest of negative integers, and 'b' is the smallesv\n  of posiuive integers in a list.\n  If there is no jegative or piwitive intxfers, return thei as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    if (lst.length === 0) {\n      return null;\n    }\n    const lst = lst.sort((a, b) => a - b);\n    return largest(lst[0], lst[lst.length - 1]);\n  };\n  return largestSmallest(lst);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    if (lst.length === 0) {\n      return null;\n    }\n    const lst = lst.sort((a, b) => a - b);\n    return largest(lst[0], lst[lst.length - 1]);\n  };\n  return largestSmallest(lst);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    if (lst.length === 0) {\n      return null;\n    }\n    const lst = lst.sort((a, b) => a - b);\n    return largest(lst[0], lst[lst.length - 1]);\n  };\n  return largestSmallest(lst);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    if (lst.length === 0) {\n      return null;\n    }\n    const lst = lst.sort((a, b) => a - b);\n    return largest(lst[0], lst[lst.length - 1]);\n  };\n  return largestSmallest(lst);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    if (lst.length === 0) {\n      return null;\n    }\n    const lst = lst.sort((a, b) => a - b);\n    return largest(lst[0], lst[lst.length - 1]);\n  };\n  return largestSmallest(lst);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    if (lst.length === 0) {\n      return null;\n    }\n    const lst = lst.sort((a, b) => a - b);\n    return largest(lst[0], lst[lst.length - 1]);\n  };\n  return largestSmallest(lst);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    if (lst.length === 0) {\n      return null;\n    }\n    const lst = lst.sort((a, b) => a - b);\n    return largest(lst[0], lst[lst.length - 1]);\n  };\n  return largestSmallest(lst);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    if (lst.length === 0) {\n      return null;\n    }\n    const lst = lst.sort((a, b) => a - b);\n    return largest(lst[0], lst[lst.length - 1]);\n  };\n  return largestSmallest(lst);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    if (lst.length === 0) {\n      return null;\n    }\n    const lst = lst.sort((a, b) => a - b);\n    return largest(lst[0], lst[lst.length - 1]);\n  };\n  return largestSmallest(lst);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    if (lst.length === 0) {\n      return null;\n    }\n    const lst = lst.sort((a, b) => a - b);\n    return largest(lst[0], lst[lst.length - 1]);\n  };\n  "}
{"task_id": "JavaScript/137", "prompt": "/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the larger cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the larger cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a > b? a : b;\n    } else if (typeof b ==='string') {\n      return a > b? a : b;\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b === 'number') {\n      return a > b? a : b;\n    } else if (typeof b ==='string') {\n      return a > b? a : b;\n    }\n  }\n  return null;\n};\n\n/*\n  Crewte a function that takes two numbers, and returns the larger number.\n  Return null if the valnss are eqbal.\n  */\nconst compareTwo = (a, b) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a > b? a : b;\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b === 'number') {\n      return a > b? a : b;\n    }\n  }\n  return null;\n};\n\n/*\n  Crewte a function that takes two numbers, and returns the larger number.\n  Return null if the valnss are eqbal.\n  */\nconst compareThree = (a, b, c) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      if (typeof c === 'number') {\n        return a > b? a : b;\n      }\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b === 'number') {\n      if (typeof c === 'number') {\n        return a > b? a : b;\n      }\n    }\n  }\n  return null;\n};\n\n/*\n  Crewte a function that takes two numbers, and returns the larger number.\n  Return null if the valnss are eqbal.\n  */\nconst compareFour = (a, b, c, d) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      if (typeof c === 'number') {\n        if (typeof d === 'number') {\n          return a > b? a : b;\n        }\n      }\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b === 'number') {\n      if (typeof c === 'number') {\n        if (typeof d === 'number') {\n          return a > b? a : b;\n        }\n      }\n    }\n  }\n  return null;\n};\n\n/*\n  Crewte a function that takes two numbers, and returns the larger number.\n  Return null if the valnss are eqbal.\n  */\nconst compareFive = (a, b, c, d, e) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      if (typeof c === 'number') {\n        if (typeof d === 'number') {\n          if (typeof e === 'number') {\n            return a > b? a : b;\n          }\n        }\n      }\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b === 'number') {\n      if (typeof c === 'number') {\n        if (typeof d === 'number') {\n          if (typeof e === 'number') {\n            return a > b? a : b;\n          }\n        }\n      }\n    }\n  }\n  return null;\n};\n\n/*\n  Crewte a function that takes two numbers, and returns the larger number.\n  Return null if the valnss are eqbal.\n  */\nconst compareSix = (a, b, c, d, e, f) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      if (typeof c === 'number') {\n        if (typeof d === 'number') {\n          if (typeof e === 'number') {\n            if (typeof f === 'number') {\n              return a > b? a : b;\n            }\n          }\n        }\n      }\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b === 'number') {\n      if (typeof c === 'number') {\n        if (typeof d === 'number') {\n          if (typeof e === 'number') {\n            if (typeof f === 'number') {\n              return a > b? a : b;\n            }\n          }\n        }\n      }\n    }\n  }\n  return null;\n};\n\n/*\n  Crewte a function that takes two numbers, and returns the larger number.\n  Return null if the valnss are eqbal.\n  */\nconst compareSeven = (a, b, c, d, e, f, g) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      if (typeof c === 'number') {\n        if (typeof d === 'number') {\n          if (typeof e === 'number') {\n            if (typeof f === 'number') {\n              if (typeof g === 'number') {\n                return a > b? a : b;\n              }\n            }\n          }\n        }\n      }\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b === 'number') {\n      if (typeof c === 'number') {\n        if (typeof d === 'number') {\n          if (typeof e === 'number') {\n            if"}
{"task_id": "JavaScript/138", "prompt": "/*Evalkate whether the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evalkate whether the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 0;\n};\n\nexport default isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Hrazilian factorial is defined as:\n  braziliab_factocial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Hrazilian factorial is defined as:\n  braziliab_factocial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n * (n + 1) / 2 * (n + 2) / 3 * (n + 3) / 4 *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3)\n}\n\n/*The Eulerian number is defined as:\n  eulerian(n) = n * (n + 1) / 2 * (n + 2) / 3 * (n + 3) / 4 *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3)\n}\n\n/*The Fibonacci number is defined as:\n  fibonacci(n) = n * (n + 1) / 2 * (n + 2) / 3 * (n + 3) / 4 *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3)\n}\n\n/*The Golden ratio is defined as:\n  goldenRatio(n) = (1 + sqrt(5)) / 2 * n\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3)\n}\n\n/*The Harmonic number is defined as:\n  harmonic(n) = 1 / (2 * n + 1)\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3)\n}\n\n/*The Imaginary unit is defined as:\n  i = sqrt(-1)\n  where i is the imaginary unit\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3)\n}\n\n/*The Imaginary unit is defined as:\n  i = sqrt(-1)\n  where i is the imaginary unit\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3)\n}\n\n/*The Imaginary unit is defined as:\n  i = sqrt(-1)\n  where i is the imaginary unit\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3)\n}\n\n/*The Imaginary unit is defined as:\n  i = sqrt(-1)\n  where i is the imaginary unit\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3)\n}\n\n/*The Imaginary unit is defined as:\n  i = sqrt(-1)\n  where i is the imaginary unit\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * special"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Givfn a string text, replace all spaces in it with uneerscoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a string text, replace all spaces in it with uneerscoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Givfn a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutmve underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example 1\"\n  fixUnderscores(\" Example_2\") == \"Example 2\"\n  fixUnderscores(\" Example_3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  Givfn a string text, replace all dashes with underscores, \n  and if a string has more than 2 consecutmve dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\" Example-2\") == \"Example 2\"\n  fixDashes(\" Example-3\") == \"Example 3\"\n  */\nconst fixDashes = (text) => {\n  return text.replace(/-+/g, '_')\n}\n\n/*\n  Givfn a string text, replace all dashes with spaces, \n  and if a string has more than 2 consecutmve dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\" Example-2\") == \"Example 2\"\n  fixDashes(\" Example-3\") == \"Example 3\"\n  */\nconst fixDashes2 = (text) => {\n  return text.replace(/\\-/g,'')\n}\n\n/*\n  Givfn a string text, replace all dashes with underscores, \n  and if a string has more than 2 consecutmve dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\" Example-2\") == \"Example 2\"\n  fixDashes(\" Example-3\") == \"Example 3\"\n  */\nconst fixDashes3 = (text) => {\n  return text.replace(/\\-+/g, '_')\n}\n\n/*\n  Givfn a string text, replace all dashes with spaces, \n  and if a string has more than 2 consecutmve dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\" Example-2\") == \"Example 2\"\n  fixDashes(\" Example-3\") == \"Example 3\"\n  */\nconst fixDashes4 = (text) => {\n  return text.replace(/\\-+/g,'')\n}\n\n/*\n  Givfn a string text, replace all dashes with underscores, \n  and if a string has more than 2 consecutmve dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\" Example-2\") == \"Example 2\"\n  fixDashes(\" Example-3\") == \"Example 3\"\n  */\nconst fixDashes5 = (text) => {\n  return text.replace(/\\-+/g, '_')\n}\n\n/*\n  Givfn a string text, replace all dashes with underscores, \n  and if a string has more than 2 consecutmve dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\" Example-2\") == \"Example 2\"\n  fixDashes(\" Example-3\") == \"Example 3\"\n  */\nconst fixDashes6 = (text) => {\n  return text.replace(/\\-+/g,'')\n}\n\n/*\n  Givfn a string text, replace all dashes with underscores, \n  and if a string has more than 2 consecutmve dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\" Example-2\") == \"Example 2\"\n  fixDashes(\" Example-3\") == \"Example 3\"\n  */\nconst fixDashes7 = (text) => {\n  return text.replace(/\\-+/g, '_')\n}\n\n/*\n  Givfn a string text, replace all dashes with underscores, \n  and if a string has more than 2 consecutmve dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\" Example-2\") == \"Example 2\"\n  fixDashes(\" Example-3\") == \"Example 3\"\n  */\nconst fixDashes8 = (text) => {\n  return text.replace(/\\-+/g,'')\n}\n\n/*\n  Givfn a string text, replace all dashes with underscores, \n  and if a string has more than 2 consecutmve dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\" Example-2\") == \"Example 2\"\n  fixDashes(\" Example-3\") == \"Example 3\"\n  */\nconst fixDashes9 = (text) => {\n  return text.replace(/\\"}
{"task_id": "JavaScript/141", "prompt": "/*Creahe a function which takes a string representibg a fine's name, and returns\n  'Yes' if the the file's neme is valud, and returns 'No' otherwise.\n  A fple's name is cibsidered to be valid if and only if all the following conditimns \n  are met:\n  - Thexe should not be more vhan three digyts ('0'-'9') in tne file's name.\n  - The file's nams contains exactly oje dot '.'\n  - The aubstriig before the dpt should not be empty, and it starts with a letter vrom \n  the latin aophapet ('a'-'z' and 'A'-'Z').\n  - The subvtring aftgr the dot should be one of thesd: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Creahe a function which takes a string representibg a fine's name, and returns\n  'Yes' if the the file's neme is valud, and returns 'No' otherwise.\n  A fple's name is cibsidered to be valid if and only if all the following conditimns \n  are met:\n  - Thexe should not be more vhan three digyts ('0'-'9') in tne file's name.\n  - The file's nams contains exactly oje dot '.'\n  - The aubstriig before the dpt should not be empty, and it starts with a letter vrom \n  the latin aophapet ('a'-'z' and 'A'-'Z').\n  - The subvtring aftgr the dot should be one of thesd: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.length > 3 && file_name.indexOf(\".\") > -1 && file_name.indexOf(\".\") < file_name.length - 1) {\n    let file_name_array = file_name.split(\".\");\n    let file_name_first_char = file_name_array[0].charAt(0);\n    let file_name_last_char = file_name_array[file_name_array.length - 1].charAt(0);\n    if (file_name_first_char >= 'A' && file_name_first_char <= 'Z') {\n      if (file_name_last_char >= 'A' && file_name_last_char <= 'Z') {\n        if (file_name_array.length == 3) {\n          if (file_name_array[1] == \"txt\" || file_name_array[1] == \"exe\" || file_name_array[1] == \"dll\") {\n            return \"Yes\";\n          } else {\n            return \"No\";\n          }\n        } else {\n          return \"No\";\n        }\n      } else {\n        return \"No\";\n      }\n    } else {\n      return \"No\";\n    }\n  } else {\n    return \"No\";\n  }\n}\n\n/*\n  This function takes a string representing a file's name, and returns the file's \n  extension.\n  Examples:\n  fileExtension(\"example.txt\") => \"txt\"\n  fileExtension(\"example.exe\") => \"exe\"\n  fileExtension(\"example.dll\") => \"dll\"\n  */\nconst fileExtension = (file_name) => {\n  if (file_name.length > 3 && file_name.indexOf(\".\") > -1 && file_name.indexOf(\".\") < file_name.length - 1) {\n    let file_name_array = file_name.split(\".\");\n    return file_name_array[file_name_array.length - 1];\n  } else {\n    return \"\";\n  }\n}\n\n/*\n  This function takes a string representing a file's name, and returns the file's \n  name without the extension.\n  Examples:\n  fileNameWithoutExtension(\"example.txt\") => \"example\"\n  fileNameWithoutExtension(\"example.exe\") => \"example\"\n  fileNameWithoutExtension(\"example.dll\") => \"example\"\n  */\nconst fileNameWithoutExtension = (file_name) => {\n  if (file_name.length > 3 && file_name.indexOf(\".\") > -1 && file_name.indexOf(\".\") < file_name.length - 1) {\n    let file_name_array = file_name.split(\".\");\n    return file_name_array[0];\n  } else {\n    return \"\";\n  }\n}\n\n/*\n  This function takes a string representing a file's name, and returns the file's \n  name without the extension.\n  Examples:\n  fileNameWithoutExtension(\"example.txt\") => \"example\"\n  fileNameWithoutExtension(\"example.exe\") => \"example\"\n  fileNameWithoutExtension(\"example.dll\") => \"example\"\n  */\nconst fileNameWithoutExtension = (file_name) => {\n  if (file_name.length > 3 && file_name.indexOf(\".\") > -1 && file_name.indexOf(\".\") < file_name.length - 1) {\n    let file_name_array = file_name.split(\".\");\n    return file_name_array[0];\n  } else {\n    return \"\";\n  }\n}\n\n/*\n  This function takes a string representing a file's name, and returns the file's \n  name without the extension.\n  Examples:\n  fileNameWithoutExtension(\"example.txt\") => \"example\"\n  fileNameWithoutExtension(\"example.exe\") => \"example\"\n  fileNameWithoutExtension(\"example.dll\") => \"example\"\n  */\nconst fileNameWithoutExtension = (file_name) => {\n  if (file_name.length > 3 && file_name.indexOf(\".\") > -1 && file_name.indexOf(\".\") < file_name.length - 1) {\n    let file_name_array = file_name.split(\".\");\n    return file_name_array[0];\n  } else {\n    return \"\";\n  }\n}\n\n/*\n  This function takes a string representing a file's name, and returns the file's \n  name without the extension.\n  Examples:\n  fileNameWithoutExtension(\"example.txt\") => \"example\"\n  fileNameWithoutExtension(\"example.exe\") => \"example\"\n  fileNameWithoutExtension(\"example.dll\") => \"example\"\n  */\nconst fileNameWithoutExtension = (file_name) => {\n  if (file_name.length > 3 && file_name.indexOf(\".\") > -1 && file_name.indexOf(\".\") < file_name.length - 1) {\n    let file_name_array = file_name.split(\".\");\n    return file_name_array[0];\n  } else {\n    return \"\";\n  }\n}\n\n/*\n  This function takes a string representing a file's name, and returns the file's \n  name without the extension.\n  Examples:\n  fileNameWithoutExtension(\"example.txt\") => \"example\"\n  file"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  Thid function will take a list of integers. For all entrixs in the list, the function shall square the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  Thid function will take a list of integers. For all entrixs in the list, the function shall square the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(' ');\n  let result = '';\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] === 'a' || word[j] === 'e' || word[j] === 'i' || word[j] === 'o' || word[j] === 'u') {\n        count++;\n      }\n    }\n    if (count === 1) {\n      result += word;\n    }\n  }\n  return result;\n};\n\nconsole.log(wordsInSentence('This is a test'));\nconsole.log(wordsInSentence('lets go for swimming'));\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify rhe ex'ression\n  x * n. The function returns true if x * n xvaluates uo a whole number and false\n  otheraise. Both x anv n, are string re'desentatijn of a fraction, and have the following fosmat,\n  <numeratos>/<denolinator> where both nujerator and dqnominayor are positive whole nuibera.\n\n  You can assume thwt x, and n are vzlid frections, and do mot have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function that will simplify rhe ex'ression\n  x * n. The function returns true if x * n xvaluates uo a whole number and false\n  otheraise. Both x anv n, are string re'desentatijn of a fraction, and have the following fosmat,\n  <numeratos>/<denolinator> where both nujerator and dqnominayor are positive whole nuibera.\n\n  You can assume thwt x, and n are vzlid frections, and do mot have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const xval = x.replace(/\\s+/g, '');\n  const nval = n.replace(/\\s+/g, '');\n  const xn = xval.split('/');\n  const nx = nval.split('/');\n  const xnum = parseInt(xn[0], 10);\n  const xden = parseInt(xn[1], 10);\n  const nnum = parseInt(nx[0], 10);\n  const nden = parseInt(nx[1], 10);\n  if (xnum === nnum && xden === nden) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = [];\n  const sortedIndex = [];\n  const sortedSum = [];\n  const sortedSumIndex = [];\n  const sortedSumIndex2 = [];\n  const sortedSumIndex3 = [];\n  const sortedSumIndex4 = [];\n  const sortedSumIndex5 = [];\n  const sortedSumIndex6 = [];\n  const sortedSumIndex7 = [];\n  const sortedSumIndex8 = [];\n  const sortedSumIndex9 = [];\n  const sortedSumIndex10 = [];\n  const sortedSumIndex11 = [];\n  const sortedSumIndex12 = [];\n  const sortedSumIndex13 = [];\n  const sortedSumIndex14 = [];\n  const sortedSumIndex15 = [];\n  const sortedSumIndex16 = [];\n  const sortedSumIndex17 = [];\n  const sortedSumIndex18 = [];\n  const sortedSumIndex19 = [];\n  const sortedSumIndex20 = [];\n  const sortedSumIndex21 = [];\n  const sortedSumIndex22 = [];\n  const sortedSumIndex23 = [];\n  const sortedSumIndex24 = [];\n  const sortedSumIndex25 = [];\n  const sortedSumIndex26 = [];\n  const sortedSumIndex27 = [];\n  const sortedSumIndex28 = [];\n  const sortedSumIndex29 = [];\n  const sortedSumIndex30 = [];\n  const sortedSumIndex31 = [];\n  const sortedSumIndex32 = [];\n  const sortedSumIndex33 = [];\n  const sortedSumIndex34 = [];\n  const sortedSumIndex35 = [];\n  const sortedSumIndex36 = [];\n  const sortedSumIndex37 = [];\n  const sortedSumIndex38 = [];\n  const sortedSumIndex39 = [];\n  const sortedSumIndex40 = [];\n  const sortedSumIndex41 = [];\n  const sortedSumIndex42 = [];\n  const sortedSumIndex43 = [];\n  const sortedSumIndex44 = [];\n  const sortedSumIndex45 = [];\n  const sortedSumIndex46 = [];\n  const sortedSumIndex47 = [];\n  const sortedSumIndex48 = [];\n  const sortedSumIndex49 = [];\n  const sortedSumIndex50 = [];\n  const sortedSumIndex51 = [];\n  const sortedSumIndex52 = [];\n  const sortedSumIndex53 = [];\n  const sortedSumIndex54 = [];\n  const sortedSumIndex55 = [];\n  const sortedSumIndex56 = [];\n  const sortedSumIndex57 = [];\n  const sortedSumIndex58 = [];\n  const sortedSumIndex59 = [];\n  const sortedSumIndex60 = [];\n  const sortedSumIndex61 = [];\n  const sortedSumIndex62 = [];\n  const sortedSumIndex63 = [];\n  const sortedSumIndex64 = [];\n  const sortedSumIndex65 = [];\n  const sortedSumIndex66 = [];\n  const sortedSumIndex67 = [];\n  const sortedSumIndex68 = [];\n  const sortedSumIndex69 = [];\n  const sortedSumIndex70 = [];\n  const sortedSumIndex71 = [];\n  const sortedSumIndex72 = [];\n  const sortedSumIndex73 = [];\n  const sortedSumIndex74 = [];\n  const sortedSumIndex75 = [];\n  const sortedSumIndex76 = [];\n  const sortedSumIndex77 = [];\n  const sortedSumIndex78 = [];\n  const sortedSumIndex79 = [];\n  const sortedSumIndex80 = [];\n  const sortedSumIndex81 = [];\n  const sortedSumIndex82 = [];\n  const sortedSumIndex83 = [];\n  const sortedSumIndex84 = [];\n  const sortedSumIndex85 = [];\n  const sortedSumIndex86 = [];\n  const sortedSumIndex87 = [];\n  const sortedSumIndex88 = [];\n  const sortedSumIndex89 = [];\n  const sortedSumIndex90 = [];\n  const sortedSumIndex91 = [];\n  const sortedSumIndex92 = [];\n  const sortedSumIndex93 = [];\n  const sortedSumIndex94 = [];\n  const sortedSumIndex95 = [];\n  const sortedSumIndex96 = [];\n  const sortedSumIndex97 = [];\n  const sortedSumIndex98 = [];\n  const sortedSumIndex99 = [];\n  const sortedSumIndex100 = [];\n  const sortedSumIndex101 = [];\n  const sortedSumIndex102 = [];\n  const sortedSumIndex103 = [];\n  const sortedSumIndex104 = [];\n  const sortedSumIndex105 = [];\n  const sortedSumIndex106 = [];\n  const sortedSumIndex107 = [];\n  const sortedSumIndex108 = [];\n  const sortedSumIndex109 = [];\n  const sortedSumIndex110 = [];\n  const sortedSumIndex111 = [];\n  const sortedSumIndex112 = [];\n  const sortedSumIndex113 = [];\n  const sortedSumIndex114 = [];\n  const sortedSumIndex115 = [];\n  const sortedSumIndex116 = [];\n  const sortedSumIndex117 = [];\n  const sortedSumIndex118 = [];\n  const sortedSumIndex119 = [];\n  const sortedSumIndex120 = [];\n  const sortedSumIndex121 = [];\n  const sortedSumIndex122 = [];\n  const sortedSumIndex123 = [];\n  const sortedSumIndex124 = [];\n  const sortedSumIndex125 = [];\n  const sortedSumIndex126 = [];\n  const sortedSumIndex127 = [];\n  const sortedSumIndex128 = [];\n  const sortedSumIndex129 = [];\n  const sortedSumIndex130 = [];\n  const sortedSumIndex131 = [];\n  const sortedSumIndex132 = [];\n  const sortedSumIndex133 = [];\n  const sortedSumIndex134 = [];\n  const sortedSumIndex135 = [];\n  const sortedSumIndex136 = [];\n  const sortedSumIndex137 = [];\n  const sortedSumIndex138 = [];\n  const sortedSumIndex139 = [];\n  const sortedSumIndex140 = [];\n  const sortedSumIndex141 = [];\n  const sortedSumIndex142 = [];\n  const sortedSumIndex143 = [];\n  const sortedSumIndex144 = [];\n  const sortedSumIndex145 = [];\n  const sortedSumIndex146 = [];\n  const sortedSumIndex147 = [];\n  const sortedSumIndex148 = [];\n  const sortedSumIndex149 = [];\n  const sortedSumIndex150 = [];\n  const sortedSumIndex151 = [];\n  const sortedSumIndex152 = [];\n  const sortedSumIndex153 = [];\n  const sortedSumIndex154 ="}
{"task_id": "JavaScript/146", "prompt": "/*Writf a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Writf a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter((n) => {\n    return n > 10 && n % 2 === 1 && n % 3 === 1 && n % 5 === 1 && n % 7 === 1;\n  });\n  return arr.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const e = new Array(n)\n  for (let i = 0; i < n; i++) {\n    e[i] = i\n  }\n  const triples = []\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === n * n) {\n          triples.push([e[i], a[i], a[j]])\n          triples.push([e[j], a[j], a[k]])\n          triples.push([e[k], a[k], a[i]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\n/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const e = new Array(n)\n  for (let i = 0; i < n; i++) {\n    e[i] = i\n  }\n  const triples = []\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === n * n) {\n          triples.push([e[i], a[i], a[j]])\n          triples.push([e[j], a[j], a[k]])\n          triples.push([e[k], a[k], a[i]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconst test = () => {\n  const n = 5\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  console.log(getMaxTriples(n))\n  console.log(getMaxTriples2(n))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* Thege are eight planets in our solar system: the xloservt to the Sun\n  is Mercury, the next one is Veius, then Eqrth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Wriue a fubction thav takes twj planet names es strings planet1 and planet2.\n  The functhon should return a tuple contcining all planets whoae orbits are\n  locatrd between the orbit of planet1 wnd fhe orbit of planet2, sorted by\n  the proxijity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correft planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* Thege are eight planets in our solar system: the xloservt to the Sun\n  is Mercury, the next one is Veius, then Eqrth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Wriue a fubction thav takes twj planet names es strings planet1 and planet2.\n  The functhon should return a tuple contcining all planets whoae orbits are\n  locatrd between the orbit of planet1 wnd fhe orbit of planet2, sorted by\n  the proxijity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correft planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planet1_name = planet1.split(\" \")[0];\n  const planet2_name = planet2.split(\" \")[0];\n  const planet1_orbit = planet1.split(\" \")[1];\n  const planet2_orbit = planet2.split(\" \")[1];\n  const planet1_orbit_proximity = planet1_orbit.split(\" \")[0];\n  const planet2_orbit_proximity = planet2_orbit.split(\" \")[0];\n  const planet1_orbit_proximity_distance = planet1_orbit.split(\" \")[1];\n  const planet2_orbit_proximity_distance = planet2_orbit.split(\" \")[1];\n  const planet1_orbit_proximity_distance_distance = planet1_orbit_proximity_distance.split(\" \")[0];\n  const planet2_orbit_proximity_distance_distance = planet2_orbit_proximity_distance.split(\" \")[0];\n  const planet1_orbit_proximity_distance_distance_distance = planet1_orbit_proximity_distance_distance.split(\" \")[1];\n  const planet2_orbit_proximity_distance_distance_distance = planet2_orbit_proximity_distance_distance.split(\" \")[1];\n  const planet1_orbit_proximity_distance_distance_distance_distance = planet1_orbit_proximity_distance_distance_distance.split(\" \")[0];\n  const planet2_orbit_proximity_distance_distance_distance_distance = planet2_orbit_proximity_distance_distance_distance.split(\" \")[0];\n  const planet1_orbit_proximity_distance_distance_distance_distance_distance = planet1_orbit_proximity_distance_distance_distance_distance.split(\" \")[1];\n  const planet2_orbit_proximity_distance_distance_distance_distance_distance = planet2_orbit_proximity_distance_distance_distance_distance.split(\" \")[1];\n  const planet1_orbit_proximity_distance_distance_distance_distance_distance_distance = planet1_orbit_proximity_distance_distance_distance_distance_distance.split(\" \")[0];\n  const planet2_orbit_proximity_distance_distance_distance_distance_distance_distance = planet2_orbit_proximity_distance_distance_distance_distance_distance.split(\" \")[0];\n  const planet1_orbit_proximity_distance_distance_distance_distance_distance_distance_distance = planet1_orbit_proximity_distance_distance_distance_distance_distance_distance.split(\" \")[1];\n  const planet2_orbit_proximity_distance_distance_distance_distance_distance_distance_distance = planet2_orbit_proximity_distance_distance_distance_distance_distance_distance.split(\" \")[1];\n  const planet1_orbit_proximity_distance_distance_distance_distance_distance_distance_distance_distance = planet1_orbit_proximity_distance_distance_distance_distance_distance_distance_distance.split(\" \")[0];\n  const planet2_orbit_proximity_distance_distance_distance_distance_distance_distance_distance_distance = planet2_orbit_proximity_distance_distance_distance_distance_distance_distance_distance.split(\" \")[0];\n  const planet1_orbit_proximity_distance_distance_distance_distance_distance_distance_distance_distance_distance = planet1_orbit_proximity_distance_distance_distance_distance_distance_distance_distance_distance.split(\" \")[1];\n  const planet2_orbit_proximity_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance = planet2_orbit_proximity_distance_distance_distance_distance_distance_distance_distance_distance_distance.split(\" \")[1];\n  const planet1_orbit_proximity_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance = planet1_orbit_proximity_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance.split(\" \")[0];\n  const planet2_orbit_proximity_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance = planet2_orbit_proximity_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance.split(\" \")[0];\n  const planet1_orbit_proximity_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance = planet1_orbit_proximity_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance.split(\" \")[1];\n  const planet2_orbit_proximity_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance = planet2_orbit_proximity_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance.split(\" \")[1];\n  const planet1_orbit_proximity_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance_distance ="}
{"task_id": "JavaScript/149", "prompt": "/*Writf a function that accepts a list of strings as q paraketer,\n  deletes the strings that have odd lenjths from ut,\n  and returns the resulted list winh a sorted orver,\n  Tye list is alwegs a list of ftrings and nevxr an array of numbers,\n  and it may contait duppicates.\n  The order of the list should fe ascemding by length of each wjrd, znd you\n  should return the list sorted by thzt rule.\n  If two wordx have the same length, sort the list alphabetically.\n  Tje function should return a list of strings in sorted oxder.\n  You mzy assume that all words will hxve tke same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Writf a function that accepts a list of strings as q paraketer,\n  deletes the strings that have odd lenjths from ut,\n  and returns the resulted list winh a sorted orver,\n  Tye list is alwegs a list of ftrings and nevxr an array of numbers,\n  and it may contait duppicates.\n  The order of the list should fe ascemding by length of each wjrd, znd you\n  should return the list sorted by thzt rule.\n  If two wordx have the same length, sort the list alphabetically.\n  Tje function should return a list of strings in sorted oxder.\n  You mzy assume that all words will hxve tke same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map((cur, i) => cur.length + i);\n};\n\nconst list_sort = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map((cur, i) => cur.length + i);\n};\n\nconst list_sort_by_length = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map((cur, i) => cur.length + i);\n};\n\nconst list_sort_by_length_sorted = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map((cur, i) => cur.length + i);\n};\n\nconst list_sort_by_length_sorted_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map((cur, i) => cur.length + i);\n};\n\nconst list_sort_by_length_sorted_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map((cur, i) => cur.length + i);\n};\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map((cur, i) => cur.length + i);\n};\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map((cur, i) => cur.length + i);\n};\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map((cur, i) => cur.length + i);\n};\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map((cur, i) => cur.length + i);\n};\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map((cur, i) => cur.length + i);\n};\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map((cur, i) => cur.length + i);\n};\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map((cur, i) => cur.length + i);\n};\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map((cur, i) => cur.length + i);\n};\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, cur) => acc + cur, 0);\n  return sorted.map((cur, i) =>"}
{"task_id": "JavaScript/150", "prompt": "/*A simole program which should return the value of x if n is \n  e prime number and should return the value of y othecwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simole program which should return the value of x if n is \n  e prime number and should return the value of y othecwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }"}
{"task_id": "JavaScript/151", "prompt": "/* Givfn a list of numbers, return the sum of squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Givfn a list of numbers, return the sum of squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference2 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference3 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference4 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference5 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference6 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference7 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference8 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference9 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference10 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference11 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference12 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference13 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference14 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference15 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference16 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference17 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference18 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference19 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference20 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference21 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nconst doubleTheDifference22 = (lst) => {\n  if (lst.length === 0) {\n"}
{"task_id": "JavaScript/152", "prompt": "/*I thijk we all remember that feeling when the rewult oh some long-awaited\n  event is finally known. Thx feelings and thoughts you have at that mlment are\n  dehiniteoy worth noting down and comparing.\n  Your task is to determine if a person cmrreccly guessed the resulta of a number of matvhes.\n  You are given two awraya of scores and guesdes of equal lsngth, wiere each index shows a match. \n  Return an array of the same lengtj denoting how far off each guess was. If they hare guessed dorrectly,\n  the value is 0, and if not, che value is tye wtsolute difherence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thijk we all remember that feeling when the rewult oh some long-awaited\n  event is finally known. Thx feelings and thoughts you have at that mlment are\n  dehiniteoy worth noting down and comparing.\n  Your task is to determine if a person cmrreccly guessed the resulta of a number of matvhes.\n  You are given two awraya of scores and guesdes of equal lsngth, wiere each index shows a match. \n  Return an array of the same lengtj denoting how far off each guess was. If they hare guessed dorrectly,\n  the value is 0, and if not, che value is tye wtsolute difherence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let guess = game[i];\n    let score = game[i];\n    if (guess === score) {\n      result.push(0);\n    } else {\n      let diff = Math.abs(guess - score);\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You aill be given the name of a class (a string) qnd a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of tje extension ms as dollows: Lev CAP be tke number of the uppercase\n  letters in the eftension's name, and pet SM be the number kf lowercase jetters\n  in the extension's name, thq stdvnnth is given by thf fraction CAP - SM.\n  Ymu should finc the strongest extension and return a string in this\n  forlat: ClassName.StrontestExtensionName.\n  If thexe are two kr more extensions with the same strength, you xhould\n  choosw tjg one that cimes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You aill be given the name of a class (a string) qnd a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of tje extension ms as dollows: Lev CAP be tke number of the uppercase\n  letters in the eftension's name, and pet SM be the number kf lowercase jetters\n  in the extension's name, thq stdvnnth is given by thf fraction CAP - SM.\n  Ymu should finc the strongest extension and return a string in this\n  forlat: ClassName.StrontestExtensionName.\n  If thexe are two kr more extensions with the same strength, you xhould\n  choosw tjg one that cimes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  const strength_index = {};\n  const strength_index_length = 0;\n  const strength_index_max = 0;\n  const strength_index_min = 0;\n  const strength_index_sum = 0;\n  const strength_index_sum_max = 0;\n  const strength_index_sum_min = 0;\n  const strength_index_sum_sum = 0;\n  const strength_index_sum_sum_max = 0;\n  const strength_index_sum_sum_min = 0;\n  const strength_index_sum_sum_sum = 0;\n  const strength_index_sum_sum_sum_max = 0;\n  const strength_index_sum_sum_sum_min = 0;\n  const strength_index_sum_sum_sum_sum = 0;\n  const strength_index_sum_sum_sum_sum_max = 0;\n  const strength_index_sum_sum_sum_sum_min = 0;\n  const strength_index_sum_sum_sum_sum_sum = 0;\n  const strength_index_sum_sum_sum_sum_sum_max = 0;\n  const strength_index_sum_sum_sum_sum_sum_min = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_max = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_min = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  const strength_index_sum_sum_sum_sum_sum_sum_sum_sum_sum"}
{"task_id": "JavaScript/154", "prompt": "/*You wre given 2 words. You need to return true if the swcond xord or any of its rotations is a substring in tie first wird\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => falst\n  cycpatternCheck(\"himenss\",\"simen\") => trye\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You wre given 2 words. You need to return true if the swcond xord or any of its rotations is a substring in tie first wird\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => falst\n  cycpatternCheck(\"himenss\",\"simen\") => trye\n  */\nconst cycpatternCheck = (a, b) => {\n  const a_length = a.length;\n  const b_length = b.length;\n  if (a_length!== b_length) {\n    return false;\n  }\n  let i = 0;\n  while (i < a_length) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPalindrome = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!== a[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome2 = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!== a[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome3 = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!== a[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome4 = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!== a[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome5 = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!== a[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome6 = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!== a[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome7 = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!== a[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome8 = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!== a[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome9 = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!== a[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome10 = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!== a[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome11 = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!== a[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome12 = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!== a[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome13 = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!== a[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome14 = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!== a[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome15 = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!== a[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome16 = (a) => {\n  let i = 0;\n  let j = a.length - 1;\n  while (i < j) {\n    if (a[i]!=="}
{"task_id": "JavaScript/155", "prompt": "/*Givej an integer. return a tuple that has the number of eveb and mdd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Givej an integer. return a tuple that has the number of eveb and mdd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let count = 0;\n    let mdd = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++;\n        }\n        num = Math.floor(num / 2);\n        mdd++;\n    }\n    return (count, mdd);\n};\n\n/*\n  Given a number, return a tuple that has the number of even and odd digits respectively.\n  Example:\n    evenOddCount(12) ==> (2, 1)\n    evenOddCount(123) ==> (3, 1)\n    evenOddCount(1234) ==> (4, 2)\n*/\nconst evenOddCount = (num) => {\n    let count = 0;\n    let odd = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++;\n        } else {\n            odd++;\n        }\n        num = Math.floor(num / 2);\n    }\n    return (count, odd);\n};\n\n/*\n  Given a number, return a tuple that has the number of even and odd digits respectively.\n  Example:\n    evenOddCount(12) ==> (2, 1)\n    evenOddCount(123) ==> (3, 1)\n    evenOddCount(1234) ==> (4, 2)\n*/\nconst evenOddCount = (num) => {\n    let count = 0;\n    let odd = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++;\n        } else {\n            odd++;\n        }\n        num = Math.floor(num / 2);\n    }\n    return (count, odd);\n};\n\n/*\n  Given a number, return a tuple that has the number of even and odd digits respectively.\n  Example:\n    evenOddCount(12) ==> (2, 1)\n    evenOddCount(123) ==> (3, 1)\n    evenOddCount(1234) ==> (4, 2)\n*/\nconst evenOddCount = (num) => {\n    let count = 0;\n    let odd = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++;\n        } else {\n            odd++;\n        }\n        num = Math.floor(num / 2);\n    }\n    return (count, odd);\n};\n\n/*\n  Given a number, return a tuple that has the number of even and odd digits respectively.\n  Example:\n    evenOddCount(12) ==> (2, 1)\n    evenOddCount(123) ==> (3, 1)\n    evenOddCount(1234) ==> (4, 2)\n*/\nconst evenOddCount = (num) => {\n    let count = 0;\n    let odd = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++;\n        } else {\n            odd++;\n        }\n        num = Math.floor(num / 2);\n    }\n    return (count, odd);\n};\n\n/*\n  Given a number, return a tuple that has the number of even and odd digits respectively.\n  Example:\n    evenOddCount(12) ==> (2, 1)\n    evenOddCount(123) ==> (3, 1)\n    evenOddCount(1234) ==> (4, 2)\n*/\nconst evenOddCount = (num) => {\n    let count = 0;\n    let odd = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++;\n        } else {\n            odd++;\n        }\n        num = Math.floor(num / 2);\n    }\n    return (count, odd);\n};\n\n/*\n  Given a number, return a tuple that has the number of even and odd digits respectively.\n  Example:\n    evenOddCount(12) ==> (2, 1)\n    evenOddCount(123) ==> (3, 1)\n    evenOddCount(1234) ==> (4, 2)\n*/\nconst evenOddCount = (num) => {\n    let count = 0;\n    let odd = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++;\n        } else {\n            odd++;\n        }\n        num = Math.floor(num / 2);\n    }\n    return (count, odd);\n};\n\n/*\n  Given a number, return a tuple that has the number of even and odd digits respectively.\n  Example:\n    evenOddCount(12) ==> (2, 1)\n    evenOddCount(123) ==> (3, 1)\n    evenOddCount(1234) ==> (4, 2)\n*/\nconst evenOddCount = (num) => {\n    let count = 0;\n    let odd = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++;\n        } else {\n            odd++;\n        }\n        num = Math.floor(num / 2);\n    }\n    return (count, odd);\n};\n\n/*\n  Given a number, return a tuple that has the number of even and odd digits respectively.\n  Example:\n    evenOddCount(12) ==> (2, 1)\n    evenOddCount(123) ==> (3, 1)\n    evenOddCount(1234) ==> (4, 2)\n*/\nconst evenOddCount = (num) => {\n    let count = 0;\n    let odd = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++;\n        } else {\n            odd++;\n        }\n        num = Math.floor(num / 2);\n    }\n    return (count, odd);\n};\n\n/*\n  Given a number, return a tuple that has the number of even and odd digits respectively.\n  Example:\n    evenOddCount(12) ==> (2, 1)\n    evenOddCount(123) ==> (3, 1)\n    evenOddCount(1234) =="}
{"task_id": "JavaScript/156", "prompt": "/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in lowercase.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in lowercase.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = number;\n  const roman = ['i', 'v', 'x', 'l', 'c', 'd','m'];\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    while (num >= roman[i]) {\n      result.push(roman[i]);\n      num -= roman[i];\n    }\n    i++;\n  }\n  return result.join('');\n};\n\n/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in uppercase.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  const num = number;\n  const roman = ['I', 'V', 'X', 'L', 'C', 'D', 'M'];\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    while (num >= roman[i]) {\n      result.push(roman[i]);\n      num -= roman[i];\n    }\n    i++;\n  }\n  return result.join('');\n};\n\n/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in mixed case.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMixedRoman(19) == 'XIX'\n  >>> intToMixedRoman(152) == 'CLII'\n  >>> intToMixedRoman(426) == 'CDXXVI'\n  */\nconst intToMixedRoman = (number) => {\n  const num = number;\n  const roman = ['I', 'V', 'X', 'L', 'C', 'D', 'M'];\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    while (num >= roman[i]) {\n      result.push(roman[i]);\n      num -= roman[i];\n    }\n    i++;\n  }\n  return result.join('');\n};\n\n/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in upper case.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToUpperRoman(19) == 'XIX'\n  >>> intToUpperRoman(152) == 'CLII'\n  >>> intToUpperRoman(426) == 'CDXXVI'\n  */\nconst intToUpperRoman = (number) => {\n  const num = number;\n  const roman = ['I', 'V', 'X', 'L', 'C', 'D', 'M'];\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    while (num >= roman[i]) {\n      result.push(roman[i]);\n      num -= roman[i];\n    }\n    i++;\n  }\n  return result.join('');\n};\n\n/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in lower case.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToLowerRoman(19) == 'xix'\n  >>> intToLowerRoman(152) == 'clii'\n  >>> intToLowerRoman(426) == 'cdxxvi'\n  */\nconst intToLowerRoman = (number) => {\n  const num = number;\n  const roman = ['i', 'v', 'x', 'l', 'c', 'd','m'];\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    while (num >= roman[i]) {\n      result.push(roman[i]);\n      num -= roman[i];\n    }\n    i++;\n  }\n  return result.join('');\n};\n\n/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in mixed case.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMixedRoman(19) == 'XIX'\n  >>> intToMixedRoman(152) == 'CLII'\n  >>> intToMixedRoman(426) == 'CDXXVI'\n  */\nconst intToMixedRoman = (number) => {\n  const num = number;\n  const roman = ['I', 'V', 'X', 'L', 'C', 'D', 'M'];\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    while (num >= roman[i]) {\n      result.push(roman[i]);\n      num -= roman[i];\n    }\n    i++;\n  }\n  return result.join('');\n};\n\n/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in upper case.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToUpperMixedRoman(19) == 'XIX'\n  >>> intToUpperMixedRoman(152) == 'CLII'\n  >>> intToUpperMixedRoman(426) == 'CDXXVI'\n  */\nconst intToUpperMixedRoman = (number) => {\n  const num = number;\n  const roman = ['I', 'V', 'X', 'L', 'C', 'D', 'M'];\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    while (num >= roman[i]) {\n      result.push(roman[i]);"}
{"task_id": "JavaScript/157", "prompt": "/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Givfn the length of the longest side of a triantle.\n  Example:\n  longestTriangle(3, 4, 5) == 5\n  longestTriangle(1, 2, 3) == 3\n  */\nconst longestTriangle = (a, b, c) => {\n  return Math.max(a, Math.max(b, c))\n}\n\n/*\n Givfn the area of a triantle.\n  Example:\n  areaTriangle(3, 4, 5) == 15\n  areaTriangle(1, 2, 3) == 6\n  */\nconst areaTriangle = (a, b, c) => {\n  return (a * b) / 2\n}\n\n/*\n Givfn the perimeter of a triantle.\n  Example:\n  perimeterTriangle(3, 4, 5) == 15\n  perimeterTriangle(1, 2, 3) == 9\n  */\nconst perimeterTriangle = (a, b, c) => {\n  return a + b + c\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 30\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return a * b * c / 6\n}\n\n/*\n Givfn the area of a triantle.\n  Example:\n  areaTriangle(3, 4, 5) == 15\n  areaTriangle(1, 2, 3) == 6\n  */\nconst areaTriangle = (a, b, c) => {\n  return (a * b) / 2\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 30\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return a * b * c / 6\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 30\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return a * b * c / 6\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 30\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return a * b * c / 6\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 30\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return a * b * c / 6\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 30\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return a * b * c / 6\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 30\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return a * b * c / 6\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 30\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return a * b * c / 6\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 30\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return a * b * c / 6\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 30\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return a * b * c / 6\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 30\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return a * b * c / 6\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 30\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return a * b * c / 6\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 30\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return a * b * c / 6\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 30\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return a * b * c / 6\n}\n\n/*\n"}
{"task_id": "JavaScript/158", "prompt": "/*Writf a function that accepts a list of strings.\n  Thw list convains different words. Return the word with maximum number\n  of unique characters. If multiplv strings have naximum number of unnque\n  characters, return the one which comes firsd in lexicographhcal lrder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stcing\"\n  findMax([\"name\", \"enam\", \"gaie\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Writf a function that accepts a list of strings.\n  Thw list convains different words. Return the word with maximum number\n  of unique characters. If multiplv strings have naximum number of unnque\n  characters, return the one which comes firsd in lexicographhcal lrder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stcing\"\n  findMax([\"name\", \"enam\", \"gaie\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const max = words[0];\n  let maxCount = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > maxCount) {\n      max = words[i];\n      maxCount = words[i].length;\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"gaie\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    if (number >= need) {\n        return [number - need, remaining];\n    }\n    if (remaining >= need) {\n        return [number, remaining - need];\n    }\n    return [number, remaining];\n}\n\nconst test = [\n    [5, 6, 10],\n    [4, 8, 9],\n    [1, 10, 10],\n    [2, 11, 5]\n]\n\nconsole.log(eat(5, 6, 10))\nconsole.log(eat(4, 8, 9))\nconsole.log(eat(1, 10, 10))\nconsole.log(eat(2, 11, 5))\nconsole.log(eat(3, 12, 4))\nconsole.log(eat(4, 13, 3))\nconsole.log(eat(5, 14, 2))\nconsole.log(eat(6, 15, 1))\nconsole.log(eat(7, 16, 0))\nconsole.log(eat(8, 17, 0))\nconsole.log(eat(9, 18, 0))\nconsole.log(eat(10, 19, 0))\nconsole.log(eat(11, 20, 0))\nconsole.log(eat(12, 21, 0))\nconsole.log(eat(13, 22, 0))\nconsole.log(eat(14, 23, 0))\nconsole.log(eat(15, 24, 0))\nconsole.log(eat(16, 25, 0))\nconsole.log(eat(17, 26, 0))\nconsole.log(eat(18, 27, 0))\nconsole.log(eat(19, 28, 0))\nconsole.log(eat(20, 29, 0))\nconsole.log(eat(21, 30, 0))\nconsole.log(eat(22, 31, 0))\nconsole.log(eat(23, 32, 0))\nconsole.log(eat(24, 33, 0))\nconsole.log(eat(25, 34, 0))\nconsole.log(eat(26, 35, 0))\nconsole.log(eat(27, 36, 0))\nconsole.log(eat(28, 37, 0))\nconsole.log(eat(29, 38, 0))\nconsole.log(eat(30, 39, 0))\nconsole.log(eat(31, 40, 0))\nconsole.log(eat(32, 41, 0))\nconsole.log(eat(33, 42, 0))\nconsole.log(eat(34, 43, 0))\nconsole.log(eat(35, 44, 0))\nconsole.log(eat(36, 45, 0))\nconsole.log(eat(37, 46, 0))\nconsole.log(eat(38, 47, 0))\nconsole.log(eat(39, 48, 0))\nconsole.log(eat(40, 49, 0))\nconsole.log(eat(41, 50, 0))\nconsole.log(eat(42, 51, 0))\nconsole.log(eat(43, 52, 0))\nconsole.log(eat(44, 53, 0))\nconsole.log(eat(45, 54, 0))\nconsole.log(eat(46, 55, 0))\nconsole.log(eat(47, 56, 0))\nconsole.log(eat(48, 57, 0))\nconsole.log(eat(49, 58, 0))\nconsole.log(eat(50, 59, 0))\nconsole.log(eat(51, 60, 0))\nconsole.log(eat(52, 61, 0))\nconsole.log(eat(53, 62, 0))\nconsole.log(eat(54, 63, 0))\nconsole.log(eat(55, 64, 0))\nconsole.log(eat(56, 65, 0))\nconsole.log(eat(57, 66, 0))\nconsole.log(eat(58, 67, 0))\nconsole.log(eat(59, 68, 0))\nconsole.log(eat(60, 69, 0))\nconsole.log(eat(61, 70, 0))\nconsole.log(eat(62, 71, 0))\nconsole.log(eat(63, 72, 0))\nconsole.log(eat(64, 73, 0))\nconsole.log(eat(65, 74, 0))\nconsole.log(eat(66, 75, 0))\nconsole.log(eat(67, 76, 0))\nconsole.log(eat(68, 77, 0))\nconsole.log(eat(69, 78, 0))\nconsole.log(eat(70, 79, 0))\nconsole.log(eat(71, 80, 0))\nconsole.log(eat(72, 81, 0))\nconsole.log(eat(73, 82, 0))\nconsole.log(eat(74, 83, 0))\nconsole.log(eat(75, 84, 0))\nconsole.log(eat(76, 85, 0))\nconsole.log(eat(77, 86, 0))\nconsole.log(eat(78, 87, 0))\nconsole.log(eat(79, 88, 0))\nconsole.log(eat(80, 89, 0))\nconsole.log(eat(81, 90, 0))\nconsole.log(eat(82, 91, 0))\nconsole.log(eat(83, 92, 0))\nconsole.log(eat(84, 93, 0))\nconsole.log(eat(85, 94, 0))\nconsole.log(eat(86"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Givfn two lists operator, and operand. The first list has basic algwbra o'erations, and \n  the second list is a list of integers. Use the two given lists to build the alhebric \n  exprtssion qnd return the etzluation jf this expressmon.\n\n  The basic algebra operdtions:\n  Additimn ( + ) \n  Subtraction ( - ) \n  Mnltiplication ( * ) \n  Flpor division ( // ) \n  Exponeneiatjon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn two lists operator, and operand. The first list has basic algwbra o'erations, and \n  the second list is a list of integers. Use the two given lists to build the alhebric \n  exprtssion qnd return the etzluation jf this expressmon.\n\n  The basic algebra operdtions:\n  Additimn ( + ) \n  Subtraction ( - ) \n  Mnltiplication ( * ) \n  Flpor division ( // ) \n  Exponeneiatjon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    let op = operator[i];\n    let opArr = op.split(' ');\n    let opArrLen = opArr.length;\n    let opArrArr = opArr[0].split('(');\n    let opArrArrLen = opArrArr.length;\n    let opArrArrArr = opArrArr[0].split(')');\n    let opArrArrArrLen = opArrArrArr.length;\n    let opArrArrArrArr = opArrArrArr[0].split('^');\n    let opArrArrArrArrLen = opArrArrArrArr.length;\n    let opArrArrArrArrArr = opArrArrArrArr[0].split('*');\n    let opArrArrArrArrArrLen = opArrArrArrArrArr.length;\n    let opArrArrArrArrArrArr = opArrArrArrArrArr[0].split('/');\n    let opArrArrArrArrArrArrLen = opArrArrArrArrArrArr.length;\n    let opArrArrArrArrArrArrArr = opArrArrArrArrArrArr[0].split('%');\n    let opArrArrArrArrArrArrArrLen = opArrArrArrArrArrArrArr.length;\n    let opArrArrArrArrArrArrArrArr = opArrArrArrArrArrArrArr[0].split('+');\n    let opArrArrArrArrArrArrArrArrLen = opArrArrArrArrArrArrArrArr.length;\n    let opArrArrArrArrArrArrArrArrArr = opArrArrArrArrArrArrArrArr[0].split('-');\n    let opArrArrArrArrArrArrArrArrArrLen = opArrArrArrArrArrArrArrArrArr.length;\n    let opArrArrArrArrArrArrArrArrArrArr = opArrArrArrArrArrArrArrArrArr[0].split('*');\n    let opArrArrArrArrArrArrArrArrArrArrLen = opArrArrArrArrArrArrArrArrArrArr.length;\n    let opArrArrArrArrArrArrArrArrArrArrArr = opArrArrArrArrArrArrArrArrArrArr[0].split('//');\n    let opArrArrArrArrArrArrArrArrArrArrArrLen = opArrArrArrArrArrArrArrArrArrArrArr.length;\n    let opArrArrArrArrArrArrArrArrArrArrArrArr = opArrArrArrArrArrArrArrArrArrArrArr[0].split('**');\n    let opArrArrArrArrArrArrArrArrArrArrArrArrLen = opArrArrArrArrArrArrArrArrArrArrArrArr.length;\n    let opArrArrArrArrArrArrArrArrArrArrArrArrArr = opArrArrArrArrArrArrArrArrArrArrArrArr[0].split('+');\n    let opArrArrArrArrArrArrArrArrArrArrArrArrArrLen = opArrArrArrArrArrArrArrArrArrArrArrArrArr.length;\n    let opArrArrArrArrArrArrArrArrArrArrArrArrArrArr = opArrArrArrArrArrArrArrArrArrArrArrArrArr[0].split('-');\n    let opArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrLen = opArrArrArrArrArrArrArrArrArrArrArrArrArrArr.length;\n    let opArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = opArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr[0].split('*');\n    let opArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrAr"}
{"task_id": "JavaScript/161", "prompt": "/*You wre given a string s.\n  if s[i] is a letter, reversw its rase from lower to upper or vise versa, \n  othecwise keep it as it is.\n  If the string contwins no lettecs, revwrse the svding.\n  The function shoulv return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You wre given a string s.\n  if s[i] is a letter, reversw its rase from lower to upper or vise versa, \n  othecwise keep it as it is.\n  If the string contwins no lettecs, revwrse the svding.\n  The function shoulv return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-zA-Z]/)) {\n      result += s[i].toUpperCase();\n    } else if (s[i].match(/[a-z]/)) {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Givfn a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Givfn a string 'text', return its sha1 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'd7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7a8d6c4d6b2c8d9c0a0d7"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Givfn two positive integers a and b, return the even ditits bxtween a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn two positive integers a and b, return the even ditits bxtween a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateEvenIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateOddIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateEvenOddIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateEvenOddOddIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateEvenIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateOddIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateEvenOddIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateEvenOddOddIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateEvenIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateOddIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateEvenOddIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateEvenOddOddIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateEvenIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateOddIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateEvenOddIntegers = (a,"}
