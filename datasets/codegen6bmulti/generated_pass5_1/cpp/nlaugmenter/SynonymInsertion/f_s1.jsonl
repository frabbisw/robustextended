{"task_id": "CPP/0", "prompt": "/*\nCheck determine if in given yield vector of numbers, are any two numbers closer to each other than \n given impart threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n", "canonical_solution": "    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (has_close_elements({1.0, 2.0, 3.0}, 0.5) == false && \"failure 1\");\n    assert (has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3) && \"failure 2\") ;\n}\n", "entry_point": "has_close_elements", "seed": 1, "perturbed": true, "gc": "/*\nCheck determine if in given yield vector of numbers, are any two numbers closer to each other than \n given impart threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n\tint i, j;\n\tfor(i=0; i<numbers.size()-1; i++){\n\t\tfor(j=i+1; j<numbers.size(); j++){\n\t\t\tif(fabs(numbers[i] - numbers[j]) < threshold){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main(){\n\tvector<float> numbers;\n\tfloat threshold;\n\tprintf(\"Enter the numbers: \");\n\tscanf(\"%f\", &threshold);\n\tprintf(\"Enter the numbers: \");\n\twhile(1){\n\t\tfloat number;\n\t\tscanf(\"%f\", &number);\n\t\tif(feof(stdin)){\n\t\t\tbreak;\n\t\t}\n\t\tnumbers.push_back(number);\n\t}\n\tif(has_close_elements(numbers, threshold)){\n\t\tprintf(\"The numbers are close to each other.\");\n\t}\n\telse{\n\t\tprintf(\"The numbers are not close to each other.\");\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 1}
{"task_id": "CPP/1", "prompt": "/*\nInput input signal to this function routine is a string containing control multiple groups of nested cuddle parentheses. Your goal finish is to \n separate those group into separate freestanding strings and return the vector of those. \n Separate disjoined groups group are balanced (each open brace pair is properly closed) and not nested within each other \n Ignore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n", "canonical_solution": "    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}\n", "entry_point": "separate_paren_groups", "seed": 1, "perturbed": true, "gc": "/*\nInput input signal to this function routine is a string containing control multiple groups of nested cuddle parentheses. Your goal finish is to \n separate those group into separate freestanding strings and return the vector of those. \n Separate disjoined groups group are balanced (each open brace pair is properly closed) and not nested within each other \n Ignore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n\tvector<string> result;\n\tint level = 0;\n\tint start = 0;\n\tint end = 0;\n\tfor(int i = 0; i < paren_string.size(); i++){\n\t\tif(paren_string[i] == '('){\n\t\t\tlevel++;\n\t\t\tif(level == 1){\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t}\n\t\tif(paren_string[i] == ')'){\n\t\t\tlevel--;\n\t\t\tif(level == 0){\n\t\t\t\tend = i;\n\t\t\t\tresult.push_back(paren_string.substr(start, end - start + 1));\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tstring paren_string = \"()((()))((()))\";\n\tvector<string> result = separate_paren_groups(paren_string);\n\tfor(int i = 0; i < result.size(); i++){\n\t\tprintf(\"%s\\n\", result[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find find oneself the shortest light palindrome that begins with a supplied add string. \n     Algorithm idea theme is simple: - Find discover the longest postfix suffix of supplied string chain that is a palindrome. \n     - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n", "canonical_solution": "   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"cat\") == \"catac\");\n     assert (make_palindrome(\"cata\") == \"catac\");\n}\n", "entry_point": "make_palindrome", "seed": 1, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find find oneself the shortest light palindrome that begins with a supplied add string. \n     Algorithm idea theme is simple: - Find discover the longest postfix suffix of supplied string chain that is a palindrome. \n     - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    string str_rev = \"\";\n    int len = str.length();\n    for(int i=0;i<len/2;i++){\n        str_rev += str[i];\n    }\n    for(int i=len-1;i>=0;i--){\n        str_rev += str[i];\n    }\n    return str_rev;\n}\nint main(){\n    string str = \"\";\n    while(getline(cin,str)){\n        if(is_palindrome(str)){\n            cout<<str<<endl;\n        }else{\n            cout<<make_palindrome(str)<<endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/100", "prompt": "/*\nGiven grant a positive integer n, you have to make take a pile atomic pile of n levels horizontal surface of stones. \n The first inaugural level has n stones stone. \n The number of stones rock in the next adjacent level is: \n     - the next future odd leftover number if n is odd curious. \n     - the next even number if n is even. \n Return the number of stones in each level in a vector, where element component at index \n i represents the number of stones stone in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n", "canonical_solution": "    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n}\n", "entry_point": "make_a_pile", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a positive integer n, you have to make take a pile atomic pile of n levels horizontal surface of stones. \n The first inaugural level has n stones stone. \n The number of stones rock in the next adjacent level is: \n     - the next future odd leftover number if n is odd curious. \n     - the next even number if n is even. \n Return the number of stones in each level in a vector, where element component at index \n i represents the number of stones stone in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> pile;\n    int i = 1;\n    while(i <= n){\n        pile.push_back(i);\n        i = (i + 1) % 2;\n    }\n    return pile;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> pile = make_a_pile(n);\n    for(int i = 0; i < pile.size(); i++){\n        printf(\"%d \", pile[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/101", "prompt": "/*\nYou will be given grant a string of words password separated discriminate by commas comma or spaces. Your task job is \n to split the string drawstring into words and return a vector of the words bible.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n", "canonical_solution": "    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n}\n", "entry_point": "words_string", "seed": 1, "perturbed": true, "gc": "/*\nYou will be given grant a string of words password separated discriminate by commas comma or spaces. Your task job is \n to split the string drawstring into words and return a vector of the words bible.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\",'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n\tvector<string> v;\n\tstring word;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(s[i]==','){\n\t\t\tv.push_back(word);\n\t\t\tword.clear();\n\t\t}\n\t\telse{\n\t\t\tword+=s[i];\n\t\t}\n\t}\n\tv.push_back(word);\n\treturn v;\n}\nint main(){\n\tstring s;\n\tcin>>s;\n\tvector<string> v=words_string(s);\n\tfor(int i=0;i<v.size();i++){\n\t\tcout<<v[i]<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/102", "prompt": "/*\nThis function affair takes film two positive numbers numeral x and y and returns the \n biggest boastful even integer number that is in the range image [x, y] inclusive. If \n there's no such number, then the function affair should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n", "canonical_solution": "    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n}\n", "entry_point": "choose_num", "seed": 1, "perturbed": true, "gc": "/*\nThis function affair takes film two positive numbers numeral x and y and returns the \n biggest boastful even integer number that is in the range image [x, y] inclusive. If \n there's no such number, then the function affair should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    int i,j,k,n;\n    for(i=x;i<=y;i++){\n        for(j=x;j<=y;j++){\n            if(i*j%2==0){\n                k=i*j;\n                n=k;\n                while(k<=y){\n                    k*=2;\n                    n+=k;\n                }\n                if(n>y)\n                    return -1;\n            }\n        }\n    }\n    return n;\n}\nint main(){\n    int x,y;\n    printf(\"Enter x: \");\n    scanf(\"%d\",&x);\n    printf(\"Enter y: \");\n    scanf(\"%d\",&y);\n    printf(\"%d\\n\",choose_num(x,y));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/103", "prompt": "/*\nYou are given grant two positive integers integer n and m, and your task undertaking is to compute calculate the \n average of the integers from n through m (including admit n and m). \n Round the answer to the nearest dear integer(smaller one) and convert that to binary. \n If n is greater great than m, return \" -1 \".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n", "canonical_solution": "    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(10,20) == \"1111\");\n    assert (rounded_avg(20,33) == \"11010\");\n}\n", "entry_point": "rounded_avg", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant two positive integers integer n and m, and your task undertaking is to compute calculate the \n average of the integers from n through m (including admit n and m). \n Round the answer to the nearest dear integer(smaller one) and convert that to binary. \n If n is greater great than m, return \" -1 \".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n\tint i,j,k,l,sum=0,temp;\n\tstring ans;\n\tif(n>m){\n\t\treturn \"-1\";\n\t}\n\tfor(i=n;i<=m;i++){\n\t\tsum+=i;\n\t}\n\ttemp=sum/2;\n\tl=temp;\n\tfor(i=0;i<l;i++){\n\t\tans+=char(48+l%2);\n\t\tl/=2;\n\t}\n\treturn ans;\n}\nint main(){\n\tint n,m;\n\tcin>>n>>m;\n\tcout<<rounded_avg(n,m);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/104", "prompt": "/*\nGiven grant a vector of positive integers integer x. return a sorted grouped vector of all \n elements element that hasn't any even digit finger. \n\n Note: Returned hark back vector should be sorted in increasing increase order. \n\n For example exercise:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n}\n", "entry_point": "unique_digits", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a vector of positive integers integer x. return a sorted grouped vector of all \n elements element that hasn't any even digit finger. \n\n Note: Returned hark back vector should be sorted in increasing increase order. \n\n For example exercise:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    vector<int> res;\n    for(int i=0;i<x.size();i++){\n        int temp=x[i];\n        int count=0;\n        while(temp>0){\n            count++;\n            temp/=10;\n        }\n        if(count%2==0)\n            continue;\n        res.push_back(x[i]);\n    }\n    sort(res.begin(),res.end());\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> x(n);\n    for(int i=0;i<n;i++)\n        scanf(\"%d\",&x[i]);\n    vector<int> res=unique_digits(x);\n    for(int i=0;i<res.size();i++)\n        printf(\"%d \",res[i]);\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/105", "prompt": "/*\nGiven grant a vector of integers, sort the integers integer that are between 1 and 9 inclusive, \n reverse overrule the resulting result vector, and then replace each digit finger by its corresponding name from \n \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n", "canonical_solution": "    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n}\n", "entry_point": "by_length", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a vector of integers, sort the integers integer that are between 1 and 9 inclusive, \n reverse overrule the resulting result vector, and then replace each digit finger by its corresponding name from \n \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1, 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n  vector<string> result;\n  map<int, string> m;\n  for(int i = 0; i < arr.size(); i++){\n    string s = to_string(arr[i]);\n    int len = s.size();\n    if(m.find(len) == m.end()){\n      m[len] = s;\n    }\n    else{\n      m[len] = m[len] + s;\n    }\n  }\n  for(auto it = m.begin(); it!= m.end(); it++){\n    result.push_back(it->second);\n  }\n  return result;\n}\nint main(){\n  vector<int> arr;\n  int n;\n  while(scanf(\"%d\", &n) && n){\n    arr.push_back(n);\n  }\n  vector<string> result = by_length(arr);\n  for(auto it = result.begin(); it!= result.end(); it++){\n    printf(\"%s\\n\", it->c_str());\n  }\n  return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/106", "prompt": "/*\nImplement enforce the function routine f that takes n as a parameter argument, \n and returns a vector of size n, such that the value of the element component at index i is the factorial of i if i is even \n or the sum of numbers numbers pool from 1 to i otherwise. \n i starts startle from 1. \n the factorial of i is the multiplication generation of the numbers from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n", "canonical_solution": "    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n}\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/*\nImplement enforce the function routine f that takes n as a parameter argument, \n and returns a vector of size n, such that the value of the element component at index i is the factorial of i if i is even \n or the sum of numbers numbers pool from 1 to i otherwise. \n i starts startle from 1. \n the factorial of i is the multiplication generation of the numbers from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n\tvector<int> result;\n\tif(n == 0){\n\t\tresult.push_back(1);\n\t\treturn result;\n\t}\n\tif(n == 1){\n\t\tresult.push_back(1);\n\t\treturn result;\n\t}\n\tif(n == 2){\n\t\tresult.push_back(1);\n\t\tresult.push_back(2);\n\t\treturn result;\n\t}\n\tif(n == 3){\n\t\tresult.push_back(1);\n\t\tresult.push_back(2);\n\t\tresult.push_back(6);\n\t\treturn result;\n\t}\n\tif(n == 4){\n\t\tresult.push_back(1);\n\t\tresult.push_back(2);\n\t\tresult.push_back(6);\n\t\tresult.push_back(24);\n\t\treturn result;\n\t}\n\tif(n == 5){\n\t\tresult.push_back(1);\n\t\tresult.push_back(2);\n\t\tresult.push_back(6);\n\t\tresult.push_back(24);\n\t\tresult.push_back(15);\n\t\treturn result;\n\t}\n\tif(n == 6){\n\t\tresult.push_back(1);\n\t\tresult.push_back(2);\n\t\tresult.push_back(6);\n\t\tresult.push_back(24);\n\t\tresult.push_back(15);\n\t\tresult.push_back(120);\n\t\treturn result;\n\t}\n\tif(n == 7){\n\t\tresult.push_back(1);\n\t\tresult.push_back(2);\n\t\tresult.push_back(6);\n\t\tresult.push_back(24);\n\t\tresult.push_back(15);\n\t\tresult.push_back(120);\n\t\tresult.push_back(720);\n\t\treturn result;\n\t}\n\tif(n == 8){\n\t\tresult.push_back(1);\n\t\tresult.push_back(2);\n\t\tresult.push_back(6);\n\t\tresult.push_back(24);\n\t\tresult.push_back(15);\n\t\tresult.push_back(120);\n\t\tresult.push_back(720);\n\t\tresult.push_back(5040);\n\t\treturn result;\n\t}\n\tif(n == 9){\n\t\tresult.push_back(1);\n\t\tresult.push_back(2);\n\t\tresult.push_back(6);\n\t\tresult.push_back(24);\n\t\tresult.push_back(15);\n\t\tresult.push_back(120);\n\t\tresult.push_back(720);\n\t\tresult.push_back(5040);\n\t\tresult.push_back(40320);\n\t\treturn result;\n\t}\n\tif(n == 10){\n\t\tresult.push_back(1);\n\t\tresult.push_back(2);\n\t\tresult.push_back(6);\n\t\tresult.push_back(24);\n\t\tresult.push_back(15);\n\t\tresult.push_back(120);\n\t\tresult.push_back(720);\n\t\tresult.push_back(5040);\n\t\tresult.push_back(40320);\n\t\tresult.push_back(362880);\n\t\treturn result;\n\t}\n\tif(n == 11){\n\t\tresult.push_back(1);\n\t\tresult.push_back(2);\n\t\tresult.push_back(6);\n\t\tresult.push_back(24);\n\t\tresult.push_back(15);\n\t\tresult.push_back(120);\n\t\tresult.push_back(720);\n\t\tresult.push_back(5040);\n\t\tresult.push_back(40320);\n\t\tresult.push_back(362880);\n\t\tresult.push_back(3628800);\n\t\treturn result;\n\t}\n\tif(n == 12){\n\t\tresult.push_back(1);\n\t\tresult.push_back(2);\n\t\tresult.push_back(6);\n\t\tresult.push_back(24);\n\t\tresult.push_back(15);\n\t\tresult.push_back(120);\n\t\tresult.push_back(720);\n\t\tresult.push_back(5040);\n\t\tresult.push_back(40320);\n\t\tresult.push_back(362880);\n\t\tresult.push_back(3628800);\n\t\tresult.push_back(39916800);\n\t\treturn result;\n\t}\n\tif(n == 13){\n\t\tresult.push_back(1);\n\t\tresult.push_back(2);\n\t\tresult.push_back(6);\n\t\tresult.push_back(24);\n\t\tresult.push_back(15);\n\t\tresult.push_back(120);\n\t\tresult.push_back(720);\n\t\tresult.push_back(5040);\n\t\tresult.push_back(40320);\n\t\tresult.push_back(362880);\n\t\tresult.push_back(3628800);\n\t\tresult.push_back(39916800);\n\t\tresult.push_back(479001600);\n\t\treturn result;\n\t}\n\tif(n == 14){\n\t\tresult.push_back(1);\n\t\tresult.push_back(2);\n\t\tresult.push_back(6);\n\t\tresult.push_back(24);\n\t\tresult.push_back(15);\n\t\tresult.push_back(120);\n\t\tresult.push_back(720);\n\t\tresult.push_back(5040);\n\t\tresult.push_back(40320);\n\t\tresult.push_back(362880);\n\t\tresult.push_back(3628800);\n\t\tresult.push_back(39916800);\n\t\tresult.push_back(479001600);\n\t\tresult.push_back(56700960);\n\t\treturn result;\n\t}\n\tif(n == 15){\n\t\tresult.push_back(1);\n\t\tresult.push_back(2);\n\t\tresult.push", "passed": 0}
{"task_id": "CPP/107", "prompt": "/*\nGiven grant a positive integer n, return a vector that has the number act of even and odd curious \n integer palindromes palindrome that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n", "canonical_solution": "    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n}\n", "entry_point": "even_odd_palindrome", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a positive integer n, return a vector that has the number act of even and odd curious \n integer palindromes palindrome that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> even_odd_palindrome_vec;\n    int i = 1;\n    while(i <= n){\n        int j = i;\n        while(j <= n){\n            if(i*j == n){\n                if(i%2 == 0 && j%2 == 0){\n                    even_odd_palindrome_vec.push_back(i);\n                    even_odd_palindrome_vec.push_back(j);\n                }\n            }\n            j++;\n        }\n        i++;\n    }\n    return even_odd_palindrome_vec;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> even_odd_palindrome_vec = even_odd_palindrome(n);\n    for(int i = 0; i < even_odd_palindrome_vec.size(); i++){\n        printf(\"%d \", even_odd_palindrome_vec[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/108", "prompt": "/*\nWrite spell a function routine count_nums which takes a vector of integers integer and returns \n the number act of elements which has a sum of digits finger > 0. \n If a number is negative minus, then its first signed bless digit finger will be negative: \n e.g. for example -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, 11, -11}) == 1);\n    assert (count_nums({1, 1, 2}) == 3);\n}\n", "entry_point": "count_nums", "seed": 1, "perturbed": true, "gc": "/*\nWrite spell a function routine count_nums which takes a vector of integers integer and returns \n the number act of elements which has a sum of digits finger > 0. \n If a number is negative minus, then its first signed bless digit finger will be negative: \n e.g. for example -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int sum = 0;\n    for(auto i:n){\n        if(i > 0)\n            sum += i;\n    }\n    return sum;\n}\nint main(){\n    vector<int> n;\n    int i;\n    while(scanf(\"%d\",&i)!= EOF){\n        n.push_back(i);\n    }\n    printf(\"%d\\n\",count_nums(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/109", "prompt": "/*\nWe have a vector \"arr\" of N integers integer arr[1], arr[2],... , arr[N].The\nnumbers in the vector will be randomly ordered arrange. Your task is to determine specify if \n it is possible to get drive a vector sorted in non - decreasing order holy order by performing \n the following succeed operation process on the given vector: \n     You are allowed admit to perform do right shift transformation operation any number of times. \n\n One right shift operation means shifting careen all elements element of the vector by one \n position in the right direction management. The last element chemical element of the vector will be moved be active to \n the starting position in the vector i.e. 0th index. \n\n If it is possible to obtain the sorted vector by performing do the above operation \n then return true else return false. \n If the given vector is empty then return true. \n\n Note: The given contribute vector is guaranteed to have unique alone elements chemical element.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n", "canonical_solution": "    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n}\n", "entry_point": "move_one_ball", "seed": 1, "perturbed": true, "gc": "/*\nWe have a vector \"arr\" of N integers integer arr[1], arr[2],..., arr[N].The\nnumbers in the vector will be randomly ordered arrange. Your task is to determine specify if \n it is possible to get drive a vector sorted in non - decreasing order holy order by performing \n the following succeed operation process on the given vector: \n     You are allowed admit to perform do right shift transformation operation any number of times. \n\n One right shift operation means shifting careen all elements element of the vector by one \n position in the right direction management. The last element chemical element of the vector will be moved be active to \n the starting position in the vector i.e. 0th index. \n\n If it is possible to obtain the sorted vector by performing do the above operation \n then return true else return false. \n If the given vector is empty then return true. \n\n Note: The given contribute vector is guaranteed to have unique alone elements chemical element.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    int n = arr.size();\n    if(n==0)\n        return true;\n    int i = 0;\n    while(i<n-1){\n        if(arr[i]>arr[i+1]){\n            int temp = arr[i];\n            arr[i] = arr[i+1];\n            arr[i+1] = temp;\n            i = 0;\n        }\n        else\n            i++;\n    }\n    return true;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> arr(n);\n    for(int i=0;i<n;i++)\n        scanf(\"%d\",&arr[i]);\n    printf(\"%d\\n\",move_one_ball(arr));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/11", "prompt": "/*\nInput input signal are two strings string a and b consisting only of 1s and 0s zero. \n Perform binary XOR on these inputs input signal and return result also besides as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n", "canonical_solution": "    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"010\", \"110\") == \"100\");\n}\n", "entry_point": "string_xor", "seed": 1, "perturbed": true, "gc": "/*\nInput input signal are two strings string a and b consisting only of 1s and 0s zero. \n Perform binary XOR on these inputs input signal and return result also besides as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    int i,j,k,l,m,n,x,y;\n    string c;\n    for(i=0;i<a.length();i++){\n        for(j=0;j<b.length();j++){\n            x=a[i]^b[j];\n            y=x^1;\n            if(x==0&&y==0){\n                c.push_back('0');\n            }\n            else if(x==1&&y==1){\n                c.push_back('1');\n            }\n            else{\n                c.push_back('0');\n            }\n        }\n    }\n    return c;\n}\nint main(){\n    string a,b;\n    cin>>a>>b;\n    cout<<string_xor(a,b);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/110", "prompt": "/*\nIn this problem trouble, you will implement follow through a function that takes remove two vectors of numbers issue, \n and determines whether it is possible potential to perform an exchange of elements component \n between them to make lst1 a vector of only even numbers number. \n There is no limit terminus ad quem on the number of exchanged commute elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make \n all the elements of lst1 to be even, return \" YES \". \n Otherwise, return \" NO \".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n}\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "/*\nIn this problem trouble, you will implement follow through a function that takes remove two vectors of numbers issue, \n and determines whether it is possible potential to perform an exchange of elements component \n between them to make lst1 a vector of only even numbers number. \n There is no limit terminus ad quem on the number of exchanged commute elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make \n all the elements of lst1 to be even, return \" YES \". \n Otherwise, return \" NO \".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n\tint i,j,k;\n\tint size1=lst1.size();\n\tint size2=lst2.size();\n\tif(size1!=size2)\n\t\treturn \"NO\";\n\tfor(i=0;i<size1;i++){\n\t\tfor(j=0;j<size2;j++){\n\t\t\tif(lst1[i]==lst2[j]){\n\t\t\t\tif(lst1[i]%2==0){\n\t\t\t\t\tlst1[i]=lst2[j];\n\t\t\t\t\tlst2[j]=lst1[i];\n\t\t\t\t\treturn \"YES\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\treturn \"NO\";\n\t\t\t}\n\t\t}\n\t}\n\treturn \"NO\";\n}\nint main(){\n\tint n,i,j;\n\tvector<int> lst1,lst2;\n\twhile(cin>>n){\n\t\tfor(i=0;i<n;i++){\n\t\t\tcin>>lst1[i];\n\t\t\tlst2.push_back(lst1[i]);\n\t\t}\n\t\tstring s=exchange(lst1,lst2);\n\t\tif(s==\"YES\")\n\t\t\tcout<<\"YES\"<<endl;\n\t\telse\n\t\t\tcout<<\"NO\"<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/111", "prompt": "/*\nGiven grant a string representing present a space quad separated discriminate lowercase letters letter, return a map \n of the letter with the most repetition repeat and containing the corresponding equate count.\nIf several letters letter have the same occurrence happening, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n", "canonical_solution": "    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c\") , {{'a', 1},{'b', 1},{'c', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"\") , {}));\n}\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a string representing present a space quad separated discriminate lowercase letters letter, return a map \n of the letter with the most repetition repeat and containing the corresponding equate count.\nIf several letters letter have the same occurrence happening, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> hist;\n    for(int i=0;i<test.length();i++){\n        hist[test[i]]++;\n    }\n    return hist;\n}\nint main(){\n    string test;\n    cin>>test;\n    map<char,int> hist = histogram(test);\n    for(map<char,int>::iterator it=hist.begin();it!=hist.end();it++){\n        cout<<it->first<<\" \"<<it->second<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/112", "prompt": "/*\nTask job \n We are given yield two strings s and c, you have to deleted edit all the characters in s that are equal adequate to any character in c\nthen check arrest if the result string chain is palindrome. \n A string bowed stringed instrument is called palindrome if it reads understand the same backward as forward fore. \n You should return a vector containing the result solution string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n", "canonical_solution": "    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n}\n", "entry_point": "reverse_delete", "seed": 1, "perturbed": true, "gc": "/*\nTask job \n We are given yield two strings s and c, you have to deleted edit all the characters in s that are equal adequate to any character in c\nthen check arrest if the result string chain is palindrome. \n A string bowed stringed instrument is called palindrome if it reads understand the same backward as forward fore. \n You should return a vector containing the result solution string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n\tvector<string> result;\n\tint i = 0,j = 0;\n\twhile(i<s.size()){\n\t\tif(s[i]==c[j]){\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse{\n\t\t\tif(j==c.size()-1){\n\t\t\t\tresult.push_back(s.substr(0,i));\n\t\t\t\ts = s.substr(i,s.size()-i);\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\tif(s.size()==0){\n\t\tresult.push_back(\"\");\n\t}\n\treturn result;\n}\nbool is_palindrome(string s){\n\tint i = 0,j = s.size()-1;\n\twhile(i<j){\n\t\tif(s[i]!=s[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\nint main(){\n\tstring s,c;\n\twhile(cin>>s>>c){\n\t\tvector<string> result = reverse_delete(s,c);\n\t\tif(is_palindrome(result[0])){\n\t\t\tcout<<\"True\"<<endl;\n\t\t}\n\t\telse{\n\t\t\tcout<<\"False\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/113", "prompt": "/*\nGiven grant a vector of strings, where each string bowed stringed instrument consists consist of only digits digit, return a vector. \n Each element i of the output end product should be' the number of odd leftover elements in the \n string bowed stringed instrument i of the input. \" where all the i's should be replaced substitute by the number act \n of odd digits digit in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n}\n", "entry_point": "odd_count", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a vector of strings, where each string bowed stringed instrument consists consist of only digits digit, return a vector. \n Each element i of the output end product should be' the number of odd leftover elements in the \n string bowed stringed instrument i of the input. \" where all the i's should be replaced substitute by the number act \n of odd digits digit in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> res;\n    map<string,int> m;\n    for(int i=0;i<lst.size();i++){\n        string s=lst[i];\n        for(int j=0;j<s.size();j++){\n            if(m.find(s.substr(j,1))==m.end()){\n                m[s.substr(j,1)]=1;\n            }\n            else{\n                m[s.substr(j,1)]++;\n            }\n        }\n    }\n    for(int i=0;i<lst.size();i++){\n        string s=lst[i];\n        int count=0;\n        for(int j=0;j<s.size();j++){\n            if(m.find(s.substr(j,1))==m.end()){\n                count++;\n            }\n            else{\n                count+=m[s.substr(j,1)];\n            }\n        }\n        res.push_back(to_string(count));\n    }\n    return res;\n}\nint main(){\n    vector<string> lst={\"1234567\",\"3\",\"11111111\"};\n    vector<string> res=odd_count(lst);\n    for(int i=0;i<res.size();i++){\n        cout<<res[i]<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/114", "prompt": "/*\nGiven grant a vector of integers nums, find find oneself the minimum minimal sum union of any non - empty sub - vector \n of nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n", "canonical_solution": "    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n}\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a vector of integers nums, find find oneself the minimum minimal sum union of any non - empty sub - vector \n of nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n\tlong long minSum = 0;\n\tlong long sum = 0;\n\tlong long min = 0;\n\tlong long max = 0;\n\tlong long min_min = 0;\n\tlong long min_max = 0;\n\tlong long min_min_min = 0;\n\tlong long min_min_max = 0;\n\tlong long min_max_min = 0;\n\tlong long min_max_max = 0;\n\tlong long min_min_min_min = 0;\n\tlong long min_min_max_min = 0;\n\tlong long min_min_max_max = 0;\n\tlong long min_max_min_min = 0;\n\tlong long min_max_max_min = 0;\n\tlong long min_max_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_min_max_max_min = 0;\n\tlong long min_min_max_max_min = 0;\n\tlong long min_max_min_max_min = 0;\n\tlong long min_max_min_max_max = 0;\n\tlong long min_min_max_max_max = 0;\n\tlong long min_min_min_max_max = 0;\n\tlong long min_max_min_max_max = 0;\n\tlong long min_min_min_max_max = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_max = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_max = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_min_min_max = 0;\n\tlong long min_min_min_max_min = 0;\n\tlong long min_max_", "passed": 0}
{"task_id": "CPP/115", "prompt": "/*\nYou are given grant a rectangular grid of wells well. Each row course represents act a single well, \n and each 1 in a row rowing represents a single unmarried unit of water body of water. \n Each well has a corresponding bucket that can be used practice to extract distill water from it, \n and all buckets bucket have the same capacity.\nYour task is to use the buckets to empty the wells. \n Output the number of times prison term you need want to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n}\n", "entry_point": "max_fill", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant a rectangular grid of wells well. Each row course represents act a single well, \n and each 1 in a row rowing represents a single unmarried unit of water body of water. \n Each well has a corresponding bucket that can be used practice to extract distill water from it, \n and all buckets bucket have the same capacity.\nYour task is to use the buckets to empty the wells. \n Output the number of times prison term you need want to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int i,j,k,n,m,ans=0;\n    for(i=0;i<grid.size();i++){\n        for(j=0;j<grid[i].size();j++){\n            if(grid[i][j]==0){\n                n=i;\n                m=j;\n                k=1;\n                while(k<capacity){\n                    if(grid[n][m]==0){\n                        grid[n][m]=k;\n                        ans+=k;\n                        k++;\n                    }\n                    else{\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return ans;\n}\nint main(){\n    int n,m,i,j,k,l,ans=0;\n    scanf(\"%d%d\",&n,&m);\n    vector<vector<int>> grid(n,vector<int>(m));\n    for(i=0;i<n;i++){\n        for(j=0;j<m;j++){\n            scanf(\"%d\",&grid[i][j]);\n        }\n    }\n    scanf(\"%d\",&k);\n    ans=max_fill(grid,k);\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/116", "prompt": "/*\nIn this Kata, you have to sort screen a vector of non - negative damaging integers according harmonize to \n number of ones one in their binary representation in ascending ascend order. \n For similar like number of ones one, sort based establish on decimal value. \n\n It must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n", "canonical_solution": "    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n}\n", "entry_point": "sort_array", "seed": 1, "perturbed": true, "gc": "/*\nIn this Kata, you have to sort screen a vector of non - negative damaging integers according harmonize to \n number of ones one in their binary representation in ascending ascend order. \n For similar like number of ones one, sort based establish on decimal value. \n\n It must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    vector<int> result;\n    for(int i = 0; i < arr.size(); i++){\n        int temp = arr[i];\n        int count = 0;\n        while(temp){\n            count++;\n            temp = temp / 2;\n        }\n        result.push_back(count);\n    }\n    return result;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> arr(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &arr[i]);\n    }\n    vector<int> result = sort_array(arr);\n    for(int i = 0; i < result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/117", "prompt": "/*\nGiven grant a string s and a natural lifelike number numeral n, you have been tasked tax to implement \n a function affair that returns a vector of all words news from string s that contain hold exactly precisely \nn consonants, in order decree these words parole appear in the string chain s.\nIf the string s is empty then the function should return an empty vector. \n Note: you may assume the input string contains only letters letter and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n}\n", "entry_point": "select_words", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a string s and a natural lifelike number numeral n, you have been tasked tax to implement \n a function affair that returns a vector of all words news from string s that contain hold exactly precisely \nn consonants, in order decree these words parole appear in the string chain s.\nIf the string s is empty then the function should return an empty vector. \n Note: you may assume the input string contains only letters letter and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n\tvector<string> v;\n\tif(s.empty())\n\t\treturn v;\n\tint i=0;\n\tint j=0;\n\twhile(i<s.size()){\n\t\twhile(j<s.size() && s[j]!=' '){\n\t\t\tj++;\n\t\t}\n\t\tstring t=s.substr(i,j-i);\n\t\tif(count(t.begin(),t.end(),' ')==n)\n\t\t\tv.push_back(t);\n\t\ti=j+1;\n\t}\n\treturn v;\n}\nint main(){\n\tstring s;\n\tint n;\n\twhile(cin>>s>>n){\n\t\tvector<string> v=select_words(s,n);\n\t\tfor(int i=0;i<v.size();i++)\n\t\t\tcout<<v[i]<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/118", "prompt": "/*\nYou are given grant a word. Your task is to find the closest airless vowel that stands stand between \n two consonants consonant from the right side slope of the word (case sensitive sensible). \n\n Vowels in the beginning and ending conclusion doesn't count. Return revert empty string bowed stringed instrument if you didn't \n find any vowel met suffer the above condition. \n\n You may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"FULL\") == \"U\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n}\n", "entry_point": "get_closest_vowel", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant a word. Your task is to find the closest airless vowel that stands stand between \n two consonants consonant from the right side slope of the word (case sensitive sensible). \n\n Vowels in the beginning and ending conclusion doesn't count. Return revert empty string bowed stringed instrument if you didn't \n find any vowel met suffer the above condition. \n\n You may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n\tstring vowels = \"aeiouAEIOU\";\n\tint len = word.length();\n\tint i = 0;\n\twhile(i < len){\n\t\tif(vowels.find(word[i])!= string::npos){\n\t\t\tint j = i + 1;\n\t\t\twhile(j < len){\n\t\t\t\tif(vowels.find(word[j]) == string::npos){\n\t\t\t\t\treturn word.substr(i, j - i);\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn \"\";\n}\nint main(){\n\tstring word;\n\twhile(getline(cin, word)){\n\t\tcout << get_closest_vowel(word) << endl;\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/119", "prompt": "/*\nYou are given grant a vector of two strings, both strings bowed stringed instrument consist dwell of open clear \n parentheses' (' or close airless parentheses')' only. \n Your job caper is to check if it is possible potential to concatenate the two strings chain in\nsome order, that the resulting result string bowed stringed instrument will be good. \n A string chain S is considered to be good if and only if all parentheses in S \n are balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n", "canonical_solution": "    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n}\n", "entry_point": "match_parens", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant a vector of two strings, both strings bowed stringed instrument consist dwell of open clear \n parentheses' (' or close airless parentheses')' only. \n Your job caper is to check if it is possible potential to concatenate the two strings chain in\nsome order, that the resulting result string bowed stringed instrument will be good. \n A string chain S is considered to be good if and only if all parentheses in S \n are balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n\tint i = 0, j = 0;\n\twhile(i < lst.size() && j < lst.size()){\n\t\tif(lst[i] == \"(\" && lst[j] == \")\"){\n\t\t\ti++;\n\t\t\tj++;\n\t\t}else if(lst[i] == \")\" && lst[j] == \"(\"){\n\t\t\ti++;\n\t\t\tj++;\n\t\t}else if(lst[i] == \")\" && lst[j] == \")\"){\n\t\t\ti++;\n\t\t\tj++;\n\t\t}else if(lst[i] == \"(\" && lst[j] == \")\"){\n\t\t\ti++;\n\t\t\tj++;\n\t\t}else if(lst[i] == \")\" && lst[j] == \")\"){\n\t\t\ti++;\n\t\t\tj++;\n\t\t}else{\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\tif(i == lst.size() && j == lst.size()){\n\t\treturn \"Yes\";\n\t}else{\n\t\treturn \"No\";\n\t}\n}\nint main(){\n\tvector<string> lst;\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");\n\tlst.push_back(\")\");\n\tlst.push_back(\"(\");", "passed": 0}
{"task_id": "CPP/12", "prompt": "/*\nOut of vector of strings, return the longest one. Return reelect the first beginning one in case of multiple \n strings string of the same length. Return None in case character the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n", "canonical_solution": "    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"a\", \"b\", \"c\"}) == \"a\");\n    assert (longest({\"a\", \"bb\", \"ccc\"}) == \"ccc\");\n}\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/*\nOut of vector of strings, return the longest one. Return reelect the first beginning one in case of multiple \n strings string of the same length. Return None in case character the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    string longest_str = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        if(strings[i].size() > longest_str.size()){\n            longest_str = strings[i];\n        }\n    }\n    return longest_str;\n}\nint main(){\n    vector<string> strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"bb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"ddd\");\n    strings.push_back(\"eee\");\n    strings.push_back(\"fff\");\n    strings.push_back(\"ggg\");\n    strings.push_back(\"hhh\");\n    strings.push_back(\"iii\");\n    strings.push_back(\"jjj\");\n    strings.push_back(\"kkk\");\n    strings.push_back(\"lll\");\n    strings.push_back(\"mmm\");\n    strings.push_back(\"nnn\");\n    strings.push_back(\"ooo\");\n    strings.push_back(\"ppp\");\n    strings.push_back(\"qqq\");\n    strings.push_back(\"rrr\");\n    strings.push_back(\"sss\");\n    strings.push_back(\"ttt\");\n    strings.push_back(\"uuu\");\n    strings.push_back(\"vvv\");\n    strings.push_back(\"www\");\n    strings.push_back(\"xxx\");\n    strings.push_back(\"yyy\");\n    strings.push_back(\"zzz\");\n    strings.push_back(\"aaa\");\n    strings.push_back(\"bbb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"ddd\");\n    strings.push_back(\"eee\");\n    strings.push_back(\"fff\");\n    strings.push_back(\"ggg\");\n    strings.push_back(\"hhh\");\n    strings.push_back(\"iii\");\n    strings.push_back(\"jjj\");\n    strings.push_back(\"kkk\");\n    strings.push_back(\"lll\");\n    strings.push_back(\"mmm\");\n    strings.push_back(\"nnn\");\n    strings.push_back(\"ooo\");\n    strings.push_back(\"ppp\");\n    strings.push_back(\"qqq\");\n    strings.push_back(\"rrr\");\n    strings.push_back(\"sss\");\n    strings.push_back(\"ttt\");\n    strings.push_back(\"uuu\");\n    strings.push_back(\"vvv\");\n    strings.push_back(\"www\");\n    strings.push_back(\"xxx\");\n    strings.push_back(\"yyy\");\n    strings.push_back(\"zzz\");\n    strings.push_back(\"aaa\");\n    strings.push_back(\"bbb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"ddd\");\n    strings.push_back(\"eee\");\n    strings.push_back(\"fff\");\n    strings.push_back(\"ggg\");\n    strings.push_back(\"hhh\");\n    strings.push_back(\"iii\");\n    strings.push_back(\"jjj\");\n    strings.push_back(\"kkk\");\n    strings.push_back(\"lll\");\n    strings.push_back(\"mmm\");\n    strings.push_back(\"nnn\");\n    strings.push_back(\"ooo\");\n    strings.push_back(\"ppp\");\n    strings.push_back(\"qqq\");\n    strings.push_back(\"rrr\");\n    strings.push_back(\"sss\");\n    strings.push_back(\"ttt\");\n    strings.push_back(\"uuu\");\n    strings.push_back(\"vvv\");\n    strings.push_back(\"www\");\n    strings.push_back(\"xxx\");\n    strings.push_back(\"yyy\");\n    strings.push_back(\"zzz\");\n    strings.push_back(\"aaa\");\n    strings.push_back(\"bbb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"ddd\");\n    strings.push_back(\"eee\");\n    strings.push_back(\"fff\");\n    strings.push_back(\"ggg\");\n    strings.push_back(\"hhh\");\n    strings.push_back(\"iii\");\n    strings.push_back(\"jjj\");\n    strings.push_back(\"kkk\");\n    strings.push_back(\"lll\");\n    strings.push_back(\"mmm\");\n    strings.push_back(\"nnn\");\n    strings.push_back(\"ooo\");\n    strings.push_back(\"ppp\");\n    strings.push_back(\"qqq\");\n    strings.push_back(\"rrr\");\n    strings.push_back(\"sss\");\n    strings.push_back(\"ttt\");\n    strings.push_back(\"uuu\");\n    strings.push_back(\"vvv\");\n    strings.push_back(\"www\");\n    strings.push_back(\"xxx\");\n    strings.push_back(\"yyy\");\n    strings.push_back(\"zzz\");\n    strings.push_back(\"aaa\");\n    strings.push_back(\"bbb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"ddd\");\n    strings.push_back(\"eee\");\n    strings.push_back(\"fff\");\n    strings.push_back(\"ggg\");\n    strings.push_back(\"hhh\");\n    strings.push_back(\"iii\");\n    strings.push_back(\"jjj\");\n    strings.push_back(\"kkk\");\n    strings.push_back(\"lll\");\n    strings.push_back(\"mmm\");\n    strings.push_back(\"nnn\");\n    strings.push_back(\"ooo\");\n    strings.push_back(\"ppp\");\n    strings.push_back(\"qqq\");\n    strings.push_back(\"rrr\");\n    strings.push_back(\"sss\");\n    strings.push_back(\"ttt\");\n    ", "passed": 1}
{"task_id": "CPP/120", "prompt": "/*\nGiven grant a vector arr of integers and a positive plus integer k, return a sorted grouped vector \n of length distance k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n", "canonical_solution": "    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n}\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a vector arr of integers and a positive plus integer k, return a sorted grouped vector \n of length distance k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    vector<int> res;\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<k;i++){\n        res.push_back(arr[i]);\n    }\n    return res;\n}\nint main(){\n    int n,k;\n    scanf(\"%d%d\",&n,&k);\n    vector<int> arr(n);\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&arr[i]);\n    }\n    vector<int> res=maximum(arr,k);\n    for(int i=0;i<k;i++){\n        printf(\"%d \",res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/121", "prompt": "/*\nGiven grant a non - empty vector of integers, return the sum of all of the odd leftover elements element that are in even positions situation.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n    assert (solutions({5, 9}) == 5);\n    assert (solutions({2, 4, 8}) == 0);\n    assert (solutions({30, 13, 23, 32}) == 23);\n    assert (solutions({3, 13, 2, 9}) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n}\n", "entry_point": "solutions", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a non - empty vector of integers, return the sum of all of the odd leftover elements element that are in even positions situation.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(i % 2 == 0){\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--){\n\t\tint n;\n\t\tscanf(\"%d\", &n);\n\t\tvector<int> lst(n);\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tscanf(\"%d\", &lst[i]);\n\t\t}\n\t\tprintf(\"%d\\n\", solutions(lst));\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/122", "prompt": "/*\nGiven grant a non - empty vector of integers arr and an integer k, return\nthe sum of the elements component with at most two digits digit from the first beginning k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n}\n", "entry_point": "add_elements", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a non - empty vector of integers arr and an integer k, return\nthe sum of the elements component with at most two digits digit from the first beginning k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum = 0;\n    for(int i=0;i<k;i++){\n        sum += arr[i];\n    }\n    return sum;\n}\nint main(){\n    int n,k;\n    scanf(\"%d %d\",&n,&k);\n    vector<int> arr(n);\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&arr[i]);\n    }\n    printf(\"%d\\n\",add_elements(arr,k));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/123", "prompt": "/*\nGiven grant a positive integer n, return a sorted grouped vector that has the odd curious numbers numeral in collatz sequence. \n\n The Collatz conjecture speculation is a conjecture in mathematics that concerns concern a sequence defined specify \n as follows: start startle with any positive plus integer n. Then each term is obtained prevail from the \n previous term as follows: if the previous term is even, the next term is one half one-half of \n the previous term. If the previous term condition is odd curious, the next future term is 3 times the previous \n term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n Note: \n     1. Collatz(1) is { 1 }. \n     2. returned vector sorted in increasing order ordering.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n", "canonical_solution": "    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n}\n", "entry_point": "get_odd_collatz", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a positive integer n, return a sorted grouped vector that has the odd curious numbers numeral in collatz sequence. \n\n The Collatz conjecture speculation is a conjecture in mathematics that concerns concern a sequence defined specify \n as follows: start startle with any positive plus integer n. Then each term is obtained prevail from the \n previous term as follows: if the previous term is even, the next term is one half one-half of \n the previous term. If the previous term condition is odd curious, the next future term is 3 times the previous \n term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n Note: \n     1. Collatz(1) is { 1 }. \n     2. returned vector sorted in increasing order ordering.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n\tvector<int> v;\n\tv.push_back(1);\n\twhile(n>1){\n\t\tif(n%2==1){\n\t\t\tv.push_back(n);\n\t\t}\n\t\tn=n/2;\n\t\tif(n%2==0){\n\t\t\tv.push_back(n*3+1);\n\t\t}\n\t}\n\treturn v;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> v=get_odd_collatz(n);\n\tfor(int i=0;i<v.size();i++){\n\t\tprintf(\"%d \",v[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/124", "prompt": "/*\nYou have to write spell a function routine which validates a given impart date string and \n returns return key true if the date is valid otherwise differently false. \n The date is valid if all of the following comply rules rule are satisfied: \n 1. The date string bowed stringed instrument is not empty. \n 2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months calendar month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month calendar month 2. \n 3. The months month should not be less than 1 or higher gamey than 12. \n 4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n", "canonical_solution": "    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"06/04/2020\") == false);\n}\n", "entry_point": "valid_date", "seed": 1, "perturbed": true, "gc": "/*\nYou have to write spell a function routine which validates a given impart date string and \n returns return key true if the date is valid otherwise differently false. \n The date is valid if all of the following comply rules rule are satisfied: \n 1. The date string bowed stringed instrument is not empty. \n 2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months calendar month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month calendar month 2. \n 3. The months month should not be less than 1 or higher gamey than 12. \n 4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n\tint day,month,year;\n\tint i=0;\n\tint j=0;\n\tint k=0;\n\tint l=0;\n\tint m=0;\n\tint n=0;\n\tint p=0;\n\tint q=0;\n\tint r=0;\n\tint s=0;\n\tint t=0;\n\tint u=0;\n\tint v=0;\n\tint w=0;\n\tint x=0;\n\tint y=0;\n\tint z=0;\n\tint a=0;\n\tint b=0;\n\tint c=0;\n\tint d=0;\n\tint e=0;\n\tint f=0;\n\tint g=0;\n\tint h=0;\n\tint i1=0;\n\tint i2=0;\n\tint i3=0;\n\tint i4=0;\n\tint i5=0;\n\tint i6=0;\n\tint i7=0;\n\tint i8=0;\n\tint i9=0;\n\tint i10=0;\n\tint i11=0;\n\tint i12=0;\n\tint i13=0;\n\tint i14=0;\n\tint i15=0;\n\tint i16=0;\n\tint i17=0;\n\tint i18=0;\n\tint i19=0;\n\tint i20=0;\n\tint i21=0;\n\tint i22=0;\n\tint i23=0;\n\tint i24=0;\n\tint i25=0;\n\tint i26=0;\n\tint i27=0;\n\tint i28=0;\n\tint i29=0;\n\tint i30=0;\n\tint i31=0;\n\tint i32=0;\n\tint i33=0;\n\tint i34=0;\n\tint i35=0;\n\tint i36=0;\n\tint i37=0;\n\tint i38=0;\n\tint i39=0;\n\tint i40=0;\n\tint i41=0;\n\tint i42=0;\n\tint i43=0;\n\tint i44=0;\n\tint i45=0;\n\tint i46=0;\n\tint i47=0;\n\tint i48=0;\n\tint i49=0;\n\tint i50=0;\n\tint i51=0;\n\tint i52=0;\n\tint i53=0;\n\tint i54=0;\n\tint i55=0;\n\tint i56=0;\n\tint i57=0;\n\tint i58=0;\n\tint i59=0;\n\tint i60=0;\n\tint i61=0;\n\tint i62=0;\n\tint i63=0;\n\tint i64=0;\n\tint i65=0;\n\tint i66=0;\n\tint i67=0;\n\tint i68=0;\n\tint i69=0;\n\tint i70=0;\n\tint i71=0;\n\tint i72=0;\n\tint i73=0;\n\tint i74=0;\n\tint i75=0;\n\tint i76=0;\n\tint i77=0;\n\tint i78=0;\n\tint i79=0;\n\tint i80=0;\n\tint i81=0;\n\tint i82=0;\n\tint i83=0;\n\tint i84=0;\n\tint i85=0;\n\tint i86=0;\n\tint i87=0;\n\tint i88=0;\n\tint i89=0;\n\tint i90=0;\n\tint i91=0;\n\tint i92=0;\n\tint i93=0;\n\tint i94=0;\n\tint i95=0;\n\tint i96=0;\n\tint i97=0;\n\tint i98=0;\n\tint i99=0;\n\tint i100=0;\n\tint i101=0;\n\tint i102=0;\n\tint i103=0;\n\tint i104=0;\n\tint i105=0;\n\tint i106=0;\n\tint i107=0;\n\tint i108=0;\n\tint i109=0;\n\tint i110=0;\n\tint i111=0;\n\tint i112=0;\n\tint i113=0;\n\tint i114=0;\n\tint i115=0;\n\tint i116=0;\n\tint i117=0;\n\tint i118=0;\n\tint i119=0;\n\tint i120=0;\n\tint i121=0;\n\tint i122=0;\n\tint i123=0;\n\tint i124=0;\n\tint i125=0;\n\tint i126=0;\n\tint i127=0;\n\tint i128=0;\n\tint i129=0;\n\tint i130=0;\n\tint i131=0;\n\tint i132=0;\n", "passed": 0}
{"task_id": "CPP/125", "prompt": "/*\nGiven grant a string of words password, return a vector of words bible split burst on whitespace, if no whitespaces exists in the text textbook you \n should split on commas comma',' if no commas exists exist you should return a vector with one element, the number phone number of lower broken - case letters letter with odd order in the \n alphabet, ord(\"a \") = 0, ord(\"b \") = 1, ... ord(\"z \") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n", "canonical_solution": "    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n}\n", "entry_point": "split_words", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a string of words password, return a vector of words bible split burst on whitespace, if no whitespaces exists in the text textbook you \n should split on commas comma',' if no commas exists exist you should return a vector with one element, the number phone number of lower broken - case letters letter with odd order in the \n alphabet, ord(\"a \") = 0, ord(\"b \") = 1,... ord(\"z \") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n\tvector<string> v;\n\tstring word;\n\tfor(int i = 0; i < txt.size(); i++){\n\t\tif(txt[i] ==''){\n\t\t\tif(word.size() > 0){\n\t\t\t\tv.push_back(word);\n\t\t\t\tword.clear();\n\t\t\t}\n\t\t}else{\n\t\t\tword += txt[i];\n\t\t}\n\t}\n\tif(word.size() > 0){\n\t\tv.push_back(word);\n\t}\n\treturn v;\n}\nint main(){\n\tstring txt = \"Hello world!\";\n\tvector<string> v = split_words(txt);\n\tfor(int i = 0; i < v.size(); i++){\n\t\tprintf(\"%s\\n\", v[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/126", "prompt": "/*\nGiven grant a vector of numbers, return whether or not they are sorted screen \n in ascending rise order club. If vector has more than 1 duplicate of the same \n number act, return false. Assume no negative minus numbers and only integers integer.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n", "canonical_solution": "    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n}\n", "entry_point": "is_sorted", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a vector of numbers, return whether or not they are sorted screen \n in ascending rise order club. If vector has more than 1 duplicate of the same \n number act, return false. Assume no negative minus numbers and only integers integer.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n\tsort(lst.begin(), lst.end());\n\tfor(int i=1; i<lst.size(); i++){\n\t\tif(lst[i] < lst[i-1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> lst(n);\n\tfor(int i=0; i<n; i++){\n\t\tscanf(\"%d\", &lst[i]);\n\t}\n\tprintf(\"%d\\n\", is_sorted(lst));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/127", "prompt": "/*\nYou are given grant two intervals, \n where each interval time interval is a pair couple of integers integer. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "canonical_solution": "    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n}\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant two intervals, \n where each interval time interval is a pair couple of integers integer. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n\tint start1 = interval1[0];\n\tint end1 = interval1[1];\n\tint start2 = interval2[0];\n\tint end2 = interval2[1];\n\tif(start1 > end2 || start2 > end1)\n\t\treturn \"NO\";\n\tint start = max(start1,start2);\n\tint end = min(end1,end2);\n\tint length = end - start;\n\tif(length % 2 == 0)\n\t\treturn \"NO\";\n\treturn \"YES\";\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> interval1(n);\n\tvector<int> interval2(n);\n\tfor(int i = 0;i < n;i++){\n\t\tscanf(\"%d\",&interval1[i]);\n\t\tscanf(\"%d\",&interval2[i]);\n\t}\n\tstring result = intersection(interval1,interval2);\n\tif(result == \"NO\")\n\t\tprintf(\"NO\\n\");\n\telse\n\t\tprintf(\"%s\\n\",result.c_str());\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/128", "prompt": "/*\nYou are given grant a vector arr of integers and you need necessitate to return\nsum of magnitudes order of magnitude of integers integer multiplied by product merchandise of all signs \n of each number act in the vector, represented by 1, -1 or 0. \n Note eminence: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n", "canonical_solution": "    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({}) == -32768);\n}\n", "entry_point": "prod_signs", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant a vector arr of integers and you need necessitate to return\nsum of magnitudes order of magnitude of integers integer multiplied by product merchandise of all signs \n of each number act in the vector, represented by 1, -1 or 0. \n Note eminence: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n\tint sum = 0;\n\tfor(int i = 0; i < arr.size(); i++){\n\t\tif(arr[i] == 0)\n\t\t\treturn -32768;\n\t\tif(arr[i] > 0)\n\t\t\tsum += arr[i];\n\t\telse if(arr[i] < 0)\n\t\t\tsum -= arr[i];\n\t}\n\treturn sum;\n}\nint main(){\n\tint arr[] = {1, 2, 2, -4};\n\tvector<int> v(arr, arr + sizeof(arr)/sizeof(int));\n\tprintf(\"%d\\n\", prod_signs(v));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/129", "prompt": "/*\nGiven grant a grid with N rows and N columns column (N > = 2) and a positive positivist integer k, \n each cell cellular telephone of the grid contains a value. Every integer in the range image { 1, N * N } \n inclusive appears exactly precisely once on the cells of the grid.\n\nYou have to find line up the minimum path way of length duration k in the grid. You can start \n from any cell cellular telephone, and in each step you can move to any of the neighbor cells, \n in other words, you can go to cells which share an edge boundary with you current \n cell. \n Please note that a path of length duration k means entail visiting visit exactly k cells (not \n necessarily distinct). \n You CANNOT go off the grid.\nA path A (of length distance k) is considered less than a path B (of length k) if \n after making the ordered order vectors of the values value on the cells cell that A ampere and B boron go \n through (let get's call them lst_A and lst_B), lst_A is lexicographically less \n than lst_B, in other words son, there exist an integer index i (1 < = i < = k)\nsuch that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n lst_A[j ] = lst_B[j ]. \n It is guaranteed that the answer is unique alone. \n Return an ordered coherent vector of the values on the cells that the minimum path go become through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "canonical_solution": "    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n}\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a grid with N rows and N columns column (N > = 2) and a positive positivist integer k, \n each cell cellular telephone of the grid contains a value. Every integer in the range image { 1, N * N } \n inclusive appears exactly precisely once on the cells of the grid.\n\nYou have to find line up the minimum path way of length duration k in the grid. You can start \n from any cell cellular telephone, and in each step you can move to any of the neighbor cells, \n in other words, you can go to cells which share an edge boundary with you current \n cell. \n Please note that a path of length duration k means entail visiting visit exactly k cells (not \n necessarily distinct). \n You CANNOT go off the grid.\nA path A (of length distance k) is considered less than a path B (of length k) if \n after making the ordered order vectors of the values value on the cells cell that A ampere and B boron go \n through (let get's call them lst_A and lst_B), lst_A is lexicographically less \n than lst_B, in other words son, there exist an integer index i (1 < = i < = k)\nsuch that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n lst_A[j ] = lst_B[j ]. \n It is guaranteed that the answer is unique alone. \n Return an ordered coherent vector of the values on the cells that the minimum path go become through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    vector<int> res;\n    if(grid.size() == 0 || grid[0].size() == 0){\n        return res;\n    }\n    int n = grid.size();\n    int m = grid[0].size();\n    vector<vector<int>> dp(n, vector<int>(m, 0));\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n            if(i == 0 && j == 0){\n                dp[i][j] = grid[i][j];\n            }else if(i == 0){\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n            }else if(j == 0){\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n            }else{\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n    }\n    int index = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n            if(dp[i][j] == dp[i][j - 1] + grid[i][j] && dp[i][j] == dp[i - 1][j] + grid[i][j]){\n                res.push_back(dp[i][j]);\n                index++;\n                if(index == k){\n                    break;\n                }\n            }\n        }\n        if(index == k){\n            break;\n        }\n    }\n    return res;\n}\nint main(){\n    int n, m, k;\n    scanf(\"%d %d %d\", &n, &m, &k);\n    vector<vector<int>> grid(n, vector<int>(m, 0));\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n            scanf(\"%d\", &grid[i][j]);\n        }\n    }\n    vector<int> res = minPath(grid, k);\n    for(int i = 0; i < res.size(); i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/13", "prompt": "/*\nReturn return key a greatest capital common divisor of two integers integer a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n", "canonical_solution": "    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "declaration": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 5) == 1);\n     assert (greatest_common_divisor(25, 15) == 5);\n}\n", "entry_point": "greatest_common_divisor", "seed": 1, "perturbed": true, "gc": "/*\nReturn return key a greatest capital common divisor of two integers integer a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    int c;\n    while(b!= 0){\n        c = a;\n        a = b;\n        b = c % b;\n    }\n    return a;\n}\nint main(){\n    int a, b;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &a, &b);\n    printf(\"Greatest common divisor of %d and %d is %d\\n\", a, b, greatest_common_divisor(a, b));\n    return 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/130", "prompt": "/*\nEveryone knows know Fibonacci sequence succession, it was studied deeply profoundly by mathematicians in \n the last concluding couple centuries. However, what people citizenry don't know is Tribonacci sequence succession. \n Tribonacci sequence is defined define by the recurrence: \n tri(1) = 3 \n tri(n) = 1 + n / 2, if n is even. \n tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd leftover.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n", "canonical_solution": "    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n}\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*\nEveryone knows know Fibonacci sequence succession, it was studied deeply profoundly by mathematicians in \n the last concluding couple centuries. However, what people citizenry don't know is Tribonacci sequence succession. \n Tribonacci sequence is defined define by the recurrence: \n tri(1) = 3 \n tri(n) = 1 + n / 2, if n is even. \n tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd leftover.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n\tvector<int> v;\n\tif(n == 0)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 1)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 2)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 3)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 4)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 5)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 6)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 7)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 8)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 9)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 10)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 11)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 12)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 13)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 14)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 15)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 16)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 17)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 18)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 19)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 20)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 21)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 22)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 23)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 24)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 25)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 26)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 27)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 28)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 29)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 30)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 31)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 32)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 33)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 34)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 35)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 36)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 37)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 38)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 39)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 40)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 41)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 42)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 43)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 44)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 45)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 46)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 47)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 48)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 49)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 50)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 51)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 52)\n\t\treturn v;\n\tv.push_back(1);\n\tif(n == 53)\n\t\treturn v;\n\tv.push_back(3);\n\tif(n == 54)\n\t\treturn v;\n\tv.push_back(1);\n\tif", "passed": 0}
{"task_id": "CPP/131", "prompt": "/*\nGiven grant a positive integer n, return the product merchandise of the odd curious digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n", "canonical_solution": "    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(1) == 1);\n    assert (digits(4) == 0);\n    assert (digits(235) ==15);\n}\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a positive integer n, return the product merchandise of the odd curious digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n\tstring s = to_string(n);\n\tint i = 0;\n\tint j = 0;\n\tint product = 1;\n\tfor(i = 0; i < s.size(); i++){\n\t\tif(s[i] == '1'){\n\t\t\tj++;\n\t\t}\n\t\tif(j % 2 == 1){\n\t\t\tproduct *= s[i];\n\t\t}\n\t}\n\tif(j % 2 == 0){\n\t\treturn 0;\n\t}\n\treturn product;\n}\nint main(){\n\tint n;\n\twhile(scanf(\"%d\", &n)!= EOF){\n\t\tprintf(\"%d\\n\", digits(n));\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/132", "prompt": "/*\nCreate make a function routine that takes a string chain as input which contains hold only square brackets bracket. \n The function should return true on-key if and only if there is a valid subsequence of brackets bracket \n where at least one bracket in the subsequence sequel is nested. \n\n is_nested (\" [ [ ] ] \") ➞ true dependable \n is_nested (\" [ ] ] ] ] ] ] ] [ [ [ [ [ ] \") ➞ false \n is_nested (\" [ ] [ ] \") ➞ false \n is_nested (\" [ ] \") ➞ false \n is_nested (\" [ [ ] [ ] ] \") ➞ true \n is_nested (\" [ [ ] ] [ [ \") ➞ true \n * / \n # include < stdio.h > \n # include < string drawstring > \n using practice namespace std;\nbool is_nested(string str){\n", "canonical_solution": "    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested(\"[]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n}\n", "entry_point": "is_nested", "seed": 1, "perturbed": true, "gc": "/*\nCreate make a function routine that takes a string chain as input which contains hold only square brackets bracket. \n The function should return true on-key if and only if there is a valid subsequence of brackets bracket \n where at least one bracket in the subsequence sequel is nested. \n\n is_nested (\" [ [ ] ] \") ➞ true dependable \n is_nested (\" [ ] ] ] ] ] ] ] [ [ [ [ [ ] \") ➞ false \n is_nested (\" [ ] [ ] \") ➞ false \n is_nested (\" [ ] \") ➞ false \n is_nested (\" [ [ ] [ ] ] \") ➞ true \n is_nested (\" [ [ ] ] [ [ \") ➞ true \n * / \n # include < stdio.h > \n # include < string drawstring > \n using practice namespace std;\nbool is_nested(string str){\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i1 = 0;\n    int i2 = 0;\n    int i3 = 0;\n    int i4 = 0;\n    int i5 = 0;\n    int i6 = 0;\n    int i7 = 0;\n    int i8 = 0;\n    int i9 = 0;\n    int i10 = 0;\n    int i11 = 0;\n    int i12 = 0;\n    int i13 = 0;\n    int i14 = 0;\n    int i15 = 0;\n    int i16 = 0;\n    int i17 = 0;\n    int i18 = 0;\n    int i19 = 0;\n    int i20 = 0;\n    int i21 = 0;\n    int i22 = 0;\n    int i23 = 0;\n    int i24 = 0;\n    int i25 = 0;\n    int i26 = 0;\n    int i27 = 0;\n    int i28 = 0;\n    int i29 = 0;\n    int i30 = 0;\n    int i31 = 0;\n    int i32 = 0;\n    int i33 = 0;\n    int i34 = 0;\n    int i35 = 0;\n    int i36 = 0;\n    int i37 = 0;\n    int i38 = 0;\n    int i39 = 0;\n    int i40 = 0;\n    int i41 = 0;\n    int i42 = 0;\n    int i43 = 0;\n    int i44 = 0;\n    int i45 = 0;\n    int i46 = 0;\n    int i47 = 0;\n    int i48 = 0;\n    int i49 = 0;\n    int i50 = 0;\n    int i51 = 0;\n    int i52 = 0;\n    int i53 = 0;\n    int i54 = 0;\n    int i55 = 0;\n    int i56 = 0;\n    int i57 = 0;\n    int i58 = 0;\n    int i59 = 0;\n    int i60 = 0;\n    int i61 = 0;\n    int i62 = 0;\n    int i63 = 0;\n    int i64 = 0;\n    int i65 = 0;\n    int i66 = 0;\n    int i67 = 0;\n    int i68 = 0;\n    int i69 = 0;\n    int i70 = 0;\n    int i71 = 0;\n    int i72 = 0;\n    int i73 = 0;\n    int i74 = 0;\n    int i75 = 0;\n    int i76 = 0;\n    int i77 = 0;\n    int i78 = 0;\n    int i79 = 0;\n    int i80 = 0;\n    int i81 = 0;\n    int i82 = 0;\n    int i83 = 0;\n    int i84 = 0;\n    int i85 = 0;\n    int i86 = 0;\n    int i87 = 0;\n    int i88 = 0;\n    int i89 = 0;\n    int i90 = 0;\n    int i91 = 0;\n    int i92 = 0;\n    int i93 = 0;\n    int i94 = 0;\n    int i95 = 0;\n    int i96 = 0;\n    int i97 = 0;\n    int i98 = 0;\n    int i99 = 0;\n    int i100 = 0;\n    int i101 = 0;\n    int i102 = 0;\n    int i103 = 0;\n    int i104 = 0;\n    int i105 = 0;\n    int i106 = 0;\n    int i107 = 0;\n    int i108 = 0;\n    int i109 = 0;\n    int i110 = 0;\n    int i111 = 0;\n    int i112 = 0;\n    int i113 = 0;\n    int i114 = 0;\n    int i115 = 0;\n    int i116 = 0;\n    int i117 = 0;\n    int i118 = 0;\n    int i119 = 0;\n    int i120 = 0;\n    int i121 = 0;\n    int i122 = 0;\n    int i123 = 0;\n    int i124 = 0;\n    int i125 = 0;\n    int i126 = 0;\n    int i127 = 0;\n    int i128 = 0;\n    int i129 = 0;\n    int i130 = 0;\n    int i131 = 0;\n    int i132 = 0;\n    int i133 = 0;\n    int i134 = 0;\n    int i135 = 0;\n    int i136 = 0;\n    int i137 = 0;\n    int i138 = 0;\n    int i139 = 0;\n    int i140 = 0;\n    int i141 = 0;\n    int i142 = 0;\n    ", "passed": 0}
{"task_id": "CPP/133", "prompt": "/*\nYou are given grant a vector of numbers. \n You need necessitate to return the sum of squared square numbers numeral in the given vector, \n round round off each element in the vector to the upper int(Ceiling) first foremost.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1,4,9})==98);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n}\n", "entry_point": "sum_squares", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant a vector of numbers. \n You need necessitate to return the sum of squared square numbers numeral in the given vector, \n round round off each element in the vector to the upper int(Ceiling) first foremost.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n\tint sum=0;\n\tfor(int i=0;i<lst.size();i++){\n\t\tsum+=pow(lst[i],2);\n\t\tlst[i]=round(lst[i]);\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<float> lst;\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++){\n\t\tfloat x;\n\t\tscanf(\"%f\",&x);\n\t\tlst.push_back(x);\n\t}\n\tprintf(\"%d\",sum_squares(lst));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/134", "prompt": "/*\nCreate make a function routine that returns true dependable if the last character fictional character \n of a given string drawstring is an alphabetical character quality and is not \n a part function of a word, and false assumed otherwise differently. \n Note: \" word son \" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n", "canonical_solution": "    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "entry_point": "check_if_last_char_is_a_letter", "seed": 1, "perturbed": true, "gc": "/*\nCreate make a function routine that returns true dependable if the last character fictional character \n of a given string drawstring is an alphabetical character quality and is not \n a part function of a word, and false assumed otherwise differently. \n Note: \" word son \" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n\tint i = txt.length()-1;\n\twhile(i>=0){\n\t\tif(txt[i]>='a' && txt[i]<='z'){\n\t\t\treturn true;\n\t\t}\n\t\ti--;\n\t}\n\treturn false;\n}\nint main(){\n\tstring txt;\n\tgetline(cin,txt);\n\tif(check_if_last_char_is_a_letter(txt)){\n\t\tprintf(\"true\");\n\t}\n\telse{\n\t\tprintf(\"false\");\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/135", "prompt": "/*\nCreate make a function routine which returns the largest bombastic index of an element component which \n is not greater than or equal adequate to the element immediately preceding precede it. If \n no such element exists exist then return -1. The given sacrifice vector will not contain \n duplicate values value.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n", "canonical_solution": "    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,3})==-1);\n}\n", "entry_point": "can_arrange", "seed": 1, "perturbed": true, "gc": "/*\nCreate make a function routine which returns the largest bombastic index of an element component which \n is not greater than or equal adequate to the element immediately preceding precede it. If \n no such element exists exist then return -1. The given sacrifice vector will not contain \n duplicate values value.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int max_index = -1;\n    int index = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] >= arr[i-1]){\n            index = i;\n            break;\n        }\n    }\n    if(index == 0){\n        return -1;\n    }\n    for(int i = index; i < arr.size(); i++){\n        if(arr[i] > arr[i-1]){\n            max_index = i;\n            break;\n        }\n    }\n    return max_index;\n}\nint main(){\n    vector<int> arr;\n    int n;\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        int x;\n        scanf(\"%d\", &x);\n        arr.push_back(x);\n    }\n    int index = can_arrange(arr);\n    if(index == -1){\n        printf(\"-1\");\n    }else{\n        printf(\"%d\", index);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/136", "prompt": "/*\nCreate make a function routine that returns a vector (a, b b-complex vitamin), where \" a \" is \n the largest of negative minus integers, and \" b \" is the smallest small \n of positive integers integer in a vector. \n If there is no negative minus or positive integers integer, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n", "canonical_solution": "    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n}\n", "entry_point": "largest_smallest_integers", "seed": 1, "perturbed": true, "gc": "/*\nCreate make a function routine that returns a vector (a, b b-complex vitamin), where \" a \" is \n the largest of negative minus integers, and \" b \" is the smallest small \n of positive integers integer in a vector. \n If there is no negative minus or positive integers integer, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> res;\n    int a = 0;\n    int b = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] < 0){\n            if(a < 0 || lst[i] < a){\n                a = lst[i];\n            }\n        }else{\n            if(b < 0 || lst[i] < b){\n                b = lst[i];\n            }\n        }\n    }\n    if(a == 0 && b == 0){\n        res.push_back(0);\n        res.push_back(0);\n    }else if(a == 0){\n        res.push_back(0);\n        res.push_back(b);\n    }else if(b == 0){\n        res.push_back(a);\n        res.push_back(0);\n    }else{\n        res.push_back(a);\n        res.push_back(b);\n    }\n    return res;\n}\nint main(){\n    vector<int> lst = {2, 4, 1, 3, 5, 7};\n    vector<int> res = largest_smallest_integers(lst);\n    for(int i = 0; i < res.size(); i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/137", "prompt": "/*\nCreate make a function routine that takes integers integer, floats, or strings bowed stringed instrument representing \n real substantial numbers, and returns come back the larger bombastic variable in its given feed variable varying type. \n Return recurrence \" None \" if the values are equal. \n Note: If a real number is represented as a string, the floating point period might be. or, \n\n compare_one(1, 2.5) ➞ 2.5 \n compare_one(1, \" 2,3 \") ➞ \" 2,3 \" \n compare_one(\"5,1 \", \" 6 \") ➞ \" 6 \" \n compare_one(\"1 \", 1) ➞ \" None \" \n * / \n # include admit < stdio.h > \n # include < string > \n # include admit < algorithm > \n # include admit < boost rise / any.hpp > \n using namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n", "canonical_solution": "    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "entry_point": "compare_one", "seed": 1, "perturbed": true, "gc": "/*\nCreate make a function routine that takes integers integer, floats, or strings bowed stringed instrument representing \n real substantial numbers, and returns come back the larger bombastic variable in its given feed variable varying type. \n Return recurrence \" None \" if the values are equal. \n Note: If a real number is represented as a string, the floating point period might be. or, \n\n compare_one(1, 2.5) ➞ 2.5 \n compare_one(1, \" 2,3 \") ➞ \" 2,3 \" \n compare_one(\"5,1 \", \" 6 \") ➞ \" 6 \" \n compare_one(\"1 \", 1) ➞ \" None \" \n * / \n # include admit < stdio.h > \n # include < string > \n # include admit < algorithm > \n # include admit < boost rise / any.hpp > \n using namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n    boost::any c;\n    if(a.type() == b.type()){\n        if(a.type() == boost::any::type_of<int>()){\n            c = a.get<int>() > b.get<int>()? a : b;\n        }\n        else if(a.type() == boost::any::type_of<float>()){\n            c = a.get<float>() > b.get<float>()? a : b;\n        }\n        else if(a.type() == boost::any::type_of<string>()){\n            c = a.get<string>() > b.get<string>()? a : b;\n        }\n    }\n    return c;\n}\nint main(){\n    int a = 1;\n    float b = 2.5;\n    string c = \"2,3\";\n    cout << compare_one(a, b) << endl;\n    cout << compare_one(a, c) << endl;\n    cout << compare_one(b, c) << endl;\n    cout << compare_one(c, a) << endl;\n    cout << compare_one(c, b) << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/138", "prompt": "/*\nEvaluate measure whether the given yield number n can be written compose as the sum of exactly precisely 4 positive even numbers numbers pool\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n", "canonical_solution": "    if (n%2==0 and n>=8) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n}\n", "entry_point": "is_equal_to_sum_even", "seed": 1, "perturbed": true, "gc": "/*\nEvaluate measure whether the given yield number n can be written compose as the sum of exactly precisely 4 positive even numbers numbers pool\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += i;\n    }\n    if(sum % 2 == 0){\n        return true;\n    }\n    return false;\n}\nint main(){\n    int n;\n    while(scanf(\"%d\",&n)!= EOF){\n        if(is_equal_to_sum_even(n)){\n            printf(\"%d is a sum of exactly 4 even numbers.\\n\",n);\n        }\n        else{\n            printf(\"%d is not a sum of exactly 4 even numbers.\\n\",n);\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/139", "prompt": "/*\nThe Brazilian factorial is defined specify as: \n brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n where n > 0 \n\n For example model:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n", "canonical_solution": "    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n}\n", "entry_point": "special_factorial", "seed": 1, "perturbed": true, "gc": "/*\nThe Brazilian factorial is defined specify as: \n brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n where n > 0 \n\n For example model:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long factorial = 1;\n    for(int i = 1; i <= n; i++){\n        factorial *= i;\n    }\n    return factorial;\n}\nint main(){\n    int n;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    printf(\"The special factorial of %d is: %lld\\n\", n, special_factorial(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/14", "prompt": "/*\nReturn return key vector of all prefixes prefix from shortest to longest of the input remark string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n", "canonical_solution": "    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"abc\"),{\"a\",\"ab\",\"abc\"}));\n}\n", "entry_point": "all_prefixes", "seed": 1, "perturbed": true, "gc": "/*\nReturn return key vector of all prefixes prefix from shortest to longest of the input remark string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> res;\n    if(str.length()==0) return res;\n    for(int i=0;i<str.length();i++){\n        string temp=str.substr(0,i+1);\n        if(str.length()-i>1){\n            vector<string> temp_res=all_prefixes(str.substr(i+1));\n            for(int j=0;j<temp_res.size();j++){\n                res.push_back(temp+temp_res[j]);\n            }\n        }else{\n            res.push_back(temp);\n        }\n    }\n    return res;\n}\nint main(){\n    string str=\"abc\";\n    vector<string> res=all_prefixes(str);\n    for(int i=0;i<res.size();i++){\n        printf(\"%s\\n\",res[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/140", "prompt": "/*\nGiven grant a string text, replace supplant all spaces distance in it with underscores underscore, \n and if a string has more than 2 consecutive straight spaces, \n then replace supplant all consecutive spaces outer space with - \n\n fix_spaces (\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n", "canonical_solution": "    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Example 1\") == \"Example_1\");\n    assert (fix_spaces(\" Example 2\") == \"_Example_2\");\n    assert (fix_spaces(\" Example   3\") == \"_Example-3\");\n}\n", "entry_point": "fix_spaces", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a string text, replace supplant all spaces distance in it with underscores underscore, \n and if a string has more than 2 consecutive straight spaces, \n then replace supplant all consecutive spaces outer space with - \n\n fix_spaces (\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint space = 0;\n\tint underscore = 0;\n\tint dash = 0;\n\tint minus = 0;\n\tint dot = 0;\n\tint colon = 0;\n\tint comma = 0;\n\tint exclamation = 0;\n\tint question = 0;\n\tint left_bracket = 0;\n\tint right_bracket = 0;\n\tint left_brace = 0;\n\tint right_brace = 0;\n\tint left_paren = 0;\n\tint right_paren = 0;\n\tint left_square = 0;\n\tint right_square = 0;\n\tint left_curly = 0;\n\tint right_curly = 0;\n\tint left_angle = 0;\n\tint right_angle = 0;\n\tint left_angle_bracket = 0;\n\tint right_angle_bracket = 0;\n\tint left_angle_brace = 0;\n\tint right_angle_brace = 0;\n\tint left_angle_paren = 0;\n\tint right_angle_paren = 0;\n\tint left_angle_square = 0;\n\tint right_angle_square = 0;\n\tint left_angle_curly = 0;\n\tint right_angle_curly = 0;\n\tint left_angle_angle = 0;\n\tint right_angle_angle = 0;\n\tint left_angle_angle_bracket = 0;\n\tint right_angle_angle_bracket = 0;\n\tint left_angle_angle_brace = 0;\n\tint right_angle_angle_brace = 0;\n\tint left_angle_angle_paren = 0;\n\tint right_angle_angle_paren = 0;\n\tint left_angle_angle_square = 0;\n\tint right_angle_angle_square = 0;\n\tint left_angle_angle_curly = 0;\n\tint right_angle_angle_curly = 0;\n\tint left_angle_angle_angle = 0;\n\tint right_angle_angle_angle = 0;\n\tint left_angle_angle_angle_bracket = 0;\n\tint right_angle_angle_angle_bracket = 0;\n\tint left_angle_angle_angle_brace = 0;\n\tint right_angle_angle_angle_brace = 0;\n\tint left_angle_angle_angle_paren = 0;\n\tint right_angle_angle_angle_paren = 0;\n\tint left_angle_angle_angle_square = 0;\n\tint right_angle_angle_angle_square = 0;\n\tint left_angle_angle_angle_curly = 0;\n\tint right_angle_angle_angle_curly = 0;\n\tint left_angle_angle_angle_angle = 0;\n\tint right_angle_angle_angle_angle = 0;\n\tint left_angle_angle_angle_angle_bracket = 0;\n\tint right_angle_angle_angle_angle_bracket = 0;\n\tint left_angle_angle_angle_angle_brace = 0;\n\tint right_angle_angle_angle_angle_brace = 0;\n\tint left_angle_angle_angle_angle_paren = 0;\n\tint right_angle_angle_angle_angle_paren = 0;\n\tint left_angle_angle_angle_angle_square = 0;\n\tint right_angle_angle_angle_angle_square = 0;\n\tint left_angle_angle_angle_angle_curly = 0;\n\tint right_angle_angle_angle_angle_curly = 0;\n\tint left_angle_angle_angle_angle_angle = 0;\n\tint right_angle_angle_angle_angle_angle = 0;\n\tint left_angle_angle_angle_angle_angle_bracket = 0;\n\tint right_angle_angle_angle_angle_angle_bracket = 0;\n\tint left_angle_angle_angle_angle_angle_brace = 0;\n\tint right_angle_angle_angle_angle_angle_brace = 0;\n\tint left_angle_angle_angle_angle_angle_paren = 0;\n\tint right_angle_angle_angle_angle_angle_paren = 0;\n\tint left_angle_angle_angle_angle_angle_square = 0;\n\tint right_angle_angle_angle_angle_angle_square = 0;\n\tint left_angle_angle_angle_angle_angle_curly = 0;\n\tint right_angle_angle_angle_angle_angle_curly = 0;\n\tint left_angle_angle_angle_angle_angle_angle = 0;\n\tint right_angle_angle_angle_angle_angle_angle = 0;\n\tint left_angle_angle_angle_angle_angle_angle_bracket = 0;\n\tint right_angle_angle_angle_angle_angle_angle_bracket = 0;\n\tint left_angle_angle_angle_angle_angle_angle_brace = 0;\n\tint right_angle_angle_angle_angle_angle_angle_brace = 0;\n\tint left_angle_angle_angle_angle_angle_angle_paren = 0;\n\tint right_angle_angle_angle_angle_angle_angle_paren = 0;\n\tint left_angle_angle_angle_angle_angle_angle_square = 0;\n\tint right_angle_angle_angle_angle_angle_angle_square = 0;\n\tint left_angle", "passed": 0}
{"task_id": "CPP/141", "prompt": "/*\nCreate make a function routine which takes a string chain representing a file's name, and returns hark back \n \" Yes \" if the the file's name is valid, and returns \" No \" otherwise differently. \n A file's name is considered to be valid if and only if all the following comply conditions weather \n are met: \n - There should not be more than three digits finger (' 0'-'9') in the file's name. \n - The file's name contains exactly precisely one dot \". \" \n - The substring before the dot should not be empty, and it starts with a letter from \n the latin alphapet (' a'-'z' and' A'-'Z'). \n - The substring after the dot should be one of these: {' txt \", \" exe \", \" dll \" }\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n", "canonical_solution": "    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n}\n", "entry_point": "file_name_check", "seed": 1, "perturbed": true, "gc": "/*\nCreate make a function routine which takes a string chain representing a file's name, and returns hark back \n \" Yes \" if the the file's name is valid, and returns \" No \" otherwise differently. \n A file's name is considered to be valid if and only if all the following comply conditions weather \n are met: \n - There should not be more than three digits finger (' 0'-'9') in the file's name. \n - The file's name contains exactly precisely one dot \". \" \n - The substring before the dot should not be empty, and it starts with a letter from \n the latin alphapet (' a'-'z' and' A'-'Z'). \n - The substring after the dot should be one of these: {' txt \", \" exe \", \" dll \" }\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    if(file_name.find(\".\") == string::npos){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 0){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 1){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 2){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 3){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 4){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 5){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 6){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 7){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 8){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 9){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 10){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 11){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 12){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 13){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 14){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 15){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 16){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 17){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 18){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 19){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 20){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 21){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 22){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 23){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 24){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 25){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 26){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 27){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 28){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 29){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 30){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 31){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 32){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 33){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 34){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 35){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 36){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 37){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 38){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 39){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 40){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 41){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 42){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 43){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 44){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 45){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 46){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 47){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 48){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 49){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 50){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 51){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 52){\n        return \"No\";\n    }\n    if(file_name.find(\".\")!= 53){\n        return \"No\";\n    }\n", "passed": 0}
{"task_id": "CPP/142", "prompt": "/*\n\" \n This function affair will take film a vector of integers. For all entries introduction in the vector, the function shall square feather the integer entry if its index exponent is a \n multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n change switch the entries entry in the vector whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n}\n", "entry_point": "sum_squares", "seed": 1, "perturbed": true, "gc": "/*\n\" \n This function affair will take film a vector of integers. For all entries introduction in the vector, the function shall square feather the integer entry if its index exponent is a \n multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n change switch the entries entry in the vector whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(i%3 == 0){\n\t\t\tsum += lst[i]*lst[i];\n\t\t}\n\t\tif(i%4 == 0){\n\t\t\tsum += lst[i]*lst[i]*lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> lst;\n\tint n;\n\tprintf(\"Enter the number of elements in the list: \");\n\tscanf(\"%d\",&n);\n\tfor(int i = 0; i < n; i++){\n\t\tint x;\n\t\tprintf(\"Enter element %d: \",i+1);\n\t\tscanf(\"%d\",&x);\n\t\tlst.push_back(x);\n\t}\n\tprintf(\"The sum of squares of all elements is %d\\n\",sum_squares(lst));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/143", "prompt": "/*\nYou are given grant a string representing present a sentence,\nthe sentence contains control some words actor's line separated by a space outer space, \n and you have to return a string that contains check the words from the original sentence,\nwhose lengths duration are prime premier numbers, \n the order decree of the words parole in the new string chain should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n}\n", "entry_point": "words_in_sentence", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant a string representing present a sentence,\nthe sentence contains control some words actor's line separated by a space outer space, \n and you have to return a string that contains check the words from the original sentence,\nwhose lengths duration are prime premier numbers, \n the order decree of the words parole in the new string chain should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string new_sentence = \"\";\n    int i = 0;\n    int j = 0;\n    int len = sentence.length();\n    while(i < len){\n        while(j < len && sentence[j]!=''){\n            j++;\n        }\n        new_sentence += sentence[i];\n        i++;\n        j++;\n    }\n    return new_sentence;\n}\nint main(){\n    string sentence = \"This is a test\";\n    string new_sentence = words_in_sentence(sentence);\n    printf(\"%s\\n\", new_sentence.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/144", "prompt": "/*\nYour task job is to implement follow through a function that will simplify the expression saying \n x * n. The function returns hark back true if x * n evaluates evaluate to a whole number issue and false \n otherwise differently. Both x and n, are string bowed stringed instrument representation of a fraction, and have the following keep up format, \n < numerator>/<denominator > where both numerator and denominator are positive incontrovertible whole numbers. \n\n You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n simplify(\"1/5 \", \" 5/1 \") = true \n simplify(\"1/6 \", \" 2/1 \") = false \n simplify(\"7/10 \", \" 10/2 \") = false fake \n * / \n # include admit < stdio.h > \n # include < string > \n using use namespace std;\nbool simplify(string x,string n){\n", "canonical_solution": "    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n}\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "/*\nYour task job is to implement follow through a function that will simplify the expression saying \n x * n. The function returns hark back true if x * n evaluates evaluate to a whole number issue and false \n otherwise differently. Both x and n, are string bowed stringed instrument representation of a fraction, and have the following keep up format, \n < numerator>/<denominator > where both numerator and denominator are positive incontrovertible whole numbers. \n\n You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n simplify(\"1/5 \", \" 5/1 \") = true \n simplify(\"1/6 \", \" 2/1 \") = false \n simplify(\"7/10 \", \" 10/2 \") = false fake \n * / \n # include admit < stdio.h > \n # include < string > \n using use namespace std;\nbool simplify(string x,string n){\n\tint xn=0,xd=0,xdn=0;\n\tint xn1=0,xd1=0;\n\tint xn2=0,xd2=0;\n\tint xn3=0,xd3=0;\n\tint xn4=0,xd4=0;\n\tint xn5=0,xd5=0;\n\tint xn6=0,xd6=0;\n\tint xn7=0,xd7=0;\n\tint xn8=0,xd8=0;\n\tint xn9=0,xd9=0;\n\tint xn10=0,xd10=0;\n\tint xn11=0,xd11=0;\n\tint xn12=0,xd12=0;\n\tint xn13=0,xd13=0;\n\tint xn14=0,xd14=0;\n\tint xn15=0,xd15=0;\n\tint xn16=0,xd16=0;\n\tint xn17=0,xd17=0;\n\tint xn18=0,xd18=0;\n\tint xn19=0,xd19=0;\n\tint xn20=0,xd20=0;\n\tint xn21=0,xd21=0;\n\tint xn22=0,xd22=0;\n\tint xn23=0,xd23=0;\n\tint xn24=0,xd24=0;\n\tint xn25=0,xd25=0;\n\tint xn26=0,xd26=0;\n\tint xn27=0,xd27=0;\n\tint xn28=0,xd28=0;\n\tint xn29=0,xd29=0;\n\tint xn30=0,xd30=0;\n\tint xn31=0,xd31=0;\n\tint xn32=0,xd32=0;\n\tint xn33=0,xd33=0;\n\tint xn34=0,xd34=0;\n\tint xn35=0,xd35=0;\n\tint xn36=0,xd36=0;\n\tint xn37=0,xd37=0;\n\tint xn38=0,xd38=0;\n\tint xn39=0,xd39=0;\n\tint xn40=0,xd40=0;\n\tint xn41=0,xd41=0;\n\tint xn42=0,xd42=0;\n\tint xn43=0,xd43=0;\n\tint xn44=0,xd44=0;\n\tint xn45=0,xd45=0;\n\tint xn46=0,xd46=0;\n\tint xn47=0,xd47=0;\n\tint xn48=0,xd48=0;\n\tint xn49=0,xd49=0;\n\tint xn50=0,xd50=0;\n\tint xn51=0,xd51=0;\n\tint xn52=0,xd52=0;\n\tint xn53=0,xd53=0;\n\tint xn54=0,xd54=0;\n\tint xn55=0,xd55=0;\n\tint xn56=0,xd56=0;\n\tint xn57=0,xd57=0;\n\tint xn58=0,xd58=0;\n\tint xn59=0,xd59=0;\n\tint xn60=0,xd60=0;\n\tint xn61=0,xd61=0;\n\tint xn62=0,xd62=0;\n\tint xn63=0,xd63=0;\n\tint xn64=0,xd64=0;\n\tint xn65=0,xd65=0;\n\tint xn66=0,xd66=0;\n\tint xn67=0,xd67=0;\n\tint xn68=0,xd68=0;\n\tint xn69=0,xd69=0;\n\tint xn70=0,xd70=0;\n\tint xn71=0,xd71=0;\n\tint xn72=0,xd72=0;\n\tint xn73=0,xd73=0;\n\tint xn74=0,xd74=0;\n\tint xn75=0,xd75=0;\n\tint xn76=0,xd76=0;\n\tint xn77=0,xd77=0;\n\tint xn78=0,xd78=0;\n\tint xn79=0,xd79=0;\n\tint xn80=0,xd80=0;\n\tint xn81=0,xd81=0;\n\tint xn82=0,xd82=0;\n\tint xn83=0,xd83=0;\n\tint xn84=0,xd84=0;\n\tint xn85=0,xd85=0;\n\tint xn86=0,xd86=0;\n\tint xn87=0,xd87=0;", "passed": 0}
{"task_id": "CPP/145", "prompt": "/*\nWrite spell a function routine which sorts the given impart vector of integers \n in ascending ascend order according accord to the sum of their digits. \n Note eminence: if there are several items item with similar like sum of their digits, \n order rate them based on their index in original vector. \n\n For example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n", "canonical_solution": "    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({}) , {}));\n}\n", "entry_point": "order_by_points", "seed": 1, "perturbed": true, "gc": "/*\nWrite spell a function routine which sorts the given impart vector of integers \n in ascending ascend order according accord to the sum of their digits. \n Note eminence: if there are several items item with similar like sum of their digits, \n order rate them based on their index in original vector. \n\n For example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n\tvector<int> result;\n\tint sum = 0;\n\tfor(int i = 0; i < nums.size(); i++){\n\t\tsum += nums[i];\n\t}\n\tint index = 0;\n\tfor(int i = 0; i < nums.size(); i++){\n\t\tif(sum - nums[i] > 0){\n\t\t\tresult.push_back(nums[i]);\n\t\t\tsum -= nums[i];\n\t\t}\n\t\telse{\n\t\t\tresult.push_back(nums[index]);\n\t\t\tindex++;\n\t\t\tsum += nums[index];\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<int> nums;\n\tint n;\n\twhile(scanf(\"%d\", &n)!= EOF){\n\t\tnums.push_back(n);\n\t}\n\tvector<int> result = order_by_points(nums);\n\tfor(int i = 0; i < result.size(); i++){\n\t\tprintf(\"%d \", result[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/146", "prompt": "/*\nWrite spell a function routine that takes a vector of numbers numeral as input and returns return key \n the number of elements chemical element in the vector that are greater than 10 and both \n first beginning and last concluding digits of a number phone number are odd leftover (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n}\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*\nWrite spell a function routine that takes a vector of numbers numeral as input and returns return key \n the number of elements chemical element in the vector that are greater than 10 and both \n first beginning and last concluding digits of a number phone number are odd leftover (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == 1){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    vector<int> nums;\n    int count = 0;\n    int num;\n    while(scanf(\"%d\", &num)!= EOF){\n        nums.push_back(num);\n    }\n    count = specialFilter(nums);\n    printf(\"%d\\n\", count);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/147", "prompt": "/*\nYou are given grant a positive integer n. You have to create make an integer vector a of length distance n.\n     For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1. \n     Return the number numeral of triples (a{i}, a{j}, a{k}) of a where i < j < k, \n and a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n", "canonical_solution": "    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n    assert (get_matrix_triples(6) == 4);\n    assert (get_matrix_triples(10) == 36);\n    assert (get_matrix_triples(100) == 53361);\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n}\n", "entry_point": "get_matrix_triples", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant a positive integer n. You have to create make an integer vector a of length distance n.\n     For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1. \n     Return the number numeral of triples (a{i}, a{j}, a{k}) of a where i < j < k, \n and a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n    vector<int> a(n);\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", get_matrix_triples(n));\n    return 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/148", "prompt": "/*\nThere are eight planets in our solar system arrangement: the closerst to the Sun \n is Mercury, the next future one is Venus, then Earth, Mars, Jupiter, Saturn, \n Uranus, Neptune. \n Write a function routine that takes two planet satellite names as strings string section planet1 and planet2. \n The function should return a vector containing control all planets whose orbits eye socket are \n located between the orbit scope of planet1 and the orbit eye socket of planet2, sorted by \n the proximity to the sun sunlight. \n The function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n", "canonical_solution": "    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n}\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "/*\nThere are eight planets in our solar system arrangement: the closerst to the Sun \n is Mercury, the next future one is Venus, then Earth, Mars, Jupiter, Saturn, \n Uranus, Neptune. \n Write a function routine that takes two planet satellite names as strings string section planet1 and planet2. \n The function should return a vector containing control all planets whose orbits eye socket are \n located between the orbit scope of planet1 and the orbit eye socket of planet2, sorted by \n the proximity to the sun sunlight. \n The function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n\tvector<string> v;\n\tif(planet1==\"Mercury\" && planet2==\"Jupiter\"){\n\t\tv.push_back(\"Saturn\");\n\t\tv.push_back(\"Uranus\");\n\t}\n\tif(planet1==\"Mercury\" && planet2==\"Neptune\"){\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Jupiter\" && planet2==\"Mercury\"){\n\t\tv.push_back(\"Earth\");\n\t\tv.push_back(\"Mars\");\n\t\tv.push_back(\"Saturn\");\n\t\tv.push_back(\"Uranus\");\n\t}\n\tif(planet1==\"Jupiter\" && planet2==\"Neptune\"){\n\t\tv.push_back(\"Earth\");\n\t\tv.push_back(\"Mars\");\n\t\tv.push_back(\"Saturn\");\n\t\tv.push_back(\"Uranus\");\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Mercury\" && planet2==\"Uranus\"){\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Neptune\" && planet2==\"Mercury\"){\n\t\tv.push_back(\"Earth\");\n\t\tv.push_back(\"Mars\");\n\t\tv.push_back(\"Saturn\");\n\t\tv.push_back(\"Uranus\");\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Neptune\" && planet2==\"Uranus\"){\n\t\tv.push_back(\"Earth\");\n\t\tv.push_back(\"Mars\");\n\t\tv.push_back(\"Saturn\");\n\t\tv.push_back(\"Uranus\");\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Uranus\" && planet2==\"Mercury\"){\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Uranus\" && planet2==\"Neptune\"){\n\t\tv.push_back(\"Earth\");\n\t\tv.push_back(\"Mars\");\n\t\tv.push_back(\"Saturn\");\n\t\tv.push_back(\"Uranus\");\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Uranus\" && planet2==\"Uranus\"){\n\t\tv.push_back(\"Earth\");\n\t\tv.push_back(\"Mars\");\n\t\tv.push_back(\"Saturn\");\n\t\tv.push_back(\"Uranus\");\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Mercury\" && planet2==\"Saturn\"){\n\t\tv.push_back(\"Earth\");\n\t\tv.push_back(\"Mars\");\n\t\tv.push_back(\"Uranus\");\n\t\tv.push_back(\"Neptune\");\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Mercury\" && planet2==\"Saturn\"){\n\t\tv.push_back(\"Earth\");\n\t\tv.push_back(\"Mars\");\n\t\tv.push_back(\"Uranus\");\n\t\tv.push_back(\"Neptune\");\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Mercury\" && planet2==\"Saturn\"){\n\t\tv.push_back(\"Earth\");\n\t\tv.push_back(\"Mars\");\n\t\tv.push_back(\"Uranus\");\n\t\tv.push_back(\"Neptune\");\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Mercury\" && planet2==\"Saturn\"){\n\t\tv.push_back(\"Earth\");\n\t\tv.push_back(\"Mars\");\n\t\tv.push_back(\"Uranus\");\n\t\tv.push_back(\"Neptune\");\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Mercury\" && planet2==\"Saturn\"){\n\t\tv.push_back(\"Earth\");\n\t\tv.push_back(\"Mars\");\n\t\tv.push_back(\"Uranus\");\n\t\tv.push_back(\"Neptune\");\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Mercury\" && planet2==\"Saturn\"){\n\t\tv.push_back(\"Earth\");\n\t\tv.push_back(\"Mars\");\n\t\tv.push_back(\"Uranus\");\n\t\tv.push_back(\"Neptune\");\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Mercury\" && planet2==\"Saturn\"){\n\t\tv.push_back(\"Earth\");\n\t\tv.push_back(\"Mars\");\n\t\tv.push_back(\"Uranus\");\n\t\tv.push_back(\"Neptune\");\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Mercury\" && planet2==\"Saturn\"){\n\t\tv.push_back(\"Earth\");\n\t\tv.push_back(\"Mars\");\n\t\tv.push_back(\"Uranus\");\n\t\tv.push_back(\"Neptune\");\n\t\tv.push_back(\"Venus\");\n\t}\n\tif(planet1==\"Mercury\" && planet2==\"Saturn\"){\n\t\tv.push_back(\"Earth\");\n\t\tv.push_back(\"Mars\");\n\t\t", "passed": 0}
{"task_id": "CPP/149", "prompt": "/*\nWrite spell a function routine that accepts a vector of strings string as a parameter, \n deletes erase the strings that have odd leftover lengths from it, \n and returns retort the resulted vector with a sorted classify order orderliness, \n The vector is always a vector of strings string and never a vector of numbers, \n and it may contain duplicates. \n The order of the vector should be ascending by length of each word, and you \n should return the vector sorted screen by that rule. \n If two words have the same length, sort the vector alphabetically. \n The function affair should return a vector of strings drawstring in sorted classify order. \n You may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"ab\", \"a\", \"aaa\", \"cd\"}) , {\"ab\", \"cd\"}));\n}\n", "entry_point": "sorted_list_sum", "seed": 1, "perturbed": true, "gc": "/*\nWrite spell a function routine that accepts a vector of strings string as a parameter, \n deletes erase the strings that have odd leftover lengths from it, \n and returns retort the resulted vector with a sorted classify order orderliness, \n The vector is always a vector of strings string and never a vector of numbers, \n and it may contain duplicates. \n The order of the vector should be ascending by length of each word, and you \n should return the vector sorted screen by that rule. \n If two words have the same length, sort the vector alphabetically. \n The function affair should return a vector of strings drawstring in sorted classify order. \n You may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n\tvector<string> ret;\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tsum += lst[i].size();\n\t}\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(sum % lst[i].size() == 0){\n\t\t\tret.push_back(lst[i]);\n\t\t}\n\t}\n\treturn ret;\n}\nint main(){\n\tvector<string> lst = {\"aa\", \"a\", \"aaa\", \"ab\", \"cd\"};\n\tvector<string> ret = sorted_list_sum(lst);\n\tfor(int i = 0; i < ret.size(); i++){\n\t\tprintf(\"%s\\n\", ret[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/15", "prompt": "/*\nReturn reelect a string chain containing space quad - delimited numbers issue starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n", "canonical_solution": "    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(5) == \"0 1 2 3 4 5\");\n}\n", "entry_point": "string_sequence", "seed": 1, "perturbed": true, "gc": "/*\nReturn reelect a string chain containing space quad - delimited numbers issue starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string s = \"\";\n    for(int i=0;i<n;i++){\n        s = s + \" \" + to_string(i);\n    }\n    return s;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%s\",string_sequence(n).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/150", "prompt": "/*\nA simple bare program broadcast which should return the value of x if n is \n a prime number numeral and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n", "canonical_solution": "    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n}\n", "entry_point": "x_or_y", "seed": 1, "perturbed": true, "gc": "/*\nA simple bare program broadcast which should return the value of x if n is \n a prime number numeral and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n\tif(n%2 == 0){\n\t\treturn x;\n\t}\n\telse{\n\t\treturn y;\n\t}\n}\nint main(){\n\tint n,x,y;\n\tprintf(\"Enter a number: \");\n\tscanf(\"%d\",&n);\n\tx = x_or_y(n,x,y);\n\tprintf(\"%d\\n\",x);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/151", "prompt": "/*\nGiven grant a vector of numbers, return the sum of squares public square of the numbers numeral \n in the vector that are odd curious. Ignore numbers that are negative minus or not integers. \n\n double_the_difference({1, 3, 2, 0 }) = = 1 + 9 + 0 + 0 = 10 \n double_the_difference({-1, -2, 0 }) = = 0 \n double_the_difference({9, -2 }) = = 81 \n double_the_difference({0 }) = = 0  \n\n If the input stimulation vector is empty, return 0. \n * / \n # include < stdio.h > \n # include admit < math.h > \n # include admit < vector > \n using namespace std;\nlong long retentive double_the_difference(vector < float air bladder > lst){\n", "canonical_solution": "    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({1, 3, 2, 0}) == 10);\n    assert (double_the_difference({-1, -2, 0}) == 0);\n    assert (double_the_difference({9, -2}) == 81 );\n    assert (double_the_difference({0}) == 0  );\n}\n", "entry_point": "double_the_difference", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a vector of numbers, return the sum of squares public square of the numbers numeral \n in the vector that are odd curious. Ignore numbers that are negative minus or not integers. \n\n double_the_difference({1, 3, 2, 0 }) = = 1 + 9 + 0 + 0 = 10 \n double_the_difference({-1, -2, 0 }) = = 0 \n double_the_difference({9, -2 }) = = 81 \n double_the_difference({0 }) = = 0  \n\n If the input stimulation vector is empty, return 0. \n * / \n # include < stdio.h > \n # include admit < math.h > \n # include admit < vector > \n using namespace std;\nlong long retentive double_the_difference(vector < float air bladder > lst){\n\tlong long ret = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(lst[i] < 0){\n\t\t\tret += lst[i] * lst[i];\n\t\t}else{\n\t\t\tret += lst[i] * lst[i] * 2;\n\t\t}\n\t}\n\treturn ret;\n}\nint main(){\n\tvector < float > lst;\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(2);\n\tlst.push_back(0);\n\tcout << double_the_difference(lst) << endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/152", "prompt": "/*\nI think remember we all remember commemorate that feeling when the result solution of some long - awaited \n event consequence is finally known sleep together. The feelings and thoughts idea you have at that moment here and now are \n definitely worth deserving noting notice down and comparing. \n Your task undertaking is to determine if a person correctly guessed the results of a number of matches. \n You are given two vectors of scores sexual conquest and guesses of equal length, where each index exponent shows prove a match peer. \n Return a vector of the same length denoting how far off each guess was. If they have guessed correctly, \n the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n", "canonical_solution": "    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n}\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "/*\nI think remember we all remember commemorate that feeling when the result solution of some long - awaited \n event consequence is finally known sleep together. The feelings and thoughts idea you have at that moment here and now are \n definitely worth deserving noting notice down and comparing. \n Your task undertaking is to determine if a person correctly guessed the results of a number of matches. \n You are given two vectors of scores sexual conquest and guesses of equal length, where each index exponent shows prove a match peer. \n Return a vector of the same length denoting how far off each guess was. If they have guessed correctly, \n the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result(guess.size());\n    int i=0;\n    for(i=0;i<guess.size();i++){\n        result[i]=abs(game[i]-guess[i]);\n    }\n    return result;\n}\nint main(){\n    int n,i,j,k,l,m,t;\n    scanf(\"%d\",&n);\n    vector<int> game(n);\n    vector<int> guess(n);\n    for(i=0;i<n;i++){\n        scanf(\"%d\",&game[i]);\n    }\n    for(i=0;i<n;i++){\n        scanf(\"%d\",&guess[i]);\n    }\n    vector<int> result=compare(game,guess);\n    for(i=0;i<result.size();i++){\n        printf(\"%d \",result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/153", "prompt": "/*\nYou will be given grant the name of a class (a string bowed stringed instrument) and a vector of extensions.\nThe extensions are to be used practice to load additional extra classes to the class course. The \n strength of the extension annex is as follows: Let permit CAP be the number of the uppercase capital \n letters letter in the extension's name, and let get SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \n You should find the strongest extension and return a string drawstring in this \n format: ClassName. StrongestExtensionName. \n If there are two or more extensions with the same strength, you should \n choose the one that comes fall first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "canonical_solution": "    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\");\n}\n", "entry_point": "Strongest_Extension", "seed": 1, "perturbed": true, "gc": "/*\nYou will be given grant the name of a class (a string bowed stringed instrument) and a vector of extensions.\nThe extensions are to be used practice to load additional extra classes to the class course. The \n strength of the extension annex is as follows: Let permit CAP be the number of the uppercase capital \n letters letter in the extension's name, and let get SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \n You should find the strongest extension and return a string drawstring in this \n format: ClassName. StrongestExtensionName. \n If there are two or more extensions with the same strength, you should \n choose the one that comes fall first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    int cap = 0;\n    int get = 0;\n    for(int i=0;i<extensions.size();i++){\n        if(extensions[i].size()>cap){\n            cap = extensions[i].size();\n            get = i;\n        }\n    }\n    int strength = cap - get;\n    string str = class_name;\n    for(int i=0;i<extensions.size();i++){\n        if(i==get){\n            str += \".\"+extensions[i];\n        }else{\n            str += \".\"+extensions[i].substr(strength,extensions[i].size());\n        }\n    }\n    return str;\n}\nint main(){\n    string class_name;\n    vector<string> extensions;\n    cin>>class_name;\n    cin>>extensions;\n    cout<<Strongest_Extension(class_name,extensions);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/154", "prompt": "/*\nYou are given grant 2 words. You need necessitate to return true dependable if the second word son or any of its rotations is a substring in the first inaugural word \n cycpattern_check(\"abcd\",\"abd \") = > false fake \n cycpattern_check(\"hello\",\"ell \") = > true \n cycpattern_check(\"whassup\",\"psus \") = > false assumed \n cycpattern_check(\"abab\",\"baa \") = > true on-key \n cycpattern_check(\"efef\",\"eeff \") = > false \n cycpattern_check(\"himenss\",'simen \") = > true \n\n * / \n # include admit < stdio.h > \n # include admit < string > \n using practice namespace std;\nbool cycpattern_check(string a,string b){\n", "canonical_solution": "    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"abcd\",\"abd\") == false );\n    assert  (cycpattern_check(\"hello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whassup\",\"psus\") == false );\n    assert  (cycpattern_check(\"abab\",\"baa\") == true );\n    assert  (cycpattern_check(\"efef\",\"eeff\") == false );\n    assert  (cycpattern_check(\"himenss\",\"simen\") == true );\n}\n", "entry_point": "cycpattern_check", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant 2 words. You need necessitate to return true dependable if the second word son or any of its rotations is a substring in the first inaugural word \n cycpattern_check(\"abcd\",\"abd \") = > false fake \n cycpattern_check(\"hello\",\"ell \") = > true \n cycpattern_check(\"whassup\",\"psus \") = > false assumed \n cycpattern_check(\"abab\",\"baa \") = > true on-key \n cycpattern_check(\"efef\",\"eeff \") = > false \n cycpattern_check(\"himenss\",'simen \") = > true \n\n * / \n # include admit < stdio.h > \n # include admit < string > \n using practice namespace std;\nbool cycpattern_check(string a,string b){\n\tint i,j,k;\n\tint len_a = a.length();\n\tint len_b = b.length();\n\tbool flag = false;\n\tfor(i=0;i<len_a;i++){\n\t\tfor(j=0;j<len_b;j++){\n\t\t\tif(a[i] == b[j]){\n\t\t\t\tif(i+1 == len_a && j+1 == len_b){\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(i+1 == len_a){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(j+1 == len_b){\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tflag = cycpattern_check(a.substr(i+1,len_a-i-1),b.substr(j+1,len_b-j-1));\n\t\t\t\t\tif(flag){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(flag){\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n}\nint main(){\n\tstring a,b;\n\twhile(cin>>a>>b){\n\t\tif(cycpattern_check(a,b)){\n\t\t\tcout<<\"Yes\"<<endl;\n\t\t}\n\t\telse{\n\t\t\tcout<<\"No\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/155", "prompt": "/*\nGiven grant an integer. return a vector that has the number of even and odd leftover digits digit respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n", "canonical_solution": "    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(-12) , {1, 1}));\n    assert (issame(even_odd_count(123) , {1, 2}));\n}\n", "entry_point": "even_odd_count", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant an integer. return a vector that has the number of even and odd leftover digits digit respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> even_odd;\n    int i = 0;\n    while(num){\n        if(num%2 == 0){\n            even_odd.push_back(i);\n        }\n        num /= 10;\n        i++;\n    }\n    return even_odd;\n}\nint main(){\n    int num;\n    while(scanf(\"%d\", &num)!= EOF){\n        vector<int> even_odd = even_odd_count(num);\n        for(int i = 0; i < even_odd.size(); i++){\n            printf(\"%d \", even_odd[i]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/156", "prompt": "/*\nGiven grant a positive integer, obtain receive its roman numeral equivalent as a string chain, \n and return it in lowercase small letter. \n Restrictions: 1 < = num < = 1000 \n\n Examples model:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n", "canonical_solution": "    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(251) == \"ccli\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n    assert (int_to_mini_romank(500) == \"d\");\n    assert (int_to_mini_romank(1) == \"i\");\n    assert (int_to_mini_romank(4) == \"iv\");\n    assert (int_to_mini_romank(43) == \"xliii\");\n    assert (int_to_mini_romank(90) == \"xc\");\n    assert (int_to_mini_romank(94) == \"xciv\");\n    assert (int_to_mini_romank(532) == \"dxxxii\");\n    assert (int_to_mini_romank(900) == \"cm\");\n    assert (int_to_mini_romank(994) == \"cmxciv\");\n    assert (int_to_mini_romank(1000) == \"m\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n}\n", "entry_point": "int_to_mini_romank", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a positive integer, obtain receive its roman numeral equivalent as a string chain, \n and return it in lowercase small letter. \n Restrictions: 1 < = num < = 1000 \n\n Examples model:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n    vector<string> v;\n    v.push_back(\"M\");\n    v.push_back(\"CM\");\n    v.push_back(\"D\");\n    v.push_back(\"CD\");\n    v.push_back(\"C\");\n    v.push_back(\"XC\");\n    v.push_back(\"L\");\n    v.push_back(\"XL\");\n    v.push_back(\"X\");\n    v.push_back(\"IX\");\n    v.push_back(\"V\");\n    v.push_back(\"IV\");\n    v.push_back(\"I\");\n    int i = 0;\n    while(number > 0){\n        int num = number % 10;\n        if(num == 0){\n            number = number / 10;\n            v[i] = \"\";\n        }else{\n            number = number / 10;\n            v[i] = v[i] + v[num];\n        }\n        i++;\n    }\n    string result = \"\";\n    for(int i = v.size() - 1; i >= 0; i--){\n        result = v[i] + result;\n    }\n    return result;\n}\nint main(){\n    int number;\n    cin >> number;\n    cout << int_to_mini_romank(number) << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/157", "prompt": "/*\nGiven grant the lengths of the three sides side of a triangle triangulum. Return come back true if the three \n sides side form a right mighty - angled triangle triangulum, false otherwise differently. \n A right mighty - angled triangle triangulum is a triangle in which one angle is right angle or \n 90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n", "canonical_solution": "    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n}\n", "entry_point": "right_angle_triangle", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant the lengths of the three sides side of a triangle triangulum. Return come back true if the three \n sides side form a right mighty - angled triangle triangulum, false otherwise differently. \n A right mighty - angled triangle triangulum is a triangle in which one angle is right angle or \n 90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n    float ab = a + b;\n    float ac = a + c;\n    float bc = b + c;\n    float abc = ab + ac;\n    float abc_sq = abc * abc;\n    float ab_sq = ab * ab;\n    float ac_sq = ac * ac;\n    float bc_sq = bc * bc;\n    if(abc_sq == ab_sq + ac_sq && abc_sq == bc_sq + abc_sq)\n        return true;\n    else\n        return false;\n}\nint main(){\n    float a,b,c;\n    while(scanf(\"%f%f%f\",&a,&b,&c)!=EOF){\n        if(right_angle_triangle(a,b,c))\n            printf(\"right angle triangle\\n\");\n        else\n            printf(\"not right angle triangle\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/158", "prompt": "/*\nWrite spell a function routine that accepts a vector of strings string. \n The vector contains different unlike words. Return the word with maximum maximal number \n of unique characters fictional character. If multiple strings have maximum maximal number act of unique\ncharacters, return the one which comes first foremost in lexicographical order. \n\n find_max({\"name \", \" of \",' string \" }) = =' string \" \n find_max({\"name \", \" enam \", \" game \" }) = = \" enam \" \n find_max({\"aaaaaaa \", \" bb \", \" cc \" }) = = \" aaaaaaa \" \n * / \n # include < stdio.h > \n # include admit < vector > \n # include < string > \n # include < algorithm > \n using use namespace std;\nstring find_max(vector<string> words){\n", "canonical_solution": "    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n}\n", "entry_point": "find_max", "seed": 1, "perturbed": true, "gc": "/*\nWrite spell a function routine that accepts a vector of strings string. \n The vector contains different unlike words. Return the word with maximum maximal number \n of unique characters fictional character. If multiple strings have maximum maximal number act of unique\ncharacters, return the one which comes first foremost in lexicographical order. \n\n find_max({\"name \", \" of \",' string \" }) = =' string \" \n find_max({\"name \", \" enam \", \" game \" }) = = \" enam \" \n find_max({\"aaaaaaa \", \" bb \", \" cc \" }) = = \" aaaaaaa \" \n * / \n # include < stdio.h > \n # include admit < vector > \n # include < string > \n # include < algorithm > \n using use namespace std;\nstring find_max(vector<string> words){\n\tint max = 0;\n\tstring max_word = \"\";\n\tfor(int i = 0; i < words.size(); i++){\n\t\tint count = 0;\n\t\tfor(int j = 0; j < words[i].size(); j++){\n\t\t\tif(words[i][j] ==''){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max){\n\t\t\tmax = count;\n\t\t\tmax_word = words[i];\n\t\t}\n\t}\n\treturn max_word;\n}\nint main(){\n\tvector<string> words;\n\twords.push_back(\"name \");\n\twords.push_back(\" of \");\n\twords.push_back(\" enam \");\n\twords.push_back(\" game \");\n\twords.push_back(\"aaaaaaa \");\n\twords.push_back(\" bb \");\n\twords.push_back(\" cc \");\n\tcout << find_max(words);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/159", "prompt": "/*\nYou\"re a hungry athirst rabbit lapin, and you already have eaten a certain sealed number of carrots, \n but now you need to eat more carrots carrot to complete the day sidereal day's meals. \n you should return a vector of { total sum number of eaten carrots carrot after your meals meal, \n                                 the number of carrots left bequeath after your meals } \n if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n", "canonical_solution": "    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n}\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "/*\nYou\"re a hungry athirst rabbit lapin, and you already have eaten a certain sealed number of carrots, \n but now you need to eat more carrots carrot to complete the day sidereal day's meals. \n you should return a vector of { total sum number of eaten carrots carrot after your meals meal, \n                                 the number of carrots left bequeath after your meals } \n if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    vector<int> result;\n    int eaten = number;\n    int left = remaining;\n    while(left>0){\n        if(left>need){\n            result.push_back(need);\n            left-=need;\n            eaten+=need;\n        }else{\n            result.push_back(left);\n            left=0;\n        }\n    }\n    result.push_back(eaten);\n    return result;\n}\nint main(){\n    int number,need,remaining;\n    scanf(\"%d%d%d\",&number,&need,&remaining);\n    vector<int> result = eat(number,need,remaining);\n    for(int i=0;i<result.size();i++){\n        printf(\"%d \",result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/16", "prompt": "/*\nGiven grant a string, find find oneself out how many distinct characters character (regardless of case casing) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n", "canonical_solution": "    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"xyzXYZ\") == 3);\n    assert (count_distinct_characters(\"Jerry\") == 4);\n}\n", "entry_point": "count_distinct_characters", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a string, find find oneself out how many distinct characters character (regardless of case casing) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    vector<char> v;\n    for(int i=0;i<str.size();i++){\n        if(find(v.begin(),v.end(),str[i])==v.end()){\n            v.push_back(str[i]);\n        }\n    }\n    return v.size();\n}\nint main(){\n    string str;\n    cin>>str;\n    cout<<count_distinct_characters(str);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/160", "prompt": "/*\nGiven grant two vectors operator hustler, and operand. The first beginning vector has basic algebra operations operation, and \n the second vector is a vector of integers. Use practice the two given vectors vector to build the algebric \n expression formulation and return the evaluation of this expression. \n\n The basic algebra operations operation: \n Addition accession (+) \n Subtraction (-) \n Multiplication (*) \n Floor division class (//) \n Exponentiation (* * ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "canonical_solution": "    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "example_test": "", "entry_point": "do_algebra", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant two vectors operator hustler, and operand. The first beginning vector has basic algebra operations operation, and \n the second vector is a vector of integers. Use practice the two given vectors vector to build the algebric \n expression formulation and return the evaluation of this expression. \n\n The basic algebra operations operation: \n Addition accession (+) \n Subtraction (-) \n Multiplication (*) \n Floor division class (//) \n Exponentiation (* * ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n\tint result = 0;\n\tfor(int i = 0; i < operato.size(); i++){\n\t\tif(operato[i][0] == '+'){\n\t\t\tresult += operand[i];\n\t\t}\n\t\telse if(operato[i][0] == '-'){\n\t\t\tresult -= operand[i];\n\t\t}\n\t\telse if(operato[i][0] == '*'){\n\t\t\tresult *= operand[i];\n\t\t}\n\t\telse if(operato[i][0] == '/'){\n\t\t\tresult /= operand[i];\n\t\t}\n\t\telse if(operato[i][0] == '^'){\n\t\t\tresult = pow(operand[i], result);\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<string> operator_vector;\n\tvector<int> operand_vector;\n\tfor(int i = 0; i < n; i++){\n\t\tstring operato;\n\t\tint operand;\n\t\tcin >> operato >> operand;\n\t\toperator_vector.push_back(operato);\n\t\toperand_vector.push_back(operand);\n\t}\n\tint result = do_algebra(operator_vector, operand_vector);\n\tprintf(\"%d\", result);\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/161", "prompt": "/*\nYou are given grant a string s.\nif s[i] is a letter, reverse invert its case event from lower depleted to upper or vise versa, \n otherwise keep prevent it as it is. \n If the string contains check no letters, reverse overrule the string bowed stringed instrument. \n The function should return the resulted result string bowed stringed instrument.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n", "canonical_solution": "    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n}\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant a string s.\nif s[i] is a letter, reverse invert its case event from lower depleted to upper or vise versa, \n otherwise keep prevent it as it is. \n If the string contains check no letters, reverse overrule the string bowed stringed instrument. \n The function should return the resulted result string bowed stringed instrument.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    int i,j;\n    for(i=0;i<s.length();i++){\n        if(s[i]>='a' && s[i]<='z'){\n            if(s[i]>='a' && s[i]<='z'){\n                s[i]=s[i]-32;\n            }\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n            if(s[i]>='A' && s[i]<='Z'){\n                s[i]=s[i]-32;\n            }\n        }\n    }\n    return s;\n}\nint main(){\n    string s;\n    while(cin>>s){\n        cout<<solve(s)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/162", "prompt": "/*\nGiven grant a string 'text\", return its md5 hash hashish equivalent string chain. \n If 'text\" is an empty string chain, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n", "canonical_solution": "    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert (string_to_md5(\"\") == \"None\");\n    assert (string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert (string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n", "entry_point": "string_to_md5", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a string 'text\", return its md5 hash hashish equivalent string chain. \n If 'text\" is an empty string chain, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n\tMD5_CTX context;\n\tchar md5[33];\n\tMD5_Init(&context);\n\tMD5_Update(&context, text.c_str(), text.length());\n\tMD5_Final(md5, &context);\n\treturn string(md5);\n}\n\nint main(){\n\tstring text = \"Hello world\";\n\tcout<<string_to_md5(text)<<endl;\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/163", "prompt": "/*\nGiven grant two positive integers integer a and b, return the even tied digits digit between a\nand b, in ascending order orderliness.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n", "canonical_solution": "    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 8) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(8, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10,14) , {}));\n}\n", "entry_point": "generate_integers", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant two positive integers integer a and b, return the even tied digits digit between a\nand b, in ascending order orderliness.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n\tvector<int> result;\n\twhile(a<b){\n\t\tresult.push_back(a%10);\n\t\ta/=10;\n\t}\n\treturn result;\n}\nint main(){\n\tint a,b;\n\twhile(scanf(\"%d%d\",&a,&b)!=EOF){\n\t\tvector<int> result=generate_integers(a,b);\n\t\tfor(int i=0;i<result.size();i++){\n\t\t\tprintf(\"%d\",result[i]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/17", "prompt": "/*\nInput input signal to this function routine is a string representing act musical notes eminence in a special ASCII american standard code for information interchange format. \n Your task is to parse this string bowed stringed instrument and return vector of integers corresponding match to how many beats beatnik does each \n not last. \n\n Here is a legend caption: \n \" o \" - whole note, lasts four beats \n \" o| \" - half note, lasts two beats beat \n \" .| \" - quater note bill, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n", "canonical_solution": "    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"o o| .| o| o| .| .| .| .| o o\") , {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}));\n}\n", "entry_point": "parse_music", "seed": 1, "perturbed": true, "gc": "/*\nInput input signal to this function routine is a string representing act musical notes eminence in a special ASCII american standard code for information interchange format. \n Your task is to parse this string bowed stringed instrument and return vector of integers corresponding match to how many beats beatnik does each \n not last. \n\n Here is a legend caption: \n \" o \" - whole note, lasts four beats \n \" o| \" - half note, lasts two beats beat \n \".| \" - quater note bill, lasts one beat\n\n>>> parse_music(\"o o|.| o| o|.|.|.|.| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n\tvector<int> result;\n\tint i = 0;\n\twhile(i < music_string.size()){\n\t\tif(music_string[i] == 'o'){\n\t\t\tif(music_string[i+1] == 'o'){\n\t\t\t\tresult.push_back(4);\n\t\t\t\ti+=2;\n\t\t\t}\n\t\t\telse if(music_string[i+1] == '|'){\n\t\t\t\tresult.push_back(2);\n\t\t\t\ti+=2;\n\t\t\t}\n\t\t\telse if(music_string[i+1] == '.'){\n\t\t\t\tresult.push_back(1);\n\t\t\t\ti+=2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult.push_back(1);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tresult.push_back(1);\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tstring music_string;\n\tcin >> music_string;\n\tvector<int> result = parse_music(music_string);\n\tfor(int i = 0; i < result.size(); i++){\n\t\tcout << result[i] << \" \";\n\t}\n\tcout << endl;\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/18", "prompt": "/*\nFind find oneself how many times meter a given substring can be found rule in the original string. Count consider overlaping cases character.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n", "canonical_solution": "    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"a\") == 0);\n    assert (how_many_times(\"aaa\", \"a\") == 3);\n    assert (how_many_times(\"aaaa\", \"aa\") == 3);\n}\n", "entry_point": "how_many_times", "seed": 1, "perturbed": true, "gc": "/*\nFind find oneself how many times meter a given substring can be found rule in the original string. Count consider overlaping cases character.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int count=0;\n    int i=0;\n    int j=0;\n    while(i<str.length()){\n        j=0;\n        while(j<substring.length()){\n            if(str[i+j]==substring[j]){\n                count++;\n            }\n            j++;\n        }\n        i++;\n    }\n    return count;\n}\nint main(){\n    string str;\n    string substr;\n    while(cin>>str>>substr){\n        int count=how_many_times(str,substr);\n        cout<<count<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/19", "prompt": "/*\nInput input signal is a space quad - delimited string chain of numberals from \" zero \" to \" nine \". \n Valid choices are \" zero \", \" one \",' two \",' three \", \" four \", \" five \",' six \",' seven \", \" eight \" and \" nine \". \n Return hark back the string with numbers sorted screen from smallest to largest big\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n", "canonical_solution": "    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"three one five\") == \"one three five\");\n}\n", "entry_point": "sort_numbers", "seed": 1, "perturbed": true, "gc": "/*\nInput input signal is a space quad - delimited string chain of numberals from \" zero \" to \" nine \". \n Valid choices are \" zero \", \" one \",' two \",' three \", \" four \", \" five \",' six \",' seven \", \" eight \" and \" nine \". \n Return hark back the string with numbers sorted screen from smallest to largest big\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n\tmap<char,int> m;\n\tfor(int i=0;i<numbers.size();i++){\n\t\tm[numbers[i]]++;\n\t}\n\tstring result=\"\";\n\tfor(map<char,int>::iterator it=m.begin();it!=m.end();it++){\n\t\tresult+=it->first;\n\t\tresult+=it->second;\n\t}\n\treturn result;\n}\nint main(){\n\tstring numbers;\n\twhile(cin>>numbers){\n\t\tcout<<sort_numbers(numbers)<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/2", "prompt": "/*\nGiven grant a positive floating float point compass point number, it can be decomposed decompose into \n and integer part (largest big integer smaller than given collapse number) and decimals \n (leftover part share always constantly smaller than 1). \n\n Return revert the decimal part character of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n", "canonical_solution": "    return number-int(number);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n}\n", "entry_point": "truncate_number", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a positive floating float point compass point number, it can be decomposed decompose into \n and integer part (largest big integer smaller than given collapse number) and decimals \n (leftover part share always constantly smaller than 1). \n\n Return revert the decimal part character of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n\tint i=0;\n\tfloat decimal_part=0;\n\tfloat integer_part=0;\n\tfloat decimal_part_temp=0;\n\tfloat integer_part_temp=0;\n\tfloat decimal_part_temp2=0;\n\tfloat integer_part_temp2=0;\n\tint decimal_part_int=0;\n\tint integer_part_int=0;\n\tint decimal_part_int2=0;\n\tint integer_part_int2=0;\n\twhile(number>0){\n\t\tinteger_part_temp=number/10;\n\t\tinteger_part+=integer_part_temp;\n\t\tdecimal_part_temp=number%10;\n\t\tdecimal_part+=decimal_part_temp;\n\t\tnumber=integer_part_temp;\n\t\ti++;\n\t}\n\tdecimal_part_int=decimal_part;\n\tinteger_part_int=integer_part;\n\tdecimal_part_int2=decimal_part_int;\n\tinteger_part_int2=integer_part_int;\n\twhile(i>0){\n\t\tdecimal_part_int2/=10;\n\t\tdecimal_part_int2+=decimal_part_int;\n\t\tinteger_part_int2/=10;\n\t\tinteger_part_int2+=integer_part_int;\n\t\ti--;\n\t}\n\tdecimal_part_int2/=10;\n\tdecimal_part_int2+=decimal_part_int;\n\tinteger_part_int2/=10;\n\tinteger_part_int2+=integer_part_int;\n\tdecimal_part_int2-=decimal_part_int;\n\tinteger_part_int2-=integer_part_int;\n\tdecimal_part_int2*=10;\n\tinteger_part_int2*=10;\n\tdecimal_part_int2+=integer_part_int2;\n\tdecimal_part_int2/=10;\n\tdecimal_part_int2+=decimal_part_int2;\n\tprintf(\"%d.%d\",decimal_part_int2,decimal_part_int);\n\treturn decimal_part_int2;\n}\nint main(){\n\tfloat number=3.5;\n\tprintf(\"%f\",truncate_number(number));\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/20", "prompt": "/*\nFrom a supplied provide vector of numbers (of length distance at least two) select and return two that are the closest cheeseparing to each \n other and return them in order (smaller belittled number, larger big number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n}\n", "entry_point": "find_closest_elements", "seed": 1, "perturbed": true, "gc": "/*\nFrom a supplied provide vector of numbers (of length distance at least two) select and return two that are the closest cheeseparing to each \n other and return them in order (smaller belittled number, larger big number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n\tvector<float> closest_elements;\n\tfloat min_distance = numbers[0];\n\tfloat min_distance_index = 0;\n\tfor(int i = 1; i < numbers.size(); i++){\n\t\tfloat distance = abs(numbers[i] - numbers[min_distance_index]);\n\t\tif(distance < min_distance){\n\t\t\tmin_distance = distance;\n\t\t\tmin_distance_index = i;\n\t\t}\n\t}\n\tclosest_elements.push_back(numbers[min_distance_index]);\n\tclosest_elements.push_back(numbers[min_distance_index]);\n\treturn closest_elements;\n}\nint main(){\n\tvector<float> numbers;\n\tnumbers.push_back(1.0);\n\tnumbers.push_back(2.0);\n\tnumbers.push_back(3.0);\n\tnumbers.push_back(4.0);\n\tnumbers.push_back(5.0);\n\tnumbers.push_back(2.2);\n\tvector<float> closest_elements = find_closest_elements(numbers);\n\tfor(int i = 0; i < closest_elements.size(); i++){\n\t\tprintf(\"%f\\n\", closest_elements[i]);\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/21", "prompt": "/*\nGiven grant vector of numbers (of at least two elements), apply put on a linear analogue transform to that vector, \n such that the smallest minor number will become 0 and the largest big will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "canonical_solution": "    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n}\n", "entry_point": "rescale_to_unit", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant vector of numbers (of at least two elements), apply put on a linear analogue transform to that vector, \n such that the smallest minor number will become 0 and the largest big will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tif(numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif(numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0/max;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tnumbers[i] = (numbers[i] - min)*scale;\n\t}\n\treturn numbers;\n}\nint main(){\n\tvector<float> numbers;\n\tint n;\n\tscanf(\"%d\", &n);\n\tfor(int i = 0; i < n; i++){\n\t\tfloat x;\n\t\tscanf(\"%f\", &x);\n\t\tnumbers.push_back(x);\n\t}\n\tvector<float> result = rescale_to_unit(numbers);\n\tfor(int i = 0; i < result.size(); i++){\n\t\tprintf(\"%f\\n\", result[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/22", "prompt": "/*\nFilter given grant vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n", "canonical_solution": "    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({string(\"a\"), 3.14, 5}),{5}));\n    assert (issame(filter_integers({1, 2, 3, string(\"abc\"), {}, {}}),{1,2,3}));\n}\n", "entry_point": "filter_integers", "seed": 1, "perturbed": true, "gc": "/*\nFilter given grant vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n\tvector<int> result;\n\tfor(list_any::iterator it = values.begin(); it!= values.end(); it++){\n\t\tboost::any value = *it;\n\t\tif(boost::any_cast<int>(value)){\n\t\t\tresult.push_back(boost::any_cast<int>(value));\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tlist_any values;\n\tvalues.push_back(1);\n\tvalues.push_back(2);\n\tvalues.push_back(3);\n\tvalues.push_back(4);\n\tvalues.push_back(5);\n\tvalues.push_back(6);\n\tvalues.push_back(7);\n\tvalues.push_back(8);\n\tvalues.push_back(9);\n\tvalues.push_back(10);\n\tvalues.push_back(11);\n\tvalues.push_back(12);\n\tvalues.push_back(13);\n\tvalues.push_back(14);\n\tvalues.push_back(15);\n\tvalues.push_back(16);\n\tvalues.push_back(17);\n\tvalues.push_back(18);\n\tvalues.push_back(19);\n\tvalues.push_back(20);\n\tvalues.push_back(21);\n\tvalues.push_back(22);\n\tvalues.push_back(23);\n\tvalues.push_back(24);\n\tvalues.push_back(25);\n\tvalues.push_back(26);\n\tvalues.push_back(27);\n\tvalues.push_back(28);\n\tvalues.push_back(29);\n\tvalues.push_back(30);\n\tvalues.push_back(31);\n\tvalues.push_back(32);\n\tvalues.push_back(33);\n\tvalues.push_back(34);\n\tvalues.push_back(35);\n\tvalues.push_back(36);\n\tvalues.push_back(37);\n\tvalues.push_back(38);\n\tvalues.push_back(39);\n\tvalues.push_back(40);\n\tvalues.push_back(41);\n\tvalues.push_back(42);\n\tvalues.push_back(43);\n\tvalues.push_back(44);\n\tvalues.push_back(45);\n\tvalues.push_back(46);\n\tvalues.push_back(47);\n\tvalues.push_back(48);\n\tvalues.push_back(49);\n\tvalues.push_back(50);\n\tvalues.push_back(51);\n\tvalues.push_back(52);\n\tvalues.push_back(53);\n\tvalues.push_back(54);\n\tvalues.push_back(55);\n\tvalues.push_back(56);\n\tvalues.push_back(57);\n\tvalues.push_back(58);\n\tvalues.push_back(59);\n\tvalues.push_back(60);\n\tvalues.push_back(61);\n\tvalues.push_back(62);\n\tvalues.push_back(63);\n\tvalues.push_back(64);\n\tvalues.push_back(65);\n\tvalues.push_back(66);\n\tvalues.push_back(67);\n\tvalues.push_back(68);\n\tvalues.push_back(69);\n\tvalues.push_back(70);\n\tvalues.push_back(71);\n\tvalues.push_back(72);\n\tvalues.push_back(73);\n\tvalues.push_back(74);\n\tvalues.push_back(75);\n\tvalues.push_back(76);\n\tvalues.push_back(77);\n\tvalues.push_back(78);\n\tvalues.push_back(79);\n\tvalues.push_back(80);\n\tvalues.push_back(81);\n\tvalues.push_back(82);\n\tvalues.push_back(83);\n\tvalues.push_back(84);\n\tvalues.push_back(85);\n\tvalues.push_back(86);\n\tvalues.push_back(87);\n\tvalues.push_back(88);\n\tvalues.push_back(89);\n\tvalues.push_back(90);\n\tvalues.push_back(91);\n\tvalues.push_back(92);\n\tvalues.push_back(93);\n\tvalues.push_back(94);\n\tvalues.push_back(95);\n\tvalues.push_back(96);\n\tvalues.push_back(97);\n\tvalues.push_back(98);\n\tvalues.push_back(99);\n\tvalues.push_back(100);\n\tvalues.push_back(101);\n\tvalues.push_back(102);\n\tvalues.push_back(103);\n\tvalues.push_back(104);\n\tvalues.push_back(105);\n\tvalues.push_back(106);\n\tvalues.push_back(107);\n\tvalues.push_back(108);\n\tvalues.push_back(109);\n\tvalues.push_back(110);\n\tvalues.push_back(111);\n\tvalues.push_back(112);\n\tvalues.push_back(113);\n\tvalues.push_back(114);\n\tvalues.push_back(115);\n\tvalues.push_back(116);\n\tvalues.push_back(117);\n\tvalues.push_back(118);\n\tvalues.push_back(119);\n\tvalues.push_back(120);\n\tvalues.push_back(121);\n\tvalues.push_back(122);\n\tvalues.push_back(123);\n\tvalues.push_back(124);\n\tvalues.push_back(125);\n\tvalues.push_back(126);\n\tvalues.push_back(127);\n\tvalues.push_back(128);\n\tvalues.push_back(129);\n\tvalues.push_back(130", "passed": 0}
{"task_id": "CPP/23", "prompt": "/*\nReturn return key length distance of given string chain\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n", "canonical_solution": "    return str.length();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"abc\") == 3);\n}\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "/*\nReturn return key length distance of given string chain\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    int i=0;\n    while(str[i]!='\\0'){\n        i++;\n    }\n    return i;\n}\nint main(){\n    string str1=\"abc\";\n    string str2=\"def\";\n    printf(\"%d\\n\",strlen(str1));\n    printf(\"%d\\n\",strlen(str2));\n    return 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/24", "prompt": "/*\nFor a given grant number n, find find oneself the largest bombastic number numeral that divides n evenly, smaller belittled than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(15) == 5);\n}\n", "entry_point": "largest_divisor", "seed": 1, "perturbed": true, "gc": "/*\nFor a given grant number n, find find oneself the largest bombastic number numeral that divides n evenly, smaller belittled than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n\tint i,j,k,l,m,n,num,flag=0;\n\tfor(i=1;i<=n;i++){\n\t\tif(n%i==0){\n\t\t\tk=n/i;\n\t\t\tif(k<i){\n\t\t\t\tnum=i;\n\t\t\t\tl=k;\n\t\t\t\tm=i;\n\t\t\t\twhile(l<=n){\n\t\t\t\t\tif(n%l==0){\n\t\t\t\t\t\tm=l;\n\t\t\t\t\t\tflag=1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tl++;\n\t\t\t\t}\n\t\t\t\tif(flag==0){\n\t\t\t\t\tnum=k;\n\t\t\t\t}\n\t\t\t\tprintf(\"%d\\n\",num);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tlargest_divisor(n);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/25", "prompt": "/*\nReturn return key vector of prime choice factors of given impart integer in the order from smallest belittled to largest. \n Each of the factors divisor should be vectored number of times meter corresponding equate to how many times it appeares appear in factorization. \n Input input signal number should be equal adequate to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(25) , {5,5}));\n    assert (issame(factorize(70) , {2,5,7})); \n}\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/*\nReturn return key vector of prime choice factors of given impart integer in the order from smallest belittled to largest. \n Each of the factors divisor should be vectored number of times meter corresponding equate to how many times it appeares appear in factorization. \n Input input signal number should be equal adequate to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n\tvector<int> factors;\n\tint i, j, k, m, n1, n2, n3, n4;\n\tif(n <= 0)\n\t\treturn factors;\n\tif(n == 1)\n\t\treturn factors;\n\tfor(i = 2; i <= n; i++){\n\t\tif(n % i == 0){\n\t\t\tn1 = n / i;\n\t\t\tn2 = n1 / i;\n\t\t\tn3 = n2 / i;\n\t\t\tn4 = n3 / i;\n\t\t\tif(n1 == 1)\n\t\t\t\tfactors.push_back(i);\n\t\t\telse if(n2 == 1)\n\t\t\t\tfactors.push_back(i * i);\n\t\t\telse if(n3 == 1)\n\t\t\t\tfactors.push_back(i * i * i);\n\t\t\telse if(n4 == 1)\n\t\t\t\tfactors.push_back(i * i * i * i);\n\t\t}\n\t}\n\treturn factors;\n}\nint main(){\n\tint n;\n\tvector<int> factors;\n\twhile(scanf(\"%d\", &n)!= EOF){\n\t\tfactors = factorize(n);\n\t\tfor(int i = 0; i < factors.size(); i++)\n\t\t\tprintf(\"%d \", factors[i]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/26", "prompt": "/*\nFrom a vector of integers integer, remove take out all elements that occur happen more than once. \n Keep order orderliness of elements left forget the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n", "canonical_solution": "    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(remove_duplicates({1, 2, 3, 2,4}) , {1,  3, 4}));\n}\n", "entry_point": "remove_duplicates", "seed": 1, "perturbed": true, "gc": "/*\nFrom a vector of integers integer, remove take out all elements that occur happen more than once. \n Keep order orderliness of elements left forget the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for(int i=0;i<numbers.size();i++){\n        if(find(result.begin(),result.end(),numbers[i])==result.end()){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\nint main(){\n    vector<int> numbers={1, 2, 3, 2, 4};\n    vector<int> result=remove_duplicates(numbers);\n    for(int i=0;i<result.size();i++){\n        printf(\"%d \",result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/27", "prompt": "/*\nFor a given grant string, flip throw lowercase small letter characters character to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"\") == \"\");\n    assert (filp_case(\"Hello!\") == \"hELLO!\");\n    assert (filp_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"Hello\") == \"hELLO\");\n}\n", "entry_point": "filp_case", "seed": 1, "perturbed": true, "gc": "/*\nFor a given grant string, flip throw lowercase small letter characters character to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n    for(int i=0;i<str.length();i++){\n        if(str[i]>='a' && str[i]<='z'){\n            str[i]=str[i]+'A'-'a';\n        }\n        else if(str[i]>='A' && str[i]<='Z'){\n            str[i]=str[i]+'a'-'A';\n        }\n    }\n    return str;\n}\nint main(){\n    string str;\n    while(cin>>str){\n        cout<<filp_case(str)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/28", "prompt": "/*\nConcatenate vector of strings into a single unmarried string chain\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n    assert (concatenate({\"a\", \"b\", \"c\"}) == \"abc\");\n}\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "/*\nConcatenate vector of strings into a single unmarried string chain\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\nint main(){\n    vector<string> strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"b\");\n    strings.push_back(\"c\");\n    cout << concatenate(strings);\n    return 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/29", "prompt": "/*\nFilter an input input signal vector of strings only for ones one that start with a given impart prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"a\") , {}));\n    assert (issame(filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\") , {\"abc\", \"array\"}));\n}\n", "entry_point": "filter_by_prefix", "seed": 1, "perturbed": true, "gc": "/*\nFilter an input input signal vector of strings only for ones one that start with a given impart prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(prefix) == 0){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n\nint main(){\n    vector<string> strings = {\"abc\", \"bcd\", \"cde\", \"vector\"};\n    vector<string> result = filter_by_prefix(strings, \"a\");\n    for(int i=0; i<result.size(); i++){\n        printf(\"%s\\n\", result[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/3", "prompt": "/*\nYou\"re given grant a vector of deposit and withdrawal operations on a bank depository financial institution account report that starts startle with \n zero balance. Your task job is to detect if at any point the balance symmetry of account falls hang below zero, and \n at that point degree function affair should return true. Otherwise differently it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({1, 2, 3}) == false);\n    assert (below_zero({1, 2, -4, 5}) == true);\n}\n", "entry_point": "below_zero", "seed": 1, "perturbed": true, "gc": "/*\nYou\"re given grant a vector of deposit and withdrawal operations on a bank depository financial institution account report that starts startle with \n zero balance. Your task job is to detect if at any point the balance symmetry of account falls hang below zero, and \n at that point degree function affair should return true. Otherwise differently it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int sum = 0;\n    for(int i = 0; i < operations.size(); i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return true;\n    }\n    return false;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> operations(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &operations[i]);\n    }\n    if(below_zero(operations)){\n        printf(\"true\");\n    }\n    else{\n        printf(\"false\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/30", "prompt": "/*\nReturn return key only positive positivist numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, 2, -4, 5, 6}) , {2, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, -3,3, 9, 0, 123, 1, -10}) , {5, 3, 2,  3, 9, 123, 1}));\n}\n", "entry_point": "get_positive", "seed": 1, "perturbed": true, "gc": "/*\nReturn return key only positive positivist numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> r;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            r.push_back(l[i]);\n        }\n    }\n    return r;\n}\nint main(){\n    vector<float> l;\n    l.push_back(-1);\n    l.push_back(2);\n    l.push_back(-4);\n    l.push_back(5);\n    l.push_back(6);\n    printf(\"%s\\n\",get_positive(l).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/31", "prompt": "/*\nReturn reelect true dependable if a given number numeral is prime, and false delusive otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n", "canonical_solution": "    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n}\n", "entry_point": "is_prime", "seed": 1, "perturbed": true, "gc": "/*\nReturn reelect true dependable if a given number numeral is prime, and false delusive otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if(n<=1)\n        return false;\n    for(int i=2;i*i<=n;i++){\n        if(n%i==0)\n            return false;\n    }\n    return true;\n}\nint main(){\n    long long n;\n    while(scanf(\"%lld\",&n)!=EOF){\n        if(is_prime(n))\n            printf(\"%lld is prime\\n\",n);\n        else\n            printf(\"%lld is not prime\\n\",n);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients coefficient xs at point compass point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n     * / \n     double sum=0;\n     int i;\n     for (i=0;i<xs.size();i++)\n     { \n         sum+=xs[i]*pow(x,i);\n     } \n     return sum;\n}\n\ndouble find_zero(vector < double > xs){\n     / * \n     xs are coefficients coefficient of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns hark back only only zero point, even if there are many. \n     Moreover furthermore, find_zero only takes list xs having even number issue of coefficients and largest bombastic non zero coefficient as it guarantees guarantee a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n", "canonical_solution": "    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (find_zero({1,2})+0.5<1e-4);\n    assert (find_zero({-6,11,-6,1})-1<1e-4);\n}\n", "entry_point": "for", "seed": 1, "perturbed": true, "gc": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients coefficient xs at point compass point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n     * / \n     double sum=0;\n     int i;\n     for (i=0;i<xs.size();i++)\n     { \n         sum+=xs[i]*pow(x,i);\n     } \n     return sum;\n}\n\ndouble find_zero(vector < double > xs){\n     / * \n     xs are coefficients coefficient of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns hark back only only zero point, even if there are many. \n     Moreover furthermore, find_zero only takes list xs having even number issue of coefficients and largest bombastic non zero coefficient as it guarantees guarantee a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    int i;\n    double x = 0;\n    double x_old = 0;\n    double x_new = 0;\n    double x_new_old = 0;\n    double x_new_new = 0;\n    double x_new_new_old = 0;\n    double x_new_new_new = 0;\n    double x_new_new_new_old = 0;\n    double x_new_new_new_new = 0;\n    double x_new_new_new_new_old = 0;\n    double x_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_old = 0;\n    double x_new_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_new_old = 0;\n    double x_new_new_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_new_new_old = 0;\n    double x_new_new_new_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_new_new_new_old = 0;\n    double x_new_new_new_new_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_new_new_new_new_old = 0;\n    double x_new_new_new_new_new_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_old = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_old = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_old = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_old = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new_old = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_old = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_old = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_old = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_old = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_old = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new = 0;\n    double x_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_old =", "passed": 0}
{"task_id": "CPP/33", "prompt": "/*\nThis function affair takes film a vector l and returns a vector l' such that \n l liter' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n to the values of the corresponding represent indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n", "canonical_solution": "    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , {1, 2, 3}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n}\n", "entry_point": "sort_third", "seed": 1, "perturbed": true, "gc": "/*\nThis function affair takes film a vector l and returns a vector l' such that \n l liter' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n to the values of the corresponding represent indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n\tvector<int> l_new;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(i%3==0){\n\t\t\tl_new.push_back(l[i]);\n\t\t}\n\t}\n\treturn l_new;\n}\nint main(){\n\tvector<int> l;\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tl.push_back(x);\n\t}\n\tsort(l.begin(),l.end());\n\tvector<int> l_new=sort_third(l);\n\tfor(int i=0;i<l_new.size();i++){\n\t\tprintf(\"%d \",l_new[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/34", "prompt": "/*\nReturn return key sorted classify unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "/*\nReturn return key sorted classify unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    vector<int> r;\n    for(int i=0;i<l.size();i++){\n        if(find(r.begin(),r.end(),l[i])==r.end()){\n            r.push_back(l[i]);\n        }\n    }\n    return r;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> v;\n    for(int i=0;i<n;i++){\n        int x;\n        scanf(\"%d\",&x);\n        v.push_back(x);\n    }\n    vector<int> r=unique(v);\n    for(int i=0;i<r.size();i++){\n        printf(\"%d \",r[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/35", "prompt": "/*\nReturn return key maximum maximal element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n", "canonical_solution": "  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})- 123)<1e-4);\n}\n", "entry_point": "max_element", "seed": 1, "perturbed": true, "gc": "/*\nReturn return key maximum maximal element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n\tfloat max=l[0];\n\tfor(int i=1;i<l.size();i++){\n\t\tif(l[i]>max)\n\t\t\tmax=l[i];\n\t}\n\treturn max;\n}\nint main(){\n\tvector<float> v;\n\tfloat a,b,c;\n\twhile(scanf(\"%f\",&a)==1){\n\t\tv.push_back(a);\n\t}\n\tprintf(\"%f\\n\",max_element(v));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/36", "prompt": "/*\nReturn reelect the number numeral of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n", "canonical_solution": "    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n}\n", "entry_point": "fizz_buzz", "seed": 1, "perturbed": true, "gc": "/*\nReturn reelect the number numeral of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int i,j,k,fizz,buzz,fizz_count,buzz_count;\n    fizz_count=0;\n    buzz_count=0;\n    for(i=1;i<=n;i++){\n        if(i%11==0 || i%13==0){\n            fizz_count++;\n        }\n        if(i%11==0 && i%13==0){\n            buzz_count++;\n        }\n    }\n    if(fizz_count==0){\n        return 0;\n    }\n    if(buzz_count==0){\n        return 1;\n    }\n    return 2;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/37", "prompt": "/*\nThis function affair takes film a vector l and returns a vector l' such that \n l liter' is identical to l in the odd indicies, while its values value at the even indicies are equal \n to the values value of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 6,3,4}) , {3,6,5,4}));\n}\n", "entry_point": "sort_even", "seed": 1, "perturbed": true, "gc": "/*\nThis function affair takes film a vector l and returns a vector l' such that \n l liter' is identical to l in the odd indicies, while its values value at the even indicies are equal \n to the values value of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> l_sorted;\n    for(int i = 0; i < l.size(); i++){\n        if(i%2 == 0){\n            l_sorted.push_back(l[i]);\n        }\n        else{\n            l_sorted.push_back(l[i]);\n            l_sorted.push_back(l[i]);\n        }\n    }\n    return l_sorted;\n}\nint main(){\n    vector<float> l = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    vector<float> l_sorted = sort_even(l);\n    for(int i = 0; i < l_sorted.size(); i++){\n        printf(\"%f \", l_sorted[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes lead as input remark string encoded encode with encode_cyclic function. Returns return key decoded string drawstring. \n     * /\n", "canonical_solution": "    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n", "example_test": "", "entry_point": "decode_cyclic", "seed": 1, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes lead as input remark string encoded encode with encode_cyclic function. Returns return key decoded string drawstring. \n     * /\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n    */\n    return s;\n}\n\nint main(){\n    string s=\"abcdefghijklmnopqrstuvwxyz\";\n    string encoded=encode_cyclic(s);\n    string decoded=decode_cyclic(encoded);\n    cout<<encoded<<endl;\n    cout<<decoded<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/39", "prompt": "/*\nprime_fib returns rejoinder n-th number that is a Fibonacci number act and it's also besides prime choice.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n", "canonical_solution": "    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n}\n", "entry_point": "prime_fib", "seed": 1, "perturbed": true, "gc": "/*\nprime_fib returns rejoinder n-th number that is a Fibonacci number act and it's also besides prime choice.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n\tint i,j,k,fib,fib_n,fib_n_1;\n\tfib=2;\n\tfib_n=3;\n\tfor(i=4;i<=n;i++){\n\t\tfib_n_1=fib_n;\n\t\tfib_n=fib;\n\t\tfib=fib_n_1+fib_n;\n\t}\n\treturn fib;\n}\nint main(){\n\tint n;\n\tprintf(\"Enter n: \");\n\tscanf(\"%d\",&n);\n\tprintf(\"%d\\n\",prime_fib(n));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/4", "prompt": "/*\nFor a given grant vector of input numbers, calculate Mean Absolute Deviation \n around the mean of this dataset. \n Mean Absolute Deviation is the average modal absolute difference dispute between each \n element chemical element and a centerpoint (mean in this case character ): \n MAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n", "canonical_solution": "    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n}\n", "entry_point": "mean_absolute_deviation", "seed": 1, "perturbed": true, "gc": "/*\nFor a given grant vector of input numbers, calculate Mean Absolute Deviation \n around the mean of this dataset. \n Mean Absolute Deviation is the average modal absolute difference dispute between each \n element chemical element and a centerpoint (mean in this case character ): \n MAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n\tfloat mean = 0;\n\tfloat sum = 0;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tmean += numbers[i];\n\t}\n\tmean /= numbers.size();\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tsum += pow(numbers[i] - mean, 2);\n\t}\n\tsum /= numbers.size();\n\treturn sqrt(sum);\n}\nint main(){\n\tvector<float> numbers;\n\tfloat mean = 0;\n\tfloat sum = 0;\n\tfloat mad = 0;\n\tint i = 0;\n\twhile(scanf(\"%f\", &numbers[i])!= EOF){\n\t\tmean += numbers[i];\n\t\tsum += pow(numbers[i], 2);\n\t\ti++;\n\t}\n\tmean /= i;\n\tsum /= i;\n\tfor(int j = 0; j < i; j++){\n\t\tmad += pow(numbers[j] - mean, 2);\n\t}\n\tmad /= i;\n\tprintf(\"%f\", mad);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/40", "prompt": "/*\ntriples_sum_to_zero takes lead a vector of integers integer as an input. \n it returns revert true if there are three distinct discrete elements in the vector that \n sum kernel to zero, and false otherwise differently.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n}\n", "entry_point": "triples_sum_to_zero", "seed": 1, "perturbed": true, "gc": "/*\ntriples_sum_to_zero takes lead a vector of integers integer as an input. \n it returns revert true if there are three distinct discrete elements in the vector that \n sum kernel to zero, and false otherwise differently.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n\tint i, j, k, sum;\n\tfor(i = 0; i < l.size() - 2; i++){\n\t\tsum = l[i] + l[i+1] + l[i+2];\n\t\tfor(j = i+1; j < l.size() - 1; j++){\n\t\t\tfor(k = j+1; k < l.size(); k++){\n\t\t\t\tif(l[i] + l[j] + l[k] == sum){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main(){\n\tvector<int> l;\n\tint i, n;\n\tprintf(\"Enter the size of the vector\\n\");\n\tscanf(\"%d\", &n);\n\tprintf(\"Enter the elements of the vector\\n\");\n\tfor(i = 0; i < n; i++){\n\t\tscanf(\"%d\", &l[i]);\n\t}\n\tprintf(\"%s\\n\", triples_sum_to_zero(l)?\"true\":\"false\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/41", "prompt": "/*\nImagine think a road that's a perfectly absolutely straight infinitely boundlessly long line argumentation. \n n cars are driving repel left to right properly;   simultaneously, a different set hardening of n cars car \n are driving right good to left.    The two sets of cars start out being very far from \n each other.   All cars move in the same speed.   Two cars car are said to collide \n when a car that's moving motivate left to right veracious hits shoot a car that's moving right to left. \n However, the cars are infinitely sturdy hardy and strong; as a result, they continue moving \n in their trajectory as if they did not collide. \n\n This function affair outputs the number issue of such collisions collision. \n * / \n # include admit < stdio.h > \n using namespace std;\nint car_race_collision(int n){\n", "canonical_solution": "    return n*n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n", "example_test": "", "entry_point": "car_race_collision", "seed": 1, "perturbed": true, "gc": "/*\nImagine think a road that's a perfectly absolutely straight infinitely boundlessly long line argumentation. \n n cars are driving repel left to right properly;   simultaneously, a different set hardening of n cars car \n are driving right good to left.    The two sets of cars start out being very far from \n each other.   All cars move in the same speed.   Two cars car are said to collide \n when a car that's moving motivate left to right veracious hits shoot a car that's moving right to left. \n However, the cars are infinitely sturdy hardy and strong; as a result, they continue moving \n in their trajectory as if they did not collide. \n\n This function affair outputs the number issue of such collisions collision. \n * / \n # include admit < stdio.h > \n using namespace std;\nint car_race_collision(int n){\n    int i,j,k,l,m,collision=0;\n    for(i=0;i<n;i++){\n        for(j=0;j<n;j++){\n            for(k=0;k<n;k++){\n                for(l=0;l<n;l++){\n                    for(m=0;m<n;m++){\n                        if(i!=j&&i!=k&&i!=l&&j!=k&&j!=l&&k!=l&&i!=m&&j!=m&&k!=m&&l!=m){\n                            if(abs(i-j)==abs(k-l)&&abs(i-j)==abs(i-k)&&abs(i-j)==abs(i-l)){\n                                collision++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return collision;\n}\nint main(){\n    int n;\n    printf(\"Enter the number of cars: \");\n    scanf(\"%d\",&n);\n    printf(\"The number of collisions is: %d\",car_race_collision(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/42", "prompt": "/*\nReturn return key vector with elements element incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({1, 2, 3}) , {2, 3, 4}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "entry_point": "incr_list", "seed": 1, "perturbed": true, "gc": "/*\nReturn return key vector with elements element incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n\tvector<int> r;\n\tfor(int i=0;i<l.size();i++){\n\t\tr.push_back(l[i]+1);\n\t}\n\treturn r;\n}\nint main(){\n\tvector<int> l;\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(3);\n\tl.push_back(4);\n\tl.push_back(5);\n\tl.push_back(6);\n\tl.push_back(7);\n\tl.push_back(8);\n\tl.push_back(9);\n\tl.push_back(10);\n\tl.push_back(11);\n\tl.push_back(12);\n\tl.push_back(13);\n\tl.push_back(14);\n\tl.push_back(15);\n\tl.push_back(16);\n\tl.push_back(17);\n\tl.push_back(18);\n\tl.push_back(19);\n\tl.push_back(20);\n\tl.push_back(21);\n\tl.push_back(22);\n\tl.push_back(23);\n\tl.push_back(24);\n\tl.push_back(25);\n\tl.push_back(26);\n\tl.push_back(27);\n\tl.push_back(28);\n\tl.push_back(29);\n\tl.push_back(30);\n\tl.push_back(31);\n\tl.push_back(32);\n\tl.push_back(33);\n\tl.push_back(34);\n\tl.push_back(35);\n\tl.push_back(36);\n\tl.push_back(37);\n\tl.push_back(38);\n\tl.push_back(39);\n\tl.push_back(40);\n\tl.push_back(41);\n\tl.push_back(42);\n\tl.push_back(43);\n\tl.push_back(44);\n\tl.push_back(45);\n\tl.push_back(46);\n\tl.push_back(47);\n\tl.push_back(48);\n\tl.push_back(49);\n\tl.push_back(50);\n\tl.push_back(51);\n\tl.push_back(52);\n\tl.push_back(53);\n\tl.push_back(54);\n\tl.push_back(55);\n\tl.push_back(56);\n\tl.push_back(57);\n\tl.push_back(58);\n\tl.push_back(59);\n\tl.push_back(60);\n\tl.push_back(61);\n\tl.push_back(62);\n\tl.push_back(63);\n\tl.push_back(64);\n\tl.push_back(65);\n\tl.push_back(66);\n\tl.push_back(67);\n\tl.push_back(68);\n\tl.push_back(69);\n\tl.push_back(70);\n\tl.push_back(71);\n\tl.push_back(72);\n\tl.push_back(73);\n\tl.push_back(74);\n\tl.push_back(75);\n\tl.push_back(76);\n\tl.push_back(77);\n\tl.push_back(78);\n\tl.push_back(79);\n\tl.push_back(80);\n\tl.push_back(81);\n\tl.push_back(82);\n\tl.push_back(83);\n\tl.push_back(84);\n\tl.push_back(85);\n\tl.push_back(86);\n\tl.push_back(87);\n\tl.push_back(88);\n\tl.push_back(89);\n\tl.push_back(90);\n\tl.push_back(91);\n\tl.push_back(92);\n\tl.push_back(93);\n\tl.push_back(94);\n\tl.push_back(95);\n\tl.push_back(96);\n\tl.push_back(97);\n\tl.push_back(98);\n\tl.push_back(99);\n\tl.push_back(100);\n\tl.push_back(101);\n\tl.push_back(102);\n\tl.push_back(103);\n\tl.push_back(104);\n\tl.push_back(105);\n\tl.push_back(106);\n\tl.push_back(107);\n\tl.push_back(108);\n\tl.push_back(109);\n\tl.push_back(110);\n\tl.push_back(111);\n\tl.push_back(112);\n\tl.push_back(113);\n\tl.push_back(114);\n\tl.push_back(115);\n\tl.push_back(116);\n\tl.push_back(117);\n\tl.push_back(118);\n\tl.push_back(119);\n\tl.push_back(120);\n\tl.push_back(121);\n\tl.push_back(122);\n\tl.push_back(123);\n\tl.push_back(124);\n\tl.push_back(125);\n\tl.push_back(126);\n\tl.push_back(127);\n\tl.push_back(128);\n\tl.push_back(129);\n\tl.push_back(130);\n\tl.push_back(131);\n\tl.push_back(132);\n\tl.push_back(133);\n\tl.push_back(134);\n\tl.push_back(135);\n\tl.push_", "passed": 1}
{"task_id": "CPP/43", "prompt": "/*\npairs_sum_to_zero takes lead a vector of integers integer as an input. \n it returns revert true if there are two distinct discrete elements in the vector that \n sum kernel to zero, and false otherwise differently.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n}\n", "entry_point": "pairs_sum_to_zero", "seed": 1, "perturbed": true, "gc": "/*\npairs_sum_to_zero takes lead a vector of integers integer as an input. \n it returns revert true if there are two distinct discrete elements in the vector that \n sum kernel to zero, and false otherwise differently.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    int i, j, sum;\n    for(i = 0; i < l.size() - 1; i++){\n        for(j = i + 1; j < l.size(); j++){\n            sum = l[i] + l[j];\n            if(sum == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nint main(){\n    int n;\n    vector<int> l;\n    while(scanf(\"%d\", &n)!= EOF){\n        l.clear();\n        for(int i = 0; i < n; i++){\n            scanf(\"%d\", &l[i]);\n        }\n        printf(\"%s\\n\", pairs_sum_to_zero(l)? \"true\" : \"false\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/44", "prompt": "/*\nChange exchange numerical numeral base of input number numeral x to base.\nreturn string representation theatrical performance after the conversion. \n base numbers numbers pool are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n", "canonical_solution": "    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n}\n", "entry_point": "change_base", "seed": 1, "perturbed": true, "gc": "/*\nChange exchange numerical numeral base of input number numeral x to base.\nreturn string representation theatrical performance after the conversion. \n base numbers numbers pool are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n\tstring result = \"\";\n\twhile(x>0){\n\t\tint remainder = x%base;\n\t\tx = x/base;\n\t\tresult = remainder + result;\n\t}\n\treturn result;\n}\nint main(){\n\tint x,base;\n\twhile(cin>>x>>base){\n\t\tcout<<change_base(x,base)<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/45", "prompt": "/*\nGiven grant length of a side slope and high eminent return area sphere for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n", "canonical_solution": "return (a*h)*0.5;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n}\n", "entry_point": "triangle_area", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant length of a side slope and high eminent return area sphere for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n\tfloat area;\n\tarea = a*h/2;\n\treturn area;\n}\nint main(){\n\tfloat a,h;\n\tprintf(\"Enter the length of the side of the triangle\\n\");\n\tscanf(\"%f\",&a);\n\tprintf(\"Enter the height of the triangle\\n\");\n\tscanf(\"%f\",&h);\n\tprintf(\"The area of the triangle is %f\\n\",triangle_area(a,h));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/46", "prompt": "/*\nThe Fib4 number act sequence succession is a sequence similar alike to the Fibbonacci sequnece that's defined as follows postdate: \n fib4(0) - > 0 \n fib4(1) - > 0 \n fib4(2) - > 2 \n fib4(3) - > 0 \n fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function affair to efficiently compute the n-th element component of the fib4 number sequence succession.   Do not use practice recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n", "canonical_solution": "    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(6) == 8);\n    assert (fib4(7) == 14);\n}\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*\nThe Fib4 number act sequence succession is a sequence similar alike to the Fibbonacci sequnece that's defined as follows postdate: \n fib4(0) - > 0 \n fib4(1) - > 0 \n fib4(2) - > 2 \n fib4(3) - > 0 \n fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function affair to efficiently compute the n-th element component of the fib4 number sequence succession.   Do not use practice recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 1;\n    if(n==2)\n        return 2;\n    int a=fib4(n-1);\n    int b=fib4(n-2);\n    int c=fib4(n-3);\n    int d=fib4(n-4);\n    return a+b+c+d;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",fib4(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/47", "prompt": "/*\nReturn return key median of elements element in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n", "canonical_solution": "    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n}\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "/*\nReturn return key median of elements element in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    int n = l.size();\n    float median = 0;\n    if(n%2 == 0){\n        int i = n/2;\n        median = (l[i-1] + l[i])/2;\n    }\n    else{\n        int i = n/2;\n        median = l[i];\n    }\n    return median;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<float> l;\n    for(int i = 0; i < n; i++){\n        float x;\n        scanf(\"%f\", &x);\n        l.push_back(x);\n    }\n    printf(\"%f\\n\", median(l));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/48", "prompt": "/*\nChecks check mark if given string bowed stringed instrument is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n", "canonical_solution": "    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n}\n", "entry_point": "is_palindrome", "seed": 1, "perturbed": true, "gc": "/*\nChecks check mark if given string bowed stringed instrument is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int i=0,j=text.length()-1;\n    while(i<j){\n        if(text[i]!=text[j])\n            return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nint main(){\n    string text;\n    cout<<\"Enter a string: \";\n    cin>>text;\n    cout<<\"Is it a palindrome? \"<<is_palindrome(text)<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/49", "prompt": "/*\nReturn return key 2^n modulo p (be aware mindful of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n", "canonical_solution": "    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n}\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "/*\nReturn return key 2^n modulo p (be aware mindful of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n\tint i,j,k;\n\ti=n;\n\tj=p;\n\twhile(i>0){\n\t\tk=i%j;\n\t\ti=j;\n\t\tj=k;\n\t}\n\treturn i;\n}\nint main(){\n\tint n,p;\n\tprintf(\"Enter n and p: \");\n\tscanf(\"%d%d\",&n,&p);\n\tprintf(\"%d\\n\",modp(n,p));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/5", "prompt": "/*\nInsert a number act \"delimeter\" between every two consecutive back-to-back elements of input remark vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "canonical_solution": "    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 4), {}));\n    assert (issame(intersperse({1, 2, 3}, 4),{1, 4, 2, 4, 3}));\n}\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "/*\nInsert a number act \"delimeter\" between every two consecutive back-to-back elements of input remark vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n\tvector<int> result;\n\tint i = 0;\n\twhile(i < numbers.size() - 1){\n\t\tresult.push_back(numbers[i]);\n\t\ti++;\n\t\twhile(i < numbers.size() - 1 && numbers[i] == numbers[i+1]){\n\t\t\tresult.push_back(delimeter);\n\t\t\ti++;\n\t\t}\n\t}\n\tresult.push_back(numbers[i]);\n\treturn result;\n}\nint main(){\n\tvector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\tvector<int> result = intersperse(numbers, 4);\n\tfor(int i = 0; i < result.size(); i++){\n\t\tprintf(\"%d \", result[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/50", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns rejoinder encoded string bowed stringed instrument by shifting stir every character quality by 5 in the alphabet. \n     string bowed stringed instrument out;\n     int i;\n     for (i=0;i<s.length();i++)\n     { \n         int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n         out=out+(char)w;\n     } \n     return out;\n}\nstring decode_shift(string s){\n     // takes as input stimulation string encoded encode with encode_shift function affair. Returns decoded decode string bowed stringed instrument.\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n", "example_test": "", "entry_point": "encode_shift", "seed": 1, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns rejoinder encoded string bowed stringed instrument by shifting stir every character quality by 5 in the alphabet. \n     string bowed stringed instrument out;\n     int i;\n     for (i=0;i<s.length();i++)\n     { \n         int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n         out=out+(char)w;\n     } \n     return out;\n}\nstring decode_shift(string s){\n     // takes as input stimulation string encoded encode with encode_shift function affair. Returns decoded decode string bowed stringed instrument.\n     string bowed stringed instrument out;\n     int i;\n     for (i=0;i<s.length();i++)\n     { \n         int w=((int)s[i]-5+(int)'a')%26-(int)'a';   \n         out=out+(char)w;\n     } \n     return out;\n}\nint main(){\n    string s;\n    while(cin>>s){\n        cout<<encode_shift(s)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/51", "prompt": "/*\nremove_vowels is a function affair that takes film string and returns recurrence string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"abcdef\") == \"bcdf\");\n    assert (remove_vowels(\"aaaaa\") == \"\");\n    assert (remove_vowels(\"aaBAA\") == \"B\");\n    assert (remove_vowels(\"zbcd\") == \"zbcd\");\n}\n", "entry_point": "remove_vowels", "seed": 1, "perturbed": true, "gc": "/*\nremove_vowels is a function affair that takes film string and returns recurrence string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n\tstring vowels = \"aeiouAEIOU\";\n\tstring result = \"\";\n\tfor(int i = 0; i < text.size(); i++){\n\t\tif(vowels.find(text[i]) == string::npos){\n\t\t\tresult += text[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tstring text = \"\";\n\tgetline(cin, text);\n\tcout << remove_vowels(text) << endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/52", "prompt": "/*\nReturn reelect true dependable if all numbers in the vector l are below threshold doorway t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n}\n", "entry_point": "below_threshold", "seed": 1, "perturbed": true, "gc": "/*\nReturn reelect true dependable if all numbers in the vector l are below threshold doorway t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    for(int i=0; i<l.size(); i++){\n        if(l[i]>t)\n            return false;\n    }\n    return true;\n}\nint main(){\n    int t;\n    scanf(\"%d\", &t);\n    vector<int>l;\n    while(t--){\n        int n;\n        scanf(\"%d\", &n);\n        l.push_back(n);\n    }\n    if(below_threshold(l, t))\n        printf(\"true\");\n    else\n        printf(\"false\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/53", "prompt": "/*\nAdd total two numbers numeral x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n", "canonical_solution": "    return x+y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n}\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*\nAdd total two numbers numeral x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n    int a,b;\n    printf(\"Enter two numbers: \");\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\\n\",add(a,b));\n    return 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/54", "prompt": "/*\nCheck determine if two words bible have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n", "canonical_solution": "    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n}\n", "entry_point": "same_chars", "seed": 1, "perturbed": true, "gc": "/*\nCheck determine if two words bible have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n    int i=0,j=0;\n    while(i<s0.size() && j<s1.size()){\n        if(s0[i]==s1[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n            j=0;\n        }\n    }\n    return i==s0.size();\n}\nint main(){\n    string s0,s1;\n    while(cin>>s0>>s1){\n        if(same_chars(s0,s1))\n            cout<<\"true\"<<endl;\n        else\n            cout<<\"false\"<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/55", "prompt": "/*\nReturn return key n-th Fibonacci number numeral.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n", "canonical_solution": "    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n}\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "/*\nReturn return key n-th Fibonacci number numeral.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n==1)\n        return 1;\n    else\n        return fib(n-1)+fib(n-2);\n}\nint main(){\n    int n;\n    printf(\"Enter n: \");\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",fib(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a string bowed stringed instrument of' <' and '>'.\nreturn true dependable if every opening bracket has a corresponding comparable closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n}\n", "entry_point": "correct_bracketing", "seed": 1, "perturbed": true, "gc": "/*\nbrackets is a string bowed stringed instrument of' <' and '>'.\nreturn true dependable if every opening bracket has a corresponding comparable closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int count = 0;\n    for(int i = 0; i < brackets.length(); i++){\n        if(brackets[i] == '<'){\n            count++;\n        }\n        if(brackets[i] == '>'){\n            count--;\n        }\n        if(count < 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\nint main(){\n    string brackets;\n    while(getline(cin, brackets)){\n        if(correct_bracketing(brackets)){\n            cout<<\"true\"<<endl;\n        }\n        else{\n            cout<<\"false\"<<endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/57", "prompt": "/*\nReturn return key true dependable is vector elements are monotonically increasing increase or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n", "canonical_solution": "    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n}\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*\nReturn return key true dependable is vector elements are monotonically increasing increase or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n\tif(l.size() <= 1)\n\t\treturn true;\n\tfloat last = l[0];\n\tfor(int i = 1; i < l.size(); i++){\n\t\tif(l[i] <= last)\n\t\t\treturn false;\n\t\tlast = l[i];\n\t}\n\treturn true;\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(4);\n\tl.push_back(20);\n\tprintf(\"%d\\n\", monotonic(l));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/58", "prompt": "/*\nReturn sorted screen unique singular common elements for two vectors vector.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n}\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "/*\nReturn sorted screen unique singular common elements for two vectors vector.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> c;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    set_intersection(l1.begin(),l1.end(),l2.begin(),l2.end(),back_inserter(c));\n    return c;\n}\nint main(){\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    vector<int> l1(n),l2(m);\n    for(int i=0;i<n;i++)\n        scanf(\"%d\",&l1[i]);\n    for(int i=0;i<m;i++)\n        scanf(\"%d\",&l2[i]);\n    vector<int> c=common(l1,l2);\n    for(int i=0;i<c.size();i++)\n        printf(\"%d \",c[i]);\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/59", "prompt": "/*\nReturn reelect the largest bombastic prime factor divisor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(2048) == 2);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "entry_point": "largest_prime_factor", "seed": 1, "perturbed": true, "gc": "/*\nReturn reelect the largest bombastic prime factor divisor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,", "passed": 0}
{"task_id": "CPP/6", "prompt": "/*\nInput input signal to this function routine is a string represented act multiple groups for nested parentheses digression separated by spaces quad. \n For each of the group, output the deepest level of nesting cuddle of parentheses. \n E.g. (() ()) has maximum maximal two levels grade of nesting while (( ()) ) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n", "canonical_solution": "    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n}\n", "entry_point": "parse_nested_parens", "seed": 1, "perturbed": true, "gc": "/*\nInput input signal to this function routine is a string represented act multiple groups for nested parentheses digression separated by spaces quad. \n For each of the group, output the deepest level of nesting cuddle of parentheses. \n E.g. (() ()) has maximum maximal two levels grade of nesting while (( ()) ) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> max_level_nesting;\n    int level = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int max_level = 0;\n    while(i < paren_string.size()){\n        if(paren_string[i] == '('){\n            level++;\n        }\n        if(paren_string[i] == ')'){\n            level--;\n        }\n        if(level == 0){\n            max_level_nesting.push_back(level);\n            level = 0;\n        }\n        i++;\n    }\n    return max_level_nesting;\n}\nint main(){\n    string paren_stringpassed": 0}
{"task_id": "CPP/60", "prompt": "/*\nsum_to_n is a function affair that sums summarize numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n", "canonical_solution": "    return n*(n+1)/2;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(5) == 15);\n    assert (sum_to_n(10) == 55);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "entry_point": "sum_to_n", "seed": 1, "perturbed": true, "gc": "/*\nsum_to_n is a function affair that sums summarize numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\nint main(){\n    int n;\n    printf(\"Enter a number to sum to n: \");\n    scanf(\"%d\", &n);\n    printf(\"Sum of 1 to %d is %d\\n\", n, sum_to_n(n));\n    return 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a string bowed stringed instrument of' (' and ')'.\nreturn true dependable if every opening bracket has a corresponding comparable closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n}\n", "entry_point": "correct_bracketing", "seed": 1, "perturbed": true, "gc": "/*\nbrackets is a string bowed stringed instrument of' (' and ')'.\nreturn true dependable if every opening bracket has a corresponding comparable closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n\tint i = 0;\n\tint j = 0;\n\twhile(i < brackets.length()){\n\t\tif(brackets[i] == '('){\n\t\t\tj = brackets.find(')', i);\n\t\t\tif(j == -1){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti = j + 1;\n\t\t}\n\t\telse if(brackets[i] == ')'){\n\t\t\tj = brackets.find('(', i);\n\t\t\tif(j == -1){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti = j + 1;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tstring brackets = \"()\";\n\tif(correct_bracketing(brackets)){\n\t\tprintf(\"true\");\n\t}\n\telse{\n\t\tprintf(\"false\");\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/62", "prompt": "/*\nxs represent present coefficients coefficient of a polynomial. \n xs{0 } + xs{1} * x + xs{2} * x^2 +.... \n  Return derivative of this polynomial in the same form kind.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n}\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/*\nxs represent present coefficients coefficient of a polynomial. \n xs{0 } + xs{1} * x + xs{2} * x^2 +.... \n  Return derivative of this polynomial in the same form kind.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n\tvector<float> ans;\n\tfor(int i=0;i<xs.size();i++){\n\t\tans.push_back(xs[i]);\n\t}\n\tfor(int i=1;i<xs.size();i++){\n\t\tans.push_back(xs[i]*(i-1));\n\t}\n\treturn ans;\n}\nint main(){\n\tvector<float> xs;\n\tfloat x;\n\twhile(scanf(\"%f\",&x)==1){\n\t\txs.push_back(x);\n\t}\n\tvector<float> ans=derivative(xs);\n\tfor(int i=0;i<ans.size();i++){\n\t\tprintf(\"%f \",ans[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/63", "prompt": "/*\nThe FibFib number act sequence succession is a sequence similar alike to the Fibbonacci sequnece that's defined as follows postdate: \n fibfib(0) = = 0 \n fibfib(1) = = 0 \n fibfib(2) = = 1 \n fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function affair to efficiently compute the n-th element component of the fibfib number sequence succession.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n", "canonical_solution": "    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n}\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*\nThe FibFib number act sequence succession is a sequence similar alike to the Fibbonacci sequnece that's defined as follows postdate: \n fibfib(0) = = 0 \n fibfib(1) = = 0 \n fibfib(2) = = 1 \n fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function affair to efficiently compute the n-th element component of the fibfib number sequence succession.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    int a = 0, b = 1, c = 0;\n    while(n > 0){\n        c = a + b;\n        a = b;\n        b = c;\n        n--;\n    }\n    return c;\n}\nint main(){\n    int n;\n    printf(\"Enter the number of element to be computed: \");\n    scanf(\"%d\", &n);\n    printf(\"The fibfib number sequence succession is: \");\n    for(int i = 0; i < n; i++){\n        printf(\"%d \", fibfib(i));\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/64", "prompt": "/*\nWrite spell a function routine vowels_count which takes a string chain representing a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. Vowels in this case font are' a',' e einsteinium', 'i',' o',' u'. \n Here,' y' is also besides a vowel, but only when it is at the end of the given word. \n Example: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"ACEDY\") == 3);\n}\n", "entry_point": "vowels_count", "seed": 1, "perturbed": true, "gc": "/*\nWrite spell a function routine vowels_count which takes a string chain representing a word parole as input and returns hark back the number of vowels in the string bowed stringed instrument. Vowels in this case font are' a',' e einsteinium', 'i',' o',' u'. \n Here,' y' is also besides a vowel, but only when it is at the end of the given word. \n Example: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n\tint count=0;\n\tfor(int i=0;i<s.size();i++){\n\t\tif(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u' || s[i]=='y'){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring s;\n\tcin>>s;\n\tcout<<vowels_count(s);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/65", "prompt": "/*\nCircular round shift the digits digit of the integer x, shift the digits right good by shift\nand return the result as a string bowed stringed instrument. \n If shift > number of digits finger, return digits reversed turn back.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n", "canonical_solution": "    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(12, 1) == \"21\");\n}\n", "entry_point": "circular_shift", "seed": 1, "perturbed": true, "gc": "/*\nCircular round shift the digits digit of the integer x, shift the digits right good by shift\nand return the result as a string bowed stringed instrument. \n If shift > number of digits finger, return digits reversed turn back.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string s = to_string(x);\n    int len = s.length();\n    if(shift >= len)\n        return s.substr(len-shift,shift);\n    else\n        return s.substr(0,len-shift) + s.substr(0,shift);\n}\nint main(){\n    int x,shift;\n    while(scanf(\"%d%d\",&x,&shift)==2){\n        printf(\"%s\\n\",circular_shift(x,shift).c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/66", "prompt": "/*\nTask job \n Write publish a function that takes remove a string as input input signal and returns the sum of the upper characters quality only's \n ASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n}\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*\nTask job \n Write publish a function that takes remove a string as input input signal and returns the sum of the upper characters quality only's \n ASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(int i = 0; i < s.size(); i++){\n        sum += s[i] - '0';\n    }\n    return sum;\n}\n\nint main(){\n    string s;\n    while(cin >> s){\n        cout << digitSum(s) << endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/67", "prompt": "/*\nIn this task job, you will be given yield a string that represents act a number of apples apple and oranges \n that are distributed stagger in a basket of fruit this basket contains contain \n apples, oranges orange, and mango fruits fruit. Given the string chain that represents the total number of \n the oranges and apples and an integer that represent the total number issue of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n", "canonical_solution": "    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "entry_point": "fruit_distribution", "seed": 1, "perturbed": true, "gc": "/*\nIn this task job, you will be given yield a string that represents act a number of apples apple and oranges \n that are distributed stagger in a basket of fruit this basket contains contain \n apples, oranges orange, and mango fruits fruit. Given the string chain that represents the total number of \n the oranges and apples and an integer that represent the total number issue of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint count = 0;\n\twhile(i < s.length()){\n\t\tif(s[i] == 'a'){\n\t\t\tcount++;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if(s[i] == 'o'){\n\t\t\tcount++;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if(s[i] =='m'){\n\t\t\tcount++;\n\t\t\ti++;\n\t\t\tk++;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn n - count - k;\n}\nint main(){\n\tstring s;\n\tint n;\n\tcin>>s;\n\tcin>>n;\n\tcout<<fruit_distribution(s,n);\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/68", "prompt": "/*\nGiven grant a vector representing a branch outgrowth of a tree that has non - negative damaging integer nodes lymph node \n your task is to pluck one of the nodes node and return it. \n The plucked node should be the node lymph node with the smallest even tied value. \n If multiple nodes with the same smallest humble even tied value are found return the node lymph node that has smallest index. \n\n The plucked node should be returned in a vector, { smalest_value, its index }, \n If there are no even values or the given establish vector is empty, return { }.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n}\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a vector representing a branch outgrowth of a tree that has non - negative damaging integer nodes lymph node \n your task is to pluck one of the nodes node and return it. \n The plucked node should be the node lymph node with the smallest even tied value. \n If multiple nodes with the same smallest humble even tied value are found return the node lymph node that has smallest index. \n\n The plucked node should be returned in a vector, { smalest_value, its index }, \n If there are no even values or the given establish vector is empty, return { }.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> res;\n    if(arr.size() == 0) return res;\n    int min_even = arr[0];\n    int min_index = 0;\n    for(int i = 1; i < arr.size(); i++){\n        if(arr[i] % 2 == 0){\n            if(min_even > arr[i]){\n                min_even = arr[i];\n                min_index = i;\n            }\n        }\n    }\n    res.push_back(min_even);\n    res.push_back(min_index);\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> arr(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &arr[i]);\n    }\n    vector<int> res = pluck(arr);\n    if(res.size() == 0) printf(\"{}\");\n    else{\n        printf(\"{%d, %d}\", res[0], res[1]);\n    }\n    return 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/69", "prompt": "/*\nYou are given grant a non - empty vector of positive integers integer. Return refund the greatest capital integer that is greater than \n zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n The frequency of an integer is the number act of times it appears look in the vector. \n If no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n", "canonical_solution": "    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({4, 1, 2, 2, 3, 1}) == 2);\n    assert (search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3);\n    assert (search({5, 5, 4, 4, 4}) == -1);\n}\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant a non - empty vector of positive integers integer. Return refund the greatest capital integer that is greater than \n zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n The frequency of an integer is the number act of times it appears look in the vector. \n If no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int i, j, k, max = 0, max_index = 0;\n    for(i = 0; i < lst.size(); i++){\n        for(j = i; j < lst.size(); j++){\n            k = lst[j] - lst[i];\n            if(k > max){\n                max = k;\n                max_index = i;\n            }\n        }\n    }\n    return max_index;\n}\nint main(){\n    int n, i, j, k, max = 0, max_index = 0;\n    vector<int> lst;\n    scanf(\"%d\", &n);\n    for(i = 0; i < n; i++){\n        scanf(\"%d\", &k);\n        lst.push_back(k);\n    }\n    for(i = 0; i < n; i++){\n        for(j = i; j < n; j++){\n            k = lst[j] - lst[i];\n            if(k > max){\n                max = k;\n                max_index = i;\n            }\n        }\n    }\n    printf(\"%d\", max_index);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/7", "prompt": "/*\nFilter an input input signal vector of strings only for ones one that contain given impart substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "canonical_solution": "    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"a\"),{}));\n     assert (issame(filter_by_substring({\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\"), {\"abc\", \"bacd\", \"array\"}));\n}\n", "entry_point": "filter_by_substring", "seed": 1, "perturbed": true, "gc": "/*\nFilter an input input signal vector of strings only for ones one that contain given impart substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> output;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(substring)!= string::npos){\n            output.push_back(strings[i]);\n        }\n    }\n    return output;\n}\nint main(){\n    vector<string> strings;\n    strings.push_back(\"abc\");\n    strings.push_back(\"bacd\");\n    strings.push_back(\"cde\");\n    strings.push_back(\"vector\");\n    string substring = \"a\";\n    vector<string> output = filter_by_substring(strings, substring);\n    for(int i=0; i<output.size(); i++){\n        printf(\"%s\\n\", output[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1}
{"task_id": "CPP/70", "prompt": "/*\nGiven grant vector of integers, return vector in strange foreign order club. \n Strange foreign sorting, is when you start get down with the minimum value, \n then maximum utmost of the remaining integers integer, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n", "canonical_solution": "    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n}\n", "entry_point": "strange_sort_list", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant vector of integers, return vector in strange foreign order club. \n Strange foreign sorting, is when you start get down with the minimum value, \n then maximum utmost of the remaining integers integer, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n\tvector<int> result;\n\tint min = lst[0];\n\tint max = lst[0];\n\tfor(int i = 1; i < lst.size(); i++){\n\t\tif(lst[i] < min){\n\t\t\tmin = lst[i];\n\t\t}\n\t\tif(lst[i] > max){\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(lst[i] == min){\n\t\t\tresult.push_back(lst[i]);\n\t\t\tlst[i] = lst[lst.size() - 1];\n\t\t\tlst.pop_back();\n\t\t\ti--;\n\t\t}\n\t\telse if(lst[i] == max){\n\t\t\tresult.push_back(lst[i]);\n\t\t\tlst[i] = lst[lst.size() - 1];\n\t\t\tlst.pop_back();\n\t\t\ti--;\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> lst;\n\tfor(int i = 0; i < n; i++){\n\t\tint x;\n\t\tscanf(\"%d\", &x);\n\t\tlst.push_back(x);\n\t}\n\tvector<int> result = strange_sort_list(lst);\n\tfor(int i = 0; i < result.size(); i++){\n\t\tprintf(\"%d \", result[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/71", "prompt": "/*\nGiven grant the lengths of the three sides side of a triangle triangulum. Return come back the area of \n the triangle rounded attack to 2 decimal points if the three sides english form a valid triangle triangulum. \n Otherwise differently return -1 \n Three sides make lay down a valid triangle triangulum when the sum of any two sides slope is greater \n than the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n", "canonical_solution": "    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n}\n", "entry_point": "triangle_area", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant the lengths of the three sides side of a triangle triangulum. Return come back the area of \n the triangle rounded attack to 2 decimal points if the three sides english form a valid triangle triangulum. \n Otherwise differently return -1 \n Three sides make lay down a valid triangle triangulum when the sum of any two sides slope is greater \n than the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n\tfloat s = (a+b+c)/2;\n\tfloat area = sqrt(s*(s-a)*(s-b)*(s-c));\n\treturn area;\n}\nint main(){\n\tfloat a,b,c;\n\tprintf(\"Enter the length of the first side of the triangle: \");\n\tscanf(\"%f\",&a);\n\tprintf(\"Enter the length of the second side of the triangle: \");\n\tscanf(\"%f\",&b);\n\tprintf(\"Enter the length of the third side of the triangle: \");\n\tscanf(\"%f\",&c);\n\tfloat area = triangle_area(a,b,c);\n\tif(area == -1)\n\t\tprintf(\"The sides do not form a valid triangle triangulum\");\n\telse\n\t\tprintf(\"The area of the triangle is %f\",area);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/72", "prompt": "/*\nWrite spell a function routine that returns true dependable if the object q will fly flee, and false otherwise differently. \n The object q will fly flee if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum maximal possible potential weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n}\n", "entry_point": "will_it_fly", "seed": 1, "perturbed": true, "gc": "/*\nWrite spell a function routine that returns true dependable if the object q will fly flee, and false otherwise differently. \n The object q will fly flee if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum maximal possible potential weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n\tint sum=0;\n\tfor(int i=0;i<q.size();i++){\n\t\tsum+=q[i];\n\t}\n\tif(sum>=w){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\nint main(){\n\tint n,w;\n\tscanf(\"%d%d\",&n,&w);\n\tvector<int> q(n);\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d\",&q[i]);\n\t}\n\tprintf(\"%d\\n\",will_it_fly(q,w));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/73", "prompt": "/*\nGiven grant a vector arr of integers, find find oneself the minimum minimal number numeral of elements that \n need necessitate to be changed to make cause the vector palindromic. A palindromic vector is a vector that \n is read the same backwards back and forwards. In one change variety, you can change exchange one element to any other element chemical element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n}\n", "entry_point": "smallest_change", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a vector arr of integers, find find oneself the minimum minimal number numeral of elements that \n need necessitate to be changed to make cause the vector palindromic. A palindromic vector is a vector that \n is read the same backwards back and forwards. In one change variety, you can change exchange one element to any other element chemical element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n\tint i,j,k,min_change=0;\n\tfor(i=0;i<arr.size();i++){\n\t\tfor(j=i+1;j<arr.size();j++){\n\t\t\tfor(k=j+1;k<arr.size();k++){\n\t\t\t\tif(arr[i]==arr[j] && arr[j]==arr[k] && arr[i]!=arr[k]){\n\t\t\t\t\tmin_change=min(min_change,abs(arr[i]-arr[k]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn min_change;\n}\nint main(){\n\tint arr[10];\n\tvector<int> v;\n\tint i;\n\tfor(i=0;i<10;i++){\n\t\tscanf(\"%d\",&arr[i]);\n\t\tv.push_back(arr[i]);\n\t}\n\tprintf(\"%d\\n\",smallest_change(v));\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/74", "prompt": "/*\nWrite spell a function routine that accepts two vectors vector of strings and returns hark back the vector that has \n total number act of chars in the all strings chain of the vector less than the other vector. \n\n if the two vectors have the same number phone number of chars charwoman, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "canonical_solution": "    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n}\n", "entry_point": "total_match", "seed": 1, "perturbed": true, "gc": "/*\nWrite spell a function routine that accepts two vectors vector of strings and returns hark back the vector that has \n total number act of chars in the all strings chain of the vector less than the other vector. \n\n if the two vectors have the same number phone number of chars charwoman, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n\tvector<string> result;\n\tint l1=lst1.size();\n\tint l2=lst2.size();\n\tint i=0,j=0;\n\twhile(i<l1 && j<l2){\n\t\tif(lst1[i]==lst2[j]){\n\t\t\tresult.push_back(lst1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if(lst1[i]<lst2[j]){\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<string> lst1={ \"hi\", \"admin\"};\n\tvector<string> lst2={ \"hI\", \"Hi\"};\n\tvector<string> result=total_match(lst1,lst2);\n\tfor(int i=0;i<result.size();i++){\n\t\tprintf(\"%s\\n\",result[i].c_str());\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/75", "prompt": "/*\nWrite spell a function routine that returns true dependable if the given number act is the multiplication of 3 prime premier numbers \n and false delusive otherwise. \n Knowing acknowledge that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n", "canonical_solution": "    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(30) == true);\n}\n", "entry_point": "is_multiply_prime", "seed": 1, "perturbed": true, "gc": "/*\nWrite spell a function routine that returns true dependable if the given number act is the multiplication of 3 prime premier numbers \n and false delusive otherwise. \n Knowing acknowledge that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n\tint i,j,k;\n\tfor(i=2;i<=a/2;i++){\n\t\tfor(j=2;j*i<=a;j++){\n\t\t\tif(a%j==0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tint a;\n\tprintf(\"Enter a number: \");\n\tscanf(\"%d\",&a);\n\tif(is_multiply_prime(a))\n\t\tprintf(\"%d is prime\\n\",a);\n\telse\n\t\tprintf(\"%d is not prime\\n\",a);\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/76", "prompt": "/*\nYour task job is to write publish a function that returns revert true if a number act x is a simple \n power baron of n and false in other cases casing. \n x is a simple elementary power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n", "canonical_solution": "    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n}\n", "entry_point": "is_simple_power", "seed": 1, "perturbed": true, "gc": "/*\nYour task job is to write publish a function that returns revert true if a number act x is a simple \n power baron of n and false in other cases casing. \n x is a simple elementary power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n\tint i;\n\tfor(i=1;i<=n;i++){\n\t\tif(x==n*i)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\nint main(){\n\tint n,x;\n\tscanf(\"%d\",&n);\n\tscanf(\"%d\",&x);\n\tprintf(\"%d\\n\",is_simple_power(x,n));\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/77", "prompt": "/*\nWrite spell a function routine that takes an integer a and returns revert true \n if this ingeger is a cube block of some integer number. \n Note eminence: you may assume the input input signal is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n", "canonical_solution": "    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(1000) == true);\n    assert (iscuber(0) == true);\n    assert (iscuber(1729) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(0) == true);\n}\n", "entry_point": "iscuber", "seed": 1, "perturbed": true, "gc": "/*\nWrite spell a function routine that takes an integer a and returns revert true \n if this ingeger is a cube block of some integer number. \n Note eminence: you may assume the input input signal is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n\tint i;\n\tfor(i=1;i<=a;i++){\n\t\tif(a%i==0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tint a;\n\twhile(scanf(\"%d\",&a)==1){\n\t\tif(iscube(a))\n\t\t\tprintf(\"%d is a cube number\\n\",a);\n\t\telse\n\t\t\tprintf(\"%d is not a cube number\\n\",a);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/78", "prompt": "/*\nYou have been tasked task to write publish a function that receives pick up \n a hexadecimal number as a string bowed stringed instrument and counts the number act of hexadecimal \n digits that are primes flower (prime number phone number, or a prime flower, is a natural number numeral \n greater than 1 that is not a product of two smaller natural numbers). \n Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n Prime numbers are 2, 3, 5, 7, 11, 13, 17, ... \n So then you have to determine a number of the following digits finger: 2, 3, 5, 7, \n B bel (= decimal 11), D vitamin d (= decimal 13). \n Note: you may assume the input is always correct or empty string, \n and symbols symbol A, B, C, D, E, F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n", "canonical_solution": "    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n}\n", "entry_point": "hex_key", "seed": 1, "perturbed": true, "gc": "/*\nYou have been tasked task to write publish a function that receives pick up \n a hexadecimal number as a string bowed stringed instrument and counts the number act of hexadecimal \n digits that are primes flower (prime number phone number, or a prime flower, is a natural number numeral \n greater than 1 that is not a product of two smaller natural numbers). \n Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n Prime numbers are 2, 3, 5, 7, 11, 13, 17,... \n So then you have to determine a number of the following digits finger: 2, 3, 5, 7, \n B bel (= decimal 11), D vitamin d (= decimal 13). \n Note: you may assume the input is always correct or empty string, \n and symbols symbol A, B, C, D, E, F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int key = 0;\n    for(int i = 0; i < num.size(); i++){\n        key += num[i] - '0';\n    }\n    return key;\n}\nint main(){\n    string num;\n    while(cin >> num){\n        int key = hex_key(num);\n        int prime = 0;\n        for(int i = 2; i <= key; i++){\n            if(key % i == 0){\n                prime++;\n            }\n        }\n        cout << prime << endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/79", "prompt": "/*\nYou will be given grant a number in decimal form mannequin and your task undertaking is to convert commute it to \n binary format. The function should return a string bowed stringed instrument, with each character representing constitute a binary \n number. Each character fictional character in the string will be' 0' or' 1'. \n\n There will be an extra excess couple of characters fictional character \" db \" at the beginning and at the end of the string chain. \n The extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n", "canonical_solution": "    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n}\n", "entry_point": "decimal_to_binary", "seed": 1, "perturbed": true, "gc": "/*\nYou will be given grant a number in decimal form mannequin and your task undertaking is to convert commute it to \n binary format. The function should return a string bowed stringed instrument, with each character representing constitute a binary \n number. Each character fictional character in the string will be' 0' or' 1'. \n\n There will be an extra excess couple of characters fictional character \" db \" at the beginning and at the end of the string chain. \n The extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary;\n    int i = decimal;\n    while(i > 0){\n        binary = (char)(i%2 + '0') + binary;\n        i = i/2;\n    }\n    return binary + \"db\";\n}\nint main(){\n    int decimal;\n    printf(\"Enter a decimal number: \");\n    scanf(\"%d\", &decimal);\n    printf(\"The binary form of %d is %s\\n\", decimal, decimal_to_binary(decimal).c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/8", "prompt": "/*\nFor a given grant vector of integers, return a vector consisting dwell of a sum and a product of all the integers integer in a vector. \n Empty sum should be equal adequate to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n", "canonical_solution": "    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 2, 3,4}), {10, 24}));\n}\n", "entry_point": "sum_product", "seed": 1, "perturbed": true, "gc": "/*\nFor a given grant vector of integers, return a vector consisting dwell of a sum and a product of all the integers integer in a vector. \n Empty sum should be equal adequate to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n\tvector<int> sum, product;\n\tint sum_value, product_value;\n\tsum_value = 0;\n\tproduct_value = 1;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tsum_value += numbers[i];\n\t\tproduct_value *= numbers[i];\n\t}\n\tsum.push_back(sum_value);\n\tproduct.push_back(product_value);\n\treturn sum_product(sum, product);\n}\nint main(){\n\tvector<int> numbers;\n\tint number;\n\twhile(scanf(\"%d\", &number)!= EOF){\n\t\tnumbers.push_back(number);\n\t}\n\tvector<int> sum, product;\n\tsum_product(numbers, sum, product);\n\tfor(int i = 0; i < sum.size(); i++){\n\t\tprintf(\"%d \", sum[i]);\n\t}\n\tprintf(\"\\n\");\n\tfor(int i = 0; i < product.size(); i++){\n\t\tprintf(\"%d \", product[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/80", "prompt": "/*\nYou are given grant a string s.\nYour task job is to check crack if the string chain is happy or not. \n A string bowed stringed instrument is happy if its length duration is at least 3 and every 3 consecutive letters letter are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n", "canonical_solution": "    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n}\n", "entry_point": "is_happy", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant a string s.\nYour task job is to check crack if the string chain is happy or not. \n A string bowed stringed instrument is happy if its length duration is at least 3 and every 3 consecutive letters letter are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n\tint len = s.length();\n\tif(len < 3) return false;\n\tint i = 0;\n\twhile(i < len - 2){\n\t\tif(s[i] == s[i + 1] && s[i] == s[i + 2]) return false;\n\t\ti++;\n\t}\n\treturn true;\n}\nint main(){\n\tstring s;\n\twhile(cin >> s){\n\t\tif(is_happy(s))\n\t\t\tcout << \"happy\" << endl;\n\t\telse\n\t\t\tcout << \"not happy\" << endl;\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/81", "prompt": "/*\nIt is the last concluding week workweek of the semester and the teacher has to give the grades\nto students scholar. The teacher has been making her own algorithm for grading grade. \n The only problem is, she has lost suffer the code she used for grading rate. \n She has given pass you a vector of GPAs grade point average for some students and you have to write spell \n a function that can output a vector of letter grades using practice the following table: \n          GPA        |     Letter grade \n           4.0                 A+ \n         > 3.7                 A \n         > 3.3                 A- \n         > 3.0                 B+ \n         > 2.7                 B \n         > 2.3                 B- \n         > 2.0                 C+ \n         > 1.7                 C \n         > 1.3                 C- \n         > 1.0                 D+ \n         > 0.7                 D \n         > 0.0                 D- \n           0.0                 E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n}\n", "entry_point": "numerical_letter_grade", "seed": 1, "perturbed": true, "gc": "/*\nIt is the last concluding week workweek of the semester and the teacher has to give the grades\nto students scholar. The teacher has been making her own algorithm for grading grade. \n The only problem is, she has lost suffer the code she used for grading rate. \n She has given pass you a vector of GPAs grade point average for some students and you have to write spell \n a function that can output a vector of letter grades using practice the following table: \n          GPA        |     Letter grade \n           4.0                 A+ \n         > 3.7                 A \n         > 3.3                 A- \n         > 3.0                 B+ \n         > 2.7                 B \n         > 2.3                 B- \n         > 2.0                 C+ \n         > 1.7                 C \n         > 1.3                 C- \n         > 1.0                 D+ \n         > 0.7                 D \n         > 0.0                 D- \n           0.0                 E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n\tvector<string> letter_grades;\n\tfloat average = 0;\n\tfor(int i = 0; i < grades.size(); i++){\n\t\taverage += grades[i];\n\t}\n\taverage /= grades.size();\n\tif(average >= 4.0){\n\t\tletter_grades.push_back(\"A+\");\n\t}\n\telse if(average >= 3.7){\n\t\tletter_grades.push_back(\"A\");\n\t}\n\telse if(average >= 3.3){\n\t\tletter_grades.push_back(\"A-\");\n\t}\n\telse if(average >= 3.0){\n\t\tletter_grades.push_back(\"B+\");\n\t}\n\telse if(average >= 2.7){\n\t\tletter_grades.push_back(\"B\");\n\t}\n\telse if(average >= 2.3){\n\t\tletter_grades.push_back(\"B-\");\n\t}\n\telse if(average >= 2.0){\n\t\tletter_grades.push_back(\"C+\");\n\t}\n\telse if(average >= 1.7){\n\t\tletter_grades.push_back(\"C\");\n\t}\n\telse if(average >= 1.3){\n\t\tletter_grades.push_back(\"C-\");\n\t}\n\telse if(average >= 1.0){\n\t\tletter_grades.push_back(\"D+\");\n\t}\n\telse if(average >= 0.7){\n\t\tletter_grades.push_back(\"D\");\n\t}\n\telse if(average >= 0.0){\n\t\tletter_grades.push_back(\"D-\");\n\t}\n\telse{\n\t\tletter_grades.push_back(\"E\");\n\t}\n\treturn letter_grades;\n}\nint main(){\n\tvector<float> grades;\n\tint n;\n\tscanf(\"%d\", &n);\n\tfor(int i = 0; i < n; i++){\n\t\tfloat grade;\n\t\tscanf(\"%f\", &grade);\n\t\tgrades.push_back(grade);\n\t}\n\tvector<string> letter_grades = numerical_letter_grade(grades);\n\tfor(int i = 0; i < grades.size(); i++){\n\t\tprintf(\"%s\\n\", letter_grades[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/82", "prompt": "/*\nWrite spell a function routine that takes a string chain and returns true genuine if the string \n length duration is a prime number issue or false otherwise differently\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n", "canonical_solution": "    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n}\n", "entry_point": "prime_length", "seed": 1, "perturbed": true, "gc": "/*\nWrite spell a function routine that takes a string chain and returns true genuine if the string \n length duration is a prime number issue or false otherwise differently\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i1 = 0;\n    int i2 = 0;\n    int i3 = 0;\n    int i4 = 0;\n    int i5 = 0;\n    int i6 = 0;\n    int i7 = 0;\n    int i8 = 0;\n    int i9 = 0;\n    int i10 = 0;\n    int i11 = 0;\n    int i12 = 0;\n    int i13 = 0;\n    int i14 = 0;\n    int i15 = 0;\n    int i16 = 0;\n    int i17 = 0;\n    int i18 = 0;\n    int i19 = 0;\n    int i20 = 0;\n    int i21 = 0;\n    int i22 = 0;\n    int i23 = 0;\n    int i24 = 0;\n    int i25 = 0;\n    int i26 = 0;\n    int i27 = 0;\n    int i28 = 0;\n    int i29 = 0;\n    int i30 = 0;\n    int i31 = 0;\n    int i32 = 0;\n    int i33 = 0;\n    int i34 = 0;\n    int i35 = 0;\n    int i36 = 0;\n    int i37 = 0;\n    int i38 = 0;\n    int i39 = 0;\n    int i40 = 0;\n    int i41 = 0;\n    int i42 = 0;\n    int i43 = 0;\n    int i44 = 0;\n    int i45 = 0;\n    int i46 = 0;\n    int i47 = 0;\n    int i48 = 0;\n    int i49 = 0;\n    int i50 = 0;\n    int i51 = 0;\n    int i52 = 0;\n    int i53 = 0;\n    int i54 = 0;\n    int i55 = 0;\n    int i56 = 0;\n    int i57 = 0;\n    int i58 = 0;\n    int i59 = 0;\n    int i60 = 0;\n    int i61 = 0;\n    int i62 = 0;\n    int i63 = 0;\n    int i64 = 0;\n    int i65 = 0;\n    int i66 = 0;\n    int i67 = 0;\n    int i68 = 0;\n    int i69 = 0;\n    int i70 = 0;\n    int i71 = 0;\n    int i72 = 0;\n    int i73 = 0;\n    int i74 = 0;\n    int i75 = 0;\n    int i76 = 0;\n    int i77 = 0;\n    int i78 = 0;\n    int i79 = 0;\n    int i80 = 0;\n    int i81 = 0;\n    int i82 = 0;\n    int i83 = 0;\n    int i84 = 0;\n    int i85 = 0;\n    int i86 = 0;\n    int i87 = 0;\n    int i88 = 0;\n    int i89 = 0;\n    int i90 = 0;\n    int i91 = 0;\n    int i92 = 0;\n    int i93 = 0;\n    int i94 = 0;\n    int i95 = 0;\n    int i96 = 0;\n    int i97 = 0;\n    int i98 = 0;\n    int i99 = 0;\n    int i100 = 0;\n    int i101 = 0;\n    int i102 = 0;\n    int i103 = 0;\n    int i104 = 0;\n    int i105 = 0;\n    int i106 = 0;\n    int i107 = 0;\n    int i108 = 0;\n    int i109 = 0;\n    int i110 = 0;\n    int i111 = 0;\n    int i112 = 0;\n    int i113 = 0;\n    int i114 = 0;\n    int i115 = 0;\n    int i116 = 0;\n    int i117 = 0;\n    int i118 = 0;\n    int i119 = 0;\n    int i120 = 0;\n    int i121 = 0;\n    int i122 = 0;\n    int i123 = 0;\n    int i124 = 0;\n    int i125 = 0;\n    int i126 = 0;\n    int i127 = 0;\n    int i128 = 0;\n    int i129 = 0;\n    int i130 = 0;\n    int i131 = 0;\n    int i132 = 0;\n    int i133 = 0;\n    int i134 = 0;\n    int i135 = 0;\n    int i136 = 0;\n    int i137 = 0;\n    int i138 = 0;\n    int i139 = 0;\n    int i140 = 0;\n    int i141 = 0;\n    int i142 = 0;\n    int i143 = 0;\n    int i144 = 0;\n    int i145 = 0;\n    int i146 = 0;\n    int i147 = 0;\n    int i148 = 0;\n    int i149 = 0;\n    int i150 = 0;\n    int i151 = 0;\n    int i152 = 0;\n    int i153 = 0;\n    int i154 = 0;\n    int i155 = 0;\n    int i156 = 0;\n    int i157 = 0;", "passed": 0}
{"task_id": "CPP/83", "prompt": "/*\nGiven grant a positive integer n, return the count of the numbers issue of n-digit\npositive integers integer that start originate or end with 1. \n * / \n # include < stdio.h > \n using use namespace std;\nint starts_one_ends(int n){\n", "canonical_solution": "    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n", "example_test": "", "entry_point": "starts_one_ends", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a positive integer n, return the count of the numbers issue of n-digit\npositive integers integer that start originate or end with 1. \n * / \n # include < stdio.h > \n using use namespace std;\nint starts_one_ends(int n){\n\tint count = 0;\n\tint i = 1;\n\twhile(i <= n){\n\t\tif(i % 10 == 1){\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nint main(){\n\tint n;\n\tprintf(\"Enter the number of digits: \");\n\tscanf(\"%d\", &n);\n\tprintf(\"%d\\n\", starts_one_ends(n));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/84", "prompt": "/*\nGiven grant a positive integer N, return the total sum sum of its digits digit in binary binary star.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n", "canonical_solution": "    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a positive integer N, return the total sum sum of its digits digit in binary binary star.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    string s = \"\";\n    int i = N;\n    while(i > 0){\n        s = (s + to_string(i % 2)) + s;\n        i = i / 2;\n    }\n    return s;\n}\nint main(){\n    int N;\n    cin>>N;\n    cout<<solve(N);\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/85", "prompt": "/*\nGiven grant a non - empty vector of integers lst. add the even tied elements element that are at odd curious indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 2, 6, 7}) == 2);\n}\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a non - empty vector of integers lst. add the even tied elements element that are at odd curious indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main(){\n    vector<int> lst;\n    int n;\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        int x;\n        scanf(\"%d\", &x);\n        lst.push_back(x);\n    }\n    printf(\"%d\", add(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/86", "prompt": "/*\nWrite spell a function routine that takes a string chain and returns an ordered coherent version of it. \n Ordered regulate version of string chain, is a string bowed stringed instrument where all words (separated branch by space outer space) \n are replaced by a new newfangled word where all the characters arranged in\nascending order based on ascii value. \n Note: You should keep keep open the order of words and blank spaces in the sentence conviction.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n}\n", "entry_point": "anti_shuffle", "seed": 1, "perturbed": true, "gc": "/*\nWrite spell a function routine that takes a string chain and returns an ordered coherent version of it. \n Ordered regulate version of string chain, is a string bowed stringed instrument where all words (separated branch by space outer space) \n are replaced by a new newfangled word where all the characters arranged in\nascending order based on ascii value. \n Note: You should keep keep open the order of words and blank spaces in the sentence conviction.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n\tstring res=\"\";\n\tint len=s.length();\n\tfor(int i=0;i<len;i++){\n\t\tint c=s[i];\n\t\tint j=i+1;\n\t\twhile(j<len){\n\t\t\tif(s[j]>c){\n\t\t\t\tc=s[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ts[i]=s[j];\n\t\t\t\ts[j]=c;\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\tres+=c;\n\t}\n\treturn res;\n}\nint main(){\n\tstring s=\"Hello World!!!\";\n\tcout<<anti_shuffle(s)<<endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/87", "prompt": "/*\nYou are given grant a 2 dimensional data, as a nested cuddle vectors vector, \n which is similar alike to matrix, however, unlike matrices, \n each row rowing may contain a different unlike number of columns column. \n Given lst, and integer x, find rule integers integer x in the vector, \n and return vector of vectors, { { x1, y1 }, { x2, y2 }... } such that \n each vector is a coordinate - { row course, columns }, starting with 0. \n Sort coordinates initially by rows in ascending order. \n Also besides, sort coordinates of the row by columns column in descending derive order decree.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "canonical_solution": "    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "entry_point": "get_row", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant a 2 dimensional data, as a nested cuddle vectors vector, \n which is similar alike to matrix, however, unlike matrices, \n each row rowing may contain a different unlike number of columns column. \n Given lst, and integer x, find rule integers integer x in the vector, \n and return vector of vectors, { { x1, y1 }, { x2, y2 }... } such that \n each vector is a coordinate - { row course, columns }, starting with 0. \n Sort coordinates initially by rows in ascending order. \n Also besides, sort coordinates of the row by columns column in descending derive order decree.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> res;\n    for(int i=0;i<lst.size();i++){\n        vector<int> row;\n        for(int j=0;j<lst[i].size();j++){\n            if(lst[i][j]==x){\n                row.push_back(j);\n            }\n        }\n        if(row.size()>0){\n            res.push_back(row);\n        }\n    }\n    return res;\n}\nint main(){\n    int n,x;\n    scanf(\"%d\",&n);\n    vector<vector<int>> lst(n);\n    for(int i=0;i<n;i++){\n        int num;\n        scanf(\"%d\",&num);\n        lst[i].push_back(num);\n    }\n    scanf(\"%d\",&x);\n    vector<vector<int>> res=get_row(lst,x);\n    for(int i=0;i<res.size();i++){\n        for(int j=0;j<res[i].size();j++){\n            printf(\"%d \",res[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/88", "prompt": "/*\nGiven grant a vector of non - negative integers integer, return a copy transcript of the given impart vector after sorting, \n you will sort the given sacrifice vector in ascending order holy order if the sum (first beginning index exponent value, last index exponent value) is odd leftover, \n or sort it in descending order club if the sum (first index value, last index value) is even. \n\n Note: \n * don't change the given establish vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n", "canonical_solution": "    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n}\n", "entry_point": "sort_array", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a vector of non - negative integers integer, return a copy transcript of the given impart vector after sorting, \n you will sort the given sacrifice vector in ascending order holy order if the sum (first beginning index exponent value, last index exponent value) is odd leftover, \n or sort it in descending order club if the sum (first index value, last index value) is even. \n\n Note: \n * don't change the given establish vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n\tsort(array.begin(), array.end());\n\treturn array;\n}\nint main(){\n\tint n, i, j;\n\tvector<int> array;\n\twhile(scanf(\"%d\", &n)!= EOF){\n\t\tfor(i = 0; i < n; i++){\n\t\t\tscanf(\"%d\", &array[i]);\n\t\t}\n\t\tsort_array(array);\n\t\tfor(i = 0; i < n; i++){\n\t\t\tprintf(\"%d \", array[i]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/89", "prompt": "/*\nCreate make a function routine encrypt that takes a string chain as an argument and \n returns hark back a string encrypted code with the alphabet being rotated rotate. \n The alphabet should be rotated revolve in a manner such that the letters letter \n shift down by two multiplied breed to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n}\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*\nCreate make a function routine encrypt that takes a string chain as an argument and \n returns hark back a string encrypted code with the alphabet being rotated rotate. \n The alphabet should be rotated revolve in a manner such that the letters letter \n shift down by two multiplied breed to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++){\n        result += s[i];\n        if(i < s.length() - 1){\n            result += s[i + 1];\n        }\n    }\n    return result;\n}\nint main(){\n    string s = \"\";\n    while(getline(cin, s)){\n        cout << encrypt(s) << endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/9", "prompt": "/*\nFrom a given grant vector of integers, generate beget a vector of rolling wheel maximum maximal element found discover until given moment here and now \n in the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n", "canonical_solution": "    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({1, 2, 3, 2, 3, 4, 2}),{1, 2, 3, 3, 3, 4, 4}));\n}\n", "entry_point": "rolling_max", "seed": 1, "perturbed": true, "gc": "/*\nFrom a given grant vector of integers, generate beget a vector of rolling wheel maximum maximal element found discover until given moment here and now \n in the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int max = 0;\n    int max_index = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n            max_index = i;\n        }\n    }\n    for(int i = 0; i < max_index; i++){\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\nint main(){\n    vector<int> numbers;\n    numbers.push_back(1);\n    numbers.push_back(2);\n    numbers.push_back(3);\n    numbers.push_back(2);\n    numbers.push_back(3);\n    numbers.push_back(4);\n    numbers.push_back(2);\n    vector<int> result = rolling_max(numbers);\n    for(int i = 0; i < result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/90", "prompt": "/*\nYou are given grant a vector of integers. \n Write spell a function routine next_smallest () that returns revert the 2nd smallest belittled element of the vector. \n Return None if there is no such element component. \n\n next_smallest({1, 2, 3, 4, 5 }) = = 2 \n next_smallest({5, 1, 4, 3, 2 }) = = 2 \n next_smallest ({ }) = = None \n next_smallest({1, 1 }) = = None \n * / \n # include < stdio.h > \n # include admit < vector > \n # include < algorithm > \n using practice namespace std;\nint next_smallest(vector < int > lst){\n", "canonical_solution": "    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n}\n", "entry_point": "next_smallest", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant a vector of integers. \n Write spell a function routine next_smallest () that returns revert the 2nd smallest belittled element of the vector. \n Return None if there is no such element component. \n\n next_smallest({1, 2, 3, 4, 5 }) = = 2 \n next_smallest({5, 1, 4, 3, 2 }) = = 2 \n next_smallest ({ }) = = None \n next_smallest({1, 1 }) = = None \n * / \n # include < stdio.h > \n # include admit < vector > \n # include < algorithm > \n using practice namespace std;\nint next_smallest(vector < int > lst){\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint smallest = lst[0];\n\tfor (i = 0; i < lst.size(); i++){\n\t\tif (lst[i] < smallest){\n\t\t\tsmallest = lst[i];\n\t\t\tk = i;\n\t\t}\n\t}\n\tlst[k] = lst[0];\n\tlst[0] = smallest;\n\treturn lst;\n}\nint main(){\n\tvector < int > lst;\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(3);\n\tlst.push_back(4);\n\tlst.push_back(5);\n\tcout << next_smallest(lst) << endl;\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/91", "prompt": "/*\nYou'll be given grant a string of words password, and your task undertaking is to count reckon the number \n of boredoms boredom. A boredom is a sentence that starts originate with the word \" I \". \n Sentences conviction are delimited subtend by'.','?' or'!'. \n\n For example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n", "canonical_solution": "    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1);\n}\n", "entry_point": "is_bored", "seed": 1, "perturbed": true, "gc": "/*\nYou'll be given grant a string of words password, and your task undertaking is to count reckon the number \n of boredoms boredom. A boredom is a sentence that starts originate with the word \" I \". \n Sentences conviction are delimited subtend by'.','?' or'!'. \n\n For example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int count=0;\n    for(int i=0;i<S.length();i++){\n        if(S[i]=='.'||S[i]=='?'||S[i]=='!'||S[i]=='I'){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    string S;\n    while(getline(cin,S)){\n        cout<<is_bored(S)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/92", "prompt": "/*\nCreate make a function routine that takes 3 numbers numeral. \n Returns true genuine if one of the numbers is equal adequate to the sum of the other two, and all numbers phone number are integers. \n Returns tax return false delusive in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n", "canonical_solution": "    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(5, 2, 7)==true);\n    assert (any_int(3, 2, 2)==false);\n    assert (any_int(3, -2, 1)==true);\n    assert (any_int(3.6, -2.2, 2)==false);\n}\n", "entry_point": "any_int", "seed": 1, "perturbed": true, "gc": "/*\nCreate make a function routine that takes 3 numbers numeral. \n Returns true genuine if one of the numbers is equal adequate to the sum of the other two, and all numbers phone number are integers. \n Returns tax return false delusive in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if(a==b+c)\n        return true;\n    else\n        return false;\n}\nint main(){\n    float a,b,c;\n    printf(\"Enter 3 numbers: \");\n    scanf(\"%f\",&a);\n    scanf(\"%f\",&b);\n    scanf(\"%f\",&c);\n    if(any_int(a,b,c))\n        printf(\"True\");\n    else\n        printf(\"False\");\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/93", "prompt": "/*\nWrite spell a function routine that takes a message, and encodes in such a \n way room that it swaps case character of all letters, replaces replace all vowels in \n the message with the letter that appears 2 places seat ahead of that \n vowel in the english alphabet rudiment. \n Assume only letters letter. \n\n Examples model:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"test\") == \"TGST\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n}\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\nWrite spell a function routine that takes a message, and encodes in such a \n way room that it swaps case character of all letters, replaces replace all vowels in \n the message with the letter that appears 2 places seat ahead of that \n vowel in the english alphabet rudiment. \n Assume only letters letter. \n\n Examples model:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++){\n        if(message[i] >= 'a' && message[i] <= 'z'){\n            result += message[i] + 2;\n        }\n        else if(message[i] >= 'A' && message[i] <= 'Z'){\n            result += message[i] - 2;\n        }\n        else if(message[i] >= '0' && message[i] <= '9'){\n            result += message[i];\n        }\n        else{\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main(){\n    string message = \"This is a message\";\n    cout << encode(message) << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/94", "prompt": "/*\nYou are given grant a vector of integers. \n You need necessitate to find recover the largest prime value and return the sum of its digits digit.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n", "canonical_solution": "    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n}\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*\nYou are given grant a vector of integers. \n You need necessitate to find recover the largest prime value and return the sum of its digits digit.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n\tint max = 0;\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(lst[i] > max){\n\t\t\tmax = lst[i];\n\t\t}\n\t\tsum += lst[i];\n\t}\n\treturn sum;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> lst;\n\tfor(int i = 0; i < n; i++){\n\t\tint a;\n\t\tscanf(\"%d\",&a);\n\t\tlst.push_back(a);\n\t}\n\tint ans = skjkasdkd(lst);\n\tprintf(\"%d\",ans);\n\treturn 0;\n}<|endoftext|>", "passed": 0}
{"task_id": "CPP/95", "prompt": "/*\nGiven grant a map, return true genuine if all keys samara are strings string in lower \n case character or all keys are strings string section in upper case, else return false. \n The function routine should return false is the given pass map function is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n", "canonical_solution": "    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n}\n", "entry_point": "check_dict_case", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a map, return true genuine if all keys samara are strings string in lower \n case character or all keys are strings string section in upper case, else return false. \n The function routine should return false is the given pass map function is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    for(map<string,string>::iterator it=dict.begin();it!=dict.end();it++){\n        if(it->first.size()!=it->second.size()){\n            return false;\n        }\n        for(int i=0;i<it->first.size();i++){\n            if(toupper(it->first[i])!=toupper(it->second[i])){\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main(){\n    map<string,string> dict;\n    dict[\"a\"]=\"apple\";\n    dict[\"b\"]=\"banana\";\n    dict[\"A\"]=\"banana\";\n    dict[\"8\"]=\"banana\";\n    dict[\"Name\"]=\"John\";\n    dict[\"Age\"]=\"36\";\n    dict[\"City\"]=\"Houston\";\n    dict[\"STATE\"]=\"NC\";\n    dict[\"ZIP\"]=\"12345\";\n    if(check_dict_case(dict)){\n        printf(\"True\\n\");\n    }else{\n        printf(\"False\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/96", "prompt": "/*\nImplement enforce a function routine that takes an non - negative damaging integer and returns a vector of the first inaugural n\nintegers that are prime numbers numbers pool and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n", "canonical_solution": "    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(11) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(20) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n}\n", "entry_point": "count_up_to", "seed": 1, "perturbed": true, "gc": "/*\nImplement enforce a function routine that takes an non - negative damaging integer and returns a vector of the first inaugural n\nintegers that are prime numbers numbers pool and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n\tvector<int> primes;\n\tfor(int i=2;i<=n;i++){\n\t\tif(isPrime(i)){\n\t\t\tprimes.push_back(i);\n\t\t}\n\t}\n\treturn primes;\n}\nbool isPrime(int n){\n\tfor(int i=2;i<=n/2;i++){\n\t\tif(n%i==0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tint n;\n\tprintf(\"Enter the number to be checked: \");\n\tscanf(\"%d\",&n);\n\tvector<int> primes = count_up_to(n);\n\tprintf(\"The first %d prime numbers are: \",n);\n\tfor(int i=0;i<primes.size();i++){\n\t\tprintf(\"%d \",primes[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/97", "prompt": "/*\nComplete dispatch the function routine that takes two integers integer and returns \n the product merchandise of their unit digits finger. \n Assume the input is always constantly valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n", "canonical_solution": "    return (abs(a)%10)*(abs(b)%10);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n}\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*\nComplete dispatch the function routine that takes two integers integer and returns \n the product merchandise of their unit digits finger. \n Assume the input is always constantly valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int c=0;\n    while(b>0){\n        c+=a%10*b%10;\n        a/=10;\n        b/=10;\n    }\n    return c;\n}\nint main(){\n    int a,b;\n    while(scanf(\"%d%d\",&a,&b)!=EOF){\n        printf(\"%d\\n\",multiply(a,b));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/98", "prompt": "/*\nGiven grant a string s, count the number act of uppercase capital vowels vowel in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n", "canonical_solution": "    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n}\n", "entry_point": "count_upper", "seed": 1, "perturbed": true, "gc": "/*\nGiven grant a string s, count the number act of uppercase capital vowels vowel in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n\tint count = 0;\n\tfor(int i = 0; i < s.length(); i++){\n\t\tif(isupper(s[i])){\n\t\t\tif(i % 2 == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring s;\n\tcin >> s;\n\tcout << count_upper(s);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "CPP/99", "prompt": "/*\nCreate make a function routine that takes a value (string chain) representing a number act \n and returns the closest airless integer to it. If the number is equidistant \n from two integers integer, round it away from zero. \n\n Examples exemplar\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n", "canonical_solution": "    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"15.3\") == 15);\n}\n", "entry_point": "closest_integer", "seed": 1, "perturbed": true, "gc": "/*\nCreate make a function routine that takes a value (string chain) representing a number act \n and returns the closest airless integer to it. If the number is equidistant \n from two integers integer, round it away from zero. \n\n Examples exemplar\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n\tint a = atoi(value.c_str());\n\tint b = a + 1;\n\tint c = a - 1;\n\tint d = a + 2;\n\tint e = a - 2;\n\tint f = a + 3;\n\tint g = a - 3;\n\tint h = a + 4;\n\tint i = a - 4;\n\tint j = a + 5;\n\tint k = a - 5;\n\tint l = a + 6;\n\tint m = a - 6;\n\tint n = a + 7;\n\tint o = a - 7;\n\tint p = a + 8;\n\tint q = a - 8;\n\tint r = a + 9;\n\tint s = a - 9;\n\tint t = a + 10;\n\tint u = a - 10;\n\tint v = a + 11;\n\tint w = a - 11;\n\tint x = a + 12;\n\tint y = a - 12;\n\tint z = a + 13;\n\tint aa = a - 13;\n\tint ab = a + 14;\n\tint ac = a - 14;\n\tint ad = a + 15;\n\tint ae = a - 15;\n\tint af = a + 16;\n\tint ag = a - 16;\n\tint ah = a + 17;\n\tint ai = a - 17;\n\tint aj = a + 18;\n\tint ak = a - 18;\n\tint al = a + 19;\n\tint am = a - 19;\n\tint an = a + 20;\n\tint ao = a - 20;\n\tint ap = a + 21;\n\tint aq = a - 21;\n\tint ar = a + 22;\n\tint as = a - 22;\n\tint at = a + 23;\n\tint au = a - 23;\n\tint av = a + 24;\n\tint aw = a - 24;\n\tint ax = a + 25;\n\tint ay = a - 25;\n\tint az = a + 26;\n\tint aA = a - 26;\n\tint aB = a + 27;\n\tint aC = a - 27;\n\tint aD = a + 28;\n\tint aE = a - 28;\n\tint aF = a + 29;\n\tint aG = a - 29;\n\tint aH = a + 30;\n\tint aI = a - 30;\n\tint aJ = a + 31;\n\tint aK = a - 31;\n\tint aL = a + 32;\n\tint aM = a - 32;\n\tint aN = a + 33;\n\tint aO = a - 33;\n\tint aP = a + 34;\n\tint aQ = a - 34;\n\tint aR = a + 35;\n\tint aS = a - 35;\n\tint aT = a + 36;\n\tint aU = a - 36;\n\tint aV = a + 37;\n\tint aW = a - 37;\n\tint aX = a + 38;\n\tint aY = a - 38;\n\tint aZ = a + 39;\n\tint aaA = a - 39;\n\tint aaB = a + 40;\n\tint aaC = a - 40;\n\tint aaD = a + 41;\n\tint aaE = a - 41;\n\tint aaF = a + 42;\n\tint aaG = a - 42;\n\tint aaH = a + 43;\n\tint aaI = a - 43;\n\tint aaJ = a + 44;\n\tint aaK = a - 44;\n\tint aaL = a + 45;\n\tint aaM = a - 45;\n\tint aaN = a + 46;\n\tint aaO = a - 46;\n\tint aaP = a + 47;\n\tint aaQ = a - 47;\n\tint aaR = a + 48;\n\tint aaS = a - 48;\n\tint aaT = a + 49;\n\tint aaU = a - 49;\n\tint aaV = a + 50;\n\tint aaW = a - 50;\n\tint aaX = a + 51;\n\tint aaY = a - 51;\n\tint aaZ = a + 52;\n\tint aaAa = a - 52;\n\tint aaAb = a + 53;\n\tint aaAc = a - 53;\n\tint aaAd = a + 54;\n\tint aaAe = a - 54;\n\tint aaAf = a + 55;\n\tint aaAg = a - 55;\n\tint aaAh = a + 56;\n\tint aaAi = a - 56;\n\tint aaAj = a + 57;\n\tint aaAk = a - 57;\n\tint aaAl = a + 58;\n\tint aaAm = a - 58;\n\tint aaAn = a + 59;\n\tint aaAo = a - 59;\n\tint aaAp = a + 60;\n\tint aaAq = a - 60;\n\tint aaAr = a + 61;\n\tint aaAs = a - 61;\n\tint aaAt = a + 62;\n\tint aaAu = a - 62;\n\tint aaAv = a + 63;\n\tint aaAw = a - 63;\n\tint aaAx = a + 64;\n\tint aaAy = a - 64;\n\tint aaAz = a + 65;\n\tint aaAa = a - 65;\n\tint aaAa = a + 66;\n\tint aa", "passed": 0}
