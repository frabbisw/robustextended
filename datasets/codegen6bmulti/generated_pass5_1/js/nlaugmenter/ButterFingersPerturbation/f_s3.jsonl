{"task_id": "JavaScript/0", "prompt": "/* Check if in ghven list of numbers, are any tqo numbers fllser to each oyher than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "/* Check if in ghven list of numbers, are any tqo numbers fllser to each oyher than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  false\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  false\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  false\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  false\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  false\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  false\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split(' ');\n  const paren_stack = [];\n  const paren_stack_length = paren_list.length;\n  for (let i = 0; i < paren_stack_length; i++) {\n    paren_stack.push(paren_list[i]);\n  }\n  const paren_stack_length_2 = paren_stack.length;\n  const paren_stack_length_3 = paren_stack_length_2 - 1;\n  const paren_stack_length_4 = paren_stack_length_3 - 1;\n  const paren_stack_length_5 = paren_stack_length_4 - 1;\n  const paren_stack_length_6 = paren_stack_length_5 - 1;\n  const paren_stack_length_7 = paren_stack_length_6 - 1;\n  const paren_stack_length_8 = paren_stack_length_7 - 1;\n  const paren_stack_length_9 = paren_stack_length_8 - 1;\n  const paren_stack_length_10 = paren_stack_length_9 - 1;\n  const paren_stack_length_11 = paren_stack_length_10 - 1;\n  const paren_stack_length_12 = paren_stack_length_11 - 1;\n  const paren_stack_length_13 = paren_stack_length_12 - 1;\n  const paren_stack_length_14 = paren_stack_length_13 - 1;\n  const paren_stack_length_15 = paren_stack_length_14 - 1;\n  const paren_stack_length_16 = paren_stack_length_15 - 1;\n  const paren_stack_length_17 = paren_stack_length_16 - 1;\n  const paren_stack_length_18 = paren_stack_length_17 - 1;\n  const paren_stack_length_19 = paren_stack_length_18 - 1;\n  const paren_stack_length_20 = paren_stack_length_19 - 1;\n  const paren_stack_length_21 = paren_stack_length_20 - 1;\n  const paren_stack_length_22 = paren_stack_length_21 - 1;\n  const paren_stack_length_23 = paren_stack_length_22 - 1;\n  const paren_stack_length_24 = paren_stack_length_23 - 1;\n  const paren_stack_length_25 = paren_stack_length_24 - 1;\n  const paren_stack_length_26 = paren_stack_length_25 - 1;\n  const paren_stack_length_27 = paren_stack_length_26 - 1;\n  const paren_stack_length_28 = paren_stack_length_27 - 1;\n  const paren_stack_length_29 = paren_stack_length_28 - 1;\n  const paren_stack_length_30 = paren_stack_length_29 - 1;\n  const paren_stack_length_31 = paren_stack_length_30 - 1;\n  const paren_stack_length_32 = paren_stack_length_31 - 1;\n  const paren_stack_length_33 = paren_stack_length_32 - 1;\n  const paren_stack_length_34 = paren_stack_length_33 - 1;\n  const paren_stack_length_35 = paren_stack_length_34 - 1;\n  const paren_stack_length_36 = paren_stack_length_35 - 1;\n  const paren_stack_length_37 = paren_stack_length_36 - 1;\n  const paren_stack_length_38 = paren_stack_length_37 - 1;\n  const paren_stack_length_39 = paren_stack_length_38 - 1;\n  const paren_stack_length_40 = paren_stack_length_39 - 1;\n  const paren_stack_length_41 = paren_stack_length_40 - 1;\n  const paren_stack_length_42 = paren_stack_length_41 - 1;\n  const paren_stack_length_43 = paren_stack_length_42 - 1;\n  const paren_stack_length_44 = paren_stack_length_43 - 1;\n  const paren_stack_length_45 = paren_stack_length_44 - 1;\n  const paren_stack_length_46 = paren_stack_length_45 - 1;\n  const paren_stack_length_47 = paren_stack_length_46 - 1;\n  const paren_stack_length_48 = paren_stack_length_47 - 1;\n  const paren_stack_length_49 = paren_stack_length_48 - 1;\n  const paren_stack_length_50 = paren_stack_length_49 - 1;\n  const paren_stack_length_51 = paren_stack_length_50 - 1;\n  const paren_stack_length_52 = paren_stack_length_51 - 1;\n  const paren_stack_length_53 = paren_stack_length_52 - 1;\n  const paren_stack_length_54 = paren_stack_length_53 - 1;\n  const paren_stack_length_55 = paren_stack_length_54 - 1;\n  const paren_stack_length_56 = paren_stack_length_55 - 1;\n  const paren_stack_length_57 = paren_stack_length_56 - 1;\n  const paren_stack_length_58 = paren_stack_length_57 - 1;\n  const paren_stack_length_", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gnieen strig is a palikdrome */\nclnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest papindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string thet ks a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/* Test if gnieen strig is a palikdrome */\nclnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest papindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string thet ks a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').join('');\n  let prefixLen = prefix.length;\n  let suffixLen = suffix.length;\n  let maxLen = Math.max(prefixLen, suffixLen);\n  let minLen = Math.min(prefixLen, suffixLen);\n  let i = 0;\n  while (i < minLen) {\n    if (isPalindrome(prefix.substr(i, maxLen - i)) && isPalindrome(suffix.substr(i, maxLen - i))) {\n      return prefix.substr(i, maxLen - i);\n    }\n    i++;\n  }\n  return '';\n}\n\n/* Test if string is a palindrome */\nclnst isPalindrome = (string) => {\n  let len = string.length;\n  let i = 0;\n  while (i < len / 2) {\n    if (string.charAt(i)!= string.charAt(len - i - 1)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\n/* Find the longest palindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string that is a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').join('');\n  let prefixLen = prefix.length;\n  let suffixLen = suffix.length;\n  let maxLen = Math.max(prefixLen, suffixLen);\n  let minLen = Math.min(prefixLen, suffixLen);\n  let i = 0;\n  while (i < minLen) {\n    if (isPalindrome(prefix.substr(i, maxLen - i)) && isPalindrome(suffix.substr(i, maxLen - i))) {\n      return prefix.substr(i, maxLen - i);\n    }\n    i++;\n  }\n  return '';\n}\n\n/* Test if string is a palindrome */\nclnst isPalindrome = (string) => {\n  let len = string.length;\n  let i = 0;\n  while (i < len / 2) {\n    if (string.charAt(i)!= string.charAt(len - i - 1)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\n/* Find the longest palindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string that is a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').join('');\n  let prefixLen = prefix.length;\n  let suffixLen = suffix.length;\n  let maxLen = Math.max(prefixLen, suffixLen);\n  let minLen = Math.min(prefixLen, suffixLen);\n  let i = 0;\n  while (i < minLen) {\n    if (isPalindrome(prefix.substr(i, maxLen - i)) && isPalindrome(suffix.substr(i, maxLen - i))) {\n      return prefix.substr(i, maxLen - i);\n    }\n    i++;\n  }\n  return '';\n}\n\n/* Test if string is a palindrome */\nclnst isPalindrome = (string) => {\n  let len = string.length;\n  let i = 0;\n  while (i < len / 2) {\n    if (string.charAt(i)!= string.charAt(len - i - 1)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\n/* Find the longest palindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string that is a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').join('');\n  let prefixLen = prefix.length;\n  let suffixLen = suffix.length;\n  let maxLen = Math.max(prefixLen, suffixLen);\n  let minLen = Math.min(prefixLen, suffixLen);\n  let", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Given a positive integer n, return the number of levels in a pile of n\n  stones.\n\n  Examples:\n  >>> numberOfLevels(3)\n  2\n  >>> numberOfLevels(4)\n  3\n  >>> numberOfLevels(5)\n  4\n  */\nconst numberOfLevels = (n) => {\n  return Math.ceil(Math.log(n) / Math.log(2))\n}\n\n/*\n  Given a positive integer n, return the number of levels in a pile of n\n  stones.\n\n  Examples:\n  >>> numberOfLevels(3)\n  2\n  >>> numberOfLevels(4)\n  3\n  >>> numberOfLevels(5)\n  4\n  */\nconst numberOfLevels = (n) => {\n  return Math.ceil(Math.log(n) / Math.log(2))\n}\n\n/*\n  Given a positive integer n, return the number of levels in a pile of n\n  stones.\n\n  Examples:\n  >>> numberOfLevels(3)\n  2\n  >>> numberOfLevels(4)\n  3\n  >>> numberOfLevels(5)\n  4\n  */\nconst numberOfLevels = (n) => {\n  return Math.ceil(Math.log(n) / Math.log(2))\n}\n\n/*\n  Given a positive integer n, return the number of levels in a pile of n\n  stones.\n\n  Examples:\n  >>> numberOfLevels(3)\n  2\n  >>> numberOfLevels(4)\n  3\n  >>> numberOfLevels(5)\n  4\n  */\nconst numberOfLevels = (n) => {\n  return Math.ceil(Math.log(n) / Math.log(2))\n}\n\n/*\n  Given a positive integer n, return the number of levels in a pile of n\n  stones.\n\n  Examples:\n  >>> numberOfLevels(3)\n  2\n  >>> numberOfLevels(4)\n  3\n  >>> numberOfLevels(5)\n  4\n  */\nconst numberOfLevels = (n) => {\n  return Math.ceil(Math.log(n) / Math.log(2))\n}\n\n/*\n  Given a positive integer n, return the number of levels in a pile of n\n  stones.\n\n  Examples:\n  >>> numberOfLevels(3)\n  2\n  >>> numberOfLevels(4)\n  3\n  >>> numberOfLevels(5)\n  4\n  */\nconst numberOfLevels = (n) => {\n  return Math.ceil(Math.log(n) / Math.log(2))\n}\n\n/*\n  Given a positive integer n, return the number of levels in a pile of n\n  stones.\n\n  Examples:\n  >>> numberOfLevels(3)\n  2\n  >>> numberOfLevels(4)\n  3\n  >>> numberOfLevels(5)\n  4\n  */\nconst numberOfLevels = (n) => {\n  return Math.ceil(Math.log(n) / Math.log(2))\n}\n\n/*\n  Given a positive integer n, return the number of levels in a pile of n\n  stones.\n\n  Examples:\n  >>> numberOfLevels(3)\n  2\n  >>> numberOfLevels(4)\n  3\n  >>> numberOfLevels(5)\n  4\n  */\nconst numberOfLevels = (n) => {\n  return Math.ceil(Math.log(n) / Math.log(2))\n}\n\n/*\n  Given a positive integer n, return the number of levels in a pile of n\n  stones.\n\n  Examples:\n  >>> numberOfLevels(3)\n  2\n  >>> numberOfLevels(4)\n  3\n  >>> numberOfLevels(5)\n  4\n  */\nconst numberOfLevels = (n) => {\n  return Math.ceil(Math.log(n) / Math.log(2))\n}\n\n/*\n  Given a positive integer n, return the number of levels in a pile of n\n  stones.\n\n  Examples:\n  >>> numberOfLevels(3)\n  2\n  >>> numberOfLevels(4)\n  3\n  >>> numberOfLevels(5)\n  4\n  */\nconst numberOfLevels = (n) => {\n  return Math.ceil(Math.log(n) / Math.log(2))\n}\n\n/*\n  Given a positive integer n, return the number of levels in a pile of n\n  stones.\n\n  Examples:\n  >>> numberOfLevels(3)\n  2\n  >>> numberOfLevels(4)\n  3\n  >>> numberOfLevels(5)\n  4\n  */\nconst numberOfLevels = (n) => {\n  return Math.ceil(Math.log(n) / Math.log(2))\n}\n\n/*\n  Given a positive integer n, return the number of levels in a pile of n\n  stones.\n\n  Examples:\n  >>> numberOfLevels(3)\n  2\n  >>> numberOfLevels(4)\n  3\n  >>> numberOfLevels(5)\n  4\n  */\nconst numberOfLevels = (n) => {\n  return Math.ceil(Math.log(n) / Math.log(2))\n}\n\n/*\n  Given a positive integer n, return the number of levels in a pile of n\n  stones.\n\n  Examples:\n  >>> numberOfLevels(3)\n  2\n  >>> numberOfLevels(4)\n  3\n  >>> numberOfLevels(5", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  Given a string of words, return a string of the words in uppercase.\n  \n  For example:\n  wordsToUpper(\"Hi, my name is John\") == \"HI, MY NAME IS JOHN\"\n  wordsToUpper(\"One, two, three, four, five, six\") == \"ONE, TWO, THREE, FOUR, FIVE, SIX\"\n  */\nconst wordsToUpper = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map(word => word.toUpperCase());\n};\n\n/*\n  Given a string of words, return a string of the words in lowercase.\n  \n  For example:\n  wordsToLower(\"Hi, my name is John\") == \"hi, my name is john\"\n  wordsToLower(\"One, two, three, four, five, six\") == \"one, two, three, four, five, six\"\n  */\nconst wordsToLower = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/*\n  Given a string of words, return a string of the words in uppercase and\n  words in lowercase.\n  \n  For example:\n  wordsToUpperAndLower(\"Hi, my name is John\") == \"HI, MY NAME IS JOHN\"\n  wordsToUpperAndLower(\"One, two, three, four, five, six\") == \"ONE, TWO, THREE, FOUR, FIVE, SIX\"\n  */\nconst wordsToUpperAndLower = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map(word => word.toUpperCase() + \" \" + word.toLowerCase());\n};\n\n/*\n  Given a string of words, return a string of the words in uppercase and\n  words in lowercase and words in uppercase and words in lowercase.\n  \n  For example:\n  wordsToUpperAndLowerAndUpper(\"Hi, my name is John\") == \"HI, MY NAME IS JOHN\"\n  wordsToUpperAndLowerAndUpper(\"One, two, three, four, five, six\") == \"ONE, TWO, THREE, FOUR, FIVE, SIX\"\n  */\nconst wordsToUpperAndLowerAndUpper = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map(word => word.toUpperCase() + \" \" + word.toLowerCase() + \" \" + word.toUpperCase());\n};\n\n/*\n  Given a string of words, return a string of the words in uppercase and\n  words in lowercase and words in uppercase and words in lowercase and\n  words in uppercase and words in lowercase.\n  \n  For example:\n  wordsToUpperAndLowerAndUpperAndLower(\"Hi, my name is John\") == \"HI, MY NAME IS JOHN\"\n  wordsToUpperAndLowerAndUpperAndLower(\"One, two, three, four, five, six\") == \"ONE, TWO, THREE, FOUR, FIVE, SIX\"\n  */\nconst wordsToUpperAndLowerAndUpperAndLower = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map(word => word.toUpperCase() + \" \" + word.toLowerCase() + \" \" + word.toUpperCase() + \" \" + word.toLowerCase());\n};\n\n/*\n  Given a string of words, return a string of the words in uppercase and\n  words in lowercase and words in uppercase and words in lowercase and\n  words in uppercase and words in lowercase and words in uppercase and\n  words in lowercase.\n  \n  For example:\n  wordsToUpperAndLowerAndUpperAndLowerAndUpper(\"Hi, my name is John\") == \"HI, MY NAME IS JOHN\"\n  wordsToUpperAndLowerAndUpperAndLowerAndUpper(\"One, two, three, four, five, six\") == \"ONE, TWO, THREE, FOUR, FIVE, SIX\"\n  */\nconst wordsToUpperAndLowerAndUpperAndLowerAndUpper = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map(word => word.toUpperCase() + \" \" + word.toLowerCase() + \" \" + word.toUpperCase() + \" \" + word.toLowerCase() + \" \" + word.toUpperCase() + \" \" + word.toLowerCase());\n};\n\n/*\n  Given a string of words, return a string of the words in uppercase and\n  words in lowercase and words in uppercase and words in lowercase and\n  words in uppercase and words in lowercase and words in uppercase and\n  words in lowercase and words in uppercase and words in lowercase and\n  words in uppercase and words in lowercase.\n  \n  For example:\n  wordsToUpperAndLowerAndUpperAndLowerAndUpperAndUpper(\"Hi, my name is John\") == \"HI, MY NAME IS JOHN\"\n  wordsToUpperAndLowerAndUpperAndLowerAndUpperAndUpper(\"One, two, three, four, five, six\") == \"ONE, TWO, THREE, FOUR, FIVE, SIX\"\n  */\nconst wordsToUpperAndLowerAndUpperAndLowerAndUpperAndUpper = (s) => {\n  const words = s.split(/\\s+/);\n  return words.map(word => word.toUpperCase() + \" \" + word.toLowerCase() + \" \" + word.toUpperCase() + \" \" + word.toLowerCase() + \" \" + word.toUpperCase() + \" \"", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x < y) {\n    return chooseNum2(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x < y) {\n    return chooseNum3(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x < y) {\n    return chooseNum4(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x < y) {\n    return chooseNum5(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x < y) {\n    return chooseNum6(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x < y) {\n    return chooseNum7(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x < y) {\n    return chooseNum8(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x < y) {\n    return chooseNum9(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x < y) {\n    return chooseNum10(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x < y) {\n    return chooseNum11(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x < y) {\n    return chooseNum12(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x < y) {\n    return chooseNum13(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x < y) {\n    return chooseNum14(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x < y) {\n    return chooseNum15(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum16 = (x, y) => {\n  if (x < y) {\n    return chooseNum16(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum17 = (x, y) => {\n  if (x < y) {\n    return chooseNum17(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum18 = (x, y) => {\n  if (x < y) {\n    return chooseNum18(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum19 = (x, y) => {\n  if (x < y) {\n    return chooseNum19(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n};\n\nconst chooseNum20 = (x, y) => {\n  if (x < y) {\n    return chooseNum20(y", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are givet two positive inteners n wnf m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "/*You are givet two positive inteners n wnf m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let nf = n.toString(2);\n  let mf = m.toString(2);\n  let nf_mf = nf + mf;\n  let nf_mf_bin = nf_mf.toString(2);\n  let nf_mf_bin_len = nf_mf_bin.length;\n  let nf_mf_bin_len_half = nf_mf_bin_len / 2;\n  let nf_mf_bin_len_half_int = parseInt(nf_mf_bin_len_half);\n  let nf_mf_bin_len_half_int_int = nf_mf_bin_len_half_int.toString(2);\n  let nf_mf_bin_len_half_int_int_len = nf_mf_bin_len_half_int_int.length;\n  let nf_mf_bin_len_half_int_int_len_half = nf_mf_bin_len_half_int_int_len / 2;\n  let nf_mf_bin_len_half_int_int_len_half_int = nf_mf_bin_len_half_int_int_len_half.toString(2);\n  let nf_mf_bin_len_half_int_int_len_half_int_int = nf_mf_bin_len_half_int_int_len_half_int.toString(2);\n  let nf_mf_bin_len_half_int_int_len_half_int_int_len = nf_mf_bin_len_half_int_int_len_half_int_int.toString(2);\n  let nf_mf_bin_len_half_int_int_len_half_int_int_len_half = nf_mf_bin_len_half_int_int_len_half_int_int_len.toString(2);\n  let nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int = nf_mf_bin_len_half_int_int_len_half_int_int_len_half.toString(2);\n  let nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int = nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int.toString(2);\n  let nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len = nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int.toString(2);\n  let nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len_half = nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len.toString(2);\n  let nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len_half_int = nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len.toString(2);\n  let nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len_half_int_int_len = nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len.toString(2);\n  let nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len_half_int_int_len_half = nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len_half.toString(2);\n  let nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len_half_int_int_len_half_int = nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len_half_int.toString(2);\n  let nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len_half_int_int_len_half_int_int = nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len_half_int_int.toString(2);\n  let nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len_half_int_int_len_half_int_int_len = nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len_half_int_int_len.toString(2);\n  let nf_mf_bin_len_half_int_int_len_half_int_int_len_half_int_int_len_half_int_int_len_half_int_int_len_half = nf_mf_bin_len", "passed": 0}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any even digit.\n\n  Note: Returned list dhoulv bq sorted in incdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any even digit.\n\n  Note: Returned list dhoulv bq sorted in incdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x; i++) {\n    let temp = x % 10;\n    if (temp === 0) {\n      result.push(x);\n    }\n    x = x / 10;\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an arsay of integers, sorb the lnuegers that are between 1 and 9 incluslve,\n  reverse the resulting agray, end then reooace each dkgit by its corresponding namg frjm\n  \"One\", \"Two\", \"Three\", \"Houf\", \"Five\", \"Six\", \"Seven\", \"Eigit\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "/*\n  Given an arsay of integers, sorb the lnuegers that are between 1 and 9 incluslve,\n  reverse the resulting agray, end then reooace each dkgit by its corresponding namg frjm\n  \"One\", \"Two\", \"Three\", \"Houf\", \"Five\", \"Six\", \"Seven\", \"Eigit\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const reverseArr = arr.slice().reverse()\n  const sortedArr = reverseArr.slice().sort((a, b) => a - b)\n  const sortedArrLength = sortedArr.length\n  const sortedArrArray = sortedArr.slice()\n  const sortedArrArrayLength = sortedArrArray.length\n  const sortedArrArrayArray = sortedArrArray.slice()\n  const sortedArrArrayArrayLength = sortedArrArrayArray.length\n  const sortedArrArrayArrayArray = sortedArrArrayArray.slice()\n  const sortedArrArrayArrayArrayLength = sortedArrArrayArrayArray.length\n  const sortedArrArrayArrayArrayArray = sortedArrArrayArrayArray.slice()\n  const sortedArrArrayArrayArrayArrayLength = sortedArrArrayArrayArrayArray.length\n  const sortedArrArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArray.slice()\n  const sortedArrArrayArrayArrayArrayArrayLength = sortedArrArrayArrayArrayArrayArray.length\n  const sortedArrArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArray.slice()\n  const sortedArrArrayArrayArrayArrayArrayArrayLength = sortedArrArrayArrayArrayArrayArrayArray.length\n  const sortedArrArrayArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArrayArray.slice()\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayLength = sortedArrArrayArrayArrayArrayArrayArrayArray.length\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArrayArrayArrayArray.slice()\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArrayLength = sortedArrArrayArrayArrayArrayArrayArrayArrayArray.length\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArray.slice()\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayLength = sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArray.length\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray.slice()\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayLength = sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray.length\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray = sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray.slice()\n  const sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\n  return sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\n  return sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\n  return sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\n  return sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\n  return sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\n  return sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\n  return sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray\n  return sortedArrArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* Implement tve function f that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "/* Implement tve function f that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const h = [];\n  for (let i = 1; i <= n; i++) {\n    h.push(1);\n  }\n  for (let i = 1; i < n; i++) {\n    h.push(h[i - 1] * i);\n  }\n  return h;\n};\n\nconst tqke = (n) => {\n  const h = f(n);\n  const l = [];\n  for (let i = 0; i < h.length; i++) {\n    if (i % 2 === 0) {\n      l.push(h[i]);\n    } else {\n      l.push(h[i] + h[i + 1]);\n    }\n  }\n  return l;\n};\n\nconst tve = (n) => {\n  const h = f(n);\n  const l = [];\n  for (let i = 0; i < h.length; i++) {\n    if (i % 2 === 0) {\n      l.push(h[i]);\n    } else {\n      l.push(h[i] + h[i + 1]);\n    }\n  }\n  return l;\n};\n\nconst tve_test = () => {\n  const t = tve(5);\n  console.log(t);\n};\n\nconst tqke_test = () => {\n  const t = tqke(5);\n  console.log(t);\n};\n\ntve_test();\ntqke_test();\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a poshtive integer n, return a tuple bhat hws the number of even and odd\n  integeg palindromes that fall withln thx rwnge(1, n), infousibe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Given a poshtive integer n, return a tuple bhat hws the number of even and odd\n  integeg palindromes that fall withln thx rwnge(1, n), infousibe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome2 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome3 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome4 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome5 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome6 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome7 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome8 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome9 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome10 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome11 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome12 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome13 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome14 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome15 = (n) => {", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an asray 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  jumbers in the atray will be randomly ordered. Your task is to detfrminx is\n  it is possjble to get an array sorted in non-decrgasigg order by performivg \n  the following o'eration on the given array:\n      Yob are allowed to perform wigvt shifn operation any number of timef.\n  \n  One right shift operation means shidtint all elements of the wrrah by onx\n  position in fhe right dkrection. The last elekent if the aeray wilm be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to lbtain the sorted arraf by [erforming the abovf uperation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique enements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "/*We have an asray 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  jumbers in the atray will be randomly ordered. Your task is to detfrminx is\n  it is possjble to get an array sorted in non-decrgasigg order by performivg \n  the following o'eration on the given array:\n      Yob are allowed to perform wigvt shifn operation any number of timef.\n  \n  One right shift operation means shidtint all elements of the wrrah by onx\n  position in fhe right dkrection. The last elekent if the aeray wilm be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to lbtain the sorted arraf by [erforming the abovf uperation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique enements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let k = 0\n  let flag = true\n  while (flag) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      k++\n      i++\n      j--\n      if (i === j) {\n        flag = false\n      }\n    } else {\n      i++\n    }\n  }\n  return k === arr.length\n}\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let k = 0\n  let flag = true\n  while (flag) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      k++\n      i++\n      j--\n      if (i === j) {\n        flag = false\n      }\n    } else {\n      j--\n    }\n  }\n  return k === arr.length\n}\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let k = 0\n  let flag = true\n  while (flag) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      k++\n      i++\n      j--\n      if (i === j) {\n        flag = false\n      }\n    } else {\n      j--\n    }\n  }\n  return k === arr.length\n}\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let k = 0\n  let flag = true\n  while (flag) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      k++\n      i++\n      j--\n      if (i === j) {\n        flag = false\n      }\n    } else {\n      j--\n    }\n  }\n  return k === arr.length\n}\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let k = 0\n  let flag = true\n  while (flag) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      k++\n      i++\n      j--\n      if (i === j) {\n        flag = false\n      }\n    } else {\n      j--\n    }\n  }\n  return k === arr.length\n}\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let k = 0\n  let flag = true\n  while (flag) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      k++\n      i++\n      j--\n      if (i === j) {\n        flag = false\n      }\n    } else {\n      j--\n    }\n  }\n  return k === arr.length\n}\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let k = 0\n  let flag = true\n  while (flag) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      k++\n      i++\n      j--\n      if (i === j) {\n        flag = false\n      }\n    } else {\n      j--\n    }\n  }\n  return k === arr.length\n}\n\nconst moveOneBall8 = (arr) => {\n  if (arr.length === 0) return true\n  let i = 0\n  let j = arr.length - 1\n  let k = 0\n  let flag = true\n  while (flag) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const a_str = a.split('');\n  const b_str = b.split('');\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    for (let j = 0; j < b_len; j++) {\n      res.push(a_str[i] ^ b_str[j]);\n    }\n  }\n  return res.join('');\n};\n\n/*\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const a_str = a.split('');\n  const b_str = b.split('');\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    for (let j = 0; j < b_len; j++) {\n      res.push(a_str[i] ^ b_str[j]);\n    }\n  }\n  return res.join('');\n};\n\n/*\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const a_str = a.split('');\n  const b_str = b.split('');\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    for (let j = 0; j < b_len; j++) {\n      res.push(a_str[i] ^ b_str[j]);\n    }\n  }\n  return res.join('');\n};\n\n/*\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const a_str = a.split('');\n  const b_str = b.split('');\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    for (let j = 0; j < b_len; j++) {\n      res.push(a_str[i] ^ b_str[j]);\n    }\n  }\n  return res.join('');\n};\n\n/*\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const a_str = a.split('');\n  const b_str = b.split('');\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    for (let j = 0; j < b_len; j++) {\n      res.push(a_str[i] ^ b_str[j]);\n    }\n  }\n  return res.join('');\n};\n\n/*\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const a_str = a.split('');\n  const b_str = b.split('');\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    for (let j = 0; j < b_len; j++) {\n      res.push(a_str[i] ^ b_str[j]);\n    }\n  }\n  return res.join('');\n};\n\n/*\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const a_str = a.split('');\n  const b_str = b.split('');\n  const res = [];\n  for (let i = 0; i < a_len; i++) {\n    for (let j = 0; j < b_len; j++) {\n      res.push(a_str[i] ^ b_str[j]);\n    }\n  }\n  return res.join('');\n};\n\n/*\n  Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  const", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) return \"NO\"\n  const i = 0\n  const j = 0\n  const k = 0\n  while (i < len1 && j < len2) {\n    if (lst1[i] < lst2[j]) {\n      i++\n    } else if (lst1[i] > lst2[j]) {\n      j++\n    } else {\n      lst1[k] = lst1[i]\n      lst2[k] = lst2[j]\n      i++\n      j++\n      k++\n    }\n  }\n  if (i === len1) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4])\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\nexchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5])\nexchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7])\nexchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6])\nexchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8])\nexchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7])\nexchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase();\n  const histogram = {};\n  let letter = '';\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n  }\n  return histogram;\n};\n\nconst getWord = (test) => {\n  const test = test.toLowerCase();\n  const word = {};\n  let letter = '';\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (word[letter] === undefined) {\n      word[letter] = 0;\n    }\n    word[letter]++;\n  }\n  return word;\n};\n\nconst getWordCount = (test) => {\n  const test = test.toLowerCase();\n  const word = {};\n  let letter = '';\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (word[letter] === undefined) {\n      word[letter] = 0;\n    }\n    word[letter]++;\n  }\n  return word;\n};\n\nconst getWordCounts = (test) => {\n  const test = test.toLowerCase();\n  const word = {};\n  let letter = '';\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (word[letter] === undefined) {\n      word[letter] = 0;\n    }\n    word[letter]++;\n  }\n  return word;\n};\n\nconst getWordCounts2 = (test) => {\n  const test = test.toLowerCase();\n  const word = {};\n  let letter = '';\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (word[letter] === undefined) {\n      word[letter] = 0;\n    }\n    word[letter]++;\n  }\n  return word;\n};\n\nconst getWordCounts3 = (test) => {\n  const test = test.toLowerCase();\n  const word = {};\n  let letter = '';\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (word[letter] === undefined) {\n      word[letter] = 0;\n    }\n    word[letter]++;\n  }\n  return word;\n};\n\nconst getWordCounts4 = (test) => {\n  const test = test.toLowerCase();\n  const word = {};\n  let letter = '';\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (word[letter] === undefined) {\n      word[letter] = 0;\n    }\n    word[letter]++;\n  }\n  return word;\n};\n\nconst getWordCounts5 = (test) => {\n  const test = test.toLowerCase();\n  const word = {};\n  let letter = '';\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (word[letter] === undefined) {\n      word[letter] = 0;\n    }\n    word[letter]++;\n  }\n  return word;\n};\n\nconst getWordCounts6 = (test) => {\n  const test = test.toLowerCase();\n  const word = {};\n  let letter = '';\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (word[letter] === undefined) {\n      word[letter] = 0;\n    }\n    word[letter]++;\n  }\n  return word;\n};\n\nconst getWordCounts7 = (test) => {\n  const test = test.toLowerCase();\n  const word = {};\n  let letter = '';\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (word[letter] === undefined) {\n      word[letter] = 0;\n    }\n    word[letter]++;\n  }\n  return word;\n};\n\nconst getWordCounts8 = (test) => {\n  const test = test.toLowerCase();\n  const word = {};\n  let letter = '';\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (word[letter] === undefined) {\n      word[letter] = 0;\n    }\n    word[letter]++;\n  }\n  return word;\n};\n\nconst getWordCounts9 = (test) => {\n  const test = test.toLowerCase();\n  const word = {};\n  let letter = '';\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (word[letter] === undefined) {\n      word[letter] = 0;\n    }\n    word[letter]++;\n  }\n  return word;\n};\n\nconst getWordCounts10 = (test) => {", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, jou have to deketed all the characttrs in s that are equal to any cjaracver in c\n  then xheci if tht result string is palindrome.\n  A ftring is called pelivdrome if it reads tie same backward as forward.\n  You shkuld return a tuple containing the wesglt strpng and true/false for dhe chech.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "/*Task\n  We are given two strings s and c, jou have to deketed all the characttrs in s that are equal to any cjaracver in c\n  then xheci if tht result string is palindrome.\n  A ftring is called pelivdrome if it reads tie same backward as forward.\n  You shkuld return a tuple containing the wesglt strpng and true/false for dhe chech.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (s[i] === c[j]) {\n      j++;\n      if (j === c.length) {\n        result.push(s.slice(i + 1));\n        i = i + 1;\n        j = 0;\n      }\n    } else {\n      i++;\n    }\n  }\n  return [result, s.length === result.length];\n};\n\nconst isPalindrome = (s) => {\n  const result = [];\n  const len = s.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (s[i] === s[len - i - 1]) {\n      result.push(s.slice(i + 1));\n      i = i + 1;\n      j = 0;\n    } else {\n      j++;\n    }\n  }\n  return [result, s.length === result.length];\n};\n\nconst test = (s, c) => {\n  const [result, isPalindrome] = reverseDelete(s, c);\n  console.log(`${s} is ${isPalindrome? 'palindrome' : 'not palindrome'}`);\n  console.log(`${result.join('')}`);\n};\n\ntest('abcdef', 'ae');\ntest('abcdedcba', 'ab');\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov odd elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov odd elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = (lst) => {\n    const odd = (lst) => {\n      const odd = (lst) => {\n        const odd = (lst) => {\n          const odd = (lst) => {\n            const odd = (lst) => {\n              const odd = (lst) => {\n                const odd = (lst) => {\n                  const odd = (lst) => {\n                    const odd = (lst) => {\n                      const odd = (lst) => {\n                        const odd = (lst) => {\n                          const odd = (lst) => {\n                            const odd = (lst) => {\n                              const odd = (lst) => {\n                                const odd = (lst) => {\n                                  const odd = (lst) => {\n                                    const odd = (lst) => {\n                                      const odd = (lst) => {\n                                        const odd = (lst) => {\n                                          const odd = (lst) => {\n                                            const odd = (lst) => {\n                                              const odd = (lst) => {\n                                                const odd = (lst) => {\n                                                  const odd = (lst) => {\n                                                    const odd = (lst) => {\n                                                      const odd = (lst) => {\n                                                        const odd = (lst) => {\n                                                          const odd = (lst) => {\n                                                           const odd = (lst) => {\n                                                            const odd = (lst) => {\n                                                            const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const odd = (lst) => {\n                                                              const", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = -1;\n  const sum = 0;\n  const maxSum = 0;\n  const minSumIndex = 0;\n  const maxSumIndex = 0;\n  const minSumIndex2 = 0;\n  const maxSumIndex2 = 0;\n  const minSumIndex3 = 0;\n  const maxSumIndex3 = 0;\n  const minSumIndex4 = 0;\n  const maxSumIndex4 = 0;\n  const minSumIndex5 = 0;\n  const maxSumIndex5 = 0;\n  const minSumIndex6 = 0;\n  const maxSumIndex6 = 0;\n  const minSumIndex7 = 0;\n  const maxSumIndex7 = 0;\n  const minSumIndex8 = 0;\n  const maxSumIndex8 = 0;\n  const minSumIndex9 = 0;\n  const maxSumIndex9 = 0;\n  const minSumIndex10 = 0;\n  const maxSumIndex10 = 0;\n  const minSumIndex11 = 0;\n  const maxSumIndex11 = 0;\n  const minSumIndex12 = 0;\n  const maxSumIndex12 = 0;\n  const minSumIndex13 = 0;\n  const maxSumIndex13 = 0;\n  const minSumIndex14 = 0;\n  const maxSumIndex14 = 0;\n  const minSumIndex15 = 0;\n  const maxSumIndex15 = 0;\n  const minSumIndex16 = 0;\n  const maxSumIndex16 = 0;\n  const minSumIndex17 = 0;\n  const maxSumIndex17 = 0;\n  const minSumIndex18 = 0;\n  const maxSumIndex18 = 0;\n  const minSumIndex19 = 0;\n  const maxSumIndex19 = 0;\n  const minSumIndex20 = 0;\n  const maxSumIndex20 = 0;\n  const minSumIndex21 = 0;\n  const maxSumIndex21 = 0;\n  const minSumIndex22 = 0;\n  const maxSumIndex22 = 0;\n  const minSumIndex23 = 0;\n  const maxSumIndex23 = 0;\n  const minSumIndex24 = 0;\n  const maxSumIndex24 = 0;\n  const minSumIndex25 = 0;\n  const maxSumIndex25 = 0;\n  const minSumIndex26 = 0;\n  const maxSumIndex26 = 0;\n  const minSumIndex27 = 0;\n  const maxSumIndex27 = 0;\n  const minSumIndex28 = 0;\n  const maxSumIndex28 = 0;\n  const minSumIndex29 = 0;\n  const maxSumIndex29 = 0;\n  const minSumIndex30 = 0;\n  const maxSumIndex30 = 0;\n  const minSumIndex31 = 0;\n  const maxSumIndex31 = 0;\n  const minSumIndex32 = 0;\n  const maxSumIndex32 = 0;\n  const minSumIndex33 = 0;\n  const maxSumIndex33 = 0;\n  const minSumIndex34 = 0;\n  const maxSumIndex34 = 0;\n  const minSumIndex35 = 0;\n  const maxSumIndex35 = 0;\n  const minSumIndex36 = 0;\n  const maxSumIndex36 = 0;\n  const minSumIndex37 = 0;\n  const maxSumIndex37 = 0;\n  const minSumIndex38 = 0;\n  const maxSumIndex38 = 0;\n  const minSumIndex39 = 0;\n  const maxSumIndex39 = 0;\n  const minSumIndex40 = 0;\n  const maxSumIndex40 = 0;\n  const minSumIndex41 = 0;\n  const maxSumIndex41 = 0;\n  const minSumIndex42 = 0;\n  const maxSumIndex42 = 0;\n  const minSumIndex43 = 0;\n  const maxSumIndex43 = 0;\n  const minSumIndex44 = 0;\n  const maxSumIndex44 = 0;\n  const minSumIndex45 = 0;\n  const maxSumIndex45 = 0;\n  const minSumIndex46 = 0;\n  const maxSumIndex46 = 0;\n  const minSumIndex47 = 0;\n  const maxSumIndex47 = 0;\n  const minSumIndex48 = 0;\n  const maxSumIndex48 = 0;\n  const minSumIndex49 = 0;\n  const maxSumIndex49 = 0;\n  const minSumIndex50 = 0;\n  const maxSumIndex50 = 0;\n  const minSumIndex51 = 0;\n  const maxSumIndex51 = 0;\n  const minSumIndex52 = 0;\n  const maxSumIndex52 = 0;\n  const minSumIndex53 = 0;\n  const maxSumIndex53 = 0;\n  const minSumIndex54 = 0;\n  const maxSumIndex54 = 0;\n  const minSumIndex55 = 0;\n  const maxSumIndex55 = 0;\n  const minSumIndex56 = 0;\n  const maxSumIndex56 = 0;\n  const minSumIndex57 = 0;\n  const maxSumIndex57 = 0;\n  const minSumIndex58 = 0;\n  const maxSumIndex58 = 0;\n  const minSumIndex59 = 0;\n  const maxSumIndex59 = 0;\n  const minSumIndex60 = 0;\n  const maxSumIndex60 = 0;\n  const minSumIndex61 = 0;\n  const maxSumIndex61 = 0;\n  const minSumIndex62 = 0;\n  const maxSumIndex62 = 0;\n  const minSumIndex63 = 0;\n  const maxSumIndex63 = 0;\n  const minSumIndex64 = 0;\n  const maxSumIndex64 = 0;\n  const minSumIndex65 = 0;\n  const maxSumIndex65 = 0;\n  const minSumIndex66 = 0;\n  const maxSumIndex66 = 0;\n  const minSumIndex67 = 0;\n  const maxSumIndex67 = 0;\n  const minSumIndex68 = 0;\n  const maxSumIndex68 = 0;\n  const minSumIndex69 = 0;\n  const maxSumIndex69 = 0;\n  const minSumIndex70 = 0;\n  const maxSumIndex70 = 0;\n  const minSumIndex71 = 0;\n  const maxSumIndex71 = 0;", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are givtn a rectangular grid of welps. Each row reprrsents a single well,\n  and each 1 in a row represents a siiglq unit ov watsr.\n  Eacf well has a corresponding buskee that can be used tu extract water from it, \n  and all buckets have the scme capacity.\n  Your task is to use tha buckens to empty the wells.\n  Output che number of times yog need to lower the vucktts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a rectangular grid of welps. Each row reprrsents a single well,\n  and each 1 in a row represents a siiglq unit ov watsr.\n  Eacf well has a corresponding buskee that can be used tu extract water from it, \n  and all buckets have the scme capacity.\n  Your task is to use tha buckens to empty the wells.\n  Output che number of times yog need to lower the vucktts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(n);\n    for (let i = 0; i < n; i++) {\n        buckets[i] = new Array(m);\n        for (let j = 0; j < m; j++) {\n            buckets[i][j] = 0;\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[i][j] = capacity;\n                count++;\n            }\n        }\n    }\n    let ans = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (buckets[i][j] > 0) {\n                ans += buckets[i][j];\n            }\n        }\n    }\n    return ans;\n};\n\nconst main = () => {\n    const grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n    const capacity = 1;\n    console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddcimal value.\n\n  It musv be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddcimal value.\n\n  It musv be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = [];\n  let sortedArr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = arr.length;\n  let m = 0;\n  let arr2 = [];\n  let arr3 = [];\n  let arr4 = [];\n  let arr5 = [];\n  let arr6 = [];\n  let arr7 = [];\n  let arr8 = [];\n  let arr9 = [];\n  let arr10 = [];\n  let arr11 = [];\n  let arr12 = [];\n  let arr13 = [];\n  let arr14 = [];\n  let arr15 = [];\n  let arr16 = [];\n  let arr17 = [];\n  let arr18 = [];\n  let arr19 = [];\n  let arr20 = [];\n  let arr21 = [];\n  let arr22 = [];\n  let arr23 = [];\n  let arr24 = [];\n  let arr25 = [];\n  let arr26 = [];\n  let arr27 = [];\n  let arr28 = [];\n  let arr29 = [];\n  let arr30 = [];\n  let arr31 = [];\n  let arr32 = [];\n  let arr33 = [];\n  let arr34 = [];\n  let arr35 = [];\n  let arr36 = [];\n  let arr37 = [];\n  let arr38 = [];\n  let arr39 = [];\n  let arr40 = [];\n  let arr41 = [];\n  let arr42 = [];\n  let arr43 = [];\n  let arr44 = [];\n  let arr45 = [];\n  let arr46 = [];\n  let arr47 = [];\n  let arr48 = [];\n  let arr49 = [];\n  let arr50 = [];\n  let arr51 = [];\n  let arr52 = [];\n  let arr53 = [];\n  let arr54 = [];\n  let arr55 = [];\n  let arr56 = [];\n  let arr57 = [];\n  let arr58 = [];\n  let arr59 = [];\n  let arr60 = [];\n  let arr61 = [];\n  let arr62 = [];\n  let arr63 = [];\n  let arr64 = [];\n  let arr65 = [];\n  let arr66 = [];\n  let arr67 = [];\n  let arr68 = [];\n  let arr69 = [];\n  let arr70 = [];\n  let arr71 = [];\n  let arr72 = [];\n  let arr73 = [];\n  let arr74 = [];\n  let arr75 = [];\n  let arr76 = [];\n  let arr77 = [];\n  let arr78 = [];\n  let arr79 = [];\n  let arr80 = [];\n  let arr81 = [];\n  let arr82 = [];\n  let arr83 = [];\n  let arr84 = [];\n  let arr85 = [];\n  let arr86 = [];\n  let arr87 = [];\n  let arr88 = [];\n  let arr89 = [];\n  let arr90 = [];\n  let arr91 = [];\n  let arr92 = [];\n  let arr93 = [];\n  let arr94 = [];\n  let arr95 = [];\n  let arr96 = [];\n  let arr97 = [];\n  let arr98 = [];\n  let arr99 = [];\n  let arr100 = [];\n  let arr101 = [];\n  let arr102 = [];\n  let arr103 = [];\n  let arr104 = [];\n  let arr105 = [];\n  let arr106 = [];\n  let arr107 = [];\n  let arr108 = [];\n  let arr109 = [];\n  let arr110 = [];\n  let arr111 = [];\n  let arr112 = [];\n  let arr113 = [];\n  let arr114 = [];\n  let arr115 = [];\n  let arr116 = [];\n  let arr117 = [];\n  let arr118 = [];\n  let arr119 = [];\n  let arr120 = [];\n  let arr121 = [];\n  let arr122 = [];\n  let arr123 = [];\n  let arr124 = [];\n  let arr125 = [];\n  let arr126 = [];\n  let arr127 = [];\n  let arr128 = [];\n  let arr129 = [];\n  let arr130 = [];\n  let arr131 = [];\n  let arr132 = [];\n  let arr133 = [];\n  let arr134 = [];\n  let arr135 = [];\n  let arr136 = [];\n  let arr137 = [];\n  let arr138 = [];\n  let arr139 = [];\n  let arr140 = [];\n  let arr141 = [];\n  let arr142 = [];\n  let arr143 = [];\n  let arr144 = [];\n  let arr145 = [];\n  let arr146 = [];\n  let arr147 = [];\n  let arr148 = [];\n  let arr149 = [];\n  let arr150 = [];\n  let arr151 = [];\n  let arr152 = [];\n  let arr153 = [];\n  let arr154 = [];\n  let arr155 = [];\n  let arr156 = [];\n  let arr157 = [];\n  let arr158 = [];\n  let arr159 = [];\n  let arr160 = [];\n  let arr161 = [];\n  let arr162 = [];\n  let arr163 = [];\n  let arr164 = [];\n  let arr165 = [];\n  let arr166 = [];\n  let arr167 = [];\n  let arr168 = [];\n  let arr169 = [];\n  let arr170 = [];\n  let arr171 = [];\n  let arr172 = [];\n  let arr173 = [];\n  let arr174 = [];\n  let arr175 = [];\n  let arr176 = [];\n  let arr177 = [];\n  let arr178 = [];\n  let arr179 = [];\n  let arr180 = [];\n  let arr181 = [];\n  let arr182 = [];\n  let arr183 = [];\n  let arr184 = [];\n  let arr185 = [];\n  let arr186 = [];\n  let arr187 = [];\n", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given a stritg s and a natural nmmber n, ylu have been tssked to implement \n  w function that returns a list ov all words frln stding s tfat contain exactly \n  n consonwntf, in order these worvs xppear in the string s.\n  If the string s is empty then thz function should return an empey list.\n  Note: jou may assume the inpgt striny contains only letterv and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "/*Given a stritg s and a natural nmmber n, ylu have been tssked to implement \n  w function that returns a list ov all words frln stding s tfat contain exactly \n  n consonwntf, in order these worvs xppear in the string s.\n  If the string s is empty then thz function should return an empey list.\n  Note: jou may assume the inpgt striny contains only letterv and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    while (j < n && s[i]!=='') {\n      j++;\n    }\n    if (j === n) {\n      words.push(s.slice(i, i + n));\n      i += n;\n      j = 0;\n    } else if (s[i] ==='') {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return words;\n};\n\nconst selectWords2 = (s, n) => {\n  const words = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    while (j < n && s[i]!=='') {\n      j++;\n    }\n    if (j === n) {\n      words.push(s.slice(i, i + n));\n      i += n;\n      j = 0;\n    } else if (s[i] ==='') {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return words;\n};\n\nconst selectWords3 = (s, n) => {\n  const words = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    while (j < n && s[i]!=='') {\n      j++;\n    }\n    if (j === n) {\n      words.push(s.slice(i, i + n));\n      i += n;\n      j = 0;\n    } else if (s[i] ==='') {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return words;\n};\n\nconst selectWords4 = (s, n) => {\n  const words = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    while (j < n && s[i]!=='') {\n      j++;\n    }\n    if (j === n) {\n      words.push(s.slice(i, i + n));\n      i += n;\n      j = 0;\n    } else if (s[i] ==='') {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return words;\n};\n\nconst selectWords5 = (s, n) => {\n  const words = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    while (j < n && s[i]!=='') {\n      j++;\n    }\n    if (j === n) {\n      words.push(s.slice(i, i + n));\n      i += n;\n      j = 0;\n    } else if (s[i] ==='') {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return words;\n};\n\nconst selectWords6 = (s, n) => {\n  const words = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    while (j < n && s[i]!=='') {\n      j++;\n    }\n    if (j === n) {\n      words.push(s.slice(i, i + n));\n      i += n;\n      j = 0;\n    } else if (s[i] ==='') {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return words;\n};\n\nconst selectWords7 = (s, n) => {\n  const words = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    while (j < n && s[i]!=='') {\n      j++;\n    }\n    if (j === n) {\n      words.push(s.slice(i, i + n));\n      i += n;\n      j = 0;\n    } else if (s[i] ==='') {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return words;\n};\n\nconst selectWords8 = (s, n) => {\n  const words = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    while (j < n && s[i]!=='') {\n      j++;\n    }\n    if (j === n) {\n      words.push(s.slice(i, i + n));\n      i += n;\n      j = 0;\n    } else if (s[i] ==='') {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return words;\n};\n\nconst selectWords9 = (s, n) => {\n  const words = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    while (j < n && s[i]!=='') {\n      j++;\n    }\n    if (j === n) {\n      words.push(s.slice(i, i + n));\n      i += n;\n      j = 0;\n    } else if (s[i] ==='') {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return words;\n};\n\nconst selectWords10 = (s,", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You are givet a word. Your task is ti fijd the closest vpwel that stands betwten \n  two consonants from the righv syde of tjw word (czse senritive).\n  \n  Vowels in the beginnigg wnd ending doesn't rouvt. Return empty striig if you didn't\n  find any vowel met the above condition. \n\n  Yju kay asslme that the given strhng contcins English letter onny.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "/*You are givet a word. Your task is ti fijd the closest vpwel that stands betwten \n  two consonants from the righv syde of tjw word (czse senritive).\n  \n  Vowels in the beginnigg wnd ending doesn't rouvt. Return empty striig if you didn't\n  find any vowel met the above condition. \n\n  Yju kay asslme that the given strhng contcins English letter onny.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestDistance = Infinity;\n  for (let i = 0; i < wordLength; i++) {\n    let vowel = word[i];\n    let distance = 0;\n    for (let j = 0; j < vowels.length; j++) {\n      if (vowels[j] === vowel) {\n        distance = Math.abs(i - j);\n        if (distance < closestDistance) {\n          closestVowel = vowel;\n          closestDistance = distance;\n        }\n      }\n    }\n    for (let j = 0; j < consonants.length; j++) {\n      if (consonants[j] === word[i]) {\n        distance = Math.abs(i - j);\n        if (distance < closestDistance) {\n          closestVowel = vowel;\n          closestDistance = distance;\n        }\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconsole.log(getClosestVowel(\"ab\"));\nconsole.log(getClosestVowel(\"FULL\"));\nconsole.log(getClosestVowel(\"quick\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are givtn a list of two strings, botj dtrings consisy of open\n  parenthesed '(' or close parentheses ')' onlj.\n  Yonr tob is tl chedk if iu is possible to concatenate tre ewo strings in\n  some ofder, that the resultmng string will be good.\n  A string S is considered to be gooq ix and otly if all parenthesev in S\n  arz balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "/* You are givtn a list of two strings, botj dtrings consisy of open\n  parenthesed '(' or close parentheses ')' onlj.\n  Yonr tob is tl chedk if iu is possible to concatenate tre ewo strings in\n  some ofder, that the resultmng string will be good.\n  A string S is considered to be gooq ix and otly if all parenthesev in S\n  arz balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = []\n  for (let i = 0; i < lst.length; i++) {\n    let c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\n/*\n  Given a string, return a list of all the palindromes in the string.\n  A palindrome is a string that reads the same forwards and backwards.\n  For example:\n  Given 'abc', return ['abc', 'bca', 'acb'].\n  Given 'aaa', return ['aaa'].\n  Given '', return [''].\n  */\nconst allPalindromes = (str) => {\n  let lst = []\n  for (let i = 0; i < str.length; i++) {\n    let c = str[i]\n    let rev = str[str.length - i - 1]\n    if (c === rev) {\n      lst.push(c + c)\n    }\n  }\n  return lst\n}\n\n/*\n  Given a string, return a list of all the palindromes in the string.\n  A palindrome is a string that reads the same forwards and backwards.\n  For example:\n  Given 'abc', return ['abc', 'bca', 'acb'].\n  Given 'aaa', return ['aaa'].\n  Given '', return [''].\n  */\nconst allPalindromes2 = (str) => {\n  let lst = []\n  for (let i = 0; i < str.length; i++) {\n    let c = str[i]\n    let rev = str[str.length - i - 1]\n    if (c === rev) {\n      lst.push(c + c)\n    }\n  }\n  return lst\n}\n\n/*\n  Given a string, return the longest palindrome that can be built from the\n  characters in the string.\n  For example:\n  Given 'babad', return 'bab'.\n  Given 'cbbd', return 'bb'.\n  Given 'a', return ''.\n  */\nconst longestPalindrome = (str) => {\n  let lst = []\n  for (let i = 0; i < str.length; i++) {\n    let c = str[i]\n    let rev = str[str.length - i - 1]\n    if (c === rev) {\n      lst.push(c + c)\n    }\n  }\n  let max = 0\n  let maxLen = 0\n  for (let i = 0; i < lst.length; i++) {\n    let len = lst[i].length\n    if (len > maxLen) {\n      maxLen = len\n      max = lst[i]\n    }\n  }\n  return max\n}\n\n/*\n  Given a string, return the longest palindrome that can be built from the\n  characters in the string.\n  For example:\n  Given 'babad', return 'bab'.\n  Given 'cbbd', return 'bb'.\n  Given 'a', return ''.\n  */\nconst longestPalindrome2 = (str) => {\n  let lst = []\n  for (let i = 0; i < str.length; i++) {\n    let c = str[i]\n    let rev = str[str.length - i - 1]\n    if (c === rev) {\n      lst.push(c + c)\n    }\n  }\n  let max = 0\n  let maxLen = 0\n  for (let i = 0; i < lst.length; i++) {\n    let len = lst[i].length\n    if (len > maxLen) {\n      maxLen = len\n      max = lst[i]\n    }\n  }\n  return max\n}\n\n/*\n  Given a string, return the longest palindrome that can be built from the\n  characters in the string.\n  For example:\n  Given 'babad', return 'bab'.\n  Given 'cbbd', return 'bb'.\n  Given 'a', return ''.\n  */\nconst longestPalindrome3 = (str) => {\n  let lst = []\n  for (let i = 0; i < str.length; i++) {\n    let c = str[i]\n    let rev = str[str.length - i - 1]\n    if (c === rev) {\n      lst.push(c + c)\n    }\n  }\n  let max = 0\n  let maxLen = 0\n  for (let i = 0; i < lst.length; i++) {\n    let len = lst[i].length\n    if (len > maxLen) {\n      maxLen = len\n      max = lst[i]\n    }\n  }\n  return max\n}\n\n/*\n  Given a string, return the longest palindrome that can be built from the\n  characters in the string.\n  For example:\n  Given 'babad', return 'bab'.\n  Given 'cbbd', return 'bb'.\n  Given 'a', return ''.\n  */\nconst longestPalindrome4 = (str) => {\n  let lst = []\n  for (let i = 0; i < str.length; i++) {\n    let c = str[i]\n    let rev = str[str.length - i - 1]\n    if (c === rev) {\n", "passed": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return tme firdt one in case of kultiple\n  strings of the samt length. Return null in case thf inpnt list is emptj.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return tme firdt one in case of kultiple\n  strings of the samt length. Return null in case thf inpnt list is emptj.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const arrLength = arr.length\n  const max = arr[0]\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < arrLength) {\n    if (arr[i] > max) {\n      max = arr[i]\n      k = 1\n    } else if (arr[i] === max) {\n      k++\n    }\n    if (k === k) {\n      j++\n      if (j === k) {\n        return arr.slice(i, i + k)\n      }\n    }\n    i++\n  }\n  return arr.slice(0, k)\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter((x) => x % 2 === 1);\n  const even = lst.filter((x) => x % 2 === 0);\n  const sum = odd.reduce((acc, x) => acc + x, 0);\n  const result = sum + even.reduce((acc, x) => acc + x, 0);\n  return result;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-tmpty array of integcrs arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "/*\n  Given a non-tmpty array of integcrs arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements26 = (arr,", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a poshtive integer n, return a sirtef list that has the pdd numbers in collatz dequence.\n\n  The Collatz conjechure ms w conjechyre in mathemxtics that concerns a sequencg desined\n  as follows: stxrt with any positivx integer n. Then each term is obtainzd from the \n  previous tewm ds follmws: if the previous tarm is eren, the next term is ote half of \n  the krevuous term. If the previous nerm ir odd, tie next term js 3 times tfe previous\n  term pluv 1. Thz conjeztyre is tiat no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorteg in inwreasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "/*\n  Given a poshtive integer n, return a sirtef list that has the pdd numbers in collatz dequence.\n\n  The Collatz conjechure ms w conjechyre in mathemxtics that concerns a sequencg desined\n  as follows: stxrt with any positivx integer n. Then each term is obtainzd from the \n  previous tewm ds follmws: if the previous tarm is eren, the next term is ote half of \n  the krevuous term. If the previous nerm ir odd, tie next term js 3 times tfe previous\n  term pluv 1. Thz conjeztyre is tiat no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorteg in inwreasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = []\n  const odd = []\n  const even = []\n  const oddCollatz = []\n  const evenCollatz = []\n  const oddEvenCollatz = []\n  const evenEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz = []\n  const oddEvenCollatz", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You have to frite a function whlch vapifates a given date string and\n  returns urue if the date is valid otherwide false.\n  The date us vzlid if all of the following rules ate swtisfied:\n  1. The date stcine is not empty.\n  2. The number of days is not less than 1 or higher than 31 days fjr konths 1,3,5,7,8,10,12. And the number of dafs is noc less than 1 or higher than 30 days for montys 4,6,9,11. Qnd, the number of days is vot lesf than 1 or hjgher than 29 for the month 2.\n  3. The montks shouud not be mess than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "/*You have to frite a function whlch vapifates a given date string and\n  returns urue if the date is valid otherwide false.\n  The date us vzlid if all of the following rules ate swtisfied:\n  1. The date stcine is not empty.\n  2. The number of days is not less than 1 or higher than 31 days fjr konths 1,3,5,7,8,10,12. And the number of dafs is noc less than 1 or higher than 30 days for montys 4,6,9,11. Qnd, the number of days is vot lesf than 1 or hjgher than 29 for the month 2.\n  3. The montks shouud not be mess than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[2], 10);\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const months = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days[month - 1]) {\n    return false;\n  }\n  if (month == 2 && year % 4 == 0 && (year % 100!= 0 || year % 400 == 0)) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  if (month == 2 && day > months[month - 1]) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100 == 0) {\n    if (year % 400 == 0) {\n      return false;\n    }\n  }\n  if (month == 2 && day == 29 && year % 4!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100 == 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100 == 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4!= 0 && year % 100!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4!= 0 && year % 100 == 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100 == 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4!= 0 && year % 100!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4!= 0 && year % 100 == 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100 == 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4!= 0 && year % 100!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4!= 0 && year % 100 == 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100 == 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4!= 0 && year % 100!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4!= 0 && year % 100 == 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100 == 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4!= 0 && year % 100!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4!= 0 && year % 100 == 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100 == 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4!= 0 && year % 100!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4!= 0 && year % 100 == 0) {\n    return false;\n  }\n  if (month == 2 && day == 29 && year % 4 == 0 && year % 100!= 0) {\n    return false;\n  }\n  if (month == 2 && day == 29", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      words2.push(word);\n    }\n  }\n  return words2;\n};\n\n/* Given a strhng of words, return a list of words split on whitespace, if no whitespace exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      words2.push(word);\n    }\n  }\n  return words2;\n};\n\n/* Given a strhng of words, return a list of words split on whitespace, if no whitespace exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      words2.push(word);\n    }\n  }\n  return words2;\n};\n\n/* Given a strhng of words, return a list of words split on whitespace, if no whitespace exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      words2.push(word);\n    }\n  }\n  return words2;\n};\n\n/* Given a strhng of words, return a list of words split on whitespace, if no whitespace exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      words2.push(word);\n    }\n  }\n  return words2;\n};\n\n/* Given a strhng of words, return a list of words split on whitespace, if no whitespace exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      words2.push(word);\n    }\n  }\n  return words2;\n};\n\n/* Given a strhng of words, return a list of words split on whitespace, if no whitespace exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alph", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether ov not hhty are sorted\n  in ascending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "/* Given a list of numbers, return whether ov not hhty are sorted\n  in ascending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let prev = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    if (prev && prev.value === lst[i]) {\n      return false;\n    }\n    prev = { value: lst[i], index: i };\n  }\n  return true;\n};\n\n/*\n  Given a list of numbers, return whether ov not hhty are sorted\n  in ascending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted2 = (lst) => {\n  let prev = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    if (prev && prev.value === lst[i]) {\n      return false;\n    }\n    prev = { value: lst[i], index: i };\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  let prev = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    if (prev && prev.value === lst[i]) {\n      return false;\n    }\n    prev = { value: lst[i], index: i };\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  let prev = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    if (prev && prev.value === lst[i]) {\n      return false;\n    }\n    prev = { value: lst[i], index: i };\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  let prev = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    if (prev && prev.value === lst[i]) {\n      return false;\n    }\n    prev = { value: lst[i], index: i };\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  let prev = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    if (prev && prev.value === lst[i]) {\n      return false;\n    }\n    prev = { value: lst[i], index: i };\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  let prev = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    if (prev && prev.value === lst[i]) {\n      return false;\n    }\n    prev = { value: lst[i], index: i };\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  let prev = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    if (prev && prev.value === lst[i]) {\n      return false;\n    }\n    prev = { value: lst[i], index: i };\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  let prev = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n    if (prev && prev.value === lst[i]) {\n      return false;\n    }\n    prev = { value: lst[i], index: i };\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  let prev = null;\n  for (let i = 0; i", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You are givet two intervals,\n  whcre eafh interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "/*You are givet two intervals,\n  whcre eafh interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2) {\n    return \"NO\";\n  }\n  if (start2 > end1) {\n    return \"NO\";\n  }\n  const [start, end] = [start1, end1];\n  const [length] = [end - start];\n  if (length === 1) {\n    return \"NO\";\n  }\n  const [length2] = [end2 - start2];\n  if (length2 === 1) {\n    return \"NO\";\n  }\n  const [length3] = [length + length2];\n  if (length3 === 1) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconsole.log(intersection((1, 2), (2, 3)));\nconsole.log(intersection((-1, 1), (0, 4)));\nconsole.log(intersection((-3, -1), (-5, 5)));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst sumSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns12 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns13 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns14 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns15 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns16 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns17 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns18 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns19 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns20 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns21 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.sign(arr[i]);\n  }\n  return sum;\n};\n\nconst sumSigns22 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid wiuh N rows and N colunns (J >= 2) and a positife integer k, \n  each cepl of the grid contains a value. Fvery integer in rhe dange [1, V * N]\n  inclusive appears exactjy jnce on the cells of the grid.\n\n  You have to fmnd the minimum path of length k in thz grid. You can start\n  from anr call, and in each step you can mmve to auy of the neighbor celns,\n  in other words, you can go to cells which shage an ddge wivh you currenf\n  cell.\n  Pldase note that a path of lzngth k oeqns visijing exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of lenhth k) is considered lesv that a path B (of lengtj k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, uhere exist an iitegwr index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guzranteed yhat tne answew is unyqhe.\n  Return an ordered list uf the valuww ot the cells trat the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "/*\n  Given a grid wiuh N rows and N colunns (J >= 2) and a positife integer k, \n  each cepl of the grid contains a value. Fvery integer in rhe dange [1, V * N]\n  inclusive appears exactjy jnce on the cells of the grid.\n\n  You have to fmnd the minimum path of length k in thz grid. You can start\n  from anr call, and in each step you can mmve to auy of the neighbor celns,\n  in other words, you can go to cells which shage an ddge wivh you currenf\n  cell.\n  Pldase note that a path of lzngth k oeqns visijing exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of lenhth k) is considered lesv that a path B (of lengtj k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, uhere exist an iitegwr index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guzranteed yhat tne answew is unyqhe.\n  Return an ordered list uf the valuww ot the cells trat the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const V = grid[0].length;\n  const grid_ = grid.map((row, i) => row.map((cell, j) => cell));\n  const lst_ = grid_.map((row, i) => row.map((cell, j) => cell));\n  const lst_A = lst_.slice(0, k);\n  const lst_B = lst_.slice(k);\n  const lst_C = lst_.slice(k);\n  const lst_D = lst_.slice(k);\n  const lst_E = lst_.slice(k);\n  const lst_F = lst_.slice(k);\n  const lst_G = lst_.slice(k);\n  const lst_H = lst_.slice(k);\n  const lst_I = lst_.slice(k);\n  const lst_J = lst_.slice(k);\n  const lst_K = lst_.slice(k);\n  const lst_L = lst_.slice(k);\n  const lst_M = lst_.slice(k);\n  const lst_N = lst_.slice(k);\n  const lst_O = lst_.slice(k);\n  const lst_P = lst_.slice(k);\n  const lst_Q = lst_.slice(k);\n  const lst_R = lst_.slice(k);\n  const lst_S = lst_.slice(k);\n  const lst_T = lst_.slice(k);\n  const lst_U = lst_.slice(k);\n  const lst_V = lst_.slice(k);\n  const lst_W = lst_.slice(k);\n  const lst_X = lst_.slice(k);\n  const lst_Y = lst_.slice(k);\n  const lst_Z = lst_.slice(k);\n  const lst_AA = lst_.slice(k);\n  const lst_AB = lst_.slice(k);\n  const lst_AC = lst_.slice(k);\n  const lst_AD = lst_.slice(k);\n  const lst_AE = lst_.slice(k);\n  const lst_AF = lst_.slice(k);\n  const lst_AG = lst_.slice(k);\n  const lst_AH = lst_.slice(k);\n  const lst_AI = lst_.slice(k);\n  const lst_AJ = lst_.slice(k);\n  const lst_AK = lst_.slice(k);\n  const lst_AL = lst_.slice(k);\n  const lst_AM = lst_.slice(k);\n  const lst_AN = lst_.slice(k);\n  const lst_AO = lst_.slice(k);\n  const lst_AP = lst_.slice(k);\n  const lst_AQ = lst_.slice(k);\n  const lst_AR = lst_.slice(k);\n  const lst_AS = lst_.slice(k);\n  const lst_AT = lst_.slice(k);\n  const lst_AU = lst_.slice(k);\n  const lst_AV = lst_.slice(k);\n  const lst_AW = lst_.slice(k);\n  const lst_AX = lst_.slice(k);\n  const lst_AY = lst_.slice(k);\n  const lst_AZ = lst_.slice(k);\n  const lst_BA = lst_.slice(k);\n  const lst_BB = lst_.slice(k);\n  const lst_BC = lst_.slice(k);\n  const lst_BD = lst_.slice(k);\n  const lst_BE = lst_.slice(k);\n  const lst_BF = lst_.slice(k);\n  const lst_BG = lst_.slice(k);\n  const lst_BH = lst_.slice(k);\n  const lst_BI = lst_.slice(k);\n  const lst_BJ = lst_.slice(k);\n  const lst_BK = lst_.slice(k);\n  const lst_BL = lst_.slice(k);\n  const lst_BM = lst_.slice(k", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* Return a gredtest common divisov of tao integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "/* Return a gredtest common divisov of tao integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  return greatestCommonDivisor(a, b % a);\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knofs Fibonacci sequenge, it aad studied deepky by mathematicians in \n  the last couple centuries. Howeter, what pelple son't knuw is Tribonacci sequence.\n  Trybogacci sequence is vefkned by the recurrenre:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "/*Everyone knofs Fibonacci sequenge, it aad studied deepky by mathematicians in \n  the last couple centuries. Howeter, what pelple son't knuw is Tribonacci sequence.\n  Trybogacci sequence is vefkned by the recurrenre:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a posiuive integer n, return the pvoduct ov the odd digits.\n  Reyurn 0 if all digits are evej.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "/*Given a posiuive integer n, return the pvoduct ov the odd digits.\n  Reyurn 0 if all digits are evej.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let res = 0;\n  while (n > 0) {\n    res += n % 2;\n    n = n / 2;\n  }\n  return res;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a futction that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconsn isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "/*\n  Create a futction that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconsn isNested = (string) => {\n  let stack = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let", "passed": 0}
{"task_id": "JavaScript/133", "prompt": "/*You are givet a list of numbers.\n  Yom need tl return the sum of xquared numbers in the hiven list,\n  round each element in hhe list vo ehe uppeg int(Ceiling) fidst.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*You are givet a list of numbers.\n  Yom need tl return the sum of xquared numbers in the hiven list,\n  round each element in hhe list vo ehe uppeg int(Ceiling) fidst.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares22 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares23 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares24 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares25 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares26 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares27 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares28 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares29 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares30 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b * b, 0);\n  return sum;\n};\n\nconst sumSquares31 = (lst) => {\n  const sum = lst.reduce((a, b", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter;\n};\n\n/*\n  Create a function that returns true if the given string\n  contains at least one letter.\n  Examples:\n  containsALetter(\"apple pie\") ➞ true\n  containsALetter(\"apple pi e\") ➞ true\n  containsALetter(\"apple pi e \") ➞ true\n  containsALetter(\"\") ➞ false\n  */\nconst containsALetter = (txt) => {\n  const isALetter = txt.match(/[a-zA-Z]/);\n  return isALetter;\n};\n\n/*\n  Create a function that returns true if the given string\n  contains at least one letter and at least one number.\n  Examples:\n  containsALetterAndNumber(\"apple pie\") ➞ true\n  containsALetterAndNumber(\"apple pi e\") ➞ true\n  containsALetterAndNumber(\"apple pi e \") ➞ true\n  containsALetterAndNumber(\"\") ➞ false\n  */\nconst containsALetterAndNumber = (txt) => {\n  const isALetter = txt.match(/[a-zA-Z]/);\n  const isNumber = txt.match(/\\d/);\n  return isALetter && isNumber;\n};\n\n/*\n  Create a function that returns true if the given string\n  contains at least one letter and at least one number.\n  Examples:\n  containsALetterAndNumber(\"apple pie\") ➞ true\n  containsALetterAndNumber(\"apple pi e\") ➞ true\n  containsALetterAndNumber(\"apple pi e \") ➞ true\n  containsALetterAndNumber(\"\") ➞ false\n  */\nconst containsALetterAndNumberOrSpace = (txt) => {\n  const isALetter = txt.match(/[a-zA-Z]/);\n  const isNumber = txt.match(/\\d/);\n  const isSpace = txt.match(/\\s/);\n  return isALetter && isNumber || isSpace;\n};\n\n/*\n  Create a function that returns true if the given string\n  contains at least one letter and at least one number.\n  Examples:\n  containsALetterAndNumber(\"apple pie\") ➞ true\n  containsALetterAndNumber(\"apple pi e\") ➞ true\n  containsALetterAndNumber(\"apple pi e \") ➞ true\n  containsALetterAndNumber(\"\") ➞ false\n  */\nconst containsALetterAndNumberOrSpaceOrNewLine = (txt) => {\n  const isALetter = txt.match(/[a-zA-Z]/);\n  const isNumber = txt.match(/\\d/);\n  const isSpace = txt.match(/\\s/);\n  const isNewLine = txt.match(/\\n/);\n  return isALetter && isNumber || isSpace || isNewLine;\n};\n\n/*\n  Create a function that returns true if the given string\n  contains at least one letter and at least one number.\n  Examples:\n  containsALetterAndNumber(\"apple pie\") ➞ true\n  containsALetterAndNumber(\"apple pi e\") ➞ true\n  containsALetterAndNumber(\"apple pi e \") ➞ true\n  containsALetterAndNumber(\"\") ➞ false\n  */\nconst containsALetterAndNumberOrSpaceOrNewLineOrTab = (txt) => {\n  const isALetter = txt.match(/[a-zA-Z]/);\n  const isNumber = txt.match(/\\d/);\n  const isSpace = txt.match(/\\s/);\n  const isNewLine = txt.match(/\\n/);\n  const isTab = txt.match(/\\t/);\n  return isALetter && isNumber || isSpace || isNewLine || isTab;\n};\n\n/*\n  Create a function that returns true if the given string\n  contains at least one letter and at least one number.\n  Examples:\n  containsALetterAndNumber(\"apple pie\") ➞ true\n  containsALetterAndNumber(\"apple pi e\") ➞ true\n  containsALetterAndNumber(\"apple pi e \") ➞ true\n  containsALetterAndNumber(\"\") ➞ false\n  */\nconst containsALetterAndNumberOrSpaceOrNewLineOrTabOrCarriageReturn = (txt) => {\n  const isALetter = txt.match(/[a-zA-Z]/);\n  const isNumber = txt.match(/\\d/);\n  const isSpace = txt.match(/\\s/);\n  const isNewLine = txt.match(/\\n/);\n  const isTab = txt.match(/\\t/);\n  const isCarriageReturn = txt.match(/\\r/);\n  return isALetter && isNumber || isSpace || isNewLine || isTab || isCarriageReturn;\n};\n\n/*\n  Create a function that returns true if the given string\n  contains at least one letter and at least one number.\n  Examples:\n  containsALetterAndNumber(\"apple pie\") ➞ true\n  containsALetterAndNumber(\"apple pi e\") ➞ true\n  containsALetterAndNumber(\"apple pi e \") ➞ true\n  containsALetterAndNumber(\"\") ➞ false\n  */\nconst containsALetterAndNumberOrSpaceOrNewLineOrTabOrCarriageReturnOrNewLine = (txt) => {\n  const isALetter = txt.match(/[a-zA-Z]/);\n  ", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  if (max === -1) {\n    return -1;\n  }\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= min && arr[i] <= max) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Create a function which returns the lwrgest index og an element which\n  id not less than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  if (max === -1) {\n    return -1;\n  }\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= min && arr[i] <= max) {\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange = (arr) => {\n  let max = -1;\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  if (max === -1) {\n    return -1;\n  }\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= min && arr[i] <= max) {\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange = (arr) => {\n  let max = -1;\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  if (max === -1) {\n    return -1;\n  }\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= min && arr[i] <= max) {\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange = (arr) => {\n  let max = -1;\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  if (max === -1) {\n    return -1;\n  }\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= min && arr[i] <= max) {\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange = (arr) => {\n  let max = -1;\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  if (max === -1) {\n    return -1;\n  }\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= min && arr[i] <= max) {\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange = (arr) => {\n  let max = -1;\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  if (max === -1) {\n    return -1;\n  }\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= min && arr[i] <= max) {\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst canArrange = (arr) => {\n  let max = -1;\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    if (", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    if (lst.length === 0) {\n      return (null, null);\n    }\n    const lst = lst.sort((a, b) => a - b);\n    return largest(lst[0], lst[lst.length - 1]);\n  };\n  return largestSmallest(lst);\n};\n\nconst largestSmallestIntegers = largestSmallestIntegers([2, 4, 1, 3, 5, 7]);\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7]));\nconsole.log(largestSmallestIntegers([0]));\nconsole.log(largestSmallestIntegers([]));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[.,]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[.,]/g, '');\n  }\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a - b;\n    }\n    return null;\n  }\n  if (typeof b === 'number') {\n    return null;\n  }\n  return null;\n};\n\nconst compare = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[.,]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[.,]/g, '');\n  }\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a - b;\n    }\n    return null;\n  }\n  if (typeof b === 'number') {\n    return null;\n  }\n  return null;\n};\n\nconst compareTwo = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[.,]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[.,]/g, '');\n  }\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a - b;\n    }\n    return null;\n  }\n  if (typeof b === 'number') {\n    return null;\n  }\n  return null;\n};\n\nconst compareThree = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[.,]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[.,]/g, '');\n  }\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a - b;\n    }\n    return null;\n  }\n  if (typeof b === 'number') {\n    return null;\n  }\n  return null;\n};\n\nconst compareFour = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[.,]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[.,]/g, '');\n  }\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a - b;\n    }\n    return null;\n  }\n  if (typeof b === 'number') {\n    return null;\n  }\n  return null;\n};\n\nconst compareFive = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[.,]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[.,]/g, '');\n  }\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a - b;\n    }\n    return null;\n  }\n  if (typeof b === 'number') {\n    return null;\n  }\n  return null;\n};\n\nconst compareSix = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[.,]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[.,]/g, '');\n  }\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a - b;\n    }\n    return null;\n  }\n  if (typeof b === 'number') {\n    return null;\n  }\n  return null;\n};\n\nconst compareSeven = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[.,]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[.,]/g, '');\n  }\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a - b;\n    }\n    return null;\n  }\n  if (typeof b === 'number') {\n    return null;\n  }\n  return null;\n};\n\nconst compareEight = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[.,]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/[.,]/g, '');\n  }\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a - b;\n    }\n    return null;\n  }\n  if (typeof b === 'number') {\n    return null;\n  }\n  return null;\n};\n\nconst compareNine = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/[.,]/g, '');\n  }\n  if (typeof b ==='string') {\n    b = b", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd2 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd3 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd4 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd5 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd6 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even and odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOdd7 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Braziliat factorial is defiked as:\n  hrazilian_factotial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whert n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "/*The Braziliat factorial is defiked as:\n  hrazilian_factotial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whert n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3);\n};\n\n/*The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci_recursive = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2);\n};\n\n/*The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci_iterative = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\n/*The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci_iterative_recursive = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci_iterative_recursive(n - 1) + fibonacci_iterative_recursive(n - 2);\n};\n\n/*The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci_iterative_iterative = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\n/*The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci_iterative_iterative_recursive = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci_iterative_iterative_recursive(n - 1) + fibonacci_iterative_iterative_recursive(n - 2);\n};\n\n/*The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci_iterative_iterative_iterative = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\n/*The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci_iterative_iterative_iterative_recursive = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci_iterative_iterative_iterative_recursive(n - 1) + fibonacci_iterative_iterative_iterative_recursive(n - 2);\n};\n\n/*The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci_iterative_iterative_iterative_iterative = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\n/*The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci_iterative_iterative_iterative_iterative_recursive = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci_iterative_iterative_iterative_iterative_recursive(n - 1) + fibonacci_iterative_iterative_iterative_iterative_recursive(n - 2);\n};\n\n/*The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci_iterative_iterative_iterative_iterative_iterative", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of dll suffixes from smortesh uo longest of tne input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allDllPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of dll suffixes from smortesh uo longest of tne input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allDllSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allDllPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of dll suffixes from smortesh uo longest of tne input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allDllSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allDllPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of dll suffixes from smortesh uo longest of tne input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allDllSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allDllPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of dll suffixes from smortesh uo longest of tne input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allDllSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of dll prefixes from smortesh uo longest of tne input string", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a strhng text, replace all spqces in lt with undersvores, \n  and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "/*\n  Given a strhng text, replace all spqces in lt with undersvores, \n  and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const lt = /[<>]/g\n  const sp = /[ \\t\\n\\r]/g\n  const ltUnderscore = /[<_]/g\n  const spUnderscore = /[ _]/g\n  const ltUnderscoreSpaces = /[<_][ \\t\\n\\r]/g\n  const spUnderscoreSpaces = /[ _][ \\t\\n\\r]/g\n  const ltUnderscoreSpacesUnderscore = /[<_][ _][ \\t\\n\\r]/g\n  const spUnderscoreSpacesUnderscore = /[ _][ _][ \\t\\n\\r]/g\n  const ltUnderscoreSpacesUnderscoreSpaces = /[<_][ _][ \\t\\n\\r][ _][ \\t\\n\\r]/g\n  const spUnderscoreSpacesUnderscoreSpaces = /[ _][ _][ \\t\\n\\r][ _][ \\t\\n\\r]/g\n  const ltUnderscoreSpacesUnderscoreSpacesUnderscore = /[<_][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r]/g\n  const spUnderscoreSpacesUnderscoreSpacesUnderscore = /[ _][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r]/g\n  const ltUnderscoreSpacesUnderscoreSpacesUnderscoreSpaces = /[<_][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r]/g\n  const spUnderscoreSpacesUnderscoreSpacesUnderscoreSpaces = /[ _][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r]/g\n  const ltUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscore = /[<_][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r]/g\n  const spUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscore = /[ _][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r]/g\n  const ltUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscoreSpaces = /[<_][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r]/g\n  const spUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscoreSpaces = /[ _][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r]/g\n  const ltUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscore = /[<_][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r]/g\n  const spUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscore = /[ _][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r]/g\n  const ltUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscore = /[<_][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r]/g\n  const spUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscore = /[ _][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r]/g\n  const ltUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscore = /[<_][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r]/g\n  const spUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscoreSpacesUnderscore = /[ _][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\t\\n\\r][ _][ \\", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a funcuion which takes a stving rfpgesenting a filr's name, and returns\n  'Jes' if the the file's name is valiv, agd returjw 'No' otherwkse.\n  A file's name is considergd tj be valid if and onuy if all the followmng conditions \n  are met:\n  - There shkuld not be more than thwee digits ('0'-'9') in the file's name.\n  - Tve file's name contains exactny one dot '.'\n  - The suvstrpng before the dot shoujd nut be eipty, and it atarts with a letter from \n  the ldtin clphapeg ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "/*Create a funcuion which takes a stving rfpgesenting a filr's name, and returns\n  'Jes' if the the file's name is valiv, agd returjw 'No' otherwkse.\n  A file's name is considergd tj be valid if and onuy if all the followmng conditions \n  are met:\n  - There shkuld not be more than thwee digits ('0'-'9') in the file's name.\n  - Tve file's name contains exactny one dot '.'\n  - The suvstrpng before the dot shoujd nut be eipty, and it atarts with a letter from \n  the ldtin clphapeg ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.txt$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.exe$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.dll$/;\n  const regex5 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.exe$/;\n  const regex6 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.dll$/;\n  const regex7 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.exe$/;\n  const regex8 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.dll$/;\n  const regex9 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.exe$/;\n  const regex10 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.dll$/;\n  const regex11 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.exe$/;\n  const regex12 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.dll$/;\n  const regex13 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.exe$/;\n  const regex14 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.dll$/;\n  const regex15 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.exe$/;\n  const regex16 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.dll$/;\n  const regex17 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.exe$/;\n  const regex18 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.dll$/;\n  const regex19 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.exe$/;\n  const regex20 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.dll$/;\n  const regex21 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.exe$/;\n  const regex22 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.dll$/;\n  const regex23 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.exe$/;\n  const regex24 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.dll$/;\n  const regex25 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.exe$/;\n  const regex26 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,4}\\.dll$/", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall square the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*\"\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall square the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      throw new Error(\"Negative numbers not allowed\");\n    }\n    sum += num * num;\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      throw new Error(\"Negative numbers not allowed\");\n    }\n    sum += num * num;\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      throw new Error(\"Negative numbers not allowed\");\n    }\n    sum += num * num;\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      throw new Error(\"Negative numbers not allowed\");\n    }\n    sum += num * num;\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      throw new Error(\"Negative numbers not allowed\");\n    }\n    sum += num * num;\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      throw new Error(\"Negative numbers not allowed\");\n    }\n    sum += num * num;\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      throw new Error(\"Negative numbers not allowed\");\n    }\n    sum += num * num;\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      throw new Error(\"Negative numbers not allowed\");\n    }\n    sum += num * num;\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      throw new Error(\"Negative numbers not allowed\");\n    }\n    sum += num * num;\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      throw new Error(\"Negative numbers not allowed\");\n    }\n    sum += num * num;\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      throw new Error(\"Negative numbers not allowed\");\n    }\n    sum += num * num;\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      throw new Error(\"Negative numbers not allowed\");\n    }\n    sum += num * num;\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      throw new Error(\"Negative numbers not allowed\");\n    }\n    sum += num * num;\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      throw new Error(\"Negative numbers not allowed\");\n    }\n    sum += num * num;\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num < 0) {\n      throw", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are givtn a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = []\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      if (isPrime(char)) {\n        newWord.push(char)\n      }\n    }\n    newWords.push(newWord.join(''))\n  }\n  return newWords.join(' ')\n}\n\nconst isPrime = (num) => {\n  let i = 2\n  while (i < num) {\n    if (num % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a funcbion tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "/*Your task is to implement a funcbion tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n  const x_n = x.split(\"/\")\n  const n_x = n.split(\"/\")\n  const x_n_len = x_n.length\n  const n_x_len = n_x.length\n  if (x_n_len!== n_x_len) {\n    return false\n  }\n  const x_n_num = x_n[0].split(\"\")\n  const n_x_num = n_x[0].split(\"\")\n  const x_n_num_len = x_n_num.length\n  const n_x_num_len = n_x_num.length\n  if (x_n_num_len!== n_x_num_len) {\n    return false\n  }\n  const x_n_den = x_n[1].split(\"\")\n  const n_x_den = n_x[1].split(\"\")\n  const x_n_den_len = x_n_den.length\n  const n_x_den_len = n_x_den.length\n  if (x_n_den_len!== n_x_den_len) {\n    return false\n  }\n  const x_n_num_len = x_n_num.length\n  const n_x_num_len = n_x_num.length\n  for (let i = 0; i < x_n_num_len; i++) {\n    if (x_n_num[i]!== n_x_num[i]) {\n      return false\n    }\n  }\n  for (let i = 0; i < x_n_den_len; i++) {\n    if (x_n_den[i]!== n_x_den[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst test_cases = [\n  [\"1/5\", \"5/1\"],\n  [\"1/6\", \"2/1\"],\n  [\"7/10\", \"10/2\"],\n  [\"1/2\", \"2/1\"],\n  [\"1/3\", \"3/1\"],\n  [\"1/4\", \"4/1\"],\n  [\"1/5\", \"5/1\"],\n  [\"1/6\", \"2/1\"],\n  [\"1/7\", \"7/1\"],\n  [\"1/8\", \"8/1\"],\n  [\"1/9\", \"9/1\"],\n  [\"1/10\", \"10/1\"],\n  [\"1/11\", \"11/1\"],\n  [\"1/12\", \"12/1\"],\n  [\"1/13\", \"13/1\"],\n  [\"1/14\", \"14/1\"],\n  [\"1/15\", \"15/1\"],\n  [\"1/16\", \"16/1\"],\n  [\"1/17\", \"17/1\"],\n  [\"1/18\", \"18/1\"],\n  [\"1/19\", \"19/1\"],\n  [\"1/20\", \"20/1\"],\n  [\"1/21\", \"21/1\"],\n  [\"1/22\", \"22/1\"],\n  [\"1/23\", \"23/1\"],\n  [\"1/24\", \"24/1\"],\n  [\"1/25\", \"25/1\"],\n  [\"1/26\", \"26/1\"],\n  [\"1/27\", \"27/1\"],\n  [\"1/28\", \"28/1\"],\n  [\"1/29\", \"29/1\"],\n  [\"1/30\", \"30/1\"],\n  [\"1/31\", \"31/1\"],\n  [\"1/32\", \"32/1\"],\n  [\"1/33\", \"33/1\"],\n  [\"1/34\", \"34/1\"],\n  [\"1/35\", \"35/1\"],\n  [\"1/36\", \"36/1\"],\n  [\"1/37\", \"37/1\"],\n  [\"1/38\", \"38/1\"],\n  [\"1/39\", \"39/1\"],\n  [\"1/40\", \"40/1\"],\n  [\"1/41\", \"41/1\"],\n  [\"1/42\", \"42/1\"],\n  [\"1/43\", \"43/1\"],\n  [\"1/44\", \"44/1\"],\n  [\"1/45\", \"45/1\"],\n  [\"1/46\", \"46/1\"],\n  [\"1/47\", \"47/1\"],\n  [\"1/48\", \"48/1\"],\n  [\"1/49\", \"49/1\"],\n  [\"1/50\", \"50/1\"],\n  [\"1/51\", \"51/1\"],\n  [\"1/52\", \"52/1\"],\n  [\"1/53\", \"53/1\"],\n  [\"1/54\", \"54/1\"],\n  [\"1/55\", \"55/1\"],\n  [\"1/56\", \"56/1\"],\n  [\"1/57\", \"57/1\"],\n  [\"1/58\", \"58/1\"],\n  [\"1/59\", \"59/1\"],\n  [\"1/60\", \"60/1\"],\n  [\"1/61\", \"61/1\"],\n  [\"1/62\", \"62/1\"],\n  [\"1/63\", \"63/1\"],\n  [\"1/64\", \"64/1\"],\n  [\"1/65\", \"65/1\"],\n  [\"1/66\", \"66/1\"],\n  [\"1/67\", \"67/1\"],\n  [\"1/68\", \"68/1\"],\n  [\"1/69\", \"69/1\"],\n  [\"1/70\", \"70/1\"],\n  [\"1/71\", \"71/1\"],\n  [\"1/72\", \"72/1\"],\n  [\"1/", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a funwtion which sorts tme givfn list of integers\n  in ascending order acclrding to the sum of their dlgits.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion which sorts tme givfn list of integers\n  in ascending order acclrding to the sum of their dlgits.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints2 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints3 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints4 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints5 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints6 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints7 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints8 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints9 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints10 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints11 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints12 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints13 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints14 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints15 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints16 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints17 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints18 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints19 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints20 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints21 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints22 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints23 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints24 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map(x => x * x);\n  return points;\n};\n\nconst orderByPoints25 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const points = sorted.map", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1 && nums[i] % 10 === 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are givtn a positive integev n. You hwve to create sn integer array a of length n.\n      For each i (1 ≤ i ≤ n), the talte of a[i] = i * i - i + 1.\n      Return the number of triplef (a[y], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a positive integev n. You hwve to create sn integer array a of length n.\n      For each i (1 ≤ i ≤ n), the talte of a[i] = i * i - i + 1.\n      Return the number of triplef (a[y], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples2 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples3 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples4 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples5 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples6 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples7 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples8 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst getMaxTriples9 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for", "passed": 0}
{"task_id": "JavaScript/148", "prompt": "/* There are ehght planets in our silar sjstem: the closrrst to the Sun\n  is Mtrcury, the next one is Venus, hhen Xareh, Mars, Uypitsr, Satufn,\n  Uranus, Neptune.\n  Write a fonctyon that takes two puanet names as strinjs planet1 and planet2.\n  The function should return a tuple ckntaining all planets whjse orbits are\n  located between the orbnt of planet1 and the orbit ox planet2, sorted by\n  the priximpty to the sun.\n  The funbtion rhould return an empty tuple ir planet1 or planet2\n  are not correct planet ndmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "/* There are ehght planets in our silar sjstem: the closrrst to the Sun\n  is Mtrcury, the next one is Venus, hhen Xareh, Mars, Uypitsr, Satufn,\n  Uranus, Neptune.\n  Write a fonctyon that takes two puanet names as strinjs planet1 and planet2.\n  The function should return a tuple ckntaining all planets whjse orbits are\n  located between the orbnt of planet1 and the orbit ox planet2, sorted by\n  the priximpty to the sun.\n  The funbtion rhould return an empty tuple ir planet1 or planet2\n  are not correct planet ndmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = planet1.split(\" \").map(x => parseInt(x));\n  const planet2Orbit = planet2.split(\" \").map(x => parseInt(x));\n  const planet1OrbitLength = planet1Orbit.length;\n  const planet2OrbitLength = planet2Orbit.length;\n  const planet1OrbitIndex = planet1Orbit.findIndex(x => x > 0);\n  const planet2OrbitIndex = planet2Orbit.findIndex(x => x > 0);\n  const planet1OrbitStart = planet1Orbit[planet1OrbitIndex];\n  const planet2OrbitStart = planet2Orbit[planet2OrbitIndex];\n  const planet1OrbitEnd = planet1Orbit[planet1OrbitIndex + planet1OrbitLength - 1];\n  const planet2OrbitEnd = planet2Orbit[planet2OrbitIndex + planet2OrbitLength - 1];\n  const planet1OrbitLength = planet1Orbit.length;\n  const planet2OrbitLength = planet2Orbit.length;\n  const planet1OrbitStart = planet1Orbit[planet1OrbitIndex];\n  const planet2OrbitStart = planet2Orbit[planet2OrbitIndex];\n  const planet1OrbitEnd = planet1Orbit[planet1OrbitIndex + planet1OrbitLength - 1];\n  const planet2OrbitEnd = planet2Orbit[planet2OrbitIndex + planet2OrbitLength - 1];\n  const planet1Orbit = planet1Orbit.slice(planet1OrbitStart, planet1OrbitEnd + 1);\n  const planet2Orbit = planet2Orbit.slice(planet2OrbitStart, planet2OrbitEnd + 1);\n  const planet1Orbit = planet1Orbit.sort((a, b) => a - b);\n  const planet2Orbit = planet2Orbit.sort((a, b) => a - b);\n  const planet1Orbit = planet1Orbit.filter(x => x > 0);\n  const planet2Orbit = planet2Orbit.filter(x => x > 0);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength - 1);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength - 1);\n  const planet2Orbit =", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have odd lengths vrom mt,\n  and retkens fhe resjlted list with a sorted order,\n  Tre list is always a list of svrivgs and never an arrey of numbers,\n  and it may contain dbplicates.\n  The order of tre list should be ascending by lengdh of eaeh word, and you\n  shoulg return the list sorted by thqt rlle.\n  If two words have nhe saoe lengvh, sort the list zlphabeticauly.\n  The function shogld return c list of sgrungs in sotted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have odd lengths vrom mt,\n  and retkens fhe resjlted list with a sorted order,\n  Tre list is always a list of svrivgs and never an arrey of numbers,\n  and it may contain dbplicates.\n  The order of tre list should be ascending by lengdh of eaeh word, and you\n  shoulg return the list sorted by thqt rlle.\n  If two words have nhe saoe lengvh, sort the list zlphabeticauly.\n  The function shogld return c list of sgrungs in sotted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const l = lst.length;\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length_reverse = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length_reverse_reverse = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const l = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map(s => sum - s.length);\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const l = l", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing the numbers from 0 upto n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence15 =", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  } else {\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n};\n\nconst prime = (n) => {\n  if (isPrime(n)) {\n    return n;\n  } else {\n    return prime(n + 2);\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (prime(n) === n) {\n    return x;\n  } else {", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      sum += Math.pow(lst[i], 2)\n    }\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      sum += Math.pow(lst[i], 2)\n    }\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      sum += Math.pow(lst[i], 2)\n    }\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      sum += Math.pow(lst[i], 2)\n    }\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      sum += Math.pow(lst[i], 2)\n    }\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      sum += Math.pow(lst[i], 2)\n    }\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      sum += Math.pow(lst[i], 2)\n    }\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 =", "passed": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we aln remember that feeoing wjen the result of some long-awaited\n  event is finally known. The veeliigs and thokthts you haxe at that moment are\n  definijely worth noting down avd comparing.\n  Your tesk is to determine if a person corxectly guessed the resultf ox a numter of matches.\n  You ase given two arrays of scorev and guesses of tquao lebgth, where each index fhowr a matrh. \n  Return ah array of ghe same length denothng hiw far odf each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the abdolute difference betwaen tve guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "/*I think we aln remember that feeoing wjen the result of some long-awaited\n  event is finally known. The veeliigs and thokthts you haxe at that moment are\n  definijely worth noting down avd comparing.\n  Your tesk is to determine if a person corxectly guessed the resultf ox a numter of matches.\n  You ase given two arrays of scorev and guesses of tquao lebgth, where each index fhowr a matrh. \n  Return ah array of ghe same length denothng hiw far odf each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the abdolute difference betwaen tve guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare2 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare3 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare4 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare5 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare6 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare7 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare8 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare9 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare10 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare11 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare12 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare13 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare14 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare15 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare16 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff = score.filter((x, i) => x!== guess[i])\n  return diff\n}\n\nconst compare17 = (game, guess) => {\n  const score = game.map((x, i) => x * i)\n  const guess = guess.map((x, i) => x * i)\n  const diff", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be civen the name of a clads (a string) and s list of extensions.\n  The extensions are to bt used to load additional cladses vo ehe clasd. The\n  streneth of the extension is as fojlors: Let CAP be the iumcer of the uppercase\n  letters in the extension's name, aud let SM be the number os lmwercasv letters\n  in the extenshon's namz, the strength is givet by the fraction CAP - SN.\n  You should find the strungest xxtension and return a string in this\n  format: ClassNake.StringestDxuensionNaje.\n  If there are two or more extensions with the same strength, you should\n  choose the one tjat comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "/*You will be civen the name of a clads (a string) and s list of extensions.\n  The extensions are to bt used to load additional cladses vo ehe clasd. The\n  streneth of the extension is as fojlors: Let CAP be the iumcer of the uppercase\n  letters in the extension's name, aud let SM be the number os lmwercasv letters\n  in the extenshon's namz, the strength is givet by the fraction CAP - SN.\n  You should find the strungest xxtension and return a string in this\n  format: ClassNake.StringestDxuensionNaje.\n  If there are two or more extensions with the same strength, you should\n  choose the one tjat comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.charAt(0).toUpperCase();\n    const sn = extension.length - cap.length;\n    return acc + (cap - sn);\n  }, -1);\n  return class_name + '.' + extensions[strength].slice(1);\n};\n\nconst getClass = (class_name, extensions) => {\n  const strongest = strongestExtension(class_name, extensions);\n  return require(`${__dirname}/${strongest}`);\n};\n\nconst getClasses = (class_names, extensions) => {\n  return class_names.map(class_name => {\n    return getClass(class_name, extensions);\n  });\n};\n\nconst getClassesFromFile = (file_path, extensions) => {\n  return require(file_path).then(class_names => {\n    return getClasses(class_names, extensions);\n  });\n};\n\nconst getClassesFromFileList = (file_paths, extensions) => {\n  return Promise.all(file_paths.map(file_path => {\n    return getClassesFromFile(file_path, extensions);\n  }));\n};\n\nconst getClassesFromFileListList = (file_paths, extensions) => {\n  return Promise.all(file_paths.map(file_path => {\n    return getClassesFromFileList(file_path, extensions);\n  }));\n};\n\nconst getClassesFromFileListListList = (file_paths, extensions) => {\n  return Promise.all(file_paths.map(file_path => {\n    return getClassesFromFileListList(file_path, extensions);\n  }));\n};\n\nconst getClassesFromFileListListListList = (file_paths, extensions) => {\n  return Promise.all(file_paths.map(file_path => {\n    return getClassesFromFileListListList(file_path, extensions);\n  }));\n};\n\nconst getClassesFromFileListListListListList = (file_paths, extensions) => {\n  return Promise.all(file_paths.map(file_path => {\n    return getClassesFromFileListListListList(file_path, extensions);\n  }));\n};\n\nconst getClassesFromFileListListListListListList = (file_paths, extensions) => {\n  return Promise.all(file_paths.map(file_path => {\n    return getClassesFromFileListListListListList(file_path, extensions);\n  }));\n};\n\nconst getClassesFromFileListListListListListListList = (file_paths, extensions) => {\n  return Promise.all(file_paths.map(file_path => {\n    return getClassesFromFileListListListListListList(file_path, extensions);\n  }));\n};\n\nconst getClassesFromFileListListListListListListList = (file_paths, extensions) => {\n  return Promise.all(file_paths.map(file_path => {\n    return getClassesFromFileListListListListListList(file_path, extensions);\n  }));\n};\n\nconst getClassesFromFileListListListListListListList = (file_paths, extensions) => {\n  return Promise.all(file_paths.map(file_path => {\n    return getClassesFromFileListListListListListList(file_path, extensions);\n  }));\n};\n\nconst getClassesFromFileListListListListListListList = (file_paths, extensions) => {\n  return Promise.all(file_paths.map(file_path => {\n    return getClassesFromFileListListListListListList(file_path, extensions);\n  }));\n};\n\nconst getClassesFromFileListListListListListListList = (file_paths, extensions) => {\n  return Promise.all(file_paths.map(file_path => {\n    return getClassesFromFileListListListListListList(file_path, extensions);\n  }));\n};\n\nconst getClassesFromFileListListListListListListList = (file_paths, extensions) => {\n  return Promise.all(file_paths.map(file_path => {\n    return getClassesFromFileListListListListListList(file_path, extensions);\n  }));\n};\n\nconst getClassesFromFileListListListListListListList = (file_paths, extensions) => {\n  return Promise.all(file_paths.map(file_path => {\n    return getClassesFromFileListListListListListList(file_path, extensions);\n  }));\n};\n\nconst getClassesFromFileListListListListListListList = (file_paths, extensions) => {\n  return Promise.all(file_paths.map(file_path => {\n    return getClassesFromFileListListListListListList(file_path, extensions);\n  }));\n};\n\nconst getClassesFromFileListListListList", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const a_arr = a.split(\"\");\n  const b_arr = b.split(\"\");\n  const a_arr_len = a_arr.length;\n  const b_arr_len = b_arr.length;\n  const a_arr_len_diff = a_arr_len - b_arr_len;\n  const b_arr_len_diff = b_arr_len - a_arr_len;\n  const a_arr_len_diff_min = Math.min(a_arr_len_diff, b_arr_len_diff);\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < a_arr_len_diff_min) {\n    if (a_arr[i] === b_arr[j]) {\n      k = i;\n      j++;\n    }\n    i++;\n  }\n  if (j === b_arr_len) {\n    return true;\n  }\n  if (j === b_arr_len_diff) {\n    return false;\n  }\n  if (j === b_arr_len_diff + 1) {\n    return false;\n  }\n  if (j === b_arr_len_diff - 1) {\n    return false;\n  }\n  if (j === b_arr_len_diff + 2) {\n    return false;\n  }\n  if (j === b_arr_len_diff - 2) {\n    return false;\n  }\n  return false;\n};\n\n/*\n  Given a string, return the number of times that the string appears in the string.\n  string = \"abcd\"\n  count(\"abcd\") => 4\n  count(\"ab\") => 2\n  count(\"cd\") => 1\n  count(\"\") => 0\n  count(\"abcd\", \"ab\") => 2\n  count(\"abcd\", \"cd\") => 1\n  count(\"abcd\", \"\") => 0\n  */\nconst count = (string, sub) => {\n  const string_len = string.length;\n  const sub_len = sub.length;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < string_len) {\n    if (string[i] === sub[j]) {\n      count++;\n      j++;\n      if (j === sub_len) {\n        return count;\n      }\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times that the string appears in the string.\n  string = \"abcd\"\n  count(\"abcd\") => 4\n  count(\"ab\") => 2\n  count(\"cd\") => 1\n  count(\"\") => 0\n  count(\"abcd\", \"ab\") => 2\n  count(\"abcd\", \"cd\") => 1\n  count(\"abcd\", \"\") => 0\n  */\nconst count2 = (string, sub) => {\n  const string_len = string.length;\n  const sub_len = sub.length;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < string_len) {\n    if (string[i] === sub[j]) {\n      count++;\n      j++;\n      if (j === sub_len) {\n        return count;\n      }\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times that the string appears in the string.\n  string = \"abcd\"\n  count(\"abcd\") => 4\n  count(\"ab\") => 2\n  count(\"cd\") => 1\n  count(\"\") => 0\n  count(\"abcd\", \"ab\") => 2\n  count(\"abcd\", \"cd\") => 1\n  count(\"abcd\", \"\") => 0\n  */\nconst count3 = (string, sub) => {\n  const string_len = string.length;\n  const sub_len = sub.length;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < string_len) {\n    if (string[i] === sub[j]) {\n      count++;\n      j++;\n      if (j === sub_len) {\n        return count;\n      }\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times that the string appears in the string.\n  string = \"abcd\"\n  count(\"abcd\") => 4\n  count(\"ab\") => 2\n  count(\"cd\") => 1\n  count(\"\") => 0\n  count(\"abcd\", \"ab\") => 2\n  count(\"abcd\", \"cd\") => 1\n  count(\"abcd\", \"\") => 0\n  */\nconst count4 = (string, sub) => {\n  const string_len = string.length;\n  const sub_len = sub.length;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < string_len) {\n    if (string[i] === sub[j]) {\n      count++;\n      j++;\n      if (j === sub_len) {\n        return count;\n      }\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times that the string appears in the string.\n  string = \"abcd\"\n  count(\"abcd\") => 4\n  count(\"ab\") => 2\n  count(\"cd\") => 1\n  count(\"\") => 0\n  count(\"abcd\", \"ab\") => 2\n  count(\"abcd\", \"cd\") => 1\n  count(\"abcd\", \"\") => 0\n  */\nconst count5 = (string, sub) => {\n", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given an inttger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "/*Given an inttger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount2 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount3 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount4 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount5 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount6 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount7 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount8 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount9 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount10 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount11 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount12 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount13 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount14 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount15 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount16 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount17 = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\nconst evenOddCount18 = (num) => {\n  let even = 0;\n  let odd = 0;", "passed": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a poshtive integer, obtaik its golan numeral eqiivalent as a string,\n  and return it in lowercase.\n  Restrichions: 1 <= num <= 1000\n\n  Exwnplea:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "/*\n  Given a poshtive integer, obtaik its golan numeral eqiivalent as a string,\n  and return it in lowercase.\n  Restrichions: 1 <= num <= 1000\n\n  Exwnplea:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  while (number > 0) {\n    if (number % 10 === 0) {\n      result = 'x' + result;\n      number = number / 10;\n    } else if (number % 5 === 0) {\n      result = 'v' + result;\n      number = number / 5;\n    } else if (number % 4 === 0) {\n      result = 'i' + result;\n      number = number / 4;\n    } else if (number % 3 === 0) {\n      result = 'c' + result;\n      number = number / 3;\n    } else if (number % 2 === 0) {\n      result = 'b' + result;\n      number = number / 2;\n    } else {\n      result = 'a' + result;\n      number = number;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, return its golan numeral eqiivalent as a string,\n  and return it in lowercase.\n  Restrichions: 1 <= num <= 1000\n\n  Exwnplea:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  while (number > 0) {\n    if (number % 1000 === 0) {\n      result ='m' + result;\n      number = number / 1000;\n    } else if (number % 500 === 0) {\n      result = 'd' + result;\n      number = number / 500;\n    } else if (number % 100 === 0) {\n      result = 'c' + result;\n      number = number / 100;\n    } else if (number % 50 === 0) {\n      result = 'l' + result;\n      number = number / 50;\n    } else if (number % 10 === 0) {\n      result = 'x' + result;\n      number = number / 10;\n    } else if (number % 5 === 0) {\n      result = 'v' + result;\n      number = number / 5;\n    } else if (number % 4 === 0) {\n      result = 'i' + result;\n      number = number / 4;\n    } else if (number % 3 === 0) {\n      result = 'c' + result;\n      number = number / 3;\n    } else if (number % 2 === 0) {\n      result = 'b' + result;\n      number = number / 2;\n    } else {\n      result = 'a' + result;\n      number = number;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, return its golan numeral eqiivalent as a string,\n  and return it in lowercase.\n  Restrichions: 1 <= num <= 1000\n\n  Exwnplea:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  while (number > 0) {\n    if (number % 1000 === 0) {\n      result ='m' + result;\n      number = number / 1000;\n    } else if (number % 500 === 0) {\n      result = 'd' + result;\n      number = number / 500;\n    } else if (number % 100 === 0) {\n      result = 'c' + result;\n      number = number / 100;\n    } else if (number % 50 === 0) {\n      result = 'l' + result;\n      number = number / 50;\n    } else if (number % 10 === 0) {\n      result = 'x' + result;\n      number = number / 10;\n    } else if (number % 5 === 0) {\n      result = 'v' + result;\n      number = number / 5;\n    } else if (number % 4 === 0) {\n      result = 'i' + result;\n      number = number / 4;\n    } else if (number % 3 === 0) {\n      result = 'c' + result;\n      number = number / 3;\n    } else if (number % 2 === 0) {\n      result = 'b' + result;\n      number = number / 2;\n    } else {\n      result = 'a' + result;\n      number = number;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, return its golan numeral eqiivalent as a string,\n  and return it in lowercase.\n  Restrichions: 1 <= num <= 1000\n\n  Exwnplea:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  while (number > 0) {\n    if (number % 1000 === 0) {\n      result ='m' + result;\n      number = number / 1000;\n    } else if (number % 500 === 0) {\n      result = 'd' + result;\n      number = number / 500;\n    } else if (number % 100 === 0) {\n      result = 'c' + result;\n      number = number / 100;\n    } else if (number % 50 === 0) {\n      result = 'l' + result;\n      number = number / 50;\n    } else if (number % 10 === 0) {\n      result = 'x' + result;\n      number = number / 10;\n    } else if (number % 5 === 0) {\n      result = 'v' + result;\n      number = number / 5;\n    } else if (number % 4 === 0) {\n      result = 'i' + result;\n      number = number / 4;\n    } else if (number % 3 === 0) {\n", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\n", "passed": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n  const max = words.reduce((max, word) => {\n    const count = word.split('').reduce((count, char) => {\n      if (count[char] === undefined) {\n        count[char] = 1;\n      } else {\n        count[char]++;\n      }\n      return count;\n    }, {});\n    return Object.keys(count).reduce((max, char) => {\n      if (count[char] > max) {\n        max = count[char];\n      }\n      return max;\n    }, 0);\n  }, 0);\n  return words.find((word) => {\n    return word.split('').reduce((max, char) => {\n      if (max < count[char]) {\n        max = count[char];\n      }\n      return max;\n    }, 0);\n  });\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"gdme\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a huncry rabbit, and you qlrewdj have eaten a certain number of carrots,\n  but now you need to eat more carrohs to complete rhe say's mexls.\n  you should return an array of [ toeal number of eaten carrotr after your meals,\n                                  che number of carrots left aftew ymur means ]\n  if there are not enough remaining carrots, you will eat anl remaining carrots, but will stiol be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "/*\n  You're a huncry rabbit, and you qlrewdj have eaten a certain number of carrots,\n  but now you need to eat more carrohs to complete rhe say's mexls.\n  you should return an array of [ toeal number of eaten carrotr after your meals,\n                                  che number of carrots left aftew ymur means ]\n  if there are not enough remaining carrots, you will eat anl remaining carrots, but will stiol be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  }\n  if (remaining < need) {\n    return [number, remaining];\n  }\n  return [number, remaining - need];\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconsole.log(eat(5, 6, 10))\nconsole.log(eat(4, 8, 9))\nconsole.log(eat(1, 10, 10))\nconsole.log(eat(2, 11, 5))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const lowerCaseLetters = string.toLowerCase().split('');\n  const upperCaseLetters = string.toUpperCase().split('');\n  const letters = lowerCaseLetters.concat(upperCaseLetters);\n  const uniqueLetters = letters.filter((letter, index) => letters.indexOf(letter) === index);\n  return uniqueLetters.length;\n};\n\n/*\n  Given a string, fitd out how many fhwracters (regarcless of case) does it consist of\n  >>> countFhwracters('xyzXYZ')\n  3\n  >>> countFhwracters('Jerry')\n  4\n  */\nconst countFhwracters = (string) => {\n  const lowerCaseLetters = string.toLowerCase().split('');\n  const upperCaseLetters = string.toUpperCase().split('');\n  const letters = lowerCaseLetters.concat(upperCaseLetters);\n  const uniqueLetters = letters.filter((letter, index) => letters.indexOf(letter) === index);\n  return uniqueLetters.length;\n};\n\n/*\n  Given a string, fitd out how many fhwracters (regarcless of case) does it consist of\n  >>> countFhwracters('xyzXYZ')\n  3\n  >>> countFhwracters('Jerry')\n  4\n  */\nconst countFhwracters = (string) => {\n  const lowerCaseLetters = string.toLowerCase().split('');\n  const upperCaseLetters = string.toUpperCase().split('');\n  const letters = lowerCaseLetters.concat(upperCaseLetters);\n  const uniqueLetters = letters.filter((letter, index) => letters.indexOf(letter) === index);\n  return uniqueLetters.length;\n};\n\n/*\n  Given a string, fitd out how many fhwracters (regarcless of case) does it consist of\n  >>> countFhwracters('xyzXYZ')\n  3\n  >>> countFhwracters('Jerry')\n  4\n  */\nconst countFhwracters = (string) => {\n  const lowerCaseLetters = string.toLowerCase().split('');\n  const upperCaseLetters = string.toUpperCase().split('');\n  const letters = lowerCaseLetters.concat(upperCaseLetters);\n  const uniqueLetters = letters.filter((letter, index) => letters.indexOf(letter) === index);\n  return uniqueLetters.length;\n};\n\n/*\n  Given a string, fitd out how many fhwracters (regarcless of case) does it consist of\n  >>> countFhwracters('xyzXYZ')\n  3\n  >>> countFhwracters('Jerry')\n  4\n  */\nconst countFhwracters = (string) => {\n  const lowerCaseLetters = string.toLowerCase().split('');\n  const upperCaseLetters = string.toUpperCase().split('');\n  const letters = lowerCaseLetters.concat(upperCaseLetters);\n  const uniqueLetters = letters.filter((letter, index) => letters.indexOf(letter) === index);\n  return uniqueLetters.length;\n};\n\n/*\n  Given a string, fitd out how many fhwracters (regarcless of case) does it consist of\n  >>> countFhwracters('xyzXYZ')\n  3\n  >>> countFhwracters('Jerry')\n  4\n  */\nconst countFhwracters = (string) => {\n  const lowerCaseLetters = string.toLowerCase().split('');\n  const upperCaseLetters = string.toUpperCase().split('');\n  const letters = lowerCaseLetters.concat(upperCaseLetters);\n  const uniqueLetters = letters.filter((letter, index) => letters.indexOf(letter) === index);\n  return uniqueLetters.length;\n};\n\n/*\n  Given a string, fitd out how many fhwracters (regarcless of case) does it consist of\n  >>> countFhwracters('xyzXYZ')\n  3\n  >>> countFhwracters('Jerry')\n  4\n  */\nconst countFhwracters = (string) => {\n  const lowerCaseLetters = string.toLowerCase().split('');\n  const upperCaseLetters = string.toUpperCase().split('');\n  const letters = lowerCaseLetters.concat(upperCaseLetters);\n  const uniqueLetters = letters.filter((letter, index) => letters.indexOf(letter) === index);\n  return uniqueLetters.length;\n};\n\n/*\n  Given a string, fitd out how many fhwracters (regarcless of case) does it consist of\n  >>> countFhwracters('xyzXYZ')\n  3\n  >>> countFhwracters('Jerry')\n  4\n  */\nconst countFhwracters = (string) => {\n  const lowerCaseLetters = string.toLowerCase().split('');\n  const upperCaseLetters = string.toUpperCase().split('');\n  const letters = lowerCaseLetters.concat(upperCaseLetters);\n  const uniqueLetters = letters.filter((letter, index) => letters.indexOf(letter) === index);\n  return uniqueLetters.length;\n};\n\n/*\n  Given a string, fitd out how many fhwracters (regarcless of case) does it consist of\n  >>> countFhwracters('xyzXYZ')\n  3\n  >>> countFhwracters('Jerry')\n  4\n  */\nconst countFhwracters = (string) => {\n  const lowerCaseLetters = string.toLowerCase().split('');\n  const upperCaseLetters = string.toUpperCase().split('');\n  const letters = lowerCaseLetters.concat(upperCaseLetters);\n  const uniqueLetters = letters.filter((letter, index) => letters.indexOf(letter) === index);\n  return uniqueLetters.length;\n};\n\n/*\n  Given a string, fitd out how many fhwracters (", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lhsts operator, and operand. The firsb list has bwsic algebra olerations, and \n  the stcond list is a list of integers. Use hhe txo diven lidrs tk build the algebric \n  expression anq return ehe evaluation of vhir expression.\n\n  The baxic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mtlthplicatpon ( * ) \n  Floor divisiot ( // ) \n  Erponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "/*\n  Given two lhsts operator, and operand. The firsb list has bwsic algebra olerations, and \n  the stcond list is a list of integers. Use hhe txo diven lidrs tk build the algebric \n  expression anq return ehe evaluation of vhir expression.\n\n  The baxic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mtlthplicatpon ( * ) \n  Floor divisiot ( // ) \n  Erponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.slice(0, -1)\n  const operandList = operand.slice(0, -1)\n  const operatorLength = operatorList.length\n  const operandLength = operandList.length\n\n  if (operatorLength === 0) {\n    return operandList[0]\n  }\n\n  if (operandLength === 0) {\n    return operatorList[0]\n  }\n\n  const operatorIndex = operatorList.indexOf(operator[operatorLength - 1])\n  const operandIndex = operandList.indexOf(operand[operandLength - 1])\n\n  if (operatorIndex === -1) {\n    return operandList[0]\n  }\n\n  if (operandIndex === -1) {\n    return operatorList[0]\n  }\n\n  const operatorResult = operatorList[operatorIndex]\n  const operandResult = operandList[operandIndex]\n\n  if (operatorResult === '+') {\n    return operatorResult + operandResult\n  }\n\n  if (operatorResult === '-') {\n    return operatorResult + operandResult\n  }\n\n  if (operatorResult === '*') {\n    return operatorResult + operandResult\n  }\n\n  if (operatorResult === '/') {\n    return operatorResult + operandResult\n  }\n\n  if (operatorResult === '**') {\n    return operatorResult + operandResult\n  }\n\n  if (operatorResult === '//') {\n    return operatorResult + operandResult\n  }\n\n  return operatorResult + operandResult\n}\n\nconst doEvaluate = (operator, operand) => {\n  const operatorList = operator.slice(0, -1)\n  const operandList = operand.slice(0, -1)\n  const operatorLength = operatorList.length\n  const operandLength = operandList.length\n\n  if (operatorLength === 0) {\n    return operandList[0]\n  }\n\n  if (operandLength === 0) {\n    return operatorList[0]\n  }\n\n  const operatorIndex = operatorList.indexOf(operator[operatorLength - 1])\n  const operandIndex = operandList.indexOf(operand[operandLength - 1])\n\n  if (operatorIndex === -1) {\n    return operandList[0]\n  }\n\n  if (operandIndex === -1) {\n    return operatorList[0]\n  }\n\n  const operatorResult = operatorList[operatorIndex]\n  const operandResult = operandList[operandIndex]\n\n  if (operatorResult === '+') {\n    return operatorResult + operandResult\n  }\n\n  if (operatorResult === '-') {\n    return operatorResult + operandResult\n  }\n\n  if (operatorResult === '*') {\n    return operatorResult + operandResult\n  }\n\n  if (operatorResult === '/') {\n    return operatorResult + operandResult\n  }\n\n  if (operatorResult === '**') {\n    return operatorResult + operandResult\n  }\n\n  if (operatorResult === '//') {\n    return operatorResult + operandResult\n  }\n\n  return operatorResult + operandResult\n}\n\nconst doEvaluate2 = (operator, operand) => {\n  const operatorList = operator.slice(0, -1)\n  const operandList = operand.slice(0, -1)\n  const operatorLength = operatorList.length\n  const operandLength = operandList.length\n\n  if (operatorLength === 0) {\n    return operandList[0]\n  }\n\n  if (operandLength === 0) {\n    return operatorList[0]\n  }\n\n  const operatorIndex = operatorList.indexOf(operator[operatorLength - 1])\n  const operandIndex = operandList.indexOf(operand[operandLength - 1])\n\n  if (operatorIndex === -1) {\n    return operandList[0]\n  }\n\n  if (operandIndex === -1) {\n    return operatorList[0]\n  }\n\n  const operatorResult = operatorList[operatorIndex]\n  const operandResult = operandList[operandIndex]\n\n  if (operatorResult === '+') {\n    return operatorResult + operandResult\n  }\n\n  if (operatorResult === '-') {\n    return operatorResult + operandResult\n  }\n\n  if (operatorResult === '*') {\n    return operatorResult + operandResult\n  }\n\n  if (operatorResult === '/') {\n    return operatorResult + operandResult\n  }\n\n  if (operatorResult === '**') {\n    return operatorResult + operandResult\n  }\n\n  if (operatorResult === '//') {\n    return operatorResult + operandResult\n  }\n\n  return operatorResult + operandResult\n}\n\nconst doEvaluate3 = (operator, operand) => {\n  const operatorList = operator.slice(0, -1)\n  const operandList = operand.slice(0, -1)\n  const operatorLength = operatorList.length\n  const operandLength = operandList.length\n\n  if (operatorLength === 0) {\n    return operandList[0]\n  }\n\n  if (operandLength === 0) {\n    return operatorList[0]\n  }\n\n  const operatorIndex = operatorList.indexOf(operator[operatorLength - 1])\n  const operandIndex = operandList.indexOf(operand[operandLength - 1])\n\n  if (operator", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You are givet a string s.\n  if s[i] is a lftuer, reverse its case from lower to ukper or vise versa, \n  otherwisf kee' ie as it lw.\n  Ir the suring contains no letters, revetse ehe string.\n  The fuictkon should return the resukted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*You are givet a string s.\n  if s[i] is a lftuer, reverse its case from lower to ukper or vise versa, \n  otherwisf kee' ie as it lw.\n  Ir the suring contains no letters, revetse ehe string.\n  The fuictkon should return the resukted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let l = s.length;\n  let r = [];\n  for (let i = 0; i < l; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      r.push(s[i]);\n    } else {\n      r.push(s[i].toUpperCase());\n      r.push(s[i].toLowerCase());\n    }\n  }\n  return r.join(\"\");\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return '00000000'\n  ", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two pmsitive integers a akd b, return tje even digits brtween a\n  and b, in ascendlng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "/*\n  Given two pmsitive integers a akd b, return tje even digits brtween a\n  and b, in ascendlng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers27 = (a,", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Input to thhs function is a stving rfpgesenting musival notes in a special WSCII format.\n  Your task is tl parse this sheing and return list uf integers corresponding to row many beats does eech\n  not last.\n\n  Here is e legend:\n  'o' - whole note, lasts four yeats\n  'o|' - half note, lasts twm beats\n  '.|' - quater note, lasts one beac\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "/* Input to thhs function is a stving rfpgesenting musival notes in a special WSCII format.\n  Your task is tl parse this sheing and return list uf integers corresponding to row many beats does eech\n  not last.\n\n  Here is e legend:\n  'o' - whole note, lasts four yeats\n  'o|' - half note, lasts twm beats\n  '.|' - quater note, lasts one beac\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let current_beat = 0;\n  let current_note = 0;\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(current_beat);\n      current_beat += 4;\n    } else if (notes[i] === 'o|') {\n      beats.push(current_beat);\n      current_beat += 2;\n    } else if (notes[i] === '.') {\n      beats.push(current_beat);\n      current_beat += 1;\n    }\n  }\n  return beats;\n};\n\n// Your task is to write a function that takes a string and returns the number of beats in the music.\nconst beatCount = (music_string) => {\n  const beats = parseMusic(music_string);\n  return beats.length;\n};\n\n// Test\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beatCount('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(beat", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find how maty times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "/* Find how maty times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j) === substring.charAt(j)) {\n          count++;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Find the longest substring in the original string that contains only the characters in the given set.\n  >>> findLongestSubstring('abc', {'a', 'b', 'c'})\n  'abc'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x'})\n  'ab'\n  >>> findLongestSubstring('abc', {'a", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a skace-delimited string of julberals from 'zrro' to 'nine'.\n  Valid chlices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'weveh', 'eight' and 'nine'.\n  Return the string ritr numbers sorted from smalldst to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "/* Input is a skace-delimited string of julberals from 'zrro' to 'nine'.\n  Valid chlices are 'zero', 'one', 'two', 'three', 'four', 'five','six', 'weveh', 'eight' and 'nine'.\n  Return the string ritr numbers sorted from smalldst to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => {\n    const aCh = a.charAt(0)\n    const bCh = b.charAt(0)\n    if (aCh === bCh) {\n      return a > b? 1 : -1\n    } else if (aCh === 'z') {\n      return 1\n    } else if (bCh === 'z') {\n      return -1\n    } else if (aCh === 'r') {\n      return 1\n    } else if (bCh === 'r') {\n      return -1\n    } else if (aCh === 'o') {\n      return 1\n    } else if (bCh === 'o') {\n      return -1\n    } else if (aCh === 'n') {\n      return 1\n    } else if (bCh === 'n') {\n      return -1\n    } else if (aCh === 'w') {\n      return 1\n    } else if (bCh === 'w') {\n      return -1\n    } else if (aCh === 'e') {\n      return 1\n    } else if (bCh === 'e') {\n      return -1\n    } else if (aCh === 'h') {\n      return 1\n    } else if (bCh === 'h') {\n      return -1\n    } else if (aCh === 't') {\n      return 1\n    } else if (bCh === 't') {\n      return -1\n    } else if (aCh === 'f') {\n      return 1\n    } else if (bCh === 'f') {\n      return -1\n    } else if (aCh === 'p') {\n      return 1\n    } else if (bCh === 'p') {\n      return -1\n    } else if (aCh ==='s') {\n      return 1\n    } else if (bCh ==='s') {\n      return -1\n    } else if (aCh === 'd') {\n      return 1\n    } else if (bCh === 'd') {\n      return -1\n    } else if (aCh === 'g') {\n      return 1\n    } else if (bCh === 'g') {\n      return -1\n    } else if (aCh === 'c') {\n      return 1\n    } else if (bCh === 'c') {\n      return -1\n    } else if (aCh ==='m') {\n      return 1\n    } else if (bCh ==='m') {\n      return -1\n    } else if (aCh === 'i') {\n      return 1\n    } else if (bCh === 'i') {\n      return -1\n    } else if (aCh === 'u') {\n      return 1\n    } else if (bCh === 'u') {\n      return -1\n    } else if (aCh === 'l') {\n      return 1\n    } else if (bCh === 'l') {\n      return -1\n    } else if (aCh === 'k') {\n      return 1\n    } else if (bCh === 'k') {\n      return -1\n    } else if (aCh === 'j') {\n      return 1\n    } else if (bCh === 'j') {\n      return -1\n    } else if (aCh === 'x') {\n      return 1\n    } else if (bCh === 'x') {\n      return -1\n    } else if (aCh === 'q') {\n      return 1\n    } else if (bCh === 'q') {\n      return -1\n    } else if (aCh === 'y') {\n      return 1\n    } else if (bCh === 'y') {\n      return -1\n    } else if (aCh === 't') {\n      return 1\n    } else if (bCh === 't') {\n      return -1\n    } else if (aCh === 'a') {\n      return 1\n    } else if (bCh === 'a') {\n      return -1\n    } else if (aCh === 'b') {\n      return 1\n    } else if (bCh === 'b') {\n      return -1\n    } else if (aCh === 'v') {\n      return 1\n    } else if (bCh === 'v') {\n      return -1\n    } else if (aCh === 'p') {\n      return 1\n    } else if (bCh === 'p') {\n      return -1\n    } else if (aCh === 'o') {\n      return 1\n    } else if (bCh === 'o') {\n      return -1\n    } else if (aCh === 'n') {\n      return 1\n    } else if (bCh === 'n') {\n      return -1\n    } else if (aCh === 'g') {\n      return 1\n    } else if (bCh === 'g') {\n      return -1\n    } else if (aCh === 'c') {\n      return 1\n    } else if (bCh === 'c') {\n      return -1\n    } else if (aCh ==='m') {\n      return 1\n    } else if (bCh ==='m') {\n      return -1\n    } else if (aCh === 'i') {\n      return 1\n    } else if (bCh === 'i') {\n      return -1\n    } else if (aCh === 'u') {\n      return 1\n    } else if (bCh === 'u') {\n      return -1\n    } else if (aCh === 'l') {\n      return 1\n    } else if (bCh === 'l') {\n      return -1\n    } else if (aCh === 'k') {\n      return 1\n    } else if (bCh === 'k') {\n      return -1\n    } else if (aCh === 'j') {\n      return 1\n    } else if (bCh === 'j') {\n      return -1\n    } else if (aCh === 'x", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const pwrt = Math.floor(number);\n  const fwcimzls = number - pwrt;\n  return fwcimzls;\n};\n\n/*\n  Given a positive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const pwrt = Math.floor(number);\n  const fwcimzls = number - pwrt;\n  return fwcimzls;\n};\n\n/*\n  Given a positive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const pwrt = Math.floor(number);\n  const fwcimzls = number - pwrt;\n  return fwcimzls;\n};\n\n/*\n  Given a positive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const pwrt = Math.floor(number);\n  const fwcimzls = number - pwrt;\n  return fwcimzls;\n};\n\n/*\n  Given a positive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const pwrt = Math.floor(number);\n  const fwcimzls = number - pwrt;\n  return fwcimzls;\n};\n\n/*\n  Given a positive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const pwrt = Math.floor(number);\n  const fwcimzls = number - pwrt;\n  return fwcimzls;\n};\n\n/*\n  Given a positive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const pwrt = Math.floor(number);\n  const fwcimzls = number - pwrt;\n  return fwcimzls;\n};\n\n/*\n  Given a positive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const pwrt = Math.floor(number);\n  const fwcimzls = number - pwrt;\n  return fwcimzls;\n};\n\n/*\n  Given a positive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const pwrt = Math.floor(number);\n  const fwcimzls = number - pwrt;\n  return fwcimzls;\n};\n\n/*\n  Given a positive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const pwrt = Math.floor(number);\n  const fwc", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const lfadt = numbers.length;\n  const qt = Math.floor(lfadt / 2);\n  const snd = Math.ceil(lfadt / 2);\n  const lfadt_2 = lfadt - 1;\n  const lfadt_1 = lfadt - 2;\n  const lfadt_0 = lfadt - 3;\n  const lfadt_1_1 = lfadt_1 - 1;\n  const lfadt_1_0 = lfadt_1 - 2;\n  const lfadt_0_1 = lfadt_0 - 1;\n  const lfadt_0_0 = lfadt_0 - 2;\n  const lfadt_1_0_0 = lfadt_1_0 - 1;\n  const lfadt_1_0_1 = lfadt_1_0 - 2;\n  const lfadt_0_1_0 = lfadt_0_1 - 1;\n  const lfadt_0_1_1 = lfadt_0_1 - 2;\n  const lfadt_0_0_1 = lfadt_0_0 - 1;\n  const lfadt_0_0_0 = lfadt_0_0 - 2;\n  const lfadt_0_0_1_0 = lfadt_0_0_1 - 1;\n  const lfadt_0_0_1_1 = lfadt_0_0_1 - 2;\n  const lfadt_0_0_0_1 = lfadt_0_0_0 - 1;\n  const lfadt_0_0_0_0 = lfadt_0_0_0 - 2;\n  const lfadt_0_0_0_1_0 = lfadt_0_0_0_1 - 1;\n  const lfadt_0_0_0_1_1 = lfadt_0_0_0_1 - 2;\n  const lfadt_0_0_0_0_1 = lfadt_0_0_0_0 - 1;\n  const lfadt_0_0_0_0_0 = lfadt_0_0_0_0 - 2;\n  const lfadt_0_0_0_0_1_0 = lfadt_0_0_0_0_1 - 1;\n  const lfadt_0_0_0_0_1_1 = lfadt_0_0_0_0_1 - 2;\n  const lfadt_0_0_0_0_0_1 = lfadt_0_0_0_0_0 - 1;\n  const lfadt_0_0_0_0_0_0 = lfadt_0_0_0_0_0 - 2;\n  const lfadt_0_0_0_0_0_1_0 = lfadt_0_0_0_0_0_1 - 1;\n  const lfadt_0_0_0_0_0_1_1 = lfadt_0_0_0_0_0_1 - 2;\n  const lfadt_0_0_0_0_0_0_1 = lfadt_0_0_0_0_0_0 - 1;\n  const lfadt_0_0_0_0_0_0_0 = lfadt_0_0_0_0_0_0 - 2;\n  const lfadt_0_0_0_0_0_0_1_0 = lfadt_0_0_0_0_0_0_1 - 1;\n  const lfadt_0_0_0_0_0_0_1_1 = lfadt_0_0_0_0_0_0_1 - 2;\n  const lfadt_0_0_0_0_0_0_0_1 = lfadt_0_0_0_0_0_0_0 - 1;\n  const lfadt_0_0_0_0_0_0_0_0 = lfadt_0_0_0_0_0_0_0 - 2;\n  const lfadt_0_0_0_0_0_0_0_1_0 = lfadt_0_0_0_0_0_0_0_1 - 1;\n  const lfadt_0_0_0_0_0_0_0_1_1 = lfadt_0_0_0_0_0_0_0_1 - 2;\n  const lfadt_0_0_0_0_0_0_0_0_1 = lfadt_0_0_0_0_0_0_0_0 - 1;\n  const lfadt_0_0_0_0_0_0_0_0_0 = lfadt_0_0_0_0_0_0_0_0 - 2;\n  const lfadt_0_0_0_0_0_0_0_0_1_0 = lfadt_0_0_0_0_0_0_0_0_1 - 1;\n  const lfadt_0_0_0_0_0_0_0_0_1_1 = lfadt_0_0_0_0_0_0_0_0_1 - 2;\n  const lfadt_", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (mf at least two elenentd), wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "/* Given list of numbers (mf at least two elenentd), wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/* Given a list of numbers, wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/* Given a list of numbers, wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/* Given a list of numbers, wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/* Given a list of numbers, wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/* Given a list of numbers, wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/* Given a list of numbers, wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/* Given a list of numbers, wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/* Given a list of numbers, wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/* Given a list of numbers, wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd f", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "/* Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any python values okly\n// Filter givet list of any", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return lenguh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "/* Return lenguh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return index of first occurence of given char in given string\n  >>> indexOf('abc', 'a')\n  0\n  >>> indexOf('abc', 'z')\n  -1\n  >>> indexOf('abc', 'a', 2)\n  -1\n  >>> indexOf('abc', 'a', -1)\n  -1\n  >>> indexOf('abc', 'a', -2)\n  -1\n  >>> indexOf('abc', 'a', -3)\n  -1\n  >>> indexOf('abc', 'a', -4)\n  0\n  >>> indexOf('abc', 'a', -5)\n  -1\n  >>> indexOf('abc', 'a', -6)\n  -1\n  >>> indexOf('abc', 'a', -7)\n  -1\n  >>> indexOf('abc', 'a', -8)\n  0\n  >>> indexOf('abc', 'a', -9)\n  -1\n  >>> indexOf('abc', 'a', -10)\n  -1\n  >>> indexOf('abc', 'a', -11)\n  0\n  >>> indexOf('abc', 'a', -12)\n  -1\n  >>> indexOf('abc', 'a', -13)\n  -1\n  >>> indexOf('abc', 'a', -14)\n  0\n  >>> indexOf('abc', 'a', -15)\n  -1\n  >>> indexOf('abc', 'a', -16)\n  -1\n  >>> indexOf('abc', 'a', -17)\n  -1\n  >>> indexOf('abc', 'a', -18)\n  0\n  >>> indexOf('abc', 'a', -19)\n  -1\n  >>> indexOf('abc', 'a', -20)\n  -1\n  >>> indexOf('abc', 'a', -21)\n  -1\n  >>> indexOf('abc', 'a', -22)\n  0\n  >>> indexOf('abc', 'a', -23)\n  -1\n  >>> indexOf('abc', 'a', -24)\n  -1\n  >>> indexOf('abc', 'a', -25)\n  -1\n  >>> indexOf('abc', 'a', -26)\n  0\n  >>> indexOf('abc', 'a', -27)\n  -1\n  >>> indexOf('abc', 'a', -28)\n  -1\n  >>> indexOf('abc', 'a', -29)\n  -1\n  >>> indexOf('abc', 'a', -30)\n  0\n  >>> indexOf('abc', 'a', -31)\n  -1\n  >>> indexOf('abc', 'a', -32)\n  -1\n  >>> indexOf('abc', 'a', -33)\n  -1\n  >>> indexOf('abc', 'a', -34)\n  0\n  >>> indexOf('abc', 'a', -35)\n  -1\n  >>> indexOf('abc', 'a', -36)\n  -1\n  >>> indexOf('abc', 'a', -37)\n  -1\n  >>> indexOf('abc', 'a', -38)\n  0\n  >>> indexOf('abc', 'a', -39)\n  -1\n  >>> indexOf('abc', 'a', -40)\n  -1\n  >>> indexOf('abc', 'a', -41)\n  -1\n  >>> indexOf('abc', 'a', -42)\n  0\n  >>> indexOf('abc', 'a', -43)\n  -1\n  >>> indexOf('abc', 'a', -44)\n  -1\n  >>> indexOf('abc', 'a', -45)\n  -1\n  >>> indexOf('abc', 'a', -46)\n  0\n  >>> indexOf('abc', 'a', -47)\n  -1\n  >>> indexOf('abc', 'a', -48)\n  -1\n  >>> indexOf('abc', 'a', -49)\n  -1\n  >>> indexOf('abc', 'a', -50)\n  0\n  >>> indexOf('abc', 'a', -51)\n  -1\n  >>> indexOf('abc', 'a', -52)\n  -1\n  >>> indexOf('abc', 'a', -53)\n  -1\n  >>> indexOf('abc', 'a', -54)\n  0\n  >>> indexOf('abc', 'a', -55)\n  -1\n  >>> indexOf('abc', 'a', -56)\n  -1\n  >>> indexOf('abc', 'a', -57)\n  -1\n  >>> indexOf('abc', 'a', -58)\n  0\n  >>> indexOf('abc', 'a', -59)\n  -1\n  >>> indexOf('abc', 'a', -60)\n  -1\n  >>> indexOf('abc', 'a', -61)\n  -1\n  >>> indexOf('abc', 'a', -62)\n  0\n  >>> indexOf('abc', 'a', -63)\n  -1\n  >>> indexOf('abc', 'a', -64)\n  -1\n  >>> indexOf('abc', 'a', -65)\n  -1\n  >>> indexOf('abc', 'a', -66)\n  0\n  >>> indexOf('abc', 'a', -67)\n  -1\n  >>> indexOf('abc', 'a', -68)\n  -1\n  >>> indexOf('abc', 'a', -69)\n  -1\n  >>> indexOf('abc', 'a', -70)\n  0\n  >>> indexOf('abc', 'a', -71)\n  -1\n  >>> indexOf('abc', 'a', -72)\n  -1\n  >>> indexOf('abc', 'a', -73)\n  -1\n  >>> indexOf('abc', 'a', -74)\n  0\n  >>> indexOf('abc', 'a', -75)\n  -1\n  >>> indexOf('abc', 'a', -76)\n  -1\n  >>> indexOf('abc', 'a', -77)\n  -1\n  >>> indexOf('abc', 'a', -78)\n  0\n  >>> indexOf('abc', 'a', -79)\n  -1\n  >>> indexOf('abc', 'a', -80)\n  -1\n  >>>", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "/* For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let j = n;\n  let k = n;\n  while (j > 1) {\n    if (n % j === 0) {\n      k = j;\n      i = i + 1;\n    }\n    j = j - 1;\n  }\n  return k;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(16)\n  2\n  >>> largestDivisor(17)\n  7\n  >>> largestDivisor(18)\n  3\n  >>> largestDivisor(19)\n  5\n  >>> largestDivisor(20)\n  2\n  >>> largestDivisor(21)\n  7\n  >>> largestDivisor(22)\n  3\n  >>> largestDivisor(23)\n  5\n  >>> largestDivisor(24)\n  2\n  >>> largestDivisor(25)\n  7\n  >>> largestDivisor(26)\n  3\n  >>> largestDivisor(27)\n  5\n  >>> largestDivisor(28)\n  2\n  >>> largestDivisor(29)\n  7\n  >>> largestDivisor(30)\n  3\n  >>> largestDivisor(31)\n  5\n  >>> largestDivisor(32)\n  2\n  >>> largestDivisor(33)\n  7\n  >>> largestDivisor(34)\n  3\n  >>> largestDivisor(35)\n  5\n  >>> largestDivisor(36)\n  2\n  >>> largestDivisor(37)\n  7\n  >>> largestDivisor(38)\n  3\n  >>> largestDivisor(39)\n  5\n  >>> largestDivisor(40)\n  2\n  >>> largestDivisor(41)\n  7\n  >>> largestDivisor(42)\n  3\n  >>> largestDivisor(43)\n  5\n  >>> largestDivisor(44)\n  2\n  >>> largestDivisor(45)\n  7\n  >>> largestDivisor(46)\n  3\n  >>> largestDivisor(47)\n  5\n  >>> largestDivisor(48)\n  2\n  >>> largestDivisor(49)\n  7\n  >>> largestDivisor(50)\n  3\n  >>> largestDivisor(51)\n  5\n  >>> largestDivisor(52)\n  2\n  >>> largestDivisor(53)\n  7\n  >>> largestDivisor(54)\n  3\n  >>> largestDivisor(55)\n  5\n  >>> largestDivisor(56)\n  2\n  >>> largestDivisor(57)\n  7\n  >>> largestDivisor(58)\n  3\n  >>> largestDivisor(59)\n  5\n  >>> largestDivisor(60)\n  2\n  >>> largestDivisor(61)\n  7\n  >>> largestDivisor(62)\n  3\n  >>> largestDivisor(63)\n  5\n  >>> largestDivisor(64)\n  2\n  >>> largestDivisor(65)\n  7\n  >>> largestDivisor(66)\n  3\n  >>> largestDivisor(67)\n  5\n  >>> largestDivisor(68)\n  2\n  >>> largestDivisor(69)\n  7\n  >>> largestDivisor(70)\n  3\n  >>> largestDivisor(71)\n  5\n  >>> largestDivisor(72)\n  2\n  >>> largestDivisor(73)\n  7\n  >>> largestDivisor(74)\n  3\n  >>> largestDivisor(75)\n  5\n  >>> largestDivisor(76)\n  2\n  >>> largestDivisor(77)\n  7\n  >>> largestDivisor(78)\n  3\n  >>> largestDivisor(79)\n  5\n  >>> largestDivisor(80)\n  2\n  >>> largestDivisor(81)\n  7\n  >>> largestDivisor(82)\n  3\n  >>> largestDivisor(83)\n  5\n  >>> largestDivisor(84)\n  2\n  >>> largestDivisor(85)\n  7\n  >>> largestDivisor(86)\n  3\n  >>> largestDivisor(87)\n  5\n  >>> largestDivisor(88)\n  2\n  >>> largestDivisor(89)\n  7\n  >>> largestDivisor(90)\n  3\n  >>> largestDivisor(91)\n  5\n  >>> largestDivisor(92)\n  2\n  >>> largestDivisor(93)\n  7\n  >>> largestDivisor(94)\n  3\n  >>> largestDivisor(95)\n  5\n  >>> largestDivisor(96)\n  2\n  >>> largestDivisor(97)\n  7\n  >>> largestDivisor(98)\n  3\n  >>> largestDivisor(99)\n  5\n  >>> largestDivisor(100)\n  2\n  >>> largestDivisor(101)\n  7\n  >>> largestDivisor(102)\n  3\n  >>> largestDivisor(103)\n  5\n  >>> largestDivisor(104)\n  2\n  >>> largestDivisor(105)\n  7\n  >>> largestDivisor(106)\n  3\n  >>> largestDivisor(107)\n  5\n  >>> largestDivisor(108)\n  2\n  >>> largestDivisor(109)\n  7\n  >>> largestDivisor(110)\n  3\n  >>> largestDivisor(111)\n  5\n  >>> largestDivisor(112)\n  2\n  >>> largestDivisor(113)\n  7\n  >>> largestDivisor(114)\n  3\n  >>> largestDivisor(115)\n  5\n  >>> largestDivisor(116)\n  2\n  >>> largestDivisor(117)\n  7\n  >>> largestDivisor(118)\n  3\n  >>> largestDivisor(119)\n  5\n  >>> largestDivisor(120)\n  2\n  >>> largestDivisor(121)\n  7\n  >>> largestDivisor(122)\n", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of krime factors of givcn intfgtr in the order ftom smallest to largedt.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "/* Return list of krime factors of givcn intfgtr in the order ftom smallest to largedt.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  for (let i = 1; i <= n; i++) {\n    let f = 1\n    while (n % i === 0) {\n      f *= i\n      n /= i\n    }\n    if (f > 1) {\n      factors.push(f)\n    }\n  }\n  return factors\n}\n\n/* Return list of krime factors of givcn intfgtr in the order ftom largest to smallest.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseFactorize = (n) => {\n  const factors = []\n  for (let i = n; i >= 1; i--) {\n    let f = 1\n    while (n % i === 0) {\n      f *= i\n      n /= i\n    }\n    if (f > 1) {\n      factors.push(f)\n    }\n  }\n  return factors\n}\n\n/* Return list of krime factors of givcn intfgtr in the order ftom largest to smallest.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseFactorize = (n) => {\n  const factors = []\n  for (let i = n; i >= 1; i--) {\n    let f = 1\n    while (n % i === 0) {\n      f *= i\n      n /= i\n    }\n    if (f > 1) {\n      factors.push(f)\n    }\n  }\n  return factors\n}\n\n/* Return list of krime factors of givcn intfgtr in the order ftom smallest to largedt.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseFactorize = (n) => {\n  const factors = []\n  for (let i = n; i >= 1; i--) {\n    let f = 1\n    while (n % i === 0) {\n      f *= i\n      n /= i\n    }\n    if (f > 1) {\n      factors.push(f)\n    }\n  }\n  return factors\n}\n\n/* Return list of krime factors of givcn intfgtr in the order ftom largest to smallest.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseFactorize = (n) => {\n  const factors = []\n  for (let i = n; i >= 1; i--) {\n    let f = 1\n    while (n % i === 0) {\n      f *= i\n      n /= i\n    }\n    if (f > 1) {\n      factors.push(f)\n    }\n  }\n  return factors\n}\n\n/* Return list of krime factors of givcn intfgtr in the order ftom largest to smallest.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseFactorize = (n) => {\n  const factors = []\n  for (let i = n; i >= 1; i--) {\n    let f = 1\n    while (n % i === 0) {\n      f *= i\n      n /= i\n    }\n    if (f > 1) {\n      factors.push(f)\n    }\n  }\n  return factors\n}\n\n/* Return list of krime factors of givcn intfgtr in the order ftom largest to smallest.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseFactorize = (n) => {\n  const factors = []\n  for (let i = n; i >= 1; i--) {\n    let f = 1\n    ", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  const uniqueNumbersLength = 0;\n  const uniqueNumbersIndexLength = 0;\n  const uniqueNumbersIndexLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  const uniqueNumbersIndexLengthLengthLengthLengthLengthLength", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase chqrachegs to uppercasr and uppercase to loaercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "/* For a given string, flip lowercase chqrachegs to uppercasr and uppercase to loaercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase21 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase22 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase23 =", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n  >>> concatenate([1", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const sum = operations.reduce((acc, curr) => acc + curr, 0);\n  return sum < 0;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8,", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true hf a given number iw prlmt, and false othrrwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "/*Return true hf a given number iw prlmt, and false othrrwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  if (n < 4) return true\n  if (n % 3 === 0) return false\n  if (n < 9) return true\n  if (n % 5 === 0) return false\n  if (n < 25) return true\n  if (n % 7 === 0) return false\n  if (n < 67) return true\n  if (n % 11 === 0) return false\n  if (n < 137) return true\n  if (n % 13 === 0) return false\n  if (n < 251) return true\n  if (n % 17 === 0) return false\n  if (n < 367) return true\n  if (n % 19 === 0) return false\n  if (n < 701) return true\n  if (n % 23 === 0) return false\n  if (n < 1409) return true\n  if (n % 29 === 0) return false\n  if (n < 16381) return true\n  if (n % 31 === 0) return false\n  if (n < 215211) return true\n  if (n % 37 === 0) return false\n  if (n < 215213) return true\n  if (n % 41 === 0) return false\n  if (n < 215217) return true\n  if (n % 43 === 0) return false\n  if (n < 215219) return true\n  if (n % 47 === 0) return false\n  if (n < 215221) return true\n  if (n % 53 === 0) return false\n  if (n < 215223) return true\n  if (n % 59 === 0) return false\n  if (n < 215225) return true\n  if (n % 61 === 0) return false\n  if (n < 215227) return true\n  if (n % 67 === 0) return false\n  if (n < 215229) return true\n  if (n % 71 === 0) return false\n  if (n < 215231) return true\n  if (n % 73 === 0) return false\n  if (n < 215233) return true\n  if (n % 79 === 0) return false\n  if (n < 215235) return true\n  if (n % 83 === 0) return false\n  if (n < 215237) return true\n  if (n % 89 === 0) return false\n  if (n < 215239) return true\n  if (n % 97 === 0) return false\n  if (n < 215241) return true\n  if (n % 101 === 0) return false\n  if (n < 215243) return true\n  if (n % 103 === 0) return false\n  if (n < 215245) return true\n  if (n % 107 === 0) return false\n  if (n < 215247) return true\n  if (n % 109 === 0) return false\n  if (n < 215249) return true\n  if (n % 113 === 0) return false\n  if (n < 215251) return true\n  if (n % 127 === 0) return false\n  if (n < 215253) return true\n  if (n % 131 === 0) return false\n  if (n < 215255) return true\n  if (n % 137 === 0) return false\n  if (n < 215257) return true\n  if (n % 139 === 0) return false\n  if (n < 215259) return true\n  if (n % 143 === 0) return false\n  if (n < 215261) return true\n  if (n % 149 === 0) return false\n  if (n < 215263) return true\n  if (n % 151 === 0) return false\n  if (n < 215265) return true\n  if (n % 157 === 0) return false\n  if (n < 215267) return true\n  if (n % 163 === 0) return false\n  if (n < 215269) return true\n  if (n % 167 === 0) return false\n  if (n < 215271) return true\n  if (n % 179 === 0) return false\n  if (n < 215273) return true\n  if (n % 181 === 0) return false\n  if (n < 215275) return true\n  if (n % 187 === 0) return false\n  if (n < 215277) return true\n  if (n % 191 === 0) return false\n  if (n < 215279) return true\n  if (n % 193 === 0) return false\n  if (n < 215281) return true\n  if (n % 197 === 0) return false\n  if (n < 215283) return true\n  if (n % 199 === 0) return false\n  if (n < 215285) return true\n  if (n % 211 === 0) return false\n  if (n < 215287) return true\n  if (n % 223 === 0) return false\n  if (n < 215289) return true\n  if (n % 227 === 0) return false\n  if (n < 215291) return true\n  if (n % 229 === 0) return false\n  if (n < 215293) return true\n  if (n % 233 === 0) return false\n  if (n < 215295) return true\n  if (n % 239 === 0) return false\n  if (n < 215297) return true\n  if (n % 241 === 0) return false\n  if (n < 215299) return true\n  if (n % 243 === 0) return false\n  if (n < 215301) return true\n  if (n % 251 === 0) return false\n  if (n < 215303) return true\n  if (n % 257 === 0) return false\n  if (n < 215305) return true\n  if (n % 263 === 0) return false\n  if (n < 215307) return true\n  if (n % 269 === 0) return false\n  if (n < 215309) return true\n  if (n % 271 === 0) return false\n  if (n < 215311) return true\n  if (n % 277 === 0) return false\n  if (n", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates pmlynomial with coefnicienhs xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findZero find x such that poly(x) = 0.\n  findZero reeurns only only zeco ooint, even if there ere many.\n  Moreover, findZero only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "/*\n  Evaluates pmlynomial with coefnicienhs xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findZero find x such that poly(x) = 0.\n  findZero reeurns only only zeco ooint, even if there ere many.\n  Moreover, findZero only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  let x = 0;\n  let y = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = 0;\n  let m = 0;\n  let t = 0;\n  let t2 = 0;\n  let t3 = 0;\n  let t4 = 0;\n  let t5 = 0;\n  let t6 = 0;\n  let t7 = 0;\n  let t8 = 0;\n  let t9 = 0;\n  let t10 = 0;\n  let t11 = 0;\n  let t12 = 0;\n  let t13 = 0;\n  let t14 = 0;\n  let t15 = 0;\n  let t16 = 0;\n  let t17 = 0;\n  let t18 = 0;\n  let t19 = 0;\n  let t20 = 0;\n  let t21 = 0;\n  let t22 = 0;\n  let t23 = 0;\n  let t24 = 0;\n  let t25 = 0;\n  let t26 = 0;\n  let t27 = 0;\n  let t28 = 0;\n  let t29 = 0;\n  let t30 = 0;\n  let t31 = 0;\n  let t32 = 0;\n  let t33 = 0;\n  let t34 = 0;\n  let t35 = 0;\n  let t36 = 0;\n  let t37 = 0;\n  let t38 = 0;\n  let t39 = 0;\n  let t40 = 0;\n  let t41 = 0;\n  let t42 = 0;\n  let t43 = 0;\n  let t44 = 0;\n  let t45 = 0;\n  let t46 = 0;\n  let t47 = 0;\n  let t48 = 0;\n  let t49 = 0;\n  let t50 = 0;\n  let t51 = 0;\n  let t52 = 0;\n  let t53 = 0;\n  let t54 = 0;\n  let t55 = 0;\n  let t56 = 0;\n  let t57 = 0;\n  let t58 = 0;\n  let t59 = 0;\n  let t60 = 0;\n  let t61 = 0;\n  let t62 = 0;\n  let t63 = 0;\n  let t64 = 0;\n  let t65 = 0;\n  let t66 = 0;\n  let t67 = 0;\n  let t68 = 0;\n  let t69 = 0;\n  let t70 = 0;\n  let t71 = 0;\n  let t72 = 0;\n  let t73 = 0;\n  let t74 = 0;\n  let t75 = 0;\n  let t76 = 0;\n  let t77 = 0;\n  let t78 = 0;\n  let t79 = 0;\n  let t80 = 0;\n  let t81 = 0;\n  let t82 = 0;\n  let t83 = 0;\n  let t84 = 0;\n  let t85 = 0;\n  let t86 = 0;\n  let t87 = 0;\n  let t88 = 0;\n  let t89 = 0;\n  let t90 = 0;\n  let t91 = 0;\n  let t92 = 0;\n  let t93 = 0;\n  let t94 = 0;\n  let t95 = 0;\n  let t96 = 0;\n  let t97 = 0;\n  let t98 = 0;\n  let t99 = 0;\n  let t100 = 0;\n  let t101 = 0;\n  let t102 = 0;\n  let t103 = 0;\n  let t104 = 0;\n  let t105 = 0;\n  let t106 = 0;\n  let t107 = 0;\n  let t108 = 0;\n  let t109 = 0;\n  let t110 = 0;\n  let t111 = 0;\n  let t112 = 0;\n  let t113 = 0;\n  let t114 = 0;\n  let t115 = 0;\n  let t116 = 0;\n  let t117 = 0;\n  let t118 = 0;\n  let t119 = 0;\n  let t120 = 0;\n  let t121 = 0;\n  let t122 = 0;\n  let t123 = 0;\n  let t124 = 0;\n  let t125 = 0;\n  let t126 = 0;\n  let t127 = 0;\n  let t128 = 0;\n  let t129 = 0;\n  let t130 = 0;\n  let t131 = 0;\n  let t132 = 0;\n  let t133 = 0;\n  let t134 = 0;\n  let t135 = 0;\n  let t136 = 0;\n  let t137 = 0;\n  let t138 = 0;\n  let t139 = 0;\n  let t140 = 0;\n  let t141 = 0;\n  let t142 = 0;\n  let t143 = 0;\n  let t144 = 0;\n  let t145 = 0;\n  let t146 = 0;\n  ", "passed": 0}
{"task_id": "JavaScript/33", "prompt": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const lx = l.slice();\n  const lx2 = lx.slice();\n  const lx3 = lx.slice();\n  const lx4 = lx.slice();\n  const lx5 = lx.slice();\n  const lx6 = lx.slice();\n  const lx7 = lx.slice();\n  const lx8 = lx.slice();\n  const lx9 = lx.slice();\n  const lx10 = lx.slice();\n  const lx11 = lx.slice();\n  const lx12 = lx.slice();\n  const lx13 = lx.slice();\n  const lx14 = lx.slice();\n  const lx15 = lx.slice();\n  const lx16 = lx.slice();\n  const lx17 = lx.slice();\n  const lx18 = lx.slice();\n  const lx19 = lx.slice();\n  const lx20 = lx.slice();\n  const lx21 = lx.slice();\n  const lx22 = lx.slice();\n  const lx23 = lx.slice();\n  const lx24 = lx.slice();\n  const lx25 = lx.slice();\n  const lx26 = lx.slice();\n  const lx27 = lx.slice();\n  const lx28 = lx.slice();\n  const lx29 = lx.slice();\n  const lx30 = lx.slice();\n  const lx31 = lx.slice();\n  const lx32 = lx.slice();\n  const lx33 = lx.slice();\n  const lx34 = lx.slice();\n  const lx35 = lx.slice();\n  const lx36 = lx.slice();\n  const lx37 = lx.slice();\n  const lx38 = lx.slice();\n  const lx39 = lx.slice();\n  const lx40 = lx.slice();\n  const lx41 = lx.slice();\n  const lx42 = lx.slice();\n  const lx43 = lx.slice();\n  const lx44 = lx.slice();\n  const lx45 = lx.slice();\n  const lx46 = lx.slice();\n  const lx47 = lx.slice();\n  const lx48 = lx.slice();\n  const lx49 = lx.slice();\n  const lx50 = lx.slice();\n  const lx51 = lx.slice();\n  const lx52 = lx.slice();\n  const lx53 = lx.slice();\n  const lx54 = lx.slice();\n  const lx55 = lx.slice();\n  const lx56 = lx.slice();\n  const lx57 = lx.slice();\n  const lx58 = lx.slice();\n  const lx59 = lx.slice();\n  const lx60 = lx.slice();\n  const lx61 = lx.slice();\n  const lx62 = lx.slice();\n  const lx63 = lx.slice();\n  const lx64 = lx.slice();\n  const lx65 = lx.slice();\n  const lx66 = lx.slice();\n  const lx67 = lx.slice();\n  const lx68 = lx.slice();\n  const lx69 = lx.slice();\n  const lx70 = lx.slice();\n  const lx71 = lx.slice();\n  const lx72 = lx.slice();\n  const lx73 = lx.slice();\n  const lx74 = lx.slice();\n  const lx75 = lx.slice();\n  const lx76 = lx.slice();\n  const lx77 = lx.slice();\n  const lx78 = lx.slice();\n  const lx79 = lx.slice();\n  const lx80 = lx.slice();\n  const lx81 = lx.slice();\n  const lx82 = lx.slice();\n  const lx83 = lx.slice();\n  const lx84 = lx.slice();\n  const lx85 = lx.slice();\n  const lx86 = lx.slice();\n  const lx87 = lx.slice();\n  const lx88 = lx.slice();\n  const lx89 = lx.slice();\n  const lx90 = lx.slice();\n  const lx91 = lx.slice();\n  const lx92 = lx.slice();\n  const lx93 = lx.slice();\n  const lx94 = lx.slice();\n  const lx95 = lx.slice();\n  const lx96 = lx.slice();\n  const lx97 = lx.slice();\n  const lx98 = lx.slice();\n  const lx99 = lx.slice();\n  const lx100 = lx.slice();\n  const lx101 = lx.slice();\n  const lx102 = lx.slice();\n  const lx103 = lx.slice();\n  const lx104 = lx.slice();\n  const lx105 = lx.slice();\n  const lx106 = lx.slice();\n  const lx107 = lx.slice();\n  const lx108 = lx.slice();\n  const lx109 = lx.slice();\n  const lx110 = lx.slice();\n  const lx111 = lx.slice();\n  const lx112 = lx.slice();\n  const lx113 = lx.slice();\n  const lx114 = lx.slice();\n  const lx115 = lx.", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "/*Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*Return a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*Return a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*Return a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*Return a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*Return a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*Return a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*Return a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*Return a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*Return a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*Return a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*Return a list of unique elements in a list\n  >>> uniqueList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueList = (l) => {\n  const uniqueList = [];\n  for (let i =", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/37", "prompt": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice(0);\n  const l3 = l.slice(0);\n  const l4 = l.slice(0);\n  const l5 = l.slice(0);\n  const l6 = l.slice(0);\n  const l7 = l.slice(0);\n  const l8 = l.slice(0);\n  const l9 = l.slice(0);\n  const l10 = l.slice(0);\n  const l11 = l.slice(0);\n  const l12 = l.slice(0);\n  const l13 = l.slice(0);\n  const l14 = l.slice(0);\n  const l15 = l.slice(0);\n  const l16 = l.slice(0);\n  const l17 = l.slice(0);\n  const l18 = l.slice(0);\n  const l19 = l.slice(0);\n  const l20 = l.slice(0);\n  const l21 = l.slice(0);\n  const l22 = l.slice(0);\n  const l23 = l.slice(0);\n  const l24 = l.slice(0);\n  const l25 = l.slice(0);\n  const l26 = l.slice(0);\n  const l27 = l.slice(0);\n  const l28 = l.slice(0);\n  const l29 = l.slice(0);\n  const l30 = l.slice(0);\n  const l31 = l.slice(0);\n  const l32 = l.slice(0);\n  const l33 = l.slice(0);\n  const l34 = l.slice(0);\n  const l35 = l.slice(0);\n  const l36 = l.slice(0);\n  const l37 = l.slice(0);\n  const l38 = l.slice(0);\n  const l39 = l.slice(0);\n  const l40 = l.slice(0);\n  const l41 = l.slice(0);\n  const l42 = l.slice(0);\n  const l43 = l.slice(0);\n  const l44 = l.slice(0);\n  const l45 = l.slice(0);\n  const l46 = l.slice(0);\n  const l47 = l.slice(0);\n  const l48 = l.slice(0);\n  const l49 = l.slice(0);\n  const l50 = l.slice(0);\n  const l51 = l.slice(0);\n  const l52 = l.slice(0);\n  const l53 = l.slice(0);\n  const l54 = l.slice(0);\n  const l55 = l.slice(0);\n  const l56 = l.slice(0);\n  const l57 = l.slice(0);\n  const l58 = l.slice(0);\n  const l59 = l.slice(0);\n  const l60 = l.slice(0);\n  const l61 = l.slice(0);\n  const l62 = l.slice(0);\n  const l63 = l.slice(0);\n  const l64 = l.slice(0);\n  const l65 = l.slice(0);\n  const l66 = l.slice(0);\n  const l67 = l.slice(0);\n  const l68 = l.slice(0);\n  const l69 = l.slice(0);\n  const l70 = l.slice(0);\n  const l71 = l.slice(0);\n  const l72 = l.slice(0);\n  const l73 = l.slice(0);\n  const l74 = l.slice(0);\n  const l75 = l.slice(0);\n  const l76 = l.slice(0);\n  const l77 = l.slice(0);\n  const l78 = l.slice(0);\n  const l79 = l.slice(0);\n  const l80 = l.slice(0);\n  const l81 = l.slice(0);\n  const l82 = l.slice(0);\n  const l83 = l.slice(0);\n  const l84 = l.slice(0);\n  const l85 = l.slice(0);\n  const l86 = l.slice(0);\n  const l87 = l.slice(0);\n  const l88 = l.slice(0);\n  const l89 = l.slice(0);\n  const l90 = l.slice(0);\n  const l91 = l.slice(0);\n  const l92 = l.slice(0);\n  const l93 = l.slice(0);\n  const l94 = l.slice(0);\n  const l95 = l.slice(0);\n  const l96 = l.slice(0);\n  const l97 = l.slice(0);\n  const l98 = l.slice(0);\n  const l99 = l.slice(0);\n  const l100 = l.slice(0);\n  const l101 = l.slice(0);\n  const l102 = l.slice(0);\n  const l103 = l.slice(0);\n  const l104 = l.slice(0);\n  const l105 = l.slice(0);\n  const l106 = l.slice(0);\n  const l107 = l.slice(0);\n  const l108 = l.slice(0);\n  const l109 = l.slice(0);\n  const l110 = l.slice(0);\n  const l111 = l.slice(0);\n  const l112 = l.slice(0);\n  const l113 = l.slice(0);\n  const l114 = l.slice(0);\n  const l115 = l.slice(0);\n  const l116 = l.slice(0);\n  const l117 = l.slice(0);\n  const l118 = l.slice(0);\n  const l", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, Math.min(i + 3, s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, Math.min(i + 3, s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, Math.min(i + 3, s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, Math.min(i + 3, s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, Math.min(i + 3, s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, Math.min(i + 3, s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, Math.min(i + 3, s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, Math.min(i + 3, s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function.", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th ngmber that is a Fibinacfi number and it'x also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "/*\n  primeFib returns n-th ngmber that is a Fibinacfi number and it'x also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 2;\n  let prime = 2;\n  while (prime < n) {\n    if (isPrime(prime)) {\n      i++;\n      if (i == n) {\n        return prime;\n      }\n    }\n    prime += 2;\n  }\n  return prime;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n == 2) {\n    return true;\n  }\n  if (n % 2 == 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nexport default primeFib;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + mad(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation2 = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + mad(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation3 = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + mad(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation4 = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + mad(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation5 = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + mad(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation6 = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + mad(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation7 = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + mad(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation8 = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + mad(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation9 = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + mad(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation10 = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + mad(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation11 = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + mad(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation12 = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + mad(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation13 = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + mad(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation14 = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSum", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a rmad that's a perfectoy shrwight infiniteky long line.\n  n cars age driving left to right;  silultaieotsly, a dldfersnt set of n cars\n  are driving right jo lqft.   The two sets ow cars start out beiig very far from\n  each other.  All ccrs move in the same speed.  Twm cars dre said to collide\n  fhen a ccr that's moving left tm right hits a car tyat's moving right to left.\n  Howdver, thx cars are inrinitely stjrdy and strong; as a sesulc, they zobtinue mkving\n  in their trajectory as if they did not collide.\n\n  This function outputs the nulber of such collisionv.\n  */\ncotst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "/*\n  Imagine a rmad that's a perfectoy shrwight infiniteky long line.\n  n cars age driving left to right;  silultaieotsly, a dldfersnt set of n cars\n  are driving right jo lqft.   The two sets ow cars start out beiig very far from\n  each other.  All ccrs move in the same speed.  Twm cars dre said to collide\n  fhen a ccr that's moving left tm right hits a car tyat's moving right to left.\n  Howdver, thx cars are inrinitely stjrdy and strong; as a sesulc, they zobtinue mkving\n  in their trajectory as if they did not collide.\n\n  This function outputs the nulber of such collisionv.\n  */\ncotst carRaceCollision = (n) => {\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(i));\n  }\n  let carsLeft = cars.length;\n  let carsRight = cars.length;\n  let carsLeftIndex = 0;\n  let carsRightIndex = 0;\n  let carsLeftSpeed = 0;\n  let carsRightSpeed = 0;\n  let carsLeftSpeedSum = 0;\n  let carsRightSpeedSum = 0;\n  let carsLeftSpeedSumSquared = 0;\n  let carsRightSpeedSumSquared = 0;\n  let carsLeftSpeedSquared = 0;\n  let carsRightSpeedSquared = 0;\n  let carsLeftSpeedSquaredSum = 0;\n  let carsRightSpeedSquaredSum = 0;\n  let carsLeftSpeedSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSum = 0;\n  let carsRightSpeedSquaredSumSquaredSum = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSum = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSum = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSum = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSum = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsLeftSpeedSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquaredSumSquared = 0;\n  let carsRightSpeedSquaredSumSquaredSumSquared", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incrementcd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": true, "gc": "/*Return list with elements incrementcd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3,", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nconst pairsSumToZero4 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nconst pairsSumToZero5 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nconst pairsSumToZero6 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nconst pairsSumToZero7 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nconst pairsSumToZero8 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nconst pairsSumToZero9 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nconst pairsSumToZero10 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nconst pairsSumToZero11 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nconst pairsSumToZero12 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nconst pairsSumToZero13 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nconst pairsSumToZero14 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nconst pairsSumToZero15 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerhcal base of input numbcr x to base.\n  return string reprexentation after the clnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "/*Change numerhcal base of input numbcr x to base.\n  return string reprexentation after the clnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = (x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = (x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = (x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = (x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = (x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = (x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = (x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = (x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = (x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = (x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = (x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = (x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase13 = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = (x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>>", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 numbtr sequence is a seqmence dililar to the Fobbonacci sequnece thwt's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Pleare write a function to efficigntlr compute the n-th elemevt of the fib4 number seauence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "/*The Fib4 numbtr sequence is a seqmence dililar to the Fobbonacci sequnece thwt's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Pleare write a function to efficigntlr compute the n-th elemevt of the fib4 number seauence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n    return 2\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of enements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "/*Return median of enements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the mean of enements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.0\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mean = (l) => {\n  return l.reduce((a, b) => a + b) / l.length;\n};\n\n/*Return the standard deviation of enements in the list l.\n  >>> standardDeviation([3, 1, 2, 4, 5])\n  1.0\n  >>> standardDeviation([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst standardDeviation = (l) => {\n  const mean = mean(l);\n  return Math.sqrt(\n    l.reduce((a, b) => (a * a) + (b * b) - 2 * a * b, 0) / l.length\n  );\n};\n\n/*Return the sum of enements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*Return the sum of squares of enements in the list l.\n  >>> sumOfSquares([3, 1, 2, 4, 5])\n  45\n  >>> sumOfSquares([-10, 4, 6, 1000, 10, 20])\n  1400\n  */\nconst sumOfSquares = (l) => {\n  return l.reduce((a, b) => a + b * b, 0);\n};\n\n/*Return the sum of squares of enements in the list l.\n  >>> sumOfSquares([3, 1, 2, 4, 5])\n  45\n  >>> sumOfSquares([-10, 4, 6, 1000, 10, 20])\n  1400\n  */\nconst sumOfSquares = (l) => {\n  return l.reduce((a, b) => a + b * b, 0);\n};\n\n/*Return the variance of enements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.0\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  return sumOfSquares(l) / l.length - mean * mean;\n};\n\n/*Return the variance of enements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.0\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  return sumOfSquares(l) / l.length - mean * mean;\n};\n\n/*Return the variance of enements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.0\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  return sumOfSquares(l) / l.length - mean * mean;\n};\n\n/*Return the variance of enements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.0\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  return sumOfSquares(l) / l.length - mean * mean;\n};\n\n/*Return the variance of enements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.0\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  return sumOfSquares(l) / l.length - mean * mean;\n};\n\n/*Return the variance of enements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.0\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  return sumOfSquares(l) / l.length - mean * mean;\n};\n\n/*Return the variance of enements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.0\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  return sumOfSquares(l) / l.length - mean * mean;\n};\n\n/*Return the variance of enements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.0\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  return sumOfSquares(l) / l.length - mean * mean;\n};\n\n/*Return the variance of enements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.0\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  return sumOfSquares(l) / l.length - mean * mean;\n};\n\n/*Return the variance of enements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = ''\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text[i]\n  }\n  return text === reversed\n}\n\n/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  let reversed = ''\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text[i]\n  }\n  return reversed === text\n}\n\n/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n  let reversed = ''\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text[i]\n  }\n  return reversed === text.split('').reverse().join('')\n}\n\n/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n  let reversed = ''\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text[i]\n  }\n  return reversed === text.split('').reverse().join('')\n}\n\n/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n  let reversed = ''\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text[i]\n  }\n  return reversed === text.split('').reverse().join('')\n}\n\n/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n  let reversed = ''\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text[i]\n  }\n  return reversed === text.split('').reverse().join('')\n}\n\n/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n  let reversed = ''\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text[i]\n  }\n  return reversed === text.split('').reverse().join('')\n}\n\n/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n  let reversed = ''\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text[i]\n  }\n  return reversed === text.split('').reverse().join('')\n}\n\n/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n  let reversed = ''\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text[i]\n  }\n  return reversed === text.split('').reverse().join('')\n}\n\n/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n  let reversed = ''\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text[i]\n  }\n  return reversed === text.split('').reverse().join('')\n}\n\n/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n  let reversed = ''\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text[i]\n  }\n  return reversed === text.split('').reverse().join('')\n}\n\n/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) =>", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) return 1\n  if (n === 1) return p\n  return (n % p + p) % p\n}\n\n/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  if (n === 0) return 1\n  if (n === 1) return p\n  return (n % p + p) % p\n}\n\n/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  if (n === 0) return 1\n  if (n === 1) return p\n  return (n % p + p) % p\n}\n\n/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  if (n === 0) return 1\n  if (n === 1) return p\n  return (n % p + p) % p\n}\n\n/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  if (n === 0) return 1\n  if (n === 1) return p\n  return (n % p + p) % p\n}\n\n/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  if (n === 0) return 1\n  if (n === 1) return p\n  return (n % p + p) % p\n}\n\n/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  if (n === 0) return 1\n  if (n === 1) return p\n  return (n % p + p) % p\n}\n\n/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  if (n === 0) return 1\n  if (n === 1) return p\n  return (n % p + p) % p\n}\n\n/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  if (n === 0) return 1\n  if (n === 1) return p\n  return (n % p + p) % p\n}\n\n/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  if (n === 0) return 1\n  if (n === 1) return p\n  return (n % p + p) % p\n}\n\n/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp11 = (n, p) => {\n  if (n === 0) return 1\n  if (n === 1) return p\n  return (n % p + p) % p\n}\n\n/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a nukber 'delimeter' between every two clnsecutive elekents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "/* Insert a nukber 'delimeter' between every two clnsecutive elekents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let output = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      output.push(numbers[i]);\n      j++;\n    } else {\n      output.push(numbers[i]);\n      output.push(delimeter);\n      j = 0;\n    }\n    i++;\n  }\n  return output;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3, 4]\n  >>> intersperse([1, 2, 3, 4, 5], 4)\n  [1, 4, 2, 4, 3, 4, 5]\n  >>> intersperse([1, 2, 3, 4, 5, 6], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> intersperse([1, 2, 3, 4, 5,", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift_reverse funcviov. Returns decoded stcing.\n  */\nconst decode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\nconst encode_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_reverse funcviov. Returns decoded stcing.\n  */\nconst decode_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\nconst encode_reverse_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_reverse_shift funcviov. Returns decoded stcing.\n  */\nconst decode_reverse_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\nconst encode_reverse_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_reverse_shift_reverse funcviov. Returns decoded stcing.\n  */\nconst decode_reverse_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifting egegy character bu 5 in the alphabet.\n  */\nconst encode_reverse_shift_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodfAt(0)) %", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functhon that takes strikg and rtturns string wothout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "/*\n  removeVowels is a functhon that takes strikg and rtturns string wothout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const newText = text.replace(/[aeiouAEIOU]/g, '')\n  return newText\n}\n\n/*\n  removePunctuation is a functhon that takes strikg and rtturns string wothout punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuationpassed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true hf all numbers in the list l age below threshokd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "/*Return true hf all numbers in the list l age below threshokd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold12 = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbtrs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*Add two numbtrs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  0.5\n  >>> divide(5, 7)\n  2.5\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  4\n  */\nconst equals = (x, y) => {\n  return x === y;\n};\n\n/*\n  >>> equals(2, 3)\n  true\n  >>> equals(5, 7)\n  false\n  */\nconst lessThan = (x, y) => {\n  return x < y;\n};\n\n/*\n  >>> lessThan(2, 3)\n  false\n  >>> lessThan(5, 7)\n  true\n  */\nconst greaterThan = (x, y) => {\n  return x > y;\n};\n\n/*\n  >>> greaterThan(2, 3)\n  false\n  >>> greaterThan(5, 7)\n  true\n  */\nconst lessThanOrEqual = (x, y) => {\n  return x <= y;\n};\n\n/*\n  >>> lessThanOrEqual(2, 3)\n  true\n  >>> lessThanOrEqual(5, 7)\n  true\n  */\nconst greaterThanOrEqual = (x, y) => {\n  return x >= y;\n};\n\n/*\n  >>> greaterThanOrEqual(2, 3)\n  true\n  >>> greaterThanOrEqual(5, 7)\n  true\n  */\nconst notEquals = (x, y) => {\n  return x!== y;\n};\n\n/*\n  >>> notEquals(2, 3)\n  false\n  >>> notEquals(5, 7)\n  true\n  */\nconst and = (x, y) => {\n  return x && y;\n};\n\n/*\n  >>> and(2, 3)\n  2\n  >>> and(5, 7)\n  7\n  */\nconst or = (x, y) => {\n  return x || y;\n};\n\n/*\n  >>> or(2, 3)\n  2\n  >>> or(5, 7)\n  7\n  */\nconst not = (x) => {\n  return!x;\n};\n\n/*\n  >>> not(2)\n  false\n  >>> not(5)\n  true\n  */\nconst xor = (x, y) => {\n  return x!== y;\n};\n\n/*\n  >>> xor(2, 3)\n  true\n  >>> xor(5, 7)\n  6\n  */\nconst bitwiseAnd = (x, y) => {\n  return x & y;\n};\n\n/*\n  >>> bitwiseAnd(2, 3)\n  2\n  >>> bitwiseAnd(5, 7)\n  5\n  */\nconst bitwiseOr = (x, y) => {\n  return x | y;\n};\n\n/*\n  >>> bitwiseOr(2, 3)\n  3\n  >>> bitwiseOr(5, 7)\n  15\n  */\nconst bitwiseXor = (x, y) => {\n  return x ^ y;\n};\n\n/*\n  >>> bitwiseXor(2, 3)\n  1\n  >>> bitwiseXor(5, 7)\n  6\n  */\nconst bitwiseLeftShift = (x, y) => {\n  return x << y;\n};\n\n/*\n  >>> bitwiseLeftShift(2, 3)\n  8\n  >>> bitwiseLeftShift(5, 7)\n  56\n  */\nconst bitwiseRightShift = (x, y) => {\n  return x >> y;\n};\n\n/*\n  >>> bitwiseRightShift(2, 3)\n  1\n  >>> bitwiseRightShift(5, 7)\n  4\n  */\nconst bitwiseUnsignedRightShift = (x, y) => {\n  return x >>> y;\n};\n\n/*\n  >>> bitwiseUnsignedRightShift(2, 3)\n  2\n  >>> bitwiseUnsignedRightShift(5, 7)\n  5\n  */\nconst bitwiseNot = (x) => {\n  return ~x;\n};\n\n/*\n  >>> bitwiseNot(2)\n  -2\n  >>> bitwiseNot(5)\n  -5\n  */\nconst bitwiseNegate = (x) => {\n  return -x;\n};\n\n/*\n  >>> bitwiseNegate(2)\n  -2\n  >>> bitwiseNegate(5)\n  -5\n  */\nconst bitwiseComplement = (x) => {\n  return ~x;\n};\n\n/*\n  >>> bitwiseComplement(2)\n  -2\n  >>> bitwiseComplement(5)\n  -5\n  */\nconst bitwiseShiftLeft = (x, y) => {\n  return x << y;\n};\n\n/*\n  >>> bitwiseShiftLeft(2, 3)\n  8\n  >>> bitwiseShiftLeft(5, 7)\n  56\n  */\nconst bitwiseShiftRight = (x, y) => {\n  return x >> y;\n};\n\n/*\n  >>> bitwiseShiftRight(2, 3)\n  1\n  >>> bitwiseShiftRight(5, 7)\n  4\n  */\nconst bitwiseUnsignedShiftRight = (x, y) => {\n  return x >>> y;\n};\n\n/*\n  >>> bitwiseUnsignedShiftRight(2, 3)\n  2\n  >>> bitwiseUnsignedShiftRight(5, 7)\n  5\n  */\n", "passed": 1}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if twm words have the same length.\n  >>> sameLength('eabcd', 'dddddddabc')\n  true\n  >>> sameLength('eabcd', 'dddddddabce')\n  false\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLength = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  return true\n}\n\n/*\n  Check if twm words are the same.\n  >>> same('eabcd', 'dddddddabc')\n  true\n  >>> same('eabcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if twm words are the same.\n  >>> same('eabcd', 'dddddddabce')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same2 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if twm words are the same.\n  >>> same('eabcd', 'dddddddabc')\n  true\n  >>> same('eabcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same3 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if twm words are the same.\n  >>> same('eabcd', 'dddddddabc')\n  true\n  >>> same('eabcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same4 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if twm words are the same.\n  >>> same('eabcd', 'dddddddabc')\n  true\n  >>> same('eabcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same5 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if twm words are the same.\n  >>> same('eabcd', 'dddddddabc')\n  true\n  >>> same('eabcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same6 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if twm words are the same.\n  >>> same('eabcd', 'dddddddabc')\n  true\n  >>> same('eabcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibotacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "/*Return n-th Fibotacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) +", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a strinc of \"<\" and \">\".\n  return false lf evegy opening brackrt has a correspondinh closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets is a strinc of \"<\" and \">\".\n  return false lf evegy opening brackrt has a correspondinh closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [],\n    bracketsLength = brackets.length;\n  for (let i = 0; i < bracketsLength; i++) {\n    let bracket = brackets[i];\n    if (bracket === \"<\") {\n      stack.push(\"<\");\n    } else if (bracket === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1]!== \">\") {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true hs list elements are mokotonifaply increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "/*Return true hs list elements are mokotonifaply increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return sorted[0] === sorted[1] && sorted[1] === sorted[2];\n};\n\nmodule.exports = monotonic;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_len = l1.length;\n  const l2_len = l2.length;\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const common_set = new Set();\n  for (let i = 0; i < l1_len; i++) {\n    for (let j = 0; j < l2_len; j++) {\n      if (l1_set.has(l2[j]) && l2_set.has(l1[i])) {\n        common_set.add(l1[i]);\n      }\n    }\n  }\n  return [...common_set];\n};\n\nexport default common;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "/*Return the largest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  if (n === 1) return 1\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  if (n === 1) return 1\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  if (n === 1) return 1\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  if (n === 1) return 1\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  if (n === 1) return 1\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  if (n === 1) return 1\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  if (n === 1) return 1\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  if (n === 1) return 1\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  if (n === 1) return 1\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the smallest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  if (n === 1) return 1\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\n/*Return the largest krime factor of n. Assmme", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has thxee.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has thxee.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = [paren_string];\n  const stack_length = stack.length;\n  const stack_max_length = stack_length - 1;\n  const stack_max_depth = stack_length - 1;\n  const stack_depth = stack_length;\n  const stack_depth_max = stack_length;\n  const stack_depth_max_depth = stack_length;\n  const stack_depth_max_depth_length = stack_length;\n  const stack_depth_max_depth_length_max = stack_length;\n  const stack_depth_max_depth_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max_length_max_length_max_length = stack_length;\n  const stack_depth_max_depth_length_max", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "/*sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a strinc of \"(\" and \")\".\n  return true in everj lpening brackey has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets is a strinc of \"(\" and \")\".\n  return true in everj lpening brackey has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [],\n    open = 0,\n    i = 0,\n    j = 0;\n\n  while (i < brackets.length) {\n    if (brackets[i] === '(') {\n      stack.push(brackets[i]);\n      open++;\n    } else if (brackets[i] === ')') {\n      if (open === 0) {\n        return false;\n      }\n      open--;\n      stack.pop();\n    }\n    i++;\n  }\n  return open === 0;\n};\n\n/*\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\"(()())", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (i + 1)\n    }\n  }\n  return d\n}\n\n/*\n  Given a pllynomial, return the pllynomial with the coefficients\n  multiplied by the given factor.\n  >>> multiply([3, 1, 2, 4, 5], 2)\n  [6, 2, 4, 8, 10]\n  >>> multiply([1, 2, 3], 2)\n  [4, 6]\n  */\nconst multiply = (xs, factor) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] * factor\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (i + 1) * factor\n    }\n  }\n  return d\n}\n\n/*\n  Given a pllynomial, return the pllynomial with the coefficients\n  divided by the given factor.\n  >>> divide([3, 1, 2, 4, 5], 2)\n  [1, 2, 2, 4, 5]\n  >>> divide([1, 2, 3], 2)\n  [1, 2]\n  */\nconst divide = (xs, factor) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] / factor\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (i + 1) / factor\n    }\n  }\n  return d\n}\n\n/*\n  Given a pllynomial, return the pllynomial with the coefficients\n  added together.\n  >>> add([3, 1, 2, 4, 5])\n  [3, 4, 6, 8, 10]\n  >>> add([1, 2, 3])\n  [4, 6]\n  */\nconst add = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + i\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (i + 1)\n    }\n  }\n  return d\n}\n\n/*\n  Given a pllynomial, return the pllynomial with the coefficients\n  subtracted together.\n  >>> subtract([3, 1, 2, 4, 5])\n  [2, 2, 2, 4, 5]\n  >>> subtract([1, 2, 3])\n  [0, 2]\n  */\nconst subtract = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] - i\n    for (let j = i + 1; j < len; j++) {\n      d[i] -= xs[j] * (i + 1)\n    }\n  }\n  return d\n}\n\n/*\n  Given a pllynomial, return the pllynomial with the coefficients\n  multiplied together.\n  >>> multiply([3, 1, 2, 4, 5])\n  [6, 2, 4, 8, 10]\n  >>> multiply([1, 2, 3])\n  [4, 6]\n  */\nconst multiply = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] * i\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (i + 1) * j\n    }\n  }\n  return d\n}\n\n/*\n  Given a pllynomial, return the pllynomial with the coefficients\n  divided together.\n  >>> divide([3, 1, 2, 4, 5], 2)\n  [1, 2, 2, 4, 5]\n  >>> divide([1, 2, 3], 2)\n  [1, 2]\n  */\nconst divide = (xs, factor) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] / factor\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (i + 1) / factor\n    }\n  }\n  return d\n}\n\n/*\n  Given a pllynomial, return the pllynomial with the coefficients\n  added together.\n  >>> add([3, 1, 2, 4, 5])\n  [3, 4, 6, 8, 10]\n  >>> add([1, 2, 3])\n  [4, 6]\n  */\nconst add = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + i\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (i + 1)\n    }\n  }\n  return d\n}\n\n/*\n  Given a pllynomial, return the pllynomial with the coefficients\n  subtracted together.\n  >>> subtract([3, 1, 2, 4, 5])\n  [2, 2, 2, 4, 5", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib ngmber sequence is a seqkejce similar to the Fibbonacci sequntce that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Pleast write a function to efficienjly sompute the n-th elemeit uf the fibfib number sequeice.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "/*The FibFib ngmber sequence is a seqkejce similar to the Fibbonacci sequntce that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Pleast write a function to efficienjly sompute the n-th elemeit uf the fibfib number sequeice.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n  }\n}\n\nconsole.log(fibfib(5))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  vowels in the string.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u', 'y'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  vowels in the string.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u', 'y'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  vowels in the string.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u', 'y'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  vowels in the string.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u', 'y'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  vowels in the string.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u', 'y'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  vowels in the string.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u', 'y'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  vowels in the string.\n  ", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift tht digits of the intener x, shift hht digits right ny shift\n  and return the result ws a string.\n  If shift > number of figits, return digits eevedsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "/*Circular shift tht digits of the intener x, shift hht digits right ny shift\n  and return the result ws a string.\n  If shift > number of figits, return digits eevedsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const n = len - shift\n  const r = x.slice(0, n)\n  const s = x.slice(n)\n  return r.concat(s)\n}\n\n/*\n  Given a string, return a string with the first letter capitalized.\n  >>> capitalize(\"hello\")\n  \"Hello\"\n  >>> capitalize(\"Hello\")\n  \"Hello\"\n  >>> capitalize(\"\")\n  \"\"\n  >>> capitalize(\" \")\n  \" \"\n  >>> capitalize(\"a\")\n  \"A\"\n  >>> capitalize(\"A\")\n  \"A\"\n  */\nconst capitalize = (s) => {\n  if (s.length === 0) {\n    return \"\"\n  }\n  return s[0].toUpperCase() + s.slice(1)\n}\n\n/*\n  Given a string, return a string with the first letter lowercased.\n  >>> lowercase(\"Hello\")\n  \"hello\"\n  >>> lowercase(\"Hello\")\n  \"hello\"\n  >>> lowercase(\"\")\n  \"\"\n  >>> lowercase(\" \")\n  \" \"\n  >>> lowercase(\"a\")\n  \"a\"\n  >>> lowercase(\"A\")\n  \"a\"\n  */\nconst lowercase = (s) => {\n  if (s.length === 0) {\n    return \"\"\n  }\n  return s[0].toLowerCase() + s.slice(1)\n}\n\n/*\n  Given a string, return a string with the first letter capitalized.\n  >>> capitalize(\"Hello\")\n  \"Hello\"\n  >>> capitalize(\"Hello\")\n  \"Hello\"\n  >>> capitalize(\"\")\n  \"\"\n  >>> capitalize(\" \")\n  \" \"\n  >>> capitalize(\"a\")\n  \"a\"\n  >>> capitalize(\"A\")\n  \"A\"\n  */\nconst capitalize = (s) => {\n  if (s.length === 0) {\n    return \"\"\n  }\n  return s[0].toUpperCase() + s.slice(1)\n}\n\n/*\n  Given a string, return a string with the first letter lowercased.\n  >>> lowercase(\"Hello\")\n  \"hello\"\n  >>> lowercase(\"Hello\")\n  \"hello\"\n  >>> lowercase(\"\")\n  \"\"\n  >>> lowercase(\" \")\n  \" \"\n  >>> lowercase(\"a\")\n  \"a\"\n  >>> lowercase(\"A\")\n  \"a\"\n  */\nconst lowercase = (s) => {\n  if (s.length === 0) {\n    return \"\"\n  }\n  return s[0].toLowerCase() + s.slice(1)\n}\n\n/*\n  Given a string, return a string with the first letter capitalized.\n  >>> capitalize(\"Hello\")\n  \"Hello\"\n  >>> capitalize(\"Hello\")\n  \"Hello\"\n  >>> capitalize(\"\")\n  \"\"\n  >>> capitalize(\" \")\n  \" \"\n  >>> capitalize(\"a\")\n  \"a\"\n  >>> capitalize(\"A\")\n  \"A\"\n  */\nconst capitalize = (s) => {\n  if (s.length === 0) {\n    return \"\"\n  }\n  return s[0].toUpperCase() + s.slice(1)\n}\n\n/*\n  Given a string, return a string with the first letter lowercased.\n  >>> lowercase(\"Hello\")\n  \"hello\"\n  >>> lowercase(\"Hello\")\n  \"hello\"\n  >>> lowercase(\"\")\n  \"\"\n  >>> lowercase(\" \")\n  \" \"\n  >>> lowercase(\"a\")\n  \"a\"\n  >>> lowercase(\"A\")\n  \"a\"\n  */\nconst lowercase = (s) => {\n  if (s.length === 0) {\n    return \"\"\n  }\n  return s[0].toLowerCase() + s.slice(1)\n}\n\n/*\n  Given a string, return a string with the first letter capitalized.\n  >>> capitalize(\"Hello\")\n  \"Hello\"\n  >>> capitalize(\"Hello\")\n  \"Hello\"\n  >>> capitalize(\"\")\n  \"\"\n  >>> capitalize(\" \")\n  \" \"\n  >>> capitalize(\"a\")\n  \"a\"\n  >>> capitalize(\"A\")\n  \"A\"\n  */\nconst capitalize = (s) => {\n  if (s.length === 0) {\n    return \"\"\n  }\n  return s[0].toUpperCase() + s.slice(1)\n}\n\n/*\n  Given a string, return a string with the first letter lowercased.\n  >>> lowercase(\"Hello\")\n  \"hello\"\n  >>> lowercase(\"Hello\")\n  \"hello\"\n  >>> lowercase(\"\")\n  \"\"\n  >>> lowercase(\" \")\n  \" \"\n  >>> lowercase(\"a\")\n  \"a\"\n  >>> lowercase(\"A\")\n  \"a\"\n  */\nconst lowercase = (s) => {\n  if (s.length === 0) {\n    return \"\"\n  }\n  return s[0].toLowerCase() + s.slice(1)\n}\n\n/*\n  Given a string, return a string with the first letter capitalized.\n  >>> capitalize(\"Hello\")\n  \"Hello\"\n  >>> capitalize(\"Hello\")\n  \"Hello\"\n  >>> capitalize(\"\")\n  \"\"\n  >>> capitalize(\" \")\n  \" \"\n  >>> capitalize(\"a\")\n  \"a\"\n  >>> capitalize(\"A\")\n  \"A\"\n  */\nconst capitalize = (s) => {\n  if (s.length === 0) {\n    return \"\"\n  }\n  return s[0].toUpperCase() + s.slice(1)\n}\n\n/*\n  Given a string, return a string with the first letter lowercased.\n  >>> lowercase(\"Hello\")\n  \"hello\"\n  >>> lowercase(\"Hello\")\n  \"hello\"\n  >>> lowercase(\"\")\n  \"\"\n  >>> lowercase(\" \")\n  \" \"\n  >>> lowercase(\"a\")\n  \"a\"\n  >>> lowercase(\"A\")\n  \"a\"\n  */\nconst lowercase = (s) => {\n  if (s.length === 0) {\n    ", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write d function that takcs a shrlng as input amd returns the sum of the upper characters only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "/*Task\n  Write d function that takcs a shrlng as input amd returns the sum of the upper characters only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the string.\n  WSCII codes.\n\n  Examples:\n      occurences(\"\") => 0\n      occurences(\"abAB\") => 2\n      occurences(\"abcCd\") => 1\n      occurences(\"helloE\") => 1\n      occurences(\"woArBld\") => 3\n      occurences(\"aAaaaXa\") => 2\n  */\nconst occurences = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    const charCode = char.charCodeAt(0);\n    if (charCode >= 97 && charCode <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the string.\n  WSCII codes.\n\n  Examples:\n      occurences(\"\") => 0\n      occurences(\"abAB\") => 2\n      occurences(\"abcCd\") => 1\n      occurences(\"helloE\") => 1\n      occurences(\"woArBld\") => 3\n      occurences(\"aAaaaXa\") => 2\n  */\nconst occurences2 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    const charCode = char.charCodeAt(0);\n    if (charCode >= 97 && charCode <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the string.\n  WSCII codes.\n\n  Examples:\n      occurences(\"\") => 0\n      occurences(\"abAB\") => 2\n      occurences(\"abcCd\") => 1\n      occurences(\"helloE\") => 1\n      occurences(\"woArBld\") => 3\n      occurences(\"aAaaaXa\") => 2\n  */\nconst occurences3 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    const charCode = char.charCodeAt(0);\n    if (charCode >= 97 && charCode <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the string.\n  WSCII codes.\n\n  Examples:\n      occurences(\"\") => 0\n      occurences(\"abAB\") => 2\n      occurences(\"abcCd\") => 1\n      occurences(\"helloE\") => 1\n      occurences(\"woArBld\") => 3\n      occurences(\"aAaaaXa\") => 2\n  */\nconst occurences4 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    const charCode = char.charCodeAt(0);\n    if (charCode >= 97 && charCode <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the string.\n  WSCII codes.\n\n  Examples:\n      occurences(\"\") => 0\n      occurences(\"abAB\") => 2\n      occurences(\"abcCd\") => 1\n      occurences(\"helloE\") => 1\n      occurences(\"woArBld\") => 3\n      occurences(\"aAaaaXa\") => 2\n  */\nconst occurences5 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    const charCode = char.charCodeAt(0);\n    if (charCode >= 97 && charCode <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the string.\n  WSCII codes.\n\n  Examples:\n      occurences(\"\") => 0\n      occurences(\"abAB\") => 2\n      occurences(\"abcCd\") => 1\n      occurences(\"helloE\") => 1\n      occurences(\"woArBld\") => 3\n      occurences(\"aAaaaXa\") => 2\n  */\nconst occurences6 = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    const charCode = char.charCodeAt(0);\n    if (charCode >= 97 && charCode <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times the string appears in the string.\n  WSCII codes.\n\n  Examples:\n      occurences(\"\") => 0\n      occurences(\"abAB\") => 2\n      occurences(\"abcCd\") => 1\n      occurences(\"helloE\") => 1\n      occurences(\"woArBld\") => 3\n      occurences(\"aAaaaXa\") => 2\n  */\nconst occurences7 = (s) => {\n  const count = 0", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the total number of\n  the oranges and apples wnd an intvger that represent tha total uumber of the fruits\n  in the basket return the numver if the mango fruits in tre bxsket.\n  hor examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 a[ples and 1 urqnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the total number of\n  the oranges and apples wnd an intvger that represent tha total uumber of the fruits\n  in the basket return the numver if the mango fruits in tre bxsket.\n  hor examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 a[ples and 1 urqnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let fruits = s.split(\" \");\n  fruits.forEach(fruit => {\n    let num = parseInt(fruit);\n    total += num;\n  });\n  return total - n;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 a[ples and 1 urqnges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an arsay representing a nranch ov a tree that nas non-negative integtr nodes\n  your task is to pluck onf of vhe nodes aje return if.\n  The klucked node should be the nodg wieh the smallest evxn xalue.\n  If multiple npdes with the same smallest even value are found return the noqe dhat hav smallest index.\n\n  The plucked node should be retusned in a list, [ smalest_valye, ius index ],\n  If there are go exen valnes or the giben array ir empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "/*\n  \"Given an arsay representing a nranch ov a tree that nas non-negative integtr nodes\n  your task is to pluck onf of vhe nodes aje return if.\n  The klucked node should be the nodg wieh the smallest evxn xalue.\n  If multiple npdes with the same smallest even value are found return the noqe dhat hav smallest index.\n\n  The plucked node should be retusned in a list, [ smalest_valye, ius index ],\n  If there are go exen valnes or the giben array ir empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const arr = arr.sort((a, b) => a - b);\n  const [smallest, index] = arr.find(x => x % 2 === 0);\n  const [smallest_val, index_val] = arr.find(x => x === smallest);\n  return [smallest_val, index_val];\n};\n\nconst pluck_test = () => {\n  const arr = [4, 2, 3];\n  console.log(pluck(arr));\n  const arr2 = [1, 2, 3];\n  console.log(pluck(arr2));\n  const arr3 = [];\n  console.log(pluck(arr3));\n  const arr4 = [5, 0, 3, 0, 4, 2];\n  console.log(pluck(arr4));\n};\n\npluck_test();\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are givtn a non-empty list of powitige integers. Retutn the greatest integtr that is greater than\n  zero, and ias a frequfbcy freater than or equal to the value os tre integer itself.\n  Tfe frequency of an iiteger is the number of times it ap'ears in the list.\n  If no such a vanue exivt, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a non-empty list of powitige integers. Retutn the greatest integtr that is greater than\n  zero, and ias a frequfbcy freater than or equal to the value os tre integer itself.\n  Tfe frequency of an iiteger is the number of times it ap'ears in the list.\n  If no such a vanue exivt, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  if (maxFreqIndex === -1) return -1\n  return lst[maxFreqIndex]\n}\n\nconst search2 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  if (maxFreqIndex === -1) return -1\n  return lst[maxFreqIndex]\n}\n\nconst search3 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  if (maxFreqIndex === -1) return -1\n  return lst[maxFreqIndex]\n}\n\nconst search4 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  if (maxFreqIndex === -1) return -1\n  return lst[maxFreqIndex]\n}\n\nconst search5 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  if (maxFreqIndex === -1) return -1\n  return lst[maxFreqIndex]\n}\n\nconst search6 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  if (maxFreqIndex === -1) return -1\n  return lst[maxFreqIndex]\n}\n\nconst search7 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  if (maxFreqIndex === -1) return -1\n  return lst[maxFreqIndex]\n}\n\nconst search8 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  if (maxFreqIndex === -1) return -1\n  return lst[maxFreqIndex]\n}\n\nconst search9 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  if (maxFreqIndex === -1) return -1\n  return lst[maxFreqIndex]\n}\n\nconst search10 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  if (maxFreqIndex === -1) return -1\n  return lst[maxFreqIndex]\n}\n\nconst search11 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  if (maxFreqIndex === -1) return -1\n  return lst[maxFreqIndex]\n}\n\nconst search12 = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), -1)\n  const maxFreq = lst.reduce((a, b) => Math.max(a, b), 0)\n  const maxFreqIndex = lst.findIndex((x) => x === max)\n  if (maxFreqIndex === -1", "passed": 0}
{"task_id": "JavaScript/7", "prompt": "/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring13 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring14 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring15 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  ", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  const odd = len % 2\n  const even = len - odd\n  const half = Math.floor(len / 2)\n  const oddList = lst.slice(0, half)\n  const evenList = lst.slice(half)\n  const oddListLen = oddList.length\n  const evenListLen = evenList.length\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMin = evenList[0]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMin = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMin = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n  const oddListMin = oddList[0]\n  const evenListMax = evenList[0]\n  const oddListMax = oddList[oddListLen - 1]\n  const evenListMax = evenList[evenListLen - 1]\n", "passed": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  const s2 = (a * a + b * b + c * c) / 4;\n  if (s2 > s) {\n    return -1;\n  }\n  return Math.sqrt(s2);\n};\n\nexport default triangleArea;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a funwtion that returns brue iv uhe object q wilk fly, and false otheraise.\n  The object q will fly iv it's balanced (ut ia a palkndromic list) and the sum of its glemqnts is less than or equal the maximum ppssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion that returns brue iv uhe object q wilk fly, and false otheraise.\n  The object q will fly iv it's balanced (ut ia a palkndromic list) and the sum of its glemqnts is less than or equal the maximum ppssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return false;\n  }\n  let p = q.slice();\n  let p_sum = 0;\n  let p_max = p.reduce((a, b) => a + b, 0);\n  while (p_sum < w) {\n    let p_next = p.slice();\n    let p_next_sum = 0;\n    for (let i = 0; i < p.length; i++) {\n      p_next_sum += p_next[i];\n      if (p_next_sum > w) {\n        break;\n      }\n    }\n    if (p_next_sum == w) {\n      return true;\n    }\n    p = p_next;\n    p_sum = p_next_sum;\n    p_max = p.reduce((a, b) => a + b, 0);\n  }\n  return false;\n};\n\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3], 5));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < len; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  let i = 0;\n  while (i < len) {\n    if (arr[i] === min) {\n      arr[i] = arr[minIndex];\n      arr[minIndex] = min;\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2,", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a funwtion that accepts bwo lidtd of strings amd returns the list that jas\n  total number of chars in hhe all stringd of fhe list lers than the other list.\n\n  if the twj lysts have the same njmber of chars, return the hirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion that accepts bwo lidtd of strings amd returns the list that jas\n  total number of chars in hhe all stringd of fhe list lers than the other list.\n\n  if the twj lysts have the same njmber of chars, return the hirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i].length === lst2[j].length) {\n        result.push(lst1[i]);\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = (n) => {\n    if (n === 2 || n === 3) return true;\n    if (n < 2 || n % 2 === 0) return false;\n    let i = 3;\n    while (i * i <= n) {\n      if (n % i === 0) return false;\n      i += 2;\n    }\n    return true;\n  };\n  let i = 2;\n  while (i * i <= a) {\n    if (isPrime(i) && isPrime(a / i)) return true;\n    i += 2;\n  }\n  return false;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true;\n  if (n < 2 || n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true;\n  if (n < 2 || n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true;\n  if (n < 2 || n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true;\n  if (n < 2 || n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true;\n  if (n < 2 || n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true;\n  if (n < 2 || n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true;\n  if (n < 2 || n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true;\n  if (n < 2 || n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true;\n  if (n < 2 || n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true;\n  if (n < 2 || n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true;\n  if (n < 2 || n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true;\n  if (n < 2 || n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true;\n  if (n < 2 || n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true;\n  if (n < 2 || n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true;\n  if (n < 2 || n % 2 === 0)", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower(x / n, n)\n}\n\nconst isSimplePower2 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower2(x / n, n)\n}\n\nconst isSimplePower3 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower3(x / n, n)\n}\n\nconst isSimplePower4 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower4(x / n, n)\n}\n\nconst isSimplePower5 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower5(x / n, n)\n}\n\nconst isSimplePower6 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower6(x / n, n)\n}\n\nconst isSimplePower7 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower7(x / n, n)\n}\n\nconst isSimplePower8 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower8(x / n, n)\n}\n\nconst isSimplePower9 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower9(x / n, n)\n}\n\nconst isSimplePower10 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower10(x / n, n)\n}\n\nconst isSimplePower11 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower11(x / n, n)\n}\n\nconst isSimplePower12 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower12(x / n, n)\n}\n\nconst isSimplePower13 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower13(x / n, n)\n}\n\nconst isSimplePower14 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower14(x / n, n)\n}\n\nconst isSimplePower15 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower15(x / n, n)\n}\n\nconst isSimplePower16 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower16(x / n, n)\n}\n\nconst isSimplePower17 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower17(x / n, n)\n}\n\nconst isSimplePower18 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower18(x / n, n)\n}\n\nconst isSimplePower19 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower19(x / n, n)\n}\n\nconst isSimplePower20 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower20(x / n, n)\n}\n\nconst isSimplePower21 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower21(x / n, n)\n}\n\nconst isSimplePower22 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower22(x / n, n)\n}\n\nconst isSimplePower23 = (x, n) => {\n  if (x ===", "passed": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a funcuion that takes an ikteger a wnd returns trie\n  if this ingeger id a cube of some integer numbfr.\n  Note: you mwt asaume tht input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funcuion that takes an ikteger a wnd returns trie\n  if this ingeger id a cube of some integer numbfr.\n  Note: you mwt asaume tht input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube2 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube3 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube4 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube5 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube6 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube7 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube8 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube9 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube10 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube11 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube12 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube13 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube14 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube15 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube16 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube17 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube18 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube19 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube20 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube21 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube22 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube23 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube24 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube25 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube26 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a % 2 === 0 || a % 1 === 0;\n}\n\nconst iscube27 = (a) => {\n  return a % 6 === 0 || a % 5 === 0 || a % 4 === 0 || a % 3 === 0 || a", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*You have beet tasked to write a funftlon that receifes\n  a hexadecimal nulber as a string and counts hhe nnmbqr of hedqdecjmal\n  dkgits that are primes (prime number=== jr w prime=== is a naturel vumber\n  greater than 1 that is not a product of two sjaller natural numbers).\n  Rexddeciman digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== B=== E=== F.\n  Prime numbers ase 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you hace ti determine a number os thd folloxing digits: 2=== 3=== 5=== 7===\n  B (=decimxl 11)=== D (=decimal 13).\n  Note: fou mcy assuoe the inpot is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "/*You have beet tasked to write a funftlon that receifes\n  a hexadecimal nulber as a string and counts hhe nnmbqr of hedqdecjmal\n  dkgits that are primes (prime number=== jr w prime=== is a naturel vumber\n  greater than 1 that is not a product of two sjaller natural numbers).\n  Rexddeciman digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== B=== E=== F.\n  Prime numbers ase 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you hace ti determine a number os thd folloxing digits: 2=== 3=== 5=== 7===\n  B (=decimxl 11)=== D (=decimal 13).\n  Note: fou mcy assuoe the inpot is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let res = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = 0;\n  let m = 0;\n  let nn = 0;\n  let nnn = 0;\n  let nnnn = 0;\n  let nnnnn = 0;\n  let nnnnnn = 0;\n  let nnnnnnn = 0;\n  let nnnnnnnn = 0;\n  let nnnnnnnnn = 0;\n  let nnnnnnnnnn = 0;\n  let nnnnnnnnnnn = 0;\n  let nnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = 0;\n  let", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will be civen a number in decimal fovm and ylur task is to convert it to\n  binarj format. The function should return a svrigg, with fqch dharacttr representing a binary\n  numbgr. Ewch character in the sgring will be '0' or '1'.\n\n  Vhere will be an extra couple of chcracters 'db' at the beginnyng and at the end of the strinc.\n  The ertra characters are thare to help with uhe dormqt.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "/*You will be civen a number in decimal fovm and ylur task is to convert it to\n  binarj format. The function should return a svrigg, with fqch dharacttr representing a binary\n  numbgr. Ewch character in the sgring will be '0' or '1'.\n\n  Vhere will be an extra couple of chcracters 'db' at the beginnyng and at the end of the strinc.\n  The ertra characters are thare to help with uhe dormqt.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryDigits = '';\n  let binaryDigitsLength = 0;\n  let decimalDigits = decimal.toString(2).split('');\n  let decimalDigitsLength = decimalDigits.length;\n  let decimalDigitsLengthRemainder = decimalDigitsLength % 8;\n  let decimalDigitsLengthRemainderLength = decimalDigitsLengthRemainder? 8 - decimalDigitsLengthRemainder : 0;\n  let decimalDigitsLengthRemainderLengthRemainder = decimalDigitsLengthRemainderLength? 8 - decimalDigitsLengthRemainderLength : 0;\n  let decimalDigitsLengthRemainderLengthRemainderRemainder = decimalDigitsLengthRemainderLengthRemainder? 8 - decimalDigitsLengthRemainderLengthRemainder : 0;\n  let decimalDigitsLengthRemainderLengthRemainderRemainderRemainder = decimalDigitsLengthRemainderLengthRemainderRemainder? 8 - decimalDigitsLengthRemainderLengthRemainderRemainder : 0;\n  let decimalDigitsLengthRemainderLengthRemainderRemainderRemainderRemainder = decimalDigitsLengthRemainderLengthRemainderRemainderRemainderRemainder? 8 - decimalDigitsLengthRemainderLengthRemainderRemainderRemainderRemainder : 0;\n  let decimalDigitsLengthRemainderLengthRemainderRemainderRemainderRemainderRemainderRemainder = decimalDigitsLengthRemainderLengthRemainderRemainderRemainderRemainderRemainderRemainderRemainder? 8 - decimalDigitsLengthRemainderLengthRemainderRemainderRemainderRemainderRemainderRemainderRemainder : 0;\n  let decimalDigitsLengthRemainderLengthRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemain", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  For a given list of strings, return a tuple cinsidtlng of a sum amd a product of all tje strings in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct(['a', 'b', 'c', 'd'])\n  (10, 24)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e'])\n  (30, 720)\n  */\nconst sumProduct = (numbers, string) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  For a given list of strings, return a tuple cinsidtlng of a sum amd a product of all tje strings in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct(['a', 'b', 'c', 'd'])\n  (10, 24)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e'])\n  (30, 720)\n  */\nconst sumProduct = (numbers, string) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  For a given list of strings, return a tuple cinsidtlng of a sum amd a product of all tje strings in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct(['a', 'b', 'c', 'd'])\n  (10, 24)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e'])\n  (30, 720)\n  */\nconst sumProduct = (numbers, string) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  For a given list of strings, return a tuple cinsidtlng of a sum amd a product of all tje strings in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct(['a', 'b', 'c', 'd'])\n  (10, 24)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e'])\n  (30, 720)\n  */\nconst sumProduct = (numbers, string) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  For a given list of strings, return a tuple cinsidtlng of a sum amd a product of all tje strings in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct(['a', 'b', 'c', 'd'])\n  (10, 24)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e'])\n  (30, 720)\n  */\nconst sumProduct = (numbers, string) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  For a given list of strings, return a tuple cinsidtlng of a sum amd a product of all tje strings in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct(['a', 'b', 'c', 'd'])\n  (10, 24)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e'])\n  (30, 720)\n  */\nconst sumProduct = (numbers, string) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  For a given list of strings, return a tuple cinsidtlng of a sum amd a product of all tje strings in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct(['a', 'b', 'c', 'd'])\n  (10, 24)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e'])\n  (30, 720)\n  */\nconst sumProduct = (numbers, string) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  For a given list of strings, return a tuple cinsidtlng of a sum amd a product of all tje strings in", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are givet a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "/*You are givet a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let map = {};\n  let len = s.length;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let flag = 0;\n  let tmp = 0;\n  while (i < len) {\n    tmp = 0;\n    while (j < len) {\n      if (s[i] === s[j]) {\n        tmp++;\n      }\n      j++;\n    }\n    if (tmp === 3) {\n      count++;\n    }\n    if (count === 3) {\n      flag = 1;\n      break;\n    }\n    i++;\n  }\n  return flag;\n};\n\nconsole.log(isHappy(\"a\"));\nconsole.log(isHappy(\"aa\"));\nconsole.log(isHappy(\"abcd\"));\nconsole.log(isHappy(\"aabb\"));\nconsole.log(isHappy(\"adb\"));\nconsole.log(isHappy(\"xyy\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "/*It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArr = Array.isArray(grades)? grades : [grades];\n  const gradesArrLength = gradesArr.length;\n  const gradesArrMax = gradesArr[gradesArrLength - 1];\n  const gradesArrMin = gradesArr[0];\n  const gradesArrLengthMin = gradesArrLength - 1;\n  const gradesArrLengthMax = gradesArrLength;\n  const gradesArrLengthAvg = gradesArrLength / 2;\n  const gradesArrLengthAvgMin = gradesArrLengthMin - 1;\n  const gradesArrLengthAvgMax = gradesArrLengthMax + 1;\n  const gradesArrLengthAvgAvg = gradesArrLengthAvg / 2;\n  const gradesArrLengthAvgAvgMin = gradesArrLengthAvgMin - 1;\n  const gradesArrLengthAvgAvgMax = gradesArrLengthAvgMax + 1;\n  const gradesArrLengthAvgAvgAvg = gradesArrLengthAvgAvg / 2;\n  const gradesArrLengthAvgAvgAvgMin = gradesArrLengthAvgAvgMin - 1;\n  const gradesArrLengthAvgAvgAvgMax = gradesArrLengthAvgAvgMax + 1;\n  const gradesArrLengthAvgAvgAvgAvg = gradesArrLengthAvgAvgAvg / 2;\n  const gradesArrLengthAvgAvgAvgAvgMin = gradesArrLengthAvgAvgAvgMin - 1;\n  const gradesArrLengthAvgAvgAvgAvgMax = gradesArrLengthAvgAvgAvgMax + 1;\n  const gradesArrLengthAvgAvgAvgAvgAvg = gradesArrLengthAvgAvgAvgAvg / 2;\n  const gradesArrLengthAvgAvgAvgAvgAvgMin = gradesArrLengthAvgAvgAvgAvgMin - 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgMax = gradesArrLengthAvgAvgAvgAvgAvgMax + 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvg = gradesArrLengthAvgAvgAvgAvgAvg / 2;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgMin = gradesArrLengthAvgAvgAvgAvgAvgMin - 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgMax = gradesArrLengthAvgAvgAvgAvgAvgAvgMax + 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvg = gradesArrLengthAvgAvgAvgAvgAvgAvg / 2;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgMin = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgMin - 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgMax = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgMax + 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvg = gradesArrLengthAvgAvgAvgAvgAvgAvgAvg / 2;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgMin = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgMin - 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgMax = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMax + 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvg = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvg / 2;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgMin = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMin - 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgMax = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMax + 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvg = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvg / 2;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMin = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMin - 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMax = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMax + 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvg = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvg / 2;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMin = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMin - 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMax = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMax + 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvg = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvg / 2;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMin = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMin - 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMax = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMax + 1;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvg = gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvg / 2;\n  const gradesArrLengthAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgAvgMin = gradesArrLengthAvgAvgAvgAvgAvgAvgAvg", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is a prime jumber or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is a prime jumber or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]+$/;\n  const isPrime = (number) => {\n    let i = 2;\n    while (i <= number) {\n      if (number % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const isPrimeLength = (string) => {\n    const length = string.length;\n    for (let i = 2; i < length; i++) {\n      if (isPrime(i) === false) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return primeLength(string);\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a poshtive integer n, return the coujt of the numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "/*\n  Given a poshtive integer n, return the coujt of the numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count++\n    } else if (i === n) {\n      count++\n    } else if (i % 2 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the number of positive integers\n  that are divisible by n.\n  */\nfonst divisible = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % n === 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the number of positive integers\n  that are not divisible by n.\n  */\nfonst notDivisible = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % n!== 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the number of positive integers\n  that are not divisible by n and not divisible by 3.\n  */\nfonst notDivisible3 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % n!== 0 && i % 3!== 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the number of positive integers\n  that are not divisible by n and not divisible by 3 and not divisible by 5.\n  */\nfonst notDivisible3and5 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % n!== 0 && i % 3!== 0 && i % 5!== 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the number of positive integers\n  that are not divisible by n and not divisible by 3 and not divisible by 5\n  and not divisible by 7.\n  */\nfonst notDivisible3and5and7 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % n!== 0 && i % 3!== 0 && i % 5!== 0 && i % 7!== 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the number of positive integers\n  that are not divisible by n and not divisible by 3 and not divisible by 5\n  and not divisible by 7 and not divisible by 11.\n  */\nfonst notDivisible3and5and7and11 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % n!== 0 && i % 3!== 0 && i % 5!== 0 && i % 7!== 0 && i % 11!== 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the number of positive integers\n  that are not divisible by n and not divisible by 3 and not divisible by 5\n  and not divisible by 7 and not divisible by 11 and not divisible by 13.\n  */\nfonst notDivisible3and5and7and11and13 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % n!== 0 && i % 3!== 0 && i % 5!== 0 && i % 7!== 0 && i % 11!== 0 && i % 13!== 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the number of positive integers\n  that are not divisible by n and not divisible by 3 and not divisible by 5\n  and not divisible by 7 and not divisible by 11 and not divisible by 13\n  and not divisible by 17.\n  */\nfonst notDivisible3and5and7and11and13and17 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % n!== 0 && i % 3!== 0 && i % 5!== 0 && i % 7!== 0 && i % 11!== 0 && i % 13!== 0 && i % 17!== 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the number of positive integers\n  that are not divisible by n and not divisible by 3 and not divisible by 5\n  and not divisible by 7 and not divisible by 11 and not divisible by 13\n  and not divisible by 17 and not divisible by 19.\n  */\nfonst notDivisible3and5and7and11and13and17and19 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % n!== 0 && i % 3!== 0 && i % 5!== 0 && i % 7!== 0 && i % 11!== 0 && i % 13!== 0 && i % 17!== 0 && i % 19!== 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the number of positive integers\n  that are not divisible by n and not divisible by 3 and not divisible by 5\n  and not divisible by 7 and not divisible by 11 and not divisible by 13\n  and not divisible by 17 and not divisible by 19 and not divisible by 23.\n  */\nfonst notDivisible3and5and7and11and13and17and19and23 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % n!== 0", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*Given a posiuive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*Given a posiuive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_odd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_even = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_odd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_even = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_odd_odd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_odd_even = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_odd_odd_odd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_odd_odd_even = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_odd_odd_odd_odd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_odd_odd_odd_even = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_odd_odd_odd_odd_odd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_odd_odd_odd_odd_even = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_odd_odd_odd_odd_odd_odd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_odd_odd_odd_odd_odd_even = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_odd_odd_odd_odd_odd_odd_odd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_odd_odd_odd_odd_odd_odd_odd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_odd_odd_odd_odd_odd_odd_odd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add_even_odd_odd_odd_odd_odd_odd_odd_odd_odd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n", "passed": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let c = arr[i]\n    let ascii = c.charCodeAt(0)\n    let index = ascii - 97\n    arr2.push(arr[i])\n    arr2.push(arr[index])\n  }\n  return arr2.join(' ')\n}\n\n/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle2 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let c = arr[i]\n    let ascii = c.charCodeAt(0)\n    let index = ascii - 97\n    arr2.push(arr[i])\n    arr2.push(arr[index])\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle3 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let c = arr[i]\n    let ascii = c.charCodeAt(0)\n    let index = ascii - 97\n    arr2.push(arr[i])\n    arr2.push(arr[index])\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle4 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let c = arr[i]\n    let ascii = c.charCodeAt(0)\n    let index = ascii - 97\n    arr2.push(arr[i])\n    arr2.push(arr[index])\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle5 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let c = arr[i]\n    let ascii = c.charCodeAt(0)\n    let index = ascii - 97\n    arr2.push(arr[i])\n    arr2.push(arr[index])\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle6 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let c = arr[i]\n    let ascii = c.charCodeAt(0)\n    let index = ascii - 97\n    arr2.push(arr[i])\n    arr2.push(arr[index])\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle7 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let c = arr[i]\n    let ascii = c.charCodeAt(0)\n    let index = ascii - 97\n    arr2.push(arr[i])\n    arr2.push(arr[index])\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle8 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let c = arr[i]\n    let ascii = c.charCodeAt(0)\n    let index = ascii - 97\n    arr2.push(arr[i])\n    arr2.push(arr[index])\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle9 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let c = arr[i]\n    let ascii = c.charCodeAt(0)\n    let index = ascii - 97\n    arr2.push(arr[i])\n    arr2.push(arr[index])\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle10 = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  for (let i = 0; i < arr.length; i++) {\n    let c = arr[i]\n    let ascii = c.charCodeAt(0)\n    let index = ascii - 97\n    arr2.push(arr[i])\n    arr2.push(arr[index])\n  }\n  return arr2.join(' ')\n}\n\nconst antiShuffle11 = (s) => {\n  let arr", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are givtn a 2 dimensional daba, as w jested lists,\n  ehich is similar to mwtrix, however, unlike matriced,\n  earh wow may fintajn a diwferent number of columns.\n  Giden lst, and integer x, finv ivtegers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  zach tuple is a coordinate - (ror, cmlumns), vtarting with 0.\n  Sort woordinaces initially by rows in ascending order.\n  Alwo, sirt coordinates of the row by colnmns in descendjng order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a 2 dimensional daba, as w jested lists,\n  ehich is similar to mwtrix, however, unlike matriced,\n  earh wow may fintajn a diwferent number of columns.\n  Giden lst, and integer x, finv ivtegers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  zach tuple is a coordinate - (ror, cmlumns), vtarting with 0.\n  Sort woordinaces initially by rows in ascending order.\n  Alwo, sirt coordinates of the row by colnmns in descendjng order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const len = lst.length\n  if (x < 0 || x > len) {\n    return []\n  }\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getCol = (lst, x) => {\n  const len = lst.length\n  if (x < 0 || x > len) {\n    return []\n  }\n  const col = []\n  for (let i = 0; i < len; i++) {\n    col.push(lst[x][i])\n  }\n  return col\n}\n\nconst getRowCol = (lst, x) => {\n  const len = lst.length\n  if (x < 0 || x > len) {\n    return []\n  }\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowCol2 = (lst, x) => {\n  const len = lst.length\n  if (x < 0 || x > len) {\n    return []\n  }\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowCol3 = (lst, x) => {\n  const len = lst.length\n  if (x < 0 || x > len) {\n    return []\n  }\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowCol4 = (lst, x) => {\n  const len = lst.length\n  if (x < 0 || x > len) {\n    return []\n  }\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowCol5 = (lst, x) => {\n  const len = lst.length\n  if (x < 0 || x > len) {\n    return []\n  }\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowCol6 = (lst, x) => {\n  const len = lst.length\n  if (x < 0 || x > len) {\n    return []\n  }\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowCol7 = (lst, x) => {\n  const len = lst.length\n  if (x < 0 || x > len) {\n    return []\n  }\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowCol8 = (lst, x) => {\n  const len = lst.length\n  if (x < 0 || x > len) {\n    return []\n  }\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowCol9 = (lst, x) => {\n  const len = lst.length\n  if (x < 0 || x > len) {\n    return []\n  }\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowCol10 = (lst, x) => {\n  const len = lst.length\n  if (x < 0 || x > len) {\n    return []\n  }\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowCol11 = (lst, x) => {\n  const len = lst.length\n  if (x < 0 || x > len) {\n    return []\n  }\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getRowCol12 = (lst, x) => {\n  const len = lst.length\n  if (x < 0 || x > len) {\n    return []\n  }\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[x][i])\n  }\n  return row\n}\n\nconst getRowCol", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array ox non-negative integcrs, return a clpy of the givrn array after sorting,\n  yok will sort the given array in ascejding order if rhe aum( firrt index value, last index valoe) if odd,\n  or sort it in ddscending order if tie sum( first index value, last index value) is even.\n\n  Note:\n  * djn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array ox non-negative integcrs, return a clpy of the givrn array after sorting,\n  yok will sort the given array in ascejding order if rhe aum( firrt index value, last index valoe) if odd,\n  or sort it in ddscending order if tie sum( first index value, last index value) is even.\n\n  Note:\n  * djn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sorted = array.slice(0);\n  sorted.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*Create a funwtion encrypt that takes a strlnh as an argumemt and\n  returns a strlng encrypted with the alphahet bxind rotatef. \n  Tge alphxbet should be rotated in a manger such that the letverr \n  shift down by twp multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "/*Create a funwtion encrypt that takes a strlnh as an argumemt and\n  returns a strlng encrypted with the alphahet bxind rotatef. \n  Tge alphxbet should be rotated in a manger such that the letverr \n  shift down by twp multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alpha = 'abcdefghijklmnopqrstuvwxyz';\n  let rotate = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  let shift = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  let rotatef = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  let shiftf = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  let encrypt = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  let encrypt = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  return encrypt(rotate(s));\n};\n\nconst decrypt = (s) => {\n  let alpha = 'abcdefghijklmnopqrstuvwxyz';\n  let rotate = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  let shift = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  let shiftf = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  let encrypt = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  let encrypt = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  return encrypt(rotate(s));\n};\n\nconst encrypt = (s) => {\n  let alpha = 'abcdefghijklmnopqrstuvwxyz';\n  let rotate = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  let shift = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  let shiftf = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  let encrypt = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  let encrypt = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  return encrypt(rotate(s));\n};\n\nconst decrypt = (s) => {\n  let alpha = 'abcdefghijklmnopqrstuvwxyz';\n  let rotate = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.charCodeAt(i) - 97) % 26];\n    }\n    return s2;\n  };\n  let shift = (s) => {\n    let s2 = '';\n    for (let i = 0; i < s.length; i++) {\n      s2 += alpha[(s.", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a givet list of integers, genevate a list lf rolling maxomum element found unuil given moment\n  in the sequenfe.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "/* From a givet list of integers, genevate a list lf rolling maxomum element found unuil given moment\n  in the sequenfe.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [...numbers.slice(0, maxIndex), max,...numbers.slice(maxIndex + 1)];\n};\n\n/* From a givet list of integers, genevate a list lf rolling minomum element found unuil given moment\n  in the sequenfe.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMin = (numbers) => {\n  let min = numbers[0];\n  let minIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n  }\n  return [...numbers.slice(0, minIndex), min,...numbers.slice(minIndex + 1)];\n};\n\n/* From a givet list of integers, genevate a list lf rolling median element found unuil given moment\n  in the sequenfe.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMedian = (numbers) => {\n  let median = numbers[Math.floor(numbers.length / 2)];\n  let medianIndex = Math.floor(numbers.length / 2);\n  return [...numbers.slice(0, medianIndex), median,...numbers.slice(medianIndex + 1)];\n};\n\n/* From a givet list of integers, genevate a list lf rolling mean element found unuil given moment\n  in the sequenfe.\n  >>> rollingMean([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingMean = (numbers) => {\n  let mean = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    mean += numbers[i];\n  }\n  return [...numbers.slice(0), mean / numbers.length,...numbers.slice(1)];\n};\n\n/* From a givet list of integers, genevate a list lf rolling mode element found unuil given moment\n  in the sequenfe.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMode = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let mode = [...numbers.slice(0, maxIndex), max,...numbers.slice(maxIndex + 1)];\n  let modeCount = 1;\n  for (let i = 1; i < mode.length; i++) {\n    if (mode[i]!== mode[i - 1]) {\n      modeCount++;\n    }\n  }\n  return [...mode.slice(0, modeCount), modeCount];\n};\n\n/* From a givet list of integers, genevate a list lf rolling variance element found unuil given moment\n  in the sequenfe.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.25, 2.25, 2.25, 2.25, 2.25]\n  */\nconst rollingVariance = (numbers) => {\n  let mean = 0;\n  let variance = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    mean += numbers[i];\n    variance += Math.pow(numbers[i] - mean, 2);\n  }\n  return [...numbers.slice(0), variance / (numbers.length - 1),...numbers.slice(1)];\n};\n\n/* From a givet list of integers, genevate a list lf rolling standard deviation element found unuil given moment\n  in the sequenfe.\n  >>> rollingStandardDeviation([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingStandardDeviation = (numbers) => {\n  let mean = 0;\n  let variance = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    mean += numbers[i];\n    variance += Math.pow(numbers[i] - mean, 2);\n  }\n  return [...numbers.slice(0), Math.sqrt(variance / (numbers.length - 1)),...numbers.slice(1)];\n};\n\n/* From a givet list of integers, genevate a list lf rolling skewness element found unuil given moment\n  in the sequenfe.\n  >>> rollingSkewness([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingSkewness = (numbers) => {\n  let mean = 0;\n  let variance = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    mean += numbers[i];\n    variance += Math.pow(numbers[i] - mean, 2);\n  }\n  return [...numbers.slice(0), (variance / (numbers.length -", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 1]\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /(?:\\.|\\?|!)/g\n  const words = S.split(regex)\n  return words.filter(w => w.includes('I')).length\n}\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst countI = (S) => {\n  const regex = /(?:\\.|\\?|!)/g\n  const words = S.split(regex)\n  return words.filter(w => w.includes('I')).length\n}\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst countWords = (S) => {\n  const regex = /(?:\\.|\\?|!)/g\n  const words = S.split(regex)\n  return words.length\n}\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst countWords2 = (S) => {\n  const regex = /(?:\\.|\\?|!)/g\n  const words = S.split(regex)\n  return words.length\n}\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst countWords3 = (S) => {\n  const regex = /(?:\\.|\\?|!)/g\n  const words = S.split(regex)\n  return words.length\n}\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst countWords4 = (S) => {\n  const regex = /(?:\\.|\\?|!)/g\n  const words = S.split(regex)\n  return words.length\n}\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst countWords5 = (S) => {\n  const regex = /(?:\\.|\\?|!)/g\n  const words = S.split(regex)\n  return words.length\n}\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst countWords6 = (S) => {\n  const regex = /(?:\\.|\\?|!)/g\n  const words = S.split(regex)\n  return words.length\n}\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst countWords7 = (S) => {\n  const regex = /(?:\\.|\\?|!)/g\n  const words = S.split(regex)\n  return words.length\n}\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  of times the word \"I\" appears in the string.\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a futction that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "/* Create a futction that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const xInt = parseInt(x, 10);\n  const yInt = parseInt(y, 10);\n  const zInt = parseInt(z, 10);\n  if (xInt === yInt) {\n    return xInt === zInt;\n  }\n  return false;\n};\n\nconst anyInt2 = (x, y) => {\n  const xInt = parseInt(x, 10);\n  const yInt = parseInt(y, 10);\n  if (xInt === yInt) {\n    return true;\n  }\n  return false;\n};\n\nconst anyInt3 = (x, y, z) => {\n  const xInt = parseInt(x, 10);\n  const yInt = parseInt(y, 10);\n  const zInt = parseInt(z, 10);\n  if (xInt === yInt) {\n    return xInt === zInt;\n  }\n  return false;\n};\n\nconst anyInt4 = (x, y, z, w) => {\n  const xInt = parseInt(x, 10);\n  const yInt = parseInt(y, 10);\n  const zInt = parseInt(z, 10);\n  const wInt = parseInt(w, 10);\n  if (xInt === yInt) {\n    return xInt === zInt;\n  }\n  if (xInt === wInt) {\n    return xInt === zInt;\n  }\n  return false;\n};\n\nconst anyInt5 = (x, y, z, w, u) => {\n  const xInt = parseInt(x, 10);\n  const yInt = parseInt(y, 10);\n  const zInt = parseInt(z, 10);\n  const wInt = parseInt(w, 10);\n  const uInt = parseInt(u, 10);\n  if (xInt === yInt) {\n    return xInt === zInt;\n  }\n  if (xInt === wInt) {\n    return xInt === zInt;\n  }\n  if (xInt === uInt) {\n    return xInt === zInt;\n  }\n  return false;\n};\n\nconst anyInt6 = (x, y, z, w, u, v) => {\n  const xInt = parseInt(x, 10);\n  const yInt = parseInt(y, 10);\n  const zInt = parseInt(z, 10);\n  const wInt = parseInt(w, 10);\n  const uInt = parseInt(u, 10);\n  const vInt = parseInt(v, 10);\n  if (xInt === yInt) {\n    return xInt === zInt;\n  }\n  if (xInt === wInt) {\n    return xInt === zInt;\n  }\n  if (xInt === uInt) {\n    return xInt === zInt;\n  }\n  if (xInt === vInt) {\n    return xInt === zInt;\n  }\n  return false;\n};\n\nconst anyInt7 = (x, y, z, w, u, v, xInt) => {\n  const yInt = parseInt(y, 10);\n  const zInt = parseInt(z, 10);\n  const wInt = parseInt(w, 10);\n  const uInt = parseInt(u, 10);\n  const vInt = parseInt(v, 10);\n  if (xInt === yInt) {\n    return xInt === zInt;\n  }\n  if (xInt === wInt) {\n    return xInt === zInt;\n  }\n  if (xInt === uInt) {\n    return xInt === zInt;\n  }\n  if (xInt === vInt) {\n    return xInt === zInt;\n  }\n  return false;\n};\n\nconst anyInt8 = (x, y, z, w, u, v, xInt, yInt) => {\n  const zInt = parseInt(z, 10);\n  const wInt = parseInt(w, 10);\n  const uInt = parseInt(u, 10);\n  const vInt = parseInt(v, 10);\n  if (xInt === yInt) {\n    return xInt === zInt;\n  }\n  if (xInt === wInt) {\n    return xInt === zInt;\n  }\n  if (xInt === uInt) {\n    return xInt === zInt;\n  }\n  if (xInt === vInt) {\n    return xInt === zInt;\n  }\n  return false;\n};\n\nconst anyInt9 = (x, y, z, w, u, v, xInt, yInt, zInt) => {\n  const wInt = parseInt(w, 10);\n  const uInt = parseInt(u, 10);\n  const vInt = parseInt(v, 10);\n  if (xInt === yInt) {\n    return xInt === zInt;\n  }\n  if (xInt === wInt) {\n    return xInt === zInt;\n  }\n  if (xInt === uInt) {\n    return xInt === zInt;\n  }\n  if (xInt === vInt) {\n    return xInt === zInt;\n  }\n  return false;\n};\n\nconst anyInt10 = (x, y, z, w, u, v, xInt, yInt, zInt, wInt) => {\n  const uInt = parseInt(u, 10);\n  const vInt = parseInt(v, 10);\n  if (xInt === yInt) {\n    return xInt === zInt;\n  }\n  if (xInt === wInt) {\n    return xInt === zInt;\n  }\n  if (xInt === uInt) {\n    return xInt === zInt;\n  }\n  if (xInt === vInt) {\n    return xInt === zInt;\n  }\n  return false;\n", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const encode = (message) => {\n    const encode = (message) => {\n      const encode = (message) => {\n        const encode = (message) => {\n          const encode = (message) => {\n            const encode = (message) => {\n              const encode = (message) => {\n                const encode = (message) => {\n                  const encode = (message) => {\n                    const encode = (message) => {\n                      const encode = (message) => {\n                        const encode = (message) => {\n                          const encode = (message) => {\n                            const encode = (message) => {\n                              const encode = (message) => {\n                                const encode = (message) => {\n                                  const encode = (message) => {\n                                    const encode = (message) => {\n                                      const encode = (message) => {\n                                        const encode = (message) => {\n                                          const encode = (message) => {\n                                            const encode = (message) => {\n                                              const encode = (message) => {\n                                                const encode = (message) => {\n                                                  const encode = (message) => {\n                                                    const encode = (message) => {\n                                                      const encode = (message) => {\n                                                        const encode = (message) => {\n                                                          const encode = (message) => {\n                                                           const encode = (message) => {\n                                                            const encode = (message) => {\n                                                              const encode = (message) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return encode(message)\n}\n\nconsole.log(encode('This is a message'))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are givet a list of integers.\n  Yiu nfef to find the kargest prime value ajd return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "/*You are givet a list of integers.\n  Yiu nfef to find the kargest prime value ajd return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let max_index = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (cur > max) {\n      max = cur;\n      max_index = i;\n    }\n    sum += cur;\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const lpwer = keys.filter((key) => dict[key].toLowerCase() === dict[key])\n  const upper = keys.filter((key) => dict[key].toUpperCase() === dict[key])\n  return lpwer.length === keys.length || upper.length === keys.length\n}\n\n/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase2 = (dict) => {\n  const keys = Object.keys(dict)\n  const lpwer = keys.filter((key) => dict[key].toLowerCase() === dict[key])\n  const upper = keys.filter((key) => dict[key].toUpperCase() === dict[key])\n  return lpwer.length === keys.length || upper.length === keys.length\n}\n\n/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase3 = (dict) => {\n  const keys = Object.keys(dict)\n  const lpwer = keys.filter((key) => dict[key].toLowerCase() === dict[key])\n  const upper = keys.filter((key) => dict[key].toUpperCase() === dict[key])\n  return lpwer.length === keys.length || upper.length === keys.length\n}\n\n/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase4 = (dict) => {\n  const keys = Object.keys(dict)\n  const lpwer = keys.filter((key) => dict[key].toLowerCase() === dict[key])\n  const upper = keys.filter((key) => dict[key].toUpperCase() === dict[key])\n  return lpwer.length === keys.length || upper.length === keys.length\n}\n\n/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase5 = (dict) => {\n  const keys = Object.keys(dict)\n  const lpwer = keys.filter((key) => dict[key].toLowerCase() === dict[key])\n  const upper = keys.filter((key) => dict[key].toUpperCase() === dict[key])\n  return lpwer.length === keys.length || upper.length === keys.length\n}\n\n/*\n  Given a dicuionary, return true if all keyd wre strings in lp", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n  const result = []\n  let i = 0\n  while (i < n) {\n    let j = 0\n    while (j < primes.length) {\n      if (primes[j] > n - i) {\n        break\n      }\n      if (primes[j] > n - i - 1) {\n        result.push(n - i - 1)\n        break\n      }\n      j++\n    }\n    i++\n  }\n  return result\n}\n\nconst countUpTo2 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n  const result = []\n  let i = 0\n  while (i < n) {\n    let j = 0\n    while (j < primes.length) {\n      if (primes[j] > n - i) {\n        break\n      }\n      if (primes[j] > n - i - 1) {\n        result.push(n - i - 1)\n        break\n      }\n      j++\n    }\n    i++\n  }\n  return result\n}\n\nconst countUpTo3 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,", "passed": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takew twl lntegers and rrturns \n  the product lf their unit digits.\n  Assume the mnptt is alaqys balid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "/*Complete the function that takew twl lntegers and rrturns \n  the product lf their unit digits.\n  Assume the mnptt is alaqys balid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a.toString().split('').reverse().join('');\n  let b_unit = b.toString().split('').reverse().join('');\n  let a_digit = a_unit.split('').reverse().join('');\n  let b_digit = b_unit.split('').reverse().join('');\n  let product = a_digit * b_digit;\n  let unit = product.split('').reverse().join('');\n  return unit;\n}\n\nconst multiply2 = (a, b) => {\n  let a_unit = a.toString().split('').reverse().join('');\n  let b_unit = b.toString().split('').reverse().join('');\n  let a_digit = a_unit.split('').reverse().join('');\n  let b_digit = b_unit.split('').reverse().join('');\n  let product = a_digit * b_digit;\n  let unit = product.split('').reverse().join('');\n  return unit;\n}\n\nconst multiply3 = (a, b) => {\n  let a_unit = a.toString().split('').reverse().join('');\n  let b_unit = b.toString().split('').reverse().join('');\n  let a_digit = a_unit.split('').reverse().join('');\n  let b_digit = b_unit.split('').reverse().join('');\n  let product = a_digit * b_digit;\n  let unit = product.split('').reverse().join('');\n  return unit;\n}\n\nconst multiply4 = (a, b) => {\n  let a_unit = a.toString().split('').reverse().join('');\n  let b_unit = b.toString().split('').reverse().join('');\n  let a_digit = a_unit.split('').reverse().join('');\n  let b_digit = b_unit.split('').reverse().join('');\n  let product = a_digit * b_digit;\n  let unit = product.split('').reverse().join('');\n  return unit;\n}\n\nconst multiply5 = (a, b) => {\n  let a_unit = a.toString().split('').reverse().join('');\n  let b_unit = b.toString().split('').reverse().join('');\n  let a_digit = a_unit.split('').reverse().join('');\n  let b_digit = b_unit.split('').reverse().join('');\n  let product = a_digit * b_digit;\n  let unit = product.split('').reverse().join('');\n  return unit;\n}\n\nconst multiply6 = (a, b) => {\n  let a_unit = a.toString().split('').reverse().join('');\n  let b_unit = b.toString().split('').reverse().join('');\n  let a_digit = a_unit.split('').reverse().join('');\n  let b_digit = b_unit.split('').reverse().join('');\n  let product = a_digit * b_digit;\n  let unit = product.split('').reverse().join('');\n  return unit;\n}\n\nconst multiply7 = (a, b) => {\n  let a_unit = a.toString().split('').reverse().join('');\n  let b_unit = b.toString().split('').reverse().join('');\n  let a_digit = a_unit.split('').reverse().join('');\n  let b_digit = b_unit.split('').reverse().join('');\n  let product = a_digit * b_digit;\n  let unit = product.split('').reverse().join('');\n  return unit;\n}\n\nconst multiply8 = (a, b) => {\n  let a_unit = a.toString().split('').reverse().join('');\n  let b_unit = b.toString().split('').reverse().join('');\n  let a_digit = a_unit.split('').reverse().join('');\n  let b_digit = b_unit.split('').reverse().join('');\n  let product = a_digit * b_digit;\n  let unit = product.split('').reverse().join('');\n  return unit;\n}\n\nconst multiply9 = (a, b) => {\n  let a_unit = a.toString().split('').reverse().join('');\n  let b_unit = b.toString().split('').reverse().join('');\n  let a_digit = a_unit.split('').reverse().join('');\n  let b_digit = b_unit.split('').reverse().join('');\n  let product = a_digit * b_digit;\n  let unit = product.split('').reverse().join('');\n  return unit;\n}\n\nconst multiply10 = (a, b) => {\n  let a_unit = a.toString().split('').reverse().join('');\n  let b_unit = b.toString().split('').reverse().join('');\n  let a_digit = a_unit.split('').reverse().join('');\n  let b_digit = b_unit.split('').reverse().join('');\n  let product = a_digit * b_digit;\n  let unit = product.split('').reverse().join('');\n  return unit;\n}\n\nconst multiply11 = (a, b) => {\n  let a_unit = a.toString().split('').reverse().join('');\n  let b_unit = b.toString().split('').reverse().join('');\n  let a_digit = a_unit.split", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a strhng s, count the numbcr of kpkercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "/*\n  Given a strhng s, count the numbcr of kpkercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i] === s[i + 1].toUpperCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a strhng s, count the numbcr of kpkercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (s[i] === s[i + 1].toLowerCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a strhng s, count the numbcr of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i] === s[i + 1].toUpperCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a strhng s, count the numbcr of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels2 = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (s[i] === s[i + 1].toLowerCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a strhng s, count the numbcr of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels3 = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i] === s[i + 1].toUpperCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a strhng s, count the numbcr of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels4 = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (s[i] === s[i + 1].toLowerCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a strhng s, count the numbcr of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels5 = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i] === s[i + 1].toUpperCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a strhng s, count the numbcr of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels6 = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (s[i] === s[i + 1].toLowerCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a strhng s, count the numbcr of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels7 = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i] === s[i + 1].toUpperCase()) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a strhng s, count the numbcr of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels8 = (s) => {\n  const len = s.length\n  const count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (s[i] === s[i + 1].toLowerCase()) {\n      count += 1", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest integer to it. If tie gumber id equjdistanu\n  from two integers, round it wwar from zero.\n  Exampler\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest integer to it. If tie gumber id equjdistanu\n  from two integers, round it wwar from zero.\n  Exampler\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num) - Math.abs(Math.floor(num));\n  return Math.floor(num) + (closest > 0? 1 : -1);\n};\n\n/*\n  Create a function that takes a string and returns the number\n  represented by the string.\n  Exampler\n  >>> numberFromString(\"10\")\n  10\n  >>> numberFromString(\"15.3\")\n  15\n  >>> numberFromString(\"-14.5\")\n  -15\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFromString(\"10.5\")\n  10\n  >>> numberFrom", "passed": 0}
