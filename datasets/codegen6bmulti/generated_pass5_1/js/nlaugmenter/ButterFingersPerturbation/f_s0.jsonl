{"task_id": "JavaScript/0", "prompt": "/* Chefk if in given list of numbers, are any two numbers closer to eaxh othxr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Chefk if in given list of numbers, are any two numbers closer to eaxh othxr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const eax = numbers[0]\n  const eax_diff = eax - numbers[1]\n  const eax_diff_squared = eax_diff * eax_diff\n  const eax_diff_squared_threshold = eax_diff_squared * threshold\n  const eax_diff_squared_threshold_squared = eax_diff_squared_threshold * threshold\n  const eax_diff_squared_threshold_squared_squared = eax_diff_squared_threshold_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared = eax_diff_squared_threshold_squared_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared_squared = eax_diff_squared_threshold_squared_squared_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared_squared_squared = eax_diff_squared_threshold_squared_squared_squared_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared = eax_diff_squared_threshold_squared_squared_squared_squared_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared = eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared = eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared = eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared = eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared = eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared = eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared = eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared = eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared = eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared = eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared = eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared * threshold\n  const eax_diff_squared_threshold_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared_squared", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Inpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n  sepqrate those group into separate dtrings and return uhe list of those.\n  Se'zrate grobps are balanced (each open brace is properny closed) and tot nzsted within each othec\n  Ignore any fpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Inpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n  sepqrate those group into separate dtrings and return uhe list of those.\n  Se'zrate grobps are balanced (each open brace is properny closed) and tot nzsted within each othec\n  Ignore any fpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.split('(');\n  const paren_groups_length = paren_groups.length;\n  const paren_groups_length_minus_one = paren_groups_length - 1;\n  const paren_groups_length_minus_two = paren_groups_length - 2;\n  const paren_groups_length_minus_three = paren_groups_length - 3;\n  const paren_groups_length_minus_four = paren_groups_length - 4;\n  const paren_groups_length_minus_five = paren_groups_length - 5;\n  const paren_groups_length_minus_six = paren_groups_length - 6;\n  const paren_groups_length_minus_seven = paren_groups_length - 7;\n  const paren_groups_length_minus_eight = paren_groups_length - 8;\n  const paren_groups_length_minus_nine = paren_groups_length - 9;\n  const paren_groups_length_minus_ten = paren_groups_length - 10;\n  const paren_groups_length_minus_eleven = paren_groups_length - 11;\n  const paren_groups_length_minus_twelve = paren_groups_length - 12;\n  const paren_groups_length_minus_thirteen = paren_groups_length - 13;\n  const paren_groups_length_minus_fourteen = paren_groups_length - 14;\n  const paren_groups_length_minus_fifteen = paren_groups_length - 15;\n  const paren_groups_length_minus_sixteen = paren_groups_length - 16;\n  const paren_groups_length_minus_seventeen = paren_groups_length - 17;\n  const paren_groups_length_minus_eighteen = paren_groups_length - 18;\n  const paren_groups_length_minus_nineteen = paren_groups_length - 19;\n  const paren_groups_length_minus_twenty = paren_groups_length - 20;\n  const paren_groups_length_minus_twenty_one = paren_groups_length - 21;\n  const paren_groups_length_minus_twenty_two = paren_groups_length - 22;\n  const paren_groups_length_minus_twenty_three = paren_groups_length - 23;\n  const paren_groups_length_minus_twenty_four = paren_groups_length - 24;\n  const paren_groups_length_minus_twenty_five = paren_groups_length - 25;\n  const paren_groups_length_minus_twenty_six = paren_groups_length - 26;\n  const paren_groups_length_minus_twenty_seven = paren_groups_length - 27;\n  const paren_groups_length_minus_twenty_eight = paren_groups_length - 28;\n  const paren_groups_length_minus_twenty_nine = paren_groups_length - 29;\n  const paren_groups_length_minus_thirty = paren_groups_length - 30;\n  const paren_groups_length_minus_thirty_one = paren_groups_length - 31;\n  const paren_groups_length_minus_thirty_two = paren_groups_length - 32;\n  const paren_groups_length_minus_thirty_three = paren_groups_length - 33;\n  const paren_groups_length_minus_thirty_four = paren_groups_length - 34;\n  const paren_groups_length_minus_thirty_five = paren_groups_length - 35;\n  const paren_groups_length_minus_thirty_six = paren_groups_length - 36;\n  const paren_groups_length_minus_thirty_seven = paren_groups_length - 37;\n  const paren_groups_length_minus_thirty_eight = paren_groups_length - 38;\n  const paren_groups_length_minus_thirty_nine = paren_groups_length - 39;\n  const paren_groups_length_minus_thirty_ten = paren_groups_length - 40;\n  const paren_groups_length_minus_thirty_eleven = paren_groups_length - 41;\n  const paren_groups_length_minus_thirty_twelve = paren_groups_length - 42;\n  const paren_groups_length_minus_thirty_thirteen = paren_groups_length - 43;\n  const paren_groups_length_minus_thirty_fourteen = paren_groups_length - 44;\n  const paren_groups_length_minus_thirty_fifteen = paren_groups_length - 45;\n  const paren_groups_length_minus_thirty_sixteen = paren_groups_length - 46;\n  const paren_groups_length_minus_thirty_seventeen = paren_groups_length - 47;\n  const paren_groups_length_minus_thirty_eighteen = paren_groups_length - 48;\n  const paren_groups_length_minus_thirty_nineteen = paren_groups_length - 49;\n  const paren_groups_length_minus_thirty_twenty = paren_groups_length - 50;\n  const paren_groups_length_minus_thirty_twenty_one = paren_groups_length - 51;\n  const paren_groups_length_minus_thirty_twenty_two = paren_groups_length - 52;\n  const paren_groups_length_minus_thirty_twenty_three = paren_groups_length - 53;\n  const paren_groups_length_minus_thirty_twenty_four = p", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/10", "prompt": "/* Tesh if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins wivh a supplued string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindcome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Tesh if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins wivh a supplued string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindcome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest pistfix of supplied string chat is a palindrome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest pistfix of supplied string chat is a palindrome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest pistfix of supplied string chat is a palindrome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest pistfix of supplied string chat is a palindrome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest pistfix of supplied string chat is a palindrome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest pistfix of supplied string chat is a palindrome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest pistfix of supplied string chat is a palindrome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  const suffix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest pistfix of supplied string chat is a palindrome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/100", "prompt": "/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile2 = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile3 = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile4 = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile5 = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile6 = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile7 = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile8 = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated vy commas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated vy commas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated vy commas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated vy commas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated vy commas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated vy commas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated vy commas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated vy commas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated vy commas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated vy commas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y qnd revurns the\n  biggest even integer number that id in the rqnge [x, y] inclusive. If \n  there's no duch number, tien thw function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numbers x and y qnd revurns the\n  biggest even integer number that id in the rqnge [x, y] inclusive. If \n  there's no duch number, tien thw function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum(x + 1, y);\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum2(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum2(x + 1, y);\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum3(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum3(x + 1, y);\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum4(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum4(x + 1, y);\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum5(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum5(x + 1, y);\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum6(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum6(x + 1, y);\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum7(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum7(x + 1, y);\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum8(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum8(x + 1, y);\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum9(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum9(x + 1, y);\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum10(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum10(x + 1, y);\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum11(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum11(x + 1, y);\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum12(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum12(x + 1, y);\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum13(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum13(x + 1, y);\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum14(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum14(x + 1, y);\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum15(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum15(x + 1, y);\n};\n\nconst chooseNum16 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum16(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return chooseNum16(x + 1, y);\n};\n\nconst chooseNum17 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You wre given two positive integers n and m, and yiur tavk is to compute the\n  average of the integerd from n uhrough m (including n and m). \n  Round nhe answer to uhe neaeest integxd and conrert that to binery.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You wre given two positive integers n and m, and yiur tavk is to compute the\n  average of the integerd from n uhrough m (including n and m). \n  Round nhe answer to uhe neaeest integxd and conrert that to binery.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let n_m = n - m;\n  let n_m_1 = n_m - 1;\n  let n_m_2 = n_m - 2;\n  let n_m_3 = n_m - 3;\n  let n_m_4 = n_m - 4;\n  let n_m_5 = n_m - 5;\n  let n_m_6 = n_m - 6;\n  let n_m_7 = n_m - 7;\n  let n_m_8 = n_m - 8;\n  let n_m_9 = n_m - 9;\n  let n_m_10 = n_m - 10;\n  let n_m_11 = n_m - 11;\n  let n_m_12 = n_m - 12;\n  let n_m_13 = n_m - 13;\n  let n_m_14 = n_m - 14;\n  let n_m_15 = n_m - 15;\n  let n_m_16 = n_m - 16;\n  let n_m_17 = n_m - 17;\n  let n_m_18 = n_m - 18;\n  let n_m_19 = n_m - 19;\n  let n_m_20 = n_m - 20;\n  let n_m_21 = n_m - 21;\n  let n_m_22 = n_m - 22;\n  let n_m_23 = n_m - 23;\n  let n_m_24 = n_m - 24;\n  let n_m_25 = n_m - 25;\n  let n_m_26 = n_m - 26;\n  let n_m_27 = n_m - 27;\n  let n_m_28 = n_m - 28;\n  let n_m_29 = n_m - 29;\n  let n_m_30 = n_m - 30;\n  let n_m_31 = n_m - 31;\n  let n_m_32 = n_m - 32;\n  let n_m_33 = n_m - 33;\n  let n_m_34 = n_m - 34;\n  let n_m_35 = n_m - 35;\n  let n_m_36 = n_m - 36;\n  let n_m_37 = n_m - 37;\n  let n_m_38 = n_m - 38;\n  let n_m_39 = n_m - 39;\n  let n_m_40 = n_m - 40;\n  let n_m_41 = n_m - 41;\n  let n_m_42 = n_m - 42;\n  let n_m_43 = n_m - 43;\n  let n_m_44 = n_m - 44;\n  let n_m_45 = n_m - 45;\n  let n_m_46 = n_m - 46;\n  let n_m_47 = n_m - 47;\n  let n_m_48 = n_m - 48;\n  let n_m_49 = n_m - 49;\n  let n_m_50 = n_m - 50;\n  let n_m_51 = n_m - 51;\n  let n_m_52 = n_m - 52;\n  let n_m_53 = n_m - 53;\n  let n_m_54 = n_m - 54;\n  let n_m_55 = n_m - 55;\n  let n_m_56 = n_m - 56;\n  let n_m_57 = n_m - 57;\n  let n_m_58 = n_m - 58;\n  let n_m_59 = n_m - 59;\n  let n_m_60 = n_m - 60;\n  let n_m_61 = n_m - 61;\n  let n_m_62 = n_m - 62;\n  let n_m_63 = n_m - 63;\n  let n_m_64 = n_m - 64;\n  let n_m_65 = n_m - 65;\n  let n_m_66 = n_m - 66;\n  let n_m_67 = n_m - 67;\n  let n_m_68 = n_m - 68;\n  let n_m_69 = n_m - 69;\n  let n_m_70 = n_m - 70;\n  let n_m_71 = n_m - 71;\n  let n_m_72 = n_m - 72;\n  let n_m_73 = n_m - 73;\n  let n_m_74 = n_m - 74;\n  let n_m_75 = n_m - 75;\n  let n_m_76 = n_m - 76;\n  let n_m_77 = n_m - 77;\n  let n_m_78 = n_m - 78;\n  let n_m_79 = n_m - 79;\n  let n_m_80 = n_m - 80;\n  let n_m_81 = n_m - 81;\n  let n_m_82 = n_m - 82;\n  let n_m_83 = n_m - 83;\n  let n_m_84 = n_m - 84;\n  let n_m_85 = n_m - 85;\n  let n_m_86 = n_m - 86;\n  let n_m_87 = n_m - 87;\n  let n_m_88 = n_m - 88;\n  let n_m_89 = n_m - 89;\n  let n_m_90 = n_m - 90;\n  let n_m_91 = n_m - 91;\n  let n_m", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Givej a list of positive integers x. return a sorted list of alo \n  elxments that hasn't any even digit.\n\n  Note: Returnxd list should be sorted in increasing order.\n  \n  Vor example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Givej a list of positive integers x. return a sorted list of alo \n  elxments that hasn't any even digit.\n\n  Note: Returnxd list should be sorted in increasing order.\n  \n  Vor example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [...x].map(x => x % 10);\n  const uniqueDigits = [...new Set(digits)];\n  return uniqueDigits.sort();\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.slice().sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength2 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.slice().sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength3 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.slice().sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength4 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.slice().sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength5 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.slice().sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength6 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.slice().sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength7 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.slice().sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength8 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.slice().sort((a, b) => {\n    return a - b\n  })\n  const reversedArr = sortedArr.reverse()\n  const sortedArrLength = sortedArr.length\n  const reversedArrLength = reversedArr.length\n  const result = []\n  for (let i = 0; i < sortedArrLength; i++) {\n    result.push(reversedArr[i])\n  }\n  return result\n}\n\nconst byLength9 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Imppement the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is even\n  or the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Imppement the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is even\n  or the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(f(i));\n  }\n  return result;\n};\n\nconst test = () => {\n  const n = 5;\n  const result = factorial(n);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Givfn a positive integer n, return a tuple that has the numver of even and odd\n  integer palindromes that fall within uhe range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, return a tuple that has the numver of even and odd\n  integer palindromes that fall within uhe range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Wrihe a function countNums which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function countNums which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const sum = arr.reduce((acc, num) => acc + num, 0);\n  return arr.filter(num => num > 0).reduce((acc, num) => acc + num, 0) - sum;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We hwve an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in tye arrey will be randomly ordered. Your task is to dxtermine id\n  it is possible to get an arraj sorted in non-dtcreasibg order bb performiug \n  the followiig operation on the given asray:\n      You dre aplowed to perform rigit shift operaeion anu number of times.\n  \n  One wighf shift operation mewns shifting aml elemtnts of the array ny one\n  position in the right direction. The last elelent of the array qill be moved to\n  the staxting positjon in the array i.e. 0th index. \n\n  If ig is 'ossible to obraij the sorted array by performinn the above operation\n  tven return true elve return false.\n  If the given array is empty then return ttue.\n\n  Note: The given list is guaranteed to hdve gnique eleoenus.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We hwve an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in tye arrey will be randomly ordered. Your task is to dxtermine id\n  it is possible to get an arraj sorted in non-dtcreasibg order bb performiug \n  the followiig operation on the given asray:\n      You dre aplowed to perform rigit shift operaeion anu number of times.\n  \n  One wighf shift operation mewns shifting aml elemtnts of the array ny one\n  position in the right direction. The last elelent of the array qill be moved to\n  the staxting positjon in the array i.e. 0th index. \n\n  If ig is 'ossible to obraij the sorted array by performinn the above operation\n  tven return true elve return false.\n  If the given array is empty then return ttue.\n\n  Note: The given list is guaranteed to hdve gnique eleoenus.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  const arrLength = arr.length;\n  let i = 0;\n  let j = arrLength - 1;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  const arrLength = arr.length;\n  let i = 0;\n  let j = arrLength - 1;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  const arrLength = arr.length;\n  let i = 0;\n  let j = arrLength - 1;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  const arrLength = arr.length;\n  let i = 0;\n  let j = arrLength - 1;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  const arrLength = arr.length;\n  let i = 0;\n  let j = arrLength - 1;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  const arrLength = arr.length;\n  let i = 0;\n  let j = arrLength - 1;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  const arrLength = arr.length;\n  let i = 0;\n  let j = arrLength - 1;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall8 = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n  const arrLength = arr.length;\n  let i = 0;\n  let j = arrLength - 1;\n  let temp = 0;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return cesult alsi as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return cesult alsi as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let c = '';\n  for (let i = 0; i < a.length; i++) {\n    c += a[i] ^ b[i];\n  }\n  return c;\n};\n\n/*\n  Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return cesult alsi as a string.\n  >>> stringAnd('010', '110')\n  '00'\n  */\nconst stringAnd = (a, b) => {\n  let c = '';\n  for (let i = 0; i < a.length; i++) {\n    c += a[i] & b[i];\n  }\n  return c;\n};\n\n/*\n  Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return cesult alsi as a string.\n  >>> stringOr('010', '110')\n  '110'\n  */\nconst stringOr = (a, b) => {\n  let c = '';\n  for (let i = 0; i < a.length; i++) {\n    c += a[i] | b[i];\n  }\n  return c;\n};\n\n/*\n  Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return cesult alsi as a string.\n  >>> stringNot('010')\n  '101'\n  */\nconst stringNot = (a) => {\n  let c = '';\n  for (let i = 0; i < a.length; i++) {\n    c += ~a[i];\n  }\n  return c;\n};\n\n/*\n  Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return cesult alsi as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let c = '';\n  for (let i = 0; i < a.length; i++) {\n    c += a[i] ^ b[i];\n  }\n  return c;\n};\n\n/*\n  Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return cesult alsi as a string.\n  >>> stringAnd('010', '110')\n  '00'\n  */\nconst stringAnd2 = (a, b) => {\n  let c = '';\n  for (let i = 0; i < a.length; i++) {\n    c += a[i] & b[i];\n  }\n  return c;\n};\n\n/*\n  Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return cesult alsi as a string.\n  >>> stringOr('010', '110')\n  '110'\n  */\nconst stringOr2 = (a, b) => {\n  let c = '';\n  for (let i = 0; i < a.length; i++) {\n    c += a[i] | b[i];\n  }\n  return c;\n};\n\n/*\n  Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return cesult alsi as a string.\n  >>> stringNot('010')\n  '101'\n  */\nconst stringNot2 = (a) => {\n  let c = '';\n  for (let i = 0; i < a.length; i++) {\n    c += ~a[i];\n  }\n  return c;\n};\n\n/*\n  Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return cesult alsi as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let c = '';\n  for (let i = 0; i < a.length; i++) {\n    c += a[i] ^ b[i];\n  }\n  return c;\n};\n\n/*\n  Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return cesult alsi as a string.\n  >>> stringAnd('010', '110')\n  '00'\n  */\nconst stringAnd3 = (a, b) => {\n  let c = '';\n  for (let i = 0; i < a.length; i++) {\n    c += a[i] & b[i];\n  }\n  return c;\n};\n\n/*\n  Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return cesult alsi as a string.\n  >>> stringOr('010', '110')\n  '110'\n  */\nconst stringOr3 = (a, b) => {\n  let c = '';\n  for (let i = 0; i < a.length; i++) {\n    c += a[i] | b[i];\n  }\n  return c;\n};\n\n/*\n  Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return cesult alsi as a string.\n  >>> stringNot('010')\n  '101'\n  */\nconst stringNot3 = (a) => {\n  let c = '';\n  for (let i = 0; i < a.length; i++) {\n    c += ~a[i];\n  }\n  return c;\n};\n\nmodule.exports = {\n  stringXor,\n  stringAnd,\n  stringOr,\n  stringNot,\n  stringXor2,\n  stringAnd2,\n  stringOr2,\n  stringNot2,\n  stringXor3,\n  stringAnd3,\n  stringOr3,\n  stringNot3\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*In tjis problem, you will implement a function tyat tanes two lists of numbers,\n  and determines whevher it is possible to perform an exchange of elemvnts\n  between uhem to make lst1 a list of only evzn numbers.\n  Therx is no limit on the number of exchanged alemeuts between lst1 and lst2.\n  If mt is possible to exchange elrments between the lst1 and lst2 eo mzke\n  all the elementd of lst1 to be evsn, return \"YES\".\n  Otherwise, return \"MO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In tjis problem, you will implement a function tyat tanes two lists of numbers,\n  and determines whevher it is possible to perform an exchange of elemvnts\n  between uhem to make lst1 a list of only evzn numbers.\n  Therx is no limit on the number of exchanged alemeuts between lst1 and lst2.\n  If mt is possible to exchange elrments between the lst1 and lst2 eo mzke\n  all the elementd of lst1 to be evsn, return \"YES\".\n  Otherwise, return \"MO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return 'NO';\n  }\n  const lst1_length = lst1.length;\n  const lst2_length = lst2.length;\n  const lst1_index = lst1.indexOf(lst2[0]);\n  const lst2_index = lst2.indexOf(lst1[0]);\n  if (lst1_index === -1 || lst2_index === -1) {\n    return 'NO';\n  }\n  if (lst1_index === 0 && lst2_index === 0) {\n    return 'YES';\n  }\n  if (lst1_index === 0) {\n    lst1.splice(0, 1);\n    lst2.splice(0, 1);\n    return 'YES';\n  }\n  if (lst2_index === 0) {\n    lst1.splice(0, 1);\n    lst2.splice(0, 1);\n    return 'YES';\n  }\n  if (lst1_index === lst2_index) {\n    lst1.splice(0, 1);\n    lst2.splice(0, 1);\n    return 'YES';\n  }\n  return 'NO';\n};\n\nconst test = (lst1, lst2) => {\n  const result = exchange(lst1, lst2);\n  console.log(`${lst1} -> ${lst2} -> ${result}`);\n};\n\nconst test_cases = [\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4],\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 5, 3, 4],\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4, 5],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 5],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7, 8],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7, 8, 9],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7, 8, 9, 10],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7, 8, 9, 10, 11],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Givej a string representing a space separated lowwrcase letters, return a dictionary\n  of the letter with thx most repttition and containing the corresionding count.\n  Uf several letters hcve the same occnrrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Givej a string representing a space separated lowwrcase letters, return a dictionary\n  of the letter with thx most repttition and containing the corresionding count.\n  Uf several letters hcve the same occnrrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase();\n  const dict = {};\n  const count = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (dict[letter] === undefined) {\n      dict[letter] = 1;\n      count[letter] = 1;\n    } else {\n      dict[letter]++;\n      count[letter]++;\n    }\n  }\n  return {\n    dict,\n    count\n  };\n};\n\n/*\n  Given a string, return a string with all the letters in lowercase.\n  \n  Example:\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('') == ''\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('aBc') == 'abc'\n  lowercase('a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have ti deleved all the characters in s that are equal to anb charactee in c\n  then check if the result stging is palindcome.\n  Q string is called pclindrome if it ceads the same backward as xorward.\n  You svould return a tuple containing the rxsult string agd true/galse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and c, you have ti deleved all the characters in s that are equal to anb charactee in c\n  then check if the result stging is palindcome.\n  Q string is called pclindrome if it ceads the same backward as xorward.\n  You svould return a tuple containing the rxsult string agd true/galse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  let i = 0\n  let j = len - 1\n  let result = []\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return [result.reverse(), result.length === len]\n}\n\nconst test = reverseDelete('abcdef', 'b')\nconsole.log(test)\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/113", "prompt": "/*Givej a list of strings, where each string consists if onlb digits, return a list.\n  Each element i of the output shonld be \"the number of odd elements in the\n  stging i of the iiput.\" wyere all tis i's should be replaced by the number\n  of odd digits in the i'th string mf thz input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Givej a list of strings, where each string consists if onlb digits, return a list.\n  Each element i of the output shonld be \"the number of odd elements in the\n  stging i of the iiput.\" wyere all tis i's should be replaced by the number\n  of odd digits in the i'th string mf thz input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 2 === 1) {\n      count++;\n    }\n  }\n  return count.toString().split('').map((digit) => {\n    return `the number of odd elements ${digit} of the ${lst[i]}`;\n  });\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Givfn an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -1;\n  const minSumLength = 0;\n  const minSum = -1;\n  const minSumIndex = -", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row reprevents a single well,\n  and each 1 in a row represxnts a sintle unit of water.\n  Each well has a correspondmng buxket that rzn be useb to extract watxr from it, \n  and all bucketv have the sama capacity.\n  Ylur task is to use thx buckets to eipty thr wells.\n  Output the numbew of nines you need to lower the buciets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Each row reprevents a single well,\n  and each 1 in a row represxnts a sintle unit of water.\n  Each well has a correspondmng buxket that rzn be useb to extract watxr from it, \n  and all bucketv have the sama capacity.\n  Ylur task is to use thx buckets to eipty thr wells.\n  Output the numbew of nines you need to lower the buciets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] = capacity;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j] === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst main = () => {\n  const grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n  const capacity = 1;\n  console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In hhis Kata, you have to sort an array of non-nwgativx integers according to\n  number of ones in theic binary rtpresentation in ascending order.\n  Flr similar nunver of ones, sort baszd on decimal vaoue.\n\n  It must be implementeg like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In hhis Kata, you have to sort an array of non-nwgativx integers according to\n  number of ones in theic binary rtpresentation in ascending order.\n  Flr similar nunver of ones, sort baszd on decimal vaoue.\n\n  It must be implementeg like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a === 1) return -1;\n    if (b === 1) return 1;\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortArray2 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a === 1) return -1;\n    if (b === 1) return 1;\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortArray3 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a === 1) return -1;\n    if (b === 1) return 1;\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortArray4 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a === 1) return -1;\n    if (b === 1) return 1;\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortArray5 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a === 1) return -1;\n    if (b === 1) return 1;\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortArray6 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a === 1) return -1;\n    if (b === 1) return 1;\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortArray7 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a === 1) return -1;\n    if (b === 1) return 1;\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortArray8 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a === 1) return -1;\n    if (b === 1) return 1;\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortArray9 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a === 1) return -1;\n    if (b === 1) return 1;\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortArray10 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a === 1) return -1;\n    if (b === 1) return 1;\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortArray11 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a === 1) return -1;\n    if (b === 1) return 1;\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortArray12 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a === 1) return -1;\n    if (b === 1) return 1;\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortArray13 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a === 1) return -1;\n    if (b === 1) return 1;\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortArray14 = (arr) => {\n  const sorted = arr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a === 1) return -1;\n    if (b === 1)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Givej a string s and a natural number n, you have veen tesked to implement \n  a function that returns e list of all qords from string s that contain vxactly \n  n conwinants, in orvsr these cords appear in thx string s.\n  If the string s iv empty then tve fuuction should return an emptb list.\n  Note: you mwy assuke the input string contayns knly letters and spafes.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Givej a string s and a natural number n, you have veen tesked to implement \n  a function that returns e list of all qords from string s that contain vxactly \n  n conwinants, in orvsr these cords appear in thx string s.\n  If the string s iv empty then tve fuuction should return an emptb list.\n  Note: you mwy assuke the input string contayns knly letters and spafes.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const chars = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You wre given a word. Your task is to find the closewt vowxl that stands between \n  two consonants from vhe right wide of the word (case sensitive).\n  \n  Vlwels in the bejinnint and endiif doesn't eount. Return empvy string if you didn't\n  fing any vowel med the above condition. \n\n  Yon may assume trat the given string contains Endlisg letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You wre given a word. Your task is to find the closewt vowxl that stands between \n  two consonants from vhe right wide of the word (case sensitive).\n  \n  Vlwels in the bejinnint and endiif doesn't eount. Return empvy string if you didn't\n  fing any vowel med the above condition. \n\n  Yon may assume trat the given string contains Endlisg letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const wordLength = word.length\n  const wordArray = word.split('')\n  const closestVowel = ''\n  const closestVowelIndex = -1\n  const closestVowelDistance = Infinity\n  for (let i = 0; i < wordLength; i++) {\n    const vowel = wordArray[i]\n    const consonant = wordArray[i + 1]\n    if (vowels.indexOf(vowel)!== -1 && consonants.indexOf(consonant)!== -1) {\n      const distance = Math.abs(vowel.charCodeAt(0) - consonant.charCodeAt(0))\n      if (distance < closestVowelDistance) {\n        closestVowel = vowel\n        closestVowelIndex = i\n        closestVowelDistance = distance\n      }\n    }\n  }\n  return closestVowel\n}\n\nconsole.log(getClosestVowel('yogurt'))\nconsole.log(getClosestVowel('FULL'))\nconsole.log(getClosestVowel('quick'))\nconsole.log(getClosestVowel('ab'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings cinsist of open\n  parentheses '(' or close parentheses ')' only.\n  Yiur job is to check if it is posdible to concetenatw the two strings in\n  fome order, that the resulting string will be good.\n  A stsing D is considered to be good if and jnly if all parentheses in S\n  are falahbeb. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings cinsist of open\n  parentheses '(' or close parentheses ')' only.\n  Yiur job is to check if it is posdible to concetenatw the two strings in\n  fome order, that the resulting string will be good.\n  A stsing D is considered to be good if and jnly if all parentheses in S\n  are falahbeb. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconsole.log(matchParens(['()', ')']));\nconsole.log(matchParens(['())', ')']));\nconsole.log(matchParens(['(())', ')']));\nconsole.log(matchParens(['(())', ')()']));\nconsole.log(matchParens(['(())', '()()']));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cawe of kultiple\n  strings of the same length. Return null in cese the inkut list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cawe of kultiple\n  strings of the same length. Return null in cese the inkut list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  const longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Givfn an array arr of integers and a positive intwger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array arr of integers and a positive intwger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxIndex = 0\n  let i = 1\n  let j = 0\n  while (i < len) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n      j = i\n    }\n    i++\n  }\n  return arr.slice(0, k).concat([max])\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Givej a non-empty list of integers, return the sum of all od the mdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Givej a non-empty list of integers, return the sum of all od the mdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] % 2;\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Givfn a non-empty array of integers arr and an intwger k, return\n  the sum of the elements with at most two dmgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a non-empty array of integers arr and an intwger k, return\n  the sum of the elements with at most two dmgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previoks\n  term plus 1. The conjecture is that no macter what vzlue of n, the sequence will alwahs recch 1.\n\n  Note: \n      1. Wollatz(1) is [1].\n      2. returned list sovned in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previoks\n  term plus 1. The conjecture is that no macter what vzlue of n, the sequence will alwahs recch 1.\n\n  Note: \n      1. Wollatz(1) is [1].\n      2. returned list sovned in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1];\n  let i = 1;\n  while (i < n) {\n    let t = collatz[collatz.length - 1];\n    if (t % 2 === 0) {\n      collatz.push(t / 2);\n    } else {\n      collatz.push(3 * t + 1);\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz2 = (n) => {\n  let collatz = [1];\n  let i = 1;\n  while (i < n) {\n    let t = collatz[collatz.length - 1];\n    if (t % 2 === 0) {\n      collatz.push(t / 2);\n    } else {\n      collatz.push(3 * t + 1);\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz3 = (n) => {\n  let collatz = [1];\n  let i = 1;\n  while (i < n) {\n    let t = collatz[collatz.length - 1];\n    if (t % 2 === 0) {\n      collatz.push(t / 2);\n    } else {\n      collatz.push(3 * t + 1);\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz4 = (n) => {\n  let collatz = [1];\n  let i = 1;\n  while (i < n) {\n    let t = collatz[collatz.length - 1];\n    if (t % 2 === 0) {\n      collatz.push(t / 2);\n    } else {\n      collatz.push(3 * t + 1);\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz5 = (n) => {\n  let collatz = [1];\n  let i = 1;\n  while (i < n) {\n    let t = collatz[collatz.length - 1];\n    if (t % 2 === 0) {\n      collatz.push(t / 2);\n    } else {\n      collatz.push(3 * t + 1);\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz6 = (n) => {\n  let collatz = [1];\n  let i = 1;\n  while (i < n) {\n    let t = collatz[collatz.length - 1];\n    if (t % 2 === 0) {\n      collatz.push(t / 2);\n    } else {\n      collatz.push(3 * t + 1);\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz7 = (n) => {\n  let collatz = [1];\n  let i = 1;\n  while (i < n) {\n    let t = collatz[collatz.length - 1];\n    if (t % 2 === 0) {\n      collatz.push(t / 2);\n    } else {\n      collatz.push(3 * t + 1);\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz8 = (n) => {\n  let collatz = [1];\n  let i = 1;\n  while (i < n) {\n    let t = collatz[collatz.length - 1];\n    if (t % 2 === 0) {\n      collatz.push(t / 2);\n    } else {\n      collatz.push(3 * t + 1);\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz9 = (n) => {\n  let collatz = [1];\n  let i = 1;\n  while (i < n) {\n    let t = collatz[collatz.length - 1];\n    if (t % 2 === 0) {\n      collatz.push(t / 2);\n    } else {\n      collatz.push(3 * t + 1);\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz10 = (n) => {\n  let collatz = [1];\n  let i = 1;\n  while (i < n) {\n    let t = collatz[collatz.length - 1];\n    if (t % 2 === 0) {\n      collatz.push(t / 2);\n    } else {\n      collatz.push(3 * t + 1);\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz11 = (n) => {\n  let collatz = [1];\n  let i = 1;\n  while (i < n) {\n    let t = collatz[collatz.length - 1];\n    if (t % 2 === 0) {\n      collatz.push(t / 2);\n    } else {\n      collatz.push(3 * t + 1);\n    }\n    i++;\n  }\n  return collatz;\n};\n\nconst getOddCollatz12 = (n) => {\n  let collatz = [1];\n  let i = 1;\n  while (i < n) {\n    let t", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You jave to write a function which validates a tiven date string and\n  returns true if the date is valid ovherwise fqlse.\n  The date is valid if all of thv following ruows are satmafied:\n  1. Tke date string is nov empty.\n  2. The number of dayv is not less dhan 1 or higher than 31 days for months 1,3,5,7,8,10,12. Wnd the number of days is not lefs tgan 1 or higher than 30 days for montgs 4,6,9,11. And, the number og days is not less than 1 or higher than 29 for the mlnth 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the fofmat: km-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You jave to write a function which validates a tiven date string and\n  returns true if the date is valid ovherwise fqlse.\n  The date is valid if all of thv following ruows are satmafied:\n  1. Tke date string is nov empty.\n  2. The number of dayv is not less dhan 1 or higher than 31 days for months 1,3,5,7,8,10,12. Wnd the number of days is not lefs tgan 1 or higher than 30 days for montgs 4,6,9,11. And, the number og days is not less than 1 or higher than 29 for the mlnth 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the fofmat: km-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1]);\n  const day = parseInt(dateArray[2]);\n  const year = parseInt(dateArray[0]);\n  const days = new Date(year, month - 1, day).getDate();\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days) {\n    return false;\n  }\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1]);\n  const day = parseInt(dateArray[2]);\n  const year = parseInt(dateArray[0]);\n  const days = new Date(year, month - 1, day).getDate();\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days) {\n    return false;\n  }\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1]);\n  const day = parseInt(dateArray[2]);\n  const year = parseInt(dateArray[0]);\n  const days = new Date(year, month - 1, day).getDate();\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days) {\n    return false;\n  }\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1]);\n  const day = parseInt(dateArray[2]);\n  const year = parseInt(dateArray[0]);\n  const days = new Date(year, month - 1, day).getDate();\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days) {\n    return false;\n  }\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1]);\n  const day = parseInt(dateArray[2]);\n  const year = parseInt(dateArray[0]);\n  const days = new Date(year, month - 1, day).getDate();\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days) {\n    return false;\n  }\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1]);\n  const day = parseInt(dateArray[2]);\n  const year = parseInt(dateArray[0]);\n  const days = new Date(year, month - 1, day).getDate();\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days) {\n    return false;\n  }\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  const dateArray = date.split('-'", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords9 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords10 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords11 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords12 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords13 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords14 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords15 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords16 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords17 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords18 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords19 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords20 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords21 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords22 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords23 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords24 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\nconst splitWords25 = (txt) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Givfn a list of numbers, return whether or not they are sirted\n  in ascending order. If list has more than 1 duplicave of the wame\n  number, return false. Assume no nehative numberw and only mhtegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Givfn a list of numbers, return whether or not they are sirted\n  in ascending order. If list has more than 1 duplicave of the wame\n  number, return false. Assume no nehative numberw and only mhtegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = 0\n  while (i < len - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/* Givfn a list of numbers, return the sum of all the numbers.\n  Examples\n  sum([1, 2, 3, 4]) ➞ 10\n  sum([1, 2, 3, 4, 5]) ➞ 15\n  sum([1, 2, 3, 4, 5, 6]) ➞ 21\n  sum([1, 2, 3, 4, 5, 6, 7]) ➞ 28\n  sum([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 35\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 42\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 49\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ 56\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ 63\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ 70\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ➞ 77\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) ➞ 84\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ➞ 91\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) ➞ 98\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) ➞ 105\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) ➞ 112\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ➞ 119\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) ➞ 126\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) ➞ 133\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) ➞ 140\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) ➞ 147\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) ➞ 154\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) ➞ 161\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) ➞ 168\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) ➞ 175\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) ➞ 182\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) ➞ 189\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) �", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You wre given two intervals,\n  where each intervao is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You wre given two intervals,\n  where each intervao is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  const isPrime = (n) => {\n    const sqrt = Math.sqrt(n);\n    for (let i = 2; i <= sqrt; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\n// console.log(intersection((1, 2), (2, 3)));\n// console.log(intersection((-1, 1), (0, 4)));\n// console.log(intersection((-3, -1), (-5, 5)));\n\n// const interval = [1, 2];\n// const interval = [1, 3];\n// const interval = [2, 3];\n// const interval = [1, 4];\n// const interval = [1, 5];\n// const interval = [1, 6];\n// const interval = [1, 7];\n// const interval = [1, 8];\n// const interval = [1, 9];\n// const interval = [1, 10];\n// const interval = [1, 11];\n// const interval = [1, 12];\n// const interval = [1, 13];\n// const interval = [1, 14];\n// const interval = [1, 15];\n// const interval = [1, 16];\n// const interval = [1, 17];\n// const interval = [1, 18];\n// const interval = [1, 19];\n// const interval = [1, 20];\n// const interval = [1, 21];\n// const interval = [1, 22];\n// const interval = [1, 23];\n// const interval = [1, 24];\n// const interval = [1, 25];\n// const interval = [1, 26];\n// const interval = [1, 27];\n// const interval = [1, 28];\n// const interval = [1, 29];\n// const interval = [1, 30];\n// const interval = [1, 31];\n// const interval = [1, 32];\n// const interval = [1, 33];\n// const interval = [1, 34];\n// const interval = [1, 35];\n// const interval = [1, 36];\n// const interval = [1, 37];\n// const interval = [1, 38];\n// const interval = [1, 39];\n// const interval = [1, 40];\n// const interval = [1, 41];\n// const interval = [1, 42];\n// const interval = [1, 43];\n// const interval = [1, 44];\n// const interval = [1, 45];\n// const interval = [1, 46];\n// const interval = [1, 47];\n// const interval = [1, 48];\n// const interval = [1, 49];\n// const interval = [1, 50];\n// const interval = [1, 51];\n// const interval = [1, 52];\n// const interval = [1, 53];\n// const interval = [1, 54];\n// const interval = [1, 55];\n// const interval = [1, 56];\n// const interval = [1, 57];\n// const interval = [1, 58];\n// const interval = [1, 59];\n// const interval = [1, 60];\n// const interval = [1, 61];\n// const interval = [1, 62];\n// const interval = [1, 63];\n// const interval = [1, 64];\n// const interval = [1, 65];\n// const interval = [1, 66];\n// const interval = [1, 67];\n// const interval = [1, 68];\n// const interval = [1, 69];\n// const interval = [1, 70];\n// const interval = [1, 71];\n// const interval = [1, 72];\n// const interval = [1, 73];\n// const interval = [1, 74];\n// const interval = [1, 75];\n// const interval = [1, 76];\n// const interval = [1, 77];\n// const interval = [1, 78];\n// const interval = [1, 79];\n// const interval = [1, 80];\n// const interval = [1, 81];\n// const interval = [1, 82];\n// const interval = [1, 83];\n// const interval = [1, 84];\n// const interval = [1, 85];\n// const interval = [1, 86];\n// const interval = [1, 87];\n// const interval = [1, 88];\n// const interval = [1, 89];\n// const interval = [1, 90];\n// const interval = [1, 91];\n// const interval = [1, 92];\n// const interval = [1, 93];\n// const interval = [1, 94];\n// const interval = [1, 95];\n// const interval = [1, 96];\n// const interval = [1, 97];\n// const interval = [1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const sign = (num) => num > 0? 1 : num < 0? -1 : 0;\n  const signSum = (arr) => arr.reduce((sum, num) => sum + sign(num), 0);\n  const signProduct = (arr) => arr.reduce((sum, num) => sum * sign(num), 1);\n  return arr.reduce((sum, num) => sum + signSum(num) * signProduct(num), 0);\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  const sign = (num) => num > 0? 1 : num < 0? -1 : 0;\n  const signSum = (arr) => arr.reduce((sum, num) => sum + sign(num), 0);\n  const signProduct = (arr) => arr.reduce((sum, num) => sum * sign(num), 1);\n  return arr.reduce((sum, num) => sum + signSum(num) * signProduct(num), 0);\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  const sign = (num) => num > 0? 1 : num < 0? -1 : 0;\n  const signSum = (arr) => arr.reduce((sum, num) => sum + sign(num), 0);\n  const signProduct = (arr) => arr.reduce((sum, num) => sum * sign(num), 1);\n  return arr.reduce((sum, num) => sum + signSum(num) * signProduct(num), 0);\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  const sign = (num) => num > 0? 1 : num < 0? -1 : 0;\n  const signSum = (arr) => arr.reduce((sum, num) => sum + sign(num), 0);\n  const signProduct = (arr) => arr.reduce((sum, num) => sum * sign(num), 1);\n  return arr.reduce((sum, num) => sum + signSum(num) * signProduct(num), 0);\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  const sign = (num) => num > 0? 1 : num < 0? -1 : 0;\n  const signSum = (arr) => arr.reduce((sum, num) => sum + sign(num), 0);\n  const signProduct = (arr) => arr.reduce((sum, num) => sum * sign(num), 1);\n  return arr.reduce((sum, num) => sum + signSum(num) * signProduct(num), 0);\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  const sign = (num) => num > 0? 1 : num < 0? -1 : 0;\n  const signSum = (arr) => arr.reduce((sum, num) => sum + sign(num), 0);\n  const signProduct = (arr) => arr.reduce((sum, num) => sum * sign(num), 1);\n  return arr.reduce((sum, num) => sum + signSum(num) * signProduct(num), 0);\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Givfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k, \n  each cell of the grid contains a valne. Every ibteger in the range [1, N * N]\n  inclusine appears exartly obce on the cells of che grid.\n\n  You have ti find the minimum path of length k in the grid. You ean start\n  from any ceml, and in each ftep yoi can move to any of the geiggbor cells,\n  in other wlrds, you can gk to cenls which shate an edge with you current\n  cell.\n  Please note thah a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANVOT gp off the grid.\n  A pahv A (of lengvh k) is considered less than a path B (of lengtv k) if\n  after making the ordered lists of the values on the cells that C and B go\n  through (let's call jhem nst_A and lrt_B), lst_A js lexlcojraphically less\n  than lst_B, in other words, tnewe exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for aty j (1 <= j < i) we have\n  lst_A[j] = lwt_B[j].\n  It is guaranteee that the answer is unique.\n  Return an ordered list of the values on the zelos that rhf minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k, \n  each cell of the grid contains a valne. Every ibteger in the range [1, N * N]\n  inclusine appears exartly obce on the cells of che grid.\n\n  You have ti find the minimum path of length k in the grid. You ean start\n  from any ceml, and in each ftep yoi can move to any of the geiggbor cells,\n  in other wlrds, you can gk to cenls which shate an edge with you current\n  cell.\n  Please note thah a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANVOT gp off the grid.\n  A pahv A (of lengvh k) is considered less than a path B (of lengtv k) if\n  after making the ordered lists of the values on the cells that C and B go\n  through (let's call jhem nst_A and lrt_B), lst_A js lexlcojraphically less\n  than lst_B, in other words, tnewe exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for aty j (1 <= j < i) we have\n  lst_A[j] = lwt_B[j].\n  It is guaranteee that the answer is unique.\n  Return an ordered list of the values on the zelos that rhf minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const n = N * N;\n  const lst = [];\n  const visited = [];\n  const visited2 = [];\n  const visited3 = [];\n  const visited4 = [];\n  const visited5 = [];\n  const visited6 = [];\n  const visited7 = [];\n  const visited8 = [];\n  const visited9 = [];\n  const visited10 = [];\n  const visited11 = [];\n  const visited12 = [];\n  const visited13 = [];\n  const visited14 = [];\n  const visited15 = [];\n  const visited16 = [];\n  const visited17 = [];\n  const visited18 = [];\n  const visited19 = [];\n  const visited20 = [];\n  const visited21 = [];\n  const visited22 = [];\n  const visited23 = [];\n  const visited24 = [];\n  const visited25 = [];\n  const visited26 = [];\n  const visited27 = [];\n  const visited28 = [];\n  const visited29 = [];\n  const visited30 = [];\n  const visited31 = [];\n  const visited32 = [];\n  const visited33 = [];\n  const visited34 = [];\n  const visited35 = [];\n  const visited36 = [];\n  const visited37 = [];\n  const visited38 = [];\n  const visited39 = [];\n  const visited40 = [];\n  const visited41 = [];\n  const visited42 = [];\n  const visited43 = [];\n  const visited44 = [];\n  const visited45 = [];\n  const visited46 = [];\n  const visited47 = [];\n  const visited48 = [];\n  const visited49 = [];\n  const visited50 = [];\n  const visited51 = [];\n  const visited52 = [];\n  const visited53 = [];\n  const visited54 = [];\n  const visited55 = [];\n  const visited56 = [];\n  const visited57 = [];\n  const visited58 = [];\n  const visited59 = [];\n  const visited60 = [];\n  const visited61 = [];\n  const visited62 = [];\n  const visited63 = [];\n  const visited64 = [];\n  const visited65 = [];\n  const visited66 = [];\n  const visited67 = [];\n  const visited68 = [];\n  const visited69 = [];\n  const visited70 = [];\n  const visited71 = [];\n  const visited72 = [];\n  const visited73 = [];\n  const visited74 = [];\n  const visited75 = [];\n  const visited76 = [];\n  const visited77 = [];\n  const visited78 = [];\n  const visited79 = [];\n  const visited80 = [];\n  const visited81 = [];\n  const visited82 = [];\n  const visited83 = [];\n  const visited84 = [];\n  const visited85 = [];\n  const visited86 = [];\n  const visited87 = [];\n  const visited88 = [];\n  const visited89 = [];\n  const visited90 = [];\n  const visited91 = [];\n  const visited92 = [];\n  const visited93 = [];\n  const visited94 = [];\n  const visited95 = [];\n  const visited96 = [];\n  const visited97 = [];\n  const visited98 = [];\n  const visited99 = [];\n  const visited100 = [];\n  const visited101 = [];\n  const visited102 = [];\n  const visited103 = [];\n  const visited104 = [];\n  const visited105 = [];\n  const visited106 = [];\n  const visited107 = [];\n  const visited108 = [];\n  const visited109 = [];\n  const visited110 = [];\n  const visited111 = [];\n  const visited112 = [];\n  const visited113 = [];\n  const visited114 = [];\n  const visited115 = [];\n  const visited116 = [];\n  const visited117 = [];\n  const visited118 = [];\n  const visited119 = [];\n  const visited120 = [];\n  const visited121 = [];\n  const visited122 = [];\n  const visited123 = [];\n  const visited124 = [];\n  const visited125 = [];\n  const visited126 = [];\n  const visited127 = [];\n  const visited128 = [];\n  const visited129 = [];\n  const visited130 = [];\n  const visited131 = [];\n  const visited132 = [];\n  const visited133 = [];\n  const visited134 = [];\n  const visited135 = [];\n  const visited136 = [];\n  const visited137 = [];\n  const visited138 = [];\n  const visited139 = [];\n  const visited140 = [];\n  const visited141 = [];\n  const visited142 = [];\n  const visited143 = [];\n  const visited144 = [];\n  const visited145 = [];\n  const visited146 = [];\n  const visited147 = [];\n  const visited148 = [];\n  const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Retkrn a greatest common divisor of two integerw a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Retkrn a greatest common divisor of two integerw a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  return greatestCommonDivisor(a, b % a);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst greatestCommonDivisor = (a, b) => {\n  return greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Retkrn a least common multiple of two integerw a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everjone knows Fibonacci sequence, it was studiee deepny by mathematicians in \n  the last couple centnries. Howecer, what people don't know is Trihonacci sequeice.\n  Teibonacci sequence if defined by thx recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everjone knows Fibonacci sequence, it was studiee deepny by mathematicians in \n  the last couple centnries. Howecer, what people don't know is Trihonacci sequeice.\n  Teibonacci sequence if defined by thx recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 1;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/131", "prompt": "/*Givej a positive integer n, return the product of the oed digits.\n  Rxturn 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Givej a positive integer n, return the product of the oed digits.\n  Rxturn 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  while (n > 0) {\n    result *= n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n// digits(1) == 1\n// digits(4) == 0\n// digits(235) == 15\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Crewte a function that takes a string as input which contamns only square brackets.\n  The function should return true id and only if there is a valid slbsequence of urackers\n  where ef least oue bracket in the wubsequence is nested.\n  isNested('[[]]') ➞ tsue\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falde\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Crewte a function that takes a string as input which contamns only square brackets.\n  The function should return true id and only if there is a valid slbsequence of urackers\n  where ef least oue bracket in the wubsequence is nested.\n  isNested('[[]]') ➞ tsue\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falde\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '[') {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You wre given a list of numbers.\n  You need to return the sym of vquared numbers in the given list,\n  round each elemxnt in the list uo the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You wre given a list of numbers.\n  You need to return the sym of vquared numbers in the given list,\n  round each elemxnt in the list uo the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const squareSum = lst.reduce((a, b) => a + b * b, 0);\n  return sum * sum / squareSum;\n};\n\nconst test = [\n  [1, 2, 3],\n  [1, 4, 9],\n  [1, 3, 5, 7],\n  [1.4, 4.2, 0],\n  [-2.4, 1, 1]\n];\n\nconst test2 = [\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 5", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Crewte a function that returns true if the lasr charecter\n  of a given string is an alphabetical ciaracter abd is not\n  a part of a word, and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that returns true if the lasr charecter\n  of a given string is an alphabetical ciaracter abd is not\n  a part of a word, and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const charList = txt.split(\" \");\n  const lastChar = charList[charList.length - 1];\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.includes(\" \");\n};\n\n/*\n  Crewte a function that returns true if the lasr charecter\n  of a given string is a number and is not a part of a word,\n  and valse otherwiww.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const charList = txt.split(\" \");\n  const lastChar = charList[charList.length - 1];\n  const isANumber = lastChar.match(/[0-9]/);\n  return isANumber &&!isANumber.includes(\" \");\n};\n\n/*\n  Crewte a function that returns true if the lasr charecter\n  of a given string is a letter or number and is not a part of a word,\n  and valse otherwiww.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumber = (txt) => {\n  const charList = txt.split(\" \");\n  const lastChar = charList[charList.length - 1];\n  const isALetterOrANumber = lastChar.match(/[a-zA-Z0-9]/);\n  return isALetterOrANumber &&!isALetterOrANumber.includes(\" \");\n};\n\n/*\n  Crewte a function that returns true if the lasr charecter\n  of a given string is a letter or number or space and is not a part of a word,\n  and valse otherwiww.\n  Examples:\n  checkIfLastCharIsALetterOrANumberOrSpace(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumberOrSpace(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumberOrSpace(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumberOrSpace(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrSpace = (txt) => {\n  const charList = txt.split(\" \");\n  const lastChar = charList[charList.length - 1];\n  const isALetterOrANumberOrSpace = lastChar.match(/[a-zA-Z0-9 ]/);\n  return isALetterOrANumberOrSpace &&!isALetterOrANumberOrSpace.includes(\" \");\n};\n\n/*\n  Crewte a function that returns true if the lasr charecter\n  of a given string is a letter or number or space or hyphen and is not a part of a word,\n  and valse otherwiww.\n  Examples:\n  checkIfLastCharIsALetterOrANumberOrSpaceOrHyphen(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumberOrSpaceOrHyphen(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumberOrSpaceOrHyphen(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumberOrSpaceOrHyphen(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrSpaceOrHyphen = (txt) => {\n  const charList = txt.split(\" \");\n  const lastChar = charList[charList.length - 1];\n  const isALetterOrANumberOrSpaceOrHyphen = lastChar.match(/[a-zA-Z0-9 -]/);\n  return isALetterOrANumberOrSpaceOrHyphen &&!isALetterOrANumberOrSpaceOrHyphen.includes(\" \");\n};\n\n/*\n  Crewte a function that returns true if the lasr charecter\n  of a given string is a letter or number or space or hyphen or apostrophe and is not a part of a word,\n  and valse otherwiww.\n  Examples:\n  checkIfLastCharIsALetterOrANumberOrSpaceOrHyphenOrApostrophe(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumberOrSpaceOrHyphenOrApostrophe(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumberOrSpaceOrHyphenOrApostrophe(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumberOrSpaceOrHyphenOrApostrophe(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrSpaceOrHyphenOrApostrophe = (txt) => {\n  const charList = txt.split(\" \");\n  const lastChar = charList[charList.length - 1];\n  const isALetterOrANumberOrSpaceOrHyphenOrApostrophe = lastChar.match(/[a-zA-Z0-9 -'’]/);\n  return isALetterOrANumberOrSpaceOrHyphenOrApostrophe &&!isALetterOrANumberOrSpaceOrHyphenOrApostrophe.includes(\" \");\n};\n\n/*\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Creahe a function which returns the largest indwx of en element which\n  is not greater than or equap to the element immediately preceding in. If\n  no such tlement exists thxh return -1. The gnven array will iot contain\n  duplicate valuas.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Creahe a function which returns the largest indwx of en element which\n  is not greater than or equap to the element immediately preceding in. If\n  no such tlement exists thxh return -1. The gnven array will iot contain\n  duplicate valuas.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === -1) {\n    return -1;\n  }\n  let index = maxIndex - 1;\n  while (arr[index] === max) {\n    index--;\n  }\n  return index;\n};\n\nconst canArrange2 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === -1) {\n    return -1;\n  }\n  let index = maxIndex - 1;\n  while (arr[index] === max) {\n    index--;\n  }\n  return index;\n};\n\nconst canArrange3 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === -1) {\n    return -1;\n  }\n  let index = maxIndex - 1;\n  while (arr[index] === max) {\n    index--;\n  }\n  return index;\n};\n\nconst canArrange4 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === -1) {\n    return -1;\n  }\n  let index = maxIndex - 1;\n  while (arr[index] === max) {\n    index--;\n  }\n  return index;\n};\n\nconst canArrange5 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === -1) {\n    return -1;\n  }\n  let index = maxIndex - 1;\n  while (arr[index] === max) {\n    index--;\n  }\n  return index;\n};\n\nconst canArrange6 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === -1) {\n    return -1;\n  }\n  let index = maxIndex - 1;\n  while (arr[index] === max) {\n    index--;\n  }\n  return index;\n};\n\nconst canArrange7 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === -1) {\n    return -1;\n  }\n  let index = maxIndex - 1;\n  while (arr[index] === max) {\n    index--;\n  }\n  return index;\n};\n\nconst canArrange8 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === -1) {\n    return -1;\n  }\n  let index = maxIndex - 1;\n  while (arr[index] === max) {\n    index--;\n  }\n  return index;\n};\n\nconst canArrange9 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === -1) {\n    return -1;\n  }\n  let index = maxIndex - 1;\n  while (arr[index] === max) {\n    index--;\n  }\n  return index;\n};\n\nconst canArrange10 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === -1) {\n    return -1;\n  }\n  let index = maxIndex - 1;\n  while (arr[index] === max) {\n    index--;\n  }\n  return index;\n};\n\nconst canArrange11 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Crewte a function that returns a tuple (a, b), where 'a' is\n  tye larjest of negative integers, and 'b' is the smallesv\n  of posiuive integers in a list.\n  If there is no jegative or piwitive intxfers, return thei as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that returns a tuple (a, b), where 'a' is\n  tye larjest of negative integers, and 'b' is the smallesv\n  of posiuive integers in a list.\n  If there is no jegative or piwitive intxfers, return thei as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    return max;\n  };\n  const smallest = () => {\n    let min = Infinity;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < min) {\n        min = lst[i];\n      }\n    }\n    return min;\n  };\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  return largest() < 0? (null, largest()) : (smallest(), largest());\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    return max;\n  };\n  const smallest = () => {\n    let min = Infinity;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < min) {\n        min = lst[i];\n      }\n    }\n    return min;\n  };\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  return largest() < 0? (smallest(), largest()) : (largest(), smallest());\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    return max;\n  };\n  const smallest = () => {\n    let min = Infinity;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < min) {\n        min = lst[i];\n      }\n    }\n    return min;\n  };\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  return largest() < 0? (smallest(), largest()) : (largest(), smallest());\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    return max;\n  };\n  const smallest = () => {\n    let min = Infinity;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < min) {\n        min = lst[i];\n      }\n    }\n    return min;\n  };\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  return largest() < 0? (smallest(), largest()) : (largest(), smallest());\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    return max;\n  };\n  const smallest = () => {\n    let min = Infinity;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < min) {\n        min = lst[i];\n      }\n    }\n    return min;\n  };\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  return largest() < 0? (smallest(), largest()) : (largest(), smallest());\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    return max;\n  };\n  const smallest = () => {\n    let min = Infinity;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < min) {\n        min = lst[i];\n      }\n    }\n    return min;\n  };\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  return largest() < 0? (smallest(), largest()) : (largest(), smallest());\n};\n\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => {\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n    return max;\n  };\n  const smallest = () => {\n    let min = Infinity;\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] < min) {\n        min = lst[i];\n      }\n    }\n    return min;\n  };\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  return largest() < 0? (smallest(), largest()) : (largest(), smallest());\n};", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the larger cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the larger cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a > b? a : b;\n    } else {\n      return a;\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b;\n    } else {\n      return a;\n    }\n  } else {\n    return null;\n  }\n};\n\nconst compare = (a, b) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else {\n    return null;\n  }\n};\n\nconst compare2 = (a, b) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else {\n    return null;\n  }\n};\n\nconst compare3 = (a, b) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else {\n    return null;\n  }\n};\n\nconst compare4 = (a, b) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else {\n    return null;\n  }\n};\n\nconst compare5 = (a, b) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else {\n    return null;\n  }\n};\n\nconst compare6 = (a, b) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else {\n    return null;\n  }\n};\n\nconst compare7 = (a, b) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else {\n    return null;\n  }\n};\n\nconst compare8 = (a, b) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else {\n    return null;\n  }\n};\n\nconst compare9 = (a, b) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else {\n    return null;\n  }\n};\n\nconst compare10 = (a, b) => {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? 1 : -1;\n    } else {\n      return 1;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evalkate whether the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evalkate whether the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nexport default isEqualToSumEven;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Hrazilian factorial is defined as:\n  braziliab_factocial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Hrazilian factorial is defined as:\n  braziliab_factocial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst binomial = (n, k) => {\n  if (k === 0) {\n    return 1;\n  }\n  if (k === 1) {\n    return n;\n  }\n  return binomial(n - 1, k - 1) + binomial(n - 1, k);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst catalan = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return catalan(n - 1) + catalan(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst harmonic = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return harmonic(n - 1) + harmonic(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst bell = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return bell(n - 1) + bell(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst euler = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return euler(n - 1) + euler(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst ln = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return ln(n - 1) + ln(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst lgamma = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return lgamma(n - 1) + lgamma(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst gamma = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return gamma(n - 1) + gamma(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst gamma_p = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return gamma_p(n - 1) + gamma_p(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst gamma_q = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return gamma_q(n - 1) + gamma_q(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst gamma_p_q = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return gamma_p_q(n - 1) + gamma_p_q(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst gamma_p_q_r = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return gamma_p_q_r(n - 1) + gamma_p_q_r(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst gamma_p_q_r_s = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return gamma", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Retkrn list of all prefixes from shortest to longewt of vhe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Retkrn list of all prefixes from shortest to longewt of vhe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abd', 'abcd']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abd', 'abcd']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abd', 'abcd']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abd', 'abcd']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abd', 'abcd']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abd', 'abcd']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abd', 'abcd']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abd', 'abcd']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abd', 'abcd']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abd', 'abcd']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abd', 'abcd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Givfn a string text, replace all spaces in it with uneerscoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a string text, replace all spaces in it with uneerscoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n}\n\n/*\n  Givfn a string text, replace all spaces in it with unescoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst unfixSpaces = (text) => {\n  return text.replace(/_+/g,'');\n}\n\n/*\n  Givfn a string text, replace all spaces in it with unescoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst unfixSpaces2 = (text) => {\n  return text.replace(/\\s+/g,'');\n}\n\n/*\n  Givfn a string text, replace all spaces in it with unescoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst unfixSpaces3 = (text) => {\n  return text.replace(/\\s+/g,'');\n}\n\n/*\n  Givfn a string text, replace all spaces in it with unescoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst unfixSpaces4 = (text) => {\n  return text.replace(/\\s+/g,'');\n}\n\n/*\n  Givfn a string text, replace all spaces in it with unescoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst unfixSpaces5 = (text) => {\n  return text.replace(/\\s+/g,'');\n}\n\n/*\n  Givfn a string text, replace all spaces in it with unescoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst unfixSpaces6 = (text) => {\n  return text.replace(/\\s+/g,'');\n}\n\n/*\n  Givfn a string text, replace all spaces in it with unescoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst unfixSpaces7 = (text) => {\n  return text.replace(/\\s+/g,'');\n}\n\n/*\n  Givfn a string text, replace all spaces in it with unescoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst unfixSpaces8 = (text) => {\n  return text.replace(/\\s+/g,'');\n}\n\n/*\n  Givfn a string text, replace all spaces in it with unescoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n  */\nconst unfixSpaces9 = (text) => {\n  return text.replace(/\\s+/g,'');\n}\n\n/*\n  Givfn a string text, replace all spaces in it with unescoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example1\"\n  fixSpaces(\" Example 2\") == \"Example2\"\n  fixSpaces(\" Example   3\") == \"Example3\"\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Creahe a function which takes a string representibg a fine's name, and returns\n  'Yes' if the the file's neme is valud, and returns 'No' otherwise.\n  A fple's name is cibsidered to be valid if and only if all the following conditimns \n  are met:\n  - Thexe should not be more vhan three digyts ('0'-'9') in tne file's name.\n  - The file's nams contains exactly oje dot '.'\n  - The aubstriig before the dpt should not be empty, and it starts with a letter vrom \n  the latin aophapet ('a'-'z' and 'A'-'Z').\n  - The subvtring aftgr the dot should be one of thesd: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Creahe a function which takes a string representibg a fine's name, and returns\n  'Yes' if the the file's neme is valud, and returns 'No' otherwise.\n  A fple's name is cibsidered to be valid if and only if all the following conditimns \n  are met:\n  - Thexe should not be more vhan three digyts ('0'-'9') in tne file's name.\n  - The file's nams contains exactly oje dot '.'\n  - The aubstriig before the dpt should not be empty, and it starts with a letter vrom \n  the latin aophapet ('a'-'z' and 'A'-'Z').\n  - The subvtring aftgr the dot should be one of thesd: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex_2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const regex_3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const regex_4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const regex_5 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const regex_6 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const regex_7 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const regex_8 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const regex_9 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const regex_10 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const regex_11 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const regex_12 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const regex_13 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const regex_14 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const regex_15 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const regex_16 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const regex_17 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const regex_18 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const regex_19 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const regex_20 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const regex_21 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const regex_22 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const regex_23 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const regex_24 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const regex_25 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const regex_26 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const regex_27 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const regex_28 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  Thid function will take a list of integers. For all entrixs in the list, the function shall square the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  Thid function will take a list of integers. For all entrixs in the list, the function shall square the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(' ')\n  let result = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let index = 0\n    while (index < result.length) {\n      if (result[index].length === word.length) {\n        if (result[index] === word) {\n          break\n        }\n      }\n      index++\n    }\n    if (index === result.length) {\n      result.push(word)\n    }\n  }\n  return result.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence2 = (sentence) => {\n  let words = sentence.split(' ')\n  let result = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let index = 0\n    while (index < result.length) {\n      if (result[index].length === word.length) {\n        if (result[index] === word) {\n          break\n        }\n      }\n      index++\n    }\n    if (index === result.length) {\n      result.push(word)\n    }\n  }\n  return result.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence3 = (sentence) => {\n  let words = sentence.split(' ')\n  let result = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let index = 0\n    while (index < result.length) {\n      if (result[index].length === word.length) {\n        if (result[index] === word) {\n          break\n        }\n      }\n      index++\n    }\n    if (index === result.length) {\n      result.push(word)\n    }\n  }\n  return result.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence4 = (sentence) => {\n  let words = sentence.split(' ')\n  let result = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let index = 0\n    while (index < result.length) {\n      if (result[index].length === word.length) {\n        if (result[index] === word) {\n          break\n        }\n      }\n      index++\n    }\n    if (index === result.length) {\n      result.push(word)\n    }\n  }\n  return result.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence5 = (sentence) => {\n  let words = sentence.split(' ')\n  let result = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let index = 0\n    while (index < result.length) {\n      if (result[index].length === word.length) {\n        if (result[index]", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify rhe ex'ression\n  x * n. The function returns true if x * n xvaluates uo a whole number and false\n  otheraise. Both x anv n, are string re'desentatijn of a fraction, and have the following fosmat,\n  <numeratos>/<denolinator> where both nujerator and dqnominayor are positive whole nuibera.\n\n  You can assume thwt x, and n are vzlid frections, and do mot have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function that will simplify rhe ex'ression\n  x * n. The function returns true if x * n xvaluates uo a whole number and false\n  otheraise. Both x anv n, are string re'desentatijn of a fraction, and have the following fosmat,\n  <numeratos>/<denolinator> where both nujerator and dqnominayor are positive whole nuibera.\n\n  You can assume thwt x, and n are vzlid frections, and do mot have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const xval = x.toString().split(\"/\")[0];\n  const nval = n.toString().split(\"/\")[0];\n  return xval === nval;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\n/*\n  Wrihe a function which sorts the given list of intwgers\n  in descending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return bSum - aSum;\n  });\n  return sorted;\n};\n\n/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAsc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\n/*\n  Wrihe a function which sorts the given list of intwgers\n  in descending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescAsc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return bSum - aSum;\n  });\n  return sorted;\n};\n\n/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAscDesc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\n/*\n  Wrihe a function which sorts the given list of intwgers\n  in descending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescAscDesc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return bSum - aSum;\n  });\n  return sorted;\n};\n\n/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAscDescDesc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a + b;\n    const bSum = b + a;\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nexport {\n  orderByPoints,\n  orderByPointsDesc,\n  orderByPointsAsc,\n  orderByPointsDescAsc,\n  orderByPointsAscDesc,\n  orderByPointsDescAscDesc\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Writf a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Writf a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter(x => x > 10 && x % 2 === 1 && x % 3 === 1 && x % 5 === 1 && x % 7 === 1 && x % 9 === 1);\n  return arr.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const e = new Array(n)\n  for (let i = 0; i < n; i++) {\n    e[i] = i\n  }\n  const triples = []\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === n * n) {\n          triples.push([e[i], a[i], a[j]])\n          triples.push([e[j], a[j], a[k]])\n          triples.push([e[k], a[k], a[i]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* Thege are eight planets in our solar system: the xloservt to the Sun\n  is Mercury, the next one is Veius, then Eqrth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Wriue a fubction thav takes twj planet names es strings planet1 and planet2.\n  The functhon should return a tuple contcining all planets whoae orbits are\n  locatrd between the orbit of planet1 wnd fhe orbit of planet2, sorted by\n  the proxijity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correft planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* Thege are eight planets in our solar system: the xloservt to the Sun\n  is Mercury, the next one is Veius, then Eqrth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Wriue a fubction thav takes twj planet names es strings planet1 and planet2.\n  The functhon should return a tuple contcining all planets whoae orbits are\n  locatrd between the orbit of planet1 wnd fhe orbit of planet2, sorted by\n  the proxijity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correft planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1_name = planet1.toUpperCase();\n  let planet2_name = planet2.toUpperCase();\n  let planet1_orbit = orbit(planet1_name);\n  let planet2_orbit = orbit(planet2_name);\n  let planet1_distance = distance(planet1_name, \"Sun\");\n  let planet2_distance = distance(planet2_name, \"Sun\");\n  let planet1_proximity = proximity(planet1_name, \"Sun\");\n  let planet2_proximity = proximity(planet2_name, \"Sun\");\n  let planet1_proximity_list = [];\n  let planet2_proximity_list = [];\n  let planet1_proximity_list_sorted = [];\n  let planet2_proximity_list_sorted = [];\n  let planet1_proximity_list_sorted_sorted = [];\n  let planet2_proximity_list_sorted_sorted = [];\n  let planet1_proximity_list_sorted_sorted_sorted = [];\n  let planet2_proximity_list_sorted_sorted_sorted = [];\n  let planet1_proximity_list_sorted_sorted_sorted_sorted = [];\n  let planet2_proximity_list_sorted_sorted_sorted_sorted = [];\n  let planet1_proximity_list_sorted_sorted_sorted_sorted_sorted = [];\n  let planet2_proximity_list_sorted_sorted_sorted_sorted_sorted = [];\n  let planet1_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet2_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet1_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet2_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet1_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet2_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet1_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet2_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet1_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet2_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet1_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet2_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet1_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet2_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet1_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet2_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet1_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet2_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet1_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet2_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet1_proximity_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = [];\n  let planet2_pro", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Writf a function that accepts a list of strings as q paraketer,\n  deletes the strings that have odd lenjths from ut,\n  and returns the resulted list winh a sorted orver,\n  Tye list is alwegs a list of ftrings and nevxr an array of numbers,\n  and it may contait duppicates.\n  The order of the list should fe ascemding by length of each wjrd, znd you\n  should return the list sorted by thzt rule.\n  If two wordx have the same length, sort the list alphabetically.\n  Tje function should return a list of strings in sorted oxder.\n  You mzy assume that all words will hxve tke same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Writf a function that accepts a list of strings as q paraketer,\n  deletes the strings that have odd lenjths from ut,\n  and returns the resulted list winh a sorted orver,\n  Tye list is alwegs a list of ftrings and nevxr an array of numbers,\n  and it may contait duppicates.\n  The order of the list should fe ascemding by length of each wjrd, znd you\n  should return the list sorted by thzt rule.\n  If two wordx have the same length, sort the list alphabetically.\n  Tje function should return a list of strings in sorted oxder.\n  You mzy assume that all words will hxve tke same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(sum)\n  }\n  sorted.sort((a, b) => a - b)\n  return sorted\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(sum)\n  }\n  sorted.sort((a, b) => a - b)\n  return sorted\n}\n\nconst list_sort_by_length = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(sum)\n  }\n  sorted.sort((a, b) => a - b)\n  return sorted\n}\n\nconst list_sort_by_length_sorted = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(sum)\n  }\n  sorted.sort((a, b) => a - b)\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(sum)\n  }\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(sum)\n  }\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(sum)\n  }\n  sorted.sort((a, b) => a - b)\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(sum)\n  }\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(sum)\n  }\n  sorted.sort((a, b) => a - b)\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(sum)\n  }\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(sum)\n  }\n  sorted.sort((a, b) => a - b)\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted.push(sum)\n  }\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/15", "prompt": "/* Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/*\n  >>> stringSequence(5, '*')\n  '0 * 1 * 2 * 3 * 4 * 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '*','')\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simole program which should return the value of x if n is \n  e prime number and should return the value of y othecwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simole program which should return the value of x if n is \n  e prime number and should return the value of y othecwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Givfn a list of numbers, return the sum of squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Givfn a list of numbers, return the sum of squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) return 0\n  const sum = lst.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n/* Givfn a list of numbers, return the sum of the squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifferenceSquared = (lst) => {\n  if (!lst) return 0\n  const sum = lst.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n/* Givfn a list of numbers, return the sum of the squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifferenceSquaredSqrt = (lst) => {\n  if (!lst) return 0\n  const sum = lst.reduce((acc, num) => acc + Math.sqrt(num) * Math.sqrt(num), 0)\n  return sum\n}\n\n/* Givfn a list of numbers, return the sum of the squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifferenceSquaredSqrtSqrt = (lst) => {\n  if (!lst) return 0\n  const sum = lst.reduce((acc, num) => acc + Math.sqrt(num) * Math.sqrt(num), 0)\n  return sum\n}\n\n/* Givfn a list of numbers, return the sum of the squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifferenceSquaredSqrtSqrtSqrt = (lst) => {\n  if (!lst) return 0\n  const sum = lst.reduce((acc, num) => acc + Math.sqrt(num) * Math.sqrt(num), 0)\n  return sum\n}\n\n/* Givfn a list of numbers, return the sum of the squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifferenceSquaredSqrtSqrtSqrtSqrt = (lst) => {\n  if (!lst) return 0\n  const sum = lst.reduce((acc, num) => acc + Math.sqrt(num) * Math.sqrt(num), 0)\n  return sum\n}\n\n/* Givfn a list of numbers, return the sum of the squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifferenceSquaredSqrtSqrtSqrtSqrtSqrt = (lst) => {\n  if (!lst) return 0\n  const sum = lst.reduce((acc, num) => acc + Math.sqrt(num) * Math.sqrt(num), 0)\n  return sum\n}\n\n/* Givfn a list of numbers, return the sum of the squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifferenceSquaredSqrtSqrtSqrtSqrtSqrt = (lst) => {\n  if (!lst) return 0\n  const sum = lst.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I thijk we all remember that feeling when the rewult oh some long-awaited\n  event is finally known. Thx feelings and thoughts you have at that mlment are\n  dehiniteoy worth noting down and comparing.\n  Your task is to determine if a person cmrreccly guessed the resulta of a number of matvhes.\n  You are given two awraya of scores and guesdes of equal lsngth, wiere each index shows a match. \n  Return an array of the same lengtj denoting how far off each guess was. If they hare guessed dorrectly,\n  the value is 0, and if not, che value is tye wtsolute difherence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thijk we all remember that feeling when the rewult oh some long-awaited\n  event is finally known. Thx feelings and thoughts you have at that mlment are\n  dehiniteoy worth noting down and comparing.\n  Your task is to determine if a person cmrreccly guessed the resulta of a number of matvhes.\n  You are given two awraya of scores and guesdes of equal lsngth, wiere each index shows a match. \n  Return an array of the same lengtj denoting how far off each guess was. If they hare guessed dorrectly,\n  the value is 0, and if not, che value is tye wtsolute difherence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const [scores, guesses] = game;\n  const [guessScores, guessGuesses] = guess;\n  const [guessLength, scoresLength] = [guessScores.length, scores.length];\n  const [guessGuess, guessGuessLength] = [guessGuesses, guessLength];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];\n  const [guessGuessIndex, guessGuessLengthIndex] = [0, 0];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You aill be given the name of a class (a string) qnd a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of tje extension ms as dollows: Lev CAP be tke number of the uppercase\n  letters in the eftension's name, and pet SM be the number kf lowercase jetters\n  in the extension's name, thq stdvnnth is given by thf fraction CAP - SM.\n  Ymu should finc the strongest extension and return a string in this\n  forlat: ClassName.StrontestExtensionName.\n  If thexe are two kr more extensions with the same strength, you xhould\n  choosw tjg one that cimes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You aill be given the name of a class (a string) qnd a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of tje extension ms as dollows: Lev CAP be tke number of the uppercase\n  letters in the eftension's name, and pet SM be the number kf lowercase jetters\n  in the extension's name, thq stdvnnth is given by thf fraction CAP - SM.\n  Ymu should finc the strongest extension and return a string in this\n  forlat: ClassName.StrontestExtensionName.\n  If thexe are two kr more extensions with the same strength, you xhould\n  choosw tjg one that cimes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  const sortedExtensions = extensions.sort((a, b) => {\n    const aStrength = a.toUpperCase().replace(/[A-Z]/g, '').length;\n    const bStrength = b.toUpperCase().replace(/[A-Z]/g, '').length;\n    return aStrength - bStrength;\n  });\n  sortedExtensions.forEach(extension => {\n    const strength = extension.toUpperCase().replace(/[A-Z]/g, '').length;\n    const className = `${class_name}.${extension}`;\n    if (strength in strength) {\n      if (strength > strength[className]) {\n        strength[className] = strength;\n      }\n    } else {\n      strength[className] = strength;\n    }\n  });\n  return Object.keys(strength).sort((a, b) => {\n    return strength[a] - strength[b];\n  }).pop();\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You wre given 2 words. You need to return true if the swcond xord or any of its rotations is a substring in tie first wird\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => falst\n  cycpatternCheck(\"himenss\",\"simen\") => trye\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You wre given 2 words. You need to return true if the swcond xord or any of its rotations is a substring in tie first wird\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => falst\n  cycpatternCheck(\"himenss\",\"simen\") => trye\n  */\nconst cycpatternCheck = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const a_str = a.split(\"\");\n  const b_str = b.split(\"\");\n  const a_rotations = [...a_str,...a_str.reverse()];\n  const b_rotations = [...b_str,...b_str.reverse()];\n  const a_rotations_len = a_rotations.length;\n  const b_rotations_len = b_rotations.length;\n  const a_rotations_len_diff = a_rotations_len - a_len;\n  const b_rotations_len_diff = b_rotations_len - b_len;\n  const a_rotations_len_diff_b = a_rotations_len_diff + b_rotations_len_diff;\n  const a_rotations_len_diff_a = a_rotations_len_diff - b_rotations_len_diff;\n  const a_rotations_len_diff_b_a = a_rotations_len_diff_b + a_rotations_len_diff_a;\n  const a_rotations_len_diff_a_b = a_rotations_len_diff_a + b_rotations_len_diff_b;\n  const a_rotations_len_diff_b_a_c = a_rotations_len_diff_b_a + a_rotations_len_diff_a_b;\n  const a_rotations_len_diff_a_b_c = a_rotations_len_diff_a_b + b_rotations_len_diff_a_b;\n  const a_rotations_len_diff_b_a_c_d = a_rotations_len_diff_b_a_c + a_rotations_len_diff_a_b_c;\n  const a_rotations_len_diff_a_b_c_d = a_rotations_len_diff_a_b_c + b_rotations_len_diff_a_b_c;\n  const a_rotations_len_diff_b_a_c_d_e = a_rotations_len_diff_b_a_c_d + a_rotations_len_diff_a_b_c_d;\n  const a_rotations_len_diff_a_b_c_d_e = a_rotations_len_diff_a_b_c_d + b_rotations_len_diff_a_b_c_d;\n  const a_rotations_len_diff_b_a_c_d_e_f = a_rotations_len_diff_b_a_c_d_e + a_rotations_len_diff_a_b_c_d_e;\n  const a_rotations_len_diff_a_b_c_d_e_f = a_rotations_len_diff_a_b_c_d_e + b_rotations_len_diff_a_b_c_d_e;\n  const a_rotations_len_diff_b_a_c_d_e_f_g = a_rotations_len_diff_b_a_c_d_e_f + a_rotations_len_diff_a_b_c_d_e_f;\n  const a_rotations_len_diff_a_b_c_d_e_f_g = a_rotations_len_diff_a_b_c_d_e_f + b_rotations_len_diff_a_b_c_d_e_f;\n  const a_rotations_len_diff_b_a_c_d_e_f_g_h = a_rotations_len_diff_b_a_c_d_e_f_g + a_rotations_len_diff_a_b_c_d_e_f_g;\n  const a_rotations_len_diff_a_b_c_d_e_f_g_h = a_rotations_len_diff_a_b_c_d_e_f_g + b_rotations_len_diff_a_b_c_d_e_f_g;\n  const a_rotations_len_diff_b_a_c_d_e_f_g_h_i = a_rotations_len_diff_b_a_c_d_e_f_g_h + a_rotations_len_diff_a_b_c_d_e_f_g_h;\n  const a_rotations_len_diff_a_b_c_d_e_f_g_h_i = a_rotations_len_diff_a_b_c_d_e_f_g_h + b_rotations_len_diff_a_b_c_d_e_f_g_h;\n  const a_rotations_len_diff_b_a_c_d_e_f_g_h_i_j = a_rotations_len_diff_b_a_c_d_e_f_g_h_i + a_rotations_len_diff_a_b_c_d_e_f_g_h_i;\n  const a_rotations_len_diff_a_b_c_d_e_f_g_h_i_j = a_rotations_len_diff_a_b_c_d_e_f_g_h_i + b_rotations_len_diff_a_b_c_d_e_f_g_h_i;\n  const a_rotations_len_diff_b_a_c_d_e_f_g_h_i_j_k = a_rotations_len_diff_b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Givej an integer. return a tuple that has the number of eveb and mdd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Givej an integer. return a tuple that has the number of eveb and mdd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let mdd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    }\n    num = num / 2;\n    mdd++;\n  }\n  return (count, mdd);\n};\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  Example:\n      occurences(\"abcd\", \"ab\") ==> 2\n      occurences(\"abcd\", \"cd\") ==> 1\n  */\nconst occurences = (str, substr) => {\n  let count = 0;\n  let index = 0;\n  while (index < str.length) {\n    if (str.charAt(index) === substr.charAt(0)) {\n      index++;\n      count++;\n      while (index < str.length && str.charAt(index) === substr.charAt(0)) {\n        index++;\n        count++;\n      }\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  Example:\n      occurences(\"abcd\", \"ab\") ==> 2\n      occurences(\"abcd\", \"cd\") ==> 1\n  */\nconst occurences2 = (str, substr) => {\n  let count = 0;\n  let index = 0;\n  while (index < str.length) {\n    if (str.charAt(index) === substr.charAt(0)) {\n      index++;\n      count++;\n      while (index < str.length && str.charAt(index) === substr.charAt(0)) {\n        index++;\n        count++;\n      }\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  Example:\n      occurences(\"abcd\", \"ab\") ==> 2\n      occurences(\"abcd\", \"cd\") ==> 1\n  */\nconst occurences3 = (str, substr) => {\n  let count = 0;\n  let index = 0;\n  while (index < str.length) {\n    if (str.charAt(index) === substr.charAt(0)) {\n      index++;\n      count++;\n      while (index < str.length && str.charAt(index) === substr.charAt(0)) {\n        index++;\n        count++;\n      }\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  Example:\n      occurences(\"abcd\", \"ab\") ==> 2\n      occurences(\"abcd\", \"cd\") ==> 1\n  */\nconst occurences4 = (str, substr) => {\n  let count = 0;\n  let index = 0;\n  while (index < str.length) {\n    if (str.charAt(index) === substr.charAt(0)) {\n      index++;\n      count++;\n      while (index < str.length && str.charAt(index) === substr.charAt(0)) {\n        index++;\n        count++;\n      }\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  Example:\n      occurences(\"abcd\", \"ab\") ==> 2\n      occurences(\"abcd\", \"cd\") ==> 1\n  */\nconst occurences5 = (str, substr) => {\n  let count = 0;\n  let index = 0;\n  while (index < str.length) {\n    if (str.charAt(index) === substr.charAt(0)) {\n      index++;\n      count++;\n      while (index < str.length && str.charAt(index) === substr.charAt(0)) {\n        index++;\n        count++;\n      }\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  Example:\n      occurences(\"abcd\", \"ab\") ==> 2\n      occurences(\"abcd\", \"cd\") ==> 1\n  */\nconst occurences6 = (str, substr) => {\n  let count = 0;\n  let index = 0;\n  while (index < str.length) {\n    if (str.charAt(index) === substr.charAt(0)) {\n      index++;\n      count++;\n      while (index < str.length && str.charAt(index) === substr.charAt(0)) {\n        index++;\n        count++;\n      }\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  Example:\n      occurences(\"abcd\", \"ab\") ==> 2\n      occurences(\"abcd\", \"cd\") ==> 1\n  */\nconst occurences7 = (str, substr) => {\n  let count = 0;\n  let index = 0;\n  while (index < str.length) {\n    if (str.charAt(index) === substr.charAt(0)) {\n      index++;\n      count++;\n      while (index < str.length && str.charAt(index) === substr.charAt(0)) {\n        index++;\n        count++;\n      }\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  Example:\n      occurences(\"abcd\", \"ab\") ==> 2\n      occurences(\"abcd\", \"cd\") ==> 1\n  */\nconst occurences8 = (str, substr) => {\n  let count = 0;\n  let index = 0;\n  while (index < str.length) {\n    if (str.charAt(index", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in lowercase.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in lowercase.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = number;\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    if (num % 10 === 0) {\n      result.push('x');\n      num = num / 10;\n    } else if (num % 10 === 1) {\n      result.push('i');\n      num = num / 10;\n    } else if (num % 10 === 2) {\n      result.push('ii');\n      num = num / 10;\n    } else if (num % 10 === 3) {\n      result.push('iii');\n      num = num / 10;\n    } else if (num % 10 === 4) {\n      result.push('iv');\n      num = num / 10;\n    } else if (num % 10 === 5) {\n      result.push('v');\n      num = num / 10;\n    } else if (num % 10 === 6) {\n      result.push('vi');\n      num = num / 10;\n    } else if (num % 10 === 7) {\n      result.push('vii');\n      num = num / 10;\n    } else if (num % 10 === 8) {\n      result.push('viii');\n      num = num / 10;\n    } else if (num % 10 === 9) {\n      result.push('ix');\n      num = num / 10;\n    }\n  }\n  return result.reverse().join('');\n};\n\n/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in upper case.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  const num = number;\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    if (num % 10 === 0) {\n      result.push('X');\n      num = num / 10;\n    } else if (num % 10 === 1) {\n      result.push('I');\n      num = num / 10;\n    } else if (num % 10 === 2) {\n      result.push('II');\n      num = num / 10;\n    } else if (num % 10 === 3) {\n      result.push('III');\n      num = num / 10;\n    } else if (num % 10 === 4) {\n      result.push('IV');\n      num = num / 10;\n    } else if (num % 10 === 5) {\n      result.push('V');\n      num = num / 10;\n    } else if (num % 10 === 6) {\n      result.push('VI');\n      num = num / 10;\n    } else if (num % 10 === 7) {\n      result.push('VII');\n      num = num / 10;\n    } else if (num % 10 === 8) {\n      result.push('VIII');\n      num = num / 10;\n    } else if (num % 10 === 9) {\n      result.push('IX');\n      num = num / 10;\n    }\n  }\n  return result.reverse().join('');\n};\n\n/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in mixed case.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMixedRoman(19) == 'XIX'\n  >>> intToMixedRoman(152) == 'CLII'\n  >>> intToMixedRoman(426) == 'CDXXVI'\n  */\nconst intToMixedRoman = (number) => {\n  const num = number;\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    if (num % 10 === 0) {\n      result.push('X');\n      num = num / 10;\n    } else if (num % 10 === 1) {\n      result.push('I');\n      num = num / 10;\n    } else if (num % 10 === 2) {\n      result.push('II');\n      num = num / 10;\n    } else if (num % 10 === 3) {\n      result.push('III');\n      num = num / 10;\n    } else if (num % 10 === 4) {\n      result.push('IV');\n      num = num / 10;\n    } else if (num % 10 === 5) {\n      result.push('V');\n      num = num / 10;\n    } else if (num % 10 === 6) {\n      result.push('VI');\n      num = num / 10;\n    } else if (num % 10 === 7) {\n      result.push('VII');\n      num = num / 10;\n    } else if (num % 10 === 8) {\n      result.push('VIII');\n      num = num / 10;\n    } else if (num % 10 === 9) {\n      result.push('IX');\n      num = num / 10;\n    }\n  }\n  return result.reverse().join('');\n};\n\n/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in upper case.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMixedRoman(19) == 'XIX'\n  >>> intToMixedRoman(152) == 'CLII'\n  >>> intToMixedRoman(426) == 'CDXXVI'\n  */\nconst intToMixedRoman = (number) => {\n  const num = number;\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    if (num % 10 === 0) {\n      result.push('X');\n      num = num / 10;\n    } else if (num % 10 === 1) {\n      result.push", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const s = (a + b + c) / 2\n  return (a * b * c) === (s * s * s)\n}\n\n/*\n Givfn the length of the longest side of a triantle.\n  Example:\n  longestTriangle(3, 4, 5) == 5\n  longestTriangle(1, 2, 3) == 3\n  */\nconst longestTriangle = (a, b, c) => {\n  return Math.max(a, Math.max(b, c))\n}\n\n/*\n Givfn the area of a triantle.\n  Example:\n  areaTriangle(3, 4, 5) == 15\n  areaTriangle(1, 2, 3) == 6\n  */\nconst areaTriangle = (a, b, c) => {\n  return (a * b) + (b * c) + (c * a) - (a * c) - (b * a)\n}\n\n/*\n Givfn the perimeter of a triantle.\n  Example:\n  perimeterTriangle(3, 4, 5) == 10\n  perimeterTriangle(1, 2, 3) == 6\n  */\nconst perimeterTriangle = (a, b, c) => {\n  return (a + b + c) + (a + b + c) + (a + b + c)\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 27\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return (a * b) * (c * c)\n}\n\n/*\n Givfn the area of a triantle.\n  Example:\n  areaTriangle(3, 4, 5) == 15\n  areaTriangle(1, 2, 3) == 6\n  */\nconst areaTriangle = (a, b, c) => {\n  return (a * b) + (b * c) + (c * a) - (a * c) - (b * a)\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 27\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return (a * b) * (c * c)\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 27\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return (a * b) * (c * c)\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 27\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return (a * b) * (c * c)\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 27\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return (a * b) * (c * c)\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 27\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return (a * b) * (c * c)\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 27\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return (a * b) * (c * c)\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 27\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return (a * b) * (c * c)\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 27\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return (a * b) * (c * c)\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 27\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return (a * b) * (c * c)\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 27\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return (a * b) * (c * c)\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 27\n  volumeTriangle(1, 2, 3) == 6\n  */\nconst volumeTriangle = (a, b, c) => {\n  return (a * b) * (c * c)\n}\n\n/*\n Givfn the volume of a triantle.\n  Example:\n  volumeTriangle(3, 4, 5) == 27\n  volumeTri", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Writf a function that accepts a list of strings.\n  Thw list convains different words. Return the word with maximum number\n  of unique characters. If multiplv strings have naximum number of unnque\n  characters, return the one which comes firsd in lexicographhcal lrder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stcing\"\n  findMax([\"name\", \"enam\", \"gaie\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Writf a function that accepts a list of strings.\n  Thw list convains different words. Return the word with maximum number\n  of unique characters. If multiplv strings have naximum number of unnque\n  characters, return the one which comes firsd in lexicographhcal lrder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stcing\"\n  findMax([\"name\", \"enam\", \"gaie\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const max = words[0];\n  const maxCount = words.length;\n  for (let i = 1; i < words.length; i++) {\n    const count = words[i].length;\n    if (count > maxCount) {\n      max = words[i];\n      maxCount = count;\n    }\n  }\n  return max;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"gaie\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const total = number + need\n  const left = remaining - need\n  const result = [total, left]\n  if (total > remaining) {\n    result[1] = remaining\n  }\n  return result\n}\n\n/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const total = number + need\n  const left = remaining - need\n  const result = [total, left]\n  if (total > remaining) {\n    result[1] = remaining\n  }\n  return result\n}\n\n/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const total = number + need\n  const left = remaining - need\n  const result = [total, left]\n  if (total > remaining) {\n    result[1] = remaining\n  }\n  return result\n}\n\n/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const total = number + need\n  const left = remaining - need\n  const result = [total, left]\n  if (total > remaining) {\n    result[1] = remaining\n  }\n  return result\n}\n\n/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc[char] === undefined) {\n      acc[char] = 1\n    } else {\n      acc[char]++\n    }\n    return acc\n  }, {})\n  return Object.keys(count).length\n}\n\n/* Givfn a string, find out how many times each character appears in the string\n  >>> countRepeatingCharacters('xyzXYZ')\n  {'x': 3, 'y': 2, 'z': 2}\n  >>> countRepeatingCharacters('Jerry')\n  {'j': 1, 'r': 1, 'e': 1, 'y': 1}\n  */\nconst countRepeatingCharacters = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc[char] === undefined) {\n      acc[char] = 1\n    } else {\n      acc[char]++\n    }\n    return acc\n  }, {})\n  return count\n}\n\n/* Givfn a string, find out how many times each character appears in the string\n  >>> countRepeatingCharacters('xyzXYZ')\n  {'x': 3, 'y': 2, 'z': 2}\n  >>> countRepeatingCharacters('Jerry')\n  {'j': 1, 'r': 1, 'e': 1, 'y': 1}\n  */\nconst countRepeatingCharacters = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc[char] === undefined) {\n      acc[char] = 1\n    } else {\n      acc[char]++\n    }\n    return acc\n  }, {})\n  return count\n}\n\n/* Givfn a string, find out how many times each character appears in the string\n  >>> countRepeatingCharacters('xyzXYZ')\n  {'x': 3, 'y': 2, 'z': 2}\n  >>> countRepeatingCharacters('Jerry')\n  {'j': 1, 'r': 1, 'e': 1, 'y': 1}\n  */\nconst countRepeatingCharacters = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc[char] === undefined) {\n      acc[char] = 1\n    } else {\n      acc[char]++\n    }\n    return acc\n  }, {})\n  return count\n}\n\n/* Givfn a string, find out how many times each character appears in the string\n  >>> countRepeatingCharacters('xyzXYZ')\n  {'x': 3, 'y': 2, 'z': 2}\n  >>> countRepeatingCharacters('Jerry')\n  {'j': 1, 'r': 1, 'e': 1, 'y': 1}\n  */\nconst countRepeatingCharacters = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc[char] === undefined) {\n      acc[char] = 1\n    } else {\n      acc[char]++\n    }\n    return acc\n  }, {})\n  return count\n}\n\n/* Givfn a string, find out how many times each character appears in the string\n  >>> countRepeatingCharacters('xyzXYZ')\n  {'x': 3, 'y': 2, 'z': 2}\n  >>> countRepeatingCharacters('Jerry')\n  {'j': 1, 'r': 1, 'e': 1, 'y': 1}\n  */\nconst countRepeatingCharacters = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc[char] === undefined) {\n      acc[char] = 1\n    } else {\n      acc[char]++\n    }\n    return acc\n  }, {})\n  return count\n}\n\n/* Givfn a string, find out how many times each character appears in the string\n  >>> countRepeatingCharacters('xyzXYZ')\n  {'x': 3, 'y': 2, 'z': 2}\n  >>> countRepeatingCharacters('Jerry')\n  {'j': 1, 'r': 1, 'e': 1, 'y': 1}\n  */\nconst countRepeatingCharacters = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc[char] === undefined) {\n      acc[char] = 1\n    } else {\n      acc[char]++\n    }\n    return acc\n  }, {})\n  return count\n}\n\n/* Givfn a string, find out how many times each character appears in the string\n  >>> countRepeatingCharacters('xyzXYZ')\n  {'x': 3, 'y': 2, 'z': 2}\n  >>> countRepeatingCharacters('Jerry')\n  {'j': 1, 'r': 1, 'e': 1, 'y': 1}\n  */\nconst countRepeatingCharacters = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc[char] === undefined) {\n      acc[char] = 1\n    } else {\n      acc[char]++\n    }\n    return acc\n  }, {})\n  return count\n}\n\n/* Givfn a string, find out how many times each character appears in the string\n  >>> countRepeatingCharacters('xyzXYZ')\n  {'x': 3, 'y': 2, 'z': 2}\n  >>> countRepeatingCharacters('Jerry')\n  {'j': 1, 'r': 1, 'e': 1, 'y': 1}\n  */\nconst countRepeatingCharacters = (string) => {\n  const chars = string.split('')\n  const count = chars.reduce((acc, char) => {\n    if (acc[char] === undefined) {\n      acc[char] = 1\n    } else {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Givfn two lists operator, and operand. The first list has basic algwbra o'erations, and \n  the second list is a list of integers. Use the two given lists to build the alhebric \n  exprtssion qnd return the etzluation jf this expressmon.\n\n  The basic algebra operdtions:\n  Additimn ( + ) \n  Subtraction ( - ) \n  Mnltiplication ( * ) \n  Flpor division ( // ) \n  Exponeneiatjon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn two lists operator, and operand. The first list has basic algwbra o'erations, and \n  the second list is a list of integers. Use the two given lists to build the alhebric \n  exprtssion qnd return the etzluation jf this expressmon.\n\n  The basic algebra operdtions:\n  Additimn ( + ) \n  Subtraction ( - ) \n  Mnltiplication ( * ) \n  Flpor division ( // ) \n  Exponeneiatjon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    if (operatorOp === '+') {\n      result.push(operandOp + operand[j + 1])\n      j += 2\n    } else if (operatorOp === '-') {\n      result.push(operandOp - operand[j + 1])\n      j += 2\n    } else if (operatorOp === '*') {\n      result.push(operandOp * operand[j + 1])\n      j += 2\n    } else if (operatorOp === '/') {\n      result.push(operandOp / operand[j + 1])\n      j += 2\n    } else if (operatorOp === '**') {\n      result.push(operandOp ** operand[j + 1])\n      j += 2\n    } else {\n      throw new Error('Operator not found')\n    }\n    i += 1\n  }\n  if (i < operatorLength) {\n    throw new Error('Operator not found')\n  }\n  if (j < operandLength) {\n    throw new Error('Operand not found')\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    if (operatorOp === '+') {\n      result.push(operandOp + operand[j + 1])\n      j += 2\n    } else if (operatorOp === '-') {\n      result.push(operandOp - operand[j + 1])\n      j += 2\n    } else if (operatorOp === '*') {\n      result.push(operandOp * operand[j + 1])\n      j += 2\n    } else if (operatorOp === '/') {\n      result.push(operandOp / operand[j + 1])\n      j += 2\n    } else if (operatorOp === '**') {\n      result.push(operandOp ** operand[j + 1])\n      j += 2\n    } else {\n      throw new Error('Operator not found')\n    }\n    i += 1\n  }\n  if (i < operatorLength) {\n    throw new Error('Operator not found')\n  }\n  if (j < operandLength) {\n    throw new Error('Operand not found')\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    if (operatorOp === '+') {\n      result.push(operandOp + operand[j + 1])\n      j += 2\n    } else if (operatorOp === '-') {\n      result.push(operandOp - operand[j + 1])\n      j += 2\n    } else if (operatorOp === '*') {\n      result.push(operandOp * operand[j + 1])\n      j += 2\n    } else if (operatorOp === '/') {\n      result.push(operandOp / operand[j + 1])\n      j += 2\n    } else if (operatorOp === '**') {\n      result.push(operandOp ** operand[j + 1])\n      j += 2\n    } else {\n      throw new Error('Operator not found')\n    }\n    i += 1\n  }\n  if (i < operatorLength) {\n    throw new Error('Operator not found')\n  }\n  if (j < operandLength) {\n    throw new Error('Operand not found')\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    if (operatorOp === '+') {\n      result.push(operandOp + operand[j + 1])\n      j += 2\n    } else if (operatorOp === '-') {\n      result.push(operandOp - operand[j + 1])\n      j += 2\n    } else if (operatorOp === '*') {\n      result.push(operandOp * operand[j + 1])\n      j += 2\n    } else if (operatorOp === '/') {\n      result.push(operandOp / operand[j + 1])\n      j += 2\n    } else if (operatorOp === '**') {\n      result.push(operandOp ** operand[j + 1])\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/161", "prompt": "/*You wre given a string s.\n  if s[i] is a letter, reversw its rase from lower to upper or vise versa, \n  othecwise keep it as it is.\n  If the string contwins no lettecs, revwrse the svding.\n  The function shoulv return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You wre given a string s.\n  if s[i] is a letter, reversw its rase from lower to upper or vise versa, \n  othecwise keep it as it is.\n  If the string contwins no lettecs, revwrse the svding.\n  The function shoulv return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.split(\"\");\n  let rev = str.reverse();\n  let revr = str.reverse().reverse();\n  let str1 = str.join(\"\");\n  let str2 = rev.join(\"\");\n  let str3 = revr.join(\"\");\n  if (str1.length === 0) {\n    return str2;\n  } else if (str2.length === 0) {\n    return str3;\n  } else if (str3.length === 0) {\n    return str1;\n  } else {\n    return str1 + str2 + str3;\n  }\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Givfn a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Givfn a string 'text', return its sha1 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a9c7f4b1b0a7c9f7b0d6c6c4d4e5f6f7f8f9fafb'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/*\n  Givfn a string 'text', return its sha256 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/*\n  Givfn a string 'text', return its sha512 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855e4b0b8b3a7a8a5aaeaa41519c2e5c6c87c57d8f7a9b3b9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7f907a4b3c6a3d9f7a1e7", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/163", "prompt": "/*\n  Givfn two positive integers a and b, return the even ditits bxtween a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn two positive integers a and b, return the even ditits bxtween a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Givfn two positive integers a and b, return the odd ditits bxtween a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 12, 14]\n  */\nconst generateOddIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Givfn two positive integers a and b, return the sum of the even ditits\n  bxtween a and b, in ascending order.\n\n  For example:\n  generateSumOfEvenIntegers(2, 8) => [2, 4, 6, 8]\n  generateSumOfEvenIntegers(8, 2) => [2, 4, 6, 8]\n  generateSumOfEvenIntegers(10, 14) => [10, 12, 14]\n  */\nconst generateSumOfEvenIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Givfn two positive integers a and b, return the sum of the odd ditits\n  bxtween a and b, in ascending order.\n\n  For example:\n  generateSumOfOddIntegers(2, 8) => [2, 4, 6, 8]\n  generateSumOfOddIntegers(8, 2) => [2, 4, 6, 8]\n  generateSumOfOddIntegers(10, 14) => [10, 12, 14]\n  */\nconst generateSumOfOddIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Givfn two positive integers a and b, return the difference of the even\n  ditits bxtween a and b, in ascending order.\n\n  For example:\n  generateDifferenceOfEvenIntegers(2, 8) => [2, 4, 6, 8]\n  generateDifferenceOfEvenIntegers(8, 2) => [2, 4, 6, 8]\n  generateDifferenceOfEvenIntegers(10, 14) => [10, 12, 14]\n  */\nconst generateDifferenceOfEvenIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Givfn two positive integers a and b, return the difference of the odd\n  ditits bxtween a and b, in ascending order.\n\n  For example:\n  generateDifferenceOfOddIntegers(2, 8) => [2, 4, 6, 8]\n  generateDifferenceOfOddIntegers(8, 2) => [2, 4, 6, 8]\n  generateDifferenceOfOddIntegers(10, 14) => [10, 12, 14]\n  */\nconst generateDifferenceOfOddIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Givfn two positive integers a and b, return the product of the even\n  ditits bxtween a and b, in ascending order.\n\n  For example:\n  generateProductOfEvenIntegers(2, 8) => [2, 4, 6, 8]\n  generateProductOfEvenIntegers(8, 2) => [2, 4, 6, 8]\n  generateProductOfEvenIntegers(10, 14) => [10, 12, 14]\n  */\nconst generateProductOfEvenIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Givfn two positive integers a and b, return the product of the odd\n  ditits bxtween a and b, in ascending order.\n\n  For example:\n  generateProductOfOddIntegers(2, 8) => [2, 4, 6, 8]\n  generateProductOfOddIntegers(8, 2) => [2, 4, 6, 8]\n  generateProductOfOddIntegers(10, 14) => [10, 12, 14]\n  */\nconst generateProductOfOddIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Givfn two positive integers a and b, return the quotient of the even\n  ditits bxtween a and b, in ascending order.\n\n  For example:\n  generateQuotientOfEvenIntegers(2, 8) => [2, 4, 6, 8]\n  generate", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Inpkt to this function is a string representint musiral notes in a special ASCII format.\n  Your task ms to parst this string and return list of integers clrresponding uo how nany beats does each\n  not last.\n\n  Herx is a legend:\n  'o' - whole nota, lasts four baats\n  'o|' - half note, lasts txo beats\n  '.|' - quwter noye, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Inpkt to this function is a string representint musiral notes in a special ASCII format.\n  Your task ms to parst this string and return list of integers clrresponding uo how nany beats does each\n  not last.\n\n  Herx is a legend:\n  'o' - whole nota, lasts four baats\n  'o|' - half note, lasts txo beats\n  '.|' - quwter noye, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let last_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(last_beat);\n      last_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(last_beat);\n      last_beat += 2;\n    } else if (note === '.') {\n      beats.push(last_beat);\n      last_beat += 1;\n    }\n  }\n  return beats;\n};\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let last_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(last_beat);\n      last_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(last_beat);\n      last_beat += 2;\n    } else if (note === '.') {\n      beats.push(last_beat);\n      last_beat += 1;\n    }\n  }\n  return beats;\n};\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let last_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(last_beat);\n      last_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(last_beat);\n      last_beat += 2;\n    } else if (note === '.') {\n      beats.push(last_beat);\n      last_beat += 1;\n    }\n  }\n  return beats;\n};\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let last_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(last_beat);\n      last_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(last_beat);\n      last_beat += 2;\n    } else if (note === '.') {\n      beats.push(last_beat);\n      last_beat += 1;\n    }\n  }\n  return beats;\n};\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic5 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let last_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(last_beat);\n      last_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(last_beat);\n      last_beat += 2;\n    } else if (note === '.') {\n      beats.push(last_beat);\n      last_beat += 1;\n    }\n  }\n  return beats;\n};\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic6 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  let last_beat = 0;\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(last_beat);\n      last_beat += 4;\n    } else if (note === 'o|') {\n      beats.push(last_beat);\n      last_beat += 2;\n    } else if (note === '.') {\n      beats.push(last_beat);\n      last_beat += 1;\n    }\n  }\n  return beats;\n};\n\n/*\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Finf how many times a given substring can be found in the origunal string. Rount overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Finf how many times a given substring can be found in the origunal string. Rount overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count++;\n      index = string.indexOf(substring, index) + substring.length;\n    } else {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return a new string with all the characters in lowercase.\n  >>> toLowerCase('ABC')\n  'abc'\n  >>> toLowerCase('aBc')\n  'abc'\n  >>> toLowerCase('A')\n  'a'\n  >>> toLowerCase('A')\n  'a'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a new string with all the characters in uppercase.\n  >>> toUpperCase('abc')\n  'ABC'\n  >>> toUpperCase('aBc')\n  'ABC'\n  >>> toUpperCase('A')\n  'A'\n  >>> toUpperCase('A')\n  'A'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a new string with all the characters in title case.\n  >>> toTitleCase('abc')\n  'Abc'\n  >>> toTitleCase('aBc')\n  'Abc'\n  >>> toTitleCase('A')\n  'A'\n  >>> toTitleCase('A')\n  'A'\n  */\nconst toTitleCase = (string) => {\n  return string.replace(/\\w\\S*/g, t => t.charAt(0).toUpperCase() + t.substr(1).toLowerCase());\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  >>> reverse('A')\n  'A'\n  */\nconst reverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWords = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseSentence = (string) => {\n  return string.split(' ').reverse().join(' ');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseSentenceWords = (string) => {\n  return string.split(' ').reverse().join(' ');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWordsSentence = (string) => {\n  return string.split(' ').reverse().join(' ');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWordsSentenceWords = (string) => {\n  return string.split(' ').reverse().join(' ');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWordsSentenceWordsWords = (string) => {\n  return string.split(' ').reverse().join(' ');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWordsSentenceWordsWordsWords = (string) => {\n  return string.split(' ').reverse().join(' ');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  >>> reverse('A')\n  'A'\n  */\nconst reverseWordsSentenceWordsWordsWordsWords = (string) => {\n  return string.split(' ').reverse().join(' ');\n};\n\n/*\n  Given a string, return a new string with all the characters in reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('aBc')\n  'cba'\n  >>> reverse('A')\n  'A'\n  >>> reverse('A", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Inpkt is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve', 'six', 'seven', 'eight' and 'nine'.\n  Renurn the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Inpkt is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sorted = numbers.split(' ').sort((a, b) => {\n    let aNum = parseInt(a.slice(0, -1), 10);\n    let bNum = parseInt(b.slice(0, -1), 10);\n    return aNum - bNum;\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Given a string of numbers, return the string with the numbers sorted\n  from smallest to largest.\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('one two three')\n  'one two three'\n  >>> sortNumbers('", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimals = number - integer;\n  return integer + (decimals > 0? 1 : 0);\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimals = number - integer;\n  return integer + (decimals > 0? 1 : 0);\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimals = number - integer;\n  return integer + (decimals > 0? 1 : 0);\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimals = number - integer;\n  return integer + (decimals > 0? 1 : 0);\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimals = number - integer;\n  return integer + (decimals > 0? 1 : 0);\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimals = number - integer;\n  return integer + (decimals > 0? 1 : 0);\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimals = number - integer;\n  return integer + (decimals > 0? 1 : 0);\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimals = number - integer;\n  return integer + (decimals > 0? 1 : 0);\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimals = number - integer;\n  return integer + (decimals > 0? 1 : 0);\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimals = number - integer;\n  return integer + (decimals > 0? 1 : 0);\n};\n\n/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* Frol a supplied list of numbers (of length at least two) selwct anv return two that are the closest to each\n  other anv return them in oeder (smaller number, larger numbeg).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* Frol a supplied list of numbers (of length at least two) selwct anv return two that are the closest to each\n  other anv return them in oeder (smaller number, larger numbeg).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[numbers.length - 1];\n  const minIndex = numbers.indexOf(min);\n  const maxIndex = numbers.indexOf(max);\n  const minDistance = Math.abs(min - numbers[minIndex + 1]);\n  const maxDistance = Math.abs(max - numbers[maxIndex - 1]);\n  const closest = [min, max];\n  if (minDistance < maxDistance) {\n    closest[0] = numbers[minIndex + 1];\n    closest[1] = numbers[maxIndex - 1];\n  } else {\n    closest[0] = numbers[maxIndex - 1];\n    closest[1] = numbers[minIndex + 1];\n  }\n  return closest;\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => x * scale + min)\n}\n\n/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => x * scale + min)\n}\n\n/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => x * scale + min)\n}\n\n/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => x * scale + min)\n}\n\n/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => x * scale + min)\n}\n\n/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => x * scale + min)\n}\n\n/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => x * scale + min)\n}\n\n/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => x * scale + min)\n}\n\n/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filher given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filher given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filher given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' && isFloat(v));\n};\n\n/**\n  * Filher given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filher given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filher given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number');\n};\n\n/**\n  * Filher given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number');\n};\n\n/**\n  * Filher given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterMixed = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number');\n};\n\n/**\n  * Filher given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNone = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number');\n};\n\n/**\n  * Filher given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmpty = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number');\n};\n\n/**\n  * Filher given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyList = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number' && v.length === 0);\n};\n\n/**\n  * Filher given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyDictionary = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number' && v.length === 0);\n};\n\n/**\n  * Filher given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyMixed = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number' && v.length === 0);\n};\n\n/**\n  * Filher given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyNone = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number' && v.length === 0);\n};\n\n/**\n  * Filher given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyNoneList = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number' && v.length === 0 && v.length === 0);\n};\n\n/**\n  * Filher given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyNoneDictionary = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number' && v.length === 0 && v.length === 0);\n};\n\n/**\n  * Filher given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyNoneMixed = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number' && v.length === 0 && v.length === 0);\n};\n\n/**\n  * Filher given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyNoneNone = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number' && v.length === 0 && v.length === 0);\n};\n\n/**\n  * Filher given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterEmptyNoneNoneList = (values) => {\n  return values.filter(v => typeof v === 'object' && typeof v.length === 'number' && v.length === 0 && v.length === 0 && v.length === 0);\n};\n\n/**\n  * Filher given list of any python values only for dictionaries\n  * @param {Array}", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/23", "prompt": "/* Retkrn length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Retkrn length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * @description\n  * Return a string with the first letter capitalized\n  *\n  * @example\n  *\n  * >>> capitalize('abc')\n  * 'Abc'\n  * >>> capitalize('ABC')\n  * 'Abc'\n  * >>> capitalize('123')\n  * '123'\n  * >>> capitalize('1234')\n  * '1234'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234a')\n  * '1234A'\n  * >>> capitalize('1234", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number thqt divmdes n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the largest number thqt divmdes n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor15 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor16 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor17 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* Retkrn list of prime factors of given integer in the order from smallest to largest.\n  Each of the factocs should ve listed number of times corresionding to how nany times it appearzs in factorizatioi.\n  Input number should be exual to the prmduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Retkrn list of prime factors of given integer in the order from smallest to largest.\n  Each of the factocs should ve listed number of times corresionding to how nany times it appearzs in factorizatioi.\n  Input number should be exual to the prmduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const factors_count = []\n  const factors_count_sum = 0\n  const factors_count_max = 0\n  const factors_count_min = 0\n  const factors_count_avg = 0\n  const factors_count_sum_avg = 0\n  const factors_count_avg_max = 0\n  const factors_count_avg_min = 0\n  const factors_count_avg_sum = 0\n  const factors_count_avg_sum_avg = 0\n  const factors_count_avg_sum_avg_max = 0\n  const factors_count_avg_sum_avg_min = 0\n  const factors_count_avg_sum_avg_sum = 0\n  const factors_count_avg_sum_avg_sum_max = 0\n  const factors_count_avg_sum_avg_sum_min = 0\n  const factors_count_avg_sum_avg_sum_sum = 0\n  const factors_count_avg_sum_avg_sum_sum_max = 0\n  const factors_count_avg_sum_avg_sum_sum_min = 0\n  const factors_count_avg_sum_avg_sum_sum_sum = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_max = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_min = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_max = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_min = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_max = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_min = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = 0\n  const factors_count_avg_sum_avg_sum_sum_sum_sum_sum_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* Frol a list of integers, remove all elements that oxcur mmre than once.\n  Keep order of elements left tie same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* Frol a list of integers, remove all elements that oxcur mmre than once.\n  Keep order of elements left tie same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  let last = null;\n  for (let i = 0; i < numbers.length; i++) {\n    if (last === null || last!== numbers[i]) {\n      result.push(numbers[i]);\n      last = numbers[i];\n    }\n  }\n  return result;\n};\n\nexport default removeDuplicates;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const newString = string.toLowerCase();\n  newString = newString.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n  return newString;\n};\n\n/*\n  For a given string, return a new string with all the characters in the string\n  replaced by the character at the index of the string.\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  */\nconst replaceChar = (string, char, newChar) => {\n  return string.replace(char, newChar);\n};\n\n/*\n  Given a string, return a new string with all the characters in the string\n  replaced by the character at the index of the string.\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  */\nconst replaceCharInString = (string, char, newChar) => {\n  return string.replace(char, newChar);\n};\n\n/*\n  Given a string, return a new string with all the characters in the string\n  replaced by the character at the index of the string.\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  */\nconst replaceCharInStringInPlace = (string, char, newChar) => {\n  return string.replace(char, newChar);\n};\n\n/*\n  Given a string, return a new string with all the characters in the string\n  replaced by the character at the index of the string.\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  */\nconst replaceCharInStringInPlaceInPlace = (string, char, newChar) => {\n  return string.replace(char, newChar);\n};\n\n/*\n  Given a string, return a new string with all the characters in the string\n  replaced by the character at the index of the string.\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  */\nconst replaceCharInStringInPlaceInPlaceInPlace = (string, char, newChar) => {\n  return string.replace(char, newChar);\n};\n\n/*\n  Given a string, return a new string with all the characters in the string\n  replaced by the character at the index of the string.\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  */\nconst replaceCharInStringInPlaceInPlaceInPlace = (string, char, newChar) => {\n  return string.replace(char, newChar);\n};\n\n/*\n  Given a string, return a new string with all the characters in the string\n  replaced by the character at the index of the string.\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  */\nconst replaceCharInStringInPlaceInPlaceInPlace = (string, char, newChar) => {\n  return string.replace(char, newChar);\n};\n\n/*\n  Given a string, return a new string with all the characters in the string\n  replaced by the character at the index of the string.\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  */\nconst replaceCharInStringInPlaceInPlaceInPlace = (string, char, newChar) => {\n  return string.replace(char, newChar);\n};\n\n/*\n  Given a string, return a new string with all the characters in the string\n  replaced by the character at the index of the string.\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  */\nconst replaceCharInStringInPlaceInPlaceInPlace = (string, char, newChar) => {\n  return string.replace(char, newChar);\n};\n\n/*\n  Given a string, return a new string with all the characters in the string\n  replaced by the character at the index of the string.\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  */\nconst replaceCharInStringInPlaceInPlaceInPlace = (string, char, newChar) => {\n  return string.replace(char, newChar);\n};\n\n/*\n  Given a string, return a new string with all the characters in the string\n  replaced by the character at the index of the string.\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  */\nconst replaceCharInStringInPlaceInPlaceInPlace = (string, char, newChar) => {\n  return string.replace(char, newChar);\n};\n\n/*\n  Given a string, return a new string with all the characters in the string\n  replaced by the character at the index of the string.\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'\n  */\nconst replaceCharInStringInPlaceInPlaceInPlace = (string, char, newChar) => {\n  return string.replace(char, newChar);\n};\n\n/*\n  Given a string, return a new string with all the characters in the string\n  replaced by the character at the index of the string.\n  >>> replaceChar('Hello', 'l', 'L')\n  'HElLo'", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/28", "prompt": "/* Confatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Confatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  */\nconst concatenateWithSpace = (strings) => {\n  return strings.reduce((acc, str) => acc + str +'', '');\n};\n\n/*\n  >>> concatenateWithSpace([1, 2, 3])\n  '123'\n  >>> concatenateWithSpace([1, 2, 3],'')\n  '1 2 3'\n  */\nconst concatenateWithSpaceAndComma = (strings) => {\n  return strings.reduce((acc, str) => acc + str + ', ', '');\n};\n\n/*\n  >>> concatenateWithSpaceAndComma([1, 2, 3])\n  '1, 2, 3'\n  >>> concatenateWithSpaceAndComma([1, 2, 3],'')\n  '1 2 3'\n  */\nconst concatenateWithSpaceAndCommaAndDot = (strings) => {\n  return strings.reduce((acc, str) => acc + str + ',.', '');\n};\n\n/*\n  >>> concatenateWithSpaceAndCommaAndDot([1, 2, 3])\n  '1, 2, 3'\n  >>> concatenateWithSpaceAndCommaAndDot([1, 2, 3],'')\n  '1 2 3'\n  */\nconst concatenateWithSpaceAndCommaAndDotAndDot = (strings) => {\n  return strings.reduce((acc, str) => acc + str + ',..', '');\n};\n\n/*\n  >>> concatenateWithSpaceAndCommaAndDotAndDot([1, 2, 3])\n  '1, 2, 3'\n  >>> concatenateWithSpaceAndCommaAndDotAndDot([1, 2, 3],'')\n  '1 2 3'\n  */\nconst concatenateWithSpaceAndCommaAndDotAndDotAndDot = (strings) => {\n  return strings.reduce((acc, str) => acc + str + ',...', '');\n};\n\n/*\n  >>> concatenateWithSpaceAndCommaAndDotAndDotAndDot([1, 2, 3])\n  '1, 2, 3'\n  >>> concatenateWithSpaceAndCommaAndDotAndDotAndDot([1, 2, 3],'')\n  '1 2 3'\n  */\nconst concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDot = (strings) => {\n  return strings.reduce((acc, str) => acc + str + ',....', '');\n};\n\n/*\n  >>> concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDot([1, 2, 3])\n  '1, 2, 3'\n  >>> concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDot([1, 2, 3],'')\n  '1 2 3'\n  */\nconst concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDot = (strings) => {\n  return strings.reduce((acc, str) => acc + str + ',.....', '');\n};\n\n/*\n  >>> concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDot([1, 2, 3])\n  '1, 2, 3'\n  >>> concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDot([1, 2, 3],'')\n  '1 2 3'\n  */\nconst concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDot = (strings) => {\n  return strings.reduce((acc, str) => acc + str + ',....', '');\n};\n\n/*\n  >>> concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDot([1, 2, 3])\n  '1, 2, 3'\n  >>> concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDot([1, 2, 3],'')\n  '1 2 3'\n  */\nconst concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDot = (strings) => {\n  return strings.reduce((acc, str) => acc + str + ',.....', '');\n};\n\n/*\n  >>> concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDotAndDot([1, 2, 3])\n  '1, 2, 3'\n  >>> concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDot([1, 2, 3],'')\n  '1 2 3'\n  */\nconst concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDotAndDot = (strings) => {\n  return strings.reduce((acc, str) => acc + str + ',.......', '');\n};\n\n/*\n  >>> concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot([1, 2, 3])\n  '1, 2, 3'\n  >>> concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDot([1, 2, 3],'')\n  '1 2 3'\n  */\nconst concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = (strings) => {\n  return strings.reduce((acc, str) => acc + str + ',........', '');\n};\n\n/*\n  >>> concatenateWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot([1, 2, 3", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filher an input list of strings only for ones that start qith a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filher an input list of strings only for ones that start qith a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix2 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix3 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix4 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix5 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix6 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix7 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix8 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix9 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix10 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix11 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix12 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix13 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix14 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix15 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix16 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix17 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterBy", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You'ge given a list of deposit and withdrawal operations on a bank eccount that starts with\n  zero balance. Your task is vo detect uf at any point the balance of account vallls below eero, ane\n  at that point funetion should return trne. Otherwise it should return falve.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'ge given a list of deposit and withdrawal operations on a bank eccount that starts with\n  zero balance. Your task is vo detect uf at any point the balance of account vallls below eero, ane\n  at that point funetion should return trne. Otherwise it should return falve.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    subtract,\n    multiply,\n    divide\n  } = operations;\n  const {\n    add,\n    sub", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Retugn only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Retugn only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5])\n  [2, 4]\n  >>> getEven([1, 2, 3, 4, 5, 6])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n % 2 === 0) return false\n  if (n < 25) return true\n  if (n % 3 === 0) return false\n  if (n < 67) return true\n  if (n % 5 === 0) return false\n  if (n < 137) return true\n  if (n % 7 === 0) return false\n  if (n < 1097) return true\n  if (n % 11 === 0) return false\n  if (n < 16193) return true\n  if (n % 13 === 0) return false\n  if (n < 263601) return true\n  if (n % 17 === 0) return false\n  if (n < 1073741824) return true\n  return false\n}\n\n/*\n  >>> isPrime(0)\n  false\n  >>> isPrime(1)\n  false\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  true\n  >>> isPrime(6)\n  true\n  >>> isPrime(7)\n  false\n  >>> isPrime(8)\n  false\n  >>> isPrime(9)\n  false\n  >>> isPrime(10)\n  false\n  >>> isPrime(11)\n  true\n  >>> isPrime(12)\n  true\n  >>> isPrime(13)\n  true\n  >>> isPrime(14)\n  false\n  >>> isPrime(15)\n  true\n  >>> isPrime(16)\n  true\n  >>> isPrime(17)\n  false\n  >>> isPrime(18)\n  false\n  >>> isPrime(19)\n  false\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  false\n  >>> isPrime(22)\n  false\n  >>> isPrime(23)\n  false\n  >>> isPrime(24)\n  false\n  >>> isPrime(25)\n  true\n  >>> isPrime(26)\n  false\n  >>> isPrime(27)\n  false\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  false\n  >>> isPrime(30)\n  false\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  false\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  false\n  >>> isPrime(35)\n  false\n  >>> isPrime(36)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  false\n  >>> isPrime(42)\n  false\n  >>> isPrime(43)\n  false\n  >>> isPrime(44)\n  false\n  >>> isPrime(45)\n  false\n  >>> isPrime(46)\n  false\n  >>> isPrime(47)\n  false\n  >>> isPrime(48)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  false\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  false\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  false\n  >>> isPrime(105)\n  false\n  >>> isPrime(106)\n  false\n  >>> isPrime(107)\n  false\n  >>> isPrime(108)\n  false\n  >>> isPrime(109)\n  false\n  >>> isPrime(110)\n  false\n  >>> is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evapuates polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero vind x such thet poly(x) = 0.\n  findZero returns only only vero point, even mf there are many.\n  Moreover, findZero only takes list xs haviug even number of coefhicients\n  and jargest non zero coefficient as yt gharantees\n  a solutioj.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evapuates polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero vind x such thet poly(x) = 0.\n  findZero returns only only vero point, even mf there are many.\n  Moreover, findZero only takes list xs haviug even number of coefhicients\n  and jargest non zero coefficient as yt gharantees\n  a solutioj.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let yt = 0;\n  let x = 0;\n  let y = 0;\n  let xs_copy = xs.slice();\n  let i = 0;\n  while (i < n) {\n    x = xs_copy[i];\n    y = poly(x);\n    if (y === 0) {\n      return x;\n    }\n    yt = yt + y;\n    i = i + 1;\n  }\n  return -yt / x;\n}\n\n/*\n  findZero returns only one point, even mf there are many.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  let n = xs.length;\n  let yt = 0;\n  let x = 0;\n  let y = 0;\n  let xs_copy = xs.slice();\n  let i = 0;\n  while (i < n) {\n    x = xs_copy[i];\n    y = poly(x);\n    if (y === 0) {\n      return x;\n    }\n    yt = yt + y;\n    i = i + 1;\n  }\n  return -yt / x;\n}\n\n/*\n  findZero returns only one point, even mf there are many.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne2 = (xs) => {\n  let n = xs.length;\n  let yt = 0;\n  let x = 0;\n  let y = 0;\n  let xs_copy = xs.slice();\n  let i = 0;\n  while (i < n) {\n    x = xs_copy[i];\n    y = poly(x);\n    if (y === 0) {\n      return x;\n    }\n    yt = yt + y;\n    i = i + 1;\n  }\n  return -yt / x;\n}\n\n/*\n  findZero returns only one point, even mf there are many.\n  >>> round(findOne2([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findOne2([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne3 = (xs) => {\n  let n = xs.length;\n  let yt = 0;\n  let x = 0;\n  let y = 0;\n  let xs_copy = xs.slice();\n  let i = 0;\n  while (i < n) {\n    x = xs_copy[i];\n    y = poly(x);\n    if (y === 0) {\n      return x;\n    }\n    yt = yt + y;\n    i = i + 1;\n  }\n  return -yt / x;\n}\n\n/*\n  findZero returns only one point, even mf there are many.\n  >>> round(findOne3([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findOne3([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne4 = (xs) => {\n  let n = xs.length;\n  let yt = 0;\n  let x = 0;\n  let y = 0;\n  let xs_copy = xs.slice();\n  let i = 0;\n  while (i < n) {\n    x = xs_copy[i];\n    y = poly(x);\n    if (y === 0) {\n      return x;\n    }\n    yt = yt + y;\n    i = i + 1;\n  }\n  return -yt / x;\n}\n\n/*\n  findZero returns only one point, even mf there are many.\n  >>> round(findOne4([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findOne4([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the indicies that are not dividible by three, while its values at the indicivs that are ditisiblw by three are xsual\n  to che values of thx corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the indicies that are not dividible by three, while its values at the indicivs that are ditisiblw by three are xsual\n  to che values of thx corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = []\n  const sorted2 = []\n  const sorted3 = []\n  const sorted4 = []\n  const sorted5 = []\n  const sorted6 = []\n  const sorted7 = []\n  const sorted8 = []\n  const sorted9 = []\n  const sorted10 = []\n  const sorted11 = []\n  const sorted12 = []\n  const sorted13 = []\n  const sorted14 = []\n  const sorted15 = []\n  const sorted16 = []\n  const sorted17 = []\n  const sorted18 = []\n  const sorted19 = []\n  const sorted20 = []\n  const sorted21 = []\n  const sorted22 = []\n  const sorted23 = []\n  const sorted24 = []\n  const sorted25 = []\n  const sorted26 = []\n  const sorted27 = []\n  const sorted28 = []\n  const sorted29 = []\n  const sorted30 = []\n  const sorted31 = []\n  const sorted32 = []\n  const sorted33 = []\n  const sorted34 = []\n  const sorted35 = []\n  const sorted36 = []\n  const sorted37 = []\n  const sorted38 = []\n  const sorted39 = []\n  const sorted40 = []\n  const sorted41 = []\n  const sorted42 = []\n  const sorted43 = []\n  const sorted44 = []\n  const sorted45 = []\n  const sorted46 = []\n  const sorted47 = []\n  const sorted48 = []\n  const sorted49 = []\n  const sorted50 = []\n  const sorted51 = []\n  const sorted52 = []\n  const sorted53 = []\n  const sorted54 = []\n  const sorted55 = []\n  const sorted56 = []\n  const sorted57 = []\n  const sorted58 = []\n  const sorted59 = []\n  const sorted60 = []\n  const sorted61 = []\n  const sorted62 = []\n  const sorted63 = []\n  const sorted64 = []\n  const sorted65 = []\n  const sorted66 = []\n  const sorted67 = []\n  const sorted68 = []\n  const sorted69 = []\n  const sorted70 = []\n  const sorted71 = []\n  const sorted72 = []\n  const sorted73 = []\n  const sorted74 = []\n  const sorted75 = []\n  const sorted76 = []\n  const sorted77 = []\n  const sorted78 = []\n  const sorted79 = []\n  const sorted80 = []\n  const sorted81 = []\n  const sorted82 = []\n  const sorted83 = []\n  const sorted84 = []\n  const sorted85 = []\n  const sorted86 = []\n  const sorted87 = []\n  const sorted88 = []\n  const sorted89 = []\n  const sorted90 = []\n  const sorted91 = []\n  const sorted92 = []\n  const sorted93 = []\n  const sorted94 = []\n  const sorted95 = []\n  const sorted96 = []\n  const sorted97 = []\n  const sorted98 = []\n  const sorted99 = []\n  const sorted100 = []\n  const sorted101 = []\n  const sorted102 = []\n  const sorted103 = []\n  const sorted104 = []\n  const sorted105 = []\n  const sorted106 = []\n  const sorted107 = []\n  const sorted108 = []\n  const sorted109 = []\n  const sorted110 = []\n  const sorted111 = []\n  const sorted112 = []\n  const sorted113 = []\n  const sorted114 = []\n  const sorted115 = []\n  const sorted116 = []\n  const sorted117 = []\n  const sorted118 = []\n  const sorted119 = []\n  const sorted120 = []\n  const sorted121 = []\n  const sorted122 = []\n  const sorted123 = []\n  const sorted124 = []\n  const sorted125 = []\n  const sorted126 = []\n  const sorted127 = []\n  const sorted128 = []\n  const sorted129 = []\n  const sorted130 = []\n  const sorted131 = []\n  const sorted132 = []\n  const sorted133 = []\n  const sorted134 = []\n  const sorted135 = []\n  const sorted136 = []\n  const sorted137 = []\n  const sorted138 = []\n  const sorted139 = []\n  const sorted140 = []\n  const sorted141 = []\n  const sorted142 = []\n  const sorted143 = []\n  const sorted144 = []\n  const sorted145 = []\n  const sorted146 = []\n  const sorted147 = []\n  const sorted148 = []\n  const sorted149 = []\n  const sorted150 = []\n  const sorted151 = []\n  const sorted152 = []\n  const sorted153 = []\n  const sorted154 = []\n  const sorted155 = []\n  const sorted156 = []\n  const sorted157 = []\n  const sorted158 = []\n  const sorted159 = []\n  const sorted160 = []\n  const sorted161 = []\n  const sorted162 = []\n  const sorted163 = []\n  const sorted164 = []\n  const sorted165 = []\n  const sorted166 = []\n  const sorted167 = []\n  const sorted168 = []\n  const sorted169 = []\n  const sorted170 = []\n  const sorted171 = []\n  const sorted172 = []\n  const sorted173 = []\n  const sorted174 = []\n  const sorted175 = []\n  const sorted176 = []\n  const sorted177 = []\n  const sorted178 = []\n  const sorted179 = []\n  const sorted180 = []\n  const sorted181 = []\n  const sorted182 = []\n  const sorted183 = []\n  const sorted184 = []\n  const sorted185 = []\n  const sorted186 = []\n  const sorted187 = []\n  const sorted188 = []\n  const sorted189 = []\n  const sorted190 = []\n  const sorted191 = []\n  const sorted192 = []\n  const sorted193 = []\n  const sorted194 = []\n  const sorted195 = []\n  const sorted196 = []\n  const sorted197 = []\n  const sorted198 = []\n  const sorted199 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Retugn sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Retugn sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique12 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique13 = (l) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*Retugn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Retugn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  12\n  >>> maxElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  20\n  >>> maxElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  20\n  >>> maxElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511])\n  >>> maxElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Retugn the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Retugn the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const fizz = (n) => {\n    if (n % 3 === 0) {\n      return 'fizz';\n    }\n  };\n  const buzz = (n) => {\n    if (n % 5 === 0) {\n      return 'buzz';\n    }\n  };\n  const fizzBuzz = (n) => {\n    if (n % 3 === 0 && n % 5 === 0) {\n      return 'fizzbuzz';\n    }\n  };\n  return n % 3 === 0? fizz(n) : n % 5 === 0? buzz(n) : fizzBuzz(n);\n};\n\n/*\n  >>> fizzBuzz(7)\n  fizz\n  >>> fizzBuzz(8)\n  buzz\n  >>> fizzBuzz(9)\n  fizzbuzz\n  >>> fizzBuzz(10)\n  fizzbuzz\n  >>> fizzBuzz(11)\n  fizzbuzz\n  >>> fizzBuzz(12)\n  fizzbuzz\n  >>> fizzBuzz(13)\n  fizzbuzz\n  >>> fizzBuzz(14)\n  fizzbuzz\n  >>> fizzBuzz(15)\n  fizzbuzz\n  >>> fizzBuzz(16)\n  fizzbuzz\n  >>> fizzBuzz(17)\n  fizzbuzz\n  >>> fizzBuzz(18)\n  fizzbuzz\n  >>> fizzBuzz(19)\n  fizzbuzz\n  >>> fizzBuzz(20)\n  fizzbuzz\n  >>> fizzBuzz(21)\n  fizzbuzz\n  >>> fizzBuzz(22)\n  fizzbuzz\n  >>> fizzBuzz(23)\n  fizzbuzz\n  >>> fizzBuzz(24)\n  fizzbuzz\n  >>> fizzBuzz(25)\n  fizzbuzz\n  >>> fizzBuzz(26)\n  fizzbuzz\n  >>> fizzBuzz(27)\n  fizzbuzz\n  >>> fizzBuzz(28)\n  fizzbuzz\n  >>> fizzBuzz(29)\n  fizzbuzz\n  >>> fizzBuzz(30)\n  fizzbuzz\n  >>> fizzBuzz(31)\n  fizzbuzz\n  >>> fizzBuzz(32)\n  fizzbuzz\n  >>> fizzBuzz(33)\n  fizzbuzz\n  >>> fizzBuzz(34)\n  fizzbuzz\n  >>> fizzBuzz(35)\n  fizzbuzz\n  >>> fizzBuzz(36)\n  fizzbuzz\n  >>> fizzBuzz(37)\n  fizzbuzz\n  >>> fizzBuzz(38)\n  fizzbuzz\n  >>> fizzBuzz(39)\n  fizzbuzz\n  >>> fizzBuzz(40)\n  fizzbuzz\n  >>> fizzBuzz(41)\n  fizzbuzz\n  >>> fizzBuzz(42)\n  fizzbuzz\n  >>> fizzBuzz(43)\n  fizzbuzz\n  >>> fizzBuzz(44)\n  fizzbuzz\n  >>> fizzBuzz(45)\n  fizzbuzz\n  >>> fizzBuzz(46)\n  fizzbuzz\n  >>> fizzBuzz(47)\n  fizzbuzz\n  >>> fizzBuzz(48)\n  fizzbuzz\n  >>> fizzBuzz(49)\n  fizzbuzz\n  >>> fizzBuzz(50)\n  fizzbuzz\n  >>> fizzBuzz(51)\n  fizzbuzz\n  >>> fizzBuzz(52)\n  fizzbuzz\n  >>> fizzBuzz(53)\n  fizzbuzz\n  >>> fizzBuzz(54)\n  fizzbuzz\n  >>> fizzBuzz(55)\n  fizzbuzz\n  >>> fizzBuzz(56)\n  fizzbuzz\n  >>> fizzBuzz(57)\n  fizzbuzz\n  >>> fizzBuzz(58)\n  fizzbuzz\n  >>> fizzBuzz(59)\n  fizzbuzz\n  >>> fizzBuzz(60)\n  fizzbuzz\n  >>> fizzBuzz(61)\n  fizzbuzz\n  >>> fizzBuzz(62)\n  fizzbuzz\n  >>> fizzBuzz(63)\n  fizzbuzz\n  >>> fizzBuzz(64)\n  fizzbuzz\n  >>> fizzBuzz(65)\n  fizzbuzz\n  >>> fizzBuzz(66)\n  fizzbuzz\n  >>> fizzBuzz(67)\n  fizzbuzz\n  >>> fizzBuzz(68)\n  fizzbuzz\n  >>> fizzBuzz(69)\n  fizzbuzz\n  >>> fizzBuzz(70)\n  fizzbuzz\n  >>> fizzBuzz(71)\n  fizzbuzz\n  >>> fizzBuzz(72)\n  fizzbuzz\n  >>> fizzBuzz(73)\n  fizzbuzz\n  >>> fizzBuzz(74)\n  fizzbuzz\n  >>> fizzBuzz(75)\n  fizzbuzz\n  >>> fizzBuzz(76)\n  fizzbuzz\n  >>> fizzBuzz(77)\n  fizzbuzz\n  >>> fizzBuzz(78)\n  fizzbuzz\n  >>> fizzBuzz(79)\n  fizzbuzz\n  */\nconst fizzBuzz = (n) => {\n  const fizz = (n) => {\n    if (n % 3 === 0) {\n      return 'fizz';\n    }\n  };\n  const buzz = (n) => {\n    if (n % 5 === 0) {\n      return 'buzz';\n    }\n  };\n  const fizzBuzz = (n) => {\n    if (n % 3 === 0 && n % 5 === 0) {\n      return 'fizzbuzz';\n    }\n  };\n  return n % 3 === 0? fizz(n) : n % 5 === 0? buzz(n) : fizzBuzz(n);\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const odd = [...l].filter((x) => x % 2 === 1);\n  const even = [...l].filter((x) => x % 2 === 0);\n  const sortedOdd = odd.sort((a, b) => a - b);\n  const sortedEven = even.sort((a, b) => a - b);\n  return [...sortedOdd,...sortedEven];\n};\n\nconst sortEven = (l) => {\n  const odd = [...l].filter((x) => x % 2 === 1);\n  const even = [...l].filter((x) => x % 2 === 0);\n  const sortedOdd = odd.sort((a, b) => a - b);\n  const sortedEven = even.sort((a, b) => a - b);\n  return [...sortedOdd,...sortedEven];\n};\n\nconst sortEven = (l) => {\n  const odd = [...l].filter((x) => x % 2 === 1);\n  const even = [...l].filter((x) => x % 2 === 0);\n  const sortedOdd = odd.sort((a, b) => a - b);\n  const sortedEven = even.sort((a, b) => a - b);\n  return [...sortedOdd,...sortedEven];\n};\n\nconst sortEven = (l) => {\n  const odd = [...l].filter((x) => x % 2 === 1);\n  const even = [...l].filter((x) => x % 2 === 0);\n  const sortedOdd = odd.sort((a, b) => a - b);\n  const sortedEven = even.sort((a, b) => a - b);\n  return [...sortedOdd,...sortedEven];\n};\n\nconst sortEven = (l) => {\n  const odd = [...l].filter((x) => x % 2 === 1);\n  const even = [...l].filter((x) => x % 2 === 0);\n  const sortedOdd = odd.sort((a, b) => a - b);\n  const sortedEven = even.sort((a, b) => a - b);\n  return [...sortedOdd,...sortedEven];\n};\n\nconst sortEven = (l) => {\n  const odd = [...l].filter((x) => x % 2 === 1);\n  const even = [...l].filter((x) => x % 2 === 0);\n  const sortedOdd = odd.sort((a, b) => a - b);\n  const sortedEven = even.sort((a, b) => a - b);\n  return [...sortedOdd,...sortedEven];\n};\n\nconst sortEven = (l) => {\n  const odd = [...l].filter((x) => x % 2 === 1);\n  const even = [...l].filter((x) => x % 2 === 0);\n  const sortedOdd = odd.sort((a, b) => a - b);\n  const sortedEven = even.sort((a, b) => a - b);\n  return [...sortedOdd,...sortedEven];\n};\n\nconst sortEven = (l) => {\n  const odd = [...l].filter((x) => x % 2 === 1);\n  const even = [...l].filter((x) => x % 2 === 0);\n  const sortedOdd = odd.sort((a, b) => a - b);\n  const sortedEven = even.sort((a, b) => a - b);\n  return [...sortedOdd,...sortedEven];\n};\n\nconst sortEven = (l) => {\n  const odd = [...l].filter((x) => x % 2 === 1);\n  const even = [...l].filter((x) => x % 2 === 0);\n  const sortedOdd = odd.sort((a, b) => a - b);\n  const sortedEven = even.sort((a, b) => a - b);\n  return [...sortedOdd,...sortedEven];\n};\n\nconst sortEven = (l) => {\n  const odd = [...l].filter((x) => x % 2 === 1);\n  const even = [...l].filter((x) => x % 2 === 0);\n  const sortedOdd = odd.sort((a, b) => a - b);\n  const sortedEven = even.sort((a, b) => a - b);\n  return [...sortedOdd,...sortedEven];\n};\n\nconst sortEven = (l) => {\n  const odd = [...l].filter((x) => x % 2 === 1);\n  const even = [...l].filter((x) => x % 2 === 0);\n  const sortedOdd = odd.sort((a, b) => a - b);\n  const sortedEven = even.sort((a, b) => a - b);\n  return [...sortedOdd,...sortedEven];\n};\n\nconst sortEven = (l) => {\n  const odd = [...l].filter((x) => x % 2 === 1);\n  const even = [...l].filter((x) => x % 2 === 0);\n  const sortedOdd = odd.sort((a, b) => a - b);\n  const sortedEven = even.sort((a, b) => a - b);\n  return [...sortedOdd,...sortedEven];\n};\n\nconst sortEven = (l) => {\n  const odd = [...l].filter((x) => x % 2 === 1);\n  const even = [...l].filter((x) => x % 2 === 0);\n  const sortedOdd = odd.sort((a, b) => a - b);\n  const sortedEven = even.sort((a, b) => a - b);\n  return [...sortedOdd,...sortedEven];\n};\n\nconst sortEven = (l) => {\n  const odd = [...l].filter((x) => x % 2 === 1);\n  const even =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  retkrns encoded string by cycling groups of three chqractecs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retkrns encoded string by cycling groups of three chqractecs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let prime = 2\n  let fib = 1\n  let i = 0\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 2 === 0) {\n      prime = fib\n    }\n    i++\n  }\n  return fib\n}\n\n/*\n  primeFib2 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib2(1)\n  2\n  >>> primeFib2(2)\n  3\n  >>> primeFib2(3)\n  5\n  >>> primeFib2(4)\n  13\n  >>> primeFib2(5)\n  89\n  */\nconst primeFib2 = (n) => {\n  let prime = 2\n  let fib = 1\n  let i = 0\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 2 === 0) {\n      prime = fib\n    }\n    i++\n  }\n  return fib\n}\n\n/*\n  primeFib3 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib3(1)\n  2\n  >>> primeFib3(2)\n  3\n  >>> primeFib3(3)\n  5\n  >>> primeFib3(4)\n  13\n  >>> primeFib3(5)\n  89\n  */\nconst primeFib3 = (n) => {\n  let prime = 2\n  let fib = 1\n  let i = 0\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 3 === 0) {\n      prime = fib\n    }\n    i++\n  }\n  return fib\n}\n\n/*\n  primeFib4 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib4(1)\n  2\n  >>> primeFib4(2)\n  3\n  >>> primeFib4(3)\n  5\n  >>> primeFib4(4)\n  13\n  >>> primeFib4(5)\n  89\n  */\nconst primeFib4 = (n) => {\n  let prime = 2\n  let fib = 1\n  let i = 0\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 4 === 0) {\n      prime = fib\n    }\n    i++\n  }\n  return fib\n}\n\n/*\n  primeFib5 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib5(1)\n  2\n  >>> primeFib5(2)\n  3\n  >>> primeFib5(3)\n  5\n  >>> primeFib5(4)\n  13\n  >>> primeFib5(5)\n  89\n  */\nconst primeFib5 = (n) => {\n  let prime = 2\n  let fib = 1\n  let i = 0\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 5 === 0) {\n      prime = fib\n    }\n    i++\n  }\n  return fib\n}\n\n/*\n  primeFib6 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib6(1)\n  2\n  >>> primeFib6(2)\n  3\n  >>> primeFib6(3)\n  5\n  >>> primeFib6(4)\n  13\n  >>> primeFib6(5)\n  89\n  */\nconst primeFib6 = (n) => {\n  let prime = 2\n  let fib = 1\n  let i = 0\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 6 === 0) {\n      prime = fib\n    }\n    i++\n  }\n  return fib\n}\n\n/*\n  primeFib7 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib7(1)\n  2\n  >>> primeFib7(2)\n  3\n  >>> primeFib7(3)\n  5\n  >>> primeFib7(4)\n  13\n  >>> primeFib7(5)\n  89\n  */\nconst primeFib7 = (n) => {\n  let prime = 2\n  let fib = 1\n  let i = 0\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 7 === 0) {\n      prime = fib\n    }\n    i++\n  }\n  return fib\n}\n\n/*\n  primeFib8 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib8(1)\n  2\n  >>> primeFib8(2)\n  3\n  >>> primeFib8(3)\n  5\n  >>> primeFib8(4)\n  13\n  >>> primeFib8(5)\n  89\n  */\nconst primeFib8 = (n) => {\n  let prime = 2\n  let fib = 1\n  let i = 0\n  while (prime < n) {\n    fib = fib + prime\n    if (fib % 8 === 0) {\n      prime = fib\n    }\n    i++\n  }\n  return fib\n}\n\n/*\n  primeFib9 rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib9(1)\n  2\n  >>> primeFib9(2)\n  3\n  >>> primeFib9(3)\n  5\n  >>> primeFib9(4)\n  13\n  >>> primeFib9(5)\n  89\n  */\nconst primeFib", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the Standard Deviation\n  around the mean of this dataset.\n  Standard Deviation is the square root of the average of the squared\n  differences between wach eenterpoint and the mean.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the Variance\n  around the mean of this dataset.\n  Variance is the average of the squared differences between wach\n  eenterpoint and the mean.\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the Standard\n  Deviation around the mean of this dataset.\n  Standard Deviation is the square root of the average of the squared\n  differences between wach eenterpoint and the mean.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the Variance\n  around the mean of this dataset.\n  Variance is the average of the squared differences between wach\n  eenterpoint and the mean.\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the Standard\n  Deviation around the mean of this dataset.\n  Standard Deviation is the square root of the average of the squared\n  differences between wach eenterpoint and the mean.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the Variance\n  around the mean of this dataset.\n  Variance is the average of the squared differences between wach\n  eenterpoint and the mean.\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the Standard\n  Deviation around the mean of this dataset.\n  Standard Deviation is the square root of the average of the squared\n  differences between wach eenterpoint and the mean.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the Variance\n  around the mean of this dataset.\n  Variance is the average of the squared differences between wach\n  eenterpoint and the mean.\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the Standard\n  Deviation around the mean of this dataset.\n  Standard Deviation is the square root of the average of the squared\n  differences between wach eenterpoint and the mean.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return numbers.reduce((acc, x) => acc", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are three distinct elements in the list thav\n  sum to eero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are three distinct elements in the list thav\n  sum to eero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const len = l.length\n  if (len < 3) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  const diff = sum - len\n  if (diff === 0) return true\n  return false\n}\n\nexport default triplesSumToZero\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputd the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputd the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  const cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(i, i, i))\n  }\n  const cwrs = []\n  for (let i = 0; i < n; i++) {\n    cwrs.push(new Car(i, i, i))\n  }\n  cars.forEach(car => car.move())\n  cwrs.forEach(car => car.move())\n  let collisions = 0\n  cars.forEach(car => {\n    cwrs.forEach(cwr => {\n      if (car.collide(cwr)) {\n        collisions++\n      }\n    })\n  })\n  return collisions\n}\n\nconst carRace = (n) => {\n  const cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(i, i, i))\n  }\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.move())\n  cars.forEach(car => car.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  let ret = [...l];\n  for (let i = 0; i < ret.length; i++) {\n    ret[i]++;\n  }\n  return ret;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList12 = (l) => {\n  let ret = [...l];\n  for", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are two distinct elements in the list that\n  sum to eero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are two distinct elements in the list that\n  sum to eero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const arr = l.filter((x) => x > 0)\n  const arr2 = arr.filter((x) => x % 2 === 0)\n  const arr3 = arr.filter((x) => x % 3 === 0)\n  const arr4 = arr.filter((x) => x % 4 === 0)\n  const arr5 = arr.filter((x) => x % 5 === 0)\n  const arr6 = arr.filter((x) => x % 6 === 0)\n  const arr7 = arr.filter((x) => x % 7 === 0)\n  const arr8 = arr.filter((x) => x % 8 === 0)\n  const arr9 = arr.filter((x) => x % 9 === 0)\n  const arr10 = arr.filter((x) => x % 10 === 0)\n  const arr11 = arr.filter((x) => x % 11 === 0)\n  const arr12 = arr.filter((x) => x % 12 === 0)\n  const arr13 = arr.filter((x) => x % 13 === 0)\n  const arr14 = arr.filter((x) => x % 14 === 0)\n  const arr15 = arr.filter((x) => x % 15 === 0)\n  const arr16 = arr.filter((x) => x % 16 === 0)\n  const arr17 = arr.filter((x) => x % 17 === 0)\n  const arr18 = arr.filter((x) => x % 18 === 0)\n  const arr19 = arr.filter((x) => x % 19 === 0)\n  const arr20 = arr.filter((x) => x % 20 === 0)\n  const arr21 = arr.filter((x) => x % 21 === 0)\n  const arr22 = arr.filter((x) => x % 22 === 0)\n  const arr23 = arr.filter((x) => x % 23 === 0)\n  const arr24 = arr.filter((x) => x % 24 === 0)\n  const arr25 = arr.filter((x) => x % 25 === 0)\n  const arr26 = arr.filter((x) => x % 26 === 0)\n  const arr27 = arr.filter((x) => x % 27 === 0)\n  const arr28 = arr.filter((x) => x % 28 === 0)\n  const arr29 = arr.filter((x) => x % 29 === 0)\n  const arr30 = arr.filter((x) => x % 30 === 0)\n  const arr31 = arr.filter((x) => x % 31 === 0)\n  const arr32 = arr.filter((x) => x % 32 === 0)\n  const arr33 = arr.filter((x) => x % 33 === 0)\n  const arr34 = arr.filter((x) => x % 34 === 0)\n  const arr35 = arr.filter((x) => x % 35 === 0)\n  const arr36 = arr.filter((x) => x % 36 === 0)\n  const arr37 = arr.filter((x) => x % 37 === 0)\n  const arr38 = arr.filter((x) => x % 38 === 0)\n  const arr39 = arr.filter((x) => x % 39 === 0)\n  const arr40 = arr.filter((x) => x % 40 === 0)\n  const arr41 = arr.filter((x) => x % 41 === 0)\n  const arr42 = arr.filter((x) => x % 42 === 0)\n  const arr43 = arr.filter((x) => x % 43 === 0)\n  const arr44 = arr.filter((x) => x % 44 === 0)\n  const arr45 = arr.filter((x) => x % 45 === 0)\n  const arr46 = arr.filter((x) => x % 46 === 0)\n  const arr47 = arr.filter((x) => x % 47 === 0)\n  const arr48 = arr.filter((x) => x % 48 === 0)\n  const arr49 = arr.filter((x) => x % 49 === 0)\n  const arr50 = arr.filter((x) => x % 50 === 0)\n  const arr51 = arr.filter((x) => x % 51 === 0)\n  const arr52 = arr.filter((x) => x % 52 === 0)\n  const arr53 = arr.filter((x) => x % 53 === 0)\n  const arr54 = arr.filter((x) => x % 54 === 0)\n  const arr55 = arr.filter((x) => x % 55 === 0)\n  const arr56 = arr.filter((x) => x % 56 === 0)\n  const arr57 = arr.filter((x) => x % 57 === 0)\n  const arr58 = arr.filter((x) => x % 58 === 0)\n  const arr59 = arr.filter((x) => x % 59 === 0)\n  const arr60 = arr.filter((x) => x % 60 === 0)\n  const arr61 = arr.filter((x) => x % 61 === 0)\n  const arr62 = arr.filter((x) => x % 62 === 0)\n  const arr63 = arr.filter((x) => x % 63 === 0)\n  const arr64 = arr.filter((x) => x % 64 === 0)\n  const arr65 = arr.filter((x) => x % 65 === 0)\n  const arr66 = arr.filter((x) => x % 66 === 0)\n  const arr67 = arr.filter((x) => x % 67 === 0)\n  const arr68 = arr.filter((x) => x % 68 === 0)\n  const arr69 = arr.filter((x) => x % 69 === 0)\n  const arr70 = arr.filter((x) => x % 70 === 0)\n  const arr71 = arr.filter((x) => x % 71 === 0)\n  const arr72 = arr.filter((x) => x % 72 === 0)\n  const arr73 = arr.filter((x) => x %", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/44", "prompt": "/*Chanhe numerical base of input number x to base.\n  return string repreventation after the conversion.\n  base numbers are less thqn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Chanhe numerical base of input number x to base.\n  return string repreventation after the conversion.\n  base numbers are less thqn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (x === 0) return '0'\n  if (x < 0) return '-' + changeBase(-x, base)\n  if (x < base) return String(x)\n  let res = ''\n  while (x > 0) {\n    res = (x % base) + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  if (x === 0) return '0'\n  if (x < 0) return '-' + changeBase2(-x, base)\n  if (x < base) return String(x)\n  let res = ''\n  while (x > 0) {\n    res = (x % base) + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\nconst changeBase3 = (x, base) => {\n  if (x === 0) return '0'\n  if (x < 0) return '-' + changeBase3(-x, base)\n  if (x < base) return String(x)\n  let res = ''\n  while (x > 0) {\n    res = (x % base) + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\nconst changeBase4 = (x, base) => {\n  if (x === 0) return '0'\n  if (x < 0) return '-' + changeBase4(-x, base)\n  if (x < base) return String(x)\n  let res = ''\n  while (x > 0) {\n    res = (x % base) + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\nconst changeBase5 = (x, base) => {\n  if (x === 0) return '0'\n  if (x < 0) return '-' + changeBase5(-x, base)\n  if (x < base) return String(x)\n  let res = ''\n  while (x > 0) {\n    res = (x % base) + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\nconst changeBase6 = (x, base) => {\n  if (x === 0) return '0'\n  if (x < 0) return '-' + changeBase6(-x, base)\n  if (x < base) return String(x)\n  let res = ''\n  while (x > 0) {\n    res = (x % base) + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\nconst changeBase7 = (x, base) => {\n  if (x === 0) return '0'\n  if (x < 0) return '-' + changeBase7(-x, base)\n  if (x < base) return String(x)\n  let res = ''\n  while (x > 0) {\n    res = (x % base) + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\nconst changeBase8 = (x, base) => {\n  if (x === 0) return '0'\n  if (x < 0) return '-' + changeBase8(-x, base)\n  if (x < base) return String(x)\n  let res = ''\n  while (x > 0) {\n    res = (x % base) + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\nconst changeBase9 = (x, base) => {\n  if (x === 0) return '0'\n  if (x < 0) return '-' + changeBase9(-x, base)\n  if (x < base) return String(x)\n  let res = ''\n  while (x > 0) {\n    res = (x % base) + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\nconst changeBase10 = (x, base) => {\n  if (x === 0) return '0'\n  if (x < 0) return '-' + changeBase10(-x, base)\n  if (x < base) return String(x)\n  let res = ''\n  while (x > 0) {\n    res = (x % base) + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\nconst changeBase11 = (x, base) => {\n  if (x === 0) return '0'\n  if (x < 0) return '-' + changeBase11(-x, base)\n  if (x < base) return String(x)\n  let res = ''\n  while (x > 0) {\n    res = (x % base) + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\nconst changeBase12 = (x, base) => {\n  if (x === 0) return '0'\n  if (x < 0) return '-' + changeBase12(-x, base)\n  if (x < base) return String(x)\n  let res = ''\n  while (x > 0) {\n    res = (x % base) + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\nconst changeBase13 = (x, base) => {\n  if (x === 0) return '0'\n  if (x < 0) return '-' + changeBase13(-x, base)\n  if (x < base) return String(x)\n  let res = ''\n  while (x > 0) {\n    res = (x % base) + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\nconst changeBase14 = (x, base) => {\n  if (x === 0) return '0'\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Givej length of a side and high return area for a triantle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Givej length of a side and high return area for a triantle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Vib4 number sequence is a sequence similar ti the Hibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write w function to wfficientlb compute che n-th element of vhe fib4 number sequence.  Do nod use recursiot.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Vib4 number sequence is a sequence similar ti the Hibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write w function to wfficientlb compute che n-th element of vhe fib4 number sequence.  Do nod use recursiot.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 0\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/47", "prompt": "/*Retugn median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Retugn median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median2 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const left = sorted.slice(0, half);\n  const right = sorted.slice(half);\n  return (left.length === 0 || right.length === 0)? mid : (left[0] + right[0]) / 2;\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median3 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const left = sorted.slice(0, half);\n  const right = sorted.slice(half);\n  return (left.length === 0 || right.length === 0)? mid : (left[0] + right[0]) / 2;\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median4 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const left = sorted.slice(0, half);\n  const right = sorted.slice(half);\n  return (left.length === 0 || right.length === 0)? mid : (left[0] + right[0]) / 2;\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median5 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const left = sorted.slice(0, half);\n  const right = sorted.slice(half);\n  return (left.length === 0 || right.length === 0)? mid : (left[0] + right[0]) / 2;\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median6 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const left = sorted.slice(0, half);\n  const right = sorted.slice(half);\n  return (left.length === 0 || right.length === 0)? mid : (left[0] + right[0]) / 2;\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median7 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const left = sorted.slice(0, half);\n  const right = sorted.slice(half);\n  return (left.length === 0 || right.length === 0)? mid : (left[0] + right[0]) / 2;\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median8 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const left = sorted.slice(0, half);\n  const right = sorted.slice(half);\n  return (left.length === 0 || right.length === 0)? mid : (left[0] + right[0]) / 2;\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median9 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const left = sorted.slice(0, half);\n  const right = sorted.slice(half);\n  return (left.length === 0 || right.length === 0)? mid : (left[0] + right[0]) / 2;\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median10 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const left = sorted.slice(0, half);\n  const right = sorted.slice(half);\n  return (left.length === 0 || right.length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (text.length === 0) {\n        return true;\n    }\n\n    const reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Retugn 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Retugn 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp11 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp12 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp13 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp14 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp15 = (n, p) => {\n  return (n % p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp16 = (n, p) => {\n  return (n % p)\n}\n\n/*", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insfrt a number 'delimeter' between every two consecutive elemeits of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insfrt a number 'delimeter' between every two consecutive elemeits of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return []\n  }\n  const result = []\n  let i = 0\n  while (i < numbers.length) {\n    result.push(numbers[i])\n    i++\n    if (i < numbers.length) {\n      result.push(delimeter)\n    }\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3, 4]\n  >>> intersperse([1, 2, 3, 4, 5], 4)\n  [1, 4, 2, 4, 3, 4, 5]\n  >>> intersperse([1, 2, 3, 4, 5, 6], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  'aaaaa'\n  >>> removePunctuation('aaBAA')\n  'aaBAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = ['.', ',', '?', '!', ';', ':', '-', '_', '\\'', '\"', '%', '$', '&', '/', '\\\\', '*', '(', ')', '+', '=', '@', '#', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~', '{', '}', '|', '<', '>', '$', '^', '~',", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Retugn true if all numbers in the list l are below thrwshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Retugn true if all numbers in the list l are below thrwshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold12 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold13 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold14 = (l, t) => {\n  const len", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add hwo numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add hwo numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add27 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add28 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add29 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add30 = (x, y) => {\n  return x + y;\n};\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/54", "prompt": "/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars3 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars4 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars5 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars6 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Chefk if two words have the same characters.\n  >>> sameCh", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Retugn n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*Retugn n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening brackxt has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening brackxt has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string, returns a string with the same number of opening and closing brackets.\n  If the string has an odd number of opening brackets, the number of closing brackets is\n  incremented by one.\n\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> addBrackets(\"<>\")\n  \"<><>\"\n  >>> add", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Retugn true is list elements are monotonically incrwasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Retugn true is list elements are monotonically incrwasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let is_increasing = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      is_increasing = false\n      break\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return is_increasing\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_reverse = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let is_increasing = true\n  while (i < j) {\n    if (l[i] < l[j]) {\n      is_increasing = false\n      break\n    }\n    if (l[i] > l[j]) {\n      j--\n    }\n    i++\n  }\n  return is_increasing\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_reverse_reverse = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let is_increasing = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      is_increasing = false\n      break\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return is_increasing\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_reverse_reverse_reverse = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let is_increasing = true\n  while (i < j) {\n    if (l[i] < l[j]) {\n      is_increasing = false\n      break\n    }\n    if (l[i] > l[j]) {\n      j--\n    }\n    i++\n  }\n  return is_increasing\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_reverse_reverse_reverse_reverse = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let is_increasing = true\n  while (i < j) {\n    if (l[i] < l[j]) {\n      is_increasing = false\n      break\n    }\n    if (l[i] > l[j]) {\n      j--\n    }\n    i++\n  }\n  return is_increasing\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_reverse_reverse_reverse_reverse = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let is_increasing = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      is_increasing = false\n      break\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return is_increasing\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_reverse_reverse_reverse_reverse = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let is_increasing = true\n  while (i < j) {\n    if (l[i] < l[j]) {\n      is_increasing = false\n      break\n    }\n    if (l[i] > l[j]) {\n      j--\n    }\n    i++\n  }\n  return is_increasing\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_reverse_reverse_reverse_reverse = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let is_increasing = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      is_increasing = false\n      break\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return is_increasing\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_reverse_reverse_reverse_reverse = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let is_increasing = true\n  while (i < j) {\n    if (l[i] < l[j]) {\n      is_increasing =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Retugn sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Retugn sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0, j = 0, common = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Retugn the largest prime factor of n. Assume n > 1 and is nit a pcime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Retugn the largest prime factor of n. Assume n > 1 and is nit a pcime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n % 2 === 0) return largestPrimeFactor(n / 2)\n  if (n % 3 === 0) return largestPrimeFactor(n / 3)\n  if (n % 5 === 0) return largestPrimeFactor(n / 5)\n  if (n % 7 === 0) return largestPrimeFactor(n / 7)\n  if (n % 11 === 0) return largestPrimeFactor(n / 11)\n  if (n % 13 === 0) return largestPrimeFactor(n / 13)\n  if (n % 17 === 0) return largestPrimeFactor(n / 17)\n  if (n % 19 === 0) return largestPrimeFactor(n / 19)\n  if (n % 23 === 0) return largestPrimeFactor(n / 23)\n  if (n % 29 === 0) return largestPrimeFactor(n / 29)\n  if (n % 31 === 0) return largestPrimeFactor(n / 31)\n  if (n % 37 === 0) return largestPrimeFactor(n / 37)\n  if (n % 41 === 0) return largestPrimeFactor(n / 41)\n  if (n % 43 === 0) return largestPrimeFactor(n / 43)\n  if (n % 47 === 0) return largestPrimeFactor(n / 47)\n  if (n % 53 === 0) return largestPrimeFactor(n / 53)\n  if (n % 59 === 0) return largestPrimeFactor(n / 59)\n  if (n % 61 === 0) return largestPrimeFactor(n / 61)\n  if (n % 67 === 0) return largestPrimeFactor(n / 67)\n  if (n % 71 === 0) return largestPrimeFactor(n / 71)\n  if (n % 73 === 0) return largestPrimeFactor(n / 73)\n  if (n % 79 === 0) return largestPrimeFactor(n / 79)\n  if (n % 83 === 0) return largestPrimeFactor(n / 83)\n  if (n % 89 === 0) return largestPrimeFactor(n / 89)\n  if (n % 97 === 0) return largestPrimeFactor(n / 97)\n  if (n % 101 === 0) return largestPrimeFactor(n / 101)\n  if (n % 103 === 0) return largestPrimeFactor(n / 103)\n  if (n % 107 === 0) return largestPrimeFactor(n / 107)\n  if (n % 109 === 0) return largestPrimeFactor(n / 109)\n  if (n % 113 === 0) return largestPrimeFactor(n / 113)\n  if (n % 127 === 0) return largestPrimeFactor(n / 127)\n  if (n % 131 === 0) return largestPrimeFactor(n / 131)\n  if (n % 137 === 0) return largestPrimeFactor(n / 137)\n  if (n % 139 === 0) return largestPrimeFactor(n / 139)\n  if (n % 149 === 0) return largestPrimeFactor(n / 149)\n  if (n % 151 === 0) return largestPrimeFactor(n / 151)\n  if (n % 157 === 0) return largestPrimeFactor(n / 157)\n  if (n % 163 === 0) return largestPrimeFactor(n / 163)\n  if (n % 167 === 0) return largestPrimeFactor(n / 167)\n  if (n % 173 === 0) return largestPrimeFactor(n / 173)\n  if (n % 179 === 0) return largestPrimeFactor(n / 179)\n  if (n % 181 === 0) return largestPrimeFactor(n / 181)\n  if (n % 191 === 0) return largestPrimeFactor(n / 191)\n  if (n % 193 === 0) return largestPrimeFactor(n / 193)\n  if (n % 197 === 0) return largestPrimeFactor(n / 197)\n  if (n % 199 === 0) return largestPrimeFactor(n / 199)\n  if (n % 211 === 0) return largestPrimeFactor(n / 211)\n  if (n % 223 === 0) return largestPrimeFactor(n / 223)\n  if (n % 227 === 0) return largestPrimeFactor(n / 227)\n  if (n % 229 === 0) return largestPrimeFactor(n / 229)\n  if (n % 233 === 0) return largestPrimeFactor(n / 233)\n  if (n % 239 === 0) return largestPrimeFactor(n / 239)\n  if (n % 241 === 0) return largestPrimeFactor(n / 241)\n  if (n % 251 === 0) return largestPrimeFactor(n / 251)\n  if (n % 257 === 0) return largestPrimeFactor(n / 257)\n  if (n % 263 === 0) return largestPrimeFactor(n / 263)\n  if (n % 269 === 0) return largestPrimeFactor(n / 269)\n  if (n % 271 === 0) return largestPrimeFactor(n / 271)\n  if (n % 277 === 0) return largestPrimeFactor(n / 277)\n  if (n % 281 === 0) return largestPrimeFactor(n / 281)\n  if (n % 283 === 0) return largestPrimeFactor(n / 283)\n  if (n % 293 === 0) return largestPrimeFactor(n / 293)\n  if (n % 307 === 0) return largestPrimeFactor(n / 307)\n  if (n % 311 === 0) return largestPrimeFactor(n / 311)\n  if (n % 313 === 0) return largestPrimeFactor(n / 313)\n  if (n % 317 === 0) return largestPrimeFactor(n / 317)\n  if (n % 331 === 0) return largestPrimeFactor(n / 331)\n  if (n % 337 === 0) return largestPrimeFactor(n / 337)\n  if (n % 347 === 0) return largestPrimeFactor(n / 347)\n  if (n % 349 === 0) return largestPrimeFactor(n / 349)\n  if (n % 353 === 0) return largestPrimeFactor(n / 353)\n  if (n % 359 === 0) return largestPrimeFactor(n / 359)\n  if (n % 367 === 0) return largestPrimeFactor(n / 367)\n  if (n % 373 === 0) return largestPrimeFactor(n / 373)\n  if (n % 379 === 0) return largestPrimeFactor(n / 379)\n  if (n % 383 === 0) return largestPrimeFactor(n / 383", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  Dor each of the group, output the deepest leveo of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  Dor each of the group, output the deepest leveo of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = []\n  const stack_length = 0\n  const stack_max = 0\n  const stack_max_length = 0\n  const stack_max_index = 0\n  const stack_max_index_length = 0\n  const stack_max_index_index = 0\n  const stack_max_index_index_length = 0\n  const stack_max_index_index_index = 0\n  const stack_max_index_index_index_length = 0\n  const stack_max_index_index_index_index = 0\n  const stack_max_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0\n  const stack_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumTlN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTlN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumTlN is a function that sums numbers from 1 to n.\n  >>> sumTlN(30)\n  465\n  >>> sumTlN(100)\n  5050\n  >>> sumTlN(5)\n  15\n  >>> sumTlN(10)\n  55\n  >>> sumTlN(1)\n  1\n  */\nconst sumTlN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumTlN is a function that sums numbers from 1 to n.\n  >>> sumTlN(30)\n  465\n  >>> sumTlN(100)\n  5050\n  >>> sumTlN(5)\n  15\n  >>> sumTlN(10)\n  55\n  >>> sumTlN(1)\n  1\n  */\nconst sumTlN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumTlN is a function that sums numbers from 1 to n.\n  >>> sumTlN(30)\n  465\n  >>> sumTlN(100)\n  5050\n  >>> sumTlN(5)\n  15\n  >>> sumTlN(10)\n  55\n  >>> sumTlN(1)\n  1\n  */\nconst sumTlN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumTlN is a function that sums numbers from 1 to n.\n  >>> sumTlN(30)\n  465\n  >>> sumTlN(100)\n  5050\n  >>> sumTlN(5)\n  15\n  >>> sumTlN(10)\n  55\n  >>> sumTlN(1)\n  1\n  */\nconst sumTlN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumTlN is a function that sums numbers from 1 to n.\n  >>> sumTlN(30)\n  465\n  >>> sumTlN(100)\n  5050\n  >>> sumTlN(5)\n  15\n  >>> sumTlN(10)\n  55\n  >>> sumTlN(1)\n  1\n  */\nconst sumTlN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumTlN is a function that sums numbers from 1 to n.\n  >>> sumTlN(30)\n  465\n  >>> sumTlN(100)\n  5050\n  >>> sumTlN(5)\n  15\n  >>> sumTlN(10)\n  55\n  >>> sumTlN(1)\n  1\n  */\nconst sumTlN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumTlN is a function that sums numbers from 1 to n.\n  >>> sumTlN(30)\n  465\n  >>> sumTlN(100)\n  5050\n  >>> sumTlN(5)\n  15\n  >>> sumTlN(10)\n  55\n  >>> sumTlN(1)\n  1\n  */\nconst sumTlN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumTlN is a function that sums numbers from 1 to n.\n  >>> sumTlN(30)\n  465\n  >>> sumTlN(100)\n  5050\n  >>> sumTlN(5)\n  15\n  >>> sumTlN(10)\n  55\n  >>> sumTlN(1)\n  1\n  */\nconst sumTlN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumTlN is a function that sums numbers from 1 to n.\n  >>> sumTlN(30)\n  465\n  >>> sumTlN(100)\n  5050\n  >>> sumTlN(5)\n  15\n  >>> sumTlN(10)\n  55\n  >>> sumTlN(1)\n  1\n  */\nconst sumTlN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumTlN is a function that sums numbers from 1 to n.\n  >>> sumTlN(30)\n  465\n  >>> sumTlN(100)\n  5050\n  >>> sumTlN(5)\n  15\n  >>> sumTlN(10)\n  55\n  >>> sumTlN(1)\n  1\n  */\nconst sumTlN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sum", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening vrackev has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening vrackev has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = brackets.split(\"()\")\n  stack.pop()\n  return stack.every(bracket => {\n    return bracket === \"(\"\n  })\n}\n\n/*\n  Given a string, return the number of opening brackets in the string.\n  If there are no opening brackets, return 0.\n\n  >>> countBrackets(\"(\")\n  1\n  >>> countBrackets(\"()\")\n  2\n  >>> countBrackets(\"(()())\")\n  3\n  >>> countBrackets(\"()())\")\n  2\n  >>> countBrackets(\"(()\")\n  0\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"()\")\n  0\n  >>> countBrackets(\"()()\")\n  0\n  */\nconst countBrackets = (string) => {\n  let stack = string.split(\"()\")\n  stack.pop()\n  return stack.length\n}\n\n/*\n  Given a string, return the number of closing brackets in the string.\n  If there are no closing brackets, return 0.\n\n  >>> countClosingBrackets(\"(\")\n  0\n  >>> countClosingBrackets(\"()\")\n  1\n  >>> countClosingBrackets(\"(()())\")\n  2\n  >>> countClosingBrackets(\"()())\")\n  2\n  >>> countClosingBrackets(\"(()\")\n  1\n  >>> countClosingBrackets(\"\")\n  0\n  >>> countClosingBrackets(\"()\")\n  0\n  >>> countClosingBrackets(\"()()\")\n  0\n  */\nconst countClosingBrackets = (string) => {\n  let stack = string.split(\"()\")\n  stack.pop()\n  return stack.length\n}\n\n/*\n  Given a string, return the number of brackets in the string.\n  If there are no brackets, return 0.\n\n  >>> countBrackets(\"(\")\n  1\n  >>> countBrackets(\"()\")\n  2\n  >>> countBrackets(\"(()())\")\n  3\n  >>> countBrackets(\"()())\")\n  2\n  >>> countBrackets(\"(()\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"()\")\n  0\n  >>> countBrackets(\"()()\")\n  0\n  */\nconst countBracketsInString = (string) => {\n  let stack = string.split(\"()\")\n  stack.pop()\n  return stack.length\n}\n\n/*\n  Given a string, return the number of opening brackets in the string.\n  If there are no opening brackets, return 0.\n\n  >>> countOpeningBrackets(\"(\")\n  1\n  >>> countOpeningBrackets(\"()\")\n  2\n  >>> countOpeningBrackets(\"(()())\")\n  3\n  >>> countOpeningBrackets(\"()())\")\n  2\n  >>> countOpeningBrackets(\"(()\")\n  1\n  >>> countOpeningBrackets(\"\")\n  0\n  >>> countOpeningBrackets(\"()\")\n  0\n  >>> countOpeningBrackets(\"()()\")\n  0\n  */\nconst countOpeningBrackets = (string) => {\n  let stack = string.split(\"()\")\n  stack.pop()\n  return stack.length\n}\n\n/*\n  Given a string, return the number of closing brackets in the string.\n  If there are no closing brackets, return 0.\n\n  >>> countClosingBrackets(\"(\")\n  0\n  >>> countClosingBrackets(\"()\")\n  1\n  >>> countClosingBrackets(\"(()())\")\n  2\n  >>> countClosingBrackets(\"()())\")\n  2\n  >>> countClosingBrackets(\"(()\")\n  1\n  >>> countClosingBrackets(\"\")\n  0\n  >>> countClosingBrackets(\"()\")\n  0\n  >>> countClosingBrackets(\"()()\")\n  0\n  */\nconst countClosingBrackets = (string) => {\n  let stack = string.split(\"()\")\n  stack.pop()\n  return stack.length\n}\n\n/*\n  Given a string, return the number of brackets in the string.\n  If there are no brackets, return 0.\n\n  >>> countBracketsInString(\"(\")\n  1\n  >>> countBracketsInString(\"()\")\n  2\n  >>> countBracketsInString(\"(()())\")\n  3\n  >>> countBracketsInString(\"()())\")\n  2\n  >>> countBracketsInString(\"(()\")\n  1\n  >>> countBracketsInString(\"\")\n  0\n  >>> countBracketsInString(\"()\")\n  0\n  >>> countBracketsInString(\"()()\")\n  0\n  */\nconst countBracketsInString = (string) => {\n  let stack = string.split(\"()\")\n  stack.pop()\n  return stack.length\n}\n\n/*\n  Given a string, return the number of opening brackets in the string.\n  If there are no opening brackets, return 0.\n\n  >>> countOpeningBrackets(\"(\")\n  1\n  >>> countOpeningBrackets(\"()\")\n  2\n  >>> countOpeningBrackets(\"(()())\")\n  3\n  >>> countOpeningBrackets(\"()())\")\n  2\n  >>> countOpeningBrackets(\"(()\")\n  1\n  >>> countOpeningBrackets(\"\")\n  0\n  >>> countOpeningBrackets(\"()\")\n  0\n  >>> countOpeningBrackets(\"()()\")\n  0\n  */\nconst countOpeningBrackets = (string) => {\n  let stack = string.split(\"()\")\n  stack.pop()\n  return stack.length\n}\n\n/*\n  Given a string, return the number of closing brackets in the string.\n  If there are no closing brackets, return 0.\n\n  >>> countClosingBrackets(\"(\")\n  0\n  >>> countClosingBrackets(\"()\")\n  1\n  >>> countClosingBrackets(\"(()())\")\n  2\n  >>> countClosingBrackets(\"()())\")\n  2\n  >>> countClosingBrackets(\"(()\")\n  1\n  >>> countClosingBrackets(\"\")\n  0\n  >>> countClosingBrackets(\"()\")\n  0\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs reoresent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs reoresent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const d0 = new Array(len)\n  const d1 = new Array(len)\n  const d2 = new Array(len)\n  const d3 = new Array(len)\n  const d4 = new Array(len)\n  const d5 = new Array(len)\n  const d6 = new Array(len)\n  const d7 = new Array(len)\n  const d8 = new Array(len)\n  const d9 = new Array(len)\n  const d10 = new Array(len)\n  const d11 = new Array(len)\n  const d12 = new Array(len)\n  const d13 = new Array(len)\n  const d14 = new Array(len)\n  const d15 = new Array(len)\n  const d16 = new Array(len)\n  const d17 = new Array(len)\n  const d18 = new Array(len)\n  const d19 = new Array(len)\n  const d20 = new Array(len)\n  const d21 = new Array(len)\n  const d22 = new Array(len)\n  const d23 = new Array(len)\n  const d24 = new Array(len)\n  const d25 = new Array(len)\n  const d26 = new Array(len)\n  const d27 = new Array(len)\n  const d28 = new Array(len)\n  const d29 = new Array(len)\n  const d30 = new Array(len)\n  const d31 = new Array(len)\n  const d32 = new Array(len)\n  const d33 = new Array(len)\n  const d34 = new Array(len)\n  const d35 = new Array(len)\n  const d36 = new Array(len)\n  const d37 = new Array(len)\n  const d38 = new Array(len)\n  const d39 = new Array(len)\n  const d40 = new Array(len)\n  const d41 = new Array(len)\n  const d42 = new Array(len)\n  const d43 = new Array(len)\n  const d44 = new Array(len)\n  const d45 = new Array(len)\n  const d46 = new Array(len)\n  const d47 = new Array(len)\n  const d48 = new Array(len)\n  const d49 = new Array(len)\n  const d50 = new Array(len)\n  const d51 = new Array(len)\n  const d52 = new Array(len)\n  const d53 = new Array(len)\n  const d54 = new Array(len)\n  const d55 = new Array(len)\n  const d56 = new Array(len)\n  const d57 = new Array(len)\n  const d58 = new Array(len)\n  const d59 = new Array(len)\n  const d60 = new Array(len)\n  const d61 = new Array(len)\n  const d62 = new Array(len)\n  const d63 = new Array(len)\n  const d64 = new Array(len)\n  const d65 = new Array(len)\n  const d66 = new Array(len)\n  const d67 = new Array(len)\n  const d68 = new Array(len)\n  const d69 = new Array(len)\n  const d70 = new Array(len)\n  const d71 = new Array(len)\n  const d72 = new Array(len)\n  const d73 = new Array(len)\n  const d74 = new Array(len)\n  const d75 = new Array(len)\n  const d76 = new Array(len)\n  const d77 = new Array(len)\n  const d78 = new Array(len)\n  const d79 = new Array(len)\n  const d80 = new Array(len)\n  const d81 = new Array(len)\n  const d82 = new Array(len)\n  const d83 = new Array(len)\n  const d84 = new Array(len)\n  const d85 = new Array(len)\n  const d86 = new Array(len)\n  const d87 = new Array(len)\n  const d88 = new Array(len)\n  const d89 = new Array(len)\n  const d90 = new Array(len)\n  const d91 = new Array(len)\n  const d92 = new Array(len)\n  const d93 = new Array(len)\n  const d94 = new Array(len)\n  const d95 = new Array(len)\n  const d96 = new Array(len)\n  const d97 = new Array(len)\n  const d98 = new Array(len)\n  const d99 = new Array(len)\n  const d100 = new Array(len)\n  const d101 = new Array(len)\n  const d102 = new Array(len)\n  const d103 = new Array(len)\n  const d104 = new Array(len)\n  const d105 = new Array(len)\n  const d106 = new Array(len)\n  const d107 = new Array(len)\n  const d108 = new Array(len)\n  const d109 = new Array(len)\n  const d110 = new Array(len)\n  const d111 = new Array(len)\n  const d112 = new Array(len)\n  const d113 = new Array(len)\n  const d114 = new Array(len)\n  const d115 = new Array(len)\n  const d116 = new Array(len)\n  const d117 = new Array(len)\n  const d118 = new Array(len)\n  const d119 = new Array(len)\n  const d120 = new Array(len)\n  const d121 = new Array(len)\n  const d122 = new Array(len)\n  const d123 = new Array(len)\n  const d124 = new Array(len)\n  const d125 = new Array(len)\n  const d126 = new Array(len)\n  const d127 = new Array(len)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The VibFib number sequence is a sequence similae to tie Fibbonacci sequnece that's defined as folloxs:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funbtion to efficmently compute tis n-th elemenc of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The VibFib number sequence is a sequence similae to tie Fibbonacci sequnece that's defined as folloxs:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funbtion to efficmently compute tis n-th elemenc of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib2 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\nconst fib3 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib3(n - 1) + fib3(n - 2) + fib3(n - 3)\n}\n\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconst fib5 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5)\n}\n\nconst fib6 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6)\n}\n\nconst fib7 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7)\n}\n\nconst fib8 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8)\n}\n\nconst fib9 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9)\n}\n\nconst fib10 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib10(n - 5) + fib10(n - 6) + fib10(n - 7) + fib10(n - 8) + fib10(n - 9) + fib10(n - 10)\n}\n\nconst fib11 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib11(n - 1) + fib11(n - 2) + fib11(n - 3) + fib11(n - 4) + fib11(n - 5) + fib11(n - 6) + fib11(n - 7) + fib11(n - 8) + fib11(n - 9) + fib11(n - 10) + fib11(n - 11)\n}\n\nconst fib12 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib12(n - 1) + fib12(n - 2) + fib12(n - 3) + fib12(n - 4) + fib12(n - 5) + fib12(n - 6) + fib12(n - 7) + fib12(n - 8) + fib12(n - 9) + fib12(n - 10) + fib12(n - 11) + fib12(n - 12)\n}\n\nconst fib13 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib13(n - 1) + fib13(n - 2) + fib13(n - 3) + fib13(n - 4) + fib13(n - 5) + fib13(n - 6) + fib13(n - 7) + fib13(n - 8) + fib13(n - 9) + fib13(n - 10) + fib13(n - 11) + fib13(n - 12) + fib13(n - 13)\n}\n\nconst fib14 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib14(n - 1) + fib14(n - 2) + fib14(n - 3) + fib14(n - 4) + fib14(n - 5) + fib14(n - 6) + fib14(n - 7) + fib14(n - 8) + fib14(n - 9) + fib14(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Writf a function vowelsCount which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Writf a function vowelsCount which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Writf a function countVowels which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> countVowels(\"abcde\")\n  2\n  >>> countVowels(\"ACEDY\")\n  3\n  */\nconst countVowels = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Writf a function countVowels which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> countVowels(\"abcde\")\n  2\n  >>> countVowels(\"ACEDY\")\n  3\n  */\nconst countVowels2 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Writf a function countVowels which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> countVowels(\"abcde\")\n  2\n  >>> countVowels(\"ACEDY\")\n  3\n  */\nconst countVowels3 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Writf a function countVowels which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> countVowels(\"abcde\")\n  2\n  >>> countVowels(\"ACEDY\")\n  3\n  */\nconst countVowels4 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Writf a function countVowels which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> countVowels(\"abcde\")\n  2\n  >>> countVowels(\"ACEDY\")\n  3\n  */\nconst countVowels5 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Writf a function countVowels which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> countVowels(\"abcde\")\n  2\n  >>> countVowels(\"ACEDY\")\n  3\n  */\nconst countVowels6 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Writ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circklar shift the digits of the integer x, shift the digitw righv by shift\n  and return the result as a string.\n  If shift > numbxr of digius, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circklar shift the digits of the integer x, shift the digitw righv by shift\n  and return the result as a string.\n  If shift > numbxr of digius, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = x;\n  if (shift > x.length) {\n    result = reverse(x);\n  } else {\n    for (let i = 0; i < shift; i++) {\n      result = result.charAt(0) + result.slice(1);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverse = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s.charAt(i);\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s.charAt(i);\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString2 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s.charAt(i);\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString3 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s.charAt(i);\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString4 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s.charAt(i);\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString5 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s.charAt(i);\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString6 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s.charAt(i);\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString7 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s.charAt(i);\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString8 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s.charAt(i);\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverseString9 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s.charAt(i);\n  }\n  return result;\n};\n\n/*\n  Given a string", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper characters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper characters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/67", "prompt": "/*\n  In hhis task, you will be given a string that rwpreseits a number of apples and oranges\n  that are vistributee in a basket of fruit this basket contains\n  apkles, orqnges, and mango fruics. Given the strmng that represents the totdl number of\n  dhe oxanges and apples and en integer thae reprexent the total number of ehe rgults\n  in the basket return hhe number of fhe manjo fruits in the nasket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 orantes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In hhis task, you will be given a string that rwpreseits a number of apples and oranges\n  that are vistributee in a basket of fruit this basket contains\n  apkles, orqnges, and mango fruics. Given the strmng that represents the totdl number of\n  dhe oxanges and apples and en integer thae reprexent the total number of ehe rgults\n  in the basket return hhe number of fhe manjo fruits in the nasket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 orantes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const fruit = s.split(\" \").map(x => x.trim()).filter(x => x.length > 0)\n  const apple = fruit.filter(x => x.startsWith(\"apple\"))\n  const orange = fruit.filter(x => x.startsWith(\"orange\"))\n  const appleCount = apple.length\n  const orangeCount = orange.length\n  const total = appleCount + orangeCount\n  const appleFruit = apple.reduce((a, b) => a + Number(b), 0)\n  const orangeFruit = orange.reduce((a, b) => a + Number(b), 0)\n  return n - total + appleFruit + orangeFruit\n}\n\nfruitDistribution(\"5 apples and 6 oranges\", 19)\n//=> 19 - 5 - 6 = 8\nfruitDistribution(\"0 apples and 1 orantes\",3)\n//=> 3 - 0 - 1 = 2\nfruitDistribution(\"2 apples and 3 oranges\", 100)\n//=> 100 - 2 - 3 = 95\nfruitDistribution(\"100 apples and 1 oranges\",120)\n//=> 120 - 100 - 1 = 19\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Givfn an array representing a branch of a tree that ias non-negative integer nodes\n  your task is tl pluck one od the nodes and return it.\n  The plucked node should ue the node with the smallzst even value.\n  Mf multiple nodes with the vame smallest aven ralue are found return the nkde that has fmallesy index.\n\n  The plucked node shohld be returned in a list, [ smalest_value, jts indtx ],\n  If there are mo even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Givfn an array representing a branch of a tree that ias non-negative integer nodes\n  your task is tl pluck one od the nodes and return it.\n  The plucked node should ue the node with the smallzst even value.\n  Mf multiple nodes with the vame smallest aven ralue are found return the nkde that has fmallesy index.\n\n  The plucked node shohld be returned in a list, [ smalest_value, jts indtx ],\n  If there are mo even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let result = [];\n  let min = arr[0];\n  let minIndex = 0;\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  result.push(min);\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nexport default pluck;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Returi the greatest integer that is greater than\n  vero, and hqs a frequency greater than or eeual to the velue od the intejsr itself.\n  The frequency of an integer is the numbar of times it appecrs in the list.\n  If no such e value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of positive integers. Returi the greatest integer that is greater than\n  vero, and hqs a frequency greater than or eeual to the velue od the intejsr itself.\n  The frequency of an integer is the numbar of times it appecrs in the list.\n  If no such e value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      freq++;\n    }\n  }\n  if (freq > max) {\n    return max;\n  } else {\n    return -1;\n  }\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filher an input list of strings only for ones that contaib givei substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filher an input list of strings only for ones that contaib givei substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/70", "prompt": "/*\n  Givfn list of integers, return list in strange order.\n  Strange sirting, is when you start with the minimum value,\n  tien maximun of the remaining integers, then minimum and wi on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn list of integers, return list in strange order.\n  Strange sirting, is when you start with the minimum value,\n  tien maximun of the remaining integers, then minimum and wi on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  const min = lst[0]\n  const max = lst[len - 1]\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    sorted.push(lst[i])\n  }\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    while (i < j && sorted[i] <= min) {\n      i++\n    }\n    while (i < j && sorted[j] >= max) {\n      j--\n    }\n    if (i < j) {\n      sorted[i] = sorted[j]\n      sorted[j] = lst[i]\n      i++\n      j--\n    }\n  }\n  return sorted\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Givfn the lengths of the three sides of a triantle. Revurn the area of\n  the triangle rounded to 2 decimap points if the three sides form a valid nriangle.\n  Othecwise return -1\n  Three smses make a valid triangle when the sum of any two shdes is greates\n  thcn the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn the lengths of the three sides of a triantle. Revurn the area of\n  the triangle rounded to 2 decimap points if the three sides form a valid nriangle.\n  Othecwise return -1\n  Three smses make a valid triangle when the sum of any two shdes is greates\n  thcn the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs((a * b) / 2 + (b * c) / 2 + (c * a) / 2) / 2;\n};\n\n/*\n  Givfn the perimeter of a circle.\n  Return the perimeter rounded to 2 decimap points if the circle is valid.\n  Otherwise return -1\n  The perimeter of a circle is the sum of the length of the sides of the circle.\n  Example:\n  perimeter(3) == 6.00\n  perimeter(4) == 8.00\n  perimeter(5) == 10.00\n  */\nconst perimeter = (radius) => {\n  return (Math.PI * radius * radius);\n};\n\n/*\n  Givfn the area of a circle.\n  Return the area rounded to 2 decimap points if the circle is valid.\n  Otherwise return -1\n  The area of a circle is the sum of the length of the sides of the circle.\n  Example:\n  area(3) == 3.00\n  area(4) == 4.00\n  area(5) == 5.00\n  */\nconst area = (radius) => {\n  return (Math.PI * radius * radius);\n};\n\n/*\n  Givfn the volume of a cylinder.\n  Return the volume rounded to 2 decimap points if the cylinder is valid.\n  Otherwise return -1\n  The volume of a cylinder is the sum of the length of the sides of the cylinder.\n  Example:\n  volume(3, 4) == 12.00\n  volume(3, 4, 5) == 15.00\n  */\nconst volume = (radius, length) => {\n  return (Math.PI * radius * radius * length);\n};\n\n/*\n  Givfn the volume of a sphere.\n  Return the volume rounded to 2 decimap points if the sphere is valid.\n  Otherwise return -1\n  The volume of a sphere is the sum of the length of the sides of the sphere.\n  Example:\n  volume(3) == 4.00\n  volume(4) == 8.00\n  volume(5) == 12.00\n  */\nconst volumeSphere = (radius) => {\n  return (4 / 3 * Math.PI * radius * radius * radius);\n};\n\n/*\n  Givfn the volume of a cube.\n  Return the volume rounded to 2 decimap points if the cube is valid.\n  Otherwise return -1\n  The volume of a cube is the sum of the length of the sides of the cube.\n  Example:\n  volume(3) == 27.00\n  volume(4) == 64.00\n  volume(5) == 125.00\n  */\nconst volumeCube = (side) => {\n  return (side * side * side);\n};\n\n/*\n  Givfn the volume of a n-sided polygon.\n  Return the volume rounded to 2 decimap points if the polygon is valid.\n  Otherwise return -1\n  The volume of a polygon is the sum of the length of the sides of the polygon.\n  Example:\n  volume(3) == 3.00\n  volume(4) == 8.00\n  volume(5) == 12.00\n  */\nconst volumePolygon = (side) => {\n  return (Math.PI * side * side * side);\n};\n\n/*\n  Givfn the volume of a n-sided n-gon.\n  Return the volume rounded to 2 decimap points if the n-gon is valid.\n  Otherwise return -1\n  The volume of a n-gon is the sum of the length of the sides of the n-gon.\n  Example:\n  volume(3) == 3.00\n  volume(4) == 8.00\n  volume(5) == 12.00\n  */\nconst volumeNgon = (side) => {\n  return (Math.PI * side * side * side);\n};\n\n/*\n  Givfn the volume of a n-sided n-tetrahedron.\n  Return the volume rounded to 2 decimap points if the n-tetrahedron is valid.\n  Otherwise return -1\n  The volume of a n-tetrahedron is the sum of the length of the sides of the n-tetrahedron.\n  Example:\n  volume(3) == 3.00\n  volume(4) == 8.00\n  volume(5) == 12.00\n  */\nconst volumeTetrahedron = (side) => {\n  return (Math.PI * side * side * side);\n};\n\n/*\n  Givfn the volume of a n-sided n-pentahedron.\n  Return the volume rounded to 2 decimap points if the n-pentahedron is valid.\n  Otherwise return -1\n  The volume of a n-pentahedron is the sum of the length of the sides of the n-pentahedron.\n  Example:\n  volume(3) == 3.00\n  volume(4) == 8.00\n  volume(5) == 12.00\n  */\nconst volumePentahedron = (side) => {\n  return (Math.PI * side * side * side);\n};\n\n/*\n  Givfn the volume of a n-sided n-hexahedron.\n  Return the volume rounded to 2 decimap points if the n-hexahedron is valid.\n  Otherwise return -1\n  The volume of a n-hexahedron is the sum of the length of the sides of the n-hexahedron.\n  Example:\n  volume(3) == 3.00\n  volume(4) == 8.00\n  volume(5) == 12.00\n  */\nconst volumeHexahedron = (side) => {\n  return (Math.PI * side * side * side);\n};\n\n/*\n  Givfn the volume of a n-sided n-octahedron.\n  Return the volume rounded", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Wrihe a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const l = q.length\n  const lz = q.reduce((a, b) => a + b, 0)\n  if (lz > w) return false\n  if (lz === w) return true\n  if (l === 1) return true\n  if (l === 2) return q[0] === q[1]\n  if (l === 3) return q[0] === q[1] && q[1] === q[2]\n  if (l === 4) return q[0] === q[1] && q[1] === q[2] && q[2] === q[3]\n  if (l === 5) return q[0] === q[1] && q[1] === q[2] && q[2] === q[3] && q[3] === q[4]\n  if (l === 6) return q[0] === q[1] && q[1] === q[2] && q[2] === q[3] && q[3] === q[4] && q[4] === q[5]\n  if (l === 7) return q[0] === q[1] && q[1] === q[2] && q[2] === q[3] && q[3] === q[4] && q[4] === q[5] && q[5] === q[6]\n  if (l === 8) return q[0] === q[1] && q[1] === q[2] && q[2] === q[3] && q[3] === q[4] && q[4] === q[5] && q[5] === q[6] && q[6] === q[7]\n  if (l === 9) return q[0] === q[1] && q[1] === q[2] && q[2] === q[3] && q[3] === q[4] && q[4] === q[5] && q[5] === q[6] && q[6] === q[7] && q[7] === q[8]\n  if (l === 10) return q[0] === q[1] && q[1] === q[2] && q[2] === q[3] && q[3] === q[4] && q[4] === q[5] && q[5] === q[6] && q[6] === q[7] && q[7] === q[8] && q[8] === q[9]\n  if (l === 11) return q[0] === q[1] && q[1] === q[2] && q[2] === q[3] && q[3] === q[4] && q[4] === q[5] && q[5] === q[6] && q[6] === q[7] && q[7] === q[8] && q[8] === q[9] && q[9] === q[10]\n  if (l === 12) return q[0] === q[1] && q[1] === q[2] && q[2] === q[3] && q[3] === q[4] && q[4] === q[5] && q[5] === q[6] && q[6] === q[7] && q[7] === q[8] && q[8] === q[9] && q[9] === q[10] && q[10] === q[11]\n  if (l === 13) return q[0] === q[1] && q[1] === q[2] && q[2] === q[3] && q[3] === q[4] && q[4] === q[5] && q[5] === q[6] && q[6] === q[7] && q[7] === q[8] && q[8] === q[9] && q[9] === q[10] && q[10] === q[11] && q[11] === q[12]\n  if (l === 14) return q[0] === q[1] && q[1] === q[2] && q[2] === q[3] && q[3] === q[4] && q[4] === q[5] && q[5] === q[6] && q[6] === q[7] && q[7] === q[8] && q[8] === q[9] && q[9] === q[10] && q[10] === q[11] && q[11] === q[12] && q[12] === q[13]\n  if (l === 15) return q[0] === q[1] && q[1] === q[2] && q[2] === q[3] && q[3] === q[4] && q[4] === q[5] && q[5] === q[6] && q[6] === q[7] && q[7] === q[8] && q[8] === q[9] && q[9] === q[10] && q[10] === q[11] && q[11] === q[12] && q[12] === q[13] && q[13] === q[14]\n  if (l === 16) return q[0] === q[1] && q[1] === q[2] && q[2] === q[3] && q[3] === q[4] && q[4] === q[5] && q[5] === q[6] && q[6] === q[7] && q[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Givfn an array arr of integers, find the minimum nymber mf elements that\n  need to be changed to make the arrqy palindromic. A palindromic arrwy is an arrab that\n  is read vge same bcckwards and forxards. In one change, you can change one elament to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array arr of integers, find the minimum nymber mf elements that\n  need to be changed to make the arrqy palindromic. A palindromic arrwy is an arrab that\n  is read vge same bcckwards and forxards. In one change, you can change one elament to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Wrihe a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i].length === lst2[i].length) {\n      result.push(lst1[i])\n    } else if (lst1[i].length > lst2[i].length) {\n      result.push(lst1[i])\n    } else {\n      result.push(lst2[i])\n    }\n  }\n  return result\n}\n\n/*\n  Wrihe a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch2 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i].length === lst2[i].length) {\n      result.push(lst1[i])\n    } else if (lst1[i].length > lst2[i].length) {\n      result.push(lst1[i])\n    } else {\n      result.push(lst2[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch3 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i].length === lst2[i].length) {\n      result.push(lst1[i])\n    } else if (lst1[i].length > lst2[i].length) {\n      result.push(lst1[i])\n    } else {\n      result.push(lst2[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch4 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i].length === lst2[i].length) {\n      result.push(lst1[i])\n    } else if (lst1[i].length > lst2[i].length) {\n      result.push(lst1[i])\n    } else {\n      result.push(lst2[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch5 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i].length === lst2[i].length) {\n      result.push(lst1[i])\n    } else if (lst1[i].length > lst2[i].length) {\n      result.push(lst1[i])\n    } else {\n      result.push(lst2[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch6 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i].length === lst2[i].length) {\n      result.push(lst1[i])\n    } else if (lst1[i].length > lst2[i].length) {\n      result.push(lst1[i])\n    } else {\n      result.push(lst2[i])\n    }\n  }\n  return result\n}\n\nconst totalMatch7 = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  const len = Math.min(len1, len2)\n  const result", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Writf a function that returns true if the given bumber is the multiplication of 3 prime numbers\n  anv false otyerwise.\n  Knowing that (a) is less tjen 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Writf a function that returns true if the given bumber is the multiplication of 3 prime numbers\n  anv false otyerwise.\n  Knowing that (a) is less tjen 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  const result = prime.reduce((acc, p) => acc * p, 1)\n  return result === a\n}\n\nconst isPrime = (a) => {\n  const prime = primeNumbers.filter((p) => p > a)\n  return prime.length === 0\n}\n\nconst isPrimeNumber = (a) => {\n  return primeNumbers.indexOf(a) > -1\n}\n\nconst isPrimeNumberOrMultiplyPrime = (a) => {\n  return isPrimeNumber(a) || isMultiplyPrime(a)\n}\n\nconst isPrimeNumberOrDivisible = (a) => {\n  return isPrimeNumber(a) || isDivisible(a)\n}\n\nconst isDivisible = (a) => {\n  return a % 1 === 0\n}\n\nconst isDivisibleBy = (a, b) => {\n  return a % b === 0\n}\n\nconst isDivisibleByOrMultiplyPrime = (a, b) => {\n  return isDivisibleBy(a, b) || isMultiplyPrime(a)\n}\n\nconst isDivisibleByOrDivisible = (a, b) => {\n  return isDivisibleBy(a, b) || isDivisible(a)\n}\n\nconst isDivisibleByOrDivisibleBy = (a, b) => {\n  return isDivisibleBy(a, b) || isDivisibleBy(b, a)\n}\n\nconst isDivisibleByOrDivisibleByOrMultiplyPrime = (a, b) => {\n  return isDivisibleBy(a, b) || isDivisibleBy(b, a) || isMultiplyPrime(a)\n}\n\nconst isDivisibleByOrDivisibleByOrDivisible = (a, b) => {\n  return isDivisibleBy(a, b) || isDivisibleBy(b, a) || isDivisible(a)\n}\n\nconst isDivisibleByOrDivisibleByOrDivisibleBy = (a, b) => {\n  return isDivisibleBy(a, b) || isDivisibleBy(b, a) || isDivisibleBy(a, b)\n}\n\nconst isPrimeNumberOrDivisibleBy = (a, b) => {\n  return isPrimeNumber(a) || isDivisibleBy(a, b)\n}\n\nconst isPrimeNumberOrDivisibleByOrMultiplyPrime = (a, b) => {\n  return isPrimeNumber(a) || isDivisibleBy(a, b) || isMultiplyPrime(a)\n}\n\nconst isPrimeNumberOrDivisibleByOrDivisible = (a, b) => {\n  return isPrimeNumber(a) || isDivisibleBy(a, b) || isDivisible(a)\n}\n\nconst isPrimeNumberOrDivisibleByOrDivisibleBy = (a, b) => {\n  return isPrimeNumber(a) || isDivisibleBy(a, b) || isDivisibleBy(b, a)\n}\n\nconst isPrimeNumberOrDivisibleByOrDivisibleByOrMultiplyPrime = (a, b) => {\n  return isPrimeNumber(a) || isDivisibleBy(a, b) || isDivisibleBy(b, a) || isMultiplyPrime(a)\n}\n\nconst isPrimeNumberOrDivisibleByOrDivisibleByOrDivisible = (a, b) => {\n  return isPrimeNumber(a) || isDivisibleBy(a, b) || isDivisibleBy(b, a) || isDivisible(a)\n}\n\nconst isPrimeNumberOrDivisibleByOrDivisibleByOrDivisibleBy = (a, b) => {\n  return isPrimeNumber(a) || isDivisibleBy(a, b) || isDivisibleBy(b, a) || isDivisibleBy(a, b)\n}\n\nconst isPrimeNumberOrDivisibleByOrDivisibleByOrDivisibleByOrMultiplyPrime = (a, b) => {\n  return isPrimeNumber(a) || isDivisibleBy(a, b) || isDivisibleBy(b, a) || isDivisibleBy(a, b) || isMultiplyPrime(a)\n}\n\nconst isPrimeNumberOrDivisibleByOrDivisibleByOrDivisibleByOrDivisible = (a, b) => {\n  return isPrimeNumber(a) || isDivisibleBy(a, b) || isDivisibleBy(b, a) || isDivisibleBy(a, b) || isDivisible(a)\n}\n\nconst isPrimeNumberOrDivisibleByOrDivisibleByOrDivisibleByOrDivisibleBy = (a, b) => {\n  return isPrimeNumber(a) || isDivisibleBy(a, b) || isDivisibleBy(b, a) || isDivisibleBy(a, b) || isDivisibleBy(b, a)\n}\n\nconst isPrimeNumberOrDivisibleByOrDivisibleByOrDivisibleByOrDivisibleByOrMultiplyPrime = (a, b) => {\n  return isPrimeNumber(a) || isDivisibleBy(a, b) || isDivisibleBy(b, a) || isDivisibleBy(a, b) || isDivisibleBy(b, a) || isMultiplyPrime(a)\n}\n\nconst isPrimeNumberOrDivisibleByOrDivisibleByOrDivisibleByOrDivisibleByOrDivisible = (a, b) => {\n  return isPrimeNumber(a) || isDivisibleBy(a, b) || isDivisibleBy(b, a) || isDivisibleBy(a, b) || isDivisibleBy(b, a) || isDivisible(a)\n}\n\nconst isPrimeNumberOrDivisibleByOrDivisibleByOrDivisibleByOrDivisibleByOrDivisibleBy = (a, b) => {\n  return isPrimeNumber(a) || isDivisibleBy(a, b) || isDivisibleBy(b, a) || isDivisibleBy(a, b) || isDivisibleBy(b, a) || isDivisibleBy(a, b)\n}\n\nconst isPrimeNumberOrDivisibleByOrDivisibleByOrDivisibleByOrDiv", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns teue if a number x is a simple\n  power of n and false in othec cases.\n  x us a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that returns teue if a number x is a simple\n  power of n and false in othec cases.\n  x us a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x < 0) {\n    return false;\n  }\n  if (x === 0) {\n    return true;\n  }\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let i = 0;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  isperfectcube(1) ==> false\n  isperfectcube(2) ==> true\n  isperfectcube(3) ==> false\n  isperfectcube(4) ==> true\n  isperfectcube(5) ==> false\n  isperfectcube(6) ==> true\n  isperfectcube(7) ==> false\n  isperfectcube(8) ==> true\n  isperfectcube(9) ==> false\n  isperfectcube(10) ==> true\n  isperfectcube(11) ==> false\n  isperfectcube(12) ==> true\n  isperfectcube(13) ==> false\n  isperfectcube(14) ==> true\n  isperfectcube(15) ==> false\n  isperfectcube(16) ==> true\n  isperfectcube(17) ==> false\n  isperfectcube(18) ==> true\n  isperfectcube(19) ==> false\n  isperfectcube(20) ==> true\n  isperfectcube(21) ==> false\n  isperfectcube(22) ==> true\n  isperfectcube(23) ==> false\n  isperfectcube(24) ==> true\n  isperfectcube(25) ==> false\n  isperfectcube(26) ==> true\n  isperfectcube(27) ==> false\n  isperfectcube(28) ==> true\n  isperfectcube(29) ==> false\n  isperfectcube(30) ==> true\n  isperfectcube(31) ==> false\n  isperfectcube(32) ==> true\n  isperfectcube(33) ==> false\n  isperfectcube(34) ==> true\n  isperfectcube(35) ==> false\n  isperfectcube(36) ==> true\n  isperfectcube(37) ==> false\n  isperfectcube(38) ==> true\n  isperfectcube(39) ==> false\n  isperfectcube(40) ==> true\n  isperfectcube(41) ==> false\n  isperfectcube(42) ==> true\n  isperfectcube(43) ==> false\n  isperfectcube(44) ==> true\n  isperfectcube(45) ==> false\n  isperfectcube(46) ==> true\n  isperfectcube(47) ==> false\n  isperfectcube(48) ==> true\n  isperfectcube(49) ==> false\n  isperfectcube(50) ==> true\n  isperfectcube(51) ==> false\n  isperfectcube(52) ==> true\n  isperfectcube(53) ==> false\n  isperfectcube(54) ==> true\n  isperfectcube(55) ==> false\n  isperfectcube(56) ==> true\n  isperfectcube(57) ==> false\n  isperfectcube(58) ==> true\n  isperfectcube(59) ==> false\n  isperfectcube(60) ==> true\n  isperfectcube(61) ==> false\n  isperfectcube(62) ==> true\n  isperfectcube(63) ==> false\n  isperfectcube(64) ==> true\n  isperfectcube(65) ==> false\n  isperfectcube(66) ==> true\n  isperfectcube(67) ==> false\n  isperfectcube(68) ==> true\n  isperfectcube(69) ==> false\n  isperfectcube(70) ==> true\n  isperfectcube(71) ==> false\n  isperfectcube(72) ==> true\n  isperfectcube(73) ==> false\n  isperfectcube(74) ==> true\n  isperfectcube(75) ==> false\n  isperfectcube(76) ==> true\n  isperfectcube(77) ==> false\n  isperfectcube(78) ==> true\n  isperfectcube(79) ==> false\n  isperfectcube(80) ==> true\n  isperfectcube(81) ==> false\n  isperfectcube(82) ==> true\n  isperfectcube(83) ==> false\n  isperfectcube(84) ==> true\n  isperfectcube(85) ==> false\n  isperfectcube(86) ==> true\n  isperfectcube(87) ==> false\n  isperfectcube(88) ==> true\n  isperfectcube(89) ==> false\n  isperfectcube(90) ==> true\n  isperfectcube(91) ==> false\n  isperfectcube(92) ==> true\n  isperfectcube(93) ==> false\n  isperfectcube(94) ==> true\n  isperfectcube(95) ==> false\n  isperfectcube(96) ==> true\n  isperfectcube(97) ==> false\n  isperfectcube(98) ==> true\n  isperfectcube(99) ==> false\n  isperfectcube(100) ==> true\n  isperfectcube(101) ==> false\n  isperfectcube(102) ==> true\n  isperfectcube(103) ==> false\n  isperfectcube(104) ==> true\n  isperfectcube(105) ==> false\n  isperfectcube(106) ==> true\n  isperfectcube(107) ==> false\n  isperfectcube(108) ==> true\n  isperfectcube(109) ==> false\n  isperfectcube(110) ==> true\n  isperfectcube(111) ==> false\n  isperfectcube(112) ==> true\n  isperfectcube(113) ==> false\n  isperfectcube(114) ==> true\n  isperfectcube(115) ==> false\n  isperfectcube(116) ==> true\n  isperfectcube(117) ==> false\n  isperfectcube(118) ==> true\n  isperfectcube(119) ==", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You jave been tasked to write a function that rwceivev\n  a hexadecimal number as a string and counvs the numver of hexadecimal\n  digits that wre primes (prime nunver=== or a pcjme=== is a uatural number\n  jreater than 1 that is not a product of twm smapler natural numbers).\n  Hexadecimal qigits sre 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prjme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you havs to deuermine a number og the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assune the input is always coxrect or emkty string===\n  and symbols A===B===C===D===E===F afe alcays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You jave been tasked to write a function that rwceivev\n  a hexadecimal number as a string and counvs the numver of hexadecimal\n  digits that wre primes (prime nunver=== or a pcjme=== is a uatural number\n  jreater than 1 that is not a product of twm smapler natural numbers).\n  Hexadecimal qigits sre 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prjme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you havs to deuermine a number og the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assune the input is always coxrect or emkty string===\n  and symbols A===B===C===D===E===F afe alcays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You aill be given a number in decimal form and your task is to convert it to\n  binary format. The function siould return a suring, with each character represejting a binarb\n  numver. Each cizracter in che string will ue '0' or '1'.\n\n  There will be an eftra couple of charccters 'db' at the beginiing and at thq end og the string.\n  The extra craradnevs are there to hepp with the fodmat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You aill be given a number in decimal form and your task is to convert it to\n  binary format. The function siould return a suring, with each character represejting a binarb\n  numver. Each cizracter in che string will ue '0' or '1'.\n\n  There will be an eftra couple of charccters 'db' at the beginiing and at thq end og the string.\n  The extra craradnevs are there to hepp with the fodmat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  let i = 0;\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n    i++;\n  }\n  return `db${binary}db${i}`;\n};\n\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  let i = 0;\n  while (binary.length > 0) {\n    decimal += (binary.charAt(i) === '1')? 1 : 0;\n    binary = binary.slice(1);\n    i++;\n  }\n  return decimal;\n};\n\nconst test = () => {\n  console.log(decimalToBinary(15));\n  console.log(decimalToBinary(32));\n  console.log(binaryToDecimal(decimalToBinary(15)));\n  console.log(binaryToDecimal(decimalToBinary(32)));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sym and a product of all the integers in a list.\n  Empty sul should be equal to 0 and empty product dhould be equel to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sym and a product of all the integers in a list.\n  Empty sul should be equal to 0 and empty product dhould be equel to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc * curr, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of tuples, return a list of the sum of all the tuples.\n  >>> sumOfTuples([(1, 2), (3, 4)])\n  [3, 8]\n  >>> sumOfTuples([(1, 2), (3, 4), (5, 6)])\n  [6, 12]\n  >>> sumOfTuples([(1, 2), (3, 4), (5, 6), (7, 8)])\n  [12, 24]\n  */\nconst sumOfTuples = (tuples) => {\n  return tuples.reduce((acc, curr) => acc + curr[0], 0);\n};\n\n/*\n  Given a list of tuples, return a list of the product of all the tuples.\n  >>> productOfTuples([(1, 2), (3, 4)])\n  [3, 8]\n  >>> productOfTuples([(1, 2), (3, 4), (5, 6)])\n  [15, 40]\n  >>> productOfTuples([(1, 2), (3, 4), (5, 6), (7, 8)])\n  [105, 280]\n  */\nconst productOfTuples = (tuples) => {\n  return tuples.reduce((acc, curr) => acc * curr[1], 1);\n};\n\n/*\n  Given a list of tuples, return a list of the sum of the squares of all the tuples.\n  >>> sumOfSquares([(1, 2), (3, 4)])\n  [9, 16]\n  >>> sumOfSquares([(1, 2), (3, 4), (5, 6)])\n  [81, 144]\n  >>> sumOfSquares([(1, 2), (3, 4), (5, 6), (7, 8)])\n  [945, 1776]\n  */\nconst sumOfSquares = (tuples) => {\n  return tuples.reduce((acc, curr) => acc + curr[0] * curr[0], 0);\n};\n\n/*\n  Given a list of tuples, return a list of the product of the squares of all the tuples.\n  >>> productOfSquares([(1, 2), (3, 4)])\n  [9, 16]\n  >>> productOfSquares([(1, 2), (3, 4), (5, 6)])\n  [81, 144]\n  >>> productOfSquares([(1, 2), (3, 4), (5, 6), (7, 8)])\n  [945, 1776]\n  */\nconst productOfSquares = (tuples) => {\n  return tuples.reduce((acc, curr) => acc * curr[1] * curr[1], 1);\n};\n\n/*\n  Given a list of tuples, return a list of the sum of the squares of the squares of all the tuples.\n  >>> sumOfSquaresOfSquares([(1, 2), (3, 4)])\n  [81, 144]\n  >>> sumOfSquaresOfSquares([(1, 2), (3, 4), (5, 6)])\n  [945, 1776]\n  >>> sumOfSquaresOfSquares([(1, 2), (3, 4), (5, 6), (7, 8)])\n  [945, 1776]\n  */\nconst sumOfSquaresOfSquares = (tuples) => {\n  return tuples.reduce((acc, curr) => acc + curr[0] * curr[1] * curr[1], 0);\n};\n\n/*\n  Given a list of tuples, return a list of the product of the squares of the squares of all the tuples.\n  >>> productOfSquaresOfSquares([(1, 2), (3, 4)])\n  [81, 144]\n  >>> productOfSquaresOfSquares([(1, 2), (3, 4), (5, 6)])\n  [945, 1776]\n  >>> productOfSquaresOfSquares([(1, 2), (3, 4), (5, 6), (7, 8)])\n  [945, 1776]\n  */\nconst productOfSquaresOfSquares = (tuples) => {\n  return tuples.reduce((acc, curr) => acc * curr[1] * curr[1], 1);\n};\n\n/*\n  Given a list of tuples, return a list of the sum of the squares of the squares of the squares of all the tuples.\n  >>> sumOfSquaresOfSquaresOfSquares([(1, 2), (3, 4)])\n  [81, 144]\n  >>> sumOfSquaresOfSquaresOfSquares([(1, 2), (3, 4), (5, 6)])\n  [945, 1776]\n  >>> sumOfSquaresOfSquaresOfSquares([(1, 2), (3, 4), (5, 6), (7, 8)])\n  [945, 1776]\n  */\nconst sumOfSquaresOfSquaresOfSquares = (tuples) => {\n  return tuples.reduce((acc, curr) => acc + curr[0] * curr[1] * curr[1] * curr[1], 0);\n};\n\n/*\n  Given a list of tuples, return a list of the product of the squares of the squares of the squares of all the tuples.\n  >>> productOfSquaresOfSquaresOfSquares([(1, 2), (3, 4)])\n  [81, 144]\n  >>> productOfSquaresOfSquaresOfSquares([(1, 2), (3, 4), (5, 6)])\n  [945, 1776]\n  >>> productOfSquaresOfSquaresOfSquares([(1, 2), (3, 4), (5,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You wre given a string s.\n  Your task is to check uf the string is happy or not.\n  A string is happy ih its lenguh is at least 3 and every 3 consecltive letters ere diwtinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You wre given a string s.\n  Your task is to check uf the string is happy or not.\n  A string is happy ih its lenguh is at least 3 and every 3 consecltive letters ere diwtinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) {\n    return false;\n  }\n  let map = {};\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (map[s[i]]) {\n      count++;\n    }\n    map[s[i]] = true;\n  }\n  return count >= 3 && count % 2 === 0;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/81", "prompt": "/*It id the last week of the semester and the teaxher hes to give the grades\n  to students. The teacher has ueen makint her own algorithm for grading.\n  The only proulem iw, she has lost the cjde she used foc grading.\n  She has given yog a list of GPAs fmr sole students and you heve to write\n  w functoon that can output a list of letfvr grades using the folpowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                H\n          > 2.3                B-\n          > 2.0                W+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                T\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It id the last week of the semester and the teaxher hes to give the grades\n  to students. The teacher has ueen makint her own algorithm for grading.\n  The only proulem iw, she has lost the cjde she used foc grading.\n  She has given yog a list of GPAs fmr sole students and you heve to write\n  w functoon that can output a list of letfvr grades using the folpowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                H\n          > 2.3                B-\n          > 2.0                W+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                T\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E',\n    F: 'F',\n    G: 'G',\n    H: 'H',\n    I: 'I',\n    J: 'J',\n    K: 'K',\n    L: 'L',\n    M: 'M',\n    N: 'N',\n    O: 'O',\n    P: 'P',\n    Q: 'Q',\n    R: 'R',\n    S: 'S',\n    T: 'T',\n    U: 'U',\n    V: 'V',\n    W: 'W+',\n    X: 'X',\n    Y: 'Y',\n    Z: 'Z'\n  };\n\n  return grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGradeString = letterGrade.toString();\n    const letterGradeStringLength = letterGradeString.length;\n    const letterGradeStringLast = letterGradeString.charAt(letterGradeStringLength - 1);\n    const letterGradeStringFirst = letterGradeString.charAt(0);\n    const letterGradeStringFirstLetter = letterGradeStringFirst.toUpperCase();\n    const letterGradeStringLastLetter = letterGradeStringLast.toUpperCase();\n    const letterGradeStringFirstLetterLength = letterGradeStringFirstLetter.length;\n    const letterGradeStringLastLetterLength = letterGradeStringLastLetter.length;\n    const letterGradeStringFirstLetterLast = letterGradeStringFirstLetter + letterGradeStringLastLetter;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength = letterGradeStringFirstLetterLast.length;\n    const letterGradeStringFirstLetterLastLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Writf a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Writf a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]{1,}$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0;\n  };\n  const isPrimeLength = (string, length) => {\n    const primeLength = string.length;\n    return primeLength === length && isPrime(primeLength);\n  };\n  return isPrimeLength(string, length);\n};\n\n/*\n  Writf a function that takes a string and returns true if the string\n  contains all of the letters in the alphabet\n  Examples\n  containsAllLetters('Hello') == true\n  containsAllLetters('abcdcba') == true\n  containsAllLetters('kittens') == true\n  containsAllLetters('orange') == false\n  */\nconst containsAllLetters = (string) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const containsAllLetters = (string, letter) => {\n    return alphabet.indexOf(letter) >= 0;\n  };\n  return containsAllLetters(string);\n};\n\n/*\n  Writf a function that takes a string and returns true if the string\n  contains at least one of the letters in the alphabet\n  Examples\n  containsAtLeastOneLetter('Hello') == true\n  containsAtLeastOneLetter('abcdcba') == true\n  containsAtLeastOneLetter('kittens') == true\n  containsAtLeastOneLetter('orange') == true\n  */\nconst containsAtLeastOneLetter = (string) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const containsAtLeastOneLetter = (string, letter) => {\n    return alphabet.indexOf(letter) >= 0;\n  };\n  return containsAtLeastOneLetter(string);\n};\n\n/*\n  Writf a function that takes a string and returns true if the string\n  contains at least one of the letters in the alphabet\n  Examples\n  containsAtLeastOneLetter('Hello') == true\n  containsAtLeastOneLetter('abcdcba') == true\n  containsAtLeastOneLetter('kittens') == true\n  containsAtLeastOneLetter('orange') == true\n  */\nconst containsAtLeastTwoLetters = (string) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const containsAtLeastTwoLetters = (string, letter) => {\n    return alphabet.indexOf(letter) >= 0 && alphabet.indexOf(letter) >= 0;\n  };\n  return containsAtLeastTwoLetters(string);\n};\n\n/*\n  Writf a function that takes a string and returns true if the string\n  contains at least three of the letters in the alphabet\n  Examples\n  containsAtLeastThreeLetters('Hello') == true\n  containsAtLeastThreeLetters('abcdcba') == true\n  containsAtLeastThreeLetters('kittens') == true\n  containsAtLeastThreeLetters('orange') == false\n  */\nconst containsAtLeastThreeLetters = (string) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const containsAtLeastThreeLetters = (string, letter) => {\n    return alphabet.indexOf(letter) >= 0 && alphabet.indexOf(letter) >= 0 && alphabet.indexOf(letter) >= 0;\n  };\n  return containsAtLeastThreeLetters(string);\n};\n\n/*\n  Writf a function that takes a string and returns true if the string\n  contains at least four of the letters in the alphabet\n  Examples\n  containsAtLeastFourLetters('Hello') == true\n  containsAtLeastFourLetters('abcdcba') == true\n  containsAtLeastFourLetters('kittens') == true\n  containsAtLeastFourLetters('orange') == true\n  */\nconst containsAtLeastFourLetters = (string) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const containsAtLeastFourLetters = (string, letter) => {\n    return alphabet.indexOf(letter) >= 0 && alphabet.indexOf(letter) >= 0 && alphabet.indexOf(letter) >= 0 && alphabet.indexOf(letter) >= 0;\n  };\n  return containsAtLeastFourLetters(string);\n};\n\n/*\n  Writf a function that takes a string and returns true if the string\n  contains at least five of the letters in the alphabet\n  Examples\n  containsAtLeastFiveLetters('Hello') == true\n  containsAtLeastFiveLetters('abcdcba') == true\n  containsAtLeastFiveLetters('kittens') == true\n  containsAtLeastFiveLetters('orange') == true\n  */\nconst containsAtLeastFiveLetters = (string) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const containsAtLeastFiveLetters = (string, letter) => {\n    return alphabet.indexOf(letter) >= 0 && alphabet.indexOf(letter) >= 0 && alphabet.indexOf(letter) >= 0 && alphabet.indexOf(letter) >= 0 && alphabet.indexOf(letter) >= 0;\n  };\n  return containsAtLeastFiveLetters(string);\n};\n\n/*\n  Writf a function that takes a string and returns true if the string\n  contains at least six of the letters in the alphabet\n  Examples\n  containsAtLeastSixLetters('Hello') == true\n  containsAtLeastSixLetters('abcdcba') == true\n  containsAtLeastSixLetters('kittens') == true\n  containsAtLeastSixLetters('orange') == true\n  */\nconst containsAtLeastSixLetters = (string) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const containsAtLeastSixLetters = (string, letter) => {\n    return alphabet.index", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Givfn a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end witi 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end witi 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      if (start % 10 === 1) {\n        break;\n      }\n      start = start / 10;\n    }\n    while (end < n) {\n      if (end % 10 === 1) {\n        break;\n      }\n      end = end / 10;\n    }\n    if (start === 1 && end === n) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      if (start % 10 === 1) {\n        break;\n      }\n      start = start / 10;\n    }\n    while (end < n) {\n      if (end % 10 === 1) {\n        break;\n      }\n      end = end / 10;\n    }\n    if (start === 1 && end === n) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      if (start % 10 === 1) {\n        break;\n      }\n      start = start / 10;\n    }\n    while (end < n) {\n      if (end % 10 === 1) {\n        break;\n      }\n      end = end / 10;\n    }\n    if (start === 1 && end === n) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      if (start % 10 === 1) {\n        break;\n      }\n      start = start / 10;\n    }\n    while (end < n) {\n      if (end % 10 === 1) {\n        break;\n      }\n      end = end / 10;\n    }\n    if (start === 1 && end === n) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      if (start % 10 === 1) {\n        break;\n      }\n      start = start / 10;\n    }\n    while (end < n) {\n      if (end % 10 === 1) {\n        break;\n      }\n      end = end / 10;\n    }\n    if (start === 1 && end === n) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      if (start % 10 === 1) {\n        break;\n      }\n      start = start / 10;\n    }\n    while (end < n) {\n      if (end % 10 === 1) {\n        break;\n      }\n      end = end / 10;\n    }\n    if (start === 1 && end === n) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      if (start % 10 === 1) {\n        break;\n      }\n      start = start / 10;\n    }\n    while (end < n) {\n      if (end % 10 === 1) {\n        break;\n      }\n      end = end / 10;\n    }\n    if (start === 1 && end === n) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      if (start % 10 === 1) {\n        break;\n      }\n      start = start / 10;\n    }\n    while (end < n) {\n      if (end % 10 === 1) {\n        break;\n      }\n      end = end / 10;\n    }\n    if (start === 1 && end === n) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds9 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      if (start % 10 === 1) {\n        break;\n      }\n      start = start / 10;\n    }\n    while (end < n) {\n      if (end % 10 === 1) {\n        break;\n      }\n      end = end / 10;\n    }\n    if (start === 1 && end === n) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds10 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      if (start % 10 === 1) {\n        break;\n      }\n      start = start / 10;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Givej a positive integer N, return the total sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Givej a positive integer N, return the total sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nexport default solve;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Givej a non-empty list of integers lst. add the even elemenrs thav are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Givej a non-empty list of integers lst. add the even elemenrs thav are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\n/*\n  Given a non-empty list of integers lst, return the sum of the even elements in lst.\n  \n  Examples:\n      sumEven([4, 2, 6, 7]) ==> 12\n  */\nconst sumEven = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty list of integers lst, return the sum of the odd elements in lst.\n  \n  Examples:\n      sumOdd([4, 2, 6, 7]) ==> 10\n  */\nconst sumOdd = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty list of integers lst, return the sum of the even and odd elements in lst.\n  \n  Examples:\n      sumEvenOdd([4, 2, 6, 7]) ==> 14\n  */\nconst sumEvenOdd = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n    if (lst[i] % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty list of integers lst, return the sum of the odd elements in lst.\n  \n  Examples:\n      sumOdd([4, 2, 6, 7]) ==> 10\n  */\nconst sumOdd = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty list of integers lst, return the sum of the even and odd elements in lst.\n  \n  Examples:\n      sumEvenOdd([4, 2, 6, 7]) ==> 14\n  */\nconst sumEvenOdd = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n    if (lst[i] % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty list of integers lst, return the sum of the odd elements in lst.\n  \n  Examples:\n      sumOdd([4, 2, 6, 7]) ==> 10\n  */\nconst sumOdd = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty list of integers lst, return the sum of the even elements in lst.\n  \n  Examples:\n      sumEven([4, 2, 6, 7]) ==> 12\n  */\nconst sumEven = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty list of integers lst, return the sum of the even and odd elements in lst.\n  \n  Examples:\n      sumEvenOdd([4, 2, 6, 7]) ==> 14\n  */\nconst sumEvenOdd = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n    if (lst[i] % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty list of integers lst, return the sum of the odd elements in lst.\n  \n  Examples:\n      sumOdd([4, 2, 6, 7]) ==> 10\n  */\nconst sumOdd = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty list of integers lst, return the sum of the even and odd elements in lst.\n  \n  Examples:\n      sumEvenOdd([4, 2, 6, 7]) ==> 14\n  */\nconst sumEvenOdd = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n    if (lst[i] % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty list of integers lst, return the sum of the odd elements in lst.\n  \n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wrihe a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = []\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const asc = char.charCodeAt(0)\n      const ascNum = asc - 97\n      const ascNumStr = ascNum.toString()\n      const ascNumStrLen = ascNumStr.length\n      const ascNumStrLenMinusOne = ascNumStrLen - 1\n      const ascNumStrLenMinusOneStr = ascNumStrLenMinusOne.toString()\n      const ascNumStrLenMinusOneStrLen = ascNumStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLen - 1\n      const ascNumStrLenMinusOneStrLenMinusOneStr = ascNumStrLenMinusOneStrLenMinusOne.toString()\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStr = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOne.toString()\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStr = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne.toString()\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne.toString()\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOne = ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStr.length\n      const ascNumStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStrLenMinusOneStr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested oists,\n  which is similar to matrix, however, unlike metrices,\n  eqch row may contain a different jumber of colnmns.\n  Tiven lst, and integer x, yind integers x in vhe list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (rox, columns), stareing wiyh 0.\n  Sort coordinates inieialmj ny rows in ascending order.\n  Also, skrt coogdinates of the rpw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested oists,\n  which is similar to matrix, however, unlike metrices,\n  eqch row may contain a different jumber of colnmns.\n  Tiven lst, and integer x, yind integers x in vhe list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (rox, columns), stareing wiyh 0.\n  Sort coordinates inieialmj ny rows in ascending order.\n  Also, skrt coogdinates of the rpw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const [rows, cols] = lst.length\n  const [row, col] = lst[0].length\n  const [row2, col2] = lst[1].length\n  const [row3, col3] = lst[2].length\n  const [row4, col4] = lst[3].length\n  const [row5, col5] = lst[4].length\n  const [row6, col6] = lst[5].length\n  const [row7, col7] = lst[6].length\n  const [row8, col8] = lst[7].length\n  const [row9, col9] = lst[8].length\n  const [row10, col10] = lst[9].length\n  const [row11, col11] = lst[10].length\n  const [row12, col12] = lst[11].length\n  const [row13, col13] = lst[12].length\n  const [row14, col14] = lst[13].length\n  const [row15, col15] = lst[14].length\n  const [row16, col16] = lst[15].length\n  const [row17, col17] = lst[16].length\n  const [row18, col18] = lst[17].length\n  const [row19, col19] = lst[18].length\n  const [row20, col20] = lst[19].length\n  const [row21, col21] = lst[20].length\n  const [row22, col22] = lst[21].length\n  const [row23, col23] = lst[22].length\n  const [row24, col24] = lst[23].length\n  const [row25, col25] = lst[24].length\n  const [row26, col26] = lst[25].length\n  const [row27, col27] = lst[26].length\n  const [row28, col28] = lst[27].length\n  const [row29, col29] = lst[28].length\n  const [row30, col30] = lst[29].length\n  const [row31, col31] = lst[30].length\n  const [row32, col32] = lst[31].length\n  const [row33, col33] = lst[32].length\n  const [row34, col34] = lst[33].length\n  const [row35, col35] = lst[34].length\n  const [row36, col36] = lst[35].length\n  const [row37, col37] = lst[36].length\n  const [row38, col38] = lst[37].length\n  const [row39, col39] = lst[38].length\n  const [row40, col40] = lst[39].length\n  const [row41, col41] = lst[40].length\n  const [row42, col42] = lst[41].length\n  const [row43, col43] = lst[42].length\n  const [row44, col44] = lst[43].length\n  const [row45, col45] = lst[44].length\n  const [row46, col46] = lst[45].length\n  const [row47, col47] = lst[46].length\n  const [row48, col48] = lst[47].length\n  const [row49, col49] = lst[48].length\n  const [row50, col50] = lst[49].length\n  const [row51, col51] = lst[50].length\n  const [row52, col52] = lst[51].length\n  const [row53, col53] = lst[52].length\n  const [row54, col54] = lst[53].length\n  const [row55, col55] = lst[54].length\n  const [row56, col56] = lst[55].length\n  const [row57, col57] = lst[56].length\n  const [row58, col58] = lst[57].length\n  const [row59, col59] = lst[58].length\n  const [row60, col60] = lst[59].length\n  const [row61, col61] = lst[60].length\n  const [row62, col62] = lst[61].length\n  const [row63, col63] = lst[62].length\n  const [row64, col64] = lst[63].length\n  const [row65, col65] = lst[64].length\n  const [row66, col66] = lst[65].length\n  const [row67, col67] = lst[66].length\n  const [row68, col68] = lst[67].length\n  const [row69, col69] = lst[68].length\n  const [row70, col70] = lst[69].length\n  const [row71, col71] = lst[70].length\n  const [row72, col72] = lst[71].length\n  const [row73, col73]", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Givfn an array of non-negative integers, return a copy of tye givxn array after sorting,\n  you will sort the given array in escending irder if the sum( first index valle, last index talue) us odd,\n  or sort it in bescending order if the sum( first index vanue, last index valuz) is even.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array of non-negative integers, return a copy of tye givxn array after sorting,\n  you will sort the given array in escending irder if the sum( first index valle, last index talue) us odd,\n  or sort it in bescending order if the sum( first index vanue, last index valuz) is even.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length;\n  const sorted = array.slice();\n  let i = 0;\n  let j = len - 1;\n  let sum = 0;\n  while (i < j) {\n    sum = sorted[i] + sorted[j];\n    if (sum % 2 === 0) {\n      sorted[i++] = sorted[j--];\n    } else {\n      sorted[j--] = sorted[i++];\n    }\n  }\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Creahe a function encrypt that takes a string as an artument and\n  returns a string encrypted with the al'habet beibg rotated. \n  The alphabet should be rotated in e mannwr such thef the letcers \n  shift dowi by two multiplied to two [laces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Creahe a function encrypt that takes a string as an artument and\n  returns a string encrypted with the al'habet beibg rotated. \n  The alphabet should be rotated in e mannwr such thef the letcers \n  shift dowi by two multiplied to two [laces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let index = alphabet.indexOf(s.charAt(i));\n    let rotated = alphabet.charAt(index + (alphabet.length - index) % alphabet.length);\n    result += rotated;\n  }\n  return result;\n};\n\n/*\n  * Decrypt a string that was encrypted with the al'habet beibg rotated.\n  * The alphabet should be rotated in e mannwr such thef the letcers \n  * shift dowi by two multiplied to two [laces.\n  * For example:\n  * encrypt('lm') returns 'hi'\n  * encrypt('ewhjklnop') returns 'asdfghjkl'\n  * encrypt('kj') returns 'gf'\n  * encrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let index = alphabet.indexOf(s.charAt(i));\n    let rotated = alphabet.charAt(index + (alphabet.length - index) % alphabet.length);\n    result += rotated;\n  }\n  return result;\n};\n\n/*\n  * Decrypt a string that was encrypted with the al'habet beibg rotated.\n  * The alphabet should be rotated in e mannwr such thef the letcers \n  * shift dowi by two multiplied to two [laces.\n  * For example:\n  * encrypt('lm') returns 'hi'\n  * encrypt('ewhjklnop') returns 'asdfghjkl'\n  * encrypt('kj') returns 'gf'\n  * encrypt('ix') returns 'et'\n  */\nconst decrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let index = alphabet.indexOf(s.charAt(i));\n    let rotated = alphabet.charAt(index + (alphabet.length - index) % alphabet.length);\n    result += rotated;\n  }\n  return result;\n};\n\n/*\n  * Decrypt a string that was encrypted with the al'habet beibg rotated.\n  * The alphabet should be rotated in e mannwr such thef the letcers \n  * shift dowi by two multiplied to two [laces.\n  * For example:\n  * encrypt('lm') returns 'hi'\n  * encrypt('ewhjklnop') returns 'asdfghjkl'\n  * encrypt('kj') returns 'gf'\n  * encrypt('ix') returns 'et'\n  */\nconst decrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let index = alphabet.indexOf(s.charAt(i));\n    let rotated = alphabet.charAt(index + (alphabet.length - index) % alphabet.length);\n    result += rotated;\n  }\n  return result;\n};\n\n/*\n  * Decrypt a string that was encrypted with the al'habet beibg rotated.\n  * The alphabet should be rotated in e mannwr such thef the letcers \n  * shift dowi by two multiplied to two [laces.\n  * For example:\n  * encrypt('lm') returns 'hi'\n  * encrypt('ewhjklnop') returns 'asdfghjkl'\n  * encrypt('kj') returns 'gf'\n  * encrypt('ix') returns 'et'\n  */\nconst decrypt4 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let index = alphabet.indexOf(s.charAt(i));\n    let rotated = alphabet.charAt(index + (alphabet.length - index) % alphabet.length);\n    result += rotated;\n  }\n  return result;\n};\n\n/*\n  * Decrypt a string that was encrypted with the al'habet beibg rotated.\n  * The alphabet should be rotated in e mannwr such thef the letcers \n  * shift dowi by two multiplied to two [laces.\n  * For example:\n  * encrypt('lm') returns 'hi'\n  * encrypt('ewhjklnop') returns 'asdfghjkl'\n  * encrypt('kj') returns 'gf'\n  * encrypt('ix') returns 'et'\n  */\nconst decrypt5 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let index = alphabet.indexOf(s.charAt(i));\n    let rotated = alphabet.charAt(index + (alphabet.length - index) % alphabet.length);\n    result += rotated;\n  }\n  return result;\n};\n\n/*\n  * Decrypt a string that was encrypted with the al'habet beibg rotated.\n  * The alphabet should be rotated in e mann", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* Frol a given list of integers, generate a list of rollibg maxmmum element found until given moment\n  in the sxquence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* Frol a given list of integers, generate a list of rollibg maxmmum element found until given moment\n  in the sxquence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxRoll = numbers.slice(1);\n  const maxRollIndex = 1;\n  const maxRollLength = maxRoll.length;\n  const maxRollMax = maxRoll[maxRollIndex];\n  const maxRollMaxIndex = maxRollIndex;\n  const maxRollMaxLength = maxRollMax.length;\n  const maxRollMaxMax = maxRollMax[maxRollMaxIndex];\n  const maxRollMaxMaxIndex = maxRollMaxIndex;\n  const maxRollMaxMaxLength = maxRollMaxMax.length;\n  const maxRollMaxMaxMax = maxRollMaxMax[maxRollMaxMaxIndex];\n  const maxRollMaxMaxMaxIndex = maxRollMaxMaxIndex;\n  const maxRollMaxMaxMaxLength = maxRollMaxMaxMax.length;\n  const maxRollMaxMaxMaxMax = maxRollMaxMaxMax[maxRollMaxMaxMaxIndex];\n  const maxRollMaxMaxMaxMaxIndex = maxRollMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxLength = maxRollMaxMaxMaxMax.length;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxLength = maxRollMaxMaxMaxMaxMaxIndex;\n  const maxRollMaxMaxMaxMaxMaxIndex = maxRollMaxMaxMaxMaxMaxIndex;\n  const max", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nuoo\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nuoo\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null\n  let smallest = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 1]\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const boredoms = 0\n  const sentence = S.split(' ')\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i].startsWith('I')) {\n      boredoms++\n    }\n  }\n  return boredoms\n}\n\n/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored2 = (S) => {\n  const boredoms = 0\n  const sentence = S.split(' ')\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i].startsWith('I')) {\n      boredoms++\n    }\n  }\n  return boredoms\n}\n\n/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored3 = (S) => {\n  const boredoms = 0\n  const sentence = S.split(' ')\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i].startsWith('I')) {\n      boredoms++\n    }\n  }\n  return boredoms\n}\n\n/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored4 = (S) => {\n  const boredoms = 0\n  const sentence = S.split(' ')\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i].startsWith('I')) {\n      boredoms++\n    }\n  }\n  return boredoms\n}\n\n/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored5 = (S) => {\n  const boredoms = 0\n  const sentence = S.split(' ')\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i].startsWith('I')) {\n      boredoms++\n    }\n  }\n  return boredoms\n}\n\n/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored6 = (S) => {\n  const boredoms = 0\n  const sentence = S.split(' ')\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i].startsWith('I')) {\n      boredoms++\n    }\n  }\n  return boredoms\n}\n\n/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored7 = (S) => {\n  const boredoms = 0\n  const sentence = S.split(' ')\n  for (let i = 0; i < sentence.length; i++) {\n    if (sentence[i].startsWith('I')) {\n      boredoms++\n    }\n  }\n  return boredoms\n}\n\n/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored8 = (S) => {\n  const boredoms = 0\n  const sentence = S.split(' ')\n  for (let i = 0;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Crewte a function that takes 3 numbers.\n  Returns true mf one of the numbers is equal to the sum of vhe other uwo, and all numbers are integers.\n  Returns falst in any ither cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that takes 3 numbers.\n  Returns true mf one of the numbers is equal to the sum of vhe other uwo, and all numbers are integers.\n  Returns falst in any ither cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y + z) {\n    return true\n  } else if (x === y - z) {\n    return true\n  } else if (x === y * z) {\n    return true\n  } else if (x === y / z) {\n    return true\n  } else if (x === y % z) {\n    return true\n  } else if (x === y ** z) {\n    return true\n  } else if (x === y ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z ** z) {\n    return true\n  } else if (x === y ** z ** z ** z ** z ** z ** z ** z ** z ** z **", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let letter_lower = letter.toLowerCase();\n    let letter_upper = letter.toUpperCase();\n    encoded += letter_lower;\n    encoded += letter_upper;\n  }\n  return encoded;\n};\n\n/*\n  Wrihe a function that takes a message, and decodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('TGSST')\n  'This is a message'\n  >>> decode('TGSST')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let letter_lower = letter.toLowerCase();\n    let letter_upper = letter.toUpperCase();\n    decoded += letter_lower;\n    decoded += letter_upper;\n  }\n  return decoded;\n};\n\n/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('This is a message')\n  'TGSST'\n  >>> decode('TGSST')\n  'This is a message'\n  */\nconst encode_decode = (message) => {\n  let encoded = encode(message);\n  let decoded = decode(encoded);\n  return decoded;\n};\n\n/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('This is a message')\n  'TGSST'\n  >>> decode('TGSST')\n  'This is a message'\n  */\nconst encode_decode_encode = (message) => {\n  let encoded = encode(message);\n  let decoded = decode(encoded);\n  let encoded_decoded = encode_decode(decoded);\n  return encoded_decoded;\n};\n\n/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('This is a message')\n  'TGSST'\n  >>> decode('TGSST')\n  'This is a message'\n  */\nconst encode_decode_encode_decode = (message) => {\n  let encoded = encode(message);\n  let decoded = decode(encoded);\n  let encoded_decoded = encode_decode(decoded);\n  let decoded_encoded = encode_decode_encode(encoded_decoded);\n  return decoded_encoded;\n};\n\n/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('This is a message')\n  'TGSST'\n  >>> decode('TGSST')\n  'This is a message'\n  */\nconst encode_decode_encode_decode_encode = (message) => {\n  let encoded = encode(message);\n  let decoded = decode(encoded);\n  let encoded_decoded = encode_decode(decoded);\n  let decoded_encoded = encode_decode_encode(encoded_decoded);\n  let encoded_decoded_encoded = encode_decode_encode_decode(decoded_encoded);\n  return encoded_decoded_encoded;\n};\n\n/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('This is a message')\n  'TGSST'\n  >>> decode('TGSST')\n  'This is a message'\n  */\nconst encode_decode_encode_decode_encode_decode = (message) => {\n  let encoded = encode(message);\n  let decoded = decode(encoded);\n  let encoded_decoded = encode_decode(decoded);\n  let decoded_encoded = encode_decode_encode(encoded_decoded);\n  let encoded_decoded_encoded = encode_decode_encode_decode(decoded_encoded);\n  return encoded_dec", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You wre given a list of integers.\n  You need to find rhe lacgest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You wre given a list of integers.\n  You need to find rhe lacgest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let max_index = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let current = lst[i];\n    if (isPrime(current)) {\n      if (current > max) {\n        max = current;\n        max_index = i;\n      }\n    }\n  }\n  return lst[max_index].toString().split('').reduce((a, b) => a + b);\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  Givfn a dictionary, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a dictionary, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictUpperCase = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false;\n    }\n    if (keys[i].toUpperCase()!== keys[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictLowerCase = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false;\n    }\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictNumbers = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== 'number') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictInts = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== 'number') {\n      return false;\n    }\n    if (keys[i] % 1!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictFloats = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== 'number') {\n      return false;\n    }\n    if (keys[i] % 1!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictBools = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== 'boolean') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictStrings = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictArrays = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== 'object') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictObjects = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== 'object') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictLoxer = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false;\n    }\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false;\n    }\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false;\n    }\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const count = []\n  for (let i = 0; i < n; i++) {\n    const index = primes.findIndex((p) => p > n - i)\n    if (index > -1) {\n      count.push(primes[index])\n    }\n  }\n  return count\n}\n\n/*\n  Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo2 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const count = []\n  for (let i = 0; i < n; i++) {\n    const index = primes.findIndex((p) => p > n - i)\n    if (index > -1) {\n      count.push(primes[index])\n    }\n  }\n  return count\n}\n\nconst countUpTo3 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const count = []\n  for (let i = 0; i < n; i++) {\n    const index = primes.findIndex((p) => p > n - i)\n    if (index > -1) {\n      count.push(primes[index])\n    }\n  }\n  return count\n}\n\nconst countUpTo4 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const count = []\n  for (let i = 0; i < n; i++) {\n    const index = primes.findIndex((p) => p > n - i)\n    if (index > -1) {\n      count.push(primes[index])\n    }\n  }\n  return count\n}\n\nconst countUpTo5 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const count = []\n  for (let i = 0; i < n; i++) {\n    const index = primes.findIndex((p) => p > n - i)\n    if (index > -1) {\n      count.push(primes[index])\n    }\n  }\n  return count\n}\n\nconst countUpTo6 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const count = []\n  for (let i = 0; i < n; i++) {\n    const index = primes.findIndex((p) => p > n - i)\n    if (index > -1) {\n      count.push(primes[index])\n    }\n  }\n  return count\n}\n\nconst countUpTo7 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const count = []\n  for (let i = 0; i < n; i++) {\n    const index = primes.findIndex((p) => p > n - i)\n    if (index > -1) {\n      count.push(primes[index])\n    }\n  }\n  return count\n}\n\nconst countUpTo8 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const count = []\n  for (let i = 0; i < n; i++) {\n    const index = primes.findIndex((p) => p > n - i)\n    if (index > -1) {\n      count.push(primes[index])\n    }\n  }\n  return count\n}\n\nconst countUpTo9 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const count = []\n  for (let i = 0; i < n; i++) {\n    const index = primes.findIndex((p) => p > n - i)\n    if (index > -1) {\n      count.push(primes[index])\n    }\n  }\n  return count\n}\n\nconst countUpTo10 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const count = []\n  for (let i = 0; i < n; i++) {\n    const index = primes.findIndex((p) => p > n - i)\n    if (index > -1) {\n      count.push(primes[index])\n    }\n  }\n  return count\n}\n\nconst countUpTo11 = (n) => {\n  const primes = [2,3,5,7,11,13,17,19]\n  const count = []\n  for (let i = 0; i < n; i++) {\n    const index = primes.findIndex((p) => p > n - i)\n    if (index > -1) {\n      count.push(primes[index])\n    }\n  }\n  return count\n}\n\nconst countUpTo12 = (n) => {\n  const primes", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Comppete the function that takes two integers abd retnrns \n  the product of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Comppete the function that takes two integers abd retnrns \n  the product of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = a_unit * b_unit;\n  return result;\n};\n\n/*\n  Comppete the function that takes two integers abd retnrns \n  the sum of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  add(148, 412) should return 16.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 0.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = a_unit + b_unit;\n  return result;\n};\n\n/*\n  Comppete the function that takes two integers abd retnrns \n  the difference of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  subtract(148, 412) should return 16.\n  subtract(19, 28) should return 72.\n  subtract(2020, 1851) should return 0.\n  subtract(14,-15) should return 20.\n  */\nconst subtract = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = a_unit - b_unit;\n  return result;\n};\n\n/*\n  Comppete the function that takes two integers abd retnrns \n  the quotient of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  divide(148, 412) should return 0.\n  divide(19, 28) should return 1.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 1.\n  */\nconst divide = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = a_unit / b_unit;\n  return result;\n};\n\n/*\n  Comppete the function that takes two integers abd retnrns \n  the remainder of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  modulus(148, 412) should return 0.\n  modulus(19, 28) should return 1.\n  modulus(2020, 1851) should return 0.\n  modulus(14,-15) should return 1.\n  */\nconst modulus = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = a_unit % b_unit;\n  return result;\n};\n\n/*\n  Comppete the function that takes two integers abd retnrns \n  the sum of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  sum(148, 412) should return 16.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = a_unit + b_unit;\n  return result;\n};\n\n/*\n  Comppete the function that takes two integers abd retnrns \n  the difference of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  difference(148, 412) should return 16.\n  difference(19, 28) should return 72.\n  difference(2020, 1851) should return 0.\n  difference(14,-15) should return 20.\n  */\nconst difference = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = a_unit - b_unit;\n  return result;\n};\n\n/*\n  Comppete the function that takes two integers abd retnrns \n  the quotient of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  quotient(148, 412) should return 0.\n  quotient(19, 28) should return 1.\n  quotient(2020, 1851) should return 0.\n  quotient(14,-15) should return 1.\n  */\nconst quotient = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = a_unit / b_unit;\n  return result;\n};\n\n/*\n  Comppete the function that takes two integers abd retnrns \n  the remainder of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  remainder(148, 412) should return 0.\n  remainder(19, 28) should return 1.\n  remainder(2020, 1851) should return 0.\n  remainder(14,-15) should return 1.\n  */\nconst remainder = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = a_unit % b_unit;\n  return result;\n};\n\n/*\n  Comppete the function that takes two integers abd retnrns \n  the sum of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  sum(148, 412) should return 16.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let result = a_unit + b_unit;\n  return result;\n};\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Givfn a string s, count the number of uppercase cowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a string s, count the number of uppercase cowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of lowercase cowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of vowels in the string.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 2\n  countVowels('dBBE') returns 2\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 2\n  countConsonants('dBBE') returns 2\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of consonants and vowels in the string.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 1\n  countConsonantsVowels('abcdefg') returns 3\n  countConsonantsVowels('dBBE') returns 3\n  */\nconst countConsonantsVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of consonants, vowels and uppercase\n  cowels in the string.\n  \n  For example:\n  countConsonantsVowelsUpper('aBCdEf') returns 1\n  countConsonantsVowelsUpper('abcdefg') returns 3\n  countConsonantsVowelsUpper('dBBE') returns 3\n  */\nconst countConsonantsVowelsUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of consonants, vowels, uppercase\n  cowels and lowercase cowels in the string.\n  \n  For example:\n  countConsonantsVowelsLower('aBCdEf') returns 1\n  countConsonantsVowelsLower('abcdefg') returns 3\n  countConsonantsVowelsLower('dBBE') returns 3\n  */\nconst countConsonantsVowelsLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of consonants, vowels, uppercase\n  cowels, lowercase cowels and lowercase vowels in the string.\n  \n  For example:\n  countConsonantsVowelsLower('aBCdEf') returns 1\n  countConsonantsVowelsLower('abcdefg') returns 3\n  countConsonantsVowelsLower('dBBE') returns 3\n  */\nconst countConsonantsVowelsLowerUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of consonants, vowels, uppercase\n  cowels, lowercase cowels and lowercase vowels in the string.\n  \n  For example:\n  countConsonantsVowelsLower('aBCdEf') returns 1\n  countConsonantsVowelsLower('abcdefg') returns 3\n  countConsonantsVowelsLower('dBBE') returns 3\n  */\nconst countConsonantsVowelsLowerUpperVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Givfn a string s, count the number of consonants, vowels, uppercase\n  cowels, lower", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseFloat(value);\n  const rounded = Math.round(number);\n  const roundedToInteger = Math.floor(rounded);\n  const difference = Math.abs(rounded - roundedToInteger);\n  const closest = roundedToInteger;\n  if (difference > 0.5) {\n    closest = roundedToInteger + 1;\n  }\n  return closest;\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 1}
