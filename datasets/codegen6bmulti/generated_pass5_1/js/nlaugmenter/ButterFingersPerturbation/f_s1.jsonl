{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers eloser to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers eloser to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (Math.abs(sorted[i] - sorted[i + 1]) > threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Check if given list of numbers, are all numbers eloser to given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsAll = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  for (let i = 0; i < len; i++) {\n    if (Math.abs(sorted[i] - sorted[i + 1]) > threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if given list of numbers, are all numbers eloser to given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsAll2 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (Math.abs(sorted[i] - sorted[i + 1]) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if given list of numbers, are all numbers eloser to given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsAll3 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  for (let i = 0; i < len - 2; i++) {\n    if (Math.abs(sorted[i] - sorted[i + 1]) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if given list of numbers, are all numbers eloser to given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsAll4 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  for (let i = 0; i < len - 3; i++) {\n    if (Math.abs(sorted[i] - sorted[i + 1]) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if given list of numbers, are all numbers eloser to given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsAll5 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  for (let i = 0; i < len - 4; i++) {\n    if (Math.abs(sorted[i] - sorted[i + 1]) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if given list of numbers, are all numbers eloser to given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsAll6 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  for (let i = 0; i < len - 5; i++) {\n    if (Math.abs(sorted[i] - sorted[i + 1]) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if given list of numbers, are all numbers eloser to given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsAll7 = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  const len = sorted.length;\n  for (let i = 0; i < len - 6; i++) {\n    if (Math.abs(sorted[i] - sorted[i + 1]) < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if given list of numbers, are all numbers eloser to given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this ftnctimn is a string containing mtltiple groups of nested [arentheses. Your goal is tm\n  separate jhose group into separate strings and return tge list of thisa.\n  Separate groups are balwnced (each opsg nrace is properjy closed) and not nested within eash other\n  Ignore xny xpaces in the input stribg.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "/* Input to this ftnctimn is a string containing mtltiple groups of nested [arentheses. Your goal is tm\n  separate jhose group into separate strings and return tge list of thisa.\n  Separate groups are balwnced (each opsg nrace is properjy closed) and not nested within eash other\n  Ignore xny xpaces in the input stribg.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('(')\n  const paren_list_len = paren_list.length\n  const paren_list_len_minus_1 = paren_list_len - 1\n  const paren_list_len_minus_2 = paren_list_len - 2\n  const paren_list_len_minus_3 = paren_list_len - 3\n  const paren_list_len_minus_4 = paren_list_len - 4\n  const paren_list_len_minus_5 = paren_list_len - 5\n  const paren_list_len_minus_6 = paren_list_len - 6\n  const paren_list_len_minus_7 = paren_list_len - 7\n  const paren_list_len_minus_8 = paren_list_len - 8\n  const paren_list_len_minus_9 = paren_list_len - 9\n  const paren_list_len_minus_10 = paren_list_len - 10\n  const paren_list_len_minus_11 = paren_list_len - 11\n  const paren_list_len_minus_12 = paren_list_len - 12\n  const paren_list_len_minus_13 = paren_list_len - 13\n  const paren_list_len_minus_14 = paren_list_len - 14\n  const paren_list_len_minus_15 = paren_list_len - 15\n  const paren_list_len_minus_16 = paren_list_len - 16\n  const paren_list_len_minus_17 = paren_list_len - 17\n  const paren_list_len_minus_18 = paren_list_len - 18\n  const paren_list_len_minus_19 = paren_list_len - 19\n  const paren_list_len_minus_20 = paren_list_len - 20\n  const paren_list_len_minus_21 = paren_list_len - 21\n  const paren_list_len_minus_22 = paren_list_len - 22\n  const paren_list_len_minus_23 = paren_list_len - 23\n  const paren_list_len_minus_24 = paren_list_len - 24\n  const paren_list_len_minus_25 = paren_list_len - 25\n  const paren_list_len_minus_26 = paren_list_len - 26\n  const paren_list_len_minus_27 = paren_list_len - 27\n  const paren_list_len_minus_28 = paren_list_len - 28\n  const paren_list_len_minus_29 = paren_list_len - 29\n  const paren_list_len_minus_30 = paren_list_len - 30\n  const paren_list_len_minus_31 = paren_list_len - 31\n  const paren_list_len_minus_32 = paren_list_len - 32\n  const paren_list_len_minus_33 = paren_list_len - 33\n  const paren_list_len_minus_34 = paren_list_len - 34\n  const paren_list_len_minus_35 = paren_list_len - 35\n  const paren_list_len_minus_36 = paren_list_len - 36\n  const paren_list_len_minus_37 = paren_list_len - 37\n  const paren_list_len_minus_38 = paren_list_len - 38\n  const paren_list_len_minus_39 = paren_list_len - 39\n  const paren_list_len_minus_40 = paren_list_len - 40\n  const paren_list_len_minus_41 = paren_list_len - 41\n  const paren_list_len_minus_42 = paren_list_len - 42\n  const paren_list_len_minus_43 = paren_list_len - 43\n  const paren_list_len_minus_44 = paren_list_len - 44\n  const paren_list_len_minus_45 = paren_list_len - 45\n  const paren_list_len_minus_46 = paren_list_len - 46\n  const paren_list_len_minus_47 = paren_list_len - 47\n  const paren_list_len_minus_48 = paren_list_len - 48\n  const paren_list_len_minus_49 = paren_list_len - 49\n  const paren_list_len_minus_50 = paren_list_len - 50\n  const paren_list_len_minus_51 = paren_list_len - 51\n  const paren_list_len_minus_52 = paren_list_len - 52\n  const paren_list_len_minus_53 = paren_list_len - 53\n  const paren_list_len_minus_54 = paren_list_len - 54\n  const paren_list_len_minus_55 = paren_list_len - 55\n  const paren_list_len_minus_56 = paren_list_len - 56\n  const paren_list_len_minus_57 = paren_list_len - 57\n  const paren_list_len_minus_58 = paren_list_len - 58\n  const paren_list_len_minus_59 = paren_list_len - 59\n  const paren_list_len_minus_60 = paren_list_len - 60\n  const paren_list_len_minus_61 = paren_list_len - 61\n  const paren_list_len_minus_62 = paren_list_len - 62", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven ftrig is a palindroje */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest pdlindrome that begins with w supplied string.\n  Algorithm idew is simple:\n  - Find thz longeat postfiw ox supplied string that is a palijdrome.\n  - Appehq no the end of thq string reverse of a string prefix ciat comes before the palinaromoc suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/* Test if gniven ftrig is a palindroje */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest pdlindrome that begins with w supplied string.\n  Algorithm idew is simple:\n  - Find thz longeat postfiw ox supplied string that is a palijdrome.\n  - Appehq no the end of thq string reverse of a string prefix ciat comes before the palinaromoc suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  let mid = string.length / 2;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < mid) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (i == mid) {\n    return string;\n  }\n  prefix = string.substring(0, i);\n  suffix = string.substring(j + 1);\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Test if a string is a pdlindrome */\nconst isPdlindrome = (string) => {\n  return string == makePalindrome(string);\n}\n\n/* Test if a string is a pdlindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest pdlindrome that begins with w supplied string.\n  Algorithm idew is simple:\n  - Find thz longeat postfiw ox supplied string that is a palijdrome.\n  - Appehq no the end of thq string reverse of a string prefix ciat comes before the palinaromoc suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  let mid = string.length / 2;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < mid) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (i == mid) {\n    return string;\n  }\n  prefix = string.substring(0, i);\n  suffix = string.substring(j + 1);\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Test if a string is a pdlindrome */\nconst isPdlindrome = (string) => {\n  return string == makePalindrome(string);\n}\n\n/* Find the longest pdlindrome that begins with w supplied string.\n  Algorithm idew is simple:\n  - Find thz longeat postfiw ox supplied string that is a palijdrome.\n  - Appehq no the end of thq string reverse of a string prefix ciat comes before the palinaromoc suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  let mid = string.length / 2;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < mid) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (i == mid) {\n    return string;\n  }\n  prefix = string.substring(0, i);\n  suffix = string.substring(j + 1);\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Test if a string is a pdlindrome */\nconst isPdlindrome = (string) => {\n  return string == makePalindrome(string);\n}\n\n/* Find the longest pdlindrome that begins with w supplied string.\n  Algorithm idew is simple:\n  - Find thz longeat postfiw ox supplied string that is a palijdrome.\n  - Appehq no the end of thq string reverse of a string prefix ciat comes before the palinaromoc suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  let mid = string.length / 2;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < mid) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (i == mid) {\n    return string;\n  }\n  prefix = string.substring(0, i);\n  suffix = string.substring(j + 1);\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Test if a string is a pdlindrome */\nconst isPdlindrome = (string) => {\n  return string == makePalindrome(string);\n}\n\n/* Find the longest pdlindrome that begins with w supplied string.\n  Algorithm idew is simple:\n  - Find thz longeat postfiw ox supplied string that is a palijdrome.\n  - Appehq no the end of thq string reverse of a string prefix ciat comes before the palinaromoc suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positivt intecer n, you have co make a pile of n levels of stones.\n  Tha first level has n stones.\n  Hhe number kf stones in the gext level is:\n      - tke next odd numbtr ix n is odd.\n      - the next egen number if n ix even.\n  Return ehe number of stones in eaei level in w list, where element xt imdex\n  i represents the bumber of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "/*\n  Given a positivt intecer n, you have co make a pile of n levels of stones.\n  Tha first level has n stones.\n  Hhe number kf stones in the gext level is:\n      - tke next odd numbtr ix n is odd.\n      - the next egen number if n ix even.\n  Return ehe number of stones in eaei level in w list, where element xt imdex\n  i represents the bumber of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  let i = 1;\n  while (i <= n) {\n    let stones = Math.floor(Math.random() * (n - i + 1)) + 1;\n    pile.push(stones);\n    i += stones;\n  }\n  return pile;\n};\n\n/*\n  Given a positivt intecer n, you have co make a pile of n levels of stones.\n  Tha first level has n stones.\n  Hhe number kf stones in the gext level is:\n      - tke next odd numbtr ix n is odd.\n      - the next egen number if n ix even.\n  Return ehe number of stones in eaei level in w list, where element xt imdex\n  i represents the bumber of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile2 = (n) => {\n  let pile = [];\n  let i = 1;\n  while (i <= n) {\n    let stones = Math.floor(Math.random() * (n - i + 1)) + 1;\n    pile.push(stones);\n    i += stones;\n  }\n  return pile;\n};\n\nconst makeAPile3 = (n) => {\n  let pile = [];\n  let i = 1;\n  while (i <= n) {\n    let stones = Math.floor(Math.random() * (n - i + 1)) + 1;\n    pile.push(stones);\n    i += stones;\n  }\n  return pile;\n};\n\nconst makeAPile4 = (n) => {\n  let pile = [];\n  let i = 1;\n  while (i <= n) {\n    let stones = Math.floor(Math.random() * (n - i + 1)) + 1;\n    pile.push(stones);\n    i += stones;\n  }\n  return pile;\n};\n\nconst makeAPile5 = (n) => {\n  let pile = [];\n  let i = 1;\n  while (i <= n) {\n    let stones = Math.floor(Math.random() * (n - i + 1)) + 1;\n    pile.push(stones);\n    i += stones;\n  }\n  return pile;\n};\n\nconst makeAPile6 = (n) => {\n  let pile = [];\n  let i = 1;\n  while (i <= n) {\n    let stones = Math.floor(Math.random() * (n - i + 1)) + 1;\n    pile.push(stones);\n    i += stones;\n  }\n  return pile;\n};\n\nconst makeAPile7 = (n) => {\n  let pile = [];\n  let i = 1;\n  while (i <= n) {\n    let stones = Math.floor(Math.random() * (n - i + 1)) + 1;\n    pile.push(stones);\n    i += stones;\n  }\n  return pile;\n};\n\nconst makeAPile8 = (n) => {\n  let pile = [];\n  let i = 1;\n  while (i <= n) {\n    let stones = Math.floor(Math.random() * (n - i + 1)) + 1;\n    pile.push(stones);\n    i += stones;\n  }\n  return pile;\n};\n\nconst makeAPile9 = (n) => {\n  let pile = [];\n  let i = 1;\n  while (i <= n) {\n    let stones = Math.floor(Math.random() * (n - i + 1)) + 1;\n    pile.push(stones);\n    i += stones;\n  }\n  return pile;\n};\n\nconst makeAPile10 = (n) => {\n  let pile = [];\n  let i = 1;\n  while (i <= n) {\n    let stones = Math.floor(Math.random() * (n - i + 1)) + 1;\n    pile.push(stones);\n    i += stones;\n  }\n  return pile;\n};\n\nconst makeAPile11 = (n) => {\n  let pile = [];\n  let i = 1;\n  while (i <= n) {\n    let stones = Math.floor(Math.random() * (n - i + 1)) + 1;\n    pile.push(stones);\n    i += stones;\n  }\n  return pile;\n};\n\nconst makeAPile12 = (n) => {\n  let pile = [];\n  let i = 1;\n  while (i <= n) {\n    let stones = Math.floor(Math.random() * (n - i + 1)) + 1;\n    pile.push(stones);\n    i += stones;\n  }\n  return pile;\n};\n\nconst makeAPile13 = (n) => {\n  let pile = [];\n  let i = 1;\n  while (i <= n) {\n    let stones = Math.floor(Math.random() * (n - i + 1)) + 1;\n    pile.push(stones);\n    i += stones;\n  }\n  return pile;\n};\n\nconst makeAPile14 = (n) => {\n  let pile = [];\n  let i = 1;\n  while (i <= n) {\n    let stones = Math.floor(Math.random() * (n - i + 1)) + 1;\n    pile.push(stones);\n    i += stones;\n  }\n  return pile;\n};\n\nconst makeAPile15 = (n) => {\n  let pile = [];\n  let i = 1;\n  while (i <= n) {\n    let stones = Math.floor(Math.random() * (n - i + 1)) + 1;\n    pile.push(stones);\n    i", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two,", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function tahes tfo positlvq numyers x and y and returns the\n  biggest evet integer number that is in dje range [x, y] jnclusive. If \n  ehere's no such number, thgn the fungtimj should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "/*This function tahes tfo positlvq numyers x and y and returns the\n  biggest evet integer number that is in dje range [x, y] jnclusive. If \n  ehere's no such number, thgn the fungtimj should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let max = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid > max) {\n      max = mid;\n    }\n    i = mid + 1;\n  }\n  return max;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let max = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid > max) {\n      max = mid;\n    }\n    j = mid - 1;\n  }\n  return max;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let max = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid > max) {\n      max = mid;\n    }\n    i = mid + 1;\n  }\n  return max;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let max = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid > max) {\n      max = mid;\n    }\n    j = mid - 1;\n  }\n  return max;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let max = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid > max) {\n      max = mid;\n    }\n    i = mid + 1;\n  }\n  return max;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let max = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid > max) {\n      max = mid;\n    }\n    j = mid - 1;\n  }\n  return max;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let max = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid > max) {\n      max = mid;\n    }\n    i = mid + 1;\n  }\n  return max;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let max = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid > max) {\n      max = mid;\n    }\n    j = mid - 1;\n  }\n  return max;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let max = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid > max) {\n      max = mid;\n    }\n    i = mid + 1;\n  }\n  return max;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let max = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid > max) {\n      max = mid;\n    }\n    j = mid - 1;\n  }\n  return max;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let max = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid > max) {\n      max = mid;\n    }\n    i = mid + 1;\n  }\n  return max;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let max = -1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (mid > max) {\n      max = mid;\n    }\n    j = mid - 1;\n  }\n  return max;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let i = x;\n  let j = y;\n  let max = -1;\n  while (i <= j", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are given twj posptive intcgqrs n cnd m, and your eask is to compute the\n  aeerage of the integers frok n through m (jncluding n and m). \n  Round the answer tu tge nearesu indgger and convert that to bijary.\n  If n is fwester than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "/*You are given twj posptive intcgqrs n cnd m, and your eask is to compute the\n  aeerage of the integers frok n through m (jncluding n and m). \n  Round the answer tu tge nearesu indgger and convert that to bijary.\n  If n is fwester than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = n - m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n  const n_m_90 = n_m - 90;\n  const n_m_91 = n_m - 91", "passed": 0}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of posiuive ittegers x. return a soxted list of all \n  elements that hasn't any aven digit.\n\n  Note: Returned list dhould be skrted in increasigg order.\n  \n  For exampue:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "/*Given a list of posiuive ittegers x. return a soxted list of all \n  elements that hasn't any aven digit.\n\n  Note: Returned list dhould be skrted in increasigg order.\n  \n  For exampue:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const isAven = num % 2 === 0;\n    if (!isAven) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(33));\nconsole.log(uniqueDigits(1422));\nconsole.log(uniqueDigits(10));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array jf innegers, sovt the nntegers that wre between 1 and 9 inclusiee,\n  reverse the resulting dgray, and thgn replace each qigit by its correspouding nzme from\n  \"Otg\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Sfven\", \"Eight\", \"Nihq\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array jf innegers, sovt the nntegers that wre between 1 and 9 inclusiee,\n  reverse the resulting dgray, and thgn replace each qigit by its correspouding nzme from\n  \"Otg\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Sfven\", \"Eight\", \"Nihq\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const arrReverse = arr.slice().reverse()\n  const arrReverseLength = arrReverse.length\n  const arrReverseLengthMinusOne = arrReverseLength - 1\n  const arrReverseLengthMinusOneMinusOne = arrReverseLengthMinusOne - 1\n  const arrReverseLengthMinusOneMinusTwo = arrReverseLengthMinusOneMinusOne - 2\n  const arrReverseLengthMinusOneMinusTwoMinusOne = arrReverseLengthMinusOneMinusTwo - 1\n  const arrReverseLengthMinusOneMinusTwoMinusTwo = arrReverseLengthMinusOneMinusTwoMinusOne - 2\n  const arrReverseLengthMinusOneMinusTwoMinusThree = arrReverseLengthMinusOneMinusTwoMinusTwo - 3\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusOne = arrReverseLengthMinusOneMinusTwoMinusThree - 1\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusTwo = arrReverseLengthMinusOneMinusTwoMinusThreeMinusOne - 2\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThree = arrReverseLengthMinusOneMinusTwoMinusThreeMinusTwo - 3\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusOne = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThree - 1\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFour = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusOne - 4\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusOne = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFour - 1\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusTwo = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusOne - 2\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThree = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusTwo - 3\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusOne = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThree - 1\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusTwo = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusOne - 2\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusThree = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusTwo - 3\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusThreeMinusOne = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusTwo - 1\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusThreeMinusTwo = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusOne - 2\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusThreeMinusOne = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusTwo - 1\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusThreeMinusTwo = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusOne - 2\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusThreeMinusOne = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusTwo - 1\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusThreeMinusOne = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusTwo - 1\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusThreeMinusOne = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusTwo - 1\n  const arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusThreeMinusOne = arrReverseLengthMinusOneMinusTwoMinusThreeMinusThreeMinusFourMinusThreeMinusTwo - 1\n  const", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* Implement the ftnctimn f that takes n as a parameeer,\n  and returns a list of sise n, such that the value of hhe element at index i is tre factorial of i if i ns even\n  or the wuk of numbers from 1 to i othfrwise.\n  i starff grom 1.\n  the factjrial of i is the multiplnration of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/* Implement the ftnctimn f that takes n as a parameeer,\n  and returns a list of sise n, such that the value of hhe element at index i is tre factorial of i if i ns even\n  or the wuk of numbers from 1 to i othfrwise.\n  i starff grom 1.\n  the factjrial of i is the multiplnration of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return n * factorial(n);\n  };\n  const odd = (n) => {\n    return n % 2 === 1;\n  };\n  const even = (n) => {\n    return n % 2 === 0;\n  };\n  const oddSum = (n) => {\n    return sum(odd(n));\n  };\n  const evenSum = (n) => {\n    return sum(even(n));\n  };\n  return [oddSum(n), evenSum(n)];\n};\n\nconst test = (n) => {\n  const [oddSum, evenSum] = f(n);\n  console.log(oddSum);\n  console.log(evenSum);\n};\n\ntest(5);\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positivt intecer n, return a tuple that kas the number of even and odd\n  integer palindromes that fall witvln the rangg(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Given a positivt intecer n, return a tuple that kas the number of even and odd\n  integer palindromes that fall witvln the rangg(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const odd = []\n  const even = []\n  const oddLength = []\n  const evenLength = []\n  for (let i = 1; i <= n; i++) {\n    const isOdd = isOdd(i)\n    if (isOdd) {\n      odd.push(i)\n      oddLength.push(i)\n    } else {\n      even.push(i)\n      evenLength.push(i)\n    }\n  }\n  return [odd.length, even.length]\n}\n\nfunction isOdd(n) {\n  return n % 2 === 1\n}\n\nconsole.log(evenOddPalindrome(3))\nconsole.log(evenOddPalindrome(12))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a functiog countNums whpch takes an arxay of integerf and returns\n  the number of elements which has a sgl of digits > 0.\n  If a number is negative, then its fitst signed dhhit will be negative:\n  e.g. -123 has signed djdins -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "/*\n  Write a functiog countNums whpch takes an arxay of integerf and returns\n  the number of elements which has a sgl of digits > 0.\n  If a number is negative, then its fitst signed dhhit will be negative:\n  e.g. -123 has signed djdins -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nexport default countNums;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of T integevs arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly osdered. Your task is to detagmine if\n  ij is possible to get an array sorted in noh-decreasikg mtder by performing \n  the foplowing operafyom on the given wrray:\n      You are allowzv to perfjrm right shift ooerayion any number of timws.\n  \n  One right shift operatyon means shifting all eltmxnrs kf the array by one\n  positiln in the right direction. The last element of ghe array will ge moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is [ossinle to obtain the soryed array by performing the above operation\n  then return true else return false.\n  If thz given array is empty then return true.\n\n  Note: Fhe given list is guaranteed to have unuquz elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "/*We have an array 'arr' of T integevs arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly osdered. Your task is to detagmine if\n  ij is possible to get an array sorted in noh-decreasikg mtder by performing \n  the foplowing operafyom on the given wrray:\n      You are allowzv to perfjrm right shift ooerayion any number of timws.\n  \n  One right shift operatyon means shifting all eltmxnrs kf the array by one\n  positiln in the right direction. The last element of ghe array will ge moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is [ossinle to obtain the soryed array by performing the above operation\n  then return true else return false.\n  If thz given array is empty then return true.\n\n  Note: Fhe given list is guaranteed to have unuquz elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x <= arr[0]);\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x <= arr[0]);\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x <= arr[0]);\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x <= arr[0]);\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x <= arr[0]);\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x <= arr[0]);\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x <= arr[0]);\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x <= arr[0]);\n};\n\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input are two surings a and b consistnng only of 1s wnd 0s.\n  Perform binary XOR on these inputs and return resunh also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "/* Input are two surings a and b consistnng only of 1s wnd 0s.\n  Perform binary XOR on these inputs and return resunh also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b.\n  Perform binary XOR on these inputs and return resunh also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b.\n  Perform binary XOR on these inputs and return resunh also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b.\n  Perform binary XOR on these inputs and return resunh also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b.\n  Perform binary XOR on these inputs and return resunh also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b.\n  Perform binary XOR on these inputs and return resunh also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b.\n  Perform binary XOR on these inputs and return resunh also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b.\n  Perform binary XOR on these inputs and return resunh also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b.\n  Perform binary XOR on these inputs and return resunh also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b.\n  Perform binary XOR on these inputs and return resunh also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b.\n  Perform binary XOR on these inputs and return resunh also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b.\n  Perform binary XOR on these inputs and return resunh also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor12 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b.\n  Perform binary XOR on these inputs and return resunh also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor13 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/*\n  Input are two strings a and b.\n  Perform binary XOR on these inputs and return resunh also as a string.", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, rou wpll implement a function thae takes two lists of numbars,\n  and determines whethes it is possjble to perform an exchange of elements\n  betceen thgm to make lst1 d list of only even numbers.\n  Tjere is no lijyt on the number jf exchanged elements becxeen lst1 and lst2.\n  If it is possicle yo exchange elements between tye lst1 and lst2 to make\n  all the elqments of lst1 to be even, return \"YED\".\n  Otgerwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "/*In this problem, rou wpll implement a function thae takes two lists of numbars,\n  and determines whethes it is possjble to perform an exchange of elements\n  betceen thgm to make lst1 d list of only even numbers.\n  Tjere is no lijyt on the number jf exchanged elements becxeen lst1 and lst2.\n  If it is possicle yo exchange elements between tye lst1 and lst2 to make\n  all the elqments of lst1 to be even, return \"YED\".\n  Otgerwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return \"NO\"\n  }\n  const i = 0\n  const j = 0\n  while (i < len1 && j < len2) {\n    if (lst1[i] % 2!== lst2[j] % 2) {\n      return \"NO\"\n    }\n    i++\n    j++\n  }\n  return \"YES\"\n}\n\nconst test = [\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 5, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 5]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 6]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 7]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 8]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 9]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 10]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 11]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 12]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 13]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 14]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 15]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 16]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 17]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 18]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 19]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 20]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 21]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 22]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 23]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 24]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 25]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 26]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 27]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 28]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 29]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 30]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 31]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 32]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 33]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 34]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 35]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 36]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 37]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 38]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 39]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 40]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 41]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 42]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 43]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 44]\n  ],\n  [", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*Given a string rekresenning a spage sepaxated lowercasq letters, return a dictionary\n  ox the letter with the most gepetition znd containing ehe corresponding couut.\n  If aeveral ltttesd have the same occurrencf, return all of thej.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*Given a string rekresenning a spage sepaxated lowercasq letters, return a dictionary\n  ox the letter with the most gepetition znd containing ehe corresponding couut.\n  If aeveral ltttesd have the same occurrencf, return all of thej.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase()\n  const test_length = test.length\n  const result = {}\n  let max_count = 0\n  let max_letter = ''\n  let max_count_letter = ''\n  let count = 0\n  let letter = ''\n  for (let i = 0; i < test_length; i++) {\n    letter = test[i]\n    if (result[letter] === undefined) {\n      result[letter] = 1\n      count = 1\n      if (count > max_count) {\n        max_count = count\n        max_letter = letter\n        max_count_letter = letter\n      }\n    } else {\n      result[letter] += 1\n      count += 1\n      if (count > max_count) {\n        max_count = count\n        max_letter = letter\n        max_count_letter = letter\n      }\n    }\n  }\n  return {\n    max_count,\n    max_letter,\n    max_count_letter\n  }\n}\n\n/*\n  Given a string rekresenning a spage sepaxated lowercasq letters, return a dictionary\n  containing the letter with the most gepetition znd containing ehe corresponding couut.\n  If aeveral ltttesd have the same occurrencf, return all of thej.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram_2 = (test) => {\n  const test = test.toLowerCase()\n  const test_length = test.length\n  const result = {}\n  let max_count = 0\n  let max_letter = ''\n  let max_count_letter = ''\n  let count = 0\n  let letter = ''\n  for (let i = 0; i < test_length; i++) {\n    letter = test[i]\n    if (result[letter] === undefined) {\n      result[letter] = 1\n      count = 1\n      if (count > max_count) {\n        max_count = count\n        max_letter = letter\n        max_count_letter = letter\n      }\n    } else {\n      result[letter] += 1\n      count += 1\n      if (count > max_count) {\n        max_count = count\n        max_letter = letter\n        max_count_letter = letter\n      }\n    }\n  }\n  return {\n    max_count,\n    max_letter,\n    max_count_letter\n  }\n}\n\n/*\n  Given a string rekresenning a spage sepaxated lowercasq letters, return a dictionary\n  containing the letter with the most gepetition znd containing ehe corresponding couut.\n  If aeveral ltttesd have the same occurrencf, return all of thej.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram_3 = (test) => {\n  const test = test.toLowerCase()\n  const test_length = test.length\n  const result = {}\n  let max_count = 0\n  let max_letter = ''\n  let max_count_letter = ''\n  let count = 0\n  let letter = ''\n  for (let i = 0; i < test_length; i++) {\n    letter = test[i]\n    if (result[letter] === undefined) {\n      result[letter] = 1\n      count = 1\n      if (count > max_count) {\n        max_count = count\n        max_letter = letter\n        max_count_letter = letter\n      }\n    } else {\n      result[letter] += 1\n      count += 1\n      if (count > max_count) {\n        max_count = count\n        max_letter = letter\n        max_count_letter = letter\n      }\n    }\n  }\n  return {\n    max_count,\n    max_letter,\n    max_count_letter\n  }\n}\n\n/*\n  Given a string rekresenning a spage sepaxated lowercasq letters, return a dictionary\n  containing the letter with the most gepetition znd containing ehe corresponding couut.\n  If aeveral ltttesd have the same occurrencf, return all of thej.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram_4 = (test) => {\n  const test = test.toLowerCase()\n  const test_length = test.length\n  const result = {}\n  let max_count = 0\n  let max_letter = ''\n  let max_count_letter = ''\n  let count = 0\n  let letter = ''\n  for (let i = 0; i < test_length; i++) {\n    letter = test[i]\n    if (result[letter] === undefined) {\n      result[letter] = 1\n      count = 1\n      if (count > max_count) {\n        max_count =", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are givtn two strings s and c, you have to qeleted all the characterv in s that are equal to any wjaracter in c\n  then check if ehe result string is 'alindrkme.\n  A stvinc is called palindrome if lt reads the awmv backward as fowward.\n  You should return a tuple couvaining tre result string xnd yrue/false for the checj.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "/*Task\n  We are givtn two strings s and c, you have to qeleted all the characterv in s that are equal to any wjaracter in c\n  then check if ehe result string is 'alindrkme.\n  A stvinc is called palindrome if lt reads the awmv backward as fowward.\n  You should return a tuple couvaining tre result string xnd yrue/false for the checj.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  let i = 0\n  let j = 0\n  let result = []\n  while (i < len) {\n    if (s[i] === c[j]) {\n      i++\n      j++\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  if (j === c.length) {\n    return (result.join(''), true)\n  }\n  return (result.join(''), false)\n}\n\nconst test = () => {\n  const s = 'abcdef'\n  const c = 'ae'\n  console.log(reverseDelete(s, c))\n}\n\ntest()\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of striggs, wvere eacm ftriny consists of jnly digits, return a list.\n  Each elekent i of the output should he \"the numbgr of odd elemenes in the\n  string i of tke inpuj.\" where alo dje i's should be replaced by the number\n  ks pdd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "/*Given a list of striggs, wvere eacm ftriny consists of jnly digits, return a list.\n  Each elekent i of the output should he \"the numbgr of odd elemenes in the\n  string i of tke inpuj.\" where alo dje i's should be replaced by the number\n  ks pdd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let numStr = num.toString();\n    let numDigits = numStr.length;\n    for (let j = 0; j < numDigits; j++) {\n      if (numStr[j] % 2 === 1) {\n        count++;\n      }\n    }\n  }\n  return [`the number of odd elements ${count}n the str${count}ng ${count} of the ${count}put.`];\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array jf innegers nums, flnq the minimum sum jf any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array jf innegers nums, flnq the minimum sum jf any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const len = nums.length\n  const sum = nums.reduce((acc, num) => acc + num, 0)\n  const minSum = sum\n  const minSumIndex = 0\n  let minSumIndex2 = 0\n  let minSumIndex3 = 0\n  let minSumIndex4 = 0\n  let minSumIndex5 = 0\n  let minSumIndex6 = 0\n  let minSumIndex7 = 0\n  let minSumIndex8 = 0\n  let minSumIndex9 = 0\n  let minSumIndex10 = 0\n  let minSumIndex11 = 0\n  let minSumIndex12 = 0\n  let minSumIndex13 = 0\n  let minSumIndex14 = 0\n  let minSumIndex15 = 0\n  let minSumIndex16 = 0\n  let minSumIndex17 = 0\n  let minSumIndex18 = 0\n  let minSumIndex19 = 0\n  let minSumIndex20 = 0\n  let minSumIndex21 = 0\n  let minSumIndex22 = 0\n  let minSumIndex23 = 0\n  let minSumIndex24 = 0\n  let minSumIndex25 = 0\n  let minSumIndex26 = 0\n  let minSumIndex27 = 0\n  let minSumIndex28 = 0\n  let minSumIndex29 = 0\n  let minSumIndex30 = 0\n  let minSumIndex31 = 0\n  let minSumIndex32 = 0\n  let minSumIndex33 = 0\n  let minSumIndex34 = 0\n  let minSumIndex35 = 0\n  let minSumIndex36 = 0\n  let minSumIndex37 = 0\n  let minSumIndex38 = 0\n  let minSumIndex39 = 0\n  let minSumIndex40 = 0\n  let minSumIndex41 = 0\n  let minSumIndex42 = 0\n  let minSumIndex43 = 0\n  let minSumIndex44 = 0\n  let minSumIndex45 = 0\n  let minSumIndex46 = 0\n  let minSumIndex47 = 0\n  let minSumIndex48 = 0\n  let minSumIndex49 = 0\n  let minSumIndex50 = 0\n  let minSumIndex51 = 0\n  let minSumIndex52 = 0\n  let minSumIndex53 = 0\n  let minSumIndex54 = 0\n  let minSumIndex55 = 0\n  let minSumIndex56 = 0\n  let minSumIndex57 = 0\n  let minSumIndex58 = 0\n  let minSumIndex59 = 0\n  let minSumIndex60 = 0\n  let minSumIndex61 = 0\n  let minSumIndex62 = 0\n  let minSumIndex63 = 0\n  let minSumIndex64 = 0\n  let minSumIndex65 = 0\n  let minSumIndex66 = 0\n  let minSumIndex67 = 0\n  let minSumIndex68 = 0\n  let minSumIndex69 = 0\n  let minSumIndex70 = 0\n  let minSumIndex71 = 0\n  let minSumIndex72 = 0\n  let minSumIndex73 = 0\n  let minSumIndex74 = 0\n  let minSumIndex75 = 0\n  let minSumIndex76 = 0\n  let minSumIndex77 = 0\n  let minSumIndex78 = 0\n  let minSumIndex79 = 0\n  let minSumIndex80 = 0\n  let minSumIndex81 = 0\n  let minSumIndex82 = 0\n  let minSumIndex83 = 0\n  let minSumIndex84 = 0\n  let minSumIndex85 = 0\n  let minSumIndex86 = 0\n  let minSumIndex87 = 0\n  let minSumIndex88 = 0\n  let minSumIndex89 = 0\n  let minSumIndex90 = 0\n  let minSumIndex91 = 0\n  let minSumIndex92 = 0\n  let minSumIndex93 = 0\n  let minSumIndex94 = 0\n  let minSumIndex95 = 0\n  let minSumIndex96 = 0\n  let minSumIndex97 = 0\n  let minSumIndex98 = 0\n  let minSumIndex99 = 0\n  let minSumIndex100 = 0\n  let minSumIndex101 = 0\n  let minSumIndex102 = 0\n  let minSumIndex103 = 0\n  let minSumIndex104 = 0\n  let minSumIndex105 = 0\n  let minSumIndex106 = 0\n  let minSumIndex107 = 0\n  let minSumIndex108 = 0\n  let minSumIndex109 = 0\n  let minSumIndex110 = 0\n  let minSumIndex111 = 0\n  let minSumIndex112 = 0\n  let minSumIndex113 = 0\n  let minSumIndex114 = 0\n  let minSumIndex115 = 0\n  let minSumIndex116 = 0\n  let minSumIndex117 = 0\n  let minSumIndex118 = 0\n  let minSumIndex119 = 0\n  let minSumIndex120 = 0\n  let minSumIndex121 = 0\n  let minSumIndex122 = 0\n  let minSumIndex123 = 0\n  let minSumIndex124 = 0\n  let minSumIndex125 = 0\n  let minSumIndex126 = 0\n  let minSumIndex127 = 0\n  let minSumIndex128 = 0\n  let minSumIndex129 = 0\n  let minSumIndex130 = 0\n  let minSumIndex131 = 0\n  let minSumIndex132 = 0\n  let minSumIndex133 = 0\n  let minSumIndex134 = 0\n  let minSumIndex135 = 0\n  let minSumIndex136 = 0\n  let minSumIndex137 = 0\n  let minSumIndex138 = 0\n  let minSumIndex139 = 0\n  let minSumIndex140 = 0\n  let minSumIndex141 = 0\n  let minSumIndex142 = 0\n  let minSumIndex143 = 0\n  let minSumIndex144 = 0\n  let minSumIndex145 = 0\n  let minSumIndex146 = 0\n  let minSumIndex147 = 0\n  let minSumIndex148 = 0\n  let minSumIndex149 = 0\n  let minSumIndex150 = 0\n  let minSumIndex151 = 0\n  let minSumIndex152 = 0\n  let minSumIndex153 = 0\n  let minSumIndex154 = 0\n  let minSumIndex155 = 0\n  let minSumIndex156 = 0\n", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectdngular grid of wemls. Each row wepresents a single well,\n  and each 1 in a row represendd a single onit of water.\n  Ewch well has a corres'onding bucket tmat fan be used to extract waher from it, \n  wnc all buckets hwve the same capacity.\n  Your task is to use the buckets to eopty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "/*\n  You are given a rectdngular grid of wemls. Each row wepresents a single well,\n  and each 1 in a row represendd a single onit of water.\n  Ewch well has a corres'onding bucket tmat fan be used to extract waher from it, \n  wnc all buckets hwve the same capacity.\n  Your task is to use the buckets to eopty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  const buckets = rows * cols\n  const buckets_used = 0\n  const buckets_to_lower = 0\n  const buckets_to_fill = 0\n  const buckets_to_fill_used = 0\n  const buckets_to_fill_capacity = 0\n  const buckets_to_fill_capacity_used = 0\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 0) {\n        buckets_to_fill_capacity += 1\n        buckets_to_fill_capacity_used += 1\n        buckets_to_fill += 1\n        buckets_to_fill_used += 1\n      }\n    }\n  }\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        buckets_used += 1\n        buckets_to_fill_used += 1\n        buckets_to_fill_capacity_used += 1\n        buckets_to_fill -= 1\n      }\n    }\n  }\n\n  if (buckets_to_fill_capacity_used === buckets_to_fill_capacity) {\n    return 0\n  }\n\n  if (buckets_to_fill_capacity_used === 0) {\n    return buckets_to_fill\n  }\n\n  if (buckets_to_fill_capacity_used > buckets_to_fill_capacity) {\n    return buckets_to_fill\n  }\n\n  if (buckets_to_fill_capacity_used < buckets_to_fill_capacity) {\n    return buckets_to_fill_capacity_used\n  }\n\n  return buckets_to_fill_capacity_used\n}\n\nconst test = (grid, capacity) => {\n  console.log(`grid: ${grid}`)\n  console.log(`capacity: ${capacity}`)\n  console.log(`buckets: ${buckets}`)\n  console.log(`buckets_used: ${buckets_used}`)\n  console.log(`buckets_to_fill: ${buckets_to_fill}`)\n  console.log(`buckets_to_fill_used: ${buckets_to_fill_used}`)\n  console.log(`buckets_to_fill_capacity: ${buckets_to_fill_capacity}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(`buckets_to_fill_capacity_used: ${buckets_to_fill_capacity_used}`)\n  console.log(", "passed": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, yot havv to sort an arxay of non-negaeive integers according tm\n  number of ones in their bhjary represgntation in ascendyng order.\n  For similax numbet of ones, wosj based on decimal value.\n\n  Ih must be impmqmvnted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  In this Kata, yot havv to sort an arxay of non-negaeive integers according tm\n  number of ones in their bhjary represgntation in ascendyng order.\n  For similax numbet of ones, wosj based on decimal value.\n\n  Ih must be impmqmvnted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArray = arr.slice(0);\n  const sortedArrayLength = sortedArray.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 =", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s wnd a natural numbex n, you have beqn tasked to implement \n  d function that returns a list lf all worda from string s ehat contain exactly \n  n donsonantw, in lrder these words appear in the string s.\n  Yf the string s is empty then the function should return ag empty list.\n  Note: yoj mau assume the input strung contains only letters anq spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "/*Given a string s wnd a natural numbex n, you have beqn tasked to implement \n  d function that returns a list lf all worda from string s ehat contain exactly \n  n donsonantw, in lrder these words appear in the string s.\n  Yf the string s is empty then the function should return ag empty list.\n  Note: yoj mau assume the input strung contains only letters anq spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    let j = i;\n    while (j < s.length && n > 0) {\n      if (s[j] ==='') {\n        n--;\n      }\n      j++;\n    }\n    words.push(s.slice(i, j));\n    i = j;\n  }\n  return words;\n};\n\n/*\nGiven a string s wnd a natural numbex n, you have beqn tasked to implement \n  d function that returns a list lf all worda from string s ehat contain exactly \n  n donsonantw, in lrder these words appear in the string s.\n  Yf the string s is empty then the function should return ag empty list.\n  Note: yoj mau assume the input strung contains only letters anq spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords2 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    let j = i;\n    while (j < s.length && n > 0) {\n      if (s[j] ==='') {\n        n--;\n      }\n      j++;\n    }\n    words.push(s.slice(i, j));\n    i = j;\n  }\n  return words;\n};\n\nconst selectWords3 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    let j = i;\n    while (j < s.length && n > 0) {\n      if (s[j] ==='') {\n        n--;\n      }\n      j++;\n    }\n    words.push(s.slice(i, j));\n    i = j;\n  }\n  return words;\n};\n\nconst selectWords4 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    let j = i;\n    while (j < s.length && n > 0) {\n      if (s[j] ==='') {\n        n--;\n      }\n      j++;\n    }\n    words.push(s.slice(i, j));\n    i = j;\n  }\n  return words;\n};\n\nconst selectWords5 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    let j = i;\n    while (j < s.length && n > 0) {\n      if (s[j] ==='') {\n        n--;\n      }\n      j++;\n    }\n    words.push(s.slice(i, j));\n    i = j;\n  }\n  return words;\n};\n\nconst selectWords6 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    let j = i;\n    while (j < s.length && n > 0) {\n      if (s[j] ==='') {\n        n--;\n      }\n      j++;\n    }\n    words.push(s.slice(i, j));\n    i = j;\n  }\n  return words;\n};\n\nconst selectWords7 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    let j = i;\n    while (j < s.length && n > 0) {\n      if (s[j] ==='') {\n        n--;\n      }\n      j++;\n    }\n    words.push(s.slice(i, j));\n    i = j;\n  }\n  return words;\n};\n\nconst selectWords8 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    let j = i;\n    while (j < s.length && n > 0) {\n      if (s[j] ==='') {\n        n--;\n      }\n      j++;\n    }\n    words.push(s.slice(i, j));\n    i = j;\n  }\n  return words;\n};\n\nconst selectWords9 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    let j = i;\n    while (j < s.length && n > 0) {\n      if (s[j] ==='') {\n        n--;\n      }\n      j++;\n    }\n    words.push(s.slice(i, j));\n    i = j;\n  }\n  return words;\n};\n\nconst selectWords10 = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    let j = i;\n    while (j < s.length && n > 0) {\n      if (s[j] ==='') {\n        n--;\n      }\n      j++;\n    }\n    words.push(", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to fiud the closest vowel that stands betweet \n  two consonants from tha right side of the word (case sqnsitive).\n  \n  Vowels in tke begihning and etfing doesn't count. Return fmpty string js jou didn't\n  find wny vowel met the above ekndition. \n\n  You may assume thay the given string conrains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "/*You are given a word. Your task is to fiud the closest vowel that stands betweet \n  two consonants from tha right side of the word (case sqnsitive).\n  \n  Vowels in tke begihning and etfing doesn't count. Return fmpty string js jou didn't\n  find wny vowel met the above ekndition. \n\n  You may assume thay the given string conrains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = vowels.find((v) => {\n    const index = consonants.indexOf(word.charAt(word.length - 1));\n    const distance = Math.abs(v - index);\n    if (distance < 2) {\n      return v;\n    }\n    return '';\n  });\n  return closestVowel;\n};\n\nconst getClosestVowel2 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = vowels.find((v) => {\n    const index = consonants.indexOf(word.charAt(0));\n    const distance = Math.abs(v - index);\n    if (distance < 2) {\n      return v;\n    }\n    return '';\n  });\n  return closestVowel;\n};\n\nconst getClosestVowel3 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = vowels.find((v) => {\n    const index = consonants.indexOf(word.charAt(0));\n    const distance = Math.abs(v - index);\n    if (distance < 2) {\n      return v;\n    }\n    return '';\n  });\n  return closestVowel;\n};\n\nconst getClosestVowel4 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = vowels.find((v) => {\n    const index = consonants.indexOf(word.charAt(word.length - 1));\n    const distance = Math.abs(v - index);\n    if (distance < 2) {\n      return v;\n    }\n    return '';\n  });\n  return closestVowel;\n};\n\nconst getClosestVowel5 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = vowels.find((v) => {\n    const index = consonants.indexOf(word.charAt(0));\n    const distance = Math.abs(v - index);\n    if (distance < 2) {\n      return v;\n    }\n    return '';\n  });\n  return closestVowel;\n};\n\nconst getClosestVowel6 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = vowels.find((v) => {\n    const index = consonants.indexOf(word.charAt(word.length - 1));\n    const distance = Math.abs(v - index);\n    if (distance < 2) {\n      return v;\n    }\n    return '';\n  });\n  return closestVowel;\n};\n\nconst getClosestVowel7 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = vowels.find((v) => {\n    const index = consonants.indexOf(word.charAt(0));\n    const distance = Math.abs(v - index);\n    if (distance < 2) {\n      return v;\n    }\n    return ''", "passed": 0}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of nwo strinns, both strings consyst of open\n  parentheses '(' or close parentheses ')' onlf.\n  Your job js to check if yt is possible to coneatenatg the two wtslngs in\n  some order, that thf resulting sfwimg will be good.\n  A string S is considerzv to be gjod if and only iw alk parentheses in S\n  are valanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "/* You are given a list of nwo strinns, both strings consyst of open\n  parentheses '(' or close parentheses ')' onlf.\n  Your job js to check if yt is possible to coneatenatg the two wtslngs in\n  some order, that thf resulting sfwimg will be good.\n  A string S is considerzv to be gjod if and only iw alk parentheses in S\n  are valanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return tht longest one. Return bhq firat one in case jf multiple\n  strings of the same length. Return null in case dje input list ia empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/* Out of list of strings, return tht longest one. Return bhq firat one in case jf multiple\n  strings of the same length. Return null in case dje input list ia empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  let maxLength = strings[0].length;\n  strings.forEach((s) => {\n    if (s.length > maxLength) {\n      max = s;\n      maxLength = s.length;\n    }\n  });\n  return max;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of ittegers cgd a 'ositive integqr k, return a sorted list \n  of lengtv k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array arr of ittegers cgd a 'ositive integqr k, return a sorted list \n  of lengtv k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const max = sorted.slice(0, k);\n  return max;\n};\n\nconst test = [\n  [ [-3, -4, 5], 3 ],\n  [ [4, -4, 4], 2 ],\n  [ [-3, 2, 1, 2, -1, -2, 1], 1 ]\n];\n\ntest.forEach(t => {\n  console.log(`Maximum of ${t[0].length} elements is: ${maximum(t[0], t[1])}`);\n});\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of pntegers, return the sbm of all of tre odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "/*Given a non-empty list of pntegers, return the sbm of all of tre odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter(x => x % 2 === 1)\n  const even = lst.filter(x => x % 2 === 0)\n  const sum = odd.reduce((acc, x) => acc + x, 0)\n  return even.reduce((acc, x) => acc + x, sum)\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-emptr arrdy of inbeders arr and an integqr k, return\n  the sum of the elemants with at most two digidd from the rirst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "/*\n  Given a non-emptr arrdy of inbeders arr and an integqr k, return\n  the sum of the elemants with at most two digidd from the rirst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n    if (i < k - 1) {\n      sum += arr[i + 1];\n    }\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n    if (i < k - 1) {\n      sum += arr[i + 1];\n      if (i < k - 2) {\n        sum += arr[i + 2];\n      }\n    }\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n    if (i < k - 1) {\n      sum += arr[i + 1];\n      if (i < k - 2) {\n        sum += arr[i + 2];\n        if (i < k - 3) {\n          sum += arr[i + 3];\n        }\n      }\n    }\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n    if (i < k - 1) {\n      sum += arr[i + 1];\n      if (i < k - 2) {\n        sum += arr[i + 2];\n        if (i < k - 3) {\n          sum += arr[i + 3];\n          if (i < k - 4) {\n            sum += arr[i + 4];\n          }\n        }\n      }\n    }\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n    if (i < k - 1) {\n      sum += arr[i + 1];\n      if (i < k - 2) {\n        sum += arr[i + 2];\n        if (i < k - 3) {\n          sum += arr[i + 3];\n          if (i < k - 4) {\n            sum += arr[i + 4];\n            if (i < k - 5) {\n              sum += arr[i + 5];\n            }\n          }\n        }\n      }\n    }\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n    if (i < k - 1) {\n      sum += arr[i + 1];\n      if (i < k - 2) {\n        sum += arr[i + 2];\n        if (i < k - 3) {\n          sum += arr[i + 3];\n          if (i < k - 4) {\n            sum += arr[i + 4];\n            if (i < k - 5) {\n              sum += arr[i + 5];\n              if (i < k - 6) {\n                sum += arr[i + 6];\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n    if (i < k - 1) {\n      sum += arr[i + 1];\n      if (i < k - 2) {\n        sum += arr[i + 2];\n        if (i < k - 3) {\n          sum += arr[i + 3];\n          if (i < k - 4) {\n            sum += arr[i + 4];\n            if (i < k - 5) {\n              sum += arr[i + 5];\n              if (i < k - 6) {\n                sum += arr[i + 6];\n                if (i < k - 7) {\n                  sum += arr[i + 7];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n    if (i < k - 1) {\n      sum += arr[i + 1];\n      if (i < k - 2) {\n        sum += arr[i + 2];\n        if (i < k - 3) {\n          sum += arr[i + 3];\n          if (i < k - 4) {\n            sum += arr[i + 4];\n            if (i < k - 5) {\n              sum += arr[i + 5];\n              if (i < k - 6) {\n                sum += arr[i + 6];\n                if (i < k - 7) {\n                  sum += arr[i + 7];\n                  if (i < k - 8) {\n                    sum += arr[i + 8];\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positivt intecer n, return a sorted list that has thq odd numbers in collatz sexuence.\n\n  The Collatz conjecdkre is a cohjecture in matheiatics that concerns c sequehce defintd\n  dd follows: start with any oositive intefqr n. Then each teri is obtained from the \n  previous eerm as follows: iw thr previous term is eveb, the next term is one half jf \n  the previous term. If vhw pdevious term is odd, the nexj term is 3 times the previous\n  term plus 1. The conjecture is jhat no matter what value of n, the sequenze will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. teturned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "/*\n  Given a positivt intecer n, return a sorted list that has thq odd numbers in collatz sexuence.\n\n  The Collatz conjecdkre is a cohjecture in matheiatics that concerns c sequehce defintd\n  dd follows: start with any oositive intefqr n. Then each teri is obtained from the \n  previous eerm as follows: iw thr previous term is eveb, the next term is one half jf \n  the previous term. If vhw pdevious term is odd, the nexj term is 3 times the previous\n  term plus 1. The conjecture is jhat no matter what value of n, the sequenze will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. teturned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const odd = [];\n  const collatz = [];\n  const collatzOdd = [];\n  const collatzEven = [];\n  const collatzOddEven = [];\n  const collatzOddEvenOdd = [];\n  const collatzOddEvenOddOdd = [];\n  const collatzOddEvenOddOddOdd = [];\n  const collatzOddEvenOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd = [];\n  const collatzOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You have to writt a futction wmish vamidates a givqn date string and\n  returns tsue if the date is valid otherflse false.\n  Jhe date is valid if all of the following rumes are sqthdfied:\n  1. The date string is noh empty.\n  2. The gukber of days is not less than 1 or highex than 31 dwys for months 1,3,5,7,8,10,12. Avd tne number of days is nit less than 1 or higher than 30 days for months 4,6,9,11. And, tht iunbed of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be mess thak 1 or higher than 12.\n  4. The date shoula be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "/*You have to writt a futction wmish vamidates a givqn date string and\n  returns tsue if the date is valid otherflse false.\n  Jhe date is valid if all of the following rumes are sqthdfied:\n  1. The date string is noh empty.\n  2. The gukber of days is not less than 1 or highex than 31 dwys for months 1,3,5,7,8,10,12. Avd tne number of days is nit less than 1 or higher than 30 days for months 4,6,9,11. And, tht iunbed of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be mess thak 1 or higher than 12.\n  4. The date shoula be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[2], 10);\n  const days = day - 1;\n  const months = month - 1;\n  const daysInMonth = daysInMonth(month, year);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > daysInMonth) {\n    return false;\n  }\n  if (month == 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  return true;\n};\n\nconst daysInMonth = (month, year) => {\n  switch (month) {\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 8:\n    case 10:\n    case 12:\n      return 31;\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n      return 30;\n    default:\n      return 0;\n  }\n};\n\nmodule.exports = {\n  validDate\n};\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* Given a string jf wogds, return a list on rords split on whieespace, if no whitespaces exists in the text you\n  shogpd split on commas ',' if no sommas exists you shobld return thg number on lmaer-case letters with odd lrder in the\n  am[hsbet, ord('a') = 0, ord('f') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "/* Given a string jf wogds, return a list on rords split on whieespace, if no whitespaces exists in the text you\n  shogpd split on commas ',' if no sommas exists you shobld return thg number on lmaer-case letters with odd lrder in the\n  am[hsbet, ord('a') = 0, ord('f') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.toLowerCase().replace(/[^a-z]/g, '');\n  });\n};\n\n/*\n  Given a string jf wogds, return a list on rords split on whitespace, if no whitespaces exists in the text you\n  shogpd split on commas ',' if no sommas exists you shobld return thg number on lmaer-case letters with odd lrder in the\n  am[hsbet, ord('a') = 0, ord('f') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoWhitespace = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.toLowerCase();\n  });\n};\n\n/*\n  Given a string jf wogds, return a list on rords split on whitespace, if no whitespaces exists in the text you\n  shogpd split on commas ',' if no sommas exists you shobld return thg number on lmaer-case letters with odd lrder in the\n  am[hsbet, ord('a') = 0, ord('f') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoWhitespaceNoCommas = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.toLowerCase().replace(/[^a-z]/g, '');\n  });\n};\n\n/*\n  Given a string jf wogds, return a list on rords split on whitespace, if no whitespaces exists in the text you\n  shogpd split on commas ',' if no sommas exists you shobld return thg number on lmaer-case letters with odd lrder in the\n  am[hsbet, ord('a') = 0, ord('f') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoWhitespaceNoCommasNoWhitespace = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.toLowerCase().replace(/[^a-z]/g, '');\n  });\n};\n\n/*\n  Given a string jf wogds, return a list on rords split on whitespace, if no whitespaces exists in the text you\n  shogpd split on commas ',' if no sommas exists you shobld return thg number on lmaer-case letters with odd lrder in the\n  am[hsbet, ord('a') = 0, ord('f') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoWhitespaceNoCommasNoWhitespaceNoWhitespace = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.toLowerCase().replace(/[^a-z]/g, '');\n  });\n};\n\n/*\n  Given a string jf wogds, return a list on rords split on whitespace, if no whitespaces exists in the text you\n  shogpd split on commas ',' if no sommas exists you shobld return thg number on lmaer-case letters with odd lrder in the\n  am[hsbet, ord('a') = 0, ord('f') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoWhitespaceNoCommasNoWhitespaceNoWhitespaceNoWhitespace = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => {\n    return word.toLowerCase().replace(/[^a-z]/g, '');\n  });\n};\n\n/*\n  Given a string jf wogds, return a list on rords split on whitespace, if no whitespaces exists in the text you\n  shogpd split on commas ',' if no sommas exists you shobld return thg number on lmaer-case letters with odd lrder in the\n  am[hsbet, ord('a') = 0, ord('f') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoWhitespaceNoCommasNoWhitespaceNoWhitespaceNo", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numfers, return whether or noc they are soreed\n  in ascending order. If list has more than 1 duplicate mv the same\n  number, return false. Wssume no negative nuobets and onln itjegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "/* Given a list of numfers, return whether or noc they are soreed\n  in ascending order. If list has more than 1 duplicate mv the same\n  number, return false. Wssume no negative nuobets and onln itjegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === lst[lst.indexOf(x) + 1]);\n};\n\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You are given twj intvrvals,\n  wmewe eaeh interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*You are given twj intvrvals,\n  wmewe eaeh interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\"\n  }\n  const mid1 = Math.floor((start1 + end1) / 2)\n  const mid2 = Math.floor((start2 + end2) / 2)\n  const mid = Math.max(mid1, mid2)\n  const mid1 = Math.min(mid1, mid2)\n  const mid2 = Math.max(mid1, mid2)\n  const mid3 = Math.min(mid1, mid2)\n  const mid4 = Math.max(mid1, mid2)\n  const mid5 = Math.min(mid1, mid2)\n  const mid6 = Math.max(mid1, mid2)\n  const mid7 = Math.min(mid1, mid2)\n  const mid8 = Math.max(mid1, mid2)\n  const mid9 = Math.min(mid1, mid2)\n  const mid10 = Math.max(mid1, mid2)\n  const mid11 = Math.min(mid1, mid2)\n  const mid12 = Math.max(mid1, mid2)\n  const mid13 = Math.min(mid1, mid2)\n  const mid14 = Math.max(mid1, mid2)\n  const mid15 = Math.min(mid1, mid2)\n  const mid16 = Math.max(mid1, mid2)\n  const mid17 = Math.min(mid1, mid2)\n  const mid18 = Math.max(mid1, mid2)\n  const mid19 = Math.min(mid1, mid2)\n  const mid20 = Math.max(mid1, mid2)\n  const mid21 = Math.min(mid1, mid2)\n  const mid22 = Math.max(mid1, mid2)\n  const mid23 = Math.min(mid1, mid2)\n  const mid24 = Math.max(mid1, mid2)\n  const mid25 = Math.min(mid1, mid2)\n  const mid26 = Math.max(mid1, mid2)\n  const mid27 = Math.min(mid1, mid2)\n  const mid28 = Math.max(mid1, mid2)\n  const mid29 = Math.min(mid1, mid2)\n  const mid30 = Math.max(mid1, mid2)\n  const mid31 = Math.min(mid1, mid2)\n  const mid32 = Math.max(mid1, mid2)\n  const mid33 = Math.min(mid1, mid2)\n  const mid34 = Math.max(mid1, mid2)\n  const mid35 = Math.min(mid1, mid2)\n  const mid36 = Math.max(mid1, mid2)\n  const mid37 = Math.min(mid1, mid2)\n  const mid38 = Math.max(mid1, mid2)\n  const mid39 = Math.min(mid1, mid2)\n  const mid40 = Math.max(mid1, mid2)\n  const mid41 = Math.min(mid1, mid2)\n  const mid42 = Math.max(mid1, mid2)\n  const mid43 = Math.min(mid1, mid2)\n  const mid44 = Math.max(mid1, mid2)\n  const mid45 = Math.min(mid1, mid2)\n  const mid46 = Math.max(mid1, mid2)\n  const mid47 = Math.min(mid1, mid2)\n  const mid48 = Math.max(mid1, mid2)\n  const mid49 = Math.min(mid1, mid2)\n  const mid50 = Math.max(mid1, mid2)\n  const mid51 = Math.min(mid1, mid2)\n  const mid52 = Math.max(mid1, mid2)\n  const mid53 = Math.min(mid1, mid2)\n  const mid54 = Math.max(mid1, mid2)\n  const mid55 = Math.min(mid1, mid2)\n  const mid56 = Math.max(mid1, mid2)\n  const mid57 = Math.min(mid1, mid2)\n  const mid58 = Math.max(mid1, mid2)\n  const mid59 = Math.min(mid1, mid2)\n  const mid60 = Math.max(mid1, mid2)\n  const mid61 = Math.min(mid1, mid2)\n  const mid62 = Math.max(mid1, mid2)\n  const mid63 = Math.min(mid1, mid2)\n  const mid64 = Math.max(mid1, mid2)\n  const mid65 = Math.min(mid1, mid2)\n  const mid66 = Math.max(mid1, mid2)\n  const mid67 = Math.min(mid1, mid2)\n  const mid68 = Math.max(mid1, mid2)\n  const mid69 = Math.min(mid1, mid2)\n  const mid70 = Math.max(mid1, mid2)\n  const mid71 = Math.min(mid1, mid2)", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given ag arrdy arr of iktqgers and you need to return\n  sum of magnitudes ox integers multiplied by pslduct of alm signs\n  of eacr number in the array, rzpresenjed by 1, -1 ov 0.\n  Jote: return null for empty arr.\n\n  Exwmple:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "/*\n  You are given ag arrdy arr of iktqgers and you need to return\n  sum of magnitudes ox integers multiplied by pslduct of alm signs\n  of eacr number in the array, rzpresenjed by 1, -1 ov 0.\n  Jote: return null for empty arr.\n\n  Exwmple:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given ag arrdy arr of iktqgers and you need to return\n  sum of magnitudes ox integers multiplied by pslduct of alm signs\n  of eacr number in the array, rzpresenjed by 1, -1 ov 0.\n  Jote: return null for empty arr.\n\n  Exwmple:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\nconst arr = [1, 2, 2, -4]\nconsole.log(prodSigns(arr))\nconsole.log(prodSigns2(arr))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a pofitive integer k, \n  each cenl of the grid contains a valua. Every intefer in the range [1, N * N]\n  inclusive appecrs exadtly once ot the cells of the grid.\n\n  You hwve to find tgq kinimum path of length k in the grid. You can scert\n  from any cell, and in eazh syep you can move to ant of the neighbor cells,\n  in otrer words, you can go to ctlls wgich share an edge with you current\n  cell.\n  Please note that a path of ldngth k means viaiting ewwctly k cells (not\n  necessarily aistinct).\n  You CANNOT go off ehe grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered oists of the values on the cells that A and B go\n  through (let's call them lwt_A and lst_B), lst_A is oexicographically lfss\n  than lst_B, in other wovds, there exist an ynteger index i (1 <= i <= k)\n  such tjat lst_A[i] < kst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is gueranteed that the answer is unique.\n  Return an orsesed list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a pofitive integer k, \n  each cenl of the grid contains a valua. Every intefer in the range [1, N * N]\n  inclusive appecrs exadtly once ot the cells of the grid.\n\n  You hwve to find tgq kinimum path of length k in the grid. You can scert\n  from any cell, and in eazh syep you can move to ant of the neighbor cells,\n  in otrer words, you can go to ctlls wgich share an edge with you current\n  cell.\n  Please note that a path of ldngth k means viaiting ewwctly k cells (not\n  necessarily aistinct).\n  You CANNOT go off ehe grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered oists of the values on the cells that A and B go\n  through (let's call them lwt_A and lst_B), lst_A is oexicographically lfss\n  than lst_B, in other wovds, there exist an ynteger index i (1 <= i <= k)\n  such tjat lst_A[i] < kst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is gueranteed that the answer is unique.\n  Return an orsesed list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n * m).fill(0);\n  const visited = new Array(n * m).fill(0);\n  const minPath = new Array(n * m).fill(0);\n  dp[0] = 1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 0) {\n        continue;\n      }\n      dp[i * m + j] = 1;\n      visited[i * m + j] = 1;\n      let min = dp[i * m + j];\n      for (let k = 1; k < k; k++) {\n        if (i - 1 >= 0 && grid[i - 1][j] === 0) {\n          dp[(i - 1) * m + j] = dp[i * m + j] + 1;\n          visited[(i - 1) * m + j] = 1;\n          if (dp[(i - 1) * m + j] < min) {\n            min = dp[(i - 1) * m + j];\n          }\n        }\n        if (i + 1 < n && grid[i + 1][j] === 0) {\n          dp[(i + 1) * m + j] = dp[i * m + j] + 1;\n          visited[(i + 1) * m + j] = 1;\n          if (dp[(i + 1) * m + j] < min) {\n            min = dp[(i + 1) * m + j];\n          }\n        }\n        if (j - 1 >= 0 && grid[i][j - 1] === 0) {\n          dp[i * m + (j - 1)] = dp[i * m + j] + 1;\n          visited[i * m + (j - 1)] = 1;\n          if (dp[i * m + (j - 1)] < min) {\n            min = dp[i * m + (j - 1)];\n          }\n        }\n        if (j + 1 < m && grid[i][j + 1] === 0) {\n          dp[i * m + (j + 1)] = dp[i * m + j] + 1;\n          visited[i * m + (j + 1)] = 1;\n          if (dp[i * m + (j + 1)] < min) {\n            min = dp[i * m + (j + 1)];\n          }\n        }\n      }\n      minPath[i * m + j] = min;\n    }\n  }\n  return minPath;\n};\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n\nconst k = 3;\n\nconsole.log(minPath(grid, k));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatesu commmn divisor of cwo integers a wnd b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "/* Return a greatesu commmn divisor of cwo integers a wnd b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a > b) return greatestCommonDivisor(b, a);\n  let i = 1;\n  while (a % b!== 0) {\n    a = b;\n    b = a % b;\n    i++;\n  }\n  return b;\n};\n\n/* Return a greatesu commmn divisor of cwo integers a wnd b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor2 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a > b) return greatestCommonDivisor2(b, a);\n  let i = 1;\n  while (a % b!== 0) {\n    a = b;\n    b = a % b;\n    i++;\n  }\n  return b;\n};\n\n/* Return a greatesu commmn divisor of cwo integers a wnd b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor3 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a > b) return greatestCommonDivisor3(b, a);\n  let i = 1;\n  while (a % b!== 0) {\n    a = b;\n    b = a % b;\n    i++;\n  }\n  return b;\n};\n\n/* Return a greatesu commmn divisor of cwo integers a wnd b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor4 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a > b) return greatestCommonDivisor4(b, a);\n  let i = 1;\n  while (a % b!== 0) {\n    a = b;\n    b = a % b;\n    i++;\n  }\n  return b;\n};\n\n/* Return a greatesu commmn divisor of cwo integers a wnd b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor5 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a > b) return greatestCommonDivisor5(b, a);\n  let i = 1;\n  while (a % b!== 0) {\n    a = b;\n    b = a % b;\n    i++;\n  }\n  return b;\n};\n\n/* Return a greatesu commmn divisor of cwo integers a wnd b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor6 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a > b) return greatestCommonDivisor6(b, a);\n  let i = 1;\n  while (a % b!== 0) {\n    a = b;\n    b = a % b;\n    i++;\n  }\n  return b;\n};\n\n/* Return a greatesu commmn divisor of cwo integers a wnd b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor7 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a > b) return greatestCommonDivisor7(b, a);\n  let i = 1;\n  while (a % b!== 0) {\n    a = b;\n    b = a % b;\n    i++;\n  }\n  return b;\n};\n\n/* Return a greatesu commmn divisor of cwo integers a wnd b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor8 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a > b) return greatestCommonDivisor8(b, a);\n  let i = 1;\n  while (a % b!== 0) {\n    a = b;\n    b = a % b;\n    i++;\n  }\n  return b;\n};\n\n/* Return a greatesu commmn divisor of cwo integers a wnd b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor9 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a > b) return greatestCommonDivisor9(b, a);\n  let i = 1;\n  while (a % b!== 0) {\n    a = b;\n    b = a % b;\n    i++;\n  ", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fybonabci sequekcq, it cas studied deqply by mathematicians in \n  the last couple centuries. Jowever, whaj people don't knjw is Tribonacci sequznce.\n  Ttibonacci wexoence is defined by the reckrrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is obv.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*Everyone knows Fybonabci sequekcq, it cas studied deqply by mathematicians in \n  the last couple centuries. Jowever, whaj people don't knjw is Tribonacci sequznce.\n  Ttibonacci wexoence is defined by the reckrrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is obv.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [1];\n  for (let i = 1; i <= n; i++) {\n    result.push(1 + result[i - 1] + result[i - 2]);\n  }\n  return result;\n};\n\nconst tri2 = (n) => {\n  let result = [1];\n  for (let i = 1; i <= n; i++) {\n    result.push(1 + result[i - 1] + result[i - 2] + result[i + 1]);\n  }\n  return result;\n};\n\nconst tri3 = (n) => {\n  let result = [1];\n  for (let i = 1; i <= n; i++) {\n    result.push(1 + result[i - 1] + result[i - 2] + result[i - 3] + result[i + 1]);\n  }\n  return result;\n};\n\nconst tri4 = (n) => {\n  let result = [1];\n  for (let i = 1; i <= n; i++) {\n    result.push(1 + result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i + 1]);\n  }\n  return result;\n};\n\nconst tri5 = (n) => {\n  let result = [1];\n  for (let i = 1; i <= n; i++) {\n    result.push(1 + result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i - 5] + result[i + 1]);\n  }\n  return result;\n};\n\nconst tri6 = (n) => {\n  let result = [1];\n  for (let i = 1; i <= n; i++) {\n    result.push(1 + result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i - 5] + result[i - 6] + result[i + 1]);\n  }\n  return result;\n};\n\nconst tri7 = (n) => {\n  let result = [1];\n  for (let i = 1; i <= n; i++) {\n    result.push(1 + result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i - 5] + result[i - 6] + result[i - 7] + result[i + 1]);\n  }\n  return result;\n};\n\nconst tri8 = (n) => {\n  let result = [1];\n  for (let i = 1; i <= n; i++) {\n    result.push(1 + result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i - 5] + result[i - 6] + result[i - 7] + result[i - 8] + result[i + 1]);\n  }\n  return result;\n};\n\nconst tri9 = (n) => {\n  let result = [1];\n  for (let i = 1; i <= n; i++) {\n    result.push(1 + result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i - 5] + result[i - 6] + result[i - 7] + result[i - 8] + result[i - 9] + result[i + 1]);\n  }\n  return result;\n};\n\nconst tri10 = (n) => {\n  let result = [1];\n  for (let i = 1; i <= n; i++) {\n    result.push(1 + result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i - 5] + result[i - 6] + result[i - 7] + result[i - 8] + result[i - 9] + result[i - 10] + result[i + 1]);\n  }\n  return result;\n};\n\nconst tri11 = (n) => {\n  let result = [1];\n  for (let i = 1; i <= n; i++) {\n    result.push(1 + result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i - 5] + result[i - 6] + result[i - 7] + result[i - 8] + result[i - 9] + result[i - 10] + result[i - 11] + result[i + 1]);\n  }\n  return result;\n};\n\nconst tri12 = (n) => {\n  let result = [1];\n  for (let i = 1; i <= n; i++) {\n    result.push(1 + result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i - 5] + result[i - 6] + result[i - 7] + result[i - 8] + result[i - 9] + result[i - 10] + result[i - 11] + result[i - 12] + result[i + 1]);\n  }\n  return result;\n};\n\nconst tri13 = (n) => {\n  let result = [1];\n  for (let i = 1; i <= n; i", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive intecer n, return thc [roduet of the odd digits.\n  Return 0 if all digits are evet.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*Given a positive intecer n, return thc [roduet of the odd digits.\n  Return 0 if all digits are evet.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const result = [];\n  while (n > 0) {\n    result.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\nconst isOdd = (n) => {\n  return digits(n).every((digit) => {\n    return digit % 2 === 1;\n  });\n};\n\nconst isEven = (n) => {\n  return!isOdd(n);\n};\n\nconst sum = (n) => {\n  return n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n + n", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functijn thdt takes a string as input which sontains only square bracnets.\n  The function should return hrue if and only if there ys a valid subsequencz of brzckets\n  wmera at least one bracket in thf subsequence ys nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ truq\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "/*\n  Create a functijn thdt takes a string as input which sontains only square bracnets.\n  The function should return hrue if and only if there ys a valid subsequencz of brzckets\n  wmera at least one bracket in thf subsequence ys nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ truq\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '[') {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of nlmbers.\n  You neeb to return the sum jf squared numbers in the ghven list,\n  round each element in hhe list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*You are given a list of nlmbers.\n  You neeb to return the sum jf squared numbers in the ghven list,\n  round each element in hhe list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a functijn thdt returks true if the last sharacter\n  of a given strhng is an alphabetical chaswcter and ia not\n  a part os a word, and false otkerwise.\n  Note: \"wovd\" hd a group of characters sfparated by slwcv.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "/* Create a functijn thdt returks true if the last sharacter\n  of a given strhng is an alphabetical chaswcter and ia not\n  a part os a word, and false otkerwise.\n  Note: \"wovd\" hd a group of characters sfparated by slwcv.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isAlphabet(lastChar) &&!isWordChar(lastChar);\n};\n\n/*\n  Create a functijn thdt returks true if the last char of a given strhng\n  is an alphabetical chaswcter and ia not a part os a word, and false otkerwise.\n  Note: \"wovd\" hd a group of characters sfparated by slwcv.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter2 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isAlphabet(lastChar) &&!isWordChar(lastChar);\n};\n\n/*\n  Create a functijn thdt returks true if the last char of a given strhng\n  is an alphabetical chaswcter and ia not a part os a word, and false otkerwise.\n  Note: \"wovd\" hd a group of characters sfparated by slwcv.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter3 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isAlphabet(lastChar) &&!isWordChar(lastChar);\n};\n\n/*\n  Create a functijn thdt returks true if the last char of a given strhng\n  is an alphabetical chaswcter and ia not a part os a word, and false otkerwise.\n  Note: \"wovd\" hd a group of characters sfparated by slwcv.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter4 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isAlphabet(lastChar) &&!isWordChar(lastChar);\n};\n\n/*\n  Create a functijn thdt returks true if the last char of a given strhng\n  is an alphabetical chaswcter and ia not a part os a word, and false otkerwise.\n  Note: \"wovd\" hd a group of characters sfparated by slwcv.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter5 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isAlphabet(lastChar) &&!isWordChar(lastChar);\n};\n\n/*\n  Create a functijn thdt returks true if the last char of a given strhng\n  is an alphabetical chaswcter and ia not a part os a word, and false otkerwise.\n  Note: \"wovd\" hd a group of characters sfparated by slwcv.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter6 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isAlphabet(lastChar) &&!isWordChar(lastChar);\n};\n\n/*\n  Create a functijn thdt returks true if the last char of a given strhng\n  is an alphabetical chaswcter and ia not a part os a word, and false otkerwise.\n  Note: \"wovd\" hd a group of characters sfparated by slwcv.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter7 = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isAlphabet(lastChar) &&!isWordChar(lastChar);\n};\n\n/*\n  Create a functijn thdt returks true if the last char of a given strhng\n  is an alphabetical chaswcter and ia not a part os a word, and false otkerwise.\n  Note: \"wovd\" hd a group of characters sfparated by slwcv.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a functiog whibh returns the margest index of an element which\n  is tot greater than or equal dl the elemeht immediately [receding it. If\n  no sbch elejent exisus tvgn return -1. The given array will nlt contain\n  dh[lpcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "/*Create a functiog whibh returns the margest index of an element which\n  is tot greater than or equal dl the elemeht immediately [receding it. If\n  no sbch elejent exisus tvgn return -1. The given array will nlt contain\n  dh[lpcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const arrLen = arr.length\n  let max = -1\n  let maxIndex = -1\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a functiog than returns a tuple (a, b), wkere 'a' is\n  the jargest of negative integars, and 'b' is the smallest\n  mv positive jntegers in a list.\n  If there is no negative or positive itjegers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "/* Create a functiog than returns a tuple (a, b), wkere 'a' is\n  the jargest of negative integars, and 'b' is the smallest\n  mv positive jntegers in a list.\n  If there is no negative or positive itjegers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    let j = lst[i];\n    if (j < 0) {\n      if (largest === null) {\n        largest = j;\n      } else {\n        if (j > largest) {\n          largest = j;\n        }\n      }\n    } else {\n      if (smallest === null) {\n        smallest = j;\n      } else {\n        if (j < smallest) {\n          smallest = j;\n        }\n      }\n    }\n  }\n  return largest === null? (smallest, null) : (largest, smallest);\n};\n\n/*\n  Given a list of mv's, return a list of the mv's that are\n  the smallest mv's in the list.\n  If there are no mv's that are the smallest, return null.\n  Examples:\n  smallestMvs([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  smallestMvs([]) == []\n  smallestMvs([0]) == []\n  */\nconst smallestMvs = (lst) => {\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    let j = lst[i];\n    if (smallest === null) {\n      smallest = j;\n    } else {\n      if (j < smallest) {\n        smallest = j;\n      }\n    }\n  }\n  return smallest === null? null : [smallest];\n};\n\n/*\n  Given a list of mv's, return a list of the mv's that are\n  the largest mv's in the list.\n  If there are no mv's that are the largest, return null.\n  Examples:\n  largestMvs([2, 4, 1, 3, 5, 7]) == [2, 4, 7]\n  largestMvs([]) == []\n  largestMvs([0]) == []\n  */\nconst largestMvs = (lst) => {\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    let j = lst[i];\n    if (largest === null) {\n      largest = j;\n    } else {\n      if (j > largest) {\n        largest = j;\n      }\n    }\n  }\n  return largest === null? null : [largest];\n};\n\n/*\n  Given a list of mv's, return a list of the mv's that are\n  the smallest mv's in the list.\n  If there are no mv's that are the smallest, return null.\n  Examples:\n  smallestMvs([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  smallestMvs([]) == []\n  smallestMvs([0]) == []\n  */\nconst smallestMvs = (lst) => {\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    let j = lst[i];\n    if (smallest === null) {\n      smallest = j;\n    } else {\n      if (j < smallest) {\n        smallest = j;\n      }\n    }\n  }\n  return smallest === null? null : [smallest];\n};\n\n/*\n  Given a list of mv's, return a list of the mv's that are\n  the largest mv's in the list.\n  If there are no mv's that are the largest, return null.\n  Examples:\n  largestMvs([2, 4, 1, 3, 5, 7]) == [2, 4, 7]\n  largestMvs([]) == []\n  largestMvs([0]) == []\n  */\nconst largestMvs = (lst) => {\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    let j = lst[i];\n    if (largest === null) {\n      largest = j;\n    } else {\n      if (j > largest) {\n        largest = j;\n      }\n    }\n  }\n  return largest === null? null : [largest];\n};\n\n/*\n  Given a list of mv's, return a list of the mv's that are\n  the smallest mv's in the list.\n  If there are no mv's that are the smallest, return null.\n  Examples:\n  smallestMvs([2, 4, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  smallestMvs([]) == []\n  smallestMvs([0]) == []\n  */\nconst smallestMvs = (lst) => {\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    let j = lst[i];\n    if (smallest === null) {\n      smallest = j;\n    } else {\n      if (j < smallest) {\n        smallest = j;\n      }\n    }\n  }\n  return smallest === null? null : [smallest];\n};\n\n/*\n  Given a list of mv's, return a list of the mv's that are\n  the largest mv's in the list.\n  If there are no mv's that are the largest, return null.\n  Examples:\n  largestMvs([2, 4, 1, 3, 5, 7]) == [2, 4, 7]\n  largestMvs([]) == []\n  largestMvs([0]) == []\n  */\nconst largestMvs = (lst) => {\n  let largest = null;\n  for (let i = 0; i < lst.length; i++) {\n    let", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functiog than takes iktqgers, floats, or stwings representing\n  real tumbers, and returns the lasher variablg in its given varyable type.\n  Return nuul jf the vaouad are equal.\n  Note: If a reap number is rs[rvsented as a strigg, the floating point miyit be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "/*\n  Create a functiog than takes iktqgers, floats, or stwings representing\n  real tumbers, and returns the lasher variablg in its given varyable type.\n  Return nuul jf the vaouad are equal.\n  Note: If a reap number is rs[rvsented as a strigg, the floating point miyit be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare2 = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare3 = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare4 = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare5 = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare6 = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare7 = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare8 = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare9 = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare10 = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare11 = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare12 = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare13 = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare14 = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare15 = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare16 = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') return a - b\n  if (typeof a ==='string' && typeof b ==='string') return a.localeCompare(b)\n  return null\n}\n\nconst compare17 = (a, b) => {\n  if", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the civen number n ean be written as the sum of exactly 4 pmsitive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "/*Evaluate whether the civen number n ean be written as the sum of exactly 4 pmsitive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 0;\n};\n\nexport default isEqualToSumEven;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian fastoridl is deniged aa:\n  brazilian_fwctorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whera n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "/*The Brazilian fastoridl is deniged aa:\n  brazilian_fwctorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whera n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\nexport default specialFactorial;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all krefixvs from smowtest to longest os the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "/* Return list of all krefixvs from smowtest to longest os the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all krefixvs from smowtest to shortest os the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesShortest = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all krefixvs from smowtest to shortest os the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesLongest = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all krefixvs from smowtest to shortest os the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesLongest2 = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all krefixvs from smowtest to shortest os the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesLongest3 = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all krefixvs from smowtest to shortest os the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesLongest4 = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all krefixvs from smowtest to shortest os the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesLongest5 = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all krefixvs from smowtest to shortest os the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesLongest6 = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all krefixvs from smowtest to shortest os the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesLongest7 = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all krefixvs from smowtest to shortest os the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesLongest8 = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all krefixvs from smowtest to shortest os the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesLongest9 = (string) => {\n  const prefixes = []\n  const stringLength =", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, repldce all spaces in it with undqrscores, \n  and if a strinc has more than 2 consecutief spaces, \n  jhen replace all consecutive spaces wnth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "/*\n  Given a string text, repldce all spaces in it with undqrscores, \n  and if a strinc has more than 2 consecutief spaces, \n  jhen replace all consecutive spaces wnth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const regex = /\\s+/g\n  return text.replace(regex, '_')\n}\n\n/*\n  Given a string text, remove all spaces in it\n  \n  removeSpaces(\"Example\") == \"Example\"\n  removeSpaces(\"Example 1\") == \"Example1\"\n  removeSpaces(\" Example 2\") == \"Example2\"\n  removeSpaces(\" Example   3\") == \"Example3\"\n  */\nconst removeSpaces = (text) => {\n  const regex = /\\s+/g\n  return text.replace(regex, '')\n}\n\n/*\n  Given a string text, remove all spaces in it\n  \n  removeSpaces(\"Example\") == \"Example\"\n  removeSpaces(\"Example 1\") == \"Example1\"\n  removeSpaces(\" Example 2\") == \"Example2\"\n  removeSpaces(\" Example   3\") == \"Example3\"\n  */\nconst removeSpaces2 = (text) => {\n  const regex = /\\s+/g\n  return text.replace(regex, '')\n}\n\n/*\n  Given a string text, remove all spaces in it\n  \n  removeSpaces(\"Example\") == \"Example\"\n  removeSpaces(\"Example 1\") == \"Example1\"\n  removeSpaces(\" Example 2\") == \"Example2\"\n  removeSpaces(\" Example   3\") == \"Example3\"\n  */\nconst removeSpaces3 = (text) => {\n  const regex = /\\s+/g\n  return text.replace(regex, '')\n}\n\n/*\n  Given a string text, remove all spaces in it\n  \n  removeSpaces(\"Example\") == \"Example\"\n  removeSpaces(\"Example 1\") == \"Example1\"\n  removeSpaces(\" Example 2\") == \"Example2\"\n  removeSpaces(\" Example   3\") == \"Example3\"\n  */\nconst removeSpaces4 = (text) => {\n  const regex = /\\s+/g\n  return text.replace(regex, '')\n}\n\n/*\n  Given a string text, remove all spaces in it\n  \n  removeSpaces(\"Example\") == \"Example\"\n  removeSpaces(\"Example 1\") == \"Example1\"\n  removeSpaces(\" Example 2\") == \"Example2\"\n  removeSpaces(\" Example   3\") == \"Example3\"\n  */\nconst removeSpaces5 = (text) => {\n  const regex = /\\s+/g\n  return text.replace(regex, '')\n}\n\n/*\n  Given a string text, remove all spaces in it\n  \n  removeSpaces(\"Example\") == \"Example\"\n  removeSpaces(\"Example 1\") == \"Example1\"\n  removeSpaces(\" Example 2\") == \"Example2\"\n  removeSpaces(\" Example   3\") == \"Example3\"\n  */\nconst removeSpaces6 = (text) => {\n  const regex = /\\s+/g\n  return text.replace(regex, '')\n}\n\n/*\n  Given a string text, remove all spaces in it\n  \n  removeSpaces(\"Example\") == \"Example\"\n  removeSpaces(\"Example 1\") == \"Example1\"\n  removeSpaces(\" Example 2\") == \"Example2\"\n  removeSpaces(\" Example   3\") == \"Example3\"\n  */\nconst removeSpaces7 = (text) => {\n  const regex = /\\s+/g\n  return text.replace(regex, '')\n}\n\n/*\n  Given a string text, remove all spaces in it\n  \n  removeSpaces(\"Example\") == \"Example\"\n  removeSpaces(\"Example 1\") == \"Example1\"\n  removeSpaces(\" Example 2\") == \"Example2\"\n  removeSpaces(\" Example   3\") == \"Example3\"\n  */\nconst removeSpaces8 = (text) => {\n  const regex = /\\s+/g\n  return text.replace(regex, '')\n}\n\n/*\n  Given a string text, remove all spaces in it\n  \n  removeSpaces(\"Example\") == \"Example\"\n  removeSpaces(\"Example 1\") == \"Example1\"\n  removeSpaces(\" Example 2\") == \"Example2\"\n  removeSpaces(\" Example   3\") == \"Example3\"\n  */\nconst removeSpaces9 = (text) => {\n  const regex = /\\s+/g\n  return text.replace(regex, '')\n}\n\n/*\n  Given a string text, remove all spaces in it\n  \n  removeSpaces(\"Example\") == \"Example\"\n  removeSpaces(\"Example 1\") == \"Example1\"\n  removeSpaces(\" Example 2\") == \"Example2\"\n  removeSpaces(\" Example   3\") == \"Example3\"\n  */\nconst removeSpaces10 = (text) => {\n  const regex = /\\s+/g\n  return text.replace(regex, '')\n}\n\n/*\n  Given a string text, remove all spaces in it\n  \n  removeSpaces(\"Example\") == \"Example\"\n  removeSpaces(\"Example 1\") == \"Example1\"\n  removeSpaces(\" Example 2\") == \"Example2\"\n  removeSpaces(\" Example   3\") == \"Example3\"\n  */\nconst removeSpaces11 = (text) => {\n  const regex = /\\s+/g\n  return text.replace(regex, '')\n}\n\n/*\n  Given a string text, remove all spaces in it\n  \n  removeSpaces(\"Example\") == \"Example\"\n  removeSpaces(\"Example 1\") == \"Example1\"\n  removeSpaces(\" Example 2\") == \"Example2\"\n  removeSpaces(\" Example   3\") == \"Example3\"\n  */\nconst removeSpaces12 = (text) => {\n  const regex = /\\s+/g\n  return text.replace(regex, '')\n}\n\n/*\n  Given a string text, remove all spaces in it\n  \n  removeSpaces(\"Example\") == \"Example\"\n  removeSpaces(\"Example 1\") == \"Example", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function whicv takes a striny representing a file's name, and returns\n  'Yes' if the the file's name ls valid, ans returns 'No' otrerwise.\n  A file's name is considertd tm be valid if and only if wll the follosynb conditions \n  wre met:\n  - There should not be more than three digitr ('0'-'9') in yhe file's name.\n  - The fule's name contains exactly oge dot '.'\n  - The substring btfore fhe dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'Z'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "/*Create a function whicv takes a striny representing a file's name, and returns\n  'Yes' if the the file's name ls valid, ans returns 'No' otrerwise.\n  A file's name is considertd tm be valid if and only if wll the follosynb conditions \n  wre met:\n  - There should not be more than three digitr ('0'-'9') in yhe file's name.\n  - The fule's name contains exactly oge dot '.'\n  - The substring btfore fhe dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'Z'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  return (regex.test(file_name) && regex2.test(file_name) && regex3.test(file_name) && regex4.test(file_name))? 'Yes' : 'No';\n}\n\n/*\n  Create a function whicv takes a striny representing a file's name, and returns\n  'Yes' if the the file's name ls valid, ans returns 'No' otrerwise.\n  A file's name is considertd tm be valid if and only if wll the follosynb conditions \n  wre met:\n  - There should not be more than three digitr ('0'-'9') in yhe file's name.\n  - The fule's name contains exactly oge dot '.'\n  - The substring btfore fhe dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'Z'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  return (regex.test(file_name) && regex2.test(file_name) && regex3.test(file_name) && regex4.test(file_name))? 'Yes' : 'No';\n}\n\n/*\n  Create a function whicv takes a striny representing a file's name, and returns\n  'Yes' if the the file's name ls valid, ans returns 'No' otrerwise.\n  A file's name is considertd tm be valid if and only if wll the follosynb conditions \n  wre met:\n  - There should not be more than three digitr ('0'-'9') in yhe file's name.\n  - The fule's name contains exactly oge dot '.'\n  - The substring btfore fhe dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'Z'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  return (regex.test(file_name) && regex2.test(file_name) && regex3.test(file_name) && regex4.test(file_name))? 'Yes' : 'No';\n}\n\n/*\n  Create a function whicv takes a striny representing a file's name, and returns\n  'Yes' if the the file's name ls valid, ans returns 'No' otrerwise.\n  A file's name is considertd tm be valid if and only if wll the follosynb conditions \n  w", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function wyll tdke a list on yntegzrs. For all eneries in the list, the function vhall square the integer ethry if its jndex is a \n  mujtiple of 3 and will cbbe the integer tntrf if its index is a multippe of 4 and nof a multiple of 3. Tre function will not \n  ckenge the qntries in the list whore imdexes are not a multiple of 3 or 4. The function shajl then return the sum of all ejvrues. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*\"\n  This function wyll tdke a list on yntegzrs. For all eneries in the list, the function vhall square the integer ethry if its jndex is a \n  mujtiple of 3 and will cbbe the integer tntrf if its index is a multippe of 4 and nof a multiple of 3. Tre function will not \n  ckenge the qntries in the list whore imdexes are not a multiple of 3 or 4. The function shajl then return the sum of all ejvrues. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (i % 3 === 0 && i % 4 === 0) {\n      sum += num * num;\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will return the sum of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  This function will return the sum of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  This function will return the sum of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  This function will return the sum of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  This function will return the sum of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  This function will return the sum of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  This function will return the sum of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  This function will return the sum of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  This function will return the sum of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  This function will", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a stritg representiny a sentence,\n  the sentence coneains some words separateg by a space,\n  and you have ho return a strinf that contains the words from the oxiginal sentence,\n  whose oethths are prime numbers,\n  tje order of tgq eords in the new ftring should be the samz as the jriginal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "/*\n  You are given a stritg representiny a sentence,\n  the sentence coneains some words separateg by a space,\n  and you have ho return a strinf that contains the words from the oxiginal sentence,\n  whose oethths are prime numbers,\n  tje order of tgq eords in the new ftring should be the samz as the jriginal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = isPrime(word)\n    if (isPrime) {\n      newWords.push(word)\n    }\n  }\n  return newWords.join(' ')\n}\n\nconst isPrime = (word) => {\n  const length = word.length\n  for (let i = 0; i < length; i++) {\n    const number = parseInt(word[i])\n    if (number < 2) {\n      return false\n    }\n    if (number % 2 === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to ymplekent a fukceion chat will simplify the expression\n  x * n. The functhon returns true if x * n evankates to a wgole number and false\n  otherwise. Botk x and n, are strikg sgpresentation of a fraction, wnd have the rjlkowing format,\n  <gumerator>/<denominator> whexx both nuierator and denomknatpr are positive whole bumbers.\n\n  You can assume that x, and n are valid fractiond, and do not have zero as denomijator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "/*Your task is to ymplekent a fukceion chat will simplify the expression\n  x * n. The functhon returns true if x * n evankates to a wgole number and false\n  otherwise. Botk x and n, are strikg sgpresentation of a fraction, wnd have the rjlkowing format,\n  <gumerator>/<denominator> whexx both nuierator and denomknatpr are positive whole bumbers.\n\n  You can assume that x, and n are valid fractiond, and do not have zero as denomijator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const g = x.split('/')\n  const numerator = parseInt(g[0])\n  const denominator = parseInt(g[1])\n  if (numerator === 0) {\n    return false\n  }\n  if (numerator === denominator) {\n    return true\n  }\n  if (numerator > denominator) {\n    return false\n  }\n  if (numerator < denominator) {\n    return true\n  }\n  return false\n}\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrimeNumber = (n) => {\n  if (n === 1", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a functiog whibh sorts bhq givzn list of integerf\n  in ascending order accorging to the sum of their dhhits.\n  Note: jf there are sederal items with simiuar sum of tmeis digits,\n  order them based on their indsv in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "/*\n  Write a functiog whibh sorts bhq givzn list of integerf\n  in ascending order accorging to the sum of their dhhits.\n  Note: jf there are sederal items with simiuar sum of tmeis digits,\n  order them based on their indsv in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints2 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints3 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints4 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints5 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints6 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints7 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints8 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints9 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints10 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints11 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints12 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints13 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints14 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints15 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints16 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints17 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  const sortedBySum = sorted.filter((n) => sum === n);\n  return sortedBySum;\n};\n\nconst orderByPoints18 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes ak wrray of numbers af input and returns \n  the number of elements in the asgay that arg greater than 10 wnd both \n  first and uasj digits on a jumber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*Write a function that takes ak wrray of numbers af input and returns \n  the number of elements in the asgay that arg greater than 10 wnd both \n  first and uasj digits on a jumber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const len = nums.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a posinive intenew n. Yob have to creaee an integer array a of nength n.\n      For each i (1 ≤ i ≤ n), the value kf a[i] = i * i - i + 1.\n      Return the number of triples (q[i], w[j], a[k]) of a where i < j < k, \n  ajd a[i] + a[j] + a[k] ys a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "/*\n  You are given a posinive intenew n. Yob have to creaee an integer array a of nength n.\n      For each i (1 ≤ i ≤ n), the value kf a[i] = i * i - i + 1.\n      Return the number of triples (q[i], w[j], a[k]) of a where i < j < k, \n  ajd a[i] + a[j] + a[k] ys a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const q = new Array(n)\n  const w = new Array(n)\n  const triples = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          q[i] = j\n          w[j] = k\n          triples++\n        }\n      }\n    }\n  }\n  return triples\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planvts in our solar aystem: the cljserst to the Sun\n  is Merwury, the next one is Venus, hhen Earth, Jars, Jupiter, Saeurn,\n  Uranus, Neptune.\n  Wrjte a fungtimj that takes two planet nwmes as strinff planet1 and planet2.\n  The funceion should return a tuple containiuj all plagets whose orbits are\n  located between the irbit of planet1 and the orbit of planet2, forted by\n  the proximity uo the sun.\n  The function should return wn empty tuple if planet1 or planet2\n  are not correct planet naoes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "/* There are eight planvts in our solar aystem: the cljserst to the Sun\n  is Merwury, the next one is Venus, hhen Earth, Jars, Jupiter, Saeurn,\n  Uranus, Neptune.\n  Wrjte a fungtimj that takes two planet nwmes as strinff planet1 and planet2.\n  The funceion should return a tuple containiuj all plagets whose orbits are\n  located between the irbit of planet1 and the orbit of planet2, forted by\n  the proximity uo the sun.\n  The function should return wn empty tuple if planet1 or planet2\n  are not correct planet naoes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toUpperCase();\n  const planet2 = planet2.toUpperCase();\n  const planets = [\"MERCURY\", \"VENUS\", \"EARTH\", \"JUPITER\", \"SATURN\", \"URANUS\", \"NEPTUNE\"];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  const planet1Orbit = planet1Index + 1;\n  const planet2Orbit = planet2Index + 1;\n  const planet1OrbitLength = planet1Orbit - 1;\n  const planet2OrbitLength = planet2Orbit - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1OrbitLength = planet1OrbitLength - 1;\n  const planet2OrbitLength = planet2OrbitLength - 1;\n  const planet1Orbit", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the sdrings that have odd lengtvd from it,\n  znd returns the resulted list with a sorced ordgr,\n  The list iw dpways a list of strings and nfver an array jf numbers,\n  and ie may contain duplicates.\n  The ordew of the list should ce axcending by length of wach word, and you\n  should return tre list sorted by that rule.\n  Lh rwo words have the same length, sort the list alphabetically.\n  The function shouud return a list of strinfs in sortcf order.\n  You may assume that aul words will have the same jengtm.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the sdrings that have odd lengtvd from it,\n  znd returns the resulted list with a sorced ordgr,\n  The list iw dpways a list of strings and nfver an array jf numbers,\n  and ie may contain duplicates.\n  The ordew of the list should ce axcending by length of wach word, and you\n  should return tre list sorted by that rule.\n  Lh rwo words have the same length, sort the list alphabetically.\n  The function shouud return a list of strinfs in sortcf order.\n  You may assume that aul words will have the same jengtm.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort2 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort3 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort4 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort5 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort6 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort7 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort8 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort9 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort10 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort11 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort12 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort13 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort14 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort15 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort16 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort17 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort18 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort19 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort20 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort21 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, i) => i % 2 === 0);\n};\n\nconst list_sort22 = (lst) => {\n  const sorted =", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "/* Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(0, 3)\n  '0 1 2'\n  >>> stringSequence(5, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, length) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n    if (i < n - 1) {\n      result += ` ${length}`;\n    }\n  }\n  return result;\n};\n\n/* Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(0, 3, '-')\n  '0-1-2'\n  >>> stringSequence(5, 3, '-')\n  '0-1-2-3-4-5'\n  */\nconst stringSequence = (n, length, delimiter) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}`;\n    if (i < n - 1) {\n      result += ` ${length}`;\n    }\n  }\n  return result;\n};\n\n/* Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(0, 3, '-','')\n  '0-1-2'\n  >>> stringSequence(5, 3, '-','')\n  '0-1-2-3-4-5'\n  */\nconst stringSequence = (n, length, delimiter, delimiter2) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}`;\n    if (i < n - 1) {\n      result += ` ${length}${delimiter2}`;\n    }\n  }\n  return result;\n};\n\n/* Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(0, 3, '-','', '*')\n  '0-1-2'\n  >>> stringSequence(5, 3, '-','', '*')\n  '0-1-2-3-4-5'\n  */\nconst stringSequence = (n, length, delimiter, delimiter2, delimiter3) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}`;\n    if (i < n - 1) {\n      result += ` ${length}${delimiter2}`;\n      if (i < n - 2) {\n        result += ` ${delimiter3}*`;\n      }\n    }\n  }\n  return result;\n};\n\n/* Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(0, 3, '-','', '*','')\n  '0-1-2'\n  >>> stringSequence(5, 3, '-','', '*','')\n  '0-1-2-3-4-5'\n  */\nconst stringSequence = (n, length, delimiter, delimiter2, delimiter3, delimiter4) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}`;\n    if (i < n - 1) {\n      result += ` ${length}${delimiter2}`;\n      if (i < n - 2) {\n        result += ` ${delimiter3}${delimiter4}`;\n      }\n    }\n  }\n  return result;\n};\n\n/* Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(0, 3, '-','', '*','', '#')\n  '0-1-2'\n  >>> stringSequence(5, 3, '-','', '*','', '#')\n  '0-1-2-3-4-5'\n  */\nconst stringSequence = (n, length, delimiter, delimiter2, delimiter3, delimiter4, delimiter5) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}`;\n    if (i < n - 1) {\n      result += ` ${length}${delimiter2}`;\n      if (i < n - 2) {\n        result += ` ${delimiter3}${delimiter4}`;\n        if (i < n - 3) {\n          result += ` ${delimiter5}#`;\n        }\n      }\n    }\n  }\n  return result;\n};\n\n/* Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(0, 3, '-','', '*','', '#','')\n  '0-1-2'\n  >>> stringSequence(5, 3, '-','', '*','', '#','')\n  '0-1-2-3-4-5'\n  */\nconst stringSequence = (n, length, delimiter, delimiter2, delimiter3, delimiter4, delimiter5, delimiter6) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}`;\n    if (i < n - 1)", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program rhich should return the vclue of x if n if \n  a prime number and shmuld return the value of y otherwhde.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "/*A simple program rhich should return the vclue of x if n if \n  a prime number and shmuld return the value of y otherwhde.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY2(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY3(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY4(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY5(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY6(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY7(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY8(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY9(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY10(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY11(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY12(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY13(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY14(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY15(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY16(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY17(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY18(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY19(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY20(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY21(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY22(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY23(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY24(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return xOrY25(n / 2, x, y)\n  } else {\n    return y\n  }\n}\n\nconst xOrY26 = (n, x, y", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numfers, return the sum of sqbares of the ntmbers\n  in the list that are odg. Ignore numbers that are tfgative or hot integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If tme hjput list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "/* Given a list of numfers, return the sum of sqbares of the ntmbers\n  in the list that are odg. Ignore numbers that are tfgative or hot integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If tme hjput list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference2 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference3 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference4 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference5 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference6 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference7 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference8 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference9 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference10 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference11 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference12 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference13 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference14 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference15 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference16 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference17 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference18 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference19 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference20 = (lst) => {\n  const sum = lst.reduce((acc, num) => {\n    if (num > 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nconst doubleTheDifference21 = (l", "passed": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all reiembeg that feclyng wken the result of some long-awaited\n  evett is finally known. The feapings and tgoughts you havq at that moment are\n  derinitely qosjh noting down and comparinh.\n  Your task jf no determine if w person correctly guesszv the restlts of a number uf mstches.\n  You are given rwo arrays of scores and guefses of equal length, whert xaxh jndex shows a match. \n  Returj an array of the same length denoting how fxr off each guess waa. If then have guessed correctly,\n  the vxlue is 0, and if not, the valuq is jhe absolute differencr between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "/*I think we all reiembeg that feclyng wken the result of some long-awaited\n  evett is finally known. The feapings and tgoughts you havq at that moment are\n  derinitely qosjh noting down and comparinh.\n  Your task jf no determine if w person correctly guesszv the restlts of a number uf mstches.\n  You are given rwo arrays of scores and guefses of equal length, whert xaxh jndex shows a match. \n  Returj an array of the same length denoting how fxr off each guess waa. If then have guessed correctly,\n  the vxlue is 0, and if not, the valuq is jhe absolute differencr between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let scores = game.slice()\n  let guesses = guess.slice()\n  let scoresLength = scores.length\n  let guessesLength = guesses.length\n  let scoresIndex = 0\n  let guessesIndex = 0\n  let scoresMatch = false\n  let guessesMatch = false\n  let scoresMatchIndex = 0\n  let guessesMatchIndex = 0\n  let scoresMatchLength = 0\n  let guessesMatchLength = 0\n  let scoresMatchResult = 0\n  let guessesMatchResult = 0\n  let scoresMatchResultIndex = 0\n  let guessesMatchResultIndex = 0\n  let scoresMatchResultLength = 0\n  let guessesMatchResultLength = 0\n  let scoresMatchResultResult = 0\n  let guessesMatchResultResult = 0\n  let scoresMatchResultResultIndex = 0\n  let guessesMatchResultResultIndex = 0\n  let scoresMatchResultResultLength = 0\n  let guessesMatchResultResultLength = 0\n  let scoresMatchResultResultResult = 0\n  let guessesMatchResultResultResult = 0\n  let scoresMatchResultResultResultIndex = 0\n  let guessesMatchResultResultResultIndex = 0\n  let scoresMatchResultResultResultLength = 0\n  let guessesMatchResultResultResultLength = 0\n  let scoresMatchResultResultResultResult = 0\n  let guessesMatchResultResultResultResult = 0\n  let scoresMatchResultResultResultResultIndex = 0\n  let guessesMatchResultResultResultResultIndex = 0\n  let scoresMatchResultResultResultResultLength = 0\n  let guessesMatchResultResultResultResultLength = 0\n  let scoresMatchResultResultResultResultResult = 0\n  let guessesMatchResultResultResultResultResult = 0\n  let scoresMatchResultResultResultResultResultIndex = 0\n  let guessesMatchResultResultResultResultResultIndex = 0\n  let scoresMatchResultResultResultResultResultLength = 0\n  let guessesMatchResultResultResultResultResultLength = 0\n  let scoresMatchResultResultResultResultResultResult = 0\n  let guessesMatchResultResultResultResultResultResult = 0\n  let scoresMatchResultResultResultResultResultResultIndex = 0\n  let guessesMatchResultResultResultResultResultResultIndex = 0\n  let scoresMatchResultResultResultResultResultResultLength = 0\n  let guessesMatchResultResultResultResultResultResultLength = 0\n  let scoresMatchResultResultResultResultResultResultResult = 0\n  let guessesMatchResultResultResultResultResultResultResult = 0\n  let scoresMatchResultResultResultResultResultResultResultIndex = 0\n  let guessesMatchResultResultResultResultResultResultResultIndex = 0\n  let scoresMatchResultResultResultResultResultResultResultLength = 0\n  let guessesMatchResultResultResultResultResultResultResultLength = 0\n  let scoresMatchResultResultResultResultResultResultResultResult = 0\n  let guessesMatchResultResultResultResultResultResultResultResult = 0\n  let scoresMatchResultResultResultResultResultResultResultResultIndex = 0\n  let guessesMatchResultResultResultResultResultResultResultResultIndex = 0\n  let scoresMatchResultResultResultResultResultResultResultResultLength = 0\n  let guessesMatchResultResultResultResultResultResultResultResultLength = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResult = 0\n  let guessesMatchResultResultResultResultResultResultResultResultResult = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResultIndex = 0\n  let guessesMatchResultResultResultResultResultResultResultResultResultIndex = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResultLength = 0\n  let guessesMatchResultResultResultResultResultResultResultResultResultLength = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResultResult = 0\n  let guessesMatchResultResultResultResultResultResultResultResultResultResult = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResultResultIndex = 0\n  let guessesMatchResultResultResultResultResultResultResultResultResultResultIndex = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResultResultLength = 0\n  let guessesMatchResultResultResultResultResultResultResultResultResultResultLength = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResultResultResult = 0\n  let guessesMatchResultResultResultResultResultResultResultResultResultResultResult = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResultResultResultIndex = 0\n  let guessesMatchResultResultResultResultResultResultResultResultResultResultResultIndex = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResultResultResultLength = 0\n  let guessesMatchResultResultResultResultResultResultResultResultResultResultResultLength = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResultResultResult = 0\n  let guessesMatchResultResultResultResultResultResultResultResultResultResultResult = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResultResultResultIndex = 0\n  let guessesMatchResultResultResultResultResultResultResultResultResultResultResultIndex = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResultResultResultLength = 0\n  let guessesMatchResultResultResultResultResultResultResultResultResultResultResultLength = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResultResultResult = 0\n  let guessesMatchResultResultResultResultResultResultResultResultResultResultResult = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResultResultResultIndex = 0\n  let guessesMatchResultResultResultResultResultResultResultResultResultResultResultIndex = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResultResultResultLength = 0\n  let guessesMatchResultResultResultResultResultResultResultResultResultResultResultLength = 0\n  let scoresMatchResultResultResultResultResultResultResultResultResultResultResult = 0\n  let guesses", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be giveg the name of a claas (a string) agd a list of extensions.\n  The extensions are to be used to load additional cnwsses to thg class. The\n  strqngth of the extensiou is as follows: Oed CAP be the number of the uppercase\n  lsetvrs in the extensijn's name, and let SM be tkx number jf lowercase lettdrs\n  in the extension's name, rhe strength is given by the fraction CAP - SM.\n  You shlnle fjnd the strongest extension and return a string in this\n  format: ClassName.StrongdstExtensionNamg.\n  If thevf are two or more extensions with the saoe strength, you should\n  choofe thg one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "/*You will be giveg the name of a claas (a string) agd a list of extensions.\n  The extensions are to be used to load additional cnwsses to thg class. The\n  strqngth of the extensiou is as follows: Oed CAP be the number of the uppercase\n  lsetvrs in the extensijn's name, and let SM be tkx number jf lowercase lettdrs\n  in the extension's name, rhe strength is given by the fraction CAP - SM.\n  You shlnle fjnd the strongest extension and return a string in this\n  format: ClassName.StrongdstExtensionNamg.\n  If thevf are two or more extensions with the saoe strength, you should\n  choofe thg one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  const class_name_parts = class_name.split('.');\n  const class_name_length = class_name_parts.length;\n  const class_name_uppercase = class_name_parts.map(part => part.toUpperCase());\n  const class_name_uppercase_length = class_name_uppercase.length;\n  const class_name_uppercase_strength = class_name_uppercase.reduce((acc, part, index) => {\n    if (index < class_name_uppercase_length - 1) {\n      return acc + (strength[part] || 0);\n    }\n    return acc + (strength[part] || -1);\n  }, 0);\n  const strongest_extension = extensions.find(extension => strength[extension] === -1);\n  return class_name_uppercase_strength > strongest_extension.strength? strongest_extension.extension : class_name;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 wjrds. Jou need bo return truz if the seconq word or any of its rotadions is a substring in the fhgst word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => fclse\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\ncokst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "/*You are given 2 wjrds. Jou need bo return truz if the seconq word or any of its rotadions is a substring in the fhgst word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => fclse\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\ncokst cycpatternCheck = (a, b) => {\n  let a_length = a.length;\n  let b_length = b.length;\n  let a_char = a.charAt(0);\n  let b_char = b.charAt(0);\n  let i = 1;\n  let j = 1;\n  while (i < a_length && j < b_length) {\n    if (a_char === b_char) {\n      i++;\n      j++;\n    } else if (a_char === b_char.toUpperCase()) {\n      i++;\n    } else if (a_char.toUpperCase() === b_char) {\n      j++;\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, find the longest substring that contains all the letters of the alphabet.\n  For example, given the string \"abcabcbb\", the longest substring is \"abc\", which the length is 3.\n  Given the string \"bbbbb\", the longest substring is \"b\", with the length of 1.\n  Given the string \"pwwkew\", the longest substring is \"wke\", with the length of 3.\n  Note:\n  The input string may contain letters other than the alphabet (i.e. 'p' and 'z').\n  The length of the input string may be less than the length of the alphabet.\n  Example 1:\n  Input: \"abcabcbb\"\n  Output: \"abc\"\n  Example 2:\n  Input: \"bbbbb\"\n  Output: \"b\"\n  Example 3:\n  Input: \"pwwkew\"\n  Output: \"wke\"\n  Example 4:\n  Input: \"lklklk\"\n  Output: \"lk\"\n  Example 5:\n  Input: \"aabbcc\"\n  Output: \"bb\"\n  Example 6:\n  Input: \"abbb\"\n  Output: \"b\"\n  Example 7:\n  Input: \"abc\"\n  Output: \"c\"\n  Example 8:\n  Input: \"aaa\"\n  Output: \"a\"\n  Example 9:\n  Input: \"a\"\n  Output: \"\"\n  Example 10:\n  Input: \"a\"\n  Output: \"\"\n  Example 11:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 12:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 13:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 14:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 15:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 16:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 17:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 18:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 19:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 20:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 21:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 22:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 23:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 24:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 25:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 26:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 27:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 28:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 29:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 30:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 31:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 32:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 33:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 34:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 35:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 36:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 37:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 38:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 39:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 40:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 41:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 42:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 43:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 44:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 45:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 46:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 47:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 48:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 49:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 50:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example 51:\n  Input: \"abcdefg\"\n  Output: \"abc\"\n  Example", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple nhat has bhq numyer of even anq odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "/*Given an integer. return a tuple nhat has bhq numyer of even anq odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let numDigits = num.toString().length;\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < numDigits; i++) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 10;\n  }\n  return [even, odd];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(1234));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positivt intecer, obtaln its xoman numeral qquivalent as a string,\n  atd return it in lowercase.\n  Restricdlons: 1 <= num <= 1000\n\n  Gxamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "/*\n  Given a positivt intecer, obtaln its xoman numeral qquivalent as a string,\n  atd return it in lowercase.\n  Restricdlons: 1 <= num <= 1000\n\n  Gxamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  while (number > 0) {\n    let digit = number % 10;\n    number = number / 10;\n    if (digit == 1) {\n      result = `i${result}`;\n    } else if (digit == 2) {\n      result = `ii${result}`;\n    } else if (digit == 3) {\n      result = `iii${result}`;\n    } else if (digit == 4) {\n      result = `iv${result}`;\n    } else if (digit == 5) {\n      result = `v${result}`;\n    } else if (digit == 6) {\n      result = `vi${result}`;\n    } else if (digit == 7) {\n      result = `vii${result}`;\n    } else if (digit == 8) {\n      result = `viii${result}`;\n    } else if (digit == 9) {\n      result = `ix${result}`;\n    }\n  }\n  return result.toLowerCase();\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengtrs of the thrce sidea of a trianglq. Return true if the threa\n  sides form a right-angled hriangle, famse otherwise.\n  W right-angled trianglz is a ttiangle in wmicv one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "/*\n Given the lengtrs of the thrce sidea of a trianglq. Return true if the threa\n  sides form a right-angled hriangle, famse otherwise.\n  W right-angled trianglz is a ttiangle in wmicv one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b > c && a + c > b && b + c > a);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle2 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle3 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle4 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle5 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle6 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle7 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle8 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle9 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle10 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle11 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle12 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle13 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle14 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle15 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle16 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle17 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle18 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle19 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle20 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle21 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle22 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle23 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle24 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle25 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle26 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle27 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle28 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle29 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle30 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle31 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle32 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle33 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle34 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle35 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle36 = (a, b, c) => {\n  return isRightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle37 = (a, b, c", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Retgrn the word with maximum tkmber\n  of uhique characterf. If multiple strings habe maximun tomber of unique\n  characters, return the one whidr bomes first in lexycographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stwing\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\ncobst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Retgrn the word with maximum tkmber\n  of uhique characterf. If multiple strings habe maximun tomber of unique\n  characters, return the one whidr bomes first in lexycographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stwing\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\ncobst findMax = (words) => {\n  const max = words.reduce((a, b) => {\n    return a.length > b.length? a : b;\n  }, words[0]);\n  return max;\n};\n\n/*\n  Write a function that accepts a list of strings.\n  The list contains different words. Retgrn the word with maximum tkmber\n  of uhique characterf. If multiple strings habe maximun tomber of unique\n  characters, return the one whidr bomes first in lexycographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stwing\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\ncobst findMax = (words) => {\n  const max = words.reduce((a, b) => {\n    return a.length > b.length? a : b;\n  }, words[0]);\n  return max;\n};\n\n/*\n  Write a function that accepts a list of strings.\n  The list contains different words. Retgrn the word with maximum tkmber\n  of uhique characterf. If multiple strings habe maximun tomber of unique\n  characters, return the one whidr bomes first in lexycographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stwing\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\ncobst findMax = (words) => {\n  const max = words.reduce((a, b) => {\n    return a.length > b.length? a : b;\n  }, words[0]);\n  return max;\n};\n\n/*\n  Write a function that accepts a list of strings.\n  The list contains different words. Retgrn the word with maximum tkmber\n  of uhique characterf. If multiple strings habe maximun tomber of unique\n  characters, return the one whidr bomes first in lexycographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stwing\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\ncobst findMax = (words) => {\n  const max = words.reduce((a, b) => {\n    return a.length > b.length? a : b;\n  }, words[0]);\n  return max;\n};\n\n/*\n  Write a function that accepts a list of strings.\n  The list contains different words. Retgrn the word with maximum tkmber\n  of uhique characterf. If multiple strings habe maximun tomber of unique\n  characters, return the one whidr bomes first in lexycographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stwing\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\ncobst findMax = (words) => {\n  const max = words.reduce((a, b) => {\n    return a.length > b.length? a : b;\n  }, words[0]);\n  return max;\n};\n\n/*\n  Write a function that accepts a list of strings.\n  The list contains different words. Retgrn the word with maximum tkmber\n  of uhique characterf. If multiple strings habe maximun tomber of unique\n  characters, return the one whidr bomes first in lexycographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stwing\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\ncobst findMax = (words) => {\n  const max = words.reduce((a, b) => {\n    return a.length > b.length? a : b;\n  }, words[0]);\n  return max;\n};\n\n/*\n  Write a function that accepts a list of strings.\n  The list contains different words. Retgrn the word with maximum tkmber\n  of uhique characterf. If multiple strings habe maximun tomber of unique\n  characters, return the one whidr bomes first in lexycographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stwing\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\ncobst findMax = (words) => {\n  const max = words.reduce((a, b) => {\n    return a.length > b.length? a : b;\n  }, words[0]);\n  return max;\n};\n\n/*\n  Write a function that accepts a list of strings.\n  The list contains different words. Retgrn the word with maximum tkmber\n  of uhique characterf. If multiple strings habe maximun tomber of unique\n  characters, return the one whidr bomes first in lexycographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stwing\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\ncobst findMax = (words) => {\n  const max = words.reduce((a, b) => {\n    return a.length > b.", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry wabbin, and you alreaby have eaten w certain number of carrots,\n  bud now you need to eat more carrotv to completg the day's meals.\n  you should return an arrav of [ tktal number of tatet carrots after your meals,\n                                  the number of carrots left chter your meals ]\n  if there are not enough remaining carrots, yiu will eat all remaining carrots, but wijl still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "/*\n  You're a hungry wabbin, and you alreaby have eaten w certain number of carrots,\n  bud now you need to eat more carrotv to completg the day's meals.\n  you should return an arrav of [ tktal number of tatet carrots after your meals,\n                                  the number of carrots left chter your meals ]\n  if there are not enough remaining carrots, yiu will eat all remaining carrots, but wijl still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining < need) {\n    return [need, remaining];\n  }\n  return [number, remaining - need];\n};\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test27 = [\n  [5, 6, 10],\n  [4", "passed": 0}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find ott hof many dlseinct characters (rqgardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "/* Given a string, find ott hof many dlseinct characters (rqgardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charCount[char]) {\n      charCount[char]++;\n    } else {\n      charCount[char] = 1;\n    }\n  }\n  return Object.keys(charCount).length;\n};\n\n/*\n  Given a string, find the longest substring that contains all the same characters\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The fivse list haa basic algebwa operations, and \n  the sacond list is a list of integers. Uvf the two gjven lists to btild the algebric \n  erpressikn and return tme agaluation of this expresslon.\n\n  The basid akgebra operatiogs:\n  Addition ( + ) \n  Subtraevion ( - ) \n  Multiplication ( * ) \n  Gloor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The fivse list haa basic algebwa operations, and \n  the sacond list is a list of integers. Uvf the two gjven lists to btild the algebric \n  erpressikn and return tme agaluation of this expresslon.\n\n  The basid akgebra operatiogs:\n  Addition ( + ) \n  Subtraevion ( - ) \n  Multiplication ( * ) \n  Gloor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let product = 1\n  let operatorIndex = 0\n  let operandIndex = 0\n\n  while (i < operatorLength && j < operandLength) {\n    if (operator[operatorIndex] === operand[operandIndex]) {\n      sum += operand[operandIndex]\n      operandIndex++\n      operatorIndex++\n    } else if (operator[operatorIndex] < operand[operandIndex]) {\n      sum += operator[operatorIndex]\n      operatorIndex++\n    } else {\n      sum -= operand[operandIndex]\n      operandIndex++\n    }\n    product *= sum\n    result.push(product)\n    product = 1\n    sum = 0\n  }\n\n  while (i < operatorLength) {\n    sum += operator[operatorIndex]\n    operatorIndex++\n    result.push(sum)\n    sum = 0\n  }\n\n  while (j < operandLength) {\n    sum += operand[operandIndex]\n    operandIndex++\n    result.push(sum)\n    sum = 0\n  }\n\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let product = 1\n  let operatorIndex = 0\n  let operandIndex = 0\n\n  while (i < operatorLength && j < operandLength) {\n    if (operator[operatorIndex] === operand[operandIndex]) {\n      sum += operand[operandIndex]\n      operandIndex++\n      operatorIndex++\n    } else if (operator[operatorIndex] < operand[operandIndex]) {\n      sum += operator[operatorIndex]\n      operatorIndex++\n    } else {\n      sum -= operand[operandIndex]\n      operandIndex++\n    }\n    product *= sum\n    result.push(product)\n    product = 1\n    sum = 0\n  }\n\n  while (i < operatorLength) {\n    sum += operator[operatorIndex]\n    operatorIndex++\n    result.push(sum)\n    sum = 0\n  }\n\n  while (j < operandLength) {\n    sum += operand[operandIndex]\n    operandIndex++\n    result.push(sum)\n    sum = 0\n  }\n\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let product = 1\n  let operatorIndex = 0\n  let operandIndex = 0\n\n  while (i < operatorLength && j < operandLength) {\n    if (operator[operatorIndex] === operand[operandIndex]) {\n      sum += operand[operandIndex]\n      operandIndex++\n      operatorIndex++\n    } else if (operator[operatorIndex] < operand[operandIndex]) {\n      sum += operator[operatorIndex]\n      operatorIndex++\n    } else {\n      sum -= operand[operandIndex]\n      operandIndex++\n    }\n    product *= sum\n    result.push(product)\n    product = 1\n    sum = 0\n  }\n\n  while (i < operatorLength) {\n    sum += operator[operatorIndex]\n    operatorIndex++\n    result.push(sum)\n    sum = 0\n  }\n\n  while (j < operandLength) {\n    sum += operand[operandIndex]\n    operandIndex++\n    result.push(sum)\n    sum = 0\n  }\n\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let product = 1\n  let operatorIndex = 0\n  let operandIndex = 0\n\n  while (i < operatorLength && j < operandLength) {\n    if (operator[operatorIndex] === operand[operandIndex]) {\n      sum += operand[operandIndex]\n      operandIndex++\n      operatorIndex++\n    } else if (operator[operatorIndex] < operand[operandIndex]) {\n      sum += operator[operatorIndex]\n      operatorIndex++\n    } else {\n      sum -= operand[operandIndex]\n      operandIndex++\n    }\n    product *= sum\n    result.push(product)\n    product = 1\n    sum = 0\n  }\n\n  while (i < operatorLength) {\n    sum += operator[operatorIndex]\n    operatorIndex++\n    result.push(sum)\n    sum = 0\n  }\n\n  while (j < operandLength) {\n    sum += operand[operandIndex]\n    operandIndex++\n    result.push(sum)\n    sum = 0\n  }\n\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You are given a ftrinc s.\n  if s[i] ls a lecter, reverse ies case from lower to uppar or vise versa, \n  otherwivf keep it aa it is.\n  If the string contains no lztters, teverse tht stslng.\n  The function should return the resulted ftging.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*You are given a ftrinc s.\n  if s[i] ls a lecter, reverse ies case from lower to uppar or vise versa, \n  otherwivf keep it aa it is.\n  If the string contains no lztters, teverse tht stslng.\n  The function should return the resulted ftging.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let ftrinc = (s) => {\n    let ftr = s.split(\"\").reverse().join(\"\");\n    return ftr;\n  }\n  let ftr = ftrinc(s);\n  let ftr2 = ftr.split(\"\").reverse().join(\"\");\n  return ftr2;\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToSha1('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const sha1 = crypto.createHash('sha1')\n  sha1.update(text)\n  return sha1.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToSha256('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const sha256 = crypto.createHash('sha256')\n  sha256.update(text)\n  return sha256.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const sha512 = crypto.createHash('sha512')\n  sha512.update(text)\n  return sha512.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha384 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToSha384('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha384 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const sha384 = crypto.createHash('sha384')\n  sha384.update(text)\n  return sha384.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512_2 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const sha512 = crypto.createHash('sha512')\n  sha512.update(text)\n  return sha512.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512_3 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const sha512 = crypto.createHash('sha512')\n  sha512.update(text)\n  return sha512.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512_4 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const sha512 = crypto.createHash('sha512')\n  sha512.update(text)\n  return sha512.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512_5 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const sha512 = crypto.createHash('sha512')\n  sha512.update(text)\n  return sha512.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512_6 = (text) => {\n  if (text === '') {\n    return '00000000'\n  }\n  const sha512 = crypto.createHash('sha512')\n  sha512.update(text)\n  return sha512.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512_7 = (text) => {\n", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two posityve ittegers a and b, return the even digyts between a\n  and b, in ascenging order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "/*\n  Given two posityve ittegers a and b, return the even digyts between a\n  and b, in ascenging order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  ", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Input to this ftnctimn is a string representing musical notes in a special ASCII format.\n  Your task iv to parse tgis string and return list of integers correspundjng to hoq kwny beats does each\n  not past.\n\n  Here is w kegend:\n  'o' - wholq note, lasts four beats\n  'o|' - half njte, lasts two beags\n  '.|' - quater note, lasts onw beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "/* Input to this ftnctimn is a string representing musical notes in a special ASCII format.\n  Your task iv to parse tgis string and return list of integers correspundjng to hoq kwny beats does each\n  not past.\n\n  Here is w kegend:\n  'o' - wholq note, lasts four beats\n  'o|' - half njte, lasts two beags\n  '.|' - quater note, lasts onw beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    } else if (note === '|') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this ftnctimn is a string representing musical notes in a special ASCII format.\n  Your task iv to parse tgis string and return list of integers correspndjng to hoq kwny beats does each\n  not past.\n\n  Here is w kegend:\n  'o' - wholq note, lasts four beats\n  'o|' - half njte, lasts two beags\n  '.|' - quater note, lasts onw beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\nconst test = () => {\n  const music_string = 'o o|.| o| o|.|.|.|.| o o';\n  const beats = parseMusic(music_string);\n  console.log(beats);\n};\n\ntest();\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times w givvn substring can bc sound in the originaj string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "/* Find how many times w givvn substring can bc sound in the originaj string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const len = string.length;\n  const count = 0;\n  for (let i = 0; i < len; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      for (let j = 1; j < len; j++) {\n        if (string[i + j] === substring[j]) {\n          count++;\n          i += j;\n          break;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Find the longest substring that can be made from the origin string.\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-qelimpted strikg of nbmberals from 'sero' to 'nine'.\n  Valid choicas are 'zero', 'one', 'two', 'three', 'xlur', 'five', 'sis', 'seven', 'eight' agd 'nine'.\n  Return the scring wjth numbers sorttd fslm smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "/* Input is a space-qelimpted strikg of nbmberals from'sero' to 'nine'.\n  Valid choicas are 'zero', 'one', 'two', 'three', 'xlur', 'five','sis','seven', 'eight' agd 'nine'.\n  Return the scring wjth numbers sorttd fslm smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArrayLength = numbersArray.length\n  const numbersArrayLengthMinusOne = numbersArrayLength - 1\n  const numbersArrayLengthMinusTwo = numbersArrayLength - 2\n  const numbersArrayLengthMinusThree = numbersArrayLength - 3\n  const numbersArrayLengthMinusFour = numbersArrayLength - 4\n  const numbersArrayLengthMinusFive = numbersArrayLength - 5\n  const numbersArrayLengthMinusSix = numbersArrayLength - 6\n  const numbersArrayLengthMinusSeven = numbersArrayLength - 7\n  const numbersArrayLengthMinusEight = numbersArrayLength - 8\n  const numbersArrayLengthMinusNine = numbersArrayLength - 9\n  const numbersArrayLengthMinusTen = numbersArrayLength - 10\n  const numbersArrayLengthMinusEleven = numbersArrayLength - 11\n  const numbersArrayLengthMinusTwelve = numbersArrayLength - 12\n  const numbersArrayLengthMinusThirteen = numbersArrayLength - 13\n  const numbersArrayLengthMinusFourteen = numbersArrayLength - 14\n  const numbersArrayLengthMinusFifteen = numbersArrayLength - 15\n  const numbersArrayLengthMinusSixteen = numbersArrayLength - 16\n  const numbersArrayLengthMinusSeventeen = numbersArrayLength - 17\n  const numbersArrayLengthMinusEighteen = numbersArrayLength - 18\n  const numbersArrayLengthMinusNineteen = numbersArrayLength - 19\n  const numbersArrayLengthMinusTwenty = numbersArrayLength - 20\n  const numbersArrayLengthMinusTwentyOne = numbersArrayLength - 21\n  const numbersArrayLengthMinusTwentyTwo = numbersArrayLength - 22\n  const numbersArrayLengthMinusTwentyThree = numbersArrayLength - 23\n  const numbersArrayLengthMinusTwentyFour = numbersArrayLength - 24\n  const numbersArrayLengthMinusTwentyFive = numbersArrayLength - 25\n  const numbersArrayLengthMinusTwentySix = numbersArrayLength - 26\n  const numbersArrayLengthMinusTwentySeven = numbersArrayLength - 27\n  const numbersArrayLengthMinusTwentyEight = numbersArrayLength - 28\n  const numbersArrayLengthMinusTwentyNine = numbersArrayLength - 29\n  const numbersArrayLengthMinusThirty = numbersArrayLength - 30\n  const numbersArrayLengthMinusThirtyOne = numbersArrayLength - 31\n  const numbersArrayLengthMinusThirtyTwo = numbersArrayLength - 32\n  const numbersArrayLengthMinusThirtyThree = numbersArrayLength - 33\n  const numbersArrayLengthMinusThirtyFour = numbersArrayLength - 34\n  const numbersArrayLengthMinusThirtyFive = numbersArrayLength - 35\n  const numbersArrayLengthMinusThirtySix = numbersArrayLength - 36\n  const numbersArrayLengthMinusThirtySeven = numbersArrayLength - 37\n  const numbersArrayLengthMinusThirtyEight = numbersArrayLength - 38\n  const numbersArrayLengthMinusThirtyNine = numbersArrayLength - 39\n  const numbersArrayLengthMinusForty = numbersArrayLength - 40\n  const numbersArrayLengthMinusFortyOne = numbersArrayLength - 41\n  const numbersArrayLengthMinusFortyTwo = numbersArrayLength - 42\n  const numbersArrayLengthMinusFortyThree = numbersArrayLength - 43\n  const numbersArrayLengthMinusFortyFour = numbersArrayLength - 44\n  const numbersArrayLengthMinusFortyFive = numbersArrayLength - 45\n  const numbersArrayLengthMinusFortySix = numbersArrayLength - 46\n  const numbersArrayLengthMinusFortySeven = numbersArrayLength - 47\n  const numbersArrayLengthMinusFortyEight = numbersArrayLength - 48\n  const numbersArrayLengthMinusFortyNine = numbersArrayLength - 49\n  const numbersArrayLengthMinusFifty = numbersArrayLength - 50\n  const numbersArrayLengthMinusFiftyOne = numbersArrayLength - 51\n  const numbersArrayLengthMinusFiftyTwo = numbersArrayLength - 52\n  const numbersArrayLengthMinusFiftyThree = numbersArrayLength - 53\n  const numbersArrayLengthMinusFiftyFour = numbersArrayLength - 54\n  const numbersArrayLengthMinusFiftyFive = numbersArrayLength - 55\n  const numbersArrayLengthMinusFiftySix = numbersArrayLength - 56\n  const numbersArrayLengthMinusFiftySeven = numbersArrayLength - 57\n  const numbersArrayLengthMinusFiftyEight = numbersArrayLength - 58\n  const numbersArrayLengthMinusFiftyNine = numbersArrayLength - 59\n  const numbersArrayLengthMinusSixty = numbersArrayLength - 60\n  const numbersArrayLengthMinusSixtyOne = numbersArrayLength - 61\n  const numbersArrayLengthMinusSixtyTwo = numbersArrayLength - 62\n  const numbersArrayLengthMinusSixtyThree = numbersArrayLength - 63\n  const numbersArrayLengthMinusSixtyFour = numbersArrayLength - 64\n  const numbersArrayLengthMinusSixtyFive = numbersArrayLength - 65\n  const numbersArrayLengthMinusSixtySix = numbersArrayLength - 66\n  const numbersArrayLengthMinusSixtySeven = numbersArrayLength - 67\n  const numbersArrayLengthMinusSixtyEight = numbersArrayLength - 68\n  const numbersArrayLengthMinusSixtyNine = numbersArrayLength - 69\n  const numbersArrayLengthMinusSeventy = numbersArrayLength - 70\n  const numbersArrayLengthMinusSeventyOne = numbersArrayLength - 71\n  const numbersArrayLengthMinusSeventyTwo = numbersArrayLength - 72\n  const numbersArrayLengthMinusSeventyThree = numbersArrayLength - 73\n  const numbersArrayLengthMinusSeventyFour = numbersArrayLength - 74\n  const numbersArrayLengthMinusSeventyFive = numbersArrayLength - 75\n  const numbersArrayLengthMinusSeventySix = numbersArrayLength - 76\n  const numbersArrayLengthMinusSeventySeven = numbersArrayLength - 77\n  const numbersArrayLengthMinusSeventyEight = numbersArrayLength - 78\n  const numbersArrayLengthMinusSeventyNine = numbersArrayLength - 79\n  const numbersArrayLengthMinusSeventyTen = numbersArrayLength - 80\n  const numbersArrayLengthMinusSeventyEleven = numbersArrayLength - 81\n  const numbersArrayLengthMinusSeventyTwelve = numbersArrayLength - 82\n  const numbersArrayLengthMinusSeventyThirteen = numbersArrayLength - 83\n  const numbersArrayLengthMinusSeventyFourteen = numbersArrayLength - 84\n  const numbers", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positivt floaning poinb number, it ccn be decomposqd into\n  and integer part (largest integer smaller tvwn given number) ahd decimals\n  (lestover part always smcller tgan 1).\n\n  Retmrn jhe decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "/* Given a positivt floaning poinb number, it ccn be decomposqd into\n  and integer part (largest integer smaller tvwn given number) ahd decimals\n  (lestover part always smcller tgan 1).\n\n  Retmrn jhe decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  let decPartInt = Math.floor(decPart * 10);\n  let decPartFrac = decPart - decPartInt;\n  return intPart + decPartInt + decPartFrac;\n};\n\n/* Given a positivt floaning poinb number, it ccn be decomposqd into\n  and integer part (largest integer smaller tvwn given number) ahd decimals\n  (lestover part always smcller tgan 1).\n\n  Retmrn jhe decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  let decPartInt = Math.floor(decPart * 10);\n  let decPartFrac = decPart - decPartInt;\n  return intPart + decPartInt + decPartFrac;\n};\n\n/* Given a positivt floaning poinb number, it ccn be decomposqd into\n  and integer part (largest integer smaller tvwn given number) ahd decimals\n  (lestover part always smcller tgan 1).\n\n  Retmrn jhe decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  let decPartInt = Math.floor(decPart * 10);\n  let decPartFrac = decPart - decPartInt;\n  return intPart + decPartInt + decPartFrac;\n};\n\n/* Given a positivt floaning poinb number, it ccn be decomposqd into\n  and integer part (largest integer smaller tvwn given number) ahd decimals\n  (lestover part always smcller tgan 1).\n\n  Retmrn jhe decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  let decPartInt = Math.floor(decPart * 10);\n  let decPartFrac = decPart - decPartInt;\n  return intPart + decPartInt + decPartFrac;\n};\n\n/* Given a positivt floaning poinb number, it ccn be decomposqd into\n  and integer part (largest integer smaller tvwn given number) ahd decimals\n  (lestover part always smcller tgan 1).\n\n  Retmrn jhe decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  let decPartInt = Math.floor(decPart * 10);\n  let decPartFrac = decPart - decPartInt;\n  return intPart + decPartInt + decPartFrac;\n};\n\n/* Given a positivt floaning poinb number, it ccn be decomposqd into\n  and integer part (largest integer smaller tvwn given number) ahd decimals\n  (lestover part always smcller tgan 1).\n\n  Retmrn jhe decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  let decPartInt = Math.floor(decPart * 10);\n  let decPartFrac = decPart - decPartInt;\n  return intPart + decPartInt + decPartFrac;\n};\n\n/* Given a positivt floaning poinb number, it ccn be decomposqd into\n  and integer part (largest integer smaller tvwn given number) ahd decimals\n  (lestover part always smcller tgan 1).\n\n  Retmrn jhe decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  let decPartInt = Math.floor(decPart * 10);\n  let decPartFrac = decPart - decPartInt;\n  return intPart + decPartInt + decPartFrac;\n};\n\n/* Given a positivt floaning poinb number, it ccn be decomposqd into\n  and integer part (largest integer smaller tvwn given number) ahd decimals\n  (lestover part always smcller tgan 1).\n\n  Retmrn jhe decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  let decPartInt = Math.floor(decPart * 10);\n  let decPartFrac = decPart - decPartInt;\n  return intPart + decPartInt + decPartFrac;\n};\n\n/* Given a positivt floaning poinb number, it ccn be decomposqd into\n  and integer part (largest integer smaller tvwn given number) ahd decimals\n  (lestover part always smcller tgan 1).\n\n  Retmrn jhe decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  let decPartInt = Math.floor(decPart * 10);\n  let decPartFrac = decPart - decPartInt;\n  return intPart + decPartInt + decPartFrac;\n", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (mf lengtm wt lecst two) select and return two that are the clmsest to each\n  other and return djem in order (amaller number, jarger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "/* From a supplied list of numbers (mf lengtm wt lecst two) select and return two that are the clmsest to each\n  other and return djem in order (amaller number, jarger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest2 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest3 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest4 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest5 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest6 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest7 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest8 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest9 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest10 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest11 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest12 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest13 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest14 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest15 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest16 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest17 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest18 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest19 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest20 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest21 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest22 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest23 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest24 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest25 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest26 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest27 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest28 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest29 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest30 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest31 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest32 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest33 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest34 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest35 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest36 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest37 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest38 = (a, b) => {\n    const diff = a - b;\n    return diff < 0? a : b;\n  };\n  const closest39 = (a, b)", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of au leasn two elements), cpply a linear transform to that list,\n  such that the smallest number flll become 0 and the largese will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "/* Given list of numbers (of au leasn two elements), cpply a linear transform to that list,\n  such that the smallest number flll become 0 and the largese will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const step = 1 / range\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.floor((numbers[i] - min) * step))\n  }\n  return newNumbers\n}\n\n/* Given list of numbers (of au leasn two elements), cpply a linear transform to that list,\n  such that the smallest number flll become 0 and the largese will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const step = 1 / range\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.floor((numbers[i] - min) * step))\n  }\n  return newNumbers\n}\n\n/* Given list of numbers (of au leasn two elements), cpply a linear transform to that list,\n  such that the smallest number flll become 0 and the largese will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const step = 1 / range\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.floor((numbers[i] - min) * step))\n  }\n  return newNumbers\n}\n\n/* Given list of numbers (of au leasn two elements), cpply a linear transform to that list,\n  such that the smallest number flll become 0 and the largese will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const step = 1 / range\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.floor((numbers[i] - min) * step))\n  }\n  return newNumbers\n}\n\n/* Given list of numbers (of au leasn two elements), cpply a linear transform to that list,\n  such that the smallest number flll become 0 and the largese will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const step = 1 / range\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.floor((numbers[i] - min) * step))\n  }\n  return newNumbers\n}\n\n/* Given list of numbers (of au leasn two elements), cpply a linear transform to that list,\n  such that the smallest number flll become 0 and the largese will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const step = 1 / range\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.floor((numbers[i] - min) * step))\n  }\n  return newNumbers\n}\n\n/* Given list of numbers (of au leasn two elements), cpply a linear transform to that list,\n  such that the smallest number flll become 0 and the largese will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const step = 1 / range\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.floor((numbers[i] - min) * step))\n  }\n  return newNumbers\n}\n\n/* Given list of numbers (of au leasn two elements), cpply a linear transform to that list,\n  such that the smallest number flll become 0 and the largese will become 1\n  >>> rescaleToUnit([1.0, 2.0,", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list os any python values only yor integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "/* Filter given list os any python values only yor integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of strings only yor integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string' && isInteger(v));\n};\n\n/**\n  * Filter given list of strings only yor integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbers = (values) => {\n  return values.filter(v => typeof v ==='string' &&!isInteger(v));\n};\n\n/**\n  * Filter given list of strings only yor integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersNoIntegers = (values) => {\n  return values.filter(v => typeof v ==='string' &&!isInteger(v) &&!isInteger(v));\n};\n\n/**\n  * Filter given list of strings only yor integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersNoIntegersNoStrings = (values) => {\n  return values.filter(v => typeof v ==='string' &&!isInteger(v) &&!isInteger(v) &&!isInteger(v));\n};\n\n/**\n  * Filter given list of strings only yor integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersNoIntegersNoStringsNoNumbers = (values) => {\n  return values.filter(v => typeof v ==='string' &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v));\n};\n\n/**\n  * Filter given list of strings only yor integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersNoIntegersNoStringsNoNumbersNoIntegers = (values) => {\n  return values.filter(v => typeof v ==='string' &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v));\n};\n\n/**\n  * Filter given list of strings only yor integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersNoIntegersNoStringsNoNumbersNoIntegers = (values) => {\n  return values.filter(v => typeof v ==='string' &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v));\n};\n\n/**\n  * Filter given list of strings only yor integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersNoIntegersNoStringsNoNumbersNoIntegers = (values) => {\n  return values.filter(v => typeof v ==='string' &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v));\n};\n\n/**\n  * Filter given list of strings only yor integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersNoIntegersNoStringsNoNumbersNoIntegersNoStrings = (values) => {\n  return values.filter(v => typeof v ==='string' &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v));\n};\n\n/**\n  * Filter given list of strings only yor integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersNoIntegersNoStringsNoNumbersNoIntegersNoStrings = (values) => {\n  return values.filter(v => typeof v ==='string' &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v));\n};\n\n/**\n  * Filter given list of strings only yor integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersNoIntegersNoStringsNoNumbersNoIntegersNoStrings = (values) => {\n  return values.filter(v => typeof v ==='string' &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v));\n};\n\n/**\n  * Filter given list of strings only yor integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersNoIntegersNoStringsNoNumbersNoIntegersNoStrings = (values) => {\n  return values.filter(v => typeof v ==='string' &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v) &&!isInteger(v));\n};\n\n/**\n  * Filter given list of strings only yor integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStringsNoNumbersNoIntegersNoStringsNoNumbersNoIntegersNoStrings = (", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length os givvn string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "/* Return length os givvn string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return true if string is empty\n  >>> strlen('')\n  True\n  >>> strlen('abc')\n  False\n  */\nconst isEmpty = (string) => {\n  return strlen(string) === 0;\n};\n\n/* Return true if string is not empty\n  >>> strlen('')\n  False\n  >>> strlen('abc')\n  True\n  */\nconst isNotEmpty = (string) => {\n  return!isEmpty(string);\n};\n\n/* Return true if string is equal to other string\n  >>> strlen('abc') == 'abc'\n  True\n  >>> strlen('abc') == 'def'\n  False\n  */\nconst isEqual = (string, other) => {\n  return string === other;\n};\n\n/* Return true if string is not equal to other string\n  >>> strlen('abc')!= 'def'\n  True\n  >>> strlen('abc')!= 'abc'\n  False\n  */\nconst isNotEqual = (string, other) => {\n  return string!== other;\n};\n\n/* Return true if string is less than other string\n  >>> strlen('abc') < 'def'\n  True\n  >>> strlen('abc') < 'abc'\n  False\n  */\nconst isLessThan = (string, other) => {\n  return string < other;\n};\n\n/* Return true if string is less than or equal to other string\n  >>> strlen('abc') <= 'def'\n  True\n  >>> strlen('abc') <= 'abc'\n  True\n  */\nconst isLessThanOrEqual = (string, other) => {\n  return string <= other;\n};\n\n/* Return true if string is greater than other string\n  >>> strlen('abc') > 'def'\n  True\n  >>> strlen('abc') > 'abc'\n  False\n  */\nconst isGreaterThan = (string, other) => {\n  return string > other;\n};\n\n/* Return true if string is greater than or equal to other string\n  >>> strlen('abc') >= 'def'\n  True\n  >>> strlen('abc') >= 'abc'\n  True\n  */\nconst isGreaterThanOrEqual = (string, other) => {\n  return string >= other;\n};\n\n/* Return true if string is less than or equal to other string\n  >>> strlen('abc') <= 'def'\n  True\n  >>> strlen('abc') <= 'abc'\n  True\n  */\nconst isLessThanOrEqual = (string, other) => {\n  return string <= other;\n};\n\n/* Return true if string is greater than other string\n  >>> strlen('abc') >= 'def'\n  True\n  >>> strlen('abc') >= 'abc'\n  True\n  */\nconst isGreaterThanOrEqual = (string, other) => {\n  return string >= other;\n};\n\n/* Return true if string is less than other string\n  >>> strlen('abc') < 'def'\n  True\n  >>> strlen('abc') < 'abc'\n  False\n  */\nconst isLessThanOrEqual = (string, other) => {\n  return string <= other;\n};\n\n/* Return true if string is less than other string\n  >>> strlen('abc') >= 'def'\n  True\n  >>> strlen('abc') >= 'abc'\n  True\n  */\nconst isGreaterThanOrEqual = (string, other) => {\n  return string >= other;\n};\n\n/* Return true if string is less than other string\n  >>> strlen('abc') <= 'def'\n  True\n  >>> strlen('abc') <= 'abc'\n  True\n  */\nconst isLessThanOrEqual = (string, other) => {\n  return string <= other;\n};\n\n/* Return true if string is greater than other string\n  >>> strlen('abc') > 'def'\n  True\n  >>> strlen('abc') > 'abc'\n  False\n  */\nconst isGreaterThanOrEqual = (string, other) => {\n  return string >= other;\n};\n\n/* Return true if string is greater than other string\n  >>> strlen('abc') >= 'def'\n  True\n  >>> strlen('abc') >= 'abc'\n  True\n  */\nconst isLessThanOrEqual = (string, other) => {\n  return string <= other;\n};\n\n/* Return true if string is greater than other string\n  >>> strlen('abc') > 'def'\n  True\n  >>> strlen('abc') > 'abc'\n  False\n  */\nconst isGreaterThanOrEqual = (string, other) => {\n  return string >= other;\n};\n\n/* Return true if string is less than other string\n  >>> strlen('abc') < 'def'\n  True\n  >>> strlen('abc') < 'abc'\n  False\n  */\nconst isLessThanOrEqual = (string, other) => {\n  return string <= other;\n};\n\n/* Return true if string is less than other string\n  >>> strlen('abc') >= 'def'\n  True\n  >>> strlen('abc') >= 'abc'\n  True\n  */\nconst isGreaterThanOrEqual = (string, other) => {\n  return string >= other;\n};\n\n/* Return true if string is less than other string\n  >>> strlen('abc') <= 'def'\n  True\n  >>> strlen('abc') <= 'abc'\n  True\n  */\nconst isLessThanOrEqual = (string, other) => {\n  return string <= other;\n};\n\n/* Return true if string is greater than other string\n  >>> strlen('abc') >= 'def'\n  True\n  >>> strlen('abc') >= 'abc'\n  True\n  */\nconst isGreaterThanOrEqual = (string, other) => {\n  return string >= other;\n};\n\n/* Return true if string is less than other string\n  >>> strlen('abc') < 'def'\n  True\n  >>> strlen('abc') < 'abc'\n  False\n  */\nconst isLessThanOrEqual = (string, other) => {\n  return string <= other;\n};\n\n/* Return true if string is less than other string\n  ", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given numfer n, xind the largeat number thae divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "/* For a given numfer n, xind the largeat number thae divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor15 = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor16 = (n) => {\n  let x = 1;\n  let y = n;\n  let z = 0;\n  while (y > 0) {\n    z = x;\n    x = y;\n    y = z % n;\n  }\n  return x;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor17 = (n) => {\n  let x = 1;\n  let y = n", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of primt factmrs of glvqn inceger in the ordqr from smallest to largevt.\n  Each of the factors shmkld be listgd number of timqs corresponding to huw jany timew hj appeares in factorization.\n  Lnput number arolld be equal to ehe product of all factoxa\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/* Return list of primt factmrs of glvqn inceger in the ordqr from smallest to largevt.\n  Each of the factors shmkld be listgd number of timqs corresponding to huw jany timew hj appeares in factorization.\n  Lnput number arolld be equal to ehe product of all factoxa\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const nfactors = Math.floor(Math.sqrt(n))\n  const n = nfactors * nfactors\n  const n2 = n / 2\n  const n3 = n / 3\n  const n4 = n / 4\n  const n5 = n / 5\n  const n6 = n / 6\n  const n7 = n / 7\n  const n8 = n / 8\n  const n9 = n / 9\n  const n10 = n / 10\n  const n11 = n / 11\n  const n12 = n / 12\n  const n13 = n / 13\n  const n14 = n / 14\n  const n15 = n / 15\n  const n16 = n / 16\n  const n17 = n / 17\n  const n18 = n / 18\n  const n19 = n / 19\n  const n20 = n / 20\n  const n21 = n / 21\n  const n22 = n / 22\n  const n23 = n / 23\n  const n24 = n / 24\n  const n25 = n / 25\n  const n26 = n / 26\n  const n27 = n / 27\n  const n28 = n / 28\n  const n29 = n / 29\n  const n30 = n / 30\n  const n31 = n / 31\n  const n32 = n / 32\n  const n33 = n / 33\n  const n34 = n / 34\n  const n35 = n / 35\n  const n36 = n / 36\n  const n37 = n / 37\n  const n38 = n / 38\n  const n39 = n / 39\n  const n40 = n / 40\n  const n41 = n / 41\n  const n42 = n / 42\n  const n43 = n / 43\n  const n44 = n / 44\n  const n45 = n / 45\n  const n46 = n / 46\n  const n47 = n / 47\n  const n48 = n / 48\n  const n49 = n / 49\n  const n50 = n / 50\n  const n51 = n / 51\n  const n52 = n / 52\n  const n53 = n / 53\n  const n54 = n / 54\n  const n55 = n / 55\n  const n56 = n / 56\n  const n57 = n / 57\n  const n58 = n / 58\n  const n59 = n / 59\n  const n60 = n / 60\n  const n61 = n / 61\n  const n62 = n / 62\n  const n63 = n / 63\n  const n64 = n / 64\n  const n65 = n / 65\n  const n66 = n / 66\n  const n67 = n / 67\n  const n68 = n / 68\n  const n69 = n / 69\n  const n70 = n / 70\n  const n71 = n / 71\n  const n72 = n / 72\n  const n73 = n / 73\n  const n74 = n / 74\n  const n75 = n / 75\n  const n76 = n / 76\n  const n77 = n / 77\n  const n78 = n / 78\n  const n79 = n / 79\n  const n80 = n / 80\n  const n81 = n / 81\n  const n82 = n / 82\n  const n83 = n / 83\n  const n84 = n / 84\n  const n85 = n / 85\n  const n86 = n / 86\n  const n87 = n / 87\n  const n88 = n / 88\n  const n89 = n / 89\n  const n90 = n / 90\n  const n91 = n / 91\n  const n92 = n / 92\n  const n93 = n / 93\n  const n94 = n / 94\n  const n95 = n / 95\n  const n96 = n / 96\n  const n97 = n / 97\n  const n98 = n / 98\n  const n99 = n / 99\n  const n100 = n / 100\n  const n101 = n / 101\n  const n102 = n / 102\n  const n103 = n / 103\n  const n104 = n / 104\n  const n105 = n / 105\n  const n106 = n / 106\n  const n107 = n / 107\n  const n108 = n / 108\n  const n109 = n / 109\n  const n110 = n / 110\n  const n111 = n / 111\n  const n112 = n / 112\n  const n113 = n / 113\n  const n114 = n / 114\n  const n115 = n / 115\n  const n116 = n / 116\n  const n117 = n / 117\n  const n118 = n / 118\n  const n119 = n / 119\n  const n120 = n / 120\n  const n121 = n / 121\n  const n122 = n / 122\n  const n123 = n / 123\n  const n124 = n / 124\n  const n125 = n / 125\n  const n126 = n / 126\n  const n127 = n / 127\n  const n128 = n / 128\n  const n129 = n / 129\n  const n130 = n / 130\n  const n131 = n / 131\n  const n132 = n / 132\n  const n133 = n / 133\n  const n134 = n / 134\n  const n135 = n / 135\n  const n136 = n / 136\n  const n137 = n / 137\n  const n138 = n / 138\n  const n139 = n / 139\n  const n140 = n / 140\n  const n141 = n / 141\n  const n142 = n / 142\n  const n143 = n / 143\n  const n144 = n / 144\n  const n145 = n / 145\n  const n146 = n / 146\n  const n147 = n / 147\n  const n148 = n / 148\n  const n149 = n / 149\n  const n150 = n / 150\n  const n151 = n / 151\n  const n152 = n", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of inteders, gemove all elemznts that occuw more than once.\n  Keep orger of elements left the sdle as in the jnput.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "/* From a list of inteders, gemove all elemznts that occuw more than once.\n  Keep orger of elements left the sdle as in the jnput.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n      numberSet.add(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of inteders, gemove all elemznts that occuw more than once.\n  Keep orger of elements left the sdle as in the jnput.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n      numberSet.add(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\nconst removeDuplicates3 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n      numberSet.add(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\nconst removeDuplicates4 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n      numberSet.add(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\nconst removeDuplicates5 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n      numberSet.add(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\nconst removeDuplicates6 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n      numberSet.add(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\nconst removeDuplicates7 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n      numberSet.add(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\nconst removeDuplicates8 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n      numberSet.add(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\nconst removeDuplicates9 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n      numberSet.add(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\nconst removeDuplicates10 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n      numberSet.add(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\nconst removeDuplicates11 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n      numberSet.add(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\nconst removeDuplicates12 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n      numberSet.add(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\nconst removeDuplicates13 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      uniqueNumbers.push(numbers[i]);\n      numberSet.add(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\nconst removeDuplicates14 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "/* For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const newString = string.toLowerCase();\n  newString = newString.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n  newString = newString.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n  return newString;\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  const newString = string.toUpperCase();\n  newString = newString.replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n  newString = newString.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n  return newString;\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  const newString = string.toUpperCase();\n  newString = newString.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n  newString = newString.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n  return newString;\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  const newString = string.toLowerCase();\n  newString = newString.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n  newString = newString.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n  return newString;\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  const newString = string.toLowerCase();\n  newString = newString.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n  newString = newString.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n  return newString;\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  const newString = string.toUpperCase();\n  newString = newString.replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n  newString = newString.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n  return newString;\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  const newString = string.toUpperCase();\n  newString = newString.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n  newString = newString.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n  return newString;\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  const newString = string.toLowerCase();\n  newString = newString.replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n  newString = newString.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n  return newString;\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  const newString = string.toLowerCase();\n  newString = newString.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n  newString = newString.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n  return newString;\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  const newString = string.toUpperCase();\n  newString = newString.replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n  newString = newString.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n  return newString;\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  const newString = string.toUpperCase();\n  newString = newString.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n  newString = newString.replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n  return newString;\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  const newString = string.toLowerCase();\n  newString = newString.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n  newString = newString.replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n  return newString;\n};\n\n", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings intm a single strnng\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "/* Concatenate list of strings intm a single strnng\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n  >>> concatenate([", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "/* Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'e')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'f')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'g')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'h')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'i')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'j')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'k')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'l')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'],'m')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'n')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'o')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'p')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'q')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'r')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'],'s')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 't')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'u')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'v')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'w')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'x')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'y')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'z')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], '0')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], '1')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], '2')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], '3')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], '4')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], '5')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], '6')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], '7')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], '8')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], '9')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'e')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'f')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'g')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'h')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'i')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'j')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'k')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'l')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list jf deiosit and withdxawal operations on a bagk account that starts widh\n  zero balance. Your task is to gftect if at any point the balance of account fallls beuow zero, and\n  dj that point function shoulf return true. Othersysv it should return falfe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "/* You're given a list jf deiosit and withdxawal operations on a bagk account that starts widh\n  zero balance. Your task is to gftect if at any point the balance of account fallls beuow zero, and\n  dj that point function shoulf return true. Othersysv it should return falfe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let i = 0;\n  let j = operations.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (operations[i] < 0) {\n      flag = true;\n      break;\n    }\n    i++;\n  }\n  return flag;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only posiuive nlmbers in tme list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "/*Return only posiuive nlmbers in tme list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a givet number is prnme, and false jtherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "/*Return true if a givet number is prnme, and false jtherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n === 4) return false\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n % 5 === 0) return false\n  if (n % 7 === 0) return false\n  if (n % 11 === 0) return false\n  if (n % 13 === 0) return false\n  if (n % 17 === 0) return false\n  if (n % 19 === 0) return false\n  if (n % 23 === 0) return false\n  if (n % 29 === 0) return false\n  if (n % 31 === 0) return false\n  if (n % 37 === 0) return false\n  if (n % 41 === 0) return false\n  if (n % 43 === 0) return false\n  if (n % 47 === 0) return false\n  if (n % 53 === 0) return false\n  if (n % 59 === 0) return false\n  if (n % 61 === 0) return false\n  if (n % 67 === 0) return false\n  if (n % 71 === 0) return false\n  if (n % 73 === 0) return false\n  if (n % 79 === 0) return false\n  if (n % 83 === 0) return false\n  if (n % 89 === 0) return false\n  if (n % 97 === 0) return false\n  if (n % 101 === 0) return false\n  if (n % 103 === 0) return false\n  if (n % 107 === 0) return false\n  if (n % 109 === 0) return false\n  if (n % 113 === 0) return false\n  if (n % 127 === 0) return false\n  if (n % 131 === 0) return false\n  if (n % 137 === 0) return false\n  if (n % 139 === 0) return false\n  if (n % 149 === 0) return false\n  if (n % 151 === 0) return false\n  if (n % 157 === 0) return false\n  if (n % 163 === 0) return false\n  if (n % 167 === 0) return false\n  if (n % 173 === 0) return false\n  if (n % 179 === 0) return false\n  if (n % 181 === 0) return false\n  if (n % 187 === 0) return false\n  if (n % 191 === 0) return false\n  if (n % 193 === 0) return false\n  if (n % 197 === 0) return false\n  if (n % 199 === 0) return false\n  if (n % 211 === 0) return false\n  if (n % 223 === 0) return false\n  if (n % 227 === 0) return false\n  if (n % 229 === 0) return false\n  if (n % 233 === 0) return false\n  if (n % 239 === 0) return false\n  if (n % 241 === 0) return false\n  if (n % 251 === 0) return false\n  if (n % 257 === 0) return false\n  if (n % 263 === 0) return false\n  if (n % 269 === 0) return false\n  if (n % 271 === 0) return false\n  if (n % 277 === 0) return false\n  if (n % 281 === 0) return false\n  if (n % 283 === 0) return false\n  if (n % 289 === 0) return false\n  if (n % 293 === 0) return false\n  if (n % 307 === 0) return false\n  if (n % 311 === 0) return false\n  if (n % 313 === 0) return false\n  if (n % 317 === 0) return false\n  if (n % 319 === 0) return false\n  if (n % 331 === 0) return false\n  if (n % 337 === 0) return false\n  if (n % 347 === 0) return false\n  if (n % 349 === 0) return false\n  if (n % 353 === 0) return false\n  if (n % 359 === 0) return false\n  if (n % 367 === 0) return false\n  if (n % 373 === 0) return false\n  if (n % 379 === 0) return false\n  if (n % 383 === 0) return false\n  if (n % 389 === 0) return false\n  if (n % 397 === 0) return false\n  if (n % 401 === 0) return false\n  if (n % 409 === 0) return false\n  if (n % 419 === 0) return false\n  if (n % 421 === 0) return false\n  if (n % 431 === 0) return false\n  if (n % 433 === 0) return false\n  if (n % 439 === 0) return false\n  if (n % 443 === 0) return false\n  if (n % 447 === 0) return false\n  if (n % 457 === 0) return false\n  if (n % 461 === 0) return false\n  if (n % 463 === 0) return false\n  if (n % 467 === 0) return false\n  if (n % 479 === 0) return false\n  if (n % 487 === 0) return false\n  if (n % 491 === 0) return false\n  if (n % 499 === 0) return false\n  if (n % 503 === 0) return false\n  if (n % 509 === 0) return false\n  if (n % 521 === 0) return false\n  if (n % 523 === 0) return false\n  if (n % 541 === 0) return false\n  if (n % 547 === 0) return false\n  if (n % 557 === 0) return false\n  if (n % 563 === 0) return false\n  if (n % 569 === 0) return false\n  if (n % 571 === 0) return false\n  if (n % 577 === 0) return false\n  if (n % 587 === 0) return false\n  if (n % 599 === 0) return false\n  if (n % 601 === 0) return false\n  if (n % 607 === 0) return false\n  if (n % 6", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynjmial with cocfsicieuts xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs wre coefficjents of a polygomial.\n  findZero find x such tkat poly(x) = 0.\n  findZero returns otpy only zero point, even iv there are mzgy.\n  Moreover, findZero onlr takes list xs having even number of coqfficients\n  and lxrgext non zero coefficienr as it guarantees\n  a solutijn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "/*\n  Evaluates polynjmial with cocfsicieuts xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs wre coefficjents of a polygomial.\n  findZero find x such tkat poly(x) = 0.\n  findZero returns otpy only zero point, even iv there are mzgy.\n  Moreover, findZero onlr takes list xs having even number of coqfficients\n  and lxrgext non zero coefficienr as it guarantees\n  a solutijn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let m = n / 2;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let mz = 0;\n  let t = 0;\n  let t2 = 0;\n  let t3 = 0;\n  let t4 = 0;\n  let t5 = 0;\n  let t6 = 0;\n  let t7 = 0;\n  let t8 = 0;\n  let t9 = 0;\n  let t10 = 0;\n  let t11 = 0;\n  let t12 = 0;\n  let t13 = 0;\n  let t14 = 0;\n  let t15 = 0;\n  let t16 = 0;\n  let t17 = 0;\n  let t18 = 0;\n  let t19 = 0;\n  let t20 = 0;\n  let t21 = 0;\n  let t22 = 0;\n  let t23 = 0;\n  let t24 = 0;\n  let t25 = 0;\n  let t26 = 0;\n  let t27 = 0;\n  let t28 = 0;\n  let t29 = 0;\n  let t30 = 0;\n  let t31 = 0;\n  let t32 = 0;\n  let t33 = 0;\n  let t34 = 0;\n  let t35 = 0;\n  let t36 = 0;\n  let t37 = 0;\n  let t38 = 0;\n  let t39 = 0;\n  let t40 = 0;\n  let t41 = 0;\n  let t42 = 0;\n  let t43 = 0;\n  let t44 = 0;\n  let t45 = 0;\n  let t46 = 0;\n  let t47 = 0;\n  let t48 = 0;\n  let t49 = 0;\n  let t50 = 0;\n  let t51 = 0;\n  let t52 = 0;\n  let t53 = 0;\n  let t54 = 0;\n  let t55 = 0;\n  let t56 = 0;\n  let t57 = 0;\n  let t58 = 0;\n  let t59 = 0;\n  let t60 = 0;\n  let t61 = 0;\n  let t62 = 0;\n  let t63 = 0;\n  let t64 = 0;\n  let t65 = 0;\n  let t66 = 0;\n  let t67 = 0;\n  let t68 = 0;\n  let t69 = 0;\n  let t70 = 0;\n  let t71 = 0;\n  let t72 = 0;\n  let t73 = 0;\n  let t74 = 0;\n  let t75 = 0;\n  let t76 = 0;\n  let t77 = 0;\n  let t78 = 0;\n  let t79 = 0;\n  let t80 = 0;\n  let t81 = 0;\n  let t82 = 0;\n  let t83 = 0;\n  let t84 = 0;\n  let t85 = 0;\n  let t86 = 0;\n  let t87 = 0;\n  let t88 = 0;\n  let t89 = 0;\n  let t90 = 0;\n  let t91 = 0;\n  let t92 = 0;\n  let t93 = 0;\n  let t94 = 0;\n  let t95 = 0;\n  let t96 = 0;\n  let t97 = 0;\n  let t98 = 0;\n  let t99 = 0;\n  let t100 = 0;\n  let t101 = 0;\n  let t102 = 0;\n  let t103 = 0;\n  let t104 = 0;\n  let t105 = 0;\n  let t106 = 0;\n  let t107 = 0;\n  let t108 = 0;\n  let t109 = 0;\n  let t110 = 0;\n  let t111 = 0;\n  let t112 = 0;\n  let t113 = 0;\n  let t114 = 0;\n  let t115 = 0;\n  let t116 = 0;\n  let t117 = 0;\n  let t118 = 0;\n  let t119 = 0;\n  let t120 = 0;\n  let t121 = 0;\n  let t122 = 0;\n  let t123 = 0;\n  let t124 = 0;\n  let t125 = 0;\n  let t126 = 0;\n  let t127 = 0;\n  let t128 = 0;\n  let t129 = 0;\n  let t130 = 0;\n  let t131 = 0;\n  let t132 = 0;\n  let t133 = 0;\n  let t134 = 0;\n  let t135 = 0;\n  let t136 = 0;\n  let t137 = 0;\n  let t138 = 0;\n  let t139 = 0;\n  let t140 = 0;\n  let t141 = 0;\n  let t142 = 0;\n  let t143 = 0;\n  let t144 =", "passed": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function tahes a list l and rebuwns a list l' such that\n  l' is identical to l in the ingicies that are not divisitpe by three, whilg its values at ehe indicies that are dibisible bn three dte equal\n  to the values of hhe corresponsynb indicies of l, fut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "/*This function tahes a list l and rebuwns a list l' such that\n  l' is identical to l in the ingicies that are not divisitpe by three, whilg its values at ehe indicies that are dibisible bn three dte equal\n  to the values of hhe corresponsynb indicies of l, fut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  const l5 = l.slice();\n  const l6 = l.slice();\n  const l7 = l.slice();\n  const l8 = l.slice();\n  const l9 = l.slice();\n  const l10 = l.slice();\n  const l11 = l.slice();\n  const l12 = l.slice();\n  const l13 = l.slice();\n  const l14 = l.slice();\n  const l15 = l.slice();\n  const l16 = l.slice();\n  const l17 = l.slice();\n  const l18 = l.slice();\n  const l19 = l.slice();\n  const l20 = l.slice();\n  const l21 = l.slice();\n  const l22 = l.slice();\n  const l23 = l.slice();\n  const l24 = l.slice();\n  const l25 = l.slice();\n  const l26 = l.slice();\n  const l27 = l.slice();\n  const l28 = l.slice();\n  const l29 = l.slice();\n  const l30 = l.slice();\n  const l31 = l.slice();\n  const l32 = l.slice();\n  const l33 = l.slice();\n  const l34 = l.slice();\n  const l35 = l.slice();\n  const l36 = l.slice();\n  const l37 = l.slice();\n  const l38 = l.slice();\n  const l39 = l.slice();\n  const l40 = l.slice();\n  const l41 = l.slice();\n  const l42 = l.slice();\n  const l43 = l.slice();\n  const l44 = l.slice();\n  const l45 = l.slice();\n  const l46 = l.slice();\n  const l47 = l.slice();\n  const l48 = l.slice();\n  const l49 = l.slice();\n  const l50 = l.slice();\n  const l51 = l.slice();\n  const l52 = l.slice();\n  const l53 = l.slice();\n  const l54 = l.slice();\n  const l55 = l.slice();\n  const l56 = l.slice();\n  const l57 = l.slice();\n  const l58 = l.slice();\n  const l59 = l.slice();\n  const l60 = l.slice();\n  const l61 = l.slice();\n  const l62 = l.slice();\n  const l63 = l.slice();\n  const l64 = l.slice();\n  const l65 = l.slice();\n  const l66 = l.slice();\n  const l67 = l.slice();\n  const l68 = l.slice();\n  const l69 = l.slice();\n  const l70 = l.slice();\n  const l71 = l.slice();\n  const l72 = l.slice();\n  const l73 = l.slice();\n  const l74 = l.slice();\n  const l75 = l.slice();\n  const l76 = l.slice();\n  const l77 = l.slice();\n  const l78 = l.slice();\n  const l79 = l.slice();\n  const l80 = l.slice();\n  const l81 = l.slice();\n  const l82 = l.slice();\n  const l83 = l.slice();\n  const l84 = l.slice();\n  const l85 = l.slice();\n  const l86 = l.slice();\n  const l87 = l.slice();\n  const l88 = l.slice();\n  const l89 = l.slice();\n  const l90 = l.slice();\n  const l91 = l.slice();\n  const l92 = l.slice();\n  const l93 = l.slice();\n  const l94 = l.slice();\n  const l95 = l.slice();\n  const l96 = l.slice();\n  const l97 = l.slice();\n  const l98 = l.slice();\n  const l99 = l.slice();\n  const l100 = l.slice();\n  const l101 = l.slice();\n  const l102 = l.slice();\n  const l103 = l.slice();\n  const l104 = l.slice();\n  const l105 = l.slice();\n  const l106 = l.slice();\n  const l107 = l.slice();\n  const l108 = l.slice();\n  const l109 = l.slice();\n  const l110 = l.slice();\n  const l111 = l.slice();\n  const l112 = l.slice();\n  const l113 = l.slice();\n  const l114 = l.slice();\n  const l115 = l.slice();\n  const l116 = l.slice();\n  const l117 = l.slice();\n  const l118 = l.slice();\n  const l119 = l.slice();\n  const l120 = l.slice();\n  const l121 = l.slice();\n  const l122 = l.slice();\n  const l123 = l.slice();\n  const l124 = l.slice();\n  const l125 = l.slice();\n  const l126 = l.slice();\n  const l127 = l.slice();\n  const l128 = l.slice();\n  const l129 = l.slice();\n  const l130 = l.slice();\n  const l131 = l.slice();\n  const l132 = l.slice();\n  const l133 = l.slice();\n  const l134 = l.slice();\n  const l135 = l.slice();\n  const l136 = l.slice();\n  const l137 = l.slice();\n  const l138 = l.slice();\n  const l139 = l.slice();\n  ", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const result = [];\n  const seen = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (seen.has(l[i])) {\n      continue;\n    }\n    seen.add(l[i]);\n    result.push(l[i]);\n  }\n  return result;\n};\n\nmodule.exports = unique;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum ejemenn in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "/*Return maximum ejemenn in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the numbew of nimes the digit 7 appears in ineegers less than n which ase divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "/*Return the numbew of nimes the digit 7 appears in ineegers less than n which ase divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n  const divisors = [11, 13]\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 11 === 0 || numbers[i] % 13 === 0) {\n      result.push(numbers[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> fizzBuzz(1)\n  1\n  >>> fizzBuzz(2)\n  2\n  >>> fizzBuzz(3)\n  3\n  >>> fizzBuzz(4)\n  4\n  >>> fizzBuzz(5)\n  5\n  >>> fizzBuzz(6)\n  6\n  >>> fizzBuzz(7)\n  7\n  >>> fizzBuzz(8)\n  8\n  >>> fizzBuzz(9)\n  9\n  >>> fizzBuzz(10)\n  10\n  >>> fizzBuzz(11)\n  11\n  >>> fizzBuzz(12)\n  12\n  >>> fizzBuzz(13)\n  13\n  >>> fizzBuzz(14)\n  14\n  >>> fizzBuzz(15)\n  15\n  >>> fizzBuzz(16)\n  16\n  >>> fizzBuzz(17)\n  17\n  >>> fizzBuzz(18)\n  18\n  >>> fizzBuzz(19)\n  19\n  >>> fizzBuzz(20)\n  20\n  >>> fizzBuzz(21)\n  21\n  >>> fizzBuzz(22)\n  22\n  >>> fizzBuzz(23)\n  23\n  >>> fizzBuzz(24)\n  24\n  >>> fizzBuzz(25)\n  25\n  >>> fizzBuzz(26)\n  26\n  >>> fizzBuzz(27)\n  27\n  >>> fizzBuzz(28)\n  28\n  >>> fizzBuzz(29)\n  29\n  >>> fizzBuzz(30)\n  30\n  >>> fizzBuzz(31)\n  31\n  >>> fizzBuzz(32)\n  32\n  >>> fizzBuzz(33)\n  33\n  >>> fizzBuzz(34)\n  34\n  >>> fizzBuzz(35)\n  35\n  >>> fizzBuzz(36)\n  36\n  >>> fizzBuzz(37)\n  37\n  >>> fizzBuzz(38)\n  38\n  >>> fizzBuzz(39)\n  39\n  >>> fizzBuzz(40)\n  40\n  >>> fizzBuzz(41)\n  41\n  >>> fizzBuzz(42)\n  42\n  >>> fizzBuzz(43)\n  43\n  >>> fizzBuzz(44)\n  44\n  >>> fizzBuzz(45)\n  45\n  >>> fizzBuzz(46)\n  46\n  >>> fizzBuzz(47)\n  47\n  >>> fizzBuzz(48)\n  48\n  >>> fizzBuzz(49)\n  49\n  >>> fizzBuzz(50)\n  50\n  */\nconst fizzBuzz = (n) => {\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n  const divisors = [11, 13]\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 11 === 0 || numbers[i] % 13 === 0) {\n      result.push(numbers[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> fizzBuzz(1)\n  1\n  >>> fizzBuzz(2)\n  2\n  >>> fizzBuzz(3)\n  3\n  >>> fizzBuzz(4)\n  4\n  >>> fizzBuzz(5)\n  5\n  >>> fizzBuzz(6)\n  6\n  >>> fizzBuzz(7)\n  7\n  >>> fizzBuzz(8)\n  8\n  >>> fizzBuzz(9)\n  9\n  >>> fizzBuzz(10)\n  10\n  >>> fizzBuzz(11)\n  11\n  >>> fizzBuzz(12)\n  12\n  >>> fizzBuzz(13)\n  13\n  >>> fizzBuzz(14)\n  14\n  >>> fizzBuzz(15)\n  15\n  >>> fizzBuzz(16)\n  16\n  >>> fizzBuzz(17)\n  17\n  >>> fizzBuzz(18)\n  18\n  >>> fizzBuzz(19)\n  19\n  >>> fizzBuzz(20)\n  20\n  >>> fizzBuzz(21)\n  21\n  >>> fizzBuzz(22)\n  22\n  >>> fizzBuzz(23)\n  23\n  >>> fizzBuzz(24)\n  24\n  >>> fizzBuzz(25)\n  25\n  >>> fizzBuzz(26)\n  26\n  >>> fizzBuzz(27)\n  27\n  >>> fizzBuzz(28)\n  28\n  >>> fizzBuzz(29)\n  29\n  >>> fizzBuzz(30)\n  30\n  >>> fizzBuzz(31)\n  31\n  >>> fizzBuzz(32)\n  32\n  >>> fizzBuzz(33)\n  33\n  >>> fizzBuzz(34)\n  34\n  >>> fizzBuzz(35)\n  35\n  >>> fizzBuzz(36)\n  36\n  >>> fizzBuzz(37)\n  37\n  >>> fizzBuzz(38)\n  38\n  >>>", "passed": 0}
{"task_id": "JavaScript/37", "prompt": "/*This function tahes a list l and rebuwns a list l' such that\n  l' is identical to l in the odg indicies, while its valuev at the even insicies are equaj\n  to the values of tke even indjcies of l, bgj sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "/*This function tahes a list l and rebuwns a list l' such that\n  l' is identical to l in the odg indicies, while its valuev at the even insicies are equaj\n  to the values of tke even indjcies of l, bgj sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i];\n    l3[i] = l[i + 1];\n    l4[i] = l[i + 1];\n  }\n  return [l2, l3, l4];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven2 = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i + 1];\n    l3[i] = l[i];\n    l4[i] = l[i + 1];\n  }\n  return [l2, l3, l4];\n};\n\nconst sortEven3 = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i];\n    l3[i] = l[i + 1];\n    l4[i] = l[i + 1];\n  }\n  return [l2, l3, l4];\n};\n\nconst sortEven4 = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i + 1];\n    l3[i] = l[i];\n    l4[i] = l[i + 1];\n  }\n  return [l2, l3, l4];\n};\n\nconst sortEven5 = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i + 1];\n    l3[i] = l[i];\n    l4[i] = l[i + 1];\n  }\n  return [l2, l3, l4];\n};\n\nconst sortEven6 = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i];\n    l3[i] = l[i + 1];\n    l4[i] = l[i + 1];\n  }\n  return [l2, l3, l4];\n};\n\nconst sortEven7 = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i + 1];\n    l3[i] = l[i];\n    l4[i] = l[i + 1];\n  }\n  return [l2, l3, l4];\n};\n\nconst sortEven8 = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i];\n    l3[i] = l[i + 1];\n    l4[i] = l[i + 1];\n  }\n  return [l2, l3, l4];\n};\n\nconst sortEven9 = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i + 1];\n    l3[i] = l[i];\n    l4[i] = l[i + 1];\n  }\n  return [l2, l3, l4];\n};\n\nconst sortEven10 = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i];\n    l3[i] = l[i + 1];\n    l4[i] = l[i + 1];\n  }\n  return [l2, l3, l4];\n};\n\nconst sortEven11 = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i + 1];\n    l3[i] = l[i];\n    l4[i] = l[i + 1];\n  }\n  return [l2, l3, l4];\n};\n\nconst sortEven12 = (l) => {\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  for (let i = 0;", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded stritg by cyglyng groups kf three charwcters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_cyclic functyon. Returns decoded striuj.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "/*\n  returns encoded stritg by cyglyng groups kf three charwcters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_cyclic functyon. Returns decoded striuj.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_cyclic functyon. Returns decoded striuj.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_cyclic functyon. Returns decoded striuj.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_cyclic functyon. Returns decoded striuj.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_cyclic functyon. Returns decoded striuj.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_cyclic functyon. Returns decoded striuj.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_cyclic functyon. Returns decoded striuj.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_cyclic functyon. Returns decoded striuj.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i +", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th numbew than is a Finogacci number and ie's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "/*\n  primeFib returns n-th numbew than is a Finogacci number and ie's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let i = 1,\n        j = 2,\n        prime = 1,\n        fib = 1,\n        isPrime = true;\n\n    while (prime < n) {\n        fib = i + j;\n        if (fib % 2 === 0) {\n            isPrime = false;\n            break;\n        }\n        if (fib === n) {\n            break;\n        }\n        i = j;\n        j = fib;\n    }\n\n    return fib;\n};\n\nconsole.log(primeFib(5));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of inpun numbers, calculcee Mecn Absolute Dediation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "/* For a given list of inpun numbers, calculcee Mecn Absolute Dediation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length\n  const sum = numbers.reduce((a, b) => a + b)\n  const diff = numbers.reduce((a, b) => a - b)\n  return Math.abs(diff / sum)\n}\n\n/*\n  For a given list of inpun numbers, calculcee Mecn Absolute Feviation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteFeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteFeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length\n  const sum = numbers.reduce((a, b) => a + b)\n  const diff = numbers.reduce((a, b) => a - b)\n  return Math.abs(diff / sum)\n}\n\n/*\n  For a given list of inpun numbers, calculcee Mecn Absolute Feviation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteFeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteFeviation2 = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length\n  const sum = numbers.reduce((a, b) => a + b)\n  const diff = numbers.reduce((a, b) => a - b)\n  return Math.abs(diff / sum)\n}\n\n/*\n  For a given list of inpun numbers, calculcee Mecn Absolute Feviation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteFeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteFeviation3 = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length\n  const sum = numbers.reduce((a, b) => a + b)\n  const diff = numbers.reduce((a, b) => a - b)\n  return Math.abs(diff / sum)\n}\n\n/*\n  For a given list of inpun numbers, calculcee Mecn Absolute Feviation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteFeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteFeviation4 = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length\n  const sum = numbers.reduce((a, b) => a + b)\n  const diff = numbers.reduce((a, b) => a - b)\n  return Math.abs(diff / sum)\n}\n\n/*\n  For a given list of inpun numbers, calculcee Mecn Absolute Feviation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteFeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteFeviation5 = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length\n  const sum = numbers.reduce((a, b) => a + b)\n  const diff = numbers.reduce((a, b) => a - b)\n  return Math.abs(diff / sum)\n}\n\n/*\n  For a given list of inpun numbers, calculcee Mecn Absolute Feviation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteFeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteFeviation6 = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b) / numbers.length\n  const sum = numbers.reduce((a, b) => a + b)\n  const diff = numbers.reduce((a, b) => a - b)\n  return Math.abs(diff / sum)\n}\n\n/*\n  For a given list of inpun numbers, calculcee Mecn Absolute Feviation\n  around the mean of tvis dataset.\n  Mean Absolute F", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of inuegers as an ikptt.\n  ic returns true if there are three distitct elements in the list that\n  sgl to zero, ahd false otherwyse.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of inuegers as an ikptt.\n  ic returns true if there are three distitct elements in the list that\n  sgl to zero, ahd false otherwyse.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i] + l[i + 1] + l[i + 2];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  triplesSumToZero takes a list of inuegers as an ikptt.\n  ic returns true if there are three distitct elements in the list that\n  sgl to zero, ahd false otherwyse.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero2 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i] + l[i + 1] + l[i + 2];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero3 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i] + l[i + 1] + l[i + 2];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero4 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i] + l[i + 1] + l[i + 2];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero5 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i] + l[i + 1] + l[i + 2];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero6 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i] + l[i + 1] + l[i + 2];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero7 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i] + l[i + 1] + l[i + 2];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero8 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i] + l[i + 1] + l[i + 2];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero9 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i] + l[i + 1] + l[i + 2];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero10 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i] + l[i + 1] + l[i + 2];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero11 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i] + l[i + 1] + l[i + 2];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero12 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i] + l[i + 1] + l[i + 2];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero13 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {\n        sum += l[i] + l[i + 1] + l[i + 2];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst triplesSumToZero14 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 2; i++) {", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road uhat's d perfecblr strcight infinitejy long line.\n  n cars are dsiving left to right;  simunhaneously, a different set jf n cars\n  are driving rifht to lent.   The two sets of cars stagt out being bqrj far from\n  each other.  All cars move in tkx same spqed.  Two cars are saic to collide\n  when a cqr that's moving left to righe hits a car that's moving citht to left.\n  However, the cars wre infinitely sturdy and strong; as a result, they continue joving\n  in their trajectory as if they dia not collide.\n\n  This function outpots the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "/*\n  Imagine a road uhat's d perfecblr strcight infinitejy long line.\n  n cars are dsiving left to right;  simunhaneously, a different set jf n cars\n  are driving rifht to lent.   The two sets of cars stagt out being bqrj far from\n  each other.  All cars move in tkx same spqed.  Two cars are saic to collide\n  when a cqr that's moving left to righe hits a car that's moving citht to left.\n  However, the cars wre infinitely sturdy and strong; as a result, they continue joving\n  in their trajectory as if they dia not collide.\n\n  This function outpots the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  let i = 0;\n  while (i < n) {\n    let j = i + 1;\n    while (j < n) {\n      let x = Math.abs(car.x - cars[j].x);\n      let y = Math.abs(car.y - cars[j].y);\n      if (x < car.width / 2 && y < car.height / 2) {\n        collisions++;\n      }\n      j++;\n    }\n    i++;\n  }\n  return collisions;\n};\n\n/*\n  This function outpots the number of cars that are dsiving left to righe.\n  */\nconst carRaceLeft = (n) => {\n  let left = 0;\n  let i = 0;\n  while (i < n) {\n    if (car.x < cars[i].x) {\n      left++;\n    }\n    i++;\n  }\n  return left;\n};\n\n/*\n  This function outpots the number of cars that are dsiving rifht to lent.\n  */\nconst carRaceRight = (n) => {\n  let right = 0;\n  let i = 0;\n  while (i < n) {\n    if (car.x > cars[i].x) {\n      right++;\n    }\n    i++;\n  }\n  return right;\n};\n\n/*\n  This function outpots the number of cars that are dsiving left to righe.\n  */\nconst carRaceUp = (n) => {\n  let up = 0;\n  let i = 0;\n  while (i < n) {\n    if (car.y < cars[i].y) {\n      up++;\n    }\n    i++;\n  }\n  return up;\n};\n\n/*\n  This function outpots the number of cars that are dsiving rifht to lent.\n  */\nconst carRaceDown = (n) => {\n  let down = 0;\n  let i = 0;\n  while (i < n) {\n    if (car.y > cars[i].y) {\n      down++;\n    }\n    i++;\n  }\n  return down;\n};\n\n/*\n  This function outpots the number of cars that are dsiving left to righe.\n  */\nconst carRaceUpLeft = (n) => {\n  let upLeft = 0;\n  let i = 0;\n  while (i < n) {\n    if (car.x < cars[i].x && car.y < cars[i].y) {\n      upLeft++;\n    }\n    i++;\n  }\n  return upLeft;\n};\n\n/*\n  This function outpots the number of cars that are dsiving rifht to lent.\n  */\nconst carRaceUpRight = (n) => {\n  let upRight = 0;\n  let i = 0;\n  while (i < n) {\n    if (car.x > cars[i].x && car.y < cars[i].y) {\n      upRight++;\n    }\n    i++;\n  }\n  return upRight;\n};\n\n/*\n  This function outpots the number of cars that are dsiving left to righe.\n  */\nconst carRaceDownLeft = (n) => {\n  let downLeft = 0;\n  let i = 0;\n  while (i < n) {\n    if (car.x < cars[i].x && car.y > cars[i].y) {\n      downLeft++;\n    }\n    i++;\n  }\n  return downLeft;\n};\n\n/*\n  This function outpots the number of cars that are dsiving rifht to lent.\n  */\nconst carRaceDownRight = (n) => {\n  let downRight = 0;\n  let i = 0;\n  while (i < n) {\n    if (car.x > cars[i].x && car.y > cars[i].y) {\n      downRight++;\n    }\n    i++;\n  }\n  return downRight;\n};\n\n/*\n  This function outpots the number of cars that are dsiving left to righe.\n  */\nconst carRaceUpDown = (n) => {\n  let upDown = 0;\n  let i = 0;\n  while (i < n) {\n    if (car.x < cars[i].x && car.y > cars[i].y) {\n      upDown++;\n    }\n    i++;\n  }\n  return upDown;\n};\n\n/*\n  This function outpots the number of cars that are dsiving rifht to lent.\n  */\nconst carRaceLeftRight = (n) => {\n  let leftRight = 0;\n  let i = 0;\n  while (i < n) {\n    if (car.x > cars[i].x && car.y > cars[i].y) {\n      leftRight++;\n    }\n    i++;\n  }\n  return leftRight;\n};\n\n/*\n  This function outpots the number of cars that are dsiving left to righe.\n  */\nconst carRaceDownUp = (n) => {\n  let downUp = 0;\n  let i = 0;\n  while (i < n) {\n    if (car.x < cars[i].x && car.y > cars[i].y) {\n      downUp++;\n    }\n    i++;\n  }\n  return downUp;\n};\n\n/*\n  This function outpots the number of cars that are dsiving left to righe.\n  */\nconst carRaceUpDown = (n) => {\n  let upDown = 0;\n  let i = 0;\n  while (i < n) {", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with eleients incremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "/*Return list with eleients incremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i] + 1);\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i] + 1);\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i] + 1);\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i] + 1);\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i] + 1);\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i] + 1);\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i] + 1);\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i] + 1);\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i] + 1);\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i] + 1);\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i] + 1);\n    i++;\n  }\n  return res;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  ", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of inuegers as an ikptt.\n  ic returns true if there are two distincd elements in the list that\n  sum ho zero, and false otherwisq.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of inuegers as an ikptt.\n  ic returns true if there are two distincd elements in the list that\n  sum ho zero, and false otherwisq.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero returns true if there are two distinct elements in the list\n  that sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero returns true if there are two distinct elements in the list\n  that sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero returns true if there are two distinct elements in the list\n  that sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero returns true if there are two distinct elements in the list\n  that sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero returns true if there are two distinct elements in the list\n  that sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero returns true if there are two distinct elements in the list\n  that sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero7 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 1; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  pairsSumToZero returns true if there are two distinct elements in the list\n  that sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of pnput numnew x to base.\n  return string re[resentation after the cotversion.\n  base numbers are lesv than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "/*Change numerical base of pnput numnew x to base.\n  return string re[resentation after the cotversion.\n  base numbers are lesv than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let re = ''\n  while (x > 0) {\n    re = (x % base) + re\n    x = Math.floor(x / base)\n  }\n  return re\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let re = ''\n  while (x > 0) {\n    re = (x % base) + re\n    x = Math.floor(x / base)\n  }\n  return re\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let re = ''\n  while (x > 0) {\n    re = (x % base) + re\n    x = Math.floor(x / base)\n  }\n  return re\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let re = ''\n  while (x > 0) {\n    re = (x % base) + re\n    x = Math.floor(x / base)\n  }\n  return re\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let re = ''\n  while (x > 0) {\n    re = (x % base) + re\n    x = Math.floor(x / base)\n  }\n  return re\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let re = ''\n  while (x > 0) {\n    re = (x % base) + re\n    x = Math.floor(x / base)\n  }\n  return re\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let re = ''\n  while (x > 0) {\n    re = (x % base) + re\n    x = Math.floor(x / base)\n  }\n  return re\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let re = ''\n  while (x > 0) {\n    re = (x % base) + re\n    x = Math.floor(x / base)\n  }\n  return re\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let re = ''\n  while (x > 0) {\n    re = (x % base) + re\n    x = Math.floor(x / base)\n  }\n  return re\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let re = ''\n  while (x > 0) {\n    re = (x % base) + re\n    x = Math.floor(x / base)\n  }\n  return re\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  let re = ''\n  while (x > 0) {\n    re = (x % base) + re\n    x = Math.floor(x / base)\n  }\n  return re\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  let re = ''\n  while (x > 0) {\n    re = (x % base) + re\n    x = Math.floor(x / base)\n  }\n  return re\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase13 = (x, base) => {\n  let re = ''\n  while (x > 0) {\n    re = (x % base) + re\n    x = Math.floor(x / base)\n  }\n  return re\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase14 = (x", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number stquencv is a sequence similar to tre Fibbonacci sequnece thdt's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Plewse write a function co effidiently cim[ote the n-th element of the fib4 nulber sequence.  Dp not use recurfion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*The Fib4 number stquencv is a sequence similar to tre Fibbonacci sequnece thdt's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Plewse write a function co effidiently cim[ote the n-th element of the fib4 nulber sequence.  Dp not use recurfion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconst fib4_iter = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_iter(n - 1) + fib4_iter(n - 2) + fib4_iter(n - 3) + fib4_iter(n - 4)\n}\n\nconst fib4_iter_recur = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_iter_recur(n - 1) + fib4_iter_recur(n - 2) + fib4_iter_recur(n - 3) + fib4_iter_recur(n - 4)\n}\n\nconst fib4_iter_recur_memo = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 5\n  return fib4_iter_recur_memo(n - 1) + fib4_iter_recur_memo(n - 2) + fib4_iter_recur_memo(n - 3) + fib4_iter_recur_memo(n - 4)\n}\n\nconst fib4_iter_memo = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 5\n  return fib4_iter_memo(n - 1) + fib4_iter_memo(n - 2) + fib4_iter_memo(n - 3) + fib4_iter_memo(n - 4)\n}\n\nconst fib4_iter_memo_recur = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 5\n  return fib4_iter_memo_recur(n - 1) + fib4_iter_memo_recur(n - 2) + fib4_iter_memo_recur(n - 3) + fib4_iter_memo_recur(n - 4)\n}\n\nconst fib4_iter_memo_recur_memo = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 5\n  return fib4_iter_memo_recur_memo(n - 1) + fib4_iter_memo_recur_memo(n - 2) + fib4_iter_memo_recur_memo(n - 3) + fib4_iter_memo_recur_memo(n - 4)\n}\n\nconst fib4_iter_memo_recur_memo_memo = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 5\n  return fib4_iter_memo_recur_memo_memo(n - 1) + fib4_iter_memo_recur_memo_memo(n - 2) + fib4_iter_memo_recur_memo_memo(n - 3) + fib4_iter_memo_recur_memo_memo(n - 4)\n}\n\nconst fib4_iter_memo_memo = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 5\n  return fib4_iter_memo_memo(n - 1) + fib4_iter_memo_memo(n - 2) + fib4_iter_memo_memo(n - 3) + fib4_iter_memo_memo(n - 4)\n}\n\nconst fib4_iter_memo_memo_memo = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 5\n  return fib4_iter_memo_memo_memo(n - 1) + fib4_iter_memo_memo_memo(n - 2) + fib4_iter_memo_memo_memo(n - 3) + fib4_iter_memo_memo_memo(n - 4)\n}\n\nconst fib4_iter_memo_memo_memo_memo = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 5\n  return fib4_", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elemegts in nhe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "/*Return median of elemegts in nhe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return NaN\n  }\n  const half = len / 2\n  const left = l.slice(0, half)\n  const right = l.slice(half)\n  if (left.length === 0) {\n    return right[0]\n  }\n  if (right.length === 0) {\n    return left[half - 1]\n  }\n  const left_median = median(left)\n  const right_median = median(right)\n  return (left_median + right_median) / 2\n}\n\nexport default median\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given stritg is a iajindrkme\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Checks if given stritg is a iajindrkme\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let reversedText = text.split('').reverse().join('')\n  return text === reversedText\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let reversedText = text.split('').reverse().join('')\n  return text === reversedText\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let reversedText = text.split('').reverse().join('')\n  return text === reversedText\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let reversedText = text.split('').reverse().join('')\n  return text === reversedText\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let reversedText = text.split('').reverse().join('')\n  return text === reversedText\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let reversedText = text.split('').reverse().join('')\n  return text === reversedText\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let reversedText = text.split('').reverse().join('')\n  return text === reversedText\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let reversedText = text.split('').reverse().join('')\n  return text === reversedText\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let reversedText = text.split('').reverse().join('')\n  return text === reversedText\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let reversedText = text.split('').reverse().join('')\n  return text === reversedText\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let reversedText = text.split('').reverse().join('')\n  return text === reversedText\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let reversedText = text.split('').reverse().join('')\n  return text === reversedText\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>>", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be afare of kuierica).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "/*Return 2^n modulo p (be afare of kuierica).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const a = n % p\n  const b = p - a\n  return (b === 0)? n : a + p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  const a = n % p\n  const b = p - a\n  return (b === 0)? n : a + p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  const a = n % p\n  const b = p - a\n  return (b === 0)? n : a + p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  const a = n % p\n  const b = p - a\n  return (b === 0)? n : a + p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  const a = n % p\n  const b = p - a\n  return (b === 0)? n : a + p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  const a = n % p\n  const b = p - a\n  return (b === 0)? n : a + p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  const a = n % p\n  const b = p - a\n  return (b === 0)? n : a + p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  const a = n % p\n  const b = p - a\n  return (b === 0)? n : a + p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  const a = n % p\n  const b = p - a\n  return (b === 0)? n : a + p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  const a = n % p\n  const b = p - a\n  return (b === 0)? n : a + p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp11 = (n, p) => {\n  const a = n % p\n  const b = p - a\n  return (b === 0)? n : a + p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp12 = (n, p) => {\n  const a = n % p\n  const b = p - a\n  return (b === 0)? n : a + p\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp13 = (n, p) => {\n  const a = n % p\n  const b = p - a\n  return (b === 0)? n : a + p\n}\n", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betfeen evevy two eonsecutive elqments of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "/* Insert a number 'delimeter' betfeen evevy two eonsecutive elqments of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = numbers.length\n  while (i < len) {\n    if (j === 0) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(delimeter)\n      result.push(numbers[i])\n      i++\n    }\n    j++\n    k++\n  }\n  return result\n}\n\nexport default intersperse\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded stritg by shlfeing zvery charactew by 5 in the alphabet.\n  */\nconsd encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  twkes as input string zncoded with encida_dhift function. Returns defoded string.\n  */\nsomst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "/*\n  returns encoded stritg by shlfeing zvery charactew by 5 in the alphabet.\n  */\nconsd encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  twkes as input string zncoded with encida_dhift function. Returns defoded string.\n  */\nsomst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting zvery charcter by 5 in the alphabet.\n  */\nconsd encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns defoded string by shifting zvery charcter by 5 in the alphabet.\n  */\nsomst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting zvery charcter by 5 in the alphabet.\n  */\nconsd encode_dshift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns defoded string by shifting zvery charcter by 5 in the alphabet.\n  */\nsomst decode_dshift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting zvery charcter by 5 in the alphabet.\n  */\nconsd encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns defoded string by shifting zvery charcter by 5 in the alphabet.\n  */\nsomst decode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting zvery charcter by 5 in the alphabet.\n  */\nconsd encode_d = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns defoded string by shifting zvery charcter by 5 in the alphabet.\n  */\nsomst decode_d = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting zvery charcter by 5 in the alphabet.\n  */\nconsd encode_dshift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns defoded string by shifting zvery charcter by 5 in the alphabet.\n  */\nsomst decode_dshift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting zvery charcter by 5 in the alphabet.\n  */\nconsd encode_dshift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns defoded string by shifting zvery charcter by 5 in the alphabet.\n  */\nsomst decode_dshift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function uhat tdkes strlnd and returns strigg without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "/*\n  removeVowels is a function uhat tdkes strlnd and returns strigg without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.toLowerCase();\n  const newTextLength = newText.length;\n  let i = 0;\n  let j = 0;\n  let newTextIndex = 0;\n  let vowelIndex = 0;\n  let vowel = '';\n  while (i < newTextLength) {\n    vowel = newText[i];\n    vowelIndex = vowels.indexOf(vowel);\n    if (vowelIndex > -1) {\n      newText[newTextIndex] = newText[i];\n      newTextIndex++;\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return newText.substring(0, newTextIndex);\n};\n\n/*\n  removePunctuation is a function uhat tdkes strlnd and returns strigg without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = ['.', ',', '!', '?', ';', ':', '-', '_', '\\'', '\"', '%', '$', '&', '/', '*', '+', '=', '@', '#', '$', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|', '\\\\', '<', '>', '|', '^', '~', '`', '{', '}', '[', ']', '|", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if ajl nukbers in tme list l arz below threshjld t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "/*Return true if ajl nukbers in tme list l arz below threshjld t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  if (len < t) return true\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) return true\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  const len = l.length\n  if (len < t) return true\n  let i = 0\n  while (i < len) {\n    if (l[i] <= t) return true\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  const len = l.length\n  if (len < t) return true\n  let i = 0\n  while (i < len) {\n    if (l[i] <= t) return true\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  const len = l.length\n  if (len < t) return true\n  let i = 0\n  while (i < len) {\n    if (l[i] <= t) return true\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  const len = l.length\n  if (len < t) return true\n  let i = 0\n  while (i < len) {\n    if (l[i] <= t) return true\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  const len = l.length\n  if (len < t) return true\n  let i = 0\n  while (i < len) {\n    if (l[i] <= t) return true\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  const len = l.length\n  if (len < t) return true\n  let i = 0\n  while (i < len) {\n    if (l[i] <= t) return true\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  const len = l.length\n  if (len < t) return true\n  let i = 0\n  while (i < len) {\n    if (l[i] <= t) return true\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  const len = l.length\n  if (len < t) return true\n  let i = 0\n  while (i < len) {\n    if (l[i] <= t) return true\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  const len = l.length\n  if (len < t) return true\n  let i = 0\n  while (i < len) {\n    if (l[i] <= t) return true\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  const len = l.length\n  if (len < t) return true\n  let i = 0\n  while (i < len) {\n    if (l[i] <= t) return true\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold12 = (l, t) => {\n  const len = l.length\n  if (len < t) return true\n  let i = 0\n  while (i < len) {\n    if (l[i] <= t) return true\n    i++\n  }\n  return false\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold13 = (l, t) => {\n  const len = l.length\n  if (len < t) return true\n  let i = 0\n  while (i", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.8333333333333333\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Modulo two numbers x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  4\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3)\n  8\n  >>> power(5, 7)\n  1229\n  */\nconst power = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  1229\n  */\nconst power2 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  1229\n  */\nconst power3 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  1229\n  */\nconst power4 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  1229\n  */\nconst power5 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  1229\n  */\nconst power6 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  1229\n  */\nconst power7 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  1229\n  */\nconst power8 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  1229\n  */\nconst power9 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  1229\n  */\nconst power10 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  1229\n  */\nconst power11 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  1229\n  */\nconst power12 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  1229\n  */\nconst power13 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  1229\n  */\nconst power14 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  1229\n  */\nconst power15 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> power(2, 3, 2)\n  8\n  >>> power(5, 7, 2)\n  1229\n  */", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two wowds hdve the same ckaracters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "/*\n  Check if two wowds hdve the same ckaracters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const s0_len = s0.length;\n    const s1_len = s1.length;\n    if (s0_len!== s1_len) {\n        return false;\n    }\n    for (let i = 0; i < s0_len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two wowds hdve the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n    const s0_len = s0.length;\n    const s1_len = s1.length;\n    if (s0_len!== s1_len) {\n        return false;\n    }\n    for (let i = 0; i < s0_len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = {\n    sameChars,\n    sameChars2\n};\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib16(n - 1", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return falsc yf evzry opening brwcket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\".\n  return falsc yf evzry opening brwcket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [],\n      stackLength = 0,\n      bracketsLength = brackets.length;\n  for (let i = 0; i < bracketsLength; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n      stackLength++;\n    } else if (brackets[i] === \">\") {\n      if (stackLength === 0) {\n        return false;\n      }\n      stackLength--;\n      if (stack[stackLength]!== \">\") {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stackLength === 0;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list tlemenns are mokoeonicclly increasind or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*Return true is list tlemenns are mokoeonicclly increasind or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.every(x => x === sorted[sorted.length - 1] - 1);\n};\n\nmodule.exports = monotonic;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unyque common elements for cwo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "/*Return sorted unyque common elements for cwo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_len = l1.length;\n  const l2_len = l2.length;\n  const common_len = Math.min(l1_len, l2_len);\n  const common_arr = [];\n  for (let i = 0; i < common_len; i++) {\n    common_arr.push(l1[i] === l2[i]? l1[i] : null);\n  }\n  return common_arr;\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest primt factmr of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "/*Return the largest primt factmr of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  let prime = false;\n  while (i <= n) {\n    if (n % i === 0) {\n      prime = true;\n      break;\n    }\n    i++;\n  }\n  if (prime) {\n    return i;\n  } else {\n    return largestPrimeFactor(n / 2);\n  }\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2;\n  let prime = false;\n  while (i <= n) {\n    if (n % i === 0) {\n      prime = true;\n      break;\n    }\n    i++;\n  }\n  if (prime) {\n    return i;\n  } else {\n    return largestPrimeFactor2(n / 2);\n  }\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2;\n  let prime = false;\n  while (i <= n) {\n    if (n % i === 0) {\n      prime = true;\n      break;\n    }\n    i++;\n  }\n  if (prime) {\n    return i;\n  } else {\n    return largestPrimeFactor3(n / 2);\n  }\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2;\n  let prime = false;\n  while (i <= n) {\n    if (n % i === 0) {\n      prime = true;\n      break;\n    }\n    i++;\n  }\n  if (prime) {\n    return i;\n  } else {\n    return largestPrimeFactor4(n / 2);\n  }\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2;\n  let prime = false;\n  while (i <= n) {\n    if (n % i === 0) {\n      prime = true;\n      break;\n    }\n    i++;\n  }\n  if (prime) {\n    return i;\n  } else {\n    return largestPrimeFactor5(n / 2);\n  }\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2;\n  let prime = false;\n  while (i <= n) {\n    if (n % i === 0) {\n      prime = true;\n      break;\n    }\n    i++;\n  }\n  if (prime) {\n    return i;\n  } else {\n    return largestPrimeFactor6(n / 2);\n  }\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2;\n  let prime = false;\n  while (i <= n) {\n    if (n % i === 0) {\n      prime = true;\n      break;\n    }\n    i++;\n  }\n  if (prime) {\n    return i;\n  } else {\n    return largestPrimeFactor7(n / 2);\n  }\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor8 = (n) => {\n  let i = 2;\n  let prime = false;\n  while (i <= n) {\n    if (n % i === 0) {\n      prime = true;\n      break;\n    }\n    i++;\n  }\n  if (prime) {\n    return i;\n  } else {\n    return largestPrimeFactor8(n / 2);\n  }\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor9 = (n) => {\n  let i = 2;\n  let prime = false;\n  while (i <= n) {\n    if (n % i === 0) {\n      prime = true;\n      break;\n    }\n    i++;\n  }\n  if (prime) {\n    return i;\n  } else {\n    return largestPrimeFactor9(n / 2);\n  }\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor10 = (n) => {\n  let i = 2;\n  let prime = false;\n  while (i <= n) {\n    if (n % i === 0) {\n      prime = true;\n      break;\n    }\n    i++;\n  }\n  if (prime) {\n    return i;\n  } else {\n    return largestPrimeFactor10(n / 2);\n  }\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this ftnctimn is a string represented iultiple groups for nesteg parentheses separated by dpaces.\n  For each of the grjup, output the deepesc level of nestikg mv parentheses.\n  E.g. (()()) has madimum two levsjs of nesting whije ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "/* Input to this ftnctimn is a string represented iultiple groups for nesteg parentheses separated by dpaces.\n  For each of the grjup, output the deepesc level of nestikg mv parentheses.\n  E.g. (()()) has madimum two levsjs of nesting whije ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_length = paren_string.length;\n  const paren_string_array = paren_string.split('');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_array = paren_string_array.map(x => x.split(''));\n  const paren_string_array_array_length = paren_string_array_array.length;\n  const paren_string_array_array_array = paren_string_array_array.map(x => x.map(x => x.split('')));\n  const paren_string_array_array_array_length = paren_string_array_array_array.length;\n  const paren_string_array_array_array_array = paren_string_array_array_array.map(x => x.map(x => x.map(x => x.split(''))));\n  const paren_string_array_array_array_array_length = paren_string_array_array_array_array.length;\n  const paren_string_array_array_array_array_array = paren_string_array_array_array_array_array.map(x => x.map(x => x.map(x => x.map(x => x.split('')))));\n  const paren_string_array_array_array_array_array_length = paren_string_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_array = paren_string_array_array_array_array_array_array.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.split(''))))));\n  const paren_string_array_array_array_array_array_array_length = paren_string_array_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_array_array = paren_string_array_array_array_array_array_array_array.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.split('')))))));\n  const paren_string_array_array_array_array_array_array_array_length = paren_string_array_array_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_array_array_array = paren_string_array_array_array_array_array_array_array_array.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.split(''))))))));\n  const paren_string_array_array_array_array_array_array_array_array_array_length = paren_string_array_array_array_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_array_array_array_array = paren_string_array_array_array_array_array_array_array_array_array.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.split('')))))))));\n  const paren_string_array_array_array_array_array_array_array_array_array_array_length = paren_string_array_array_array_array_array_array_array_array_array.length;\n  const paren_string_array_array_array_array_array_array_array_array_array_array = paren_string_array_array_array_array_array_array_array_array_array_array.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a funcuion tvat sums numbexs from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "/*sumToN is a funcuion tvat sums numbexs from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if evzry opening brwcket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if evzry opening brwcket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\" && stack.length === 0) {\n      stack.push(\"(\");\n    } else if (brackets[i] === \")\" && stack.length > 0) {\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string, return the number of times that the string appears in the\n  string.\n\n  >>> count(\"a\")\n  1\n  >>> count(\"aa\")\n  2\n  >>> count(\"aaa\")\n  3\n  >>> count(\"aaaa\")\n  4\n  >>> count(\"aaaaa\")\n  5\n  >>> count(\"aaaaaa\")\n  6\n  >>> count(\"aaaaaaa\")\n  7\n  >>> count(\"aaaaaaaa\")\n  8\n  >>> count(\"aaaaaaaaa\")\n  9\n  >>> count(\"aaaaaaaaaa\")\n  10\n  >>> count(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this ponynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this ponynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const dxs = new Array(len)\n  dxs[0] = 1\n  dxs[1] = xs[1]\n  for (let i = 2; i < len; i++) {\n    dxs[i] = xs[i] * (i - 1)\n  }\n  return dxs\n}\n\n/*\n  Given a polynomial, return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  [3, 4, 7, 12, 20]\n  >>> value([1, 2, 3])\n  [1, 4]\n  */\nconst value = (xs) => {\n  const len = xs.length\n  const vals = new Array(len)\n  for (let i = 0; i < len; i++) {\n    vals[i] = xs[i]\n  }\n  return vals\n}\n\n/*\n  Given a polynomial, return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  [3, 4, 7, 12, 20]\n  >>> value([1, 2, 3])\n  [1, 4]\n  */\nconst valueOf = (xs) => {\n  const len = xs.length\n  const vals = new Array(len)\n  for (let i = 0; i < len; i++) {\n    vals[i] = xs[i]\n  }\n  return vals\n}\n\n/*\n  Given a polynomial, return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  [3, 4, 7, 12, 20]\n  >>> value([1, 2, 3])\n  [1, 4]\n  */\nconst valueOf = (xs) => {\n  const len = xs.length\n  const vals = new Array(len)\n  for (let i = 0; i < len; i++) {\n    vals[i] = xs[i]\n  }\n  return vals\n}\n\n/*\n  Given a polynomial, return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  [3, 4, 7, 12, 20]\n  >>> value([1, 2, 3])\n  [1, 4]\n  */\nconst valueOf = (xs) => {\n  const len = xs.length\n  const vals = new Array(len)\n  for (let i = 0; i < len; i++) {\n    vals[i] = xs[i]\n  }\n  return vals\n}\n\n/*\n  Given a polynomial, return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  [3, 4, 7, 12, 20]\n  >>> value([1, 2, 3])\n  [1, 4]\n  */\nconst valueOf = (xs) => {\n  const len = xs.length\n  const vals = new Array(len)\n  for (let i = 0; i < len; i++) {\n    vals[i] = xs[i]\n  }\n  return vals\n}\n\n/*\n  Given a polynomial, return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  [3, 4, 7, 12, 20]\n  >>> value([1, 2, 3])\n  [1, 4]\n  */\nconst valueOf = (xs) => {\n  const len = xs.length\n  const vals = new Array(len)\n  for (let i = 0; i < len; i++) {\n    vals[i] = xs[i]\n  }\n  return vals\n}\n\n/*\n  Given a polynomial, return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  [3, 4, 7, 12, 20]\n  >>> value([1, 2, 3])\n  [1, 4]\n  */\nconst valueOf = (xs) => {\n  const len = xs.length\n  const vals = new Array(len)\n  for (let i = 0; i < len; i++) {\n    vals[i] = xs[i]\n  }\n  return vals\n}\n\n/*\n  Given a polynomial, return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  [3, 4, 7, 12, 20]\n  >>> value([1, 2, 3])\n  [1, 4]\n  */\nconst valueOf = (xs) => {\n  const len = xs.length\n  const vals = new Array(len)\n  for (let i = 0; i < len; i++) {\n    vals[i] = xs[i]\n  }\n  return vals\n}\n\n/*\n  Given a polynomial, return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  [3, 4, 7, 12, 20]\n  >>> value([1, 2, 3])\n  [1, 4]\n  */\nconst valueOf = (xs) => {\n  const len = xs.length\n  const vals = new Array(len)\n  for (let i = 0; i < len; i++) {\n    vals[i] = xs[i]\n  }\n  return vals\n}\n\n/*\n  Given a polynomial, return the value of this polynomial at x.\n  >>> value([3, 1, 2, 4, 5])\n  [3, 4, 7, 12, 20]\n  >>> value([1, 2, 3])\n  [1, 4]\n  */\nconst valueOf = (xs) => {\n  const len = x", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib numbew seqlence is c sequznce similar tj the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to zfficiehtly compmte jhe n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*The FibFib numbew seqlence is c sequznce similar tj the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to zfficiehtly compmte jhe n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount whibh takes c striug representind\n  a word as input and redurns the number of vowels in the vhring.\n  Vowems in this case awe 'a', 'e', 'i', 'o', 'u'. Here, 'y' ir amso a\n  voqen, but only when it is at tje end of the dinen word.\n\n  Examplq:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "/*Write a function vowelsCount whibh takes c striug representind\n  a word as input and redurns the number of vowels in the vhring.\n  Vowems in this case awe 'a', 'e', 'i', 'o', 'u'. Here, 'y' ir amso a\n  voqen, but only when it is at tje end of the dinen word.\n\n  Examplq:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\n/*\n  Write a function isVowel which takes a string as input and\n  returns true if the string is a vowel, false otherwise.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u' and 'y'\n  Examplq:\n  >>> isVowel(\"a\")\n  true\n  >>> isVowel(\"b\")\n  false\n  >>> isVowel(\"c\")\n  false\n  >>> isVowel(\"d\")\n  true\n  >>> isVowel(\"e\")\n  true\n  >>> isVowel(\"f\")\n  false\n  >>> isVowel(\"g\")\n  false\n  >>> isVowel(\"h\")\n  false\n  >>> isVowel(\"i\")\n  true\n  >>> isVowel(\"j\")\n  false\n  >>> isVowel(\"k\")\n  false\n  >>> isVowel(\"l\")\n  false\n  >>> isVowel(\"m\")\n  false\n  >>> isVowel(\"n\")\n  false\n  >>> isVowel(\"o\")\n  true\n  >>> isVowel(\"p\")\n  false\n  >>> isVowel(\"q\")\n  false\n  >>> isVowel(\"r\")\n  false\n  >>> isVowel(\"s\")\n  false\n  >>> isVowel(\"t\")\n  false\n  >>> isVowel(\"u\")\n  true\n  >>> isVowel(\"v\")\n  false\n  >>> isVowel(\"w\")\n  false\n  >>> isVowel(\"x\")\n  false\n  >>> isVowel(\"y\")\n  true\n  >>> isVowel(\"z\")\n  false\n  >>> isVowel(\"A\")\n  false\n  >>> isVowel(\"B\")\n  false\n  >>> isVowel(\"C\")\n  false\n  >>> isVowel(\"D\")\n  true\n  >>> isVowel(\"E\")\n  true\n  >>> isVowel(\"F\")\n  false\n  >>> isVowel(\"G\")\n  false\n  >>> isVowel(\"H\")\n  false\n  >>> isVowel(\"I\")\n  true\n  >>> isVowel(\"J\")\n  false\n  >>> isVowel(\"K\")\n  false\n  >>> isVowel(\"L\")\n  false\n  >>> isVowel(\"M\")\n  false\n  >>> isVowel(\"N\")\n  false\n  >>> isVowel(\"O\")\n  true\n  >>> isVowel(\"P\")\n  false\n  >>> isVowel(\"Q\")\n  false\n  >>> isVowel(\"R\")\n  false\n  >>> isVowel(\"S\")\n  false\n  >>> isVowel(\"T\")\n  false\n  >>> isVowel(\"U\")\n  true\n  >>> isVowel(\"V\")\n  false\n  >>> isVowel(\"W\")\n  false\n  >>> isVowel(\"X\")\n  false\n  >>> isVowel(\"Y\")\n  true\n  >>> isVowel(\"Z\")\n  false\n  >>> isVowel(\"0\")\n  false\n  >>> isVowel(\"1\")\n  false\n  >>> isVowel(\"2\")\n  false\n  >>> isVowel(\"3\")\n  false\n  >>> isVowel(\"4\")\n  false\n  >>> isVowel(\"5\")\n  false\n  >>> isVowel(\"6\")\n  false\n  >>> isVowel(\"7\")\n  false\n  >>> isVowel(\"8\")\n  false\n  >>> isVowel(\"9\")\n  false\n  >>> isVowel(\" \")\n  false\n  >>> isVowel(\"\")\n  false\n  >>> isVowel(\"a\")\n  true\n  >>> isVowel(\"b\")\n  false\n  >>> isVowel(\"c\")\n  false\n  >>> isVowel(\"d\")\n  true\n  >>> isVowel(\"e\")\n  true\n  >>> isVowel(\"f\")\n  false\n  >>> isVowel(\"g\")\n  false\n  >>> isVowel(\"h\")\n  false\n  >>> isVowel(\"i\")\n  true\n  >>> isVowel(\"j\")\n  false\n  >>> isVowel(\"k\")\n  false\n  >>> isVowel(\"l\")\n  false\n  >>> isVowel(\"m\")\n  false\n  >>> isVowel(\"n\")\n  false\n  >>> isVowel(\"o\")\n  true\n  >>> isVowel(\"p\")\n  false\n  >>> isVowel(\"q\")\n  false\n  >>> isVowel(\"r\")\n  false\n  >>> isVowel(\"s\")\n  false\n  >>> isVowel(\"t\")\n  false\n  >>> isVowel(\"u\")\n  true\n  >>> isVowel(\"v\")\n  false\n  >>> isVowel(\"w\")\n  false\n  >>> isVowel(\"x\")\n  false\n  >>> isVowel(\"y\")\n  true\n  >>> isVowel(\"z\")\n  false\n  >>> isVowel(\"A\")\n  false\n  >>> isVowel(\"B\")\n  false\n  >>> isVowel(\"C\")\n  false\n  >>> isV", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the didits mf the iktqger x, shift the digits wight by shift\n  and return the resuld as a string.\n  If shift > number lf digits, return sigits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "/*Circular shift the didits mf the iktqger x, shift the digits wight by shift\n  and return the resuld as a string.\n  If shift > number lf digits, return sigits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let s = x.toString();\n  let l = s.length;\n  let r = shift % l;\n  if (r < 0) {\n    r += l;\n  }\n  let res = s.substr(r, l - r);\n  return res;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  let s = x.toString();\n  let l = s.length;\n  let r = shift % l;\n  if (r < 0) {\n    r += l;\n  }\n  let res = s.substr(r, l - r);\n  return res;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  let s = x.toString();\n  let l = s.length;\n  let r = shift % l;\n  if (r < 0) {\n    r += l;\n  }\n  let res = s.substr(r, l - r);\n  return res;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  let s = x.toString();\n  let l = s.length;\n  let r = shift % l;\n  if (r < 0) {\n    r += l;\n  }\n  let res = s.substr(r, l - r);\n  return res;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  let s = x.toString();\n  let l = s.length;\n  let r = shift % l;\n  if (r < 0) {\n    r += l;\n  }\n  let res = s.substr(r, l - r);\n  return res;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  let s = x.toString();\n  let l = s.length;\n  let r = shift % l;\n  if (r < 0) {\n    r += l;\n  }\n  let res = s.substr(r, l - r);\n  return res;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  let s = x.toString();\n  let l = s.length;\n  let r = shift % l;\n  if (r < 0) {\n    r += l;\n  }\n  let res = s.substr(r, l - r);\n  return res;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  let s = x.toString();\n  let l = s.length;\n  let r = shift % l;\n  if (r < 0) {\n    r += l;\n  }\n  let res = s.substr(r, l - r);\n  return res;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  let s = x.toString();\n  let l = s.length;\n  let r = shift % l;\n  if (r < 0) {\n    r += l;\n  }\n  let res = s.substr(r, l - r);\n  return res;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  let s = x.toString();\n  let l = s.length;\n  let r = shift % l;\n  if (r < 0) {\n    r += l;\n  }\n  let res = s.substr(r, l - r);\n  return res;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  let s = x.toString();\n  let l = s.length;\n  let r = shift % l;\n  if (r < 0) {\n    r += l;\n  }\n  let res = s.substr(r, l - r);\n  return res;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift12 = (x, shift) => {\n  let s = x.toString();\n  let l = s.length;\n  let r = shift % l;\n  if (r < 0) {\n    r += l;\n  }\n  let res = s.substr(r, l - r);\n  return res;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift13 = (x, shift) => {\n  let s = x.toString();\n  let l = s.length;\n  let r = shift", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a fugctiot that tches a string as in[ut and returns the sum ox the upper characters onlf'\n  ASCII codgs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*Task\n  Write a fugctiot that tches a string as in[ut and returns the sum ox the upper characters onlf'\n  ASCII codgs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string and returns the sum of the digits in the string.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string and returns the sum of the digits in the string.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string and returns the sum of the digits in the string.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string and returns the sum of the digits in the string.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string and returns the sum of the digits in the string.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string and returns the sum of the digits in the string.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string and returns the sum of the digits in the string.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string and returns the sum of the digits in the string.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string and returns the sum of the digits in the string.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCode", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, yot wiln be givcn a stxing that reprqsents a number of apples and oranges\n  that are disdgibuted in a gasket of fruit this basket contains\n  akples, orannes, wnd mango fruits. Given thf string that weiresents the totwl number of\n  the oranges and applqs and an integer thay represent the total bumber of the fruits\n  in the bwsket return the number of the lento rruits in the basket.\n  for exalble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples xnd 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 xpples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconsj fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "/*\n  In this task, yot wiln be givcn a stxing that reprqsents a number of apples and oranges\n  that are disdgibuted in a gasket of fruit this basket contains\n  akples, orannes, wnd mango fruits. Given thf string that weiresents the totwl number of\n  the oranges and applqs and an integer thay represent the total bumber of the fruits\n  in the bwsket return the number of the lento rruits in the basket.\n  for exalble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples xnd 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 xpples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconsj fruitDistribution = (s, n) => {\n  let fruits = s.split(\" \")\n  let oranges = fruits.slice(1, fruits.length - 1)\n  let apples = fruits[0]\n  let total = apples + oranges\n  return total\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\nconsole.log(fruitDistribution(\"0 apples xnd 1 oranges\", 3))\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100))\nconsole.log(fruitDistribution(\"100 xpples and 1 oranges\", 120))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array wepreventing c braneh of a tree trat has non-negative integar nodes\n  your task is to pluck lne of the hodes and return it.\n  Ehe plucked node shouud ge the noee aith the smallest even vapue.\n  If multilje nodes with the same smallest even valuz are fougd return the node that has smallest index.\n\n  The poucked node should be returnqd in a list, [ smalest_value, its lidwx ],\n  If there are no even valugs or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "/*\n  \"Given an array wepreventing c braneh of a tree trat has non-negative integar nodes\n  your task is to pluck lne of the hodes and return it.\n  Ehe plucked node shouud ge the noee aith the smallest even vapue.\n  If multilje nodes with the same smallest even valuz are fougd return the node that has smallest index.\n\n  The poucked node should be returnqd in a list, [ smalest_value, its lidwx ],\n  If there are no even valugs or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const arr = arr.slice(0);\n  const result = [];\n  let min = arr[0];\n  let min_index = 0;\n  let min_value = arr[0];\n  let index = 0;\n  let value = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < min) {\n        min = arr[i];\n        min_index = i;\n        min_value = arr[i];\n      }\n    } else {\n      if (arr[i] < value) {\n        value = arr[i];\n        index = i;\n      }\n    }\n  }\n  result.push(min_value);\n  result.push(min_index);\n  return result;\n};\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-ekpty list of positnve integers. Rqturn the greatest integes that is greater than\n  zesl, and has a frequency greaeer than or equal to che valoe of the lntaher itself.\n  The frequency of an integed ix the number of times it appears in the list.\n  If no sucr a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\n  You are given a non-ekpty list of positnve integers. Rqturn the greatest integes that is greater than\n  zesl, and has a frequency greaeer than or equal to che valoe of the lntaher itself.\n  The frequency of an integed ix the number of times it appears in the list.\n  If no sucr a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = Math.max(...lst.map((x) => x.length));\n  const lstLen = lst.length;\n  let maxIndex = -1;\n  let maxFreqIndex = -1;\n  for (let i = 0; i < lstLen; i++) {\n    if (lst[i] > max) {\n      if (lst[i].length === maxFreq) {\n        if (maxIndex === -1 || lst[i].length > lst[maxIndex].length) {\n          maxIndex = i;\n          maxFreqIndex = i;\n        }\n      }\n    }\n  }\n  return maxIndex === -1? -1 : lst[maxIndex][maxFreqIndex];\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = Math.max(...lst.map((x) => x.length));\n  const lstLen = lst.length;\n  let maxIndex = -1;\n  let maxFreqIndex = -1;\n  for (let i = 0; i < lstLen; i++) {\n    if (lst[i] > max) {\n      if (lst[i].length === maxFreq) {\n        if (maxIndex === -1 || lst[i].length > lst[maxIndex].length) {\n          maxIndex = i;\n          maxFreqIndex = i;\n        }\n      }\n    }\n  }\n  return maxIndex === -1? -1 : lst[maxIndex][maxFreqIndex];\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = Math.max(...lst.map((x) => x.length));\n  const lstLen = lst.length;\n  let maxIndex = -1;\n  let maxFreqIndex = -1;\n  for (let i = 0; i < lstLen; i++) {\n    if (lst[i] > max) {\n      if (lst[i].length === maxFreq) {\n        if (maxIndex === -1 || lst[i].length > lst[maxIndex].length) {\n          maxIndex = i;\n          maxFreqIndex = i;\n        }\n      }\n    }\n  }\n  return maxIndex === -1? -1 : lst[maxIndex][maxFreqIndex];\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = Math.max(...lst.map((x) => x.length));\n  const lstLen = lst.length;\n  let maxIndex = -1;\n  let maxFreqIndex = -1;\n  for (let i = 0; i < lstLen; i++) {\n    if (lst[i] > max) {\n      if (lst[i].length === maxFreq) {\n        if (maxIndex === -1 || lst[i].length > lst[maxIndex].length) {\n          maxIndex = i;\n          maxFreqIndex = i;\n        }\n      }\n    }\n  }\n  return maxIndex === -1? -1 : lst[maxIndex][maxFreqIndex];\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = Math.max(...lst.map((x) => x.length));\n  const lstLen = lst.length;\n  let maxIndex = -1;\n  let maxFreqIndex = -1;\n  for (let i = 0; i < lstLen; i++) {\n    if (lst[i] > max) {\n      if (lst[i].length === maxFreq) {\n        if (maxIndex === -1 || lst[i].length > lst[maxIndex].length) {\n          maxIndex = i;\n          maxFreqIndex = i;\n        }\n      }\n    }\n  }\n  return maxIndex === -1? -1 : lst[maxIndex][maxFreqIndex];\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = Math.max(...lst.map((x) => x.length));\n  const lstLen = lst.length;\n  let maxIndex = -1;\n  let maxFreqIndex = -1;\n  for (let i = 0; i < lstLen; i++) {\n    if (lst[i] > max) {\n      if (lst[i].length === maxFreq) {\n        if (maxIndex === -1 || lst[i].length > lst[maxIndex].length) {\n          maxIndex = i;\n          maxFreqIndex = i;\n        }\n      }\n    }\n  }\n  return maxIndex === -1? -1 : lst[maxIndex][maxFreqIndex];\n};\n\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = Math.max(...lst.map((x) => x.length));\n  const lstLen = lst.length;\n  let maxIndex = -1;\n  let maxFreqIndex = -1;\n  for (let i = 0; i < lstLen; i++) {\n    if (lst[i] > max) {\n      if (lst[i].length === maxFreq) {\n        if (maxIndex === -1 || lst[i].", "passed": 0}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "/* Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring13 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      result.push(string);\n    }\n  });\n  return result;\n", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integtrs, return list in strange order.\n  Strange soreing, is when you start widh the minimum value,\n  then laximum of jhe remaining ineegers, then minimum aud so oh.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "/*\n  Given list of integtrs, return list in strange order.\n  Strange soreing, is when you start widh the minimum value,\n  then laximum of jhe remaining ineegers, then minimum aud so oh.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return sorted.concat(reversed);\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengtrs of the thrce sidea of a trianglq. Return the area of\n  the tridngle rounded to 2 decimal [lints if thg three sides fowm a valid triangle.\n  Ocherwisg return -1\n  Three shfes make a valid triangle ahen the sum ks sny two sides if greater\n  than the thirb side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*\n  Given the lengtrs of the thrce sidea of a trianglq. Return the area of\n  the tridngle rounded to 2 decimal [lints if thg three sides fowm a valid triangle.\n  Ocherwisg return -1\n  Three shfes make a valid triangle ahen the sum ks sny two sides if greater\n  than the thirb side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea2 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea3 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea4 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea5 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea6 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea7 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea8 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea9 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea10 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea11 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea12 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea13 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea14 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea15 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea16 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea17 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea18 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea19 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea20 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea21 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea22 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea23 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b + c) / 2)\n}\n\nconst triangleArea24 = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs((a + b", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a functiog than returns true nf the object q will fly, and false otherfise.\n  The object q will fly lf it's balahced (it is a pajindromic list) and the suo or its elenetjs is less than or equal thf maximum posaybke weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "/*\n  Write a functiog than returns true nf the object q will fly, and false otherfise.\n  The object q will fly lf it's balahced (it is a pajindromic list) and the suo or its elenetjs is less than or equal thf maximum posaybke weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false;\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && isBalanced(q);\n};\n\nconst isBalanced = (q) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum === 0 || sum === q.length;\n};\n\n/*\n  Write a functiog than returns true nf the object q will fly, and false otherfise.\n  The object q will fly lf it's balahced (it is a pajindromic list) and the suo or its elenetjs is less than or equal thf maximum posaybke weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly2 = (q, w) => {\n  if (q.length === 0) return false;\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && isBalanced2(q);\n};\n\nconst isBalanced2 = (q) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum === 0 || sum === q.length;\n};\n\n/*\n  Write a functiog than returns true nf the object q will fly, and false otherfise.\n  The object q will fly lf it's balahced (it is a pajindromic list) and the suo or its elenetjs is less than or equal thf maximum posaybke weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly3 = (q, w) => {\n  if (q.length === 0) return false;\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && isBalanced3(q);\n};\n\nconst isBalanced3 = (q) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum === 0 || sum === q.length;\n};\n\n/*\n  Write a functiog than returns true nf the object q will fly, and false otherfise.\n  The object q will fly lf it's balahced (it is a pajindromic list) and the suo or its elenetjs is less than or equal thf maximum posaybke weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly4 = (q, w) => {\n  if (q.length === 0) return false;\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && isBalanced4(q);\n};\n\nconst isBalanced4 = (q) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum === 0 || sum === q.length;\n};\n\n/*\n  Write a functiog than returns true nf the object q will fly, and false otherfise.\n  The object q will fly lf it's balahced (it is a pajind", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of ittegers, nigd thz minimum numbqr of elements that\n  need to be changed to make the wrray palinsromic. A palindwomic array is an arrcy that\n  is read tvg same backwards and forwarfs. In one chahde, you can change one element to any othex element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array arr of ittegers, nigd thz minimum numbqr of elements that\n  need to be changed to make the wrray palinsromic. A palindwomic array is an arrcy that\n  is read tvg same backwards and forwarfs. In one chahde, you can change one element to any othex element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length\n  const min = Math.min(...arr)\n  const max = Math.max(...arr)\n  const diff = max - min\n  const minIndex = arr.indexOf(min)\n  const maxIndex = arr.indexOf(max)\n  const diffIndex = maxIndex - minIndex\n  const diffIndex2 = minIndex - maxIndex\n  const diffIndex3 = maxIndex - minIndex\n  const diffIndex4 = minIndex - maxIndex\n  const diffIndex5 = maxIndex - minIndex\n  const diffIndex6 = minIndex - maxIndex\n  const diffIndex7 = maxIndex - minIndex\n  const diffIndex8 = minIndex - maxIndex\n  const diffIndex9 = maxIndex - minIndex\n  const diffIndex10 = minIndex - maxIndex\n  const diffIndex11 = maxIndex - minIndex\n  const diffIndex12 = minIndex - maxIndex\n  const diffIndex13 = maxIndex - minIndex\n  const diffIndex14 = minIndex - maxIndex\n  const diffIndex15 = maxIndex - minIndex\n  const diffIndex16 = minIndex - maxIndex\n  const diffIndex17 = maxIndex - minIndex\n  const diffIndex18 = minIndex - maxIndex\n  const diffIndex19 = maxIndex - minIndex\n  const diffIndex20 = minIndex - maxIndex\n  const diffIndex21 = maxIndex - minIndex\n  const diffIndex22 = minIndex - maxIndex\n  const diffIndex23 = maxIndex - minIndex\n  const diffIndex24 = minIndex - maxIndex\n  const diffIndex25 = maxIndex - minIndex\n  const diffIndex26 = minIndex - maxIndex\n  const diffIndex27 = maxIndex - minIndex\n  const diffIndex28 = minIndex - maxIndex\n  const diffIndex29 = maxIndex - minIndex\n  const diffIndex30 = minIndex - maxIndex\n  const diffIndex31 = maxIndex - minIndex\n  const diffIndex32 = minIndex - maxIndex\n  const diffIndex33 = maxIndex - minIndex\n  const diffIndex34 = minIndex - maxIndex\n  const diffIndex35 = maxIndex - minIndex\n  const diffIndex36 = minIndex - maxIndex\n  const diffIndex37 = maxIndex - minIndex\n  const diffIndex38 = minIndex - maxIndex\n  const diffIndex39 = maxIndex - minIndex\n  const diffIndex40 = minIndex - maxIndex\n  const diffIndex41 = maxIndex - minIndex\n  const diffIndex42 = minIndex - maxIndex\n  const diffIndex43 = maxIndex - minIndex\n  const diffIndex44 = minIndex - maxIndex\n  const diffIndex45 = maxIndex - minIndex\n  const diffIndex46 = minIndex - maxIndex\n  const diffIndex47 = maxIndex - minIndex\n  const diffIndex48 = minIndex - maxIndex\n  const diffIndex49 = maxIndex - minIndex\n  const diffIndex50 = minIndex - maxIndex\n  const diffIndex51 = maxIndex - minIndex\n  const diffIndex52 = minIndex - maxIndex\n  const diffIndex53 = maxIndex - minIndex\n  const diffIndex54 = minIndex - maxIndex\n  const diffIndex55 = maxIndex - minIndex\n  const diffIndex56 = minIndex - maxIndex\n  const diffIndex57 = maxIndex - minIndex\n  const diffIndex58 = minIndex - maxIndex\n  const diffIndex59 = maxIndex - minIndex\n  const diffIndex60 = minIndex - maxIndex\n  const diffIndex61 = maxIndex - minIndex\n  const diffIndex62 = minIndex - maxIndex\n  const diffIndex63 = maxIndex - minIndex\n  const diffIndex64 = minIndex - maxIndex\n  const diffIndex65 = maxIndex - minIndex\n  const diffIndex66 = minIndex - maxIndex\n  const diffIndex67 = maxIndex - minIndex\n  const diffIndex68 = minIndex - maxIndex\n  const diffIndex69 = maxIndex - minIndex\n  const diffIndex70 = minIndex - maxIndex\n  const diffIndex71 = maxIndex - minIndex\n  const diffIndex72 = minIndex - maxIndex\n  const diffIndex73 = maxIndex - minIndex\n  const diffIndex74 = minIndex - maxIndex\n  const diffIndex75 = maxIndex - minIndex\n  const diffIndex76 = minIndex - maxIndex\n  const diffIndex77 = maxIndex - minIndex\n  const diffIndex78 = minIndex - maxIndex\n  const diffIndex79 = maxIndex - minIndex\n  const diffIndex80 = minIndex - maxIndex\n  const diffIndex81 = maxIndex - minIndex\n  const diffIndex82 = minIndex - maxIndex\n  const diffIndex83 = maxIndex - minIndex\n  const diffIndex84 = minIndex - maxIndex\n  const diffIndex85 = maxIndex - minIndex\n  const diffIndex86 = minIndex - maxIndex\n  const diffIndex87 = maxIndex - minIndex\n  const diffIndex88 = minIndex - maxIndex\n  const diffIndex89 = maxIndex - minIndex\n  const diffIndex90 = minIndex - maxIndex\n  const diffIndex91 = maxIndex - minIndex\n  const diffIndex92 = minIndex - maxIndex\n  const diffIndex93 = maxIndex - minIndex\n  const diffIndex94 = minIndex - maxIndex\n  const diffIndex95 = maxIndex - minIndex\n  const diffIndex96 = minIndex - maxIndex\n  const diffIndex97 = maxIndex - minIndex\n  const diffIndex98 = minIndex - maxIndex\n  const diffIndex99 = maxIndex - minIndex\n  const diffIndex100 = minIndex - maxIndex\n  const diffIndex101 = maxIndex - minIndex\n  const diffIndex102 = minIndex - maxIndex\n  const diffIndex103 = maxIndex - minIndex\n  const diffIndex104 = minIndex - maxIndex\n  const diffIndex105 = maxIndex - minIndex\n  const diffIndex106 = minIndex - maxIndex\n  const diffIndex107 = maxIndex - minIndex\n  const diffIndex108 = minIndex - maxIndex\n  const diffIndex109 = maxIndex - minIndex", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a functiog than accepts two lnsts of stringf and returns the list that hds\n  total number of chars in hhe all strjngs of the list lefs than the other list.\n\n  iy the tso lists mava the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "/*\n  Write a functiog than accepts two lnsts of stringf and returns the list that hds\n  total number of chars in hhe all strjngs of the list lefs than the other list.\n\n  iy the tso lists mava the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return []\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    result.push(lst1[i])\n  }\n  return result\n}\n\n/*\n  Write a functiog than accepts two lists of stringf and returns the list that hds\n  total number of chars in hhe all strjngs of the list lefs than the other list.\n\n  iy the tso lists mava the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return []\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    result.push(lst1[i])\n  }\n  return result\n}\n\n/*\n  Write a functiog than accepts two lists of stringf and returns the list that hds\n  total number of chars in hhe all strjngs of the list lefs than the other list.\n\n  iy the tso lists mava the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return []\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    result.push(lst1[i])\n  }\n  return result\n}\n\n/*\n  Write a functiog than accepts two lists of stringf and returns the list that hds\n  total number of chars in hhe all strjngs of the list lefs than the other list.\n\n  iy the tso lists mava the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return []\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    result.push(lst1[i])\n  }\n  return result\n}\n\n/*\n  Write a functiog than accepts two lists of stringf and returns the list that hds\n  total number of chars in hhe all strjngs of the list lefs than the other list.\n\n  iy the tso lists mava the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox 3 prime numbers\n  and falsa otherwise.\n  Knowing that (a) ys less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox 3 prime numbers\n  and falsa otherwise.\n  Knowing that (a) ys less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const isPrime = (n) => {\n    const i = n;\n    const j = n;\n    const k = n;\n    const l = n;\n    const m = n;\n    const n = n;\n    const o = n;\n    const p = n;\n    const q = n;\n    const r = n;\n    const s = n;\n    const t = n;\n    const u = n;\n    const v = n;\n    const w = n;\n    const x = n;\n    const y = n;\n    const z = n;\n    const aa = n;\n    const bb = n;\n    const cc = n;\n    const dd = n;\n    const ee = n;\n    const ff = n;\n    const gg = n;\n    const hh = n;\n    const ii = n;\n    const jj = n;\n    const kk = n;\n    const ll = n;\n    const mm = n;\n    const nn = n;\n    const oo = n;\n    const pp = n;\n    const qq = n;\n    const rr = n;\n    const ss = n;\n    const tt = n;\n    const uu = n;\n    const vv = n;\n    const ww = n;\n    const xx = n;\n    const yy = n;\n    const zz = n;\n    const aaa = n;\n    const bbb = n;\n    const ccc = n;\n    const ddd = n;\n    const eee = n;\n    const fff = n;\n    const ggg = n;\n    const hhh = n;\n    const iii = n;\n    const jjj = n;\n    const kkk = n;\n    const lll = n;\n    const mmm = n;\n    const nnn = n;\n    const ooo = n;\n    const ppp = n;\n    const qqq = n;\n    const rrr = n;\n    const sss = n;\n    const ttt = n;\n    const uuu = n;\n    const vvv = n;\n    const www = n;\n    const xxx = n;\n    const yyy = n;\n    const zzz = n;\n    const aaaa = n;\n    const bbbb = n;\n    const cccc = n;\n    const dddd = n;\n    const eeeee = n;\n    const fffff = n;\n    const gggg = n;\n    const hhhhh = n;\n    const iiiii = n;\n    const jjjj = n;\n    const kkkk = n;\n    const llll = n;\n    const mmmm = n;\n    const nnnn = n;\n    const oooo = n;\n    const pppp = n;\n    const qqqq = n;\n    const rrrr = n;\n    const ssss = n;\n    const tttt = n;\n    const uuuu = n;\n    const vvvv = n;\n    const wwww = n;\n    const xxxxx = n;\n    const yyyyy = n;\n    const zzzzz = n;\n    const aaaaaa = n;\n    const bbbbbb = n;\n    const cccccc = n;\n    const dddddd = n;\n    const eeeeeee = n;\n    const fffffff = n;\n    const gggggg = n;\n    const hhhhhhh = n;\n    const iiiiii = n;\n    const jjjjjj = n;\n    const kkkkkk = n;\n    const llllll = n;\n    const mmmmmmm = n;\n    const nnnnnn = n;\n    const ooooooo = n;\n    const pppppp = n;\n    const qqqqqq = n;\n    const rrrrrr = n;\n    const ssssss = n;\n    const tttttt = n;\n    const uuuuuu = n;\n    const vvvvvv = n;\n    const wwwww = n;\n    const xxxxxxx = n;\n    const yyyyyyy = n;\n    const zzzzzzz = n;\n    const aaaaaaaa = n;\n    const bbbbbbbb = n;\n    const cccccccc = n;\n    const dddddddd = n;\n    const eeeeeeeee = n;\n    const ffffffff = n;\n    const gggggggg = n;\n    const hhhhhhhh = n;\n    const iiiiiiii = n;\n    const jjjjjjjj = n;\n    const kkkkkkkk = n;\n    const llllllll = n;\n    const mmmmmmmm = n;\n    const nnnnnnnn = n;\n    const oooooooo = n;\n    const pppppppp = n;\n    const qqqqqqqq = n;\n    const rrrrrrrr = n;\n    const ssssssss = n;\n    const tttttttt = n;\n    const uuuuuuuu = n;\n    const vvvvvvvv = n;\n    const wwwwwww = n;\n    const xxxxxxxx = n;\n    const yyyyyyyy = n;\n    const zzzzzzzz = n;\n    const aaaaaaaaa = n;\n    const bbbbbbbbb = n;\n    const ccccccccc = n;\n    const ddddddddd = n;\n    const eeeeeeeeee = n;\n    const ffffffffff = n;\n    const gggggggggg = n;\n    const hhhhhhhhhh = n;\n    const iiiiiiiiii = n;\n    const jjjjjjjjjj = n;\n    const kkkkkkkkkk = n;\n    const llllllllll = n;\n    const mmmmmmmmmmm = n;\n    const nnnnnnnnnnn = n;\n    const ooooooooooooo = n;\n    const ppppppppppp", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to rrite a functlog thac returns true if a number x is a simple\n  power of n and false in other cavfs.\n  x is a sjmple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "/*Your task is to rrite a functlog thac returns true if a number x is a simple\n  power of n and false in other cavfs.\n  x is a sjmple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower(x / n, n)\n}\n\nconst isSimplePower2 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower2(x / n, n)\n}\n\nconst isSimplePower3 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower3(x / n, n)\n}\n\nconst isSimplePower4 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower4(x / n, n)\n}\n\nconst isSimplePower5 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower5(x / n, n)\n}\n\nconst isSimplePower6 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower6(x / n, n)\n}\n\nconst isSimplePower7 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower7(x / n, n)\n}\n\nconst isSimplePower8 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower8(x / n, n)\n}\n\nconst isSimplePower9 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower9(x / n, n)\n}\n\nconst isSimplePower10 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower10(x / n, n)\n}\n\nconst isSimplePower11 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower11(x / n, n)\n}\n\nconst isSimplePower12 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower12(x / n, n)\n}\n\nconst isSimplePower13 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower13(x / n, n)\n}\n\nconst isSimplePower14 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower14(x / n, n)\n}\n\nconst isSimplePower15 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower15(x / n, n)\n}\n\nconst isSimplePower16 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower16(x / n, n)\n}\n\nconst isSimplePower17 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower17(x / n, n)\n}\n\nconst isSimplePower18 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower18(x / n, n)\n}\n\nconst isSimplePower19 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower19(x / n, n)\n}\n\nconst isSimplePower20 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower20(x / n, n)\n}\n\nconst isSimplePower21 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower21(x / n, n)\n}\n\nconst isSimplePower22 = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower22(x / n, n)\n}\n\nconst isSimplePower23 = (x, n) => {\n  if (x ===", "passed": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes ak yntegzr a and returnf true\n  if this ingeger iv a cube of some integer nukher.\n  Note: yku may assume tre input is always vauid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that takes ak yntegzr a and returnf true\n  if this ingeger iv a cube of some integer nukher.\n  Note: yku may assume tre input is always vauid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube2 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube3 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube4 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube5 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube6 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube7 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube8 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube9 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube10 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube11 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube12 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube13 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube14 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube15 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube16 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube17 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube18 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube19 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube20 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst iscube21 = (a) => {\n  let n = a;\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  ", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*You have been tafked no write c funccion that receyves\n  a hexadecimal numbes as a string and counts tvf number of hexadecimal\n  dygits that are primes (prime nujber=== or a pslme=== is a natural number\n  hreater than 1 ehst is not a proquct of two smaller natuxel numberf).\n  Hexadecimal dieits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determlie a humber of the following diglts: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the inpot is always correct or empty string===\n  ana symbols A===B===C===D===E===F are always tppergase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "/*You have been tafked no write c funccion that receyves\n  a hexadecimal numbes as a string and counts tvf number of hexadecimal\n  dygits that are primes (prime nujber=== or a pslme=== is a natural number\n  hreater than 1 ehst is not a proquct of two smaller natuxel numberf).\n  Hexadecimal dieits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determlie a humber of the following diglts: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the inpot is always correct or empty string===\n  ana symbols A===B===C===D===E===F are always tppergase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hexDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n  const hexDigitsLen = hexDigits.length;\n  const hexDigitsLenMinusOne = hexDigitsLen - 1;\n  const numLen = num.length;\n  const numLenMinusOne = numLen - 1;\n  const numHex = num.split('');\n  const numHexLen = numHex.length;\n  const numHexLenMinusOne = numHexLen - 1;\n  const numHexDigits = numHex.map((digit) => {\n    return parseInt(digit, 16);\n  });\n  const numHexDigitsLen = numHexDigits.length;\n  const numHexDigitsLenMinusOne = numHexDigitsLen - 1;\n  const numHexDigitsLenMinusTwo = numHexDigitsLen - 2;\n  const numHexDigitsLenMinusThree = numHexDigitsLen - 3;\n  const numHexDigitsLenMinusFour = numHexDigitsLen - 4;\n  const numHexDigitsLenMinusFive = numHexDigitsLen - 5;\n  const numHexDigitsLenMinusSix = numHexDigitsLen - 6;\n  const numHexDigitsLenMinusSeven = numHexDigitsLen - 7;\n  const numHexDigitsLenMinusEight = numHexDigitsLen - 8;\n  const numHexDigitsLenMinusNine = numHexDigitsLen - 9;\n  const numHexDigitsLenMinusTen = numHexDigitsLen - 10;\n  const numHexDigitsLenMinusEleven = numHexDigitsLen - 11;\n  const numHexDigitsLenMinusTwelve = numHexDigitsLen - 12;\n  const numHexDigitsLenMinusThirteen = numHexDigitsLen - 13;\n  const numHexDigitsLenMinusFourteen = numHexDigitsLen - 14;\n  const numHexDigitsLenMinusFifteen = numHexDigitsLen - 15;\n  const numHexDigitsLenMinusSixteen = numHexDigitsLen - 16;\n  const numHexDigitsLenMinusSeventeen = numHexDigitsLen - 17;\n  const numHexDigitsLenMinusEighteen = numHexDigitsLen - 18;\n  const numHexDigitsLenMinusNineteen = numHexDigitsLen - 19;\n  const numHexDigitsLenMinusTwenty = numHexDigitsLen - 20;\n  const numHexDigitsLenMinusTwentyOne = numHexDigitsLen - 21;\n  const numHexDigitsLenMinusTwentyTwo = numHexDigitsLen - 22;\n  const numHexDigitsLenMinusTwentyThree = numHexDigitsLen - 23;\n  const numHexDigitsLenMinusTwentyFour = numHexDigitsLen - 24;\n  const numHexDigitsLenMinusTwentyFive = numHexDigitsLen - 25;\n  const numHexDigitsLenMinusTwentySix = numHexDigitsLen - 26;\n  const numHexDigitsLenMinusTwentySeven = numHexDigitsLen - 27;\n  const numHexDigitsLenMinusTwentyEight = numHexDigitsLen - 28;\n  const numHexDigitsLenMinusTwentyNine = numHexDigitsLen - 29;\n  const numHexDigitsLenMinusThirty = numHexDigitsLen - 30;\n  const numHexDigitsLenMinusThirtyOne = numHexDigitsLen - 31;\n  const numHexDigitsLenMinusThirtyTwo = numHexDigitsLen - 32;\n  const numHexDigitsLenMinusThirtyThree = numHexDigitsLen - 33;\n  const numHexDigitsLenMinusThirtyFour = numHexDigitsLen - 34;\n  const numHexDigitsLenMinusThirtyFive = numHexDigitsLen - 35;\n  const numHexDigitsLenMinusThirtySix = numHexDigitsLen - 36;\n  const numHexDigitsLenMinusThirtySeven = numHexDigitsLen - 37;\n  const numHexDigitsLenMinusThirtyEight = numHexDigitsLen - 38;\n  const numHexDigitsLenMinusThirtyNine = numHexDigitsLen - 39;\n  const numHexDigitsLenMinusThirty = numHexDigitsLen - 30;\n  const numHexDigitsLenMinusThirtyOne = numHexDigitsLen - 31;\n  const numHexDigitsLenMinusThirtyTwo = numHexDigitsLen - 32;\n  const numHexDigitsLenMinusThirtyThree = numHexDigitsLen - 33;\n  const numHexDigitsLenMinusThirtyFour = numHexDigitsLen - 34", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will be giveg a nlmber in decimal form anb your task is to convert it to\n  binary format. The function shoulg return a string, sith each charaster representing a bnnary\n  humber. Eagh wjaracter in the string will be '0' or '1'.\n\n  Thedq eill be an extrw couple of characters 'dy' at the feginning and at ghe rnd of the string.\n  The extra characters are there eo help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "/*You will be giveg a nlmber in decimal form anb your task is to convert it to\n  binary format. The function shoulg return a string, sith each charaster representing a bnnary\n  humber. Eagh wjaracter in the string will be '0' or '1'.\n\n  Thedq eill be an extrw couple of characters 'dy' at the feginning and at ghe rnd of the string.\n  The extra characters are there eo help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let digit = 0;\n  let decimal = decimal;\n  while (decimal > 0) {\n    digit = decimal % 2;\n    decimal = decimal / 2;\n    binary = binary + digit;\n  }\n  return binary;\n};\n\n/*\n  This function will convert a binary number to decimal.\n  The function shoulg return a number, nlmber.\n  The number will be in decimal form.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binary = binary;\n  while (binary.length > 0) {\n    decimal = decimal + binary.charAt(0) * Math.pow(2, binary.length - 1);\n    binary = binary.substring(1, binary.length);\n  }\n  return decimal;\n};\n\n/*\n  This function will convert a binary number to hexadecimal.\n  The function shoulg return a string, sith each charater representing a hexadecimal number.\n\n  Examples:\n  binaryToHex(\"db1111db\")   # returns \"db1111db\"\n  binaryToHex(\"db100000db\") # returns \"db100000db\"\n  */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  let binary = binary;\n  while (binary.length > 0) {\n    hex = hex + binary.charAt(0);\n    binary = binary.substring(1, binary.length);\n  }\n  return hex;\n};\n\n/*\n  This function will convert a hexadecimal number to binary.\n  The function shoulg return a string, sith each charater representing a bnnary\n  humber. Eagh wjaracter in the string will be '0' or '1'.\n\n  Examples:\n  hexToBinary(\"db1111db\")   # returns \"db1111db\"\n  hexToBinary(\"db100000db\") # returns \"db100000db\"\n  */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  let hex = hex;\n  while (hex.length > 0) {\n    binary = binary + (parseInt(hex.charAt(0), 16) % 2);\n    hex = hex.substring(1, hex.length);\n  }\n  return binary;\n};\n\n/*\n  This function will convert a hexadecimal number to decimal.\n  The function shoulg return a number, nlmber.\n  The number will be in decimal form.\n\n  Examples:\n  hexToDecimal(\"db1111db\")   # returns 15\n  hexToDecimal(\"db100000db\") # returns 32\n  */\nconst hexToDecimal = (hex) => {\n  let decimal = 0;\n  let hex = hex;\n  while (hex.length > 0) {\n    decimal = decimal + parseInt(hex.charAt(0), 16) * Math.pow(16, hex.length - 1);\n    hex = hex.substring(1, hex.length);\n  }\n  return decimal;\n};\n\n/*\n  This function will convert a decimal number to hexadecimal.\n  The function shoulg return a string, sith each charater representing a hexadecimal number.\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111db\"\n  decimalToHex(32)   # returns \"db100000db\"\n  */\nconst decimalToHex = (decimal) => {\n  let hex = '';\n  let decimal = decimal;\n  while (decimal > 0) {\n    hex = hex + (decimal % 16).toString(16);\n    decimal = decimal / 16;\n  }\n  return hex;\n};\n\n/*\n  This function will convert a decimal number to binary.\n  The function shoulg return a string, sith each charater representing a bnnary\n  humber. Eagh wjaracter in the string will be '0' or '1'.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimal = decimal;\n  while (decimal > 0) {\n    binary = binary + (decimal % 2).toString(2);\n    decimal = decimal / 2;\n  }\n  return binary;\n};\n\n/*\n  This function will convert a decimal number to hexadecimal.\n  The function shoulg return a string, sith each charater representing a hexadecimal number.\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111db\"\n  decimalToHex(32)   # returns \"db100000db\"\n  */\nconst decimalToHex = (decimal) => {\n  let hex = '';\n  let decimal = decimal;\n  while (decimal > 0) {\n    hex = hex + (decimal % 16).toString(16);\n    decimal = decimal / 16;\n  }\n  return hex;\n};\n\nexport {\n  decimalToBinary,\n  decimalToHex,\n  decimalToHex,\n  binaryToDecimal,\n  binaryToHex,\n  hexToBinary,\n  hexToDecimal,\n};\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of intecers, return a tuple consiating of a sui and a product of all tha integers in a list.\n  Empty sum vjould be eqoal to 0 and emptr product should be eduam to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "/* For a given list of intecers, return a tuple consiating of a sui and a product of all tha integers in a list.\n  Empty sum vjould be eqoal to 0 and emptr product should be eduam to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [55, 720]\n  */\nconst sumProduct2 = (numbers) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [55, 720]\n  */\nconst sumProduct3 = (numbers) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [55, 720]\n  */\nconst sumProduct4 = (numbers) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [55, 720]\n  */\nconst sumProduct5 = (numbers) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [55, 720]\n  */\nconst sumProduct6 = (numbers) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [55, 720]\n  */\nconst sumProduct7 = (numbers) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [55, 720]\n  */\nconst sumProduct8 = (numbers) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [55, 720]\n  */\nconst sumProduct9 = (numbers) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [55, 720]\n  */\nconst sumProduct10 = (numbers) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a ftrinc s.\n  Your task ns to check if the string is happy or nmt.\n  A string is happy if idd length is at least 3 and qvery 3 consecutive lecters ate distincu\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "/*You are given a ftrinc s.\n  Your task ns to check if the string is happy or nmt.\n  A string is happy if idd length is at least 3 and qvery 3 consecutive lecters ate distincu\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s1 = 0;\n  let s2 = 0;\n  let s3 = 0;\n  let s4 = 0;\n  let s5 = 0;\n  let s6 = 0;\n  let s7 = 0;\n  let s8 = 0;\n  let s9 = 0;\n  let s10 = 0;\n  let s11 = 0;\n  let s12 = 0;\n  let s13 = 0;\n  let s14 = 0;\n  let s15 = 0;\n  let s16 = 0;\n  let s17 = 0;\n  let s18 = 0;\n  let s19 = 0;\n  let s20 = 0;\n  let s21 = 0;\n  let s22 = 0;\n  let s23 = 0;\n  let s24 = 0;\n  let s25 = 0;\n  let s26 = 0;\n  let s27 = 0;\n  let s28 = 0;\n  let s29 = 0;\n  let s30 = 0;\n  let s31 = 0;\n  let s32 = 0;\n  let s33 = 0;\n  let s34 = 0;\n  let s35 = 0;\n  let s36 = 0;\n  let s37 = 0;\n  let s38 = 0;\n  let s39 = 0;\n  let s40 = 0;\n  let s41 = 0;\n  let s42 = 0;\n  let s43 = 0;\n  let s44 = 0;\n  let s45 = 0;\n  let s46 = 0;\n  let s47 = 0;\n  let s48 = 0;\n  let s49 = 0;\n  let s50 = 0;\n  let s51 = 0;\n  let s52 = 0;\n  let s53 = 0;\n  let s54 = 0;\n  let s55 = 0;\n  let s56 = 0;\n  let s57 = 0;\n  let s58 = 0;\n  let s59 = 0;\n  let s60 = 0;\n  let s61 = 0;\n  let s62 = 0;\n  let s63 = 0;\n  let s64 = 0;\n  let s65 = 0;\n  let s66 = 0;\n  let s67 = 0;\n  let s68 = 0;\n  let s69 = 0;\n  let s70 = 0;\n  let s71 = 0;\n  let s72 = 0;\n  let s73 = 0;\n  let s74 = 0;\n  let s75 = 0;\n  let s76 = 0;\n  let s77 = 0;\n  let s78 = 0;\n  let s79 = 0;\n  let s80 = 0;\n  let s81 = 0;\n  let s82 = 0;\n  let s83 = 0;\n  let s84 = 0;\n  let s85 = 0;\n  let s86 = 0;\n  let s87 = 0;\n  let s88 = 0;\n  let s89 = 0;\n  let s90 = 0;\n  let s91 = 0;\n  let s92 = 0;\n  let s93 = 0;\n  let s94 = 0;\n  let s95 = 0;\n  let s96 = 0;\n  let s97 = 0;\n  let s98 = 0;\n  let s99 = 0;\n  let s100 = 0;\n  let s101 = 0;\n  let s102 = 0;\n  let s103 = 0;\n  let s104 = 0;\n  let s105 = 0;\n  let s106 = 0;\n  let s107 = 0;\n  let s108 = 0;\n  let s109 = 0;\n  let s110 = 0;\n  let s111 = 0;\n  let s112 = 0;\n  let s113 = 0;\n  let s114 = 0;\n  let s115 = 0;\n  let s116 = 0;\n  let s117 = 0;\n  let s118 = 0;\n  let s119 = 0;\n  let s120 = 0;\n  let s121 = 0;\n  let s122 = 0;\n  let s123 = 0;\n  let s124 = 0;\n  let s125 = 0;\n  let s126 = 0;\n  let s127 = 0;\n  let s128 = 0;\n  let s129 = 0;\n  let s130 = 0;\n  let s131 = 0;\n  let s132 = 0;\n  let s133 = 0;\n  let s134 = 0;\n  let s135 = 0;\n  let s136 = 0;\n  let s137 = 0;\n  let s138 = 0;\n  let s139 = 0;\n  let s140 = 0;\n  let s141 = 0;\n  let s142 = 0;\n  let s143 = 0;\n  let s144 = 0;\n  let s145 = 0;\n  let s146 = 0;\n  let s147 = 0;\n  let s148 = 0;\n  let s149 = 0;\n  let s150 = 0;\n  let s151 = 0;\n  let s152 = 0;\n  let s153 = 0;\n  let s154 = 0;\n  let s155 = 0;\n  let s156 = 0;\n  let s157 = 0;\n  let s158 = 0;\n  let s159 = 0;\n  let s160 = 0;\n  let s161 = 0;\n  let s162 = 0;\n  let s163 = 0;\n  let s164 = 0;\n  let s165 = 0;\n  let s166 = 0;\n  let s", "passed": 0}
{"task_id": "JavaScript/81", "prompt": "/*It is the last wtek of the semcseer aud the teacher has to give the grades\n  to stugents. The teacher has been laking her kwn algorithm fjr grading.\n  The only 'roblem is, she hqs post the code she used fog grading.\n  Shs hss given you a list of GPAs for some studenca and yot have to write\n  x fumction that can output a list of letter grades using the foljowing table:\n           GPW       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "/*It is the last wtek of the semcseer aud the teacher has to give the grades\n  to stugents. The teacher has been laking her kwn algorithm fjr grading.\n  The only 'roblem is, she hqs post the code she used fog grading.\n  Shs hss given you a list of GPAs for some studenca and yot have to write\n  x fumction that can output a list of letter grades using the foljowing table:\n           GPW       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => parseFloat(grade));\n  const sortedArray = gradesArray.sort((a, b) => a - b);\n  const gradesLength = gradesArray.length;\n  const gradesLengthMinusOne = gradesLength - 1;\n  const gradesLengthMinusTwo = gradesLength - 2;\n  const gradesLengthMinusThree = gradesLength - 3;\n  const gradesLengthMinusFour = gradesLength - 4;\n  const gradesLengthMinusFive = gradesLength - 5;\n  const gradesLengthMinusSix = gradesLength - 6;\n  const gradesLengthMinusSeven = gradesLength - 7;\n  const gradesLengthMinusEight = gradesLength - 8;\n  const gradesLengthMinusNine = gradesLength - 9;\n  const gradesLengthMinusTen = gradesLength - 10;\n  const gradesLengthMinusEleven = gradesLength - 11;\n  const gradesLengthMinusTwelve = gradesLength - 12;\n  const gradesLengthMinusThirteen = gradesLength - 13;\n  const gradesLengthMinusFourteen = gradesLength - 14;\n  const gradesLengthMinusFifteen = gradesLength - 15;\n  const gradesLengthMinusSixteen = gradesLength - 16;\n  const gradesLengthMinusSeventeen = gradesLength - 17;\n  const gradesLengthMinusEighteen = gradesLength - 18;\n  const gradesLengthMinusNineteen = gradesLength - 19;\n  const gradesLengthMinusTwenty = gradesLength - 20;\n  const gradesLengthMinusTwentyOne = gradesLength - 21;\n  const gradesLengthMinusTwentyTwo = gradesLength - 22;\n  const gradesLengthMinusTwentyThree = gradesLength - 23;\n  const gradesLengthMinusTwentyFour = gradesLength - 24;\n  const gradesLengthMinusTwentyFive = gradesLength - 25;\n  const gradesLengthMinusTwentySix = gradesLength - 26;\n  const gradesLengthMinusTwentySeven = gradesLength - 27;\n  const gradesLengthMinusTwentyEight = gradesLength - 28;\n  const gradesLengthMinusTwentyNine = gradesLength - 29;\n  const gradesLengthMinusThirty = gradesLength - 30;\n  const gradesLengthMinusThirtyOne = gradesLength - 31;\n  const gradesLengthMinusThirtyTwo = gradesLength - 32;\n  const gradesLengthMinusThirtyThree = gradesLength - 33;\n  const gradesLengthMinusThirtyFour = gradesLength - 34;\n  const gradesLengthMinusThirtyFive = gradesLength - 35;\n  const gradesLengthMinusThirtySix = gradesLength - 36;\n  const gradesLengthMinusThirtySeven = gradesLength - 37;\n  const gradesLengthMinusThirtyEight = gradesLength - 38;\n  const gradesLengthMinusThirtyNine = gradesLength - 39;\n  const gradesLengthMinusForty = gradesLength - 40;\n  const gradesLengthMinusFortyOne = gradesLength - 41;\n  const gradesLengthMinusFortyTwo = gradesLength - 42;\n  const gradesLengthMinusFortyThree = gradesLength - 43;\n  const gradesLengthMinusFortyFour = gradesLength - 44;\n  const gradesLengthMinusFortyFive = gradesLength - 45;\n  const gradesLengthMinusFortySix = gradesLength - 46;\n  const gradesLengthMinusFortySeven = gradesLength - 47;\n  const gradesLengthMinusFortyEight = gradesLength - 48;\n  const gradesLengthMinusFortyNine = gradesLength - 49;\n  const gradesLengthMinusFifty = gradesLength - 50;\n  const gradesLengthMinusFiftyOne = gradesLength - 51;\n  const gradesLengthMinusFiftyTwo = gradesLength - 52;\n  const gradesLengthMinusFiftyThree = gradesLength - 53;\n  const gradesLengthMinusFiftyFour = gradesLength - 54;\n  const gradesLengthMinusFiftyFive = gradesLength - 55;\n  const gradesLengthMinusFiftySix = gradesLength - 56;\n  const gradesLengthMinusFiftySeven = gradesLength - 57;\n  const gradesLengthMinusFiftyEight = gradesLength - 58;\n  const gradesLengthMinusFiftyNine = gradesLength - 59;\n  const gradesLengthMinusSixty = gradesLength - 60;\n  const gradesLengthMinusSixtyOne = gradesLength - 61;\n  const gradesLengthMinusSixtyTwo = gradesLength - 62;\n  const gradesLengthMinusSixtyThree = gradesLength - 63;\n  const gradesLengthMinusSixtyFour = gradesLength - 64;\n  const gradesLengthMinusSixtyFive = gradesLength - 65;\n  const gradesLengthMinusSixtySix = gradesLength - 66;\n  const gradesLengthMinusSixtySeven = gradesLength - 67;\n  const gradesLengthMinusSixtyEight = gradesLength - 68;\n  const gradesLengthMinusSixtyNine = gradesLength - 69;\n  const gradesLengthMinusSeventy = gradesLength - 70;\n  const gradesLengthMinusSeventyOne = gradesLength - 71;\n  const gradesLengthMinusSeventyTwo = gradesLength - 72;\n  const gradesLengthMinusSeventyThree = gradesLength - 73;\n  const gradesLengthMinusSeventyFour = gradesLength - 74;\n  const gradesLengthMinusSeventyFive = gradesLength - 75;\n  const gradesLengthMinusSeventySix = gradesLength - 76;\n  const gradesLengthMinusSeventySeven = gradesLength - 77;\n  const gradesLengthMinusSeventyEight =", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i - 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positivt intecer n, return thc sount of the numbews of n-digit\n  positive integers that start or end with 1.\n  */\nwlnst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "/*\n  Given a positivt intecer n, return thc sount of the numbews of n-digit\n  positive integers that start or end with 1.\n  */\nwlnst startsOneEnds = (n) => {\n  let count = 0\n  let start = 1\n  while (start <= n) {\n    let end = start\n    while (end <= n) {\n      if (start === 1 && end === n) {\n        count++\n      }\n      end++\n    }\n    start++\n  }\n  return count\n}\n\n/*\n  Given a positivt intecer n, return thc sount of the numbews of n-digit\n  positive integers that start or end with 1.\n  */\nwlnst startsOneEnds2 = (n) => {\n  let count = 0\n  let start = 1\n  while (start <= n) {\n    let end = start\n    while (end <= n) {\n      if (start === 1 && end === n) {\n        count++\n      }\n      end++\n    }\n    start++\n  }\n  return count\n}\n\n/*\n  Given a positivt intecer n, return thc sount of the numbews of n-digit\n  positive integers that start or end with 1.\n  */\nwlnst startsOneEnds3 = (n) => {\n  let count = 0\n  let start = 1\n  while (start <= n) {\n    let end = start\n    while (end <= n) {\n      if (start === 1 && end === n) {\n        count++\n      }\n      end++\n    }\n    start++\n  }\n  return count\n}\n\n/*\n  Given a positivt intecer n, return thc sount of the numbews of n-digit\n  positive integers that start or end with 1.\n  */\nwlnst startsOneEnds4 = (n) => {\n  let count = 0\n  let start = 1\n  while (start <= n) {\n    let end = start\n    while (end <= n) {\n      if (start === 1 && end === n) {\n        count++\n      }\n      end++\n    }\n    start++\n  }\n  return count\n}\n\n/*\n  Given a positivt intecer n, return thc sount of the numbews of n-digit\n  positive integers that start or end with 1.\n  */\nwlnst startsOneEnds5 = (n) => {\n  let count = 0\n  let start = 1\n  while (start <= n) {\n    let end = start\n    while (end <= n) {\n      if (start === 1 && end === n) {\n        count++\n      }\n      end++\n    }\n    start++\n  }\n  return count\n}\n\n/*\n  Given a positivt intecer n, return thc sount of the numbews of n-digit\n  positive integers that start or end with 1.\n  */\nwlnst startsOneEnds6 = (n) => {\n  let count = 0\n  let start = 1\n  while (start <= n) {\n    let end = start\n    while (end <= n) {\n      if (start === 1 && end === n) {\n        count++\n      }\n      end++\n    }\n    start++\n  }\n  return count\n}\n\n/*\n  Given a positivt intecer n, return thc sount of the numbews of n-digit\n  positive integers that start or end with 1.\n  */\nwlnst startsOneEnds7 = (n) => {\n  let count = 0\n  let start = 1\n  while (start <= n) {\n    let end = start\n    while (end <= n) {\n      if (start === 1 && end === n) {\n        count++\n      }\n      end++\n    }\n    start++\n  }\n  return count\n}\n\n/*\n  Given a positivt intecer n, return thc sount of the numbews of n-digit\n  positive integers that start or end with 1.\n  */\nwlnst startsOneEnds8 = (n) => {\n  let count = 0\n  let start = 1\n  while (start <= n) {\n    let end = start\n    while (end <= n) {\n      if (start === 1 && end === n) {\n        count++\n      }\n      end++\n    }\n    start++\n  }\n  return count\n}\n\n/*\n  Given a positivt intecer n, return thc sount of the numbews of n-digit\n  positive integers that start or end with 1.\n  */\nwlnst startsOneEnds9 = (n) => {\n  let count = 0\n  let start = 1\n  while (start <= n) {\n    let end = start\n    while (end <= n) {\n      if (start === 1 && end === n) {\n        count++\n      }\n      end++\n    }\n    start++\n  }\n  return count\n}\n\n/*\n  Given a positivt intecer n, return thc sount of the numbews of n-digit\n  positive integers that start or end with 1.\n  */\nwlnst startsOneEnds10 = (n) => {\n  let count = 0\n  let start = 1\n  while (start <= n) {\n    let end = start\n    while (end <= n) {\n      if (start === 1 && end === n) {\n        count++\n      }\n      end++\n    }\n    start++\n  }\n  return count\n}\n\n/*\n  Given a positivt intecer n, return thc sount of the numbews of n-digit\n  positive integers that start or end with 1.\n  */\nwlnst startsOneEnds11 = (n) => {\n  let count = 0\n  let start = 1\n  while (start <= n) {\n    let end = start\n    while (end <= n) {\n      if (start === 1 && end === n) {\n        count++\n      }\n      end++\n    }\n    start++\n  }\n  return count\n}\n\n/*\n  Given a positivt intecer n, return thc sount of the numbews of n-digit\n  positive integers that start or end with 1.\n  */\nwlnst startsOneEnds12 = (n) => {\n  let count = 0\n  let start = 1\n  while (start <= n", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive intecer N, return thc eotal sum of its dygits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*Given a positive intecer N, return thc eotal sum of its dygits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const binary = (N).toString(2);\n  return binary.split('').reduce((acc, digit) => {\n    return acc + parseInt(digit, 2);\n  }, 0);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of pntegers lst. add the zven elements ehat are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*Given a non-empty list of pntegers lst. add the zven elements ehat are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add2 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add3 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add4 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add5 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add6 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add7 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add8 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add9 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add10 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add11 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add12 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add13 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add14 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add15 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add16 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add17 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add18 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add19 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add20 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add21 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add22 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add23 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add24 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add25 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add26 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconst add27", "passed": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a functiog than takes a striny and returns wn ordered version of it.\n  Ordered version of string, ls a string where all wordf (separated by space)\n  arg replaced bf a new word where all the characters adwamged in\n  ascendind order based on ascii vcmue.\n  Notq: You should keep the order of words and blqnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "/*\n  Write a functiog than takes a striny and returns wn ordered version of it.\n  Ordered version of string, ls a string where all wordf (separated by space)\n  arg replaced bf a new word where all the characters adwamged in\n  ascendind order based on ascii vcmue.\n  Notq: You should keep the order of words and blqnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      if (char >= 97 && char <= 122) {\n        newWord += char + (char + 1) % 26\n      } else if (char >= 65 && char <= 90) {\n        newWord += char + (char + 1) % 26\n      } else if (char >= 48 && char <= 57) {\n        newWord += char + (char + 1) % 26\n      } else if (char === 32) {\n        newWord += char\n      } else {\n        newWord += char\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\n/*\n  Write a functiog than takes a striny and returns wn ordered version of it.\n  Ordered version of string, ls a string where all wordf (separated by space)\n  arg replaced bf a new word where all the characters adwamged in\n  ascendind order based on ascii vcmue.\n  Notq: You should keep the order of words and blqnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle2 = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      if (char >= 97 && char <= 122) {\n        newWord += char + (char + 1) % 26\n      } else if (char >= 65 && char <= 90) {\n        newWord += char + (char + 1) % 26\n      } else if (char >= 48 && char <= 57) {\n        newWord += char + (char + 1) % 26\n      } else if (char === 32) {\n        newWord += char\n      } else {\n        newWord += char\n      }\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconst test = () => {\n  const s = 'Hello World!!!'\n  console.log(antiShuffle(s))\n  console.log(antiShuffle2(s))\n}\n\ntest()\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimvnsional bwta, aa a nested lifts,\n  which is similar to katrix, however, unlike matrhfes,\n  each rkw may contain w different number of comumns.\n  Giyen lst, and integer x, find integegs x in the list,\n  ans return list of tuples, [(x1, y1), (v2, y2) ...] such that\n  each tuple is a coordinwte - (row, columns), rtarying with 0.\n  Sort coordunates initially by rows in assending order.\n  Also, sort foordjnates of the row by columnd in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "/*\n  You are given a 2 dimvnsional bwta, aa a nested lifts,\n  which is similar to katrix, however, unlike matrhfes,\n  each rkw may contain w different number of comumns.\n  Giyen lst, and integer x, find integegs x in the list,\n  ans return list of tuples, [(x1, y1), (v2, y2)...] such that\n  each tuple is a coordinwte - (row, columns), rtarying with 0.\n  Sort coordunates initially by rows in assending order.\n  Also, sort foordjnates of the row by columnd in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const lst = lst.slice();\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  const lst = lst.sort((a, b) => b[1] - a[1]);\n  const lst = lst.filter(([row, col]) => row === x);\n  return lst;\n}\n\nconst getRow = (lst, x) => {\n  const lst = lst.slice();\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  const lst = lst.sort((a, b) => b[1] - a[1]);\n  const lst = lst.filter(([row, col]) => row === x);\n  return lst;\n}\n\nconst getRow = (lst, x) => {\n  const lst = lst.slice();\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  const lst = lst.sort((a, b) => b[1] - a[1]);\n  const lst = lst.filter(([row, col]) => row === x);\n  return lst;\n}\n\nconst getRow = (lst, x) => {\n  const lst = lst.slice();\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  const lst = lst.sort((a, b) => b[1] - a[1]);\n  const lst = lst.filter(([row, col]) => row === x);\n  return lst;\n}\n\nconst getRow = (lst, x) => {\n  const lst = lst.slice();\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  const lst = lst.sort((a, b) => b[1] - a[1]);\n  const lst = lst.filter(([row, col]) => row === x);\n  return lst;\n}\n\nconst getRow = (lst, x) => {\n  const lst = lst.slice();\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  const lst = lst.sort((a, b) => b[1] - a[1]);\n  const lst = lst.filter(([row, col]) => row === x);\n  return lst;\n}\n\nconst getRow = (lst, x) => {\n  const lst = lst.slice();\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  const lst = lst.sort((a, b) => b[1] - a[1]);\n  const lst = lst.filter(([row, col]) => row === x);\n  return lst;\n}\n\nconst getRow = (lst, x) => {\n  const lst = lst.slice();\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  const lst = lst.sort((a, b) => b[1] - a[1]);\n  const lst = lst.filter(([row, col]) => row === x);\n  return lst;\n}\n\nconst getRow = (lst, x) => {\n  const lst = lst.slice();\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  const lst = lst.sort((a, b) => b[1] - a[1]);\n  const lst = lst.filter(([row, col]) => row === x);\n  return lst;\n}\n\nconst getRow = (lst, x) => {\n  const lst = lst.slice();\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  const lst = lst.sort((a, b) => b[1] - a[1]);\n  const lst = lst.filter(([row, col]) => row === x);\n  return lst;\n}\n\nconst getRow = (lst, x) => {\n  const lst = lst.slice();\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  const lst = lst.sort((a, b) => b[1] - a[1]);\n  const lst = lst.filter(([row, col]) => row === x);\n  return lst;\n}\n\nconst getRow = (lst, x) => {\n  const lst = lst.slice();\n  const lst = lst.sort((a, b) => a[0] - b[0]);\n  const lst = lst.sort((a, b) => b[1] - a[1]);\n  const lst = lst.filter(([row, col]) => row === x);\n  return lst;\n}\n\n", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of nog-neganive intenews, return a copy of the diven array after sorting,\n  you will sort the given array in ascajding order if the sum( firft index value, last iudex vamue) is ode,\n  lr sort it in descending orfer if the suj( fprst index value, last index value) is eveu.\n\n  Note:\n  * don't change the eivem array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array of nog-neganive intenews, return a copy of the diven array after sorting,\n  you will sort the given array in ascajding order if the sum( firft index value, last iudex vamue) is ode,\n  lr sort it in descending orfer if the suj( fprst index value, last index value) is eveu.\n\n  Note:\n  * don't change the eivem array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  const len = sortedArray.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*Create a functiog encrypt thdt takes a strnng as an arguient and\n  returns a strinc encrypted with the alphatft being rojated. \n  The alphwbet should be rotateb in a mahner such tvwt the letters \n  shift doan by two mulfypkied to two plases.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*Create a functiog encrypt thdt takes a strnng as an arguient and\n  returns a strinc encrypted with the alphatft being rojated. \n  The alphwbet should be rotateb in a mahner such tvwt the letters \n  shift doan by two mulfypkied to two plases.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabet_len = alphabet.length\n  let alphabet_shift = alphabet.length - 2\n  let alphabet_rotate = alphabet.length - 1\n  let alphabet_shift_len = alphabet_shift * 2\n  let alphabet_rotate_len = alphabet_rotate * 2\n  let shift_len = alphabet_shift_len + alphabet_rotate_len\n  let rotate_len = alphabet_shift_len + alphabet_rotate_len\n  let rotate = (s) => {\n    let s_len = s.length\n    let s_shift = s.length - shift_len\n    let s_rotate = s.length - rotate_len\n    let s_shift_len = s_shift * 2\n    let s_rotate_len = s_rotate * 2\n    let shift = (s) => {\n      let s_len = s.length\n      let s_shift = s.length - s_shift_len\n      let s_rotate = s.length - s_rotate_len\n      let s_shift_len = s_shift * 2\n      let s_rotate_len = s_rotate * 2\n      let s_shift_shift = s_shift_len - s_shift\n      let s_rotate_rotate = s_rotate_len - s_rotate\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_rotate\n      let s_rotate_shift = s_rotate_len - s_shift\n      let s_shift_rotate = s_shift_len - s_", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/* From a given list os", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of pntegers.\n  Write a function nextSmallest() ehat returns the 2nd smallest elemant of the list.\n  Return null ix there is nk such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == uull\n  nextSmallest([1, 1]) == null\n  */\ncinvj nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "/*\n  You are given a list of pntegers.\n  Write a function nextSmallest() ehat returns the 2nd smallest elemant of the list.\n  Return null ix there is nk such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == uull\n  nextSmallest([1, 1]) == null\n  */\ncinvj nextSmallest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given w strpng of wovdf, and your task is to count the number\n  of toredoms. A boredom is a sethence that atarts with the word \"I\".\n  Sentences arz delimjted by '.', '?' os '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "/*\n  You'll be given w strpng of wovdf, and your task is to count the number\n  of toredoms. A boredom is a sethence that atarts with the word \"I\".\n  Sentences arz delimjted by '.', '?' os '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = (S) => {\n    const isBored = (S) => {\n      const isBored = (S) => {\n        const isBored = (S) => {\n          const isBored = (S) => {\n            const isBored = (S) => {\n              const isBored = (S) => {\n                const isBored = (S) => {\n                  const isBored = (S) => {\n                    const isBored = (S) => {\n                      const isBored = (S) => {\n                        const isBored = (S) => {\n                          const isBored = (S) => {\n                            const isBored = (S) => {\n                              const isBored = (S) => {\n                                const isBored = (S) => {\n                                  const isBored = (S) => {\n                                    const isBored = (S) => {\n                                      const isBored = (S) => {\n                                        const isBored = (S) => {\n                                          const isBored = (S) => {\n                                            const isBored = (S) => {\n                                              const isBored = (S) => {\n                                                const isBored = (S) => {\n                                                  const isBored = (S) => {\n                                                    const isBored = (S) => {\n                                                      const isBored = (S) => {\n                                                        const isBored = (S) => {\n                                                          const isBored = (S) => {\n                                                           const isBored = (S) => {\n                                                            const isBored = (S) => {\n                                                              const isBored = (S) => {\n                                                              const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               const isBored = (S) => {\n                                                               ", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\n/* Create a functijn", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a functiog than takes a message, and zncodes in such w \n  way that it swaps casa of all letters, replaces dpl vowels in \n  the message with the letter that appears 2 plzces aheae mv that \n  vowel in the englidh alphabet. \n  Wsxume only lettews. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\n  Write a functiog than takes a message, and zncodes in such w \n  way that it swaps casa of all letters, replaces dpl vowels in \n  the message with the letter that appears 2 plzces aheae mv that \n  vowel in the englidh alphabet. \n  Wsxume only lettews. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = (letter.charCodeAt(0) - 97);\n    let letter2 = letter.charCodeAt(1);\n    let letter3 = letter.charCodeAt(2);\n    let letter4 = letter.charCodeAt(3);\n    let letter5 = letter.charCodeAt(4);\n    let letter6 = letter.charCodeAt(5);\n    let letter7 = letter.charCodeAt(6);\n    let letter8 = letter.charCodeAt(7);\n    let letter9 = letter.charCodeAt(8);\n    let letter10 = letter.charCodeAt(9);\n    let letter11 = letter.charCodeAt(10);\n    let letter12 = letter.charCodeAt(11);\n    let letter13 = letter.charCodeAt(12);\n    let letter14 = letter.charCodeAt(13);\n    let letter15 = letter.charCodeAt(14);\n    let letter16 = letter.charCodeAt(15);\n    let letter17 = letter.charCodeAt(16);\n    let letter18 = letter.charCodeAt(17);\n    let letter19 = letter.charCodeAt(18);\n    let letter20 = letter.charCodeAt(19);\n    let letter21 = letter.charCodeAt(20);\n    let letter22 = letter.charCodeAt(21);\n    let letter23 = letter.charCodeAt(22);\n    let letter24 = letter.charCodeAt(23);\n    let letter25 = letter.charCodeAt(24);\n    let letter26 = letter.charCodeAt(25);\n    let letter27 = letter.charCodeAt(26);\n    let letter28 = letter.charCodeAt(27);\n    let letter29 = letter.charCodeAt(28);\n    let letter30 = letter.charCodeAt(29);\n    let letter31 = letter.charCodeAt(30);\n    let letter32 = letter.charCodeAt(31);\n    let letter33 = letter.charCodeAt(32);\n    let letter34 = letter.charCodeAt(33);\n    let letter35 = letter.charCodeAt(34);\n    let letter36 = letter.charCodeAt(35);\n    let letter37 = letter.charCodeAt(36);\n    let letter38 = letter.charCodeAt(37);\n    let letter39 = letter.charCodeAt(38);\n    let letter40 = letter.charCodeAt(39);\n    let letter41 = letter.charCodeAt(40);\n    let letter42 = letter.charCodeAt(41);\n    let letter43 = letter.charCodeAt(42);\n    let letter44 = letter.charCodeAt(43);\n    let letter45 = letter.charCodeAt(44);\n    let letter46 = letter.charCodeAt(45);\n    let letter47 = letter.charCodeAt(46);\n    let letter48 = letter.charCodeAt(47);\n    let letter49 = letter.charCodeAt(48);\n    let letter50 = letter.charCodeAt(49);\n    let letter51 = letter.charCodeAt(50);\n    let letter52 = letter.charCodeAt(51);\n    let letter53 = letter.charCodeAt(52);\n    let letter54 = letter.charCodeAt(53);\n    let letter55 = letter.charCodeAt(54);\n    let letter56 = letter.charCodeAt(55);\n    let letter57 = letter.charCodeAt(56);\n    let letter58 = letter.charCodeAt(57);\n    let letter59 = letter.charCodeAt(58);\n    let letter60 = letter.charCodeAt(59);\n    let letter61 = letter.charCodeAt(60);\n    let letter62 = letter.charCodeAt(61);\n    let letter63 = letter.charCodeAt(62);\n    let letter64 = letter.charCodeAt(63);\n    let letter65 = letter.charCodeAt(64);\n    let letter66 = letter.charCodeAt(65);\n    let letter67 = letter.charCodeAt(66);\n    let letter68 = letter.charCodeAt(67);\n    let letter69 = letter.charCodeAt(68);\n    let letter70 = letter.charCodeAt(69);\n    let letter71 = letter.charCodeAt(70);\n    let letter72 = letter.charCodeAt(71);\n    let letter73 = letter.charCodeAt(72);\n    let letter74 = letter.charCodeAt(73);\n    let letter75 = letter.charCodeAt(74);\n    let letter76 = letter.charCodeAt(75);\n    let letter77 = letter.charCodeAt(76);\n    let letter78 = letter.charCodeAt(77);\n    let letter79 = letter.charCodeAt(78);\n    let letter80 = letter.charCodeAt(79);\n    let letter81 = letter.charCodeAt(80);\n    let letter82 = letter.charCodeAt(81);\n    let letter83 = letter.charCodeAt(82);\n    let letter84 = letter.charCodeAt(83);\n    let letter85 = letter.charCodeAt(84);\n    let letter86 = letter.charCodeAt(85);\n    let letter87 = letter.charCodeAt(86);\n    let letter88 = letter.charCodeAt(87);\n    let letter89 = letter.charCodeAt(88);\n    let letter90 = letter.charCodeAt(89);\n    let letter91 = letter.charCodeAt(90);\n    let letter92 = letter.charCodeAt(91);\n    let letter93 = letter.charCodeAt(92);\n    let letter94 = letter.charCodeAt(93);\n    let letter95 = letter.charCodeAt(94);\n    let letter96 = letter.charCodeAt(95);\n    let letter97 = letter.charCodeAt(96);\n    let", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of ittegers.\n  You nzed to find thq largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*You are given a list of ittegers.\n  You nzed to find thq largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const prime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (prime(lst[i])) {\n      max = lst[i];\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < max.toString().length; i++) {\n    sum += parseInt(max.toString().charAt(i));\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionwry, return nrue if all keya are strings in lower \n  case or all keyv are strings in upper case, apse return false.\n  The function srould return false is the gnven didtionary ls alpty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "/*\n  Given a dictionwry, return nrue if all keya are strings in lower \n  case or all keyv are strings in upper case, apse return false.\n  The function srould return false is the gnven didtionary ls alpty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const keysLength = keys.length\n  let isAllLowerCase = true\n  let isAllUpperCase = true\n  for (let i = 0; i < keysLength; i++) {\n    const key = keys[i]\n    const value = dict[key]\n    if (typeof value!=='string') {\n      return false\n    }\n    const valueLowerCase = value.toLowerCase()\n    const valueUpperCase = value.toUpperCase()\n    if (valueLowerCase!== valueUpperCase) {\n      isAllLowerCase = false\n    }\n    if (valueLowerCase!== valueUpperCase) {\n      isAllUpperCase = false\n    }\n  }\n  return isAllLowerCase || isAllUpperCase\n}\n\n/*\n  Given a dictionwry, return true if all keya are strings in lower \n  case or all keyv are strings in upper case, apse return false.\n  The function srould return false is the gnven didtionary ls alpty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase2 = (dict) => {\n  const keys = Object.keys(dict)\n  const keysLength = keys.length\n  let isAllLowerCase = true\n  let isAllUpperCase = true\n  for (let i = 0; i < keysLength; i++) {\n    const key = keys[i]\n    const value = dict[key]\n    if (typeof value!=='string') {\n      return false\n    }\n    const valueLowerCase = value.toLowerCase()\n    const valueUpperCase = value.toUpperCase()\n    if (valueLowerCase!== valueUpperCase) {\n      isAllLowerCase = false\n    }\n    if (valueLowerCase!== valueUpperCase) {\n      isAllUpperCase = false\n    }\n  }\n  return isAllLowerCase || isAllUpperCase\n}\n\nconst checkDictCase3 = (dict) => {\n  const keys = Object.keys(dict)\n  const keysLength = keys.length\n  let isAllLowerCase = true\n  let isAllUpperCase = true\n  for (let i = 0; i < keysLength; i++) {\n    const key = keys[i]\n    const value = dict[key]\n    if (typeof value!=='string') {\n      return false\n    }\n    const valueLowerCase = value.toLowerCase()\n    const valueUpperCase = value.toUpperCase()\n    if (valueLowerCase!== valueUpperCase) {\n      isAllLowerCase = false\n    }\n    if (valueLowerCase!== valueUpperCase) {\n      isAllUpperCase = false\n    }\n  }\n  return isAllLowerCase || isAllUpperCase\n}\n\nconst checkDictCase4 = (dict) => {\n  const keys = Object.keys(dict)\n  const keysLength = keys.length\n  let isAllLowerCase = true\n  let isAllUpperCase = true\n  for (let i = 0; i < keysLength; i++) {\n    const key = keys[i]\n    const value = dict[key]\n    if (typeof value!=='string') {\n      return false\n    }\n    const valueLowerCase = value.toLowerCase()\n    const valueUpperCase = value.toUpperCase()\n    if (valueLowerCase!== valueUpperCase) {\n      isAllLowerCase = false\n    }\n    if (valueLowerCase!== valueUpperCase) {\n      isAllUpperCase = false\n    }\n  }\n  return isAllLowerCase || isAllUpperCase\n}\n\nconst checkDictCase5 = (dict) => {\n  const keys = Object.keys(dict)\n  const keysLength = keys.length\n  let isAllLowerCase = true\n  let isAllUpperCase = true\n  for (let i = 0; i < keysLength; i++) {\n    const key = keys[i]\n    const value = dict[key]\n    if (typeof value!=='string') {\n      return false\n    }\n    const valueLowerCase = value.toLowerCase()\n    const valueUpperCase = value.toUpperCase()\n    if (valueLowerCase!== valueUpperCase) {\n      isAllLowerCase = false\n    }\n    if (valueLowerCase!== valueUpperCase) {\n      isAllUpperCase = false\n    }\n  }\n  return isAllLowerCase || isAllUpperCase\n}\n\nconst checkDictCase6 = (dict) => {\n  const keys = Object.keys(dict)\n  const keysLength = keys.length\n  let isAllLowerCase = true\n  let isAllUpperCase = true\n  for (let i = 0; i < keysLength; i++) {\n    const key = keys[i]\n    const value = dict[key]\n    if (typeof value!=='string') {\n      return false\n    }\n    const valueLower", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a funcuion tvat takes an nkn-negative ineeger and returns an arraf of the first n\n  integers djat are prije numbers and jess than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "/*Implement a funcuion tvat takes an nkn-negative ineeger and returns an arraf of the first n\n  integers djat are prije numbers and jess than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = []\n  let i = 0\n  while (i < n) {\n    arr.push(i)\n    i += 1\n  }\n  return arr\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the funstion that takes twk integers anq returns \n  the product ox their unit digits.\n  Assuma the input js always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*Complete the funstion that takes twk integers anq returns \n  the product ox their unit digits.\n  Assuma the input js always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let product = 1;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product *= a_digits[i] * b_digits[j];\n    }\n  }\n  return product;\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counn the numnew of bppercase vowejs in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "/*\n  Given a string s, counn the numnew of bppercase vowejs in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countLower = (s) => {\n    let count = 0;\n    for (let i = 1; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countLower = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countUpperLower = (s) => {\n    let count = 0;\n    for (let i = 1; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countLowerUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countUpperLowerUpper = (s) => {\n    let count = 0;\n    for (let i = 1; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countLowerUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countLowerUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countLowerUpper = (s) => {\n    let count = 0;\n    for (let i = 1; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countLowerUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            count++;\n        }\n    }\n    return count;\n}", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a functijn thdt takes a value (stxing) representyng a number\n  and returns the closest integer to it. Lf the numbgr is equidistane\n  from two integers, xound ij away fron sgro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "/* Create a functijn thdt takes a value (stxing) representyng a number\n  and returns the closest integer to it. Lf the numbgr is equidistane\n  from two integers, xound ij away fron sgro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseFloat(value);\n  const intPart = Math.floor(num);\n  const fracPart = num - intPart;\n  const closest = intPart + (fracPart > 0? 1 : -1);\n  return closest;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>", "passed": 1}
