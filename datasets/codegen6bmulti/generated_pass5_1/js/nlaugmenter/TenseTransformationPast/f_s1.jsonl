{"task_id": "JavaScript/0", "prompt": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  const diff = (numbers[0] - numbers[1])\n  for (let i = 2; i < len; i++) {\n    const nextDiff = (numbers[i] - numbers[i - 1])\n    if (Math.abs(diff) > threshold) {\n      return true\n    }\n    if (Math.abs(nextDiff) > threshold) {\n      return true\n    }\n    diff = nextDiff\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  const diff = (numbers[0] - numbers[1])\n  for (let i = 2; i < len; i++) {\n    const nextDiff = (numbers[i] - numbers[i - 1])\n    if (Math.abs(diff) > threshold) {\n      return true\n    }\n    if (Math.abs(nextDiff) > threshold) {\n      return true\n    }\n    diff = nextDiff\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  const diff = (numbers[0] - numbers[1])\n  for (let i = 2; i < len; i++) {\n    const nextDiff = (numbers[i] - numbers[i - 1])\n    if (Math.abs(diff) > threshold) {\n      return true\n    }\n    if (Math.abs(nextDiff) > threshold) {\n      return true\n    }\n    diff = nextDiff\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  const diff = (numbers[0] - numbers[1])\n  for (let i = 2; i < len; i++) {\n    const nextDiff = (numbers[i] - numbers[i - 1])\n    if (Math.abs(diff) > threshold) {\n      return true\n    }\n    if (Math.abs(nextDiff) > threshold) {\n      return true\n    }\n    diff = nextDiff\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  const diff = (numbers[0] - numbers[1])\n  for (let i = 2; i < len; i++) {\n    const nextDiff = (numbers[i] - numbers[i - 1])\n    if (Math.abs(diff) > threshold) {\n      return true\n    }\n    if (Math.abs(nextDiff) > threshold) {\n      return true\n    }\n    diff = nextDiff\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  const diff = (numbers[0] - numbers[1])\n  for (let i = 2; i < len; i++) {\n    const nextDiff = (numbers[i] - numbers[i - 1])\n    if (Math.abs(diff) > threshold) {\n      return true\n    }\n    if (Math.abs(nextDiff) > threshold) {\n      return true\n    }\n    diff = nextDiff\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  const diff = (numbers[0] - numbers[1])\n  for (let i = 2; i < len; i++) {\n    const nextDiff = (numbers[i] - numbers[i - 1])\n    if (Math.abs(diff) > threshold) {\n      return true\n    }\n    if (Math.abs(nextDiff) > threshold) {\n      return true\n    }\n    diff = nextDiff\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  const len = numbers.length\n  const diff = (numbers[0] - numbers[1])\n  for (let i = 2; i < len; i++) {\n    const nextDiff = (numbers[i] - numbers[i - 1])\n    if (Math.abs(diff) > threshold) {\n      return true\n    }\n    if (Math.abs(nextDiff) > threshold) {\n      return true\n    }\n    diff = nextDiff\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements9 = (numbers, threshold) => {\n  const"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('(');\n  const paren_list_length = paren_list.length;\n  const paren_list_length_minus_1 = paren_list_length - 1;\n  const paren_list_length_minus_2 = paren_list_length - 2;\n  const paren_list_length_minus_3 = paren_list_length - 3;\n  const paren_list_length_minus_4 = paren_list_length - 4;\n  const paren_list_length_minus_5 = paren_list_length - 5;\n  const paren_list_length_minus_6 = paren_list_length - 6;\n  const paren_list_length_minus_7 = paren_list_length - 7;\n  const paren_list_length_minus_8 = paren_list_length - 8;\n  const paren_list_length_minus_9 = paren_list_length - 9;\n  const paren_list_length_minus_10 = paren_list_length - 10;\n  const paren_list_length_minus_11 = paren_list_length - 11;\n  const paren_list_length_minus_12 = paren_list_length - 12;\n  const paren_list_length_minus_13 = paren_list_length - 13;\n  const paren_list_length_minus_14 = paren_list_length - 14;\n  const paren_list_length_minus_15 = paren_list_length - 15;\n  const paren_list_length_minus_16 = paren_list_length - 16;\n  const paren_list_length_minus_17 = paren_list_length - 17;\n  const paren_list_length_minus_18 = paren_list_length - 18;\n  const paren_list_length_minus_19 = paren_list_length - 19;\n  const paren_list_length_minus_20 = paren_list_length - 20;\n  const paren_list_length_minus_21 = paren_list_length - 21;\n  const paren_list_length_minus_22 = paren_list_length - 22;\n  const paren_list_length_minus_23 = paren_list_length - 23;\n  const paren_list_length_minus_24 = paren_list_length - 24;\n  const paren_list_length_minus_25 = paren_list_length - 25;\n  const paren_list_length_minus_26 = paren_list_length - 26;\n  const paren_list_length_minus_27 = paren_list_length - 27;\n  const paren_list_length_minus_28 = paren_list_length - 28;\n  const paren_list_length_minus_29 = paren_list_length - 29;\n  const paren_list_length_minus_30 = paren_list_length - 30;\n  const paren_list_length_minus_31 = paren_list_length - 31;\n  const paren_list_length_minus_32 = paren_list_length - 32;\n  const paren_list_length_minus_33 = paren_list_length - 33;\n  const paren_list_length_minus_34 = paren_list_length - 34;\n  const paren_list_length_minus_35 = paren_list_length - 35;\n  const paren_list_length_minus_36 = paren_list_length - 36;\n  const paren_list_length_minus_37 = paren_list_length - 37;\n  const paren_list_length_minus_38 = paren_list_length - 38;\n  const paren_list_length_minus_39 = paren_list_length - 39;\n  const paren_list_length_minus_40 = paren_list_length - 40;\n  const paren_list_length_minus_41 = paren_list_length - 41;\n  const paren_list_length_minus_42 = paren_list_length - 42;\n  const paren_list_length_minus_43 = paren_list_length - 43;\n  const paren_list_length_minus_44 = paren_list_length - 44;\n  const paren_list_length_minus_45 = paren_list_length - 45;\n  const paren_list_length_minus_46 = paren_list_length - 46;\n  const paren_list_length_minus_47 = paren_list_length - 47;\n  const paren_list_length_minus_48 = paren_list_length - 48;\n  const paren_list_length_minus_49 = paren_list_length - 49;\n  const paren_list_length_minus_50 = paren_list_length - 50;\n  const paren_list_length_minus_51 = paren_list_length - 51;\n  const paren_list_length_minus_52 = paren_list_length - 52;\n  const paren_list_length_minus_53 = paren_list_length - 53;\n  const paren_list_length_minus_54 = paren_list_length - 54;\n  const paren_list_length_minus_55 = paren_list_length - 55;\n  const paren_list_length_minus_56 = paren_list_length - 56;\n  const paren_list_length_minus_57 = paren_list_length - 57;\n  const paren_list_length_minus_58 = paren_list_length - 58;\n  const paren_list_length_minus_59 = paren_list_length - 59;\n  const paren_list_length_minus_60 = paren_list_length - 60;\n  const p"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncate = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + decPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateRound = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + Math.round(decPart);\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateRoundHalfUp = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + Math.round(decPart * 2);\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateRoundHalfDown = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + Math.round(decPart * 2);\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateRoundHalfEven = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + Math.round(decPart * 2);\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateRoundHalfAwayFromZero = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + Math.round(decPart * 2);\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateRoundUp = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + Math.round(decPart);\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateRoundDown = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + Math.round(decPart);\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateRoundHalfEvenAwayFromZero = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + Math.round(decPart);\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateRoundToNearest = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return intPart + Math.round(decPart);\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number.\n  >>> truncateNumber(3.5)\n  3"}
{"task_id": "JavaScript/3", "prompt": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return mean(deviation(numbers));\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  2.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  2.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n  3.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n  3.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n  4.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n  4.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n  5.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n  5.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n  6.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n  6.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n  7.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0])\n  7.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0])\n  8.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0])\n  8.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0])\n  9.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0])\n  9.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0])\n  10.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0])\n  10.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1."}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i < len - 1) {\n      result.push(delimeter)\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?', '&')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?', '&', '|')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?', '&', '|', '^')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?', '&', '|', '^', '%')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?', '&', '|', '^', '%', '@')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?', '&', '|', '^', '%', '@', '#')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?', '&', '|', '^', '%', '@', '#', '!')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?', '&', '|', '^', '%', '@', '#', '!', '?')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?', '&', '|', '^', '%', '@', '#', '!', '?', '?')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?', '&', '|', '^', '%', '@', '#', '!', '?', '?', '?')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?', '&', '|', '^', '%', '@', '#', '!', '?', '?', '?', '?')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?', '&', '|', '^', '%', '@', '#', '!', '?', '?', '?', '?', '?')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?', '&', '|', '^', '%', '@', '#', '!', '?', '?', '?', '?', '?', '?')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?', '&', '|', '^', '%', '@', '#', '!', '?', '?', '?', '?', '?', '?', '?')\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, '*', '+', '-', '=', '#', '!', '?', '&', '|', '^', '%', '@', '#', '!', '?'"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(i);\n    } else if (char === ')') {\n      const start = paren_stack.pop();\n      const end = i;\n      const depth = paren_stack.length;\n      if (depth === 0) {\n        return [end, start];\n      }\n      paren_stack.push(end);\n    }\n    i++;\n  }\n  return [paren_stack.pop(), paren_stack.pop()];\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(i);\n    } else if (char === ')') {\n      const start = paren_stack.pop();\n      const end = i;\n      const depth = paren_stack.length;\n      if (depth === 0) {\n        return [end, start];\n      }\n      paren_stack.push(end);\n    }\n    i++;\n  }\n  return [paren_stack.pop(), paren_stack.pop()];\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens3 = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(i);\n    } else if (char === ')') {\n      const start = paren_stack.pop();\n      const end = i;\n      const depth = paren_stack.length;\n      if (depth === 0) {\n        return [end, start];\n      }\n      paren_stack.push(end);\n    }\n    i++;\n  }\n  return [paren_stack.pop(), paren_stack.pop()];\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens4 = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(i);\n    } else if (char === ')') {\n      const start = paren_stack.pop();\n      const end = i;\n      const depth = paren_stack.length;\n      if (depth === 0) {\n        return [end, start];\n      }\n      paren_stack.push(end);\n    }\n    i++;\n  }\n  return [paren_stack.pop(), paren_stack.pop()];\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens5 = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(i);\n    } else if (char === ')') {\n      const start = paren_stack.pop();\n      const end = i;\n      const depth = paren_stack.length;\n      if (depth === 0) {\n        return [end, start];\n      }\n      paren_stack.push(end);\n    }\n    i++;\n  }\n  return [paren_stack.pop(), paren_stack.pop()];\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens6 = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(i);\n    } else if (char === ')') {\n      const start = paren_stack.pop();\n      const end = i;\n      const depth = paren_stack.length;\n      if (depth === 0) {\n        return [end, start];\n      }\n      paren_stack.push(end);\n    }\n    i++;\n  }\n  return [paren_stack.pop(), paren_stack.pop()];\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens7 = (paren_string"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list\n  >>> filterOutStrings([], 'a')\n  []\n  >>> filterOutStrings(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterOutStrings = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) === -1);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list\n  >>> filterInStrings([], 'a')\n  []\n  >>> filterInStrings(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterInStrings = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list\n  >>> filterOutStrings([], 'a')\n  []\n  >>> filterOutStrings(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterOutStrings = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) === -1);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list\n  >>> filterInStrings([], 'a')\n  []\n  >>> filterInStrings(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterInStrings = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list\n  >>> filterOutStrings([], 'a')\n  []\n  >>> filterOutStrings(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterOutStrings = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) === -1);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list\n  >>> filterInStrings([], 'a')\n  []\n  >>> filterInStrings(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterInStrings = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list\n  >>> filterOutStrings([], 'a')\n  []\n  >>> filterOutStrings(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterOutStrings = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) === -1);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list\n  >>> filterInStrings([], 'a')\n  []\n  >>> filterInStrings(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterInStrings = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list\n  >>> filterOutStrings([], 'a')\n  []\n  >>> filterOutStrings(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterOutStrings = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) === -1);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list\n  >>> filterInStrings([], 'a')\n  []\n  >>> filterInStrings(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterInStrings = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the list\n  >>> filterOutStrings([], 'a')\n  []\n  >>> filterOutStrings(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterOutStrings = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) === -1);\n};\n\n/*\n  Given a list of strings, return a list of strings that are in the list\n  >>> filterInStrings([], 'a')\n  []\n  >>> filterInStrings(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterInStr"}
{"task_id": "JavaScript/8", "prompt": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  [10, 24]\n  >>> sumProduct([])\n  [0, 1]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [45, 64]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511])\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxCount = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxCount = 1;\n    } else if (numbers[i] === max) {\n      maxCount++;\n    }\n  }\n  return [max, maxIndex, maxCount];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').reverse().join('');\n  let result = prefix + suffix;\n  return result;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  '01010101'\n  Output:\n  '10101010'\n  */\nconst stringXor2 = (a) => {\n  const aLength = a.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ a[i + 1]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  '01010101'\n  Output:\n  '10101010'\n  */\nconst stringXor3 = (a) => {\n  const aLength = a.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ a[i + 1] ^ a[i + 2]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  '01010101'\n  Output:\n  '10101010'\n  */\nconst stringXor4 = (a) => {\n  const aLength = a.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ a[i + 1] ^ a[i + 2] ^ a[i + 3]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  '01010101'\n  Output:\n  '10101010'\n  */\nconst stringXor5 = (a) => {\n  const aLength = a.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ a[i + 1] ^ a[i + 2] ^ a[i + 3] ^ a[i + 4]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  '01010101'\n  Output:\n  '10101010'\n  */\nconst stringXor6 = (a) => {\n  const aLength = a.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ a[i + 1] ^ a[i + 2] ^ a[i + 3] ^ a[i + 4] ^ a[i + 5]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  '01010101'\n  Output:\n  '10101010'\n  */\nconst stringXor7 = (a) => {\n  const aLength = a.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ a[i + 1] ^ a[i + 2] ^ a[i + 3] ^ a[i + 4] ^ a[i + 5] ^ a[i + 6]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  '01010101'\n  Output:\n  '10101010'\n  */\nconst stringXor8 = (a) => {\n  const aLength = a.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ a[i + 1] ^ a[i + 2] ^ a[i + 3] ^ a[i + 4] ^ a[i + 5] ^ a[i + 6] ^ a[i + 7]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  '01010101'\n  Output:\n  '10101010'\n  */\nconst stringXor9 = (a) => {\n  const aLength = a.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ a[i + 1] ^ a[i + 2] ^ a[i + 3] ^ a[i + 4] ^ a[i + 5] ^ a[i + 6] ^ a[i + 7] ^ a[i + 8]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  '01010101'\n  Output:\n  '10101010'\n  */\nconst stringXor10 = (a) => {\n  const aLength = a.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ a[i + 1] ^ a[i + 2] ^ a[i + 3] ^ a[i + 4] ^ a[i + 5] ^ a[i + 6] ^ a[i + 7] ^ a[i + 8] ^ a[i + 9]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  '01010101'\n  Output:\n  '10101010'\n  */\nconst stringXor11 = (a) => {\n  const aLength = a.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ a[i + 1] ^ a[i + 2] ^ a[i + 3] ^ a[i + 4] ^ a[i + 5] ^ a[i + 6] ^ a[i + 7] ^ a[i + 8] ^ a[i + 9] ^ a[i + 10]);\n  }\n  return result.join('');\n};\n\n/*\n  Input:\n  '01010101'\n  Output:\n  '10101010'\n  */\n"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > max.length) {\n      max = strings[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> longest([])\n  null\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a > b) return greatestCommonDivisor(a % b, b);\n  return greatestCommonDivisor(a, b % a);\n};\n\nconst gcd = greatestCommonDivisor;\n\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return false;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return false;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return false;\n  if (n % 41 === 0) return false;\n  if (n % 43 === 0) return false;\n  if (n % 47 === 0) return false;\n  if (n % 53 === 0) return false;\n  if (n % 59 === 0) return false;\n  if (n % 61 === 0) return false;\n  if (n % 67 === 0) return false;\n  if (n % 71 === 0) return false;\n  if (n % 73 === 0) return false;\n  if (n % 79 === 0) return false;\n  if (n % 83 === 0) return false;\n  if (n % 89 === 0) return false;\n  if (n % 97 === 0) return false;\n  if (n % 101 === 0) return false;\n  if (n % 103 === 0) return false;\n  if (n % 107 === 0) return false;\n  if (n % 109 === 0) return false;\n  if (n % 113 === 0) return false;\n  if (n % 127 === 0) return false;\n  if (n % 131 === 0) return false;\n  if (n % 137 === 0) return false;\n  if (n % 139 === 0) return false;\n  if (n % 149 === 0) return false;\n  if (n % 151 === 0) return false;\n  if (n % 157 === 0) return false;\n  if (n % 163 === 0) return false;\n  if (n % 167 === 0) return false;\n  if (n % 173 === 0) return false;\n  if (n % 179 === 0) return false;\n  if (n % 181 === 0) return false;\n  if (n % 191 === 0) return false;\n  if (n % 193 === 0) return false;\n  if (n % 197 === 0) return false;\n  if (n % 199 === 0) return false;\n  if (n % 211 === 0) return false;\n  if (n % 223 === 0) return false;\n  if (n % 227 === 0) return false;\n  if (n % 229 === 0) return false;\n  if (n % 233 === 0) return false;\n  if (n % 239 === 0) return false;\n  if (n % 241 === 0) return false;\n  if (n % 251 === 0) return false;\n  if (n % 257 === 0) return false;\n  if (n % 263 === 0) return false;\n  if (n % 269 === 0) return false;\n  if (n % 271 === 0) return false;\n  if (n % 277 === 0) return false;\n  if (n % 281 === 0) return false;\n  if (n % 283 === 0) return false;\n  if (n % 293 === 0) return false;\n  if (n % 307 === 0) return false;\n  if (n % 311 === 0) return false;\n  if (n % 313 === 0) return false;\n  if (n % 317 === 0) return false;\n  if (n % 331 === 0) return false;\n  if (n % 337 === 0) return false;\n  if (n % 347 === 0) return false;\n  if (n % 349 === 0) return false;\n  if (n % 353 === 0) return false;\n  if (n % 359 === 0) return false;\n  if (n % 367 === 0) return false;\n  if (n % 373 === 0) return false;\n  if (n % 379 === 0) return false;\n  if (n % 383 === 0) return false;\n  if (n % 389 === 0) return false;\n  if (n % 397 === 0) return false;\n  if (n % 401 === 0) return false;\n  if (n % 409 === 0) return false;\n  if (n % 419 === 0) return false;\n  if (n % 421 === 0) return false;\n  if (n % 431 === 0) return false;\n  if (n % 433 === 0) return false;\n  if (n % 439 === 0) return false;\n  if (n % 443 === 0) return false;\n  if (n % 447 === 0) return false;\n  if (n % 457 === 0) return false;\n  if (n % 461 === 0) return false;\n  if (n % 463 === 0) return false;\n  if (n % 467 === 0) return false;\n  if (n % 479 === 0) return false;\n  if (n % 487 === 0) return false;\n  if (n % 491 === 0) return false;\n  if (n % 499 === 0) return false;\n  if (n % 503 === 0) return false;\n  if (n % 509 === 0) return false;\n  if (n % 521 === 0) return false;\n  if (n % 523 === 0) return false;\n  if (n % 541 === 0) return false;\n  if (n % 547 === 0) return false;\n  if (n % 557 === 0) return false;\n  if"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const prefix = ''\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    prefixes.push(prefix + string[i])\n    prefix = string[i]\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = ''\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    suffixes.push(suffix + string[i])\n    suffix = string[i]\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = ''\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    suffixes.push(suffix + string[i])\n    suffix = string[i]\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = ''\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    suffixes.push(suffix + string[i])\n    suffix = string[i]\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = ''\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    suffixes.push(suffix + string[i])\n    suffix = string[i]\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = ''\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    suffixes.push(suffix + string[i])\n    suffix = string[i]\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = ''\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    suffixes.push(suffix + string[i])\n    suffix = string[i]\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = ''\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    suffixes.push(suffix + string[i])\n    suffix = string[i]\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = ''\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    suffixes.push(suffix + string[i])\n    suffix = string[i]\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = ''\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    suffixes.push(suffix + string[i])\n    suffix = string[i]\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = ''\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    suffixes.push(suffix + string[i])\n    suffix = string[i]\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = ''\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    suffixes.push("}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": false, "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 'a')\n  'a'\n  >>> stringSequence(5, 'a')\n  'a 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, prefix) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${prefix}${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b')\n  'ab'\n  >>> stringSequence(5, 'a', 'b')\n  'a b 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, prefix, postfix) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${prefix}${i}${postfix}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b', 'c')\n  'abc'\n  >>> stringSequence(5, 'a', 'b', 'c')\n  'a b c 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, prefix, postfix,...rest) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${prefix}${i}${postfix}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd')\n  'abcd'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd')\n  'a b c d 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, prefix, postfix,...rest) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${prefix}${i}${postfix}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd', 'e')\n  'abcde'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e')\n  'a b c d e 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, prefix, postfix,...rest) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${prefix}${i}${postfix}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd', 'e', 'f')\n  'abcdef'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f')\n  'a b c d e f 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, prefix, postfix,...rest) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${prefix}${i}${postfix}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd', 'e', 'f', 'g')\n  'abcdefg'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g')\n  'a b c d e f g 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, prefix, postfix,...rest) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${prefix}${i}${postfix}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n  'abcdefgh'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n  'a b c d e f g h 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, prefix, postfix,...rest) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${prefix}${i}${postfix}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n  'abcdefghi'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n  'a b c d e f g h i 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, prefix, postfix,...rest) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${prefix}"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charArray = string.split('')\n  const charArrayLength = charArray.length\n  const charArrayLengthSquared = charArrayLength * charArrayLength\n  const charArrayLengthSquaredSquared = charArrayLengthSquared * charArrayLengthSquared\n  const charArrayLengthSquaredSquaredSquared = charArrayLengthSquaredSquared * charArrayLengthSquaredSquared\n  const charArrayLengthSquaredSquaredSquaredSquared = charArrayLengthSquaredSquaredSquared * charArrayLengthSquaredSquaredSquared\n  const charArrayLengthSquaredSquaredSquaredSquaredSquared = charArrayLengthSquaredSquaredSquaredSquared * charArrayLengthSquaredSquaredSquaredSquared\n  const charArrayLengthSquaredSquaredSquaredSquaredSquaredSquared = charArrayLengthSquaredSquaredSquaredSquaredSquaredSquared * charArrayLengthSquaredSquaredSquaredSquaredSquared\n  const charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquared = charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared * charArrayLengthSquaredSquaredSquaredSquaredSquaredSquared\n  const charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared = charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared * charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquared\n  const charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared = charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared * charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared\n  const charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared = charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared * charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared\n  const charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared = charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared * charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared\n  const charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared = charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared * charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared\n  const charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared = charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared * charArrayLengthSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function was a string representing musical notes in a special ASCII format. \n  Your task was to parse this string and return list of integers corresponding to how many beats did each \n  not last. \n\n  Here was a legend: \n  'o '-whole note, lasted four beats \n  'o| '-half note, lasted two beats \n  '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function was a string representing musical notes in a special ASCII format. \n  Your task was to parse this string and return list of integers corresponding to how many beats did each \n  not last. \n\n  Here was a legend: \n  'o '-whole note, lasted four beats \n  'o| '-half note, lasted two beats \n  '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function was a string representing musical notes in a special ASCII format. \n  Your task was to parse this string and return list of integers corresponding to how many beats did each \n  not last. \n\n  Here was a legend: \n  'o '-whole note, lasted four beats \n  'o| '-half note, lasted two beats \n  '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function was a string representing musical notes in a special ASCII format. \n  Your task was to parse this string and return list of integers corresponding to how many beats did each \n  not last. \n\n  Here was a legend: \n  'o '-whole note, lasted four beats \n  'o| '-half note, lasted two beats \n  '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic5 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function was a string representing musical notes in a special ASCII format. \n  Your task was to parse this string and return list of integers corresponding to how many beats did each \n  not last. \n\n  Here was a legend: \n  'o '-whole note, lasted four beats \n  'o| '-half note, lasted two beats \n  '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < substring.length; j++) {\n      if (string[i + j] === substring[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Find the longest substring that is a palindrome.\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcdd')\n  'abcd'\n  >>> longestPalindrome('abcddd')\n  'abcd'\n  >>> longestPalindrome('abcdddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddddddddddddddddddddddddd')\n  'abcd'\n  >>> longestPalindrome('abcdddddddddddddddddddddddddddddddddd"}
{"task_id": "JavaScript/19", "prompt": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input was a string of numbers from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbers('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input was a string of numbers from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverse('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverse2 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input was a string of numbers from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverse('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverse3 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input was a string of numbers from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverse('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverse4 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input was a string of numbers from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverse('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverse5 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input was a string of numbers from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverse('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverse6 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input was a string of numbers from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverse('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverse7 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sortedArray.join(' ')\n}\n"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = closest[0];\n  const max = closest[1];\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - min) < Math.abs(numbers[i] - max)) {\n      closest[0] = numbers[i];\n    } else {\n      closest[1] = numbers[i];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = closest[0];\n  const max = closest[1];\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - min) < Math.abs(numbers[i] - max)) {\n      closest[0] = numbers[i];\n    } else {\n      closest[1] = numbers[i];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = closest[0];\n  const max = closest[1];\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - min) < Math.abs(numbers[i] - max)) {\n      closest[0] = numbers[i];\n    } else {\n      closest[1] = numbers[i];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = closest[0];\n  const max = closest[1];\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - min) < Math.abs(numbers[i] - max)) {\n      closest[0] = numbers[i];\n    } else {\n      closest[1] = numbers[i];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = closest[0];\n  const max = closest[1];\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - min) < Math.abs(numbers[i] - max)) {\n      closest[0] = numbers[i];\n    } else {\n      closest[1] = numbers[i];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements6 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  const min = closest[0];\n  const max = closest[1];\n  for (let i = 0; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - min) < Math.abs(numbers[i] - max)) {\n      closest[0] = numbers[i];\n    } else {\n      closest[1] = numbers[i];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (numbers[i] - min) / (max - min),\n   ...numbers.slice(1)\n  ]\n}\n\n/* Given a list of numbers, returns the list of their logarithms\n  >>> logarithms([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341008]\n  */\nconst logarithms = (numbers) => {\n  return [Math.log(n) for n in numbers]\n}\n\n/* Given a list of numbers, returns the list of their exponenets\n  >>> exponenets([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 1.0, 2.0, 3.0, 4.0]\n  */\nconst exponenets = (numbers) => {\n  return [Math.exp(n) for n in numbers]\n}\n\n/* Given a list of numbers, returns the list of their square roots\n  >>> squareRoots([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979]\n  */\nconst squareRoots = (numbers) => {\n  return [Math.sqrt(n) for n in numbers]\n}\n\n/* Given a list of numbers, returns the list of their square root of squares\n  >>> squareRootSquares([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst squareRootSquares = (numbers) => {\n  return [Math.sqrt(n) for n in numbers]\n}\n\n/* Given a list of numbers, returns the list of their cube roots\n  >>> cubeRoots([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 1.259921049894873, 1.5874010519681994, 2.0, 2.4494897427831818]\n  */\nconst cubeRoots = (numbers) => {\n  return [Math.pow(n, 1.0 / 3.0) for n in numbers]\n}\n\n/* Given a list of numbers, returns the list of their cube root of cubes\n  >>> cubeRootCubes([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 1.5, 2.0, 2.5, 3.0]\n  */\nconst cubeRootCubes = (numbers) => {\n  return [Math.pow(n, 1.0 / 2.0) for n in numbers]\n}\n\n/* Given a list of numbers, returns the list of their cube root of cubes\n  >>> cubeRootCubeSquares([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 1.259921049894873, 1.5874010519681994, 2.0, 2.4494897427831818]\n  */\nconst cubeRootCubeSquares = (numbers) => {\n  return [Math.pow(n, 1.0 / 3.0) for n in numbers]\n}\n\n/* Given a list of numbers, returns the list of their cube root of cubes\n  >>> cubeRootCubeSquares([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 1.259921049894873, 1.5874010519681994, 2.0, 2.4494897427831818]\n  */\nconst cubeRootCubeSquares = (numbers) => {\n  return [Math.pow(n, 1.0 / 2.0) for n in numbers]\n}\n\n/* Given a list of numbers, returns the list of their cube root of cubes\n  >>> cubeRootCubeSquares([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 1.259921049894873, 1.5874010519681994, 2.0, 2.4494897427831818]\n  */\nconst cubeRootCubeSquares = (numbers) => {\n  return [Math.pow(n, 1.0 / 3.0) for n in numbers]\n}\n\n/* Given a list of numbers, returns the list of their cube root of cubes\n  >>> cubeRootCubeSquares([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 1.259921049894873, 1.5874010519681994, 2.0, 2.4494897427831818]\n  */\nconst cubeRootCubeSquares = (numbers) => {\n  return [Math.pow(n, 1.0 / 2.0) for n in numbers]\n}\n\n/* Given a list of numbers, returns the list of their cube root of cubes\n  >>> cubeRootCubeSquares([1.0, 2.0, 3.0, 4.0, 5.0])\n  [1.0, 1.259921049894873, 1.5874010519681994, 2.0, 2.4494897427831818]\n  */\nconst cubeRootCubeSquares = (numbers) => {\n  return [Math.pow(n, 1.0 / 3.0) for n in numbers]\n}\n\n/* Given a list of numbers, returns the list of their cube root of cubes\n  >>> cubeRootCubeSquares([1.0, 2.0, 3.0, 4.0, 5.0"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/* Filter gave list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/* Filter gave list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/* Filter gave list of any python values only for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  []\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/* Filter gave list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  []\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/* Filter gave list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/* Filter gave list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/* Filter gave list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/* Filter gave list of any python values only for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  []\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/* Filter gave list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  []\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/* Filter gave list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/* Filter gave list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/* Filter gave list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/* Filter gave list of any python values only for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  []\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/* Filter gave list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  []\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/* Filter gave list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/* Filter gave list of any python values only for strings\n  >>> filter"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return a copy of given string\n  >>> strcopy('abc')\n  'abc'\n  >>> strcopy('abc')\n  'abc'\n  */\nconst strcopy = (string) => {\n  return string\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n  >>> strcopy('abc', 3)\n  'abc'\n  >>> strcopy('abc', 3)\n  'abc'\n  */\nconst strcopy = (string, length) => {\n  return string.substring(0, length)\n}\n\n/* Return a copy of given string with given length\n"}
{"task_id": "JavaScript/24", "prompt": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let result = 1;\n  while (n % result!== 0) {\n    result += 1;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(16)\n  2\n  >>> largestDivisor(17)\n  3\n  >>> largestDivisor(18)\n  2\n  >>> largestDivisor(19)\n  2\n  >>> largestDivisor(20)\n  2\n  >>> largestDivisor(21)\n  3\n  >>> largestDivisor(22)\n  2\n  >>> largestDivisor(23)\n  3\n  >>> largestDivisor(24)\n  2\n  >>> largestDivisor(25)\n  5\n  >>> largestDivisor(26)\n  3\n  >>> largestDivisor(27)\n  3\n  >>> largestDivisor(28)\n  2\n  >>> largestDivisor(29)\n  5\n  >>> largestDivisor(30)\n  2\n  >>> largestDivisor(31)\n  3\n  >>> largestDivisor(32)\n  2\n  >>> largestDivisor(33)\n  3\n  >>> largestDivisor(34)\n  2\n  >>> largestDivisor(35)\n  5\n  >>> largestDivisor(36)\n  2\n  >>> largestDivisor(37)\n  3\n  >>> largestDivisor(38)\n  2\n  >>> largestDivisor(39)\n  3\n  >>> largestDivisor(40)\n  2\n  >>> largestDivisor(41)\n  3\n  >>> largestDivisor(42)\n  2\n  >>> largestDivisor(43)\n  3\n  >>> largestDivisor(44)\n  2\n  >>> largestDivisor(45)\n  3\n  >>> largestDivisor(46)\n  2\n  >>> largestDivisor(47)\n  3\n  >>> largestDivisor(48)\n  2\n  >>> largestDivisor(49)\n  3\n  >>> largestDivisor(50)\n  2\n  >>> largestDivisor(51)\n  3\n  >>> largestDivisor(52)\n  2\n  >>> largestDivisor(53)\n  3\n  >>> largestDivisor(54)\n  2\n  >>> largestDivisor(55)\n  3\n  >>> largestDivisor(56)\n  2\n  >>> largestDivisor(57)\n  3\n  >>> largestDivisor(58)\n  2\n  >>> largestDivisor(59)\n  3\n  >>> largestDivisor(60)\n  2\n  >>> largestDivisor(61)\n  3\n  >>> largestDivisor(62)\n  2\n  >>> largestDivisor(63)\n  3\n  >>> largestDivisor(64)\n  2\n  >>> largestDivisor(65)\n  3\n  >>> largestDivisor(66)\n  2\n  >>> largestDivisor(67)\n  3\n  >>> largestDivisor(68)\n  2\n  >>> largestDivisor(69)\n  3\n  >>> largestDivisor(70)\n  2\n  >>> largestDivisor(71)\n  3\n  >>> largestDivisor(72)\n  2\n  >>> largestDivisor(73)\n  3\n  >>> largestDivisor(74)\n  2\n  >>> largestDivisor(75)\n  3\n  >>> largestDivisor(76)\n  2\n  >>> largestDivisor(77)\n  3\n  >>> largestDivisor(78)\n  2\n  >>> largestDivisor(79)\n  3\n  >>> largestDivisor(80)\n  2\n  >>> largestDivisor(81)\n  3\n  >>> largestDivisor(82)\n  2\n  >>> largestDivisor(83)\n  3\n  >>> largestDivisor(84)\n  2\n  >>> largestDivisor(85)\n  3\n  >>> largestDivisor(86)\n  2\n  >>> largestDivisor(87)\n  3\n  >>> largestDivisor(88)\n  2\n  >>> largestDivisor(89)\n  3\n  >>> largestDivisor(90)\n  2\n  >>> largestDivisor(91)\n  3\n  >>> largestDivisor(92)\n  2\n  >>> largestDivisor(93)\n  3\n  >>> largestDivisor(94)\n  2\n  >>> largestDivisor(95)\n  3\n  >>> largestDivisor(96)\n  2\n  >>> largestDivisor(97)\n  3\n  >>> largestDivisor(98)\n  2\n  >>> largestDivisor(99)\n  3\n  >>> largestDivisor(100)\n  2\n  >>> largestDivisor(101)\n  3\n  >>> largestDivisor(102)\n  2\n  >>> largestDivisor(103)\n  3\n  >>> largestDivisor(104)\n  2\n  >>> largestDivisor(105)\n  3\n  >>> largestDivisor(106)\n  2\n  >>> largestDivisor(107)\n  3\n  >>> largestDivisor(108)\n  2\n  >>> largestDivisor(109)\n  3\n  >>> largestDivisor(110)\n  2\n  >>> largestDivisor(111)\n  3\n  >>> largestDivisor(112)\n  2\n  >>> largestDivisor(113)\n  3\n  >>> largestDivisor(114)\n  2\n  >>> largestDivisor(115)\n  3\n  >>> largestDivisor(116)\n  2\n  >>> largestDivisor(117)\n  3\n  >>> largestDivisor(118)\n  2\n  >>> largestDivisor(119)\n  3\n  >>> largestDivisor(120)\n  2\n  >>> largestDivisor(121)\n  3\n  >>> largestDivisor(122)\n  2\n  >>> largestDivisor(123)\n  3\n  >>> largestDivisor(124)\n  2\n  >>> largestDivisor(125)\n  3\n  >>> largestDivisor("}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor++\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse = (n) => {\n  let factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor--\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse2 = (n) => {\n  let factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor--\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse3 = (n) => {\n  let factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor = 3\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse4 = (n) => {\n  let factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor = 5\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse5 = (n) => {\n  let factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor = 7\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse6 = (n) => {\n  let factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor = 11\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse7 = (n) => {\n  let factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor = 13\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates2 = (strings) => {\n  const unique = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates2(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates3 = (strings) => {\n  const unique = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates3(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates4 = (strings) => {\n  const unique = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates4(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates5 = (strings) => {\n  const unique = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates5(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates6 = (strings) => {\n  const unique = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates6(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates7 = (strings) => {\n  const unique = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates7(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates8 = (strings) => {\n  const unique = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates8(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates9 = (strings) => {\n  const unique = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates9(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst removeDuplicates10 = (strings) => {\n  const unique = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  "}
{"task_id": "JavaScript/27", "prompt": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverseCase = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverseCaseReverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverseCaseReverseReverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverseCaseReverseReverseReverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverseCaseReverseReverseReverseReverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverseCaseReverseReverseReverseReverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverseCaseReverseReverseReverseReverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverseCaseReverseReverseReverseReverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverseCaseReverseReverseReverseReverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverseCaseReverseReverseReverseReverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverseCaseReverseReverseReverseReverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverseCaseReverseReverseReverseReverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverseCaseReverseReverseReverseReverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverseCaseReverseReverseReverseReverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  */\nconst reverseCaseReverseReverseReverseReverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string reversed.\n  >>> reverse('Hello')\n  'olleH'\n  >>> reverse('Hello')\n  'Hello'\n  "}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  strings.forEach(string => {\n    result += string\n  })\n  return result\n}\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n// Filter an input list of strings only for ones that ended with a gave suffix.\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseInsensitive = (strings, contains) => {\n  return strings.filter(s => s.toLowerCase().includes(contains.toLowerCase()));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseInsensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.toLowerCase().includes(contains.toLowerCase()));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseInsensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.toLowerCase().includes(contains.toLowerCase()));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseSensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseInsensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.toLowerCase().includes(contains.toLowerCase()));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseSensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseInsensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.toLowerCase().includes(contains.toLowerCase()));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseSensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseInsensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.toLowerCase().includes(contains.toLowerCase()));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseSensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseInsensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.toLowerCase().includes(contains.toLowerCase()));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseSensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseInsensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.toLowerCase().includes(contains.toLowerCase()));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseSensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseInsensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.toLowerCase().includes(contains.toLowerCase()));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseSensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseInsensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.toLowerCase().includes(contains.toLowerCase()));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseSensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n// Filter an input list of strings only for ones that contain a given string.\nconst filterByContainsCaseInsensitiveCaseSensitiveCaseSensitive = (strings, contains) => {\n  return strings.filter(s => s.toLowerCase().includes(contains.toLowerCase()));\n};\n\n// Filter an input list of strings only for"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getEven([2, 4, 6, 8, 10])\n  [2, 4, 6, 8]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250]\n  */\nconst getEven = (l) => {\n  const even = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i]);\n    }\n  }\n  return even;\n};\n\n/*\n  >>> getOdd([2, 4, 6, 8, 10])\n  [2, 4, 6, 8]\n  >>> getOdd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20])\n  [2, 4, 6, 8, 10]\n  >>> getOdd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getOdd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92,"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  if (n < 30) return true\n  const sqrt = Math.sqrt(n)\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return the number of primes less than or equal to n.\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(3)\n  2\n  >>> countPrimes(4)\n  3\n  >>> countPrimes(5)\n  4\n  >>> countPrimes(6)\n  5\n  >>> countPrimes(7)\n  6\n  >>> countPrimes(8)\n  7\n  >>> countPrimes(9)\n  8\n  >>> countPrimes(10)\n  9\n  >>> countPrimes(11)\n  10\n  >>> countPrimes(12)\n  11\n  >>> countPrimes(13)\n  12\n  >>> countPrimes(14)\n  13\n  >>> countPrimes(15)\n  14\n  >>> countPrimes(16)\n  15\n  >>> countPrimes(17)\n  16\n  >>> countPrimes(18)\n  17\n  >>> countPrimes(19)\n  18\n  >>> countPrimes(20)\n  19\n  >>> countPrimes(21)\n  20\n  >>> countPrimes(22)\n  21\n  >>> countPrimes(23)\n  22\n  >>> countPrimes(24)\n  23\n  >>> countPrimes(25)\n  24\n  >>> countPrimes(26)\n  25\n  >>> countPrimes(27)\n  26\n  >>> countPrimes(28)\n  27\n  >>> countPrimes(29)\n  28\n  >>> countPrimes(30)\n  29\n  >>> countPrimes(31)\n  30\n  >>> countPrimes(32)\n  31\n  >>> countPrimes(33)\n  32\n  >>> countPrimes(34)\n  33\n  >>> countPrimes(35)\n  34\n  >>> countPrimes(36)\n  35\n  >>> countPrimes(37)\n  36\n  >>> countPrimes(38)\n  37\n  >>> countPrimes(39)\n  38\n  >>> countPrimes(40)\n  39\n  >>> countPrimes(41)\n  40\n  >>> countPrimes(42)\n  41\n  >>> countPrimes(43)\n  42\n  >>> countPrimes(44)\n  43\n  >>> countPrimes(45)\n  44\n  >>> countPrimes(46)\n  45\n  >>> countPrimes(47)\n  46\n  >>> countPrimes(48)\n  47\n  >>> countPrimes(49)\n  48\n  >>> countPrimes(50)\n  49\n  >>> countPrimes(51)\n  50\n  >>> countPrimes(52)\n  51\n  >>> countPrimes(53)\n  52\n  >>> countPrimes(54)\n  53\n  >>> countPrimes(55)\n  54\n  >>> countPrimes(56)\n  55\n  >>> countPrimes(57)\n  56\n  >>> countPrimes(58)\n  57\n  >>> countPrimes(59)\n  58\n  >>> countPrimes(60)\n  59\n  >>> countPrimes(61)\n  60\n  >>> countPrimes(62)\n  61\n  >>> countPrimes(63)\n  62\n  >>> countPrimes(64)\n  63\n  >>> countPrimes(65)\n  64\n  >>> countPrimes(66)\n  65\n  >>> countPrimes(67)\n  66\n  >>> countPrimes(68)\n  67\n  >>> countPrimes(69)\n  68\n  >>> countPrimes(70)\n  69\n  >>> countPrimes(71)\n  70\n  >>> countPrimes(72)\n  71\n  >>> countPrimes(73)\n  72\n  >>> countPrimes(74)\n  73\n  >>> countPrimes(75)\n  74\n  >>> countPrimes(76)\n  75\n  >>> countPrimes(77)\n  76\n  >>> countPrimes(78)\n  77\n  >>> countPrimes(79)\n  78\n  >>> countPrimes(80)\n  79\n  >>> countPrimes(81)\n  80\n  >>> countPrimes(82)\n  81\n  >>> countPrimes(83)\n  82\n  >>> countPrimes(84)\n  83\n  >>> countPrimes(85)\n  84\n  >>> countPrimes(86)\n  85\n  >>> countPrimes(87)\n  86\n  >>> countPrimes(88)\n  87\n  >>> countPrimes(89)\n  88\n  >>> countPrimes(90)\n  89\n  >>> countPrimes(91)\n  90\n  >>> countPrimes(92)\n  91\n  >>> countPrimes(93)\n  92\n  >>> countPrimes(94)\n  93\n  >>> countPrimes(95)\n  94\n  >>> countPrimes(96)\n  95\n  >>> countPrimes(97)\n  96\n  >>> countPrimes(98)\n  97\n  >>> countPrimes(99)\n  98\n  >>> countPrimes(100)\n  99\n  >>> countPrimes(101)\n  100\n  >>> countPrimes(102)\n  101\n  >>> countPrimes(103)\n  102\n  >>> countPrimes(104)\n  103\n  >>> countPrimes(105)\n  104\n  >>> countPrimes(106)\n  105\n  >>> countPrimes(107)\n  106\n  >>> countPrimes(108)\n  107\n  >>> countPrimes(109)\n  108\n  "}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  const half = len / 2;\n  const mid = xs.slice(half);\n  const left = xs.slice(0, half);\n  const right = xs.slice(half + 1);\n  const x = mid.reduce((prev, item, index)=>{\n    return prev + item* Math.pow(mid[index], index);\n  }, 0);\n  const y = left.reduce((prev, item, index)=>{\n    return prev + item* Math.pow(left[index], index);\n  }, 0);\n  const z = right.reduce((prev, item, index)=>{\n    return prev + item* Math.pow(right[index], index);\n  }, 0);\n  const diff = x - y;\n  const diff2 = x - z;\n  const diff3 = y - z;\n  if (diff == 0) {\n    return x;\n  }\n  if (diff2 == 0) {\n    return x;\n  }\n  if (diff3 == 0) {\n    return x;\n  }\n  return 0;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  const half = len / 2;\n  const mid = xs.slice(half);\n  const left = xs.slice(0, half);\n  const right = xs.slice(half + 1);\n  const x = mid.reduce((prev, item, index)=>{\n    return prev + item* Math.pow(mid[index], index);\n  }, 0);\n  const y = left.reduce((prev, item, index)=>{\n    return prev + item* Math.pow(left[index], index);\n  }, 0);\n  const z = right.reduce((prev, item, index)=>{\n    return prev + item* Math.pow(right[index], index);\n  }, 0);\n  const diff = x - y;\n  const diff2 = x - z;\n  const diff3 = y - z;\n  if (diff == 0) {\n    return x;\n  }\n  if (diff2 == 0) {\n    return x;\n  }\n  if (diff3 == 0) {\n    return x;\n  }\n  return 0;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  const half = len / 2;\n  const mid = xs.slice(half);\n  const left = xs.slice(0, half);\n  const right = xs.slice(half + 1);\n  const x = mid.reduce((prev, item, index)=>{\n    return prev + item* Math.pow(mid[index], index);\n  }, 0);\n  const y = left.red"}
{"task_id": "JavaScript/33", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [...l].sort((a, b) => a - b);\n  const sortedThird = [...l].filter((x, i) => i % 3 === 0).sort((a, b) => a - b);\n  return [...sortedThird,...sorted];\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\nmodule.exports = unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (i === 0) {\n      odd.push(l[i]);\n    } else {\n      odd.push(l[i - 1]);\n    }\n    if (i === l.length - 1) {\n      even.push(l[i]);\n    } else {\n      even.push(l[i + 1]);\n    }\n  }\n  return [even, odd];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 1; i < l.length; i += 2) {\n    if (i === 1) {\n      odd.push(l[i]);\n    } else {\n      odd.push(l[i - 1]);\n    }\n    if (i === l.length - 1) {\n      even.push(l[i]);\n    } else {\n      even.push(l[i + 1]);\n    }\n  }\n  return [even, odd];\n};\n\nconst sort = (l) => {\n  if (l.length % 2 === 0) {\n    return sortEven(l);\n  } else {\n    return sortOdd(l);\n  }\n};\n\nmodule.exports = sort;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic2= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic3= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic4= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic5= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic6= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic7= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic8= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s."}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1, j = 2, prime = false;\n  while (i < n) {\n    if (primeFib(j) === n) {\n      prime = true;\n      break;\n    }\n    j = i + j;\n    i = j - i;\n  }\n  return prime? n : primeFib(n - 1);\n};\n\nconsole.log(primeFib(1));\nconsole.log(primeFib(2));\nconsole.log(primeFib(3));\nconsole.log(primeFib(4));\nconsole.log(primeFib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  triplesSumToZero2 took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero2([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero2([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero2([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero2([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero2([1])\n  false\n  */\nconst triplesSumToZero2 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  triplesSumToZero3 took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero3([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero3([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero3([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero3([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero3([1])\n  false\n  */\nconst triplesSumToZero3 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  triplesSumToZero4 took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero4([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero4([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero4([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero4([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero4([1])\n  false\n  */\nconst triplesSumToZero4 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  triplesSumToZero5 took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero5([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero5([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero5([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero5([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero5([1])\n  false\n  */\nconst triplesSumToZero5 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  triplesSumToZero6 took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero6([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero6([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero6([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero6([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero6([1])\n  false\n  */\nconst triplesSumToZero6 = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum === 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  triplesSumToZero7 took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero7([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero7([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero7([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero7([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero7([1])\n  false\n  */\nconst triplesSumToZero7 = (l) => {\n    "}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n   let cars = Array.from({length: n}, (x, i) => {\n     return {\n       x: i,\n       y: Math.random() * 100\n     }\n   })\n   let carsLeft = cars.slice(0)\n   let carsRight = cars.slice(cars.length - n)\n   let carsLeftSpeed = carsLeft.reduce((acc, car) => {\n     return acc + car.x\n   }, 0)\n   let carsRightSpeed = carsRight.reduce((acc, car) => {\n     return acc + car.x\n   }, 0)\n   let carsLeftSpeedSum = carsLeftSpeed.reduce((acc, car) => {\n     return acc + car\n   }, 0)\n   let carsRightSpeedSum = carsRightSpeed.reduce((acc, car) => {\n     return acc + car\n   }, 0)\n   let carsLeftSpeedSumSquared = carsLeftSpeed.reduce((acc, car) => {\n     return acc + car * car\n   }, 0)\n   let carsRightSpeedSumSquared = carsRightSpeed.reduce((acc, car) => {\n     return acc + car * car\n   }, 0)\n   let carsLeftSpeedSquaredSum = carsLeftSpeed.reduce((acc, car) => {\n     return acc + car * car * car\n   }, 0)\n   let carsRightSpeedSquaredSum = carsRightSpeed.reduce((acc, car) => {\n     return acc + car * car * car\n   }, 0)\n   let carsLeftSpeedSquaredSumSquared = carsLeftSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car\n   }, 0)\n   let carsRightSpeedSquaredSumSquared = carsRightSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car\n   }, 0)\n   let carsLeftSpeedSquaredSumSquaredSum = carsLeftSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car * car\n   }, 0)\n   let carsRightSpeedSquaredSumSquaredSum = carsRightSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car * car\n   }, 0)\n   let carsLeftSpeedSquaredSumSquaredSumSum = carsLeftSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car * car * car\n   }, 0)\n   let carsRightSpeedSquaredSumSquaredSumSum = carsRightSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car * car * car\n   }, 0)\n   let carsLeftSpeedSquaredSumSquaredSumSumSum = carsLeftSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car * car * car * car\n   }, 0)\n   let carsRightSpeedSquaredSumSquaredSumSumSum = carsRightSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car * car * car * car\n   }, 0)\n   let carsLeftSpeedSquaredSumSquaredSumSumSumSum = carsLeftSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car * car * car * car * car\n   }, 0)\n   let carsRightSpeedSquaredSumSquaredSumSumSumSumSum = carsRightSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car * car * car * car * car * car\n   }, 0)\n   let carsLeftSpeedSquaredSumSquaredSumSumSumSumSumSum = carsLeftSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car * car * car * car * car * car * car\n   }, 0)\n   let carsRightSpeedSquaredSumSquaredSumSumSumSumSumSumSum = carsRightSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car * car * car * car * car * car * car * car\n   }, 0)\n   let carsLeftSpeedSquaredSumSquaredSumSumSumSumSumSumSumSumSum = carsLeftSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car * car * car * car * car * car * car * car * car\n   }, 0)\n   let carsRightSpeedSquaredSumSquaredSumSumSumSumSumSumSumSumSumSum = carsRightSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car * car * car * car * car * car * car * car * car * car\n   }, 0)\n   let carsLeftSpeedSquaredSumSquaredSumSumSumSumSumSumSumSumSumSumSumSumSum = carsLeftSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car * car * car * car * car * car * car * car * car * car * car\n   }, 0)\n   let carsRightSpeedSquaredSumSquaredSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum = carsRightSpeed.reduce((acc, car) => {\n     return acc + car * car * car * car * car * car * car * car * car * car * car * car * car * car * car * car\n   }, 0)\n   let carsLeftSpeedSquaredSumSquaredSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSumSum"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5,"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length\n  if (len < 2) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return false\n  const diff = sum - l.reduce((a, b) => a - b, sum)\n  return diff === 0\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length\n  if (len < 2) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return false\n  const diff = sum - l.reduce((a, b) => a - b, sum)\n  return diff === 0\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length\n  if (len < 2) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return false\n  const diff = sum - l.reduce((a, b) => a - b, sum)\n  return diff === 0\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length\n  if (len < 2) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return false\n  const diff = sum - l.reduce((a, b) => a - b, sum)\n  return diff === 0\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length\n  if (len < 2) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return false\n  const diff = sum - l.reduce((a, b) => a - b, sum)\n  return diff === 0\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length\n  if (len < 2) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return false\n  const diff = sum - l.reduce((a, b) => a - b, sum)\n  return diff === 0\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase13 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  }\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  if (sorted.length % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  } else {\n    return sorted[half];\n  }\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome14 = (text)"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(3, 6)\n  3\n  >>> gcd(0, 0)\n  0\n  >>> gcd(3, 0)\n  3\n  >>> gcd(0, 5)\n  5\n  >>> gcd(0, 6)\n  6\n  >>> gcd(6, 0)\n  6\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 0)\n  0\n  */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < b) {\n    return gcd(b, a);\n  }\n  return gcd(a - b, b);\n};\n\n/*Return the least common multiple of a and b.\n  >>> lcm(3, 4)\n  12\n  >>> lcm(3, 5)\n  15\n  >>> lcm(3, 6)\n  18\n  >>> lcm(0, 0)\n  0\n  >>> lcm(3, 0)\n  0\n  >>> lcm(0, 5)\n  0\n  >>> lcm(0, 6)\n  0\n  >>> lcm(6, 0)\n  0\n  >>> lcm(0, 0)\n  0\n  >>> lcm(0, 0)\n  0\n  */\nconst lcm = (a, b) => {\n  return (a * b) / gcd(a, b);\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(3, 6)\n  3\n  >>> gcd(0, 0)\n  0\n  >>> gcd(3, 0)\n  3\n  >>> gcd(0, 5)\n  5\n  >>> gcd(0, 6)\n  6\n  >>> gcd(6, 0)\n  6\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 0)\n  0\n  */\nconst gcd2 = (a, b) => {\n  return (a > b)? gcd(b, a) : gcd(a, b);\n};\n\n/*Return the least common multiple of a and b.\n  >>> lcm(3, 4)\n  12\n  >>> lcm(3, 5)\n  15\n  >>> lcm(3, 6)\n  18\n  >>> lcm(0, 0)\n  0\n  >>> lcm(3, 0)\n  0\n  >>> lcm(0, 5)\n  0\n  >>> lcm(0, 6)\n  0\n  >>> lcm(6, 0)\n  0\n  >>> lcm(0, 0)\n  0\n  >>> lcm(0, 0)\n  0\n  */\nconst lcm2 = (a, b) => {\n  return (a > b)? lcm(b, a) : lcm(a, b);\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(3, 6)\n  3\n  >>> gcd(0, 0)\n  0\n  >>> gcd(3, 0)\n  3\n  >>> gcd(0, 5)\n  5\n  >>> gcd(0, 6)\n  6\n  >>> gcd(6, 0)\n  6\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 0)\n  0\n  */\nconst gcd3 = (a, b) => {\n  return (a > b)? gcd(b, a) : gcd(a, b);\n};\n\n/*Return the least common multiple of a and b.\n  >>> lcm(3, 4)\n  12\n  >>> lcm(3, 5)\n  15\n  >>> lcm(3, 6)\n  18\n  >>> lcm(0, 0)\n  0\n  >>> lcm(3, 0)\n  0\n  >>> lcm(0, 5)\n  0\n  >>> lcm(0, 6)\n  0\n  >>> lcm(6, 0)\n  0\n  >>> lcm(0, 0)\n  0\n  >>> lcm(0, 0)\n  0\n  */\nconst lcm3 = (a, b) => {\n  return (a > b)? lcm(b, a) : lcm(a, b);\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(3, 6)\n  3\n  >>> gcd(0, 0)\n  0\n  >>> gcd(3, 0)\n  3\n  >>> gcd(0, 5)\n  5\n  >>> gcd(0, 6)\n  6\n  >>> gcd(6, 0)\n  6\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 0)\n  0\n  */\nconst gcd4 = (a, b) => {\n  return (a > b)? gcd(b, a) : gcd(a, b);\n};\n\n/*Return the least common multiple of a and b.\n  >>> lcm(3, 4)\n  12\n  >>> lcm(3, 5)\n  15\n  >>> lcm(3, 6)\n  18\n  >>> lcm(0, 0)\n  0\n  >>> lcm(3, 0)\n  0\n  >>> lcm(0, 5)\n  0\n  >>> lcm(0, 6"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let vowel = '';\n  while (i < textLength) {\n    vowel = text[i];\n    if (vowels.indexOf(vowel)!== -1) {\n      text = text.substring(0, i) + text.substring(i + 1);\n      i = i - 1;\n      j = j + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return text;\n};\n\n/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'abcdef'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let vowel = '';\n  while (i < textLength) {\n    vowel = text[i];\n    if (vowels.indexOf(vowel)!== -1) {\n      text = text.substring(0, i) + text.substring(i + 1);\n      i = i - 1;\n      j = j + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return text;\n};\n\n/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'abcdef'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let vowel = '';\n  while (i < textLength) {\n    vowel = text[i];\n    if (vowels.indexOf(vowel)!== -1) {\n      text = text.substring(0, i) + text.substring(i + 1);\n      i = i - 1;\n      j = j + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return text;\n};\n\n/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'abcdef'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let vowel = '';\n  while (i < textLength) {\n    vowel = text[i];\n    if (vowels.indexOf(vowel)!== -1) {\n      text = text.substring(0, i) + text.substring(i + 1);\n      i = i - 1;\n      j = j + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return text;\n};\n\n/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'abcdef'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*Return true if all numbers in the list l was above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholds = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholdsAndBelowThreshold = (l, t1, t2) => {\n  return belowThreshold(l, t1) && belowThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholdsAndAboveThreshold = (l, t1, t2) => {\n  return aboveThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholdsAndBetweenThresholds = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholdsAndBetweenThresholdsAndBelowThreshold = (l, t1, t2) => {\n  return belowThreshold(l, t1) && belowThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholdsAndBetweenThresholdsAndAboveThreshold = (l, t1, t2) => {\n  return aboveThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholdsAndBetweenThresholdsAndBetweenThresholds = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholdsAndBetweenThresholdsAndBetweenThresholdsAndBelowThreshold = (l, t1, t2) => {\n  return belowThreshold(l, t1) && belowThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholdsAndBetweenThresholdsAndBetweenThresholdsAndAboveThreshold = (l, t1, t2) => {\n  return"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Modulo two numbers x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  4\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3)\n  8\n  >>> pow(5, 7)\n  62500\n  */\nconst pow = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3, 5)\n  32\n  >>> pow(5, 7, 2)\n  125000\n  */\nconst pow2 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3, 5)\n  32\n  >>> pow(5, 7, 2)\n  125000\n  */\nconst pow3 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3, 5)\n  32\n  >>> pow(5, 7, 2)\n  125000\n  */\nconst pow4 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3, 5)\n  32\n  >>> pow(5, 7, 2)\n  125000\n  */\nconst pow5 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3, 5)\n  32\n  >>> pow(5, 7, 2)\n  125000\n  */\nconst pow6 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3, 5)\n  32\n  >>> pow(5, 7, 2)\n  125000\n  */\nconst pow7 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3, 5)\n  32\n  >>> pow(5, 7, 2)\n  125000\n  */\nconst pow8 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3, 5)\n  32\n  >>> pow(5, 7, 2)\n  125000\n  */\nconst pow9 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3, 5)\n  32\n  >>> pow(5, 7, 2)\n  125000\n  */\nconst pow10 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3, 5)\n  32\n  >>> pow(5, 7, 2)\n  125000\n  */\nconst pow11 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3, 5)\n  32\n  >>> pow(5, 7, 2)\n  125000\n  */\nconst pow12 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3, 5)\n  32\n  >>> pow(5, 7, 2)\n  125000\n  */\nconst pow13 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3, 5)\n  32\n  >>> pow(5, 7, 2)\n  125000\n  */\nconst pow14 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3, 5)\n  32\n  >>> pow(5, 7, 2)\n  125000\n  */\nconst pow15 = (x, y, n) => {\n  return Math.pow(x, y, n);\n};\n\n/*\n  * Raise two numbers x and y to the power of n\n  >>> pow(2, 3, 5)\n  32\n  >>> pow(5, 7, 2)\n  125000\n  */\nconst pow16"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars3 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars4 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars5 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars6 = (s0, s1) => {\n  const s0Len = s0.length\n  const s1Len = s1.length\n  if (s0Len!== s1Len) return false\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const open = brackets.slice(0, -1)\n  const close = brackets.slice(1)\n  const openCount = open.reduce((acc, curr) => acc + (curr === '<'? 1 : 0), 0)\n  const closeCount = close.reduce((acc, curr) => acc + (curr === '>'? 1 : 0), 0)\n  return openCount === closeCount\n}\n\n/*\n  Given a string, return a string with all the brackets\n  replaced with their corresponding character.\n\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<\")\n  '<'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets"}
{"task_id": "JavaScript/57", "prompt": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if the list is a palindrome.\n  >>> palindrome([1, 2, 3, 4, 5, 6, 7, 8])\n  true\n  >>> palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  >>> palindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  true\n  */\nconst palindrome = (l) => {\n  const reversed = l.slice().reverse();\n  return l.every((x, i) => reversed[i] === x);\n};\n\n/*Return true if the list is a permutation of the set {1, 2, 3,..., n}.\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  true\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  true\n  */\nconst permutation = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if the list is a permutation of the set {1, 2, 3,..., n}.\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  true\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  true\n  */\nconst permutation = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if the list is a permutation of the set {1, 2, 3,..., n}.\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  true\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  true\n  */\nconst permutation = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if the list is a permutation of the set {1, 2, 3,..., n}.\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  true\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  true\n  */\nconst permutation = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if the list is a permutation of the set {1, 2, 3,..., n}.\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  true\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  true\n  */\nconst permutation = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if the list is a permutation of the set {1, 2, 3,..., n}.\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  true\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  true\n  */\nconst permutation = (l) => {\n  const sorted = l.slice().sort();\n  return l.every((x, i) => sorted[i] === x);\n};\n\n/*Return true if the list is a permutation of the set {1, 2, 3,..., n}.\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  true\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const intersection = set1.intersection(set2);\n  const union = set1.union(set2);\n  return intersection.size === union.size? intersection : [];\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor8 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor9 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor10 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor11 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor12 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor13 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor14"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)"}
{"task_id": "JavaScript/61", "prompt": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      stack.push(brackets[i])\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop()\n      }\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, return the number of opening brackets in the string.\n\n  >>> countBrackets(\"(())\")\n  2\n  >>> countBrackets(\"(\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"()\")\n  1\n  >>> countBrackets(\"(()())\")\n  3\n  >>> countBrackets(\"(()()\")\n  2\n  >>> countBrackets(\"(()()())\")\n  4\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>> countBrackets(\"(()()())\")\n  3\n  >>>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = [1];\n  for (let i = 0; i < xs.length - 1; i++) {\n    d.push(xs[i] * d[i]);\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  Return an array of roots.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  >>> derivative([1, 2, 3, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3, 4, 5, 6])\n  [1, 4, 12, 20, 30]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7])\n  [1, 4, 12, 20, 30, 42]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 4, 12, 20, 30, 42, 56]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 4, 12, 20, 30, 42, 56, 74]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 110]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 110, 132]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 110, 132, 156]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 110, 132, 156, 182]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 110, 132, 156, 182, 224]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 110, 132, 156, 182, 224, 288]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 110, 132, 156, 182, 224, 288, 360]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 110, 132, 156, 182, 224, 288, 360, 468]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 110, 132, 156, 182, 224, 288, 360, 468, 576]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 110, 132, 156, 182, 224, 288, 360, 468, 576, 712]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 110, 132, 156, 182, 224, 288, 360, 468, 576, 712, 864]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 110, 132, 156, 182, 224, 288, 360, 468, 576, 712, 864, 1032]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 110, 132, 156, 182, 224, 288, 360, 468, 576, 712, 864, 1032, 1296]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 4, 12, 20, 30, 42, 56, 74, 90, 110, 132, 156, 182, 224, 288, 360, 468, 576, 712, 864, 1032, 1296, 1512]\n  >>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [1, 4, 12, 20, 30, 42,"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\n/*\n  The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n  fibfib(0)== 0 \n  fibfib(1)== 0 \n  fibfib(2)== 1 \n  fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n  Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib2 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib2(n - 1) + fibfib2(n - 2) + fibfib2(n - 3)\n}\n\nconst fibfib3 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib3(n - 1) + fibfib3(n - 2) + fibfib3(n - 3)\n}\n\nconst fibfib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib4(n - 1) + fibfib4(n - 2) + fibfib4(n - 3)\n}\n\nconst fibfib5 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib5(n - 1) + fibfib5(n - 2) + fibfib5(n - 3)\n}\n\nconst fibfib6 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib6(n - 1) + fibfib6(n - 2) + fibfib6(n - 3)\n}\n\nconst fibfib7 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib7(n - 1) + fibfib7(n - 2) + fibfib7(n - 3)\n}\n\nconst fibfib8 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib8(n - 1) + fibfib8(n - 2) + fibfib8(n - 3)\n}\n\nconst fibfib9 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib9(n - 1) + fibfib9(n - 2) + fibfib9(n - 3)\n}\n\nconst fibfib10 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib10(n - 1) + fibfib10(n - 2) + fibfib10(n - 3)\n}\n\nconst fibfib11 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib11(n - 1) + fibfib11(n - 2) + fibfib11(n - 3)\n}\n\nconst fibfib12 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib12(n - 1) + fibfib12(n - 2) + fibfib12(n - 3)\n}\n\nconst fibfib13 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib13(n - 1) + fibfib13(n - 2) + fibfib13(n - 3)\n}\n\nconst fibfib14 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib14(n - 1) + fibfib14(n - 2) + fibfib14(n - 3)\n}\n\nconst fibfib15 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib15(n - 1) + fibfib15(n - 2) + fibfib15(n - 3)\n}\n\nconst fibfib16 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib16(n - 1) + fibfib16(n - 2) + fibfib"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\n/*Write a function to count the number of vowels in a given string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u'and 'y '. \n   The vowels count should not include the 'y'at the end of the string. \n\n   Example:\n  >>> countVowels(\"abcde\")\n  2\n  >>> countVowels(\"ACEDY\")\n  3\n  */\nconst countVowels = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\n/*Write a function to count the number of consonants in a given string. \n   Consonants in this case was 'b ', 'c ', 'd ', 'f ', 'g ', 'h ', 'j ', 'k ', \n   'l ','m ', 'n ', 'p ', 'q ', 'r ','s ', 't ', 'v ', 'w ', 'x ', 'y ', \n   'z '. \n\n   Example:\n  >>> countConsonants(\"abcde\")\n  2\n  >>> countConsonants(\"ACEDY\")\n  1\n  */\nconst countConsonants = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count++\n    }\n  }\n  return count\n}\n\n/*Write a function to count the number of consonants in a given string. \n   Consonants in this case was 'b ', 'c ', 'd ', 'f ', 'g ', 'h ', 'j ', 'k ', \n   'l ','m ', 'n ', 'p ', 'q ', 'r ','s ', 't ', 'v ', 'w ', 'x ', 'y ', \n   'z '. \n\n   Example:\n  >>> countConsonants(\"abcde\")\n  2\n  >>> countConsonants(\"ACEDY\")\n  1\n  */\nconst countConsonants2 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count++\n    }\n  }\n  return count\n}\n\n/*Write a function to count the number of consonants in a given string. \n   Consonants in this case was 'b ', 'c ', 'd ', 'f ', 'g ', 'h ', 'j ', 'k ', \n   'l ','m ', 'n ', 'p ', 'q ', 'r ','s ', 't ', 'v ', 'w ', 'x ', 'y ', \n   'z '. \n\n   Example:\n  >>> countConsonants(\"abcde\")\n  2\n  >>> countConsonants(\"ACEDY\")\n  1\n  */\nconst countConsonants3 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i]"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  const shift = shift % len\n  for (let i = 0; i < shift; i++) {\n    result.unshift(x.pop())\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  >>> reverse('abcdefg')\n  'gfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  */\nconst reverse = (str) => {\n  const len = str.length\n  const result = []\n  for (let i = len - 1; i >= 0; i--) {\n    result.push(str[i])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  >>> reverse('abcdefg')\n  'gfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  */\nconst reverseString = (str) => {\n  const len = str.length\n  const result = []\n  for (let i = len - 1; i >= 0; i--) {\n    result.push(str[i])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  >>> reverse('abcdefg')\n  'gfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  */\nconst reverseString2 = (str) => {\n  const len = str.length\n  const result = []\n  for (let i = len - 1; i >= 0; i--) {\n    result.push(str[i])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  >>> reverse('abcdefg')\n  'gfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  */\nconst reverseString3 = (str) => {\n  const len = str.length\n  const result = []\n  for (let i = len - 1; i >= 0; i--) {\n    result.push(str[i])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  >>> reverse('abcdefg')\n  'gfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  */\nconst reverseString4 = (str) => {\n  const len = str.length\n  const result = []\n  for (let i = len - 1; i >= 0; i--) {\n    result.push(str[i])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  >>> reverse('abcdefg')\n  'gfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  */\nconst reverseString5 = (str) => {\n  const len = str.length\n  const result = []\n  for (let i = len - 1; i >= 0; i--) {\n    result.push(str[i])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  >>> reverse('abcdefg')\n  'gfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  */\nconst reverseString6 = (str) => {\n  const len = str.length\n  const result = []\n  for (let i = len - 1; i >= 0; i--) {\n    result.push(str[i])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  >>> reverse('abcdefg')\n  'gfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zy"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that takes a string as input and returns the sum of the lower characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 0\n      digitSum(\"helloE\") => 0\n      digitSum(\"woArBld\") => 0\n      digitSum(\"aAaaaXa\") => 0\n  */\nconst lowerDigitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that takes a string as input and returns the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumAndLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that takes a string as input and returns the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumAndUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that takes a string as input and returns the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumAndLowerAndUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that takes a string as input and returns the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumAndUpperAndLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that takes a string as input and returns the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumAndUpperAndLowerAndUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that takes a string as input and returns the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumAndUpperAndLowerAndUpperAndLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that takes a string as input and returns the sum of the upper and lower characters '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumAndUpperAndLowerAndUpperAndLowerAndLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that takes a string as input"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let count = 0;\n   let countApples = 0;\n   let countOranges = 0;\n   let countMangoes = 0;\n   let total = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let a = 0;\n   let b = 0;\n   let c = 0;\n   let d = 0;\n   let e = 0;\n   let f = 0;\n   let g = 0;\n   let h = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let a = 0;\n   let b = 0;\n   let c = 0;\n   let d = 0;\n   let e = 0;\n   let f = 0;\n   let g = 0;\n   let h = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let a = 0;\n   let b = 0;\n   let c = 0;\n   let d = 0;\n   let e = 0;\n   let f = 0;\n   let g = 0;\n   let h = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let a = 0;\n   let b = 0;\n   let c = 0;\n   let d = 0;\n   let e = 0;\n   let f = 0;\n   let g = 0;\n   let h = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let a = 0;\n   let b = 0;\n   let c = 0;\n   let d = 0;\n   let e = 0;\n   let f = 0;\n   let g = 0;\n   let h = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let a = 0;\n   let b = 0;\n   let c = 0;\n   let d = 0;\n   let e = 0;\n   let f = 0;\n   let g = 0;\n   let h = 0;\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let a = 0;\n   let b = 0;\n   let c = 0;\n   let d = 0;\n   let e = 0;\n   let f = 0;\n   let g = 0;\n   let h = 0;\n   let i = 0;\n   let j ="}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (min === undefined) {\n        min = arr[i];\n        minIndex = i;\n      } else if (min > arr[i]) {\n        min = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  return [min, minIndex];\n};\n\nconst arr = [4, 2, 3, 0, 4, 2];\nconsole.log(pluck(arr));\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  if (len === 0) return []\n  const min = lst[0]\n  const max = lst[len - 1]\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    sorted.push(lst[i])\n  }\n  for (let i = 0; i < len; i++) {\n    sorted.push(lst[i])\n  }\n  return sorted\n}\n\nexport default strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly2 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly3 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly4 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly5 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly6 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly7 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly8 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly9 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly10 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly11 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly12 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly13 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly14 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly15 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly16 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly17 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly18 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly19 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly20 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum < w && sum % 2 === 0;\n};\n\nconst willItFly21 ="}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let i = 0, j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      let k = i + 1;\n      while (k < j && arr[k]!== arr[i]) {\n        k++;\n      }\n      j = k - 1;\n    }\n    i++;\n  }\n  return j;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return lst1;\n  }\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  const lst1Lst = lst1.slice();\n  const lst2Lst = lst2.slice();\n  let i = 0;\n  let j = 0;\n  let match = 0;\n  while (i < lst1Len && j < lst2Len) {\n    if (lst1Lst[i] === lst2Lst[j]) {\n      match++;\n      i++;\n      j++;\n    } else if (lst1Lst[i] < lst2Lst[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (match === lst1Len) {\n    return lst1;\n  }\n  return lst1Lst.slice(i);\n};\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const isPrime = (n) => {\n    return prime.indexOf(n)!== -1;\n  };\n  const isMultiple = (n) => {\n    return n % 3 === 0 || n % 5 === 0;\n  };\n  const isMultiply = (n) => {\n    return isPrime(n) && isMultiple(n);\n  };\n  return isMultiply(a);\n};\n\nconsole.log(isMultiplyPrime(30));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n}\n\n/*\n  Write a function that takes a number n and returns the largest number that is a simple power of n.\n  For example:\n  largestSimplePower(4) => 16\n  largestSimplePower(8) => 256\n  largestSimplePower(10) => 3628800\n  largestSimplePower(15) => 3628800\n  largestSimplePower(16) => 3628800\n  largestSimplePower(17) => 3628800\n  largestSimplePower(20) => 3628800\n  largestSimplePower(25) => 3628800\n  largestSimplePower(30) => 3628800\n  largestSimplePower(35) => 3628800\n  largestSimplePower(36) => 3628800\n  largestSimplePower(40) => 3628800\n  largestSimplePower(45) => 3628800\n  largestSimplePower(50) => 3628800\n  largestSimplePower(55) => 3628800\n  largestSimplePower(60) => 3628800\n  largestSimplePower(65) => 3628800\n  largestSimplePower(70) => 3628800\n  largestSimplePower(75) => 3628800\n  largestSimplePower(80) => 3628800\n  largestSimplePower(85) => 3628800\n  largestSimplePower(90) => 3628800\n  largestSimplePower(95) => 3628800\n  largestSimplePower(100) => 3628800\n  largestSimplePower(105) => 3628800\n  largestSimplePower(110) => 3628800\n  largestSimplePower(115) => 3628800\n  largestSimplePower(120) => 3628800\n  largestSimplePower(125) => 3628800\n  largestSimplePower(130) => 3628800\n  largestSimplePower(135) => 3628800\n  largestSimplePower(140) => 3628800\n  largestSimplePower(145) => 3628800\n  largestSimplePower(150) => 3628800\n  largestSimplePower(155) => 3628800\n  largestSimplePower(160) => 3628800\n  largestSimplePower(165) => 3628800\n  largestSimplePower(170) => 3628800\n  largestSimplePower(175) => 3628800\n  largestSimplePower(180) => 3628800\n  largestSimplePower(185) => 3628800\n  largestSimplePower(190) => 3628800\n  largestSimplePower(195) => 3628800\n  largestSimplePower(200) => 3628800\n  largestSimplePower(205) => 3628800\n  largestSimplePower(210) => 3628800\n  largestSimplePower(215) => 3628800\n  largestSimplePower(220) => 3628800\n  largestSimplePower(225) => 3628800\n  largestSimplePower(230) => 3628800\n  largestSimplePower(235) => 3628800\n  largestSimplePower(240) => 3628800\n  largestSimplePower(245) => 3628800\n  largestSimplePower(250) => 3628800\n  largestSimplePower(255) => 3628800\n  largestSimplePower(260) => 3628800\n  largestSimplePower(265) => 3628800\n  largestSimplePower(270) => 3628800\n  largestSimplePower(275) => 3628800\n  largestSimplePower(280) => 3628800\n  largestSimplePower(285) => 3628800\n  largestSimplePower(290) => 3628800\n  largestSimplePower(295) => 3628800\n  largestSimplePower(300) => 3628800\n  largestSimplePower(305) => 3628800\n  largestSimplePower(310) => 3628800\n  largestSimplePower(315) => 3628800\n  largestSimplePower(320) => 3628800\n  largestSimplePower(325) => 3628800\n  largestSimplePower(330) => 3628800\n  largestSimplePower(335) => 3628800\n  largestSimplePower(340) => 3628800\n  largestSimplePower(345) => 3628800\n  largestSimplePower(350) => 3628800\n  largestSimplePower(355) => 3628800\n  largestSimplePower(360) => 3628800\n  largestSimplePower(365) => 3628800\n  largestSimplePower(370) => 3628800\n  largestSimplePower(375) => 3628800\n  largestSimplePower(380) => 3628800\n  largestSimplePower(385) => 3628800\n  largestSimplePower(390) => 3628800\n  largestSimplePower(395) => 3628800\n  largestSimplePower(400) => 3628800\n  largestSimplePower(405) => 3628800\n  largestSimplePower(410) => 3628800\n  largestSimplePower(415) => 3628800\n  largestSimplePower(420) => 3628800\n  largestSimplePower(425) => 3628800\n  largestSimplePower(430) => 3628800\n  largestSimplePower(435) => 3628800\n  largestSimplePower(440) => 3628800\n  largestSimplePower(445) => 3628800\n  largestSimplePower(450) => 3628800\n  largestSimplePower(455) => 3628800\n  largestSimplePower(460) => 3628800\n  largestSimplePower(465) => 3628800\n  largestSimplePower(470) => 3628800\n  largestSimplePower(475) => 3628800\n  largestSimplePower(480) => 3628800\n  largestSimplePower(485) => 3628800\n  largestSimplePower(490) => 3628800\n  largestSimplePower(495) => 3628800\n  largestSimplePower(500) => 3628800\n  largestSimplePower(505) => 3628800\n  largestSimplePower(510) => 3628800\n  largestSimplePower(515) => 3628800\n  largestSimplePower(520) => 3628800\n  largestSimplePower(525) => 3628800\n  largestSimplePower(530) => 3628800\n  largestSimplePower(535)"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140) return true\n  if (a ==="}
{"task_id": "JavaScript/78", "prompt": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const num = num.toUpperCase();\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === 'A' || num[i] === 'B' || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime2 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime3 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime4 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime5 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime6 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime7 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime8 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime9 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime10 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime11 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime12 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime13 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime14 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime15 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime16 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime17 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime18 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime19 = (num) => {\n  let i ="}
{"task_id": "JavaScript/79", "prompt": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryDigits = decimal.toString(2);\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    binary += binaryDigits.charAt(i);\n  }\n  return binary;\n};\n\n/*\n  You were given a string, and your task was to convert it to a number. The string may contain \n  any number of digits.\n\n  Examples:\n  convertToNumber(\"abc\")   # returns \"abc\"\n  convertToNumber(\"12\")    # returns 12\n  convertToNumber(\"123\")   # returns 123\n  convertToNumber(\"1234\")  # returns 1234\n  convertToNumber(\"1234a\") # returns 1234a\n  convertToNumber(\"a1234\") # returns a1234\n  convertToNumber(\"a\")     # returns a\n  convertToNumber(\"\")      # returns \"\"\n  convertToNumber(\"a1\")    # returns a1\n  convertToNumber(\"1a\")    # returns 1a\n  convertToNumber(\"1a1\")   # returns 1a1\n  convertToNumber(\"1a1b\")  # returns 1a1b\n  convertToNumber(\"1a1b2\") # returns 1a1b2\n  convertToNumber(\"1a1b2c\")# returns 1a1b2c\n  convertToNumber(\"1a1b2c3\")# returns 1a1b2c3\n  convertToNumber(\"1a1b2c3d\")# returns 1a1b2c3d\n  convertToNumber(\"1a1b2c3d4\")# returns 1a1b2c3d4\n  convertToNumber(\"1a1b2c3d4e\")# returns 1a1b2c3d4e\n  convertToNumber(\"1a1b2c3d4e5\")# returns 1a1b2c3d4e5\n  convertToNumber(\"1a1b2c3d4e5f\")# returns 1a1b2c3d4e5f\n  convertToNumber(\"1a1b2c3d4e5f0\")# returns 1a1b2c3d4e5f0\n  convertToNumber(\"1a1b2c3d4e5f0a\")# returns 1a1b2c3d4e5f0a\n  convertToNumber(\"1a1b2c3d4e5f0a1\")# returns 1a1b2c3d4e5f0a1\n  convertToNumber(\"1a1b2c3d4e5f0a1b\")# returns 1a1b2c3d4e5f0a1b\n  convertToNumber(\"1a1b2c3d4e5f0a1b2\")# returns 1a1b2c3d4e5f0a1b2\n  convertToNumber(\"1a1b2c3d4e5f0a1b2c\")# returns 1a1b2c3d4e5f0a1b2c\n  convertToNumber(\"1a1b2c3d4e5f0a1b2c3\")# returns 1a1b2c3d4e5f0a1b2c3\n  convertToNumber(\"1a1b2c3d4e5f0a1b2c3d\")# returns 1a1b2c3d4e5f0a1b2c3d\n  convertToNumber(\"1a1b2c3d4e5f0a1b2c3d4\")# returns 1a1b2c3d4e5f0a1b2c3d4\n  convertToNumber(\"1a1b2c3d4e5f0a1b2c3d4e\")# returns 1a1b2c3d4e5f0a1b2c3d4e\n  convertToNumber(\"1a1b2c3d4e5f0a1b2c3d4e5\")# returns 1a1b2c3d4e5f0a1b2c3d4e5\n  convertToNumber(\"1a1b2c3d4e5f0a1b2c3d4e5f\")# returns 1a1b2c3d4e5f0a1b2c3d4e5f\n  convertToNumber(\"1a1b2c3d4e5f0a1b2c3d4e5f0\")# returns 1a1b2c3d4e5f0a1b2c3d4e5f0\n  convertToNumber(\"1a1b2c3d4e5f0a1b2c3d4e5f0a\")# returns 1a1b2c3d4e5f0a1b2c3d4e5f0a\n  convertToNumber(\"1a1b2c3d4e5f0a1b2c3d4e5f0a1\")# returns 1a1b2c3d4e5f0a1b2c3d4e5f0a1\n  convertToNumber(\"1a1b2c3d4e5f0a1b2c3d4e5f0a1b\")# returns 1a1b2c3d4e5f0a1b2c3d4e5f0a1b\n  convertToNumber(\"1a1b2c3d4e5f0a1b2c3d4e5f0a1b2\")# returns 1a1b2c3d4e5f0a1b2c3d4e5f0a"}
{"task_id": "JavaScript/80", "prompt": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length\n  let count = 0\n  let prev = 0\n  let result = 0\n  let i = 0\n  while (i < len) {\n    result = 0\n    while (i < len && count < 3) {\n      result += (s[i] - '0') * (s[i] - '0')\n      count++\n      i++\n    }\n    if (result < 0) {\n      return false\n    }\n    if (result === 0) {\n      return true\n    }\n    prev = result\n    i++\n  }\n  return result === prev\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  const gradesArray = grades.slice(0);\n  const gradesArrayLength = gradesArray.length;\n  let letterGradeIndex = 0;\n  let letterGradeIndexMax = gradesArrayLength - 1;\n  let letterGradeIndexMin = 0;\n  let letterGradeIndexMinMax = gradesArrayLength - 1;\n  let letterGradeIndexMinMaxMin = gradesArrayLength - 1;\n  let letterGradeIndexMinMaxMinMax = gradesArrayLength - 1;\n  let letterGradeIndexMinMaxMinMaxMax = gradesArrayLength - 1;\n  let letterGradeIndexMinMaxMinMaxMaxMax = gradesArrayLength - 1;\n  let letterGradeIndexMinMaxMinMaxMaxMaxMax = gradesArrayLength - 1;\n  let letterGradeIndexMinMaxMinMaxMaxMaxMaxMax = gradesArrayLength - 1;\n  let letterGradeIndexMinMaxMinMaxMaxMaxMaxMaxMax = gradesArrayLength - 1;\n  let letterGradeIndexMinMaxMinMaxMaxMaxMaxMaxMaxMax = gradesArrayLength - 1;\n  let letterGradeIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayLength - 1;\n  let letterGradeIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayLength - 1;\n  let letterGradeIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayLength - 1;\n  let letterGradeIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayLength - 1;\n  let letterGradeIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = gradesArrayLength - 1;\n  let letterGradeIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return number > 1 && prime.test(number);\n  };\n  const length = string.length;\n  const primeNumbers = [];\n  for (let i = 2; i < length; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers.length === length;\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n  const starts = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += starts(i);\n    }\n    return count;\n  }\n  const ends = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += ends(i);\n    }\n    return count;\n  }\n  return starts(n) + ends(n);\n}\n\nconst startsOneEnds = (n)=>{\n  const starts = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += starts(i);\n    }\n    return count;\n  }\n  const ends = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += ends(i);\n    }\n    return count;\n  }\n  return starts(n) + ends(n);\n}\n\nconst startsOneEnds = (n)=>{\n  const starts = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += starts(i);\n    }\n    return count;\n  }\n  const ends = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += ends(i);\n    }\n    return count;\n  }\n  return starts(n) + ends(n);\n}\n\nconst startsOneEnds = (n)=>{\n  const starts = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += starts(i);\n    }\n    return count;\n  }\n  const ends = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += ends(i);\n    }\n    return count;\n  }\n  return starts(n) + ends(n);\n}\n\nconst startsOneEnds = (n)=>{\n  const starts = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += starts(i);\n    }\n    return count;\n  }\n  const ends = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += ends(i);\n    }\n    return count;\n  }\n  return starts(n) + ends(n);\n}\n\nconst startsOneEnds = (n)=>{\n  const starts = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += starts(i);\n    }\n    return count;\n  }\n  const ends = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += ends(i);\n    }\n    return count;\n  }\n  return starts(n) + ends(n);\n}\n\nconst startsOneEnds = (n)=>{\n  const starts = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += starts(i);\n    }\n    return count;\n  }\n  const ends = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += ends(i);\n    }\n    return count;\n  }\n  return starts(n) + ends(n);\n}\n\nconst startsOneEnds = (n)=>{\n  const starts = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += starts(i);\n    }\n    return count;\n  }\n  const ends = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += ends(i);\n    }\n    return count;\n  }\n  return starts(n) + ends(n);\n}\n\nconst startsOneEnds = (n)=>{\n  const starts = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += starts(i);\n    }\n    return count;\n  }\n  const ends = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += ends(i);\n    }\n    return count;\n  }\n  return starts(n) + ends(n);\n}\n\nconst startsOneEnds = (n)=>{\n  const starts = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += starts(i);\n    }\n    return count;\n  }\n  const ends = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += ends(i);\n    }\n    return count;\n  }\n  return starts(n) + ends(n);\n}\n\nconst startsOneEnds = (n)=>{\n  const starts = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += starts(i);\n    }\n    return count;\n  }\n  const ends = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += ends(i);\n    }\n    return count;\n  }\n  return starts(n) + ends(n);\n}\n\nconst startsOneEnds = (n)=>{\n  const starts = (n)=>{\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += starts(i);\n    }\n    return count"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const newWord = '';\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j];\n      const ascii = char.charCodeAt(0);\n      const nextChar = word[j + 1];\n      const nextAscii = nextChar.charCodeAt(0);\n      if (ascii > nextAscii) {\n        newWord += char;\n      } else {\n        newWord += nextChar;\n      }\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(' ');\n};\n\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const row = x\n  const col = x\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (lst[i][j] === x) {\n        result.push((row, col))\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const row = x\n  const col = x\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (lst[i][j] === x) {\n        result.push((row, col))\n      }\n    }\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const row = x\n  const col = x\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (lst[i][j] === x) {\n        result.push((row, col))\n      }\n    }\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const row = x\n  const col = x\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (lst[i][j] === x) {\n        result.push((row, col))\n      }\n    }\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const row = x\n  const col = x\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (lst[i][j] === x) {\n        result.push((row, col))\n      }\n    }\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const row = x\n  const col = x\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (lst[i][j] === x) {\n        result.push((row, col))\n      }\n    }\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const row = x\n  const col = x\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (lst[i][j] === x) {\n        result.push((row, col))\n      }\n    }\n  }\n  return result\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const row = x\n  const col = x\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (lst[i][j] === x) {\n        result.push((row, col))\n      }\n    }\n  }\n  return result\n}\n\nconst getRow = (lst,"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length;\n  const sorted = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += array[i];\n    sorted.push(array[i]);\n  }\n  if (sum % 2 === 1) {\n    sorted.sort((a, b) => a - b);\n  } else {\n    sorted.sort((a, b) => b - a);\n  }\n  return sorted;\n};\n\nconsole.log(sortArray([5, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotator = (x) => {\n    let rot = x % 26;\n    if (rot < 0) {\n      rot = 26 + rot;\n    }\n    return rot;\n  };\n  let rot = rotator(alphabet.indexOf(s[0]));\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    result += alphabet[rotator(alphabet.indexOf(s[i]))];\n  }\n  return result;\n};\n\nconsole.log(encrypt('hi'));\nconsole.log(encrypt('asdfghjkl'));\nconsole.log(encrypt('gf'));\nconsole.log(encrypt('et'));\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n   if(lst.length===0) return null;\n   let min = lst[0];\n   for(let i=1; i<lst.length; i++){\n     if(lst[i]<min) min = lst[i];\n   }\n   return min;\n }\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z && x === z + y && x === y - z && x === z - y && x === y * z && x === z * y && x === y / z && x === z / y && x === y % z && x === z % y;\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt2 = (x, y, z) => {\n  return x === y + z && x === z + y && x === y - z && x === z - y && x === y * z && x === z * y && x === y / z && x === z / y && x === y % z && x === z % y;\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  return x === y + z && x === z + y && x === y - z && x === z - y && x === y * z && x === z * y && x === y / z && x === z / y && x === y % z && x === z % y;\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  return x === y + z && x === z + y && x === y - z && x === z - y && x === y * z && x === z * y && x === y / z && x === z / y && x === y % z && x === z % y;\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  return x === y + z && x === z + y && x === y - z && x === z - y && x === y * z && x === z * y && x === y / z && x === z / y && x === y % z && x === z % y;\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  return x === y + z && x === z + y && x === y - z && x === z - y && x === y * z && x === z * y && x === y / z && x === z / y && x === y % z && x === z % y;\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt7 = (x, y, z) => {\n  return x === y + z && x === z + y && x === y - z && x === z - y && x === y * z && x === z * y && x === y / z && x === z / y && x === y % z && x === z % y;\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt8 = (x, y, z) => {\n  return x === y + z && x === z"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const vowels = 'AEIOU';\n  const consonants = 'BCDFGHJKLMNPQRSTVWXYZ';\n  const vowelsCount = vowels.length;\n  const consonantsCount = consonants.length;\n  const messageLength = message.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  while (i < messageLength) {\n    if (message[i] === vowels[j]) {\n      result.push(vowels[k]);\n      j++;\n      k++;\n      if (j === vowelsCount) {\n        j = 0;\n        k = 0;\n      }\n    } else if (message[i] === consonants[l]) {\n      result.push(consonants[m]);\n      l++;\n      m++;\n      if (l === consonantsCount) {\n        l = 0;\n        m = 0;\n      }\n    } else if (message[i] === vowels[j]) {\n      result.push(vowels[k]);\n      j++;\n      k++;\n      if (j === vowelsCount) {\n        j = 0;\n        k = 0;\n      }\n    } else if (message[i] === consonants[l]) {\n      result.push(consonants[m]);\n      l++;\n      m++;\n      if (l === consonantsCount) {\n        l = 0;\n        m = 0;\n      }\n    } else if (message[i] === vowels[j]) {\n      result.push(vowels[k]);\n      j++;\n      k++;\n      if (j === vowelsCount) {\n        j = 0;\n        k = 0;\n      }\n    } else if (message[i] === consonants[l]) {\n      result.push(consonants[m]);\n      l++;\n      m++;\n      if (l === consonantsCount) {\n        l = 0;\n        m = 0;\n      }\n    } else if (message[i] === vowels[j]) {\n      result.push(vowels[k]);\n      j++;\n      k++;\n      if (j === vowelsCount) {\n        j = 0;\n        k = 0;\n      }\n    } else if (message[i] === consonants[l]) {\n      result.push(consonants[m]);\n      l++;\n      m++;\n      if (l === consonantsCount) {\n        l = 0;\n        m = 0;\n      }\n    } else if (message[i] === vowels[j]) {\n      result.push(vowels[k]);\n      j++;\n      k++;\n      if (j === vowelsCount) {\n        j = 0;\n        k = 0;\n      }\n    } else if (message[i] === consonants[l]) {\n      result.push(consonants[m]);\n      l++;\n      m++;\n      if (l === consonantsCount) {\n        l = 0;\n        m = 0;\n      }\n    } else if (message[i] === vowels[j]) {\n      result.push(vowels[k]);\n      j++;\n      k++;\n      if (j === vowelsCount) {\n        j = 0;\n        k = 0;\n      }\n    } else if (message[i] === consonants[l]) {\n      result.push(consonants[m]);\n      l++;\n      m++;\n      if (l === consonantsCount) {\n        l = 0;\n        m = 0;\n      }\n    } else if (message[i] === vowels[j]) {\n      result.push(vowels[k]);\n      j++;\n      k++;\n      if (j === vowelsCount) {\n        j = 0;\n        k = 0;\n      }\n    } else if (message[i] === consonants[l]) {\n      result.push(consonants[m]);\n      l++;\n      m++;\n      if (l === consonantsCount) {\n        l = 0;\n        m = 0;\n      }\n    } else if (message[i] === vowels[j]) {\n      result.push(vowels[k]);\n      j++;\n      k++;\n      if (j === vowelsCount) {\n        j = 0;\n        k = 0;\n      }\n    } else if (message[i] === consonants[l]) {\n      result.push(consonants[m]);\n      l++;\n      m++;\n      if (l === consonantsCount) {\n        l = 0;\n        m = 0;\n      }\n    } else if (message[i] === vowels[j]) {\n      result.push(vowels[k]);\n      j++;\n      k++;\n      if (j === vowelsCount) {\n        j = 0;\n        k = 0;\n      }\n    } else if (message[i] === consonants[l]) {\n      result.push(consonants[m]);\n      l++;\n      m++;\n      if (l === consonantsCount) {\n        l = 0;\n        m = 0;\n      }\n    } else if (message[i] === vowels[j]) {\n      result.push(vowels[k]);\n      j++;\n      k++;\n      if (j === vowelsCount) {\n        j"}
{"task_id": "JavaScript/94", "prompt": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const max = Math.max(...lst);\n  const max_digits = max.toString(10).length;\n  const max_digits_sum = max.toString(10).split('').reduce((a, b) => a + b, 0);\n  return max_digits_sum;\n};\n\nconst test = (lst) => {\n  console.log(skjkasdkd(lst));\n};\n\ntest([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]);\ntest([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([0,724,32,71,99,32,6,0,5,91,83,0,5,6]);\ntest([0,81,12,3,1,21]);\ntest([0,8,1,2,1,7]);\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) return false\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') return false\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase2 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) return false\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') return false\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase3 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) return false\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') return false\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase4 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) return false\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') return false\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase5 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) return false\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') return false\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\""}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n === 3) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  if (n % 3 === 0) {\n    return false\n  }\n  let i = 5\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 6\n  }\n  return true\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  const b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  const product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply_2 = (a, b) => {\n  const a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  const b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  const product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply_3 = (a, b) => {\n  const a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  const b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  const product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply_4 = (a, b) => {\n  const a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  const b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  const product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply_5 = (a, b) => {\n  const a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  const b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  const product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply_6 = (a, b) => {\n  const a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  const b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  const product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply_7 = (a, b) => {\n  const a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  const b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  const product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply_8 = (a, b) => {\n  const a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  const b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  const product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply_9 = (a, b) => {\n  const a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  const b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  const product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply_10 = (a, b) => {\n  const a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  const b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  const product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply_11 = (a, b) => {\n  const a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  const b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  const product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply_12 = (a, b) => {\n  const a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  const b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  const product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply_13 = (a, b) => {\n  const a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  const b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  const product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply_14 = (a, b) => {\n  const a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  const b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  const product = a_digit.reduce((acc, a, i) => acc * b_digit"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indiced.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indiced.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indiced.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indiced.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indiced.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indiced.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indiced.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indiced.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indiced.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value);\n  const closest = Math.abs(Math.floor(number) - number);\n  return Math.abs(Math.floor(number) + closest);\n};\n\n/* Create a function that takes a number and returns the closest \n   integer to it. If the number was equidistant from two integers, \n   rounded it away from zero. \n   Examples\n  >>> closestInteger(10)\n  10\n  >>> closestInteger(15.3)\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger2 = (value) => {\n  const number = parseInt(value);\n  const closest = Math.abs(Math.floor(number) - number);\n  return Math.abs(Math.floor(number) + closest);\n};\n\n/* Create a function that takes a number and returns the closest \n   integer to it. If the number was equidistant from two integers, \n   rounded it away from zero. \n   Examples\n  >>> closestInteger(10)\n  10\n  >>> closestInteger(15.3)\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger3 = (value) => {\n  const number = parseInt(value);\n  const closest = Math.abs(Math.floor(number) - number);\n  return Math.abs(Math.floor(number) + closest);\n};\n\n/* Create a function that takes a number and returns the closest \n   integer to it. If the number was equidistant from two integers, \n   rounded it away from zero. \n   Examples\n  >>> closestInteger(10)\n  10\n  >>> closestInteger(15.3)\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger4 = (value) => {\n  const number = parseInt(value);\n  const closest = Math.abs(Math.floor(number) - number);\n  return Math.abs(Math.floor(number) + closest);\n};\n\n/* Create a function that takes a number and returns the closest \n   integer to it. If the number was equidistant from two integers, \n   rounded it away from zero. \n   Examples\n  >>> closestInteger(10)\n  10\n  >>> closestInteger(15.3)\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger5 = (value) => {\n  const number = parseInt(value);\n  const closest = Math.abs(Math.floor(number) - number);\n  return Math.abs(Math.floor(number) + closest);\n};\n\n/* Create a function that takes a number and returns the closest \n   integer to it. If the number was equidistant from two integers, \n   rounded it away from zero. \n   Examples\n  >>> closestInteger(10)\n  10\n  >>> closestInteger(15.3)\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger6 = (value) => {\n  const number = parseInt(value);\n  const closest = Math.abs(Math.floor(number) - number);\n  return Math.abs(Math.floor(number) + closest);\n};\n\n/* Create a function that takes a number and returns the closest \n   integer to it. If the number was equidistant from two integers, \n   rounded it away from zero. \n   Examples\n  >>> closestInteger(10)\n  10\n  >>> closestInteger(15.3)\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger7 = (value) => {\n  const number = parseInt(value);\n  const closest = Math.abs(Math.floor(number) - number);\n  return Math.abs(Math.floor(number) + closest);\n};\n\n/* Create a function that takes a number and returns the closest \n   integer to it. If the number was equidistant from two integers, \n   rounded it away from zero. \n   Examples\n  >>> closestInteger(10)\n  10\n  >>> closestInteger(15.3)\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five"}
{"task_id": "JavaScript/102", "prompt": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum(y, x);\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum(x, mid);\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum2(y, x);\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum2(x, mid);\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum3(y, x);\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum3(x, mid);\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum4(y, x);\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum4(x, mid);\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum5(y, x);\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum5(x, mid);\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum6(y, x);\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum6(x, mid);\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum7(y, x);\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum7(x, mid);\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum8(y, x);\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum8(x, mid);\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum9(y, x);\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum9(x, mid);\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum10(y, x);\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum10(x, mid);\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum11(y, x);\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum11(x, mid);\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum12(y, x);\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum12(x, mid);\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum13(y, x);\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum13(x, mid);\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum14(y, x);\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum14(x, mid);\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x === y) {\n    return x;"}
{"task_id": "JavaScript/103", "prompt": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = n + m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n  const n_m_90 = n_m - 90;\n  const n_m_91 = n_m - 91;\n  const n_m_92 = n_m - 92;\n  const"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x; i++) {\n    let num = parseInt(i.toString());\n    if (num % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result.sort();\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.slice().sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  return names.map(name => {\n    const index = reversed.indexOf(sorted.indexOf(name))\n    return index > -1? names[index] : name\n  })\n}\n\nconst byLength2 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.slice().sort((a, b) => b - a)\n  const reversed = sorted.reverse()\n  return names.map(name => {\n    const index = reversed.indexOf(sorted.indexOf(name))\n    return index > -1? names[index] : name\n  })\n}\n\nconst byLength3 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.slice().sort((a, b) => b - a)\n  const reversed = sorted.reverse()\n  return names.map(name => {\n    const index = reversed.indexOf(sorted.indexOf(name))\n    return index > -1? names[index] : name\n  })\n}\n\nconst byLength4 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.slice().sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  return names.map(name => {\n    const index = reversed.indexOf(sorted.indexOf(name))\n    return index > -1? names[index] : name\n  })\n}\n\nconst byLength5 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.slice().sort((a, b) => b - a)\n  const reversed = sorted.reverse()\n  return names.map(name => {\n    const index = reversed.indexOf(sorted.indexOf(name))\n    return index > -1? names[index] : name\n  })\n}\n\nconst byLength6 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.slice().sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  return names.map(name => {\n    const index = reversed.indexOf(sorted.indexOf(name))\n    return index > -1? names[index] : name\n  })\n}\n\nconst byLength7 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.slice().sort((a, b) => b - a)\n  const reversed = sorted.reverse()\n  return names.map(name => {\n    const index = reversed.indexOf(sorted.indexOf(name))\n    return index > -1? names[index] : name\n  })\n}\n\nconst byLength8 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.slice().sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  return names.map(name => {\n    const index = reversed.indexOf(sorted.indexOf(name))\n    return index > -1? names[index] : name\n  })\n}\n\nconst byLength9 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.slice().sort((a, b) => b - a)\n  const reversed = sorted.reverse()\n  return names.map(name => {\n    const index = reversed.indexOf(sorted.indexOf(name))\n    return index > -1? names[index] : name\n  })\n}\n\nconst byLength10 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.slice().sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  return names.map(name => {\n    const index = reversed.indexOf(sorted.indexOf(name))\n    return index > -1? names[index] : name\n  })\n}\n\nconst byLength11 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.slice().sort((a, b) => b - a)\n  const reversed = sorted.reverse()\n  return names.map(name => {\n    const index"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return (n === 0)? 1 : n + sum(n - 1);\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return (n === 0)? 1 : n + sum(n - 1);\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return (n === 0)? 1 : n + sum(n - 1);\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return (n === 0)? 1 : n + sum(n - 1);\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return (n === 0)? 1 : n + sum(n - 1);\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return (n === 0)? 1 : n + sum(n - 1);\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return (n === 0)? 1 : n + sum(n - 1);\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return (n === 0)? 1 : n + sum(n - 1);\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return (n === 0)? 1 : n + sum(n - 1);\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return (n === 0)? 1 : n + sum(n - 1);\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return (n === 0)? 1 : n + sum(n - 1);\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return (n === 0)? 1 : n + sum(n - 1);\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return (n === 0)? 1 : n + sum(n - 1);\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return (n === 0)? 1 : n + sum(n - 1);\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return (n === 0)? 1 : n + sum(n - 1);\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 0)? 1 : n * factorial(n - 1"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    let rev = str.split('').reverse().join('');\n    if (str.length === rev.length) {\n      if (str.length % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    let rev = str.split('').reverse().join('');\n    if (str.length === rev.length) {\n      if (str.length % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    let rev = str.split('').reverse().join('');\n    if (str.length === rev.length) {\n      if (str.length % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    let rev = str.split('').reverse().join('');\n    if (str.length === rev.length) {\n      if (str.length % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    let rev = str.split('').reverse().join('');\n    if (str.length === rev.length) {\n      if (str.length % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    let rev = str.split('').reverse().join('');\n    if (str.length === rev.length) {\n      if (str.length % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    let rev = str.split('').reverse().join('');\n    if (str.length === rev.length) {\n      if (str.length % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    let rev = str.split('').reverse().join('');\n    if (str.length === rev.length) {\n      if (str.length % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    let rev = str.split('').reverse().join('');\n    if (str.length === rev.length) {\n      if (str.length % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    let rev = str.split('').reverse().join('');\n    if (str.length === rev.length) {\n      if (str.length % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = String(i);\n    let rev = str.split('').reverse().join('');\n    if (str.length === rev.length) {\n      "}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-1, 11, -11, 1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x >= 0);\n};\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x >= 0);\n};\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x >= 0);\n};\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x >= 0);\n};\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x >= 0);\n};\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x >= 0);\n};\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x >= 0);\n};\n\nconst moveOneBall8 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x >= 0);\n};\n\nconst moveOneBall9 = (arr) => {\n  if (arr.length === 0) return true;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x >= 0);\n};\n\nconst"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let lst1_even = lst1.filter(x => x % 2 === 0);\n  let lst2_even = lst2.filter(x => x % 2 === 0);\n  if (lst1_even.length === 0 || lst2_even.length === 0) {\n    return false;\n  }\n  let lst1_odd = lst1.filter(x => x % 2!== 0);\n  let lst2_odd = lst2.filter(x => x % 2!== 0);\n  if (lst1_odd.length === 0 || lst2_odd.length === 0) {\n    return false;\n  }\n  return lst1_even.length === lst2_even.length && lst1_odd.length === lst2_odd.length;\n};\n\nexports.exchange = exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\nGiven a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n*/\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\nGiven a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n*/\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\nGiven a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n*/\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\nGiven a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n*/\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\nGiven a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n*/\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\nGiven a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  let i = 0\n  let j = len - 1\n  let flag = false\n  while (i < len) {\n    if (s[i] === c[j]) {\n      flag = true\n      i++\n      j--\n    } else {\n      s[i] = s[i + 1]\n      i++\n    }\n  }\n  return [s, flag]\n}\n\nconst isPalindrome = (s) => {\n  const [s1, flag] = reverseDelete(s, s)\n  return flag && s === s1\n}\n\nconsole.log(isPalindrome(\"abcdef\"))\nconsole.log(isPalindrome(\"acdef\"))\nconsole.log(isPalindrome(\"cdedc\"))\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (str) => {\n    const count = 0;\n    for (let i = 0; i < lst.length; i++) {\n      const num = parseInt(lst[i]);\n      if (num % 2 === 1) {\n        count++;\n      }\n    }\n    return count;\n  };\n  return lst.map(oddCount);\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n    if (sum > 0) {\n      sum -= nums[i];\n    }\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += grid[i][j] === 1? 1 : 0;\n      }\n    }\n  }\n  return count;\n};\n\nconst main = () => {\n  const grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n  ];\n  const capacity = 1;\n  console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => {\n    const aInt = parseInt(a, 2);\n    const bInt = parseInt(b, 2);\n    if (aInt < bInt) {\n      return -1;\n    } else if (aInt > bInt) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\n/*\nGiven a string s and a number n, you were tasked to implement a function that \nreturns the n-th word in the string s.\nIf the n-th word does not exist in the string s, then the function should return \nthe empty string.\nExamples:\nselectNthWord(\"Hello world\", 1) ==> \"world\"\nselectNthWord(\"Hello world\", 2) ==> \"\"\nselectNthWord(\"Hello world\", 3) ==> \"world\"\nselectNthWord(\"Hello world\", 4) ==> \"\"\nselectNthWord(\"Hello world\", 5) ==> \"world\"\nselectNthWord(\"Hello world\", 6) ==> \"\"\nselectNthWord(\"Hello world\", 7) ==> \"world\"\nselectNthWord(\"Hello world\", 8) ==> \"\"\nselectNthWord(\"Hello world\", 9) ==> \"world\"\nselectNthWord(\"Hello world\", 10) ==> \"\"\nselectNthWord(\"Hello world\", 11) ==> \"world\"\nselectNthWord(\"Hello world\", 12) ==> \"\"\nselectNthWord(\"Hello world\", 13) ==> \"world\"\nselectNthWord(\"Hello world\", 14) ==> \"\"\nselectNthWord(\"Hello world\", 15) ==> \"world\"\nselectNthWord(\"Hello world\", 16) ==> \"\"\nselectNthWord(\"Hello world\", 17) ==> \"world\"\nselectNthWord(\"Hello world\", 18) ==> \"\"\nselectNthWord(\"Hello world\", 19) ==> \"world\"\nselectNthWord(\"Hello world\", 20) ==> \"\"\nselectNthWord(\"Hello world\", 21) ==> \"world\"\nselectNthWord(\"Hello world\", 22) ==> \"\"\nselectNthWord(\"Hello world\", 23) ==> \"world\"\nselectNthWord(\"Hello world\", 24) ==> \"\"\nselectNthWord(\"Hello world\", 25) ==> \"world\"\nselectNthWord(\"Hello world\", 26) ==> \"\"\nselectNthWord(\"Hello world\", 27) ==> \"world\"\nselectNthWord(\"Hello world\", 28) ==> \"\"\nselectNthWord(\"Hello world\", 29) ==> \"world\"\nselectNthWord(\"Hello world\", 30) ==> \"\"\nselectNthWord(\"Hello world\", 31) ==> \"world\"\nselectNthWord(\"Hello world\", 32) ==> \"\"\nselectNthWord(\"Hello world\", 33) ==> \"world\"\nselectNthWord(\"Hello world\", 34) ==> \"\"\nselectNthWord(\"Hello world\", 35) ==> \"world\"\nselectNthWord(\"Hello world\", 36) ==> \"\"\nselectNthWord(\"Hello world\", 37) ==> \"world\"\nselectNthWord(\"Hello world\", 38) ==> \"\"\nselectNthWord(\"Hello world\", 39) ==> \"world\"\nselectNthWord(\"Hello world\", 40) ==> \"\"\nselectNthWord(\"Hello world\", 41) ==> \"world\"\nselectNthWord(\"Hello world\", 42) ==> \"\"\nselectNthWord(\"Hello world\", 43) ==> \"world\"\nselectNthWord(\"Hello world\", 44) ==> \"\"\nselectNthWord(\"Hello world\", 45) ==> \"world\"\nselectNthWord(\"Hello world\", 46) ==> \"\"\nselectNthWord(\"Hello world\", 47) ==> \"world\"\nselectNthWord(\"Hello world\", 48) ==> \"\"\nselectNthWord(\"Hello world\", 49) ==> \"world\"\nselectNthWord(\"Hello world\", 50) ==> \"\"\nselectNthWord(\"Hello world\", 51) ==> \"world\"\nselectNthWord(\"Hello world\", 52) ==> \"\"\nselectNthWord(\"Hello world\", 53) ==> \"world\"\nselectNthWord(\"Hello world\", 54) ==> \"\"\nselectNthWord(\"Hello world\", 55) ==> \"world\"\nselectNthWord(\"Hello world\", 56) ==> \"\"\nselectNthWord(\"Hello world\", 57) ==> \"world\"\nselectNthWord(\"Hello world\", 58) ==> \"\"\nselectNthWord(\"Hello world\", 59) ==> \"world\"\nselectNthWord(\"Hello world\", 60) ==> \"\"\nselectNthWord(\"Hello world\", 61) ==> \"world\"\nselectNthWord(\"Hello world\", 62) ==> \"\"\nselectNthWord(\"Hello world\", 63) ==> \"world\"\nselectNthWord(\"Hello world\", 64) ==> \"\"\nselectNthWord(\"Hello world\", 65) ==> \"world\"\nselectNthWord(\"Hello world\", 66) ==> \"\"\nselectNthWord(\"Hello world\", 67) ==> \"world\"\nselectNthWord(\"Hello world\", 68) ==> \"\"\nselectNthWord(\"Hello world\", 69) ==> \"world\"\nselectNthWord(\"Hello world\", 70) ==> \"\"\nselectNthWord(\"Hello world\", 71) ==> \"world\"\nselectNthWord(\"Hello world\", 72) ==> \"\"\nselectNthWord(\"Hello world\", 73) ==> \"world\"\nselectNthWord(\"Hello world\", 74) ==> \"\"\nselectNthWord(\"Hello world\", 75) ==> \"world\"\nselectNthWord(\"Hello world\", 76) ==> \"\"\nselectNthWord(\"Hello world\", 77) ==> \"world\"\nselectNthWord(\"Hello world\", 78) ==> \"\"\nselectNthWord(\"Hello world\", 79) ==> \"world\"\nselectNthWord(\"Hello world\", 80) ==> \"\"\nselectNthWord(\"Hello world\", 81) =="}
{"task_id": "JavaScript/118", "prompt": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const closestVowel = ''\n  const closestVowelIndex = 0\n  const closestVowelDistance = Infinity\n  const closestVowelDistanceIndex = 0\n  const closestVowelDistanceIndex2 = 0\n  const closestVowelDistance2 = Infinity\n  const closestVowelDistance2Index = 0\n  const closestVowelDistance2Index2 = 0\n  const closestVowelDistance3 = Infinity\n  const closestVowelDistance3Index = 0\n  const closestVowelDistance3Index2 = 0\n  const closestVowelDistance3Index3 = 0\n  const closestVowelDistance4 = Infinity\n  const closestVowelDistance4Index = 0\n  const closestVowelDistance4Index2 = 0\n  const closestVowelDistance4Index3 = 0\n  const closestVowelDistance4Index4 = 0\n  const closestVowelDistance5 = Infinity\n  const closestVowelDistance5Index = 0\n  const closestVowelDistance5Index2 = 0\n  const closestVowelDistance5Index3 = 0\n  const closestVowelDistance5Index4 = 0\n  const closestVowelDistance5Index5 = 0\n  const closestVowelDistance6 = Infinity\n  const closestVowelDistance6Index = 0\n  const closestVowelDistance6Index2 = 0\n  const closestVowelDistance6Index3 = 0\n  const closestVowelDistance6Index4 = 0\n  const closestVowelDistance6Index5 = 0\n  const closestVowelDistance6Index6 = 0\n  const closestVowelDistance7 = Infinity\n  const closestVowelDistance7Index = 0\n  const closestVowelDistance7Index2 = 0\n  const closestVowelDistance7Index3 = 0\n  const closestVowelDistance7Index4 = 0\n  const closestVowelDistance7Index5 = 0\n  const closestVowelDistance7Index6 = 0\n  const closestVowelDistance7Index7 = 0\n  const closestVowelDistance8 = Infinity\n  const closestVowelDistance8Index = 0\n  const closestVowelDistance8Index2 = 0\n  const closestVowelDistance8Index3 = 0\n  const closestVowelDistance8Index4 = 0\n  const closestVowelDistance8Index5 = 0\n  const closestVowelDistance8Index6 = 0\n  const closestVowelDistance8Index7 = 0\n  const closestVowelDistance8Index8 = 0\n  const closestVowelDistance9 = Infinity\n  const closestVowelDistance9Index = 0\n  const closestVowelDistance9Index2 = 0\n  const closestVowelDistance9Index3 = 0\n  const closestVowelDistance9Index4 = 0\n  const closestVowelDistance9Index5 = 0\n  const closestVowelDistance9Index6 = 0\n  const closestVowelDistance9Index7 = 0\n  const closestVowelDistance9Index8 = 0\n  const closestVowelDistance9Index9 = 0\n  const closestVowelDistance10 = Infinity\n  const closestVowelDistance10Index = 0\n  const closestVowelDistance10Index2 = 0\n  const closestVowelDistance10Index3 = 0\n  const closestVowelDistance10Index4 = 0\n  const closestVowelDistance10Index5 = 0\n  const closestVowelDistance10Index6 = 0\n  const closestVowelDistance10Index7 = 0\n  const closestVowelDistance10Index8 = 0\n  const closestVowelDistance10Index9 = 0\n  const closestVowelDistance10Index10 = 0\n  const closestVowelDistance11 = Infinity\n  const closestVowelDistance11Index = 0\n  const closestVowelDistance11Index2 = 0\n  const closestVowelDistance11Index3 = 0\n  const closestVowelDistance11Index4 = 0\n  const closestVowelDistance11Index5 = 0\n  const closestVowelDistance11Index6 = 0\n  const closestVowelDistance11Index7 = 0\n  const closestVowelDistance11Index8 = 0\n  const closestVowelDistance11Index9 = 0\n  const closestVowelDistance11Index10 = 0\n  const closestVowelDistance11Index11 = 0\n  const closestVowelDistance12 = Infinity\n  const closestVowelDistance12Index = 0\n  const closestVowelDistance12Index2 = 0\n  const closestVowelDistance12Index3 = 0\n  const closestVowelDistance12Index4 = 0\n  const closestVowelDistance12Index5 = 0\n  const closestVowelDistance12Index6 = 0\n  const closestVowelDistance12Index7 = 0\n  const closestVowelDistance12Index8 = 0\n  const closestVowelDistance12Index9 = 0\n  const closestVowelDistance12Index10 = 0\n  const closestVowelDistance12Index11 = 0\n  const closestVowelDistance12Index12 = 0\n  const closestVowelDistance13 = Infinity\n  const closestVowelDistance13Index = 0\n  const closestVowelDistance13Index2 = 0\n  const closestVowelDistance13Index3 = 0\n  const closestVowelDistance13Index4 = 0\n  const closestVowelDistance13Index5 = 0\n  const closestVowelDistance13Index6 = 0\n  const closestV"}
{"task_id": "JavaScript/119", "prompt": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return 'Yes';\n};\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.slice(0, k);\n  const min = arr.slice(k);\n  const max_index = max.indexOf(max.reduce((a, b) => Math.max(a, b), 0));\n  const min_index = min.indexOf(min.reduce((a, b) => Math.min(a, b), 0));\n  return [...max.slice(0, max_index),...min.slice(min_index + 1)];\n};\n\nexport default maximum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter(x => x % 2 === 1)\n  const even = lst.filter(x => x % 2 === 0)\n  return odd.reduce((acc, x) => acc + x, 0) + even.reduce((acc, x) => acc + x, 0)\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements26 = (arr, k) => {\n  const sum = 0;\n  "}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return [...odd,...even]\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz2 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return [...odd,...even]\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz3 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return [...odd,...even]\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz4 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return [...odd,...even]\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz5 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return [...odd,...even]\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz6 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return [...odd,...even]\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz7 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return [...odd,...even]\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz8 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return [...odd,...even]\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz9 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return [...odd,...even]\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz10 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return [...odd,...even]\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz11 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      even.push(n)\n    } else {\n      odd.push(n)\n    }\n    return [...odd,...even]\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz12 = (n) => {\n  const odd = []\n  const even = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {"}
{"task_id": "JavaScript/124", "prompt": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) return false\n  const dateArray = date.split('-')\n  const month = parseInt(dateArray[1])\n  const day = parseInt(dateArray[2])\n  const year = parseInt(dateArray[0])\n  const daysInMonth = getDaysInMonth(month, year)\n  if (day < 1 || day > daysInMonth) return false\n  if (month < 1 || month > 12) return false\n  if (year < 1 || year > 2040) return false\n  return true\n}\n\nconst getDaysInMonth = (month, year) => {\n  switch (month) {\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 8:\n    case 10:\n    case 12:\n      return 31\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n      return 30\n    case 2:\n      if (year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n        return 29\n      } else {\n        return 28\n      }\n    default:\n      return 0\n  }\n}\n\n/*\n  You had to write a function which returns the number of days in a month. \n  The number of days in a month is different for each month. \n  For example, the number of days in the month of January is 31. \n  The number of days in the month of February is 28. \n  The number of days in the month of March is 31. \n  The number of days in the month of April is 30. \n  The number of days in the month of May is 31. \n  The number of days in the month of June is 30. \n  The number of days in the month of July is 31. \n  The number of days in the month of August is 31. \n  The number of days in the month of September is 30. \n  The number of days in the month of October is 31. \n  The number of days in the month of November is 30. \n  The number of days in the month of December is 31. \n  For example, the number of days in the month of January is 31. \n  The number of days in the month of February is 28. \n  The number of days in the month of March is 31. \n  The number of days in the month of April is 30. \n  The number of days in the month of May is 31. \n  The number of days in the month of June is 30. \n  The number of days in the month of July is 31. \n  The number of days in the month of August is 31. \n  The number of days in the month of September is 30. \n  The number of days in the month of October is 31. \n  The number of days in the month of November is 30. \n  The number of days in the month of December is 31. \n  For example, the number of days in the month of January is 31. \n  The number of days in the month of February is 28. \n  The number of days in the month of March is 31. \n  The number of days in the month of April is 30. \n  The number of days in the month of May is 31. \n  The number of days in the month of June is 30. \n  The number of days in the month of July is 31. \n  The number of days in the month of August is 31. \n  The number of days in the month of September is 30. \n  The number of days in the month of October is 31. \n  The number of days in the month of November is 30. \n  The number of days in the month of December is 31. \n  For example, the number of days in the month of January is 31. \n  The number of days in the month of February is 28. \n  The number of days in the month of March is 31. \n  The number of days in the month of April is 30. \n  The number of days in the month of May is 31. \n  The number of days in the month of June is 30. \n  The number of days in the month of July is 31. \n  The number of days in the month of August is 31. \n  The number of days in the month of September is 30. \n  The number of days in the month of October is 31. \n  The number of days in the month of November is 30. \n  The number of days in the month of December is 31. \n  For example, the number of days in the month of January is 31. \n  The number of days in the month of February is 28. \n  The number of days in the month of March is 31. \n  The number of days in the month of April is 30. \n  The number of days in the month of May is 31. \n  The number of days in the month of June is 30. \n  The number of days in the month of July is 31. \n  The number of days in the month of August is 31. \n  The number of days in the month of September is 30. \n  The number of days in the month of October is 31. \n  The number of days in the month of November is 30. \n  The number of days in the month of December is 31. \n  For example, the number of days in the month of January is 31. \n  The number of days in the month of February is 28. \n  The number of days in the month of March is 31. \n  The number of days in the"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i].toLowerCase();\n    if (word.length > 1) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n  should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n  alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i].toLowerCase();\n    if (word.length > 1) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n  should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n  alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i].toLowerCase();\n    if (word.length > 1) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n  should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n  alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i].toLowerCase();\n    if (word.length > 1) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n  should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n  alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i].toLowerCase();\n    if (word.length > 1) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n  should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n  alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i].toLowerCase();\n    if (word.length > 1) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n  should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n  alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") �"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const last = sorted[sortedLength - 1];\n  const lastIndex = lst.indexOf(last);\n  const isSorted = lastIndex === sortedLength - 1;\n  return isSorted;\n};\n\nexport default isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  "}
{"task_id": "JavaScript/128", "prompt": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const sum = arr.reduce((acc, num) => acc + num, 0);\n  const signSum = arr.reduce((acc, num) => {\n    if (num > 0) {\n      acc += 1;\n    } else if (num < 0) {\n      acc -= 1;\n    }\n    return acc;\n  }, 0);\n  return sum * signSum;\n};\n\nconsole.log(prodSigns([1, 2, 2, -4]));\nconsole.log(prodSigns([0, 1]));\nconsole.log(prodSigns([]));\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n + 1)\n  dp[0] = 1\n  dp[1] = grid[0][0]\n  dp[2] = grid[0][1]\n  dp[3] = grid[1][0]\n  dp[4] = grid[1][1]\n  dp[5] = grid[2][0]\n  dp[6] = grid[2][1]\n  dp[7] = grid[3][0]\n  dp[8] = grid[3][1]\n  dp[9] = grid[4][0]\n  dp[10] = grid[4][1]\n  dp[11] = grid[5][0]\n  dp[12] = grid[5][1]\n  dp[13] = grid[6][0]\n  dp[14] = grid[6][1]\n  dp[15] = grid[7][0]\n  dp[16] = grid[7][1]\n  dp[17] = grid[8][0]\n  dp[18] = grid[8][1]\n  dp[19] = grid[9][0]\n  dp[20] = grid[9][1]\n  dp[21] = grid[10][0]\n  dp[22] = grid[10][1]\n  dp[23] = grid[11][0]\n  dp[24] = grid[11][1]\n  dp[25] = grid[12][0]\n  dp[26] = grid[12][1]\n  dp[27] = grid[13][0]\n  dp[28] = grid[13][1]\n  dp[29] = grid[14][0]\n  dp[30] = grid[14][1]\n  dp[31] = grid[15][0]\n  dp[32] = grid[15][1]\n  dp[33] = grid[16][0]\n  dp[34] = grid[16][1]\n  dp[35] = grid[17][0]\n  dp[36] = grid[17][1]\n  dp[37] = grid[18][0]\n  dp[38] = grid[18][1]\n  dp[39] = grid[19][0]\n  dp[40] = grid[19][1]\n  dp[41] = grid[20][0]\n  dp[42] = grid[20][1]\n  dp[43] = grid[21][0]\n  dp[44] = grid[21][1]\n  dp[45] = grid[22][0]\n  dp[46] = grid[22][1]\n  dp[47] = grid[23][0]\n  dp[48] = grid[23][1]\n  dp[49] = grid[24][0]\n  dp[50] = grid[24][1]\n  dp[51] = grid[25][0]\n  dp[52] = grid[25][1]\n  dp[53] = grid[26][0]\n  dp[54] = grid[26][1]\n  dp[55] = grid[27][0]\n  dp[56] = grid[27][1]\n  dp[57] = grid[28][0]\n  dp[58] = grid[28][1]\n  dp[59] = grid[29][0]\n  dp[60] = grid[29][1]\n  dp[61] = grid[30][0]\n  dp[62] = grid[30][1]\n  dp[63] = grid[31][0]\n  dp[64] = grid[31][1]\n  dp[65] = grid[32][0]\n  dp[66] = grid[32][1]\n  dp[67] = grid[33][0]\n  dp[68] = grid[33][1]\n  dp[69] = grid[34][0]\n  dp[70] = grid[34][1]\n  dp[71] = grid[35][0]\n  dp[72] = grid[35][1]\n  dp[73] = grid[36][0]\n  dp[74] = grid[36][1]\n  dp[75] = grid[37][0]\n  dp[76] = grid[37][1]\n  dp[77] = grid[38][0]\n  dp[78] = grid[38][1]\n  dp[79] = grid[39][0]\n  dp[80] = grid[39][1]\n  dp[81] = grid[40][0]\n  dp"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const tri = [];\n  for (let i = 1; i <= n; i++) {\n    tri.push(1);\n    if (i % 2 === 0) {\n      tri.push(tri[i - 1] + tri[i - 2]);\n    } else {\n      tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n    }\n  }\n  return tri;\n};\n\nconsole.log(tri(3));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n  let stack = [];\n  let nested = false;\n  for(let i=0; i<string.length; i++){\n    if(string[i] === '['){\n      stack.push(string[i]);\n    }else if(string[i] === ']'){\n      if(stack.length === 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return nested;\n}\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1]\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isNotALetter\n}\n\n/* Create a function that returns true if the last character \n   of a given string is a letter and is not a part of a word, \n   and false otherwise. \n   Note: \" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1]\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isNotALetter\n}\n\n/* Create a function that returns true if the last character \n   of a given string is a letter and is not a part of a word, \n   and false otherwise. \n   Note: \" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1]\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isNotALetter\n}\n\n/* Create a function that returns true if the last character \n   of a given string is a letter and is not a part of a word, \n   and false otherwise. \n   Note: \" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1]\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isNotALetter\n}\n\n/* Create a function that returns true if the last character \n   of a given string is a letter and is not a part of a word, \n   and false otherwise. \n   Note: \" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1]\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isNotALetter\n}\n\n/* Create a function that returns true if the last character \n   of a given string is a letter and is not a part of a word, \n   and false otherwise. \n   Note: \" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1]\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isNotALetter\n}\n\n/* Create a function that returns true if the last character \n   of a given string is a letter and is not a part of a word, \n   and false otherwise. \n   Note: \" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1]\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isNotALetter\n}\n\n/* Create a function that returns true if the last character \n   of a given string is a letter and is not a part of a word, \n   and false otherwise. \n   Note: \" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIs"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      if (arr[i] > max) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which \n   was not less than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange2 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      if (arr[i] < max) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which \n   was not less than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange3 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      if (arr[i] < max) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which \n   was not less than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange4 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      if (arr[i] < max) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which \n   was not less than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange5 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      if (arr[i] < max) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which \n   was not less than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange6 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      if (arr[i] < max) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which \n   was not less than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange7 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      if (arr[i] < max) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which \n   was not less than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns the largest of the two numbers\n  in a list.\n  If there is no largest, return null.\n  Examples:\n  largestOfTwoIntegers([2, 4]) == 4\n  largestOfTwoIntegers([2, 4, 5]) == 5\n  largestOfTwoIntegers([2, 4, 5, 6]) == 5\n  largestOfTwoIntegers([2, 4, 5, 6, 7]) == 7\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8]) == 7\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9]) == 9\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10]) == 9\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11]) == 11\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 11\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 13\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 13\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 15\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 15\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 17\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 17\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 19\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 19\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 21\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 21\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 23\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == 23\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 25\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 25\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == 27\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == 27\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == 29\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 29\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) == 31\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]) == 31\n  largestOfTwoIntegers([2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(a===b) return null;\n   if(typeof a === 'number' && typeof b === 'number'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string' && typeof b ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof b ==='string'){\n     if(a>b) return b;\n     return a;\n   }\n   return null;\n }\n\nconst compare = (a, b)=>{\n  if(a===b) return null;\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof b ==='string'){\n    if(a>b) return b;\n    return a;\n  }\n  return null;\n}\n\nconst compareTwo = (a, b)=>{\n  if(a===b) return null;\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof b ==='string'){\n    if(a>b) return b;\n    return a;\n  }\n  return null;\n}\n\nconst compareThree = (a, b)=>{\n  if(a===b) return null;\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof b ==='string'){\n    if(a>b) return b;\n    return a;\n  }\n  return null;\n}\n\nconst compareFour = (a, b)=>{\n  if(a===b) return null;\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof b ==='string'){\n    if(a>b) return b;\n    return a;\n  }\n  return null;\n}\n\nconst compareFive = (a, b)=>{\n  if(a===b) return null;\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof b ==='string'){\n    if(a>b) return b;\n    return a;\n  }\n  return null;\n}\n\nconst compareSix = (a, b)=>{\n  if(a===b) return null;\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof b ==='string'){\n    if(a>b) return b;\n    return a;\n  }\n  return null;\n}\n\nconst compareSeven = (a, b)=>{\n  if(a===b) return null;\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof b ==='string'){\n    if(a>b) return b;\n    return a;\n  }\n  return null;\n}\n\nconst compareEight = (a, b)=>{\n  if(a===b) return null;"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of an even number of positive integers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven2 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of an even number of positive integers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven3 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of an even number of positive integers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven4 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of an even number of positive integers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven5 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of an even number of positive integers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven6 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of an even number of positive integers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven7 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of an even number of positive integers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven8 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of an even number of positive integers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven9 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of an even number of positive integers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven10 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of an even number of positive integers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven11 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*Evaluate"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3) * specialFactorial(n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst binomial = (n, k) => {\n  if (k === 0) {\n    return 1;\n  }\n  if (k === 1) {\n    return n;\n  }\n  return binomial(n - 1, k - 1) + binomial(n - 1, k);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst gamma = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return n * gamma(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst harmonic = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return n * harmonic(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst bell = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 6;\n  }\n  return n * bell(n - 1) + bell(n - 2) + bell(n - 3);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst catalan = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 4;\n  }\n  if (n === 4) {\n    return 6;\n  }\n  if (n === 5) {\n    return 8;\n  }\n  if (n === 6) {\n    return 10;\n  }\n  if (n === 7) {\n    return 12;\n  }\n  if (n === 8) {\n    return 14;\n  }\n  if (n === 9) {\n    return 16;\n  }\n  return n * catalan(n - 1) + catalan(n - 2) + catalan(n - 3) + catalan(n - 4) + catalan(n - 5) + catalan(n - 6) + catalan(n - 7) + catalan(n - 8) + catalan(n - 9);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst hypergeometric = (n, r, c) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (r === 0) {\n    return 1;\n  }\n  if (c === 0) {\n    return 1;\n  }\n  if (r === n) {\n    return 1;\n  }\n  if (c === n) {\n    return 1;\n  }\n  if (r > n) {\n    return 0;\n  }\n  if (c > n) {\n    return 0;\n  }\n  return hypergeometric(n - 1, r - 1, c - 1) + hypergeometric(n - 1, r, c - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst combinatorial = (n, r) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (r === 0) {\n    return 1;\n  }\n  if (r === n) {\n    return 1;\n  }\n  return combinatorial(n - 1, r - 1) + combinatorial(n - 1, r);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst permutation = (n, r) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (r === 0) {\n    return 1;\n  }\n  if (r === n) {\n    return 1;\n  }\n  return permutation(n - 1, r - 1) + permutation(n - 1, r);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst number = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * number(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replaced all underscores in it with spaces, \n   and if a string had more than 2 consecutive underscores, \n   then replaced all consecutive underscores with-\n  \n   fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example 1\"\n  fixUnderscores(\"_Example_2\") == \"Example 2\"\n  fixUnderscores(\"_Example-3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_/g,'')\n}\n\n/*\n  Given a string text, replaced all underscores in it with dashes, \n   and if a string had more than 2 consecutive underscores, \n   then replaced all consecutive underscores with-\n  \n   fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example-1\"\n  fixUnderscores(\"_Example_2\") == \"Example--2\"\n  fixUnderscores(\"_Example-3\") == \"Example---3\"\n  */\nconst fixUnderscores2 = (text) => {\n  return text.replace(/_/g, '-')\n}\n\n/*\n  Given a string text, replaced all dashes in it with underscores, \n   and if a string had more than 2 consecutive dashes, \n   then replaced all consecutive dashes with-\n  \n   fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\"Example--2\") == \"Example 2\"\n  fixDashes(\"Example---3\") == \"Example 3\"\n  */\nconst fixDashes = (text) => {\n  return text.replace(/-/g, '_')\n}\n\n/*\n  Given a string text, replaced all dashes in it with spaces, \n   and if a string had more than 2 consecutive dashes, \n   then replaced all consecutive dashes with-\n  \n   fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example 1\"\n  fixDashes(\"Example--2\") == \"Example 2\"\n  fixDashes(\"Example---3\") == \"Example 3\"\n  */\nconst fixDashes2 = (text) => {\n  return text.replace(/-/g,'')\n}\n\n/*\n  Given a string text, replaced all dashes in it with periods, \n   and if a string had more than 2 consecutive dashes, \n   then replaced all consecutive dashes with-\n  \n   fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example.1\"\n  fixDashes(\"Example--2\") == \"Example.2\"\n  fixDashes(\"Example---3\") == \"Example.3\"\n  */\nconst fixDashes3 = (text) => {\n  return text.replace(/-/g, '.')\n}\n\n/*\n  Given a string text, replaced all dashes in it with periods, \n   and if a string had more than 2 consecutive dashes, \n   then replaced all consecutive dashes with-\n  \n   fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example.1\"\n  fixDashes(\"Example--2\") == \"Example.2\"\n  fixDashes(\"Example---3\") == \"Example.3\"\n  */\nconst fixDashes4 = (text) => {\n  return text.replace(/-/g, '.')\n}\n\n/*\n  Given a string text, replaced all dashes in it with periods, \n   and if a string had more than 2 consecutive dashes, \n   then replaced all consecutive dashes with-\n  \n   fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example.1\"\n  fixDashes(\"Example--2\") == \"Example.2\"\n  fixDashes(\"Example---3\") == \"Example.3\"\n  */\nconst fixDashes5 = (text) => {\n  return text.replace(/-/g, '.')\n}\n\n/*\n  Given a string text, replaced all dashes in it with periods, \n   and if a string had more than 2 consecutive dashes, \n   then replaced all consecutive dashes with-\n  \n   fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example.1\"\n  fixDashes(\"Example--2\") == \"Example.2\"\n  fixDashes(\"Example---3\") == \"Example.3\"\n  */\nconst fixDashes6 = (text) => {\n  return text.replace(/-/g, '.')\n}\n\n/*\n  Given a string text, replaced all dashes in it with periods, \n   and if a string had more than 2 consecutive dashes, \n   then replaced all consecutive dashes with-\n  \n   fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example.1\"\n  fixDashes(\"Example--2\") == \"Example.2\"\n  fixDashes(\"Example---3\") == \"Example.3\"\n  */\nconst fixDashes7 = (text) => {\n  return text.replace(/-/g, '.')\n}\n\n/*\n  Given a string text, replaced all dashes in it with periods, \n   and if a string had more than 2 consecutive dashes, \n   then replaced all consecutive dashes with-\n  \n   fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example-1\") == \"Example.1\"\n  fixDashes(\"Example--2\") == \"Example.2\"\n  fixDashes(\"Example---3\") == \"Example.3\"\n  */\nconst fixDashes8 = (text) => {\n  return text.replace(/-/g, '.')\n}\n\n/*\n  Given a string text, replaced all dashes in it"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const file_name_regex_3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const file_name_regex_4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const file_name_regex_5 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const file_name_regex_6 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const file_name_regex_7 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const file_name_regex_8 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const file_name_regex_9 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const file_name_regex_10 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const file_name_regex_11 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const file_name_regex_12 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const file_name_regex_13 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const file_name_regex_14 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const file_name_regex_15 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const file_name_regex_16 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const file_name_regex_17 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const file_name_regex_18 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const file_name_regex_19 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const file_name_regex_20 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const file_name_regex_21 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const file_name_regex_22 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const file_name_regex_23 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const file_name_regex_24 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  const file_name_regex_25 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const file_name_regex_26 = /^[a-zA-Z][a-"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(' ');\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let length = word.length;\n    let prime = true;\n    for (let j = 2; j < length; j++) {\n      if (word.charAt(j) === word.charAt(j - 1)) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      newWords.push(word);\n    }\n  }\n  return newWords.join(' ');\n};\n\nconsole.log(wordsInSentence(\"This is a test\"));\nconsole.log(wordsInSentence(\"lets go for swimming\"));\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n  const x_num = x.split(\"/\")[0];\n  const x_den = x.split(\"/\")[1];\n  const n_num = n.split(\"/\")[0];\n  const n_den = n.split(\"/\")[1];\n  const x_num_num = x_num.split(\" \")[0];\n  const x_den_num = x_den.split(\" \")[0];\n  const n_num_num = n_num.split(\" \")[0];\n  const n_den_num = n_den.split(\" \")[0];\n  const x_num_den = x_num.split(\" \")[1];\n  const x_den_den = x_den.split(\" \")[1];\n  const n_num_den = n_num.split(\" \")[1];\n  const n_den_den = n_den.split(\" \")[1];\n  const x_num_num_num = x_num_num.split(\" \")[0];\n  const x_den_num_num = x_den_num.split(\" \")[0];\n  const n_num_num_num = n_num_num.split(\" \")[0];\n  const n_den_num_num = n_den_num.split(\" \")[0];\n  const x_num_den_num = x_num_den.split(\" \")[0];\n  const x_den_den_num = x_den_den.split(\" \")[0];\n  const n_num_den_num = n_num_den.split(\" \")[0];\n  const n_den_den_num = n_den_den.split(\" \")[0];\n  const x_num_num_den = x_num_num.split(\" \")[1];\n  const x_den_num_den = x_den_num.split(\" \")[1];\n  const n_num_num_den = n_num_num.split(\" \")[1];\n  const n_den_num_den = n_den_num.split(\" \")[1];\n  const x_num_den_den = x_num_den.split(\" \")[1];\n  const x_den_den_den = x_den_den.split(\" \")[1];\n  const n_num_den_den = n_num_den.split(\" \")[1];\n  const n_den_den_den = n_den_den.split(\" \")[1];\n  const x_num_num_den_num = x_num_num_num.split(\" \")[0];\n  const x_den_num_den_num = x_den_num_num.split(\" \")[0];\n  const n_num_num_den_num = n_num_num_num.split(\" \")[0];\n  const n_den_num_den_num = n_den_num_num.split(\" \")[0];\n  const x_num_den_num_den = x_num_den_num.split(\" \")[0];\n  const x_den_den_num_den = x_den_den_num.split(\" \")[0];\n  const n_num_den_num_den = n_num_den_num.split(\" \")[0];\n  const n_den_den_num_den = n_den_den_num.split(\" \")[0];\n  const x_num_num_den_den = x_num_num_den.split(\" \")[1];\n  const x_den_num_den_den = x_den_num_den.split(\" \")[1];\n  const n_num_num_den_den = n_num_num_den.split(\" \")[1];\n  const n_den_num_den_den = n_den_num_den.split(\" \")[1];\n  const x_num_den_den_den = x_num_den_den.split(\" \")[1];\n  const x_den_den_den_den = x_den_den_den.split(\" \")[1];\n  const n_num_den_den_den = n_num_den_den.split(\" \")[1];\n  const n_den_den_den_den = n_den_den_den.split(\" \")[1];\n  const x_num_num_den_num_num = x_num_num_den.split(\" \")[0];\n  const x_den_num_den_num_num = x_den_num_den.split(\" \")[0];\n  const n_num_num_den_num_num = n_num_num_den.split(\" \")[0];\n  const n_den_num_den_num_num = n_den_num_den.split(\" \")[0];\n  const x_num_den_num_den_num = x_num_den_num_den.split(\" \")[0];\n  const x_den_den_num_den_num = x_den_den_num_den.split(\" \")[0];\n  const n_num_den_num_den_num = n_num_den_num_den.split(\" \")[0];\n  const n_den_den_num_den_num = n_den_den_num_den.split(\" \")[0];\n  const x_num_num_den_den_num = x_num_num_den_den.split(\" \")[0];\n  const x_den_num_den_den_num = x_den_num_den_den.split(\" \")[0];\n  const n_num_den_den_num_den = n_num_den_den_num.split(\" \")[0];\n  const n_den_den_num_"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints2 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints3 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints4 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints5 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints6 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints7 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints8 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints9 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints10 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints11 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints12 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints13 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints14 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints15 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints16 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints17 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints18 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints19 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints20 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nconst orderByPoints21 = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const filter = (num) => {\n    return num % 2 === 1 && num % 10 === 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9;\n  };\n  const count = nums.filter(filter);\n  return count.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = a.reduce((acc, curr, i) => {\n    const j = i + 1\n    const k = n - 1\n    const sum = curr + a[j] + a[k]\n    if (sum % 3 === 0) {\n      acc.push([curr, a[j], a[k]])\n    }\n    return acc\n  }, [])\n  return result.length\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1_name = planet1.toLowerCase();\n  let planet2_name = planet2.toLowerCase();\n  let planet1_orbit = get_orbit(planet1_name);\n  let planet2_orbit = get_orbit(planet2_name);\n  let planet_list = [];\n  let planet_list_length = 0;\n  let planet_list_index = 0;\n  let planet_list_index_2 = 0;\n  let planet_list_index_3 = 0;\n  let planet_list_index_4 = 0;\n  let planet_list_index_5 = 0;\n  let planet_list_index_6 = 0;\n  let planet_list_index_7 = 0;\n  let planet_list_index_8 = 0;\n  let planet_list_index_9 = 0;\n  let planet_list_index_10 = 0;\n  let planet_list_index_11 = 0;\n  let planet_list_index_12 = 0;\n  let planet_list_index_13 = 0;\n  let planet_list_index_14 = 0;\n  let planet_list_index_15 = 0;\n  let planet_list_index_16 = 0;\n  let planet_list_index_17 = 0;\n  let planet_list_index_18 = 0;\n  let planet_list_index_19 = 0;\n  let planet_list_index_20 = 0;\n  let planet_list_index_21 = 0;\n  let planet_list_index_22 = 0;\n  let planet_list_index_23 = 0;\n  let planet_list_index_24 = 0;\n  let planet_list_index_25 = 0;\n  let planet_list_index_26 = 0;\n  let planet_list_index_27 = 0;\n  let planet_list_index_28 = 0;\n  let planet_list_index_29 = 0;\n  let planet_list_index_30 = 0;\n  let planet_list_index_31 = 0;\n  let planet_list_index_32 = 0;\n  let planet_list_index_33 = 0;\n  let planet_list_index_34 = 0;\n  let planet_list_index_35 = 0;\n  let planet_list_index_36 = 0;\n  let planet_list_index_37 = 0;\n  let planet_list_index_38 = 0;\n  let planet_list_index_39 = 0;\n  let planet_list_index_40 = 0;\n  let planet_list_index_41 = 0;\n  let planet_list_index_42 = 0;\n  let planet_list_index_43 = 0;\n  let planet_list_index_44 = 0;\n  let planet_list_index_45 = 0;\n  let planet_list_index_46 = 0;\n  let planet_list_index_47 = 0;\n  let planet_list_index_48 = 0;\n  let planet_list_index_49 = 0;\n  let planet_list_index_50 = 0;\n  let planet_list_index_51 = 0;\n  let planet_list_index_52 = 0;\n  let planet_list_index_53 = 0;\n  let planet_list_index_54 = 0;\n  let planet_list_index_55 = 0;\n  let planet_list_index_56 = 0;\n  let planet_list_index_57 = 0;\n  let planet_list_index_58 = 0;\n  let planet_list_index_59 = 0;\n  let planet_list_index_60 = 0;\n  let planet_list_index_61 = 0;\n  let planet_list_index_62 = 0;\n  let planet_list_index_63 = 0;\n  let planet_list_index_64 = 0;\n  let planet_list_index_65 = 0;\n  let planet_list_index_66 = 0;\n  let planet_list_index_67 = 0;\n  let planet_list_index_68 = 0;\n  let planet_list_index_69 = 0;\n  let planet_list_index_70 = 0;\n  let planet_list_index_71 = 0;\n  let planet_list_index_72 = 0;\n  let planet_list_index_73 = 0;\n  let planet_list_index_74 = 0;\n  let planet_list_index_75 = 0;\n  let planet_list_index_76 = 0;\n  let planet_list_index_77 = 0;\n  let planet_list_index_78 = 0;\n  let planet_list_index_79 = 0;\n  let planet_list_index_80 = 0;\n  let planet_list_index_81 = 0;\n  let planet_list_index_82 = 0;\n  let planet_list_index_83 = 0;\n  let planet_list_index_84 = 0;\n  let planet_list_index_85 = 0;\n  let planet_list_index_86 = 0;\n  let planet_list_index_87 = 0;\n  let planet_list_index_88 = 0;\n  let planet_list_index_89 = 0;\n  let planet_list_index_90 = 0;\n  let planet_list_index_91 = 0;\n  let planet_list_index_92 = 0;\n  let planet_list_index_93 = 0;\n  let planet_list_index_94 = 0;\n  let planet_list_index_"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sortedList = lst.sort((a, b) => a.length - b.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort = (lst) => {\n  const sortedList = lst.sort((a, b) => a.length - b.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort_by_length = (lst) => {\n  const sortedList = lst.sort((a, b) => a.length - b.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort_by_length_descending = (lst) => {\n  const sortedList = lst.sort((a, b) => b.length - a.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort_by_length_descending_reverse = (lst) => {\n  const sortedList = lst.sort((a, b) => b.length - a.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort_by_length_descending_reverse_reverse = (lst) => {\n  const sortedList = lst.sort((a, b) => a.length - b.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort_by_length_descending_reverse_reverse_reverse = (lst) => {\n  const sortedList = lst.sort((a, b) => b.length - a.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort_by_length_descending_reverse_reverse_reverse_reverse = (lst) => {\n  const sortedList = lst.sort((a, b) => a.length - b.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort_by_length_descending_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sortedList = lst.sort((a, b) => b.length - a.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort_by_length_descending_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sortedList = lst.sort((a, b) => a.length - b.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort_by_length_descending_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sortedList = lst.sort((a, b) => b.length - a.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort_by_length_descending_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sortedList = lst.sort((a, b) => a.length - b.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort_by_length_descending_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sortedList = lst.sort((a, b) => b.length - a.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort_by_length_descending_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sortedList = lst.sort((a, b) => a.length - b.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort_by_length_descending_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sortedList = lst.sort((a, b) => b.length - a.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort_by_length_descending_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sortedList = lst.sort((a, b) => a.length - b.length);\n  const sum = (a, b) => a + b;\n  return sortedList.reduce(sum, 0);\n};\n\nconst list_sort_by_length_descending_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sortedList = lst.sort((a, b) => b.length - a.length);\n  const sum = (a, b) => a + b"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   const sum = (lst.reduce((a, b) => a + b, 0))\n   const diff = (lst.reduce((a, b) => a - b, 0))\n   return (sum * sum) - (diff * diff)\n }\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0)\n  const diff = lst.reduce((a, b) => a - b, 0)\n  return (sum * sum) - (diff * diff)\n}\n\nconst doubleTheDifference ="}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let diff = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff.push(0);\n    } else {\n      diff.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return diff;\n};\n\nconst compare2 = (game, guess) => {\n  let diff = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff.push(0);\n    } else {\n      diff.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return diff;\n};\n\nconst compare3 = (game, guess) => {\n  let diff = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff.push(0);\n    } else {\n      diff.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return diff;\n};\n\nconst compare4 = (game, guess) => {\n  let diff = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff.push(0);\n    } else {\n      diff.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return diff;\n};\n\nconst compare5 = (game, guess) => {\n  let diff = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff.push(0);\n    } else {\n      diff.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return diff;\n};\n\nconst compare6 = (game, guess) => {\n  let diff = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff.push(0);\n    } else {\n      diff.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return diff;\n};\n\nconst compare7 = (game, guess) => {\n  let diff = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff.push(0);\n    } else {\n      diff.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return diff;\n};\n\nconst compare8 = (game, guess) => {\n  let diff = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff.push(0);\n    } else {\n      diff.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return diff;\n};\n\nconst compare9 = (game, guess) => {\n  let diff = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff.push(0);\n    } else {\n      diff.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return diff;\n};\n\nconst compare10 = (game, guess) => {\n  let diff = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff.push(0);\n    } else {\n      diff.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return diff;\n};\n\nconst compare11 = (game, guess) => {\n  let diff = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff.push(0);\n    } else {\n      diff.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return diff;\n};\n\nconst compare12 = (game, guess) => {\n  let diff = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff.push(0);\n    } else {\n      diff.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return diff;\n};\n\nconst compare13 = (game, guess) => {\n  let diff = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff.push(0);\n    } else {\n      diff.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return diff;\n};\n\nconst compare14 = (game, guess) => {\n  let diff = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game"}
{"task_id": "JavaScript/153", "prompt": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.charAt(0).toUpperCase();\n    const sm = ext.charAt(1).toLowerCase();\n    strength[cap] = strength[cap] || 0;\n    strength[cap] += strength[cap] > 0? -1 : 1;\n    strength[sm] = strength[sm] || 0;\n    strength[sm] += strength[sm] > 0? -1 : 1;\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b]).pop();\n  return `${class_name}.${strongest}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let a_length= a.length\n   let b_length= b.length\n   let a_index= 0\n   let b_index= 0\n   let a_char= a.charAt(a_index)\n   let b_char= b.charAt(b_index)\n   let a_rotation= 0\n   let b_rotation= 0\n   while(a_index < a_length && b_index < b_length){\n     if(a_char === b_char){\n       a_index++\n       b_index++\n       a_rotation++\n       b_rotation++\n       if(a_rotation === 3){\n         a_rotation= 0\n         a_index++\n       }\n       if(b_rotation === 3){\n         b_rotation= 0\n         b_index++\n       }\n     }else{\n       if(a_rotation === 0){\n         a_index++\n       }else{\n         a_rotation--\n       }\n       if(b_rotation === 0){\n         b_index++\n       }else{\n         b_rotation--\n       }\n     }\n   }\n   if(a_index === a_length && b_index === b_length){\n     return true\n   }else{\n     return false\n   }\n }\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(1234));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'x';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'X';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'V';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'I';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'I';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in mixed case. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRomanMixed(19) == 'XIX'\n  >>> intToRomanMixed(152) == 'CLII'\n  >>> intToRomanMixed(426) == 'CDXXVI'\n  */\nconst intToRomanMixed = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'X';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'V';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'I';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'I';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in upper case. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRomanUpper(19) == 'XIX'\n  >>> intToRomanUpper(152) == 'CLII'\n  >>> intToRomanUpper(426) == 'CDXXVI'\n  */\nconst intToRomanUpper = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'X';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'V';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'I';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'I';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in lower case. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRomanLower(19) == 'xix'\n  >>> intToRomanLower(152) == 'clii'\n  >>> intToRomanLower(426) == 'cdxxvi'\n  */\nconst intToRomanLower = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'x';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString() + 'v';\n      number -= i * 5;\n    } else if (number >= i * 2) {\n      result += i.toString() + 'i';\n      number -= i * 2;\n    } else {\n      result += i.toString() + 'i';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string, \n   and return it in mixed case. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRomanMixedUpper(19) == 'XIX'\n  >>> intToRomanMixedUpper(152) == 'CLII'\n  >>> intToRomanMixedUpper(426) == 'CDXXVI'\n  */\nconst intToRomanMixedUpper = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      result += i.toString() + 'X';\n      number -= i * 10;\n    } else if (number >= i * 5) {\n      result += i.toString()"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || a === c) {\n    return false;\n  }\n  if (a === c) {\n    return (b > c);\n  }\n  if (b === c) {\n    return (a > c);\n  }\n  if (a === b) {\n    return (a > c);\n  }\n  return false;\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle2 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle3 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle4 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle5 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle6 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle7 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle8 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle9 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle10 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle11 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle12 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle13 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle14 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle15 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle16 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle17 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle18 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle19 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle20 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle21 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle22 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle23 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle24 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle25 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle26 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle27 = (a, b, c) => {\n  return (a === b && b === c) || (a === b || b === c || a === c);\n};\n\nconst isRightAngleTriangle28 = (a, b, c) => {\n  return ("}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n  let max= words[0];\n  let maxCount= words[0].length;\n  for(let i=1;i<words.length;i++){\n    let count= words[i].length;\n    if(count>maxCount){\n      max= words[i];\n      maxCount= count;\n    }\n  }\n  return max;\n}\n\nconsole.log(findMax([\"name\",\" of\",\" string\"]));\nconsole.log(findMax([\"name\",\" enam\",\" game\"]));\nconsole.log(findMax([\"aaaaaaa\",\" bb\",\" cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  } else {\n    return [number, remaining];\n  }\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0],\n  [10, 19, 0],\n  [11, 20, 0],\n  [12, 21, 0],\n  [13, 22, 0],\n  [14, 23, 0],\n  [15, 24, 0],\n  [16, 25, 0],\n  [17, 26, 0],\n  [18, 27, 0],\n  [19, 28, 0],\n  [20, 29, 0],\n  [21, 30, 0],\n  [22, 31, 0],\n  [23, 32, 0],\n  [24, 33, 0],\n  [25, 34, 0],\n  [26, 35, 0],\n  [27, 36, 0],\n  [28, 37, 0],\n  [29, 38, 0],\n  [30, 39, 0],\n  [31, 40, 0],\n  [32, 41, 0],\n  [33, 42, 0],\n  [34, 43, 0],\n  [35, 44, 0],\n  [36, 45, 0],\n  [37, 46, 0],\n  [38, 47, 0],\n  [39, 48, 0],\n  [40, 49, 0],\n  [41, 50, 0],\n  [42, 51, 0],\n  [43, 52, 0],\n  [44, 53, 0],\n  [45, 54, 0],\n  [46, 55, 0],\n  [47, 56, 0],\n  [48, 57, 0],\n  [49, 58, 0],\n  [50, 59, 0],\n  [51, 60, 0],\n  [52, 61, 0],\n  [53, 62, 0],\n  [54, 63, 0],\n  [55, 64, 0],\n  [56, 65, 0],\n  [57, 66, 0],\n  [58, 67, 0],\n  [59, 68, 0],\n  [60, 69, 0],\n  [61, 70, 0],\n  [62, 71, 0],\n  [63, 72, 0],\n  [64, 73, 0],\n  [65, 74, 0],\n  [66, 75, 0],\n  [67, 76, 0],\n  [68, 77, 0],\n  [69, 78, 0],\n  [70, 79, 0],\n  [71, 80, 0],\n  [72, 81, 0],\n  [73, 82, 0],\n  [74, 83, 0],\n  [75, 84, 0],\n  [76, 85, 0],\n  [77, 86, 0],\n  [78, 87, 0],\n  [79, 88, 0],\n  [80, 89, 0],\n  [81, 90, 0],\n  [82, 91, 0],\n  [83, 92, 0],\n  [84, 93, 0],\n  [85, 94, 0],\n  [86, 95, 0],\n  [87, 96, 0],\n  [88, 97, 0],\n  [89, 98, 0],\n  [90, 99, 0],\n  [91, 100, 0],\n  [92, 101, 0],\n  [93, 102, 0],\n  [94, 103, 0],\n  [95, 104, 0],\n  [96, 105, 0],\n  [97, 106, 0],\n  [98, 107, 0],\n  [99, 108, 0],\n  [100, 109, 0],\n  [101, 110, 0],\n  [102, 111, 0],\n  [103, 112, 0],\n  [104, 113, 0],\n  [105, 114, 0],\n  [106, 115, 0],\n  [107, 116, 0],\n  [108, 117, 0],\n  [109, 118, 0],\n  [110, 119, 0],\n  [111, 120, 0],\n  [112, 121, 0],\n  [113, 122, 0],\n  [114, 123, 0],\n  [115, 124, 0],\n  [116, 125, 0],\n  [117, 126, 0],\n  [118, 127, 0],\n  [119, 128, 0],\n  [120, 129, 0],\n  [121, 130, 0],\n  [122, 131, 0],\n  [123, 132, 0],\n  [124, 133, 0],\n  [125, 134, 0],\n  [126, 135, 0],\n  [127, 136, 0],\n  [128, 137, 0"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operator[i]\n    const operand = operand[i]\n\n    if (operator === '+') {\n      result.push(operand[0] + operand[1])\n    } else if (operator === '-') {\n      result.push(operand[0] - operand[1])\n    } else if (operator === '*') {\n      result.push(operand[0] * operand[1])\n    } else if (operator === '/') {\n      result.push(operand[0] / operand[1])\n    } else if (operator === '**') {\n      result.push(Math.pow(operand[0], operand[1]))\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operator[i]\n    const operand = operand[i]\n\n    if (operator === '+') {\n      result.push(operand[0] + operand[1])\n    } else if (operator === '-') {\n      result.push(operand[0] - operand[1])\n    } else if (operator === '*') {\n      result.push(operand[0] * operand[1])\n    } else if (operator === '/') {\n      result.push(operand[0] / operand[1])\n    } else if (operator === '**') {\n      result.push(Math.pow(operand[0], operand[1]))\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operator[i]\n    const operand = operand[i]\n\n    if (operator === '+') {\n      result.push(operand[0] + operand[1])\n    } else if (operator === '-') {\n      result.push(operand[0] - operand[1])\n    } else if (operator === '*') {\n      result.push(operand[0] * operand[1])\n    } else if (operator === '/') {\n      result.push(operand[0] / operand[1])\n    } else if (operator === '**') {\n      result.push(Math.pow(operand[0], operand[1]))\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operator[i]\n    const operand = operand[i]\n\n    if (operator === '+') {\n      result.push(operand[0] + operand[1])\n    } else if (operator === '-') {\n      result.push(operand[0] - operand[1])\n    } else if (operator === '*') {\n      result.push(operand[0] * operand[1])\n    } else if (operator === '/') {\n      result.push(operand[0] / operand[1])\n    } else if (operator === '**') {\n      result.push(Math.pow(operand[0], operand[1]))\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operator[i]\n    const operand = operand[i]\n\n    if (operator === '+') {\n      result.push(operand[0] + operand[1])\n    } else if (operator === '-') {\n      result.push(operand[0] - operand[1])\n    } else if (operator === '*') {\n      result.push(operand[0] * operand[1])\n    } else if (operator === '/') {\n      result.push(operand[0] / operand[1])\n    } else if (operator === '**') {\n      result.push(Math.pow(operand[0], operand[1]))\n    }\n  }\n\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    const operator = operator[i]\n    const operand = operand[i]\n\n    if (operator === '+') {\n      result.push(operand[0] + operand[1])\n    } else if (operator === '-') {\n      result.push(operand[0] - operand["}
{"task_id": "JavaScript/161", "prompt": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i].toUpperCase() === s[j].toUpperCase()) {\n      result += s[i];\n      i++;\n      j--;\n    } else if (s[i].toUpperCase() === s[j].toLowerCase()) {\n      result += s[i].toLowerCase();\n      i++;\n      j--;\n    } else {\n      result += s[j].toUpperCase();\n      j--;\n    }\n  }\n  if (i === j) {\n    result += s[i];\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855e1803b5e9b0d28ae11a8a5a04b1b0eabdb9e7f087a9b1c5e7c9bde2d23c0a9d0d4d26e8eef4c1d4c9b569a281516e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha384('Hello world') == 'd7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592'\n  */\nconst stringToSha384 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855e1803b5e9b0d28ae11a8a5a04b1b0eabdb9e7f087a9b1c5e7c9bde2d23c0a9d0d4d26e8eef4c1d4c9b569a281516e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha384('Hello world') == 'd7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592'\n  */\nconst stringToSha384 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855e1803b5e9b0d28ae11a8a5a04b1b0eabdb9e7f087a9b1c5e7c9bde2d23c0a9d0d4d26e8eef4c1d4c9b569a281516e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha384('Hello world') == 'd7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592'\n  */\nconst stringToSha384 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text'"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result.filter(x => x % 2 === 0);\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
