{"task_id": "JavaScript/0", "prompt": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diffs = []\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j])\n      if (diff <= threshold) {\n        diffs.push(diff)\n      }\n    }\n  }\n  return diffs.length > 0\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diffs = []\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j])\n      if (diff <= threshold) {\n        diffs.push(diff)\n      }\n    }\n  }\n  return diffs.length > 0\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diffs = []\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j])\n      if (diff <= threshold) {\n        diffs.push(diff)\n      }\n    }\n  }\n  return diffs.length > 0\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diffs = []\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j])\n      if (diff <= threshold) {\n        diffs.push(diff)\n      }\n    }\n  }\n  return diffs.length > 0\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diffs = []\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j])\n      if (diff <= threshold) {\n        diffs.push(diff)\n      }\n    }\n  }\n  return diffs.length > 0\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diffs = []\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j])\n      if (diff <= threshold) {\n        diffs.push(diff)\n      }\n    }\n  }\n  return diffs.length > 0\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diffs = []\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j])\n      if (diff <= threshold) {\n        diffs.push(diff)\n      }\n    }\n  }\n  return diffs.length > 0\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.split('(');\n  const paren_groups_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group.split(')');\n    paren_groups_array.push(paren_group_array[0]);\n    paren_groups_array.push(paren_group_array[1]);\n  }\n  return paren_groups_array;\n};\n\n/*\n  Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups2 = (paren_string) => {\n  const paren_groups = paren_string.split('(');\n  const paren_groups_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group.split(')');\n    paren_groups_array.push(paren_group_array[0]);\n    paren_groups_array.push(paren_group_array[1]);\n  }\n  return paren_groups_array;\n};\n\n/*\n  Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups3 = (paren_string) => {\n  const paren_groups = paren_string.split('(');\n  const paren_groups_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group.split(')');\n    paren_groups_array.push(paren_group_array[0]);\n    paren_groups_array.push(paren_group_array[1]);\n  }\n  return paren_groups_array;\n};\n\n/*\n  Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups4 = (paren_string) => {\n  const paren_groups = paren_string.split('(');\n  const paren_groups_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group.split(')');\n    paren_groups_array.push(paren_group_array[0]);\n    paren_groups_array.push(paren_group_array[1]);\n  }\n  return paren_groups_array;\n};\n\n/*\n  Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups5 = (paren_string) => {\n  const paren_groups = paren_string.split('(');\n  const paren_groups_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group.split(')');\n    paren_groups_array.push(paren_group_array[0]);\n    paren_groups_array.push(paren_group_array[1]);\n  }\n  return paren_groups_array;\n};\n\n/*\n  Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups6 = (paren_string) => {\n  const paren_groups = paren_string.split('(');\n  const paren_groups_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group.split(')');\n    paren_groups_array.push(paren_group_array[0]);\n    paren_groups_array.push(paren_group_array[1]);\n  }\n  return paren_groups_array;\n", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').reverse().join('');\n  let max = prefix.length;\n  let min = suffix.length;\n  let mid = Math.floor((max + min) / 2);\n  let palindrome = prefix + suffix.substring(0, mid);\n  while(!isPalindrome(palindrome)){\n    if(max - mid < mid - min){\n      min = mid;\n      palindrome = prefix + suffix.substring(0, min);\n    }\n    else{\n      max = mid;\n      palindrome = prefix + suffix.substring(0, max);\n    }\n    mid = Math.floor((max + min) / 2);\n  }\n  return palindrome;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  let reversed = string.split('').reverse().join(''", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconsole.log(makeAPile(3));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum16 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum17 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum18 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return x + 1;\n};\n\nconst chooseNum19 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  const avg = (n + m) / 2;\n  return (avg.toString(2)).slice(-1);\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const uniqueDigits = [];\n  for (let i = 0; i < x; i++) {\n    const digits = x.toString().split('').filter(digit => digit.length === 1);\n    if (digits.length === 1 && digits[0] % 2 === 0) {\n      uniqueDigits.push(x);\n    }\n  }\n  return uniqueDigits;\n};\n\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(152));\nconsole.log(uniqueDigits(323));\nconsole.log(uniqueDigits(1422));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrReplaced = reversedArr.map(x => names[x])\n  return reversedArrReplaced\n}\n\nconst byLength2 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrReplaced = reversedArr.map(x => names[x])\n  return reversedArrReplaced\n}\n\nconst byLength3 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrReplaced = reversedArr.map(x => names[x])\n  return reversedArrReplaced\n}\n\nconst byLength4 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrReplaced = reversedArr.map(x => names[x])\n  return reversedArrReplaced\n}\n\nconst byLength5 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrReplaced = reversedArr.map(x => names[x])\n  return reversedArrReplaced\n}\n\nconst byLength6 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrReplaced = reversedArr.map(x => names[x])\n  return reversedArrReplaced\n}\n\nconst byLength7 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrReplaced = reversedArr.map(x => names[x])\n  return reversedArrReplaced\n}\n\nconst byLength8 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrReplaced = reversedArr.map(x => names[x])\n  return reversedArrReplaced\n}\n\nconst byLength9 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrReplaced = reversedArr.map(x => names[x])\n  return reversedArrReplaced\n}\n\nconst byLength10 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrReplaced = reversedArr.map(x => names[x])\n  return reversedArrReplaced\n}\n\nconst byLength11 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  const reversedArrReplaced = reversedArr.map(x => names[x])\n  return reversedArrReplaced\n}\n\nconst byLength12 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f2 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f3 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f4 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f5 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f6 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f7 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f8 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f9 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f10 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f11 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f12 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f13 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f14 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f15 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f16 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f17 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f18 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f19 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f20 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f21 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f22 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f23 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f24 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f25 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f26 = (n) => {\n  const factorials = []\n  ", "passed": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num > 0) {\n      let sum = 0;\n      while (num > 0) {\n        sum += num % 10;\n        num = num / 10;\n      }\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x <= arr[i]);\n};\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\nexport default stringXor;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return false;\n  }\n  let i = 0;\n  let j = 0;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      lst1[i] = lst2[j];\n      j++;\n    } else {\n      i++;\n    }\n  }\n  if (j === lst2.length) {\n    return true;\n  }\n  return false;\n};\n\nconst test = () => {\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]);\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]);\n  exchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  \n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let index = result.indexOf(c);\n  while (index!== -1) {\n    result = result.slice(0, index) + result.slice(index + 1);\n    index = result.indexOf(c);\n  }\n  return [result, result.length === s.length];\n};\n\nconst isPalindrome = (s) => {\n  let [result, isPalindrome] = reverseDelete(s, s);\n  return isPalindrome;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (str) => {\n    const count = 0\n    for (let i = 0; i < lst.length; i++) {\n      const num = parseInt(lst[i])\n      if (num % 2 === 1) {\n        count += 1\n      }\n    }\n    return count\n  }\n  return lst.map(oddCount)\n}\n\nmodule.exports = oddCount\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum = sum + nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const [rows, cols] = grid.length;\n  const [row, col] = grid[0];\n  const [row_fill, col_fill] = [0, 0];\n  const [row_fill_max, col_fill_max] = [0, 0];\n  const [row_fill_min, col_fill_min] = [0, 0];\n  const [row_fill_sum, col_fill_sum] = [0, 0];\n  const [row_fill_sum_max, col_fill_sum_max] = [0, 0];\n  const [row_fill_sum_min, col_fill_sum_min] = [0, 0];\n  const [row_fill_sum_sum, col_fill_sum_sum] = [0, 0];\n  const [row_fill_sum_sum_max, col_fill_sum_sum_max] = [0, 0];\n  const [row_fill_sum_sum_min, col_fill_sum_sum_min] = [0, 0];\n  const [row_fill_sum_sum_sum, col_fill_sum_sum_sum] = [0, 0];\n  const [row_fill_sum_sum_sum_max, col_fill_sum_sum_sum_max] = [0, 0];\n  const [row_fill_sum_sum_sum_min, col_fill_sum_sum_sum_min] = [0, 0];\n  const [row_fill_sum_sum_sum_sum, col_fill_sum_sum_sum_sum] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_max, col_fill_sum_sum_sum_sum_max] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_min, col_fill_sum_sum_sum_sum_min] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum, col_fill_sum_sum_sum_sum_sum] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum_max, col_fill_sum_sum_sum_sum_sum_max] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum_min, col_fill_sum_sum_sum_sum_sum_min] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum_sum, col_fill_sum_sum_sum_sum_sum_sum] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum_sum_max, col_fill_sum_sum_sum_sum_sum_sum_max] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum_sum_min, col_fill_sum_sum_sum_sum_sum_sum_min] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum_sum_sum, col_fill_sum_sum_sum_sum_sum_sum_sum] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum_sum_sum_max, col_fill_sum_sum_sum_sum_sum_sum_sum_max] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum_sum_sum_min, col_fill_sum_sum_sum_sum_sum_sum_sum_min] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum_sum_sum_sum, col_fill_sum_sum_sum_sum_sum_sum_sum_sum] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum_sum_sum_sum_max, col_fill_sum_sum_sum_sum_sum_sum_sum_sum_max] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum_sum_sum_sum_min, col_fill_sum_sum_sum_sum_sum_sum_sum_sum_min] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum_sum_sum_sum_sum, col_fill_sum_sum_sum_sum_sum_sum_sum_sum_sum] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum_sum_sum_sum_sum_max, col_fill_sum_sum_sum_sum_sum_sum_sum_sum_sum_max] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum_sum_sum_sum_sum_min, col_fill_sum_sum_sum_sum_sum_sum_sum_sum_sum_min] = [0, 0];\n  const [row_fill_sum_sum_sum_sum_sum", "passed": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    let aInt = parseInt(a, 2);\n    let bInt = parseInt(b, 2);\n    if (aInt > bInt) {\n      return 1;\n    } else if (aInt < bInt) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sortArray2 = (arr) => {\n  let sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt > bInt) {\n      return 1;\n    } else if (aInt < bInt) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sortArray3 = (arr) => {\n  let sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt > bInt) {\n      return 1;\n    } else if (aInt < bInt) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sortArray4 = (arr) => {\n  let sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt > bInt) {\n      return 1;\n    } else if (aInt < bInt) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sortArray5 = (arr) => {\n  let sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt > bInt) {\n      return 1;\n    } else if (aInt < bInt) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sortArray6 = (arr) => {\n  let sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt > bInt) {\n      return 1;\n    } else if (aInt < bInt) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sortArray7 = (arr) => {\n  let sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt > bInt) {\n      return 1;\n    } else if (aInt < bInt) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sortArray8 = (arr) => {\n  let sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt > bInt) {\n      return 1;\n    } else if (aInt < bInt) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sortArray9 = (arr) => {\n  let sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt > bInt) {\n      return 1;\n    } else if (aInt < bInt) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sortArray10 = (arr) => {\n  let sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt > bInt) {\n      return 1;\n    } else if (aInt < bInt) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sortArray11 = (arr) => {\n  let sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n    if (aInt > bInt) {\n      return 1;\n    } else if (aInt < bInt) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sortArray12 = (arr) => {\n  let sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    let aInt = parseInt(a, 10);\n    let bInt = parseInt(b, 10);\n", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a non-negative integer n, you were tasked to implement a function \nthat returns the nth word from the string s.\nIf the nth word does not exist, then the function should return the empty string.\n\nExamples:\nselectNthWord(\"Hello world\", 1) ==> \"world\"\nselectNthWord(\"Hello world\", 2) ==> \"world\"\nselectNthWord(\"Hello world\", 3) ==> \"\"\nselectNthWord(\"Hello world\", 4) ==> \"\"\nselectNthWord(\"Hello world\", 5) ==> \"\"\nselectNthWord(\"Hello world\", 6) ==> \"world\"\nselectNthWord(\"Hello world\", 7) ==> \"world\"\nselectNthWord(\"Hello world\", 8) ==> \"world\"\nselectNthWord(\"Hello world\", 9) ==> \"world\"\nselectNthWord(\"Hello world\", 10) ==> \"world\"\nselectNthWord(\"Hello world\", 11) ==> \"world\"\nselectNthWord(\"Hello world\", 12) ==> \"world\"\nselectNthWord(\"Hello world\", 13) ==> \"world\"\nselectNthWord(\"Hello world\", 14) ==> \"world\"\nselectNthWord(\"Hello world\", 15) ==> \"world\"\nselectNthWord(\"Hello world\", 16) ==> \"world\"\nselectNthWord(\"Hello world\", 17) ==> \"world\"\nselectNthWord(\"Hello world\", 18) ==> \"world\"\nselectNthWord(\"Hello world\", 19) ==> \"world\"\nselectNthWord(\"Hello world\", 20) ==> \"world\"\nselectNthWord(\"Hello world\", 21) ==> \"world\"\nselectNthWord(\"Hello world\", 22) ==> \"world\"\nselectNthWord(\"Hello world\", 23) ==> \"world\"\nselectNthWord(\"Hello world\", 24) ==> \"world\"\nselectNthWord(\"Hello world\", 25) ==> \"world\"\nselectNthWord(\"Hello world\", 26) ==> \"world\"\nselectNthWord(\"Hello world\", 27) ==> \"world\"\nselectNthWord(\"Hello world\", 28) ==> \"world\"\nselectNthWord(\"Hello world\", 29) ==> \"world\"\nselectNthWord(\"Hello world\", 30) ==> \"world\"\nselectNthWord(\"Hello world\", 31) ==> \"world\"\nselectNthWord(\"Hello world\", 32) ==> \"world\"\nselectNthWord(\"Hello world\", 33) ==> \"world\"\nselectNthWord(\"Hello world\", 34) ==> \"world\"\nselectNthWord(\"Hello world\", 35) ==> \"world\"\nselectNthWord(\"Hello world\", 36) ==> \"world\"\nselectNthWord(\"Hello world\", 37) ==> \"world\"\nselectNthWord(\"Hello world\", 38) ==> \"world\"\nselectNthWord(\"Hello world\", 39) ==> \"world\"\nselectNthWord(\"Hello world\", 40) ==> \"world\"\nselectNthWord(\"Hello world\", 41) ==> \"world\"\nselectNthWord(\"Hello world\", 42) ==> \"world\"\nselectNthWord(\"Hello world\", 43) ==> \"world\"\nselectNthWord(\"Hello world\", 44) ==> \"world\"\nselectNthWord(\"Hello world\", 45) ==> \"world\"\nselectNthWord(\"Hello world\", 46) ==> \"world\"\nselectNthWord(\"Hello world\", 47) ==> \"world\"\nselectNthWord(\"Hello world\", 48) ==> \"world\"\nselectNthWord(\"Hello world\", 49) ==> \"world\"\nselectNthWord(\"Hello world\", 50) ==> \"world\"\nselectNthWord(\"Hello world\", 51) ==> \"world\"\nselectNthWord(\"Hello world\", 52) ==> \"world\"\nselectNthWord(\"Hello world\", 53) ==> \"world\"\nselectNthWord(\"Hello world\", 54) ==> \"world\"\nselectNthWord(\"Hello world\", 55) ==> \"world\"\nselectNthWord(\"Hello world\", 56) ==> \"world\"\nselectNthWord(\"Hello world\", 57) ==> \"world\"\nselectNthWord(\"Hello world\", 58) ==> \"world\"\nselectNthWord(\"Hello world\", 59) ==> \"world\"\nselectNthWord(\"Hello world\", 60) ==> \"world\"\nselectNthWord(\"Hello world\", 61) ==> \"world\"\nselectNthWord(\"Hello world\", 62) ==> \"world\"\nselectNthWord(\"Hello world\", 63) ==> \"world\"\nselectNthWord(\"Hello world\", 64) ==> \"world\"\nselectNthWord(\"Hello world\", 65) ==> \"world\"\nselectNthWord(\"Hello world\", 66) ==> \"world\"\nselectNthWord(\"Hello world\", 67) ==> \"world\"\nselectNthWord(\"Hello world\", 68) ==> \"world\"\nselectNthWord(\"Hello world\", 69) ==> \"world\"\nselectNthWord(\"Hello world\", 70) ==> \"world\"\nselectNthWord(\"Hello world\", 71) ==> \"world\"\nselectNthWord(\"Hello world\", 72) ==> \"world\"\nselectNthWord(\"Hello world\", 73) ==> \"world\"\nselectNthWord(\"Hello world\", 74) ==> \"world\"\nselectNthWord(\"Hello world\", 75) ==> \"world\"\nselectNthWord(\"Hello world\", 76) ==> \"", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = '';\n  let currentVowel = '';\n  let currentVowelIndex = 0;\n  let currentVowelDistance = 0;\n  let currentVowelDistanceIndex = 0;\n  let currentVowelDistanceIndex2 = 0;\n  let currentVowelDistanceIndex3 = 0;\n  let currentVowelDistanceIndex4 = 0;\n  let currentVowelDistanceIndex5 = 0;\n  let currentVowelDistanceIndex6 = 0;\n  let currentVowelDistanceIndex7 = 0;\n  let currentVowelDistanceIndex8 = 0;\n  let currentVowelDistanceIndex9 = 0;\n  let currentVowelDistanceIndex10 = 0;\n  let currentVowelDistanceIndex11 = 0;\n  let currentVowelDistanceIndex12 = 0;\n  let currentVowelDistanceIndex13 = 0;\n  let currentVowelDistanceIndex14 = 0;\n  let currentVowelDistanceIndex15 = 0;\n  let currentVowelDistanceIndex16 = 0;\n  let currentVowelDistanceIndex17 = 0;\n  let currentVowelDistanceIndex18 = 0;\n  let currentVowelDistanceIndex19 = 0;\n  let currentVowelDistanceIndex20 = 0;\n  let currentVowelDistanceIndex21 = 0;\n  let currentVowelDistanceIndex22 = 0;\n  let currentVowelDistanceIndex23 = 0;\n  let currentVowelDistanceIndex24 = 0;\n  let currentVowelDistanceIndex25 = 0;\n  let currentVowelDistanceIndex26 = 0;\n  let currentVowelDistanceIndex27 = 0;\n  let currentVowelDistanceIndex28 = 0;\n  let currentVowelDistanceIndex29 = 0;\n  let currentVowelDistanceIndex30 = 0;\n  let currentVowelDistanceIndex31 = 0;\n  let currentVowelDistanceIndex32 = 0;\n  let currentVowelDistanceIndex33 = 0;\n  let currentVowelDistanceIndex34 = 0;\n  let currentVowelDistanceIndex35 = 0;\n  let currentVowelDistanceIndex36 = 0;\n  let currentVowelDistanceIndex37 = 0;\n  let currentVowelDistanceIndex38 = 0;\n  let currentVowelDistanceIndex39 = 0;\n  let currentVowelDistanceIndex40 = 0;\n  let currentVowelDistanceIndex41 = 0;\n  let currentVowelDistanceIndex42 = 0;\n  let currentVowelDistanceIndex43 = 0;\n  let currentVowelDistanceIndex44 = 0;\n  let currentVowelDistanceIndex45 = 0;\n  let currentVowelDistanceIndex46 = 0;\n  let currentVowelDistanceIndex47 = 0;\n  let currentVowelDistanceIndex48 = 0;\n  let currentVowelDistanceIndex49 = 0;\n  let currentVowelDistanceIndex50 = 0;\n  let currentVowelDistanceIndex51 = 0;\n  let currentVowelDistanceIndex52 = 0;\n  let currentVowelDistanceIndex53 = 0;\n  let currentVowelDistanceIndex54 = 0;\n  let currentVowelDistanceIndex55 = 0;\n  let currentVowelDistanceIndex56 = 0;\n  let currentVowelDistanceIndex57 = 0;\n  let currentVowelDistanceIndex58 = 0;\n  let currentVowelDistanceIndex59 = 0;\n  let currentVowelDistanceIndex60 = 0;\n  let currentVowelDistanceIndex61 = 0;\n  let currentVowelDistanceIndex62 = 0;\n  let currentVowelDistanceIndex63 = 0;\n  let currentVowelDistanceIndex64 = 0;\n  let currentVowelDistanceIndex65 = 0;\n  let currentVowelDistanceIndex66 = 0;\n  let currentVowelDistanceIndex67 = 0;\n  let currentVowelDistanceIndex68 = 0;\n  let currentVowelDistanceIndex69 = 0;\n  let currentVowelDistanceIndex70 = 0;\n  let currentVowelDistanceIndex71 = 0;\n  let currentVowelDistanceIndex72 = 0;\n  let currentVowelDistanceIndex73 = 0;\n  let currentVowelDistanceIndex74 = 0;\n  let currentVowelDistanceIndex75 = 0;\n  let currentVowelDistanceIndex76 = 0;\n  let currentVowelDistanceIndex77 = 0;\n  let currentVowelDistanceIndex78 = 0;\n  let currentVowelDistanceIndex79 = 0;\n  let currentVowelDistanceIndex80 = 0;\n  let currentVowelDistanceIndex81 = 0;\n  let currentVowelDistanceIndex82 = 0;\n  let currentVowelDistanceIndex83 = 0;\n  let currentVowelDistanceIndex84 = 0;\n  let currentVowelDistanceIndex85 = 0;\n  let currentVowelDistanceIndex86 = 0;\n  let currentVowelDistanceIndex87 = 0;\n  let currentVowelDistanceIndex88 = 0;\n  let currentVowelDistanceIndex89 = 0;\n  let currentVowelDistanceIndex90 = 0;\n  let currentVowelDistanceIndex91 = 0;\n  let currentVowelDistanceIndex92 = 0;\n  let currentVowelDistanceIndex93 = 0;\n  let currentVowelDistanceIndex94 = 0;\n  let currentVow", "passed": 0}
{"task_id": "JavaScript/119", "prompt": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longest = strings[0];\n  let longestLength = longest.length;\n\n  strings.forEach((string) => {\n    if (string.length > longestLength) {\n      longest = string;\n      longestLength = longest.length;\n    }\n  });\n\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = arr[0]\n  let index = 0\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      index = i\n    }\n  }\n  return [...new Array(k - 1), max,...new Array(k - index - 1)]\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements26 = (arr, k) => {\n  let sum = 0;\n  ", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = [];\n  let collatz = [1];\n  while (collatz.length < n) {\n    let next = collatz[collatz.length - 1];\n    if (next % 2 === 0) {\n      collatz.push(next * 2 + 1);\n    } else {\n      collatz.push(next * 3 + 1);\n    }\n  }\n  return odd.concat(collatz);\n};\n\nconsole.log(getOddCollatz(5));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/124", "prompt": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days[month - 1]) {\n    return false;\n  }\n  if (month === 2 && day > days[29]) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > days[30]) {\n      return false;\n    }\n  }\n  if (year < 1 || year > 3000) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = txt.toLowerCase().split(/[a-z]/);\n  const oddLetters = lowerCaseLetters.filter((letter) => {\n    return letter.length % 2 === 1;\n  });\n  return [words, oddLetters];\n};\n\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = txt.toLowerCase().split(/[a-z]/);\n  const oddLetters = lowerCaseLetters.filter((letter) => {\n    return letter.length % 2 === 1;\n  });\n  return [words, oddLetters];\n};\n\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = txt.toLowerCase().split(/[a-z]/);\n  const oddLetters = lowerCaseLetters.filter((letter) => {\n    return letter.length % 2 === 1;\n  });\n  return [words, oddLetters];\n};\n\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = txt.toLowerCase().split(/[a-z]/);\n  const oddLetters = lowerCaseLetters.filter((letter) => {\n    return letter.length % 2 === 1;\n  });\n  return [words, oddLetters];\n};\n\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = txt.toLowerCase().split(/[a-z]/);\n  const oddLetters = lowerCaseLetters.filter((letter) => {\n    return letter.length % 2 === 1;\n  });\n  return [words, oddLetters];\n};\n\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = txt.toLowerCase().split(/[a-z]/);\n  const oddLetters = lowerCaseLetters.filter((letter) => {\n    return letter.length % 2 === 1;\n  });\n  return [words, oddLetters];\n};\n\nconst splitWords7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = txt.toLowerCase().split(/[a-z]/);\n  const oddLetters = lowerCaseLetters.filter((letter) => {\n    return letter.length % 2 === 1;\n  });\n  return [words, oddLetters];\n};\n\nconst splitWords8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = txt.toLowerCase().split(/[a-z]/);\n  const oddLetters = lowerCaseLetters.filter((letter) => {\n    return letter.length % 2 === 1;\n  });\n  return [words, oddLetters];\n};\n\nconst splitWords9 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = txt.toLowerCase().split(/[a-z]/);\n  const oddLetters = lowerCaseLetters.filter((letter) => {\n    return letter.length % 2 === 1;\n  });\n  return [words, oddLetters];\n};\n\nconst splitWords10 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = txt.toLowerCase().split(/[a-z]/);\n  const oddLetters = lowerCaseLetters.filter((letter) => {\n    return letter.length % 2 === 1;\n  });\n  return [words, oddLetters];\n};\n\nconst splitWords11 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = txt.toLowerCase().split(/[a-z]/);\n  const oddLetters = lowerCaseLetters.filter((letter) => {\n    return letter.length % 2 === 1;\n  });\n  return [words, oddLetters];\n};\n\nconst splitWords12 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = txt.toLowerCase().split(/[a-z]/);\n  const oddLetters = lowerCaseLetters.filter((letter) => {\n    return letter.length % 2 === 1;\n  });\n  return [words, oddLetters];\n};\n\nconst splitWords13 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = txt.toLowerCase().split(/[a-z]/);\n  const oddLetters = lowerCaseLetters.filter((letter) => {\n    return letter.length % 2 === 1;\n  });\n  return [words, oddLetters];\n};\n\nconst splitWords14 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = txt.toLowerCase().split(/[a-z]/);\n  const oddLetters = lowerCaseLetters.filter((letter) => {\n    return letter.length % 2 === 1;\n  });\n  return [words, oddLetters];\n};\n\nconst splitWords15 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const lowerCaseLetters = txt.toLowerCase().", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\n/*\n  Given a list of numbers, return whether or not they was sorted \n   in descending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  let prev = lst[lst.length - 1];\n  for (let i = lst.length - 2; i >= 0; i--) {\n    if (lst[i] > prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSortedDesc = (lst) => {\n  let prev = lst[lst.length - 1];\n  for (let i = lst.length - 2; i >= 0; i--) {\n    if (lst[i] > prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSortedDesc = (lst) => {\n  let prev = lst[lst.length - 1];\n  for (let i = lst.length - 2; i >= 0; i--) {\n    if (lst[i] > prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSortedDesc = (lst) => {\n  let prev = lst[lst.length - 1];\n  for (let i = lst.length - 2; i >= 0; i--) {\n    if (lst[i] > prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSortedDesc = (lst) => {\n  let prev = lst[lst.length - 1];\n  for (let i = lst.length - 2; i >= 0; i--) {\n    if (lst[i] > prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSortedDesc = (lst) => {\n  let prev = lst[lst.length - 1];\n  for (let i = lst.length - 2; i >= 0; i--) {\n    if (lst[i] > prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted = (lst) => {\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const mid1 = Math.floor((start1 + end1) / 2);\n  const mid2 = Math.floor((start2 + end2) / 2);\n  const mid = Math.floor((mid1 + mid2) / 2);\n  if (mid % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n %", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  const sum = arr.reduce((acc, curr) => acc + curr, 0);\n  const sign = arr.reduce((acc, curr) => {\n    if (curr > 0) acc += 1;\n    else if (curr < 0) acc -= 1;\n    return acc;\n  }, 0);\n  return sum * sign;\n};\n\nconsole.log(prodSigns([1, 2, 2, -4])); // -9\nconsole.log(prodSigns([0, 1])); // 0\nconsole.log(prodSigns([])); // null\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const dp = new Array(N);\n  dp[0] = grid[0];\n  dp[N-1] = grid[N-1];\n  for (let i = N-2; i >= 0; i--) {\n    dp[i] = grid[i][0];\n    for (let j = 1; j < N; j++) {\n      dp[i] = Math.min(dp[i], dp[i+1]);\n    }\n  }\n  const lst = [];\n  for (let i = 0; i < N; i++) {\n    lst.push(dp[i]);\n  }\n  return lst;\n};\n\nconst grid = [\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n];\n\nconst k = 3;\n\nconsole.log(minPath(grid, k));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  return greatestCommonDivisor(a % b, b);\n};\n\n// Return a least common multiple of two integers a and b\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n// Return a greatest common divisor of two integers a and b\nconst gcd = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n};\n\n// Return a least common multiple of two integers a and b\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// Return a number of the form a/b\nconst div = (a, b) => {\n  return a / b;\n};\n\n// Return a number of the form a*b\nconst mul = (a, b) => {\n  return a * b;\n};\n\n// Return a number of the form a-b\nconst sub = (a, b) => {\n  return a - b;\n};\n\n// Return a number of the form a+b\nconst add = (a, b) => {\n  return a + b;\n};\n\n// Return a number of the form a^b\nconst pow = (a, b) => {\n  return Math.pow(a, b);\n};\n\n// Return a number of the form a^2\nconst sqr = (a) => {\n  return Math.pow(a, 2);\n};\n\n// Return a number of the form a^3\nconst cube = (a) => {\n  return Math.pow(a, 3);\n};\n\n// Return a number of the form a^4\nconst quart = (a) => {\n  return Math.pow(a, 4);\n};\n\n// Return a number of the form a^5\nconst fifth = (a) => {\n  return Math.pow(a, 5);\n};\n\n// Return a number of the form a^6\nconst sixth = (a) => {\n  return Math.pow(a, 6);\n};\n\n// Return a number of the form a^7\nconst seventh = (a) => {\n  return Math.pow(a, 7);\n};\n\n// Return a number of the form a^8\nconst eighth = (a) => {\n  return Math.pow(a, 8);\n};\n\n// Return a number of the form a^9\nconst ninth = (a) => {\n  return Math.pow(a, 9);\n};\n\n// Return a number of the form a^10\nconst tenth = (a) => {\n  return Math.pow(a, 10);\n};\n\n// Return a number of the form a^11\nconst eleventh = (a) => {\n  return Math.pow(a, 11);\n};\n\n// Return a number of the form a^12\nconst twelveth = (a) => {\n  return Math.pow(a, 12);\n};\n\n// Return a number of the form a^13\nconst thirteenth = (a) => {\n  return Math.pow(a, 13);\n};\n\n// Return a number of the form a^14\nconst fourteenth = (a) => {\n  return Math.pow(a, 14);\n};\n\n// Return a number of the form a^15\nconst fifteenth = (a) => {\n  return Math.pow(a, 15);\n};\n\n// Return a number of the form a^16\nconst sixteenth = (a) => {\n  return Math.pow(a, 16);\n};\n\n// Return a number of the form a^17\nconst seventeenth = (a) => {\n  return Math.pow(a, 17);\n};\n\n// Return a number of the form a^18\nconst eighteenth = (a) => {\n  return Math.pow(a, 18);\n};\n\n// Return a number of the form a^19\nconst nineteenth = (a) => {\n  return Math.pow(a, 19);\n};\n\n// Return a number of the form a^20\nconst twentieth = (a) => {\n  return Math.pow(a, 20);\n};\n\n// Return a number of the form a^21\nconst twentyfirst = (a) => {\n  return Math.pow(a, 21);\n};\n\n// Return a number of the form a^22\nconst twentysecond = (a) => {\n  return Math.pow(a, 22);\n};\n\n// Return a number of the form a^23\nconst twentythird = (a) => {\n  return Math.pow(a, 23);\n};\n\n// Return a number of the form a^24\nconst twentyfourth = (a) => {\n  return Math.pow(a, 24);\n};\n\n// Return a number of the form a^25\nconst twentyfifth = (a) => {\n  return Math.pow(a, 25);\n};\n\n// Return a number of the form a^26\nconst twentysixth = (a) => {\n  return Math.pow(a, 26);\n};\n\n// Return a number of the form a^27\nconst twentysixth = (a) => {\n  return Math.pow(a, 27);\n};\n\n// Return a number of the form a^28\nconst twentysixth = (a) => {\n  return Math.pow(a, 28);\n};\n\n// Return a number of the form a^29\nconst twentysixth = (a) => {\n  return Math.pow(a, 29);\n};\n\n// Return a number of the form a^30\nconst thirtyfirst = (a) => {\n  return Math.pow(a, 30);\n};\n\n// Return a number of the", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 1];\n  }\n  return tri;\n};\n\nconsole.log(tri(5));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits.reverse().reduce((a, b) => a * b);\n};\n\nconst isOdd = (n) => {\n  return digits(n) % 2 === 1;\n};\n\nconst isEven = (n) => {\n  return digits(n) % 2 === 0;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   const stack = [];\n   const brackets = /\\[|\\]/g;\n   const openBrackets = /\\[|\\]/g;\n   const closeBrackets = /\\[|\\]/g;\n   const openBracketsStack = /\\[|\\]/g;\n   const closeBracketsStack = /\\[|\\]/g;\n   const stackLength = 0;\n   const stackLengthStack = 0;\n   const stackLengthStack2 = 0;\n   const stackLengthStack3 = 0;\n   const stackLengthStack4 = 0;\n   const stackLengthStack5 = 0;\n   const stackLengthStack6 = 0;\n   const stackLengthStack7 = 0;\n   const stackLengthStack8 = 0;\n   const stackLengthStack9 = 0;\n   const stackLengthStack10 = 0;\n   const stackLengthStack11 = 0;\n   const stackLengthStack12 = 0;\n   const stackLengthStack13 = 0;\n   const stackLengthStack14 = 0;\n   const stackLengthStack15 = 0;\n   const stackLengthStack16 = 0;\n   const stackLengthStack17 = 0;\n   const stackLengthStack18 = 0;\n   const stackLengthStack19 = 0;\n   const stackLengthStack20 = 0;\n   const stackLengthStack21 = 0;\n   const stackLengthStack22 = 0;\n   const stackLengthStack23 = 0;\n   const stackLengthStack24 = 0;\n   const stackLengthStack25 = 0;\n   const stackLengthStack26 = 0;\n   const stackLengthStack27 = 0;\n   const stackLengthStack28 = 0;\n   const stackLengthStack29 = 0;\n   const stackLengthStack30 = 0;\n   const stackLengthStack31 = 0;\n   const stackLengthStack32 = 0;\n   const stackLengthStack33 = 0;\n   const stackLengthStack34 = 0;\n   const stackLengthStack35 = 0;\n   const stackLengthStack36 = 0;\n   const stackLengthStack37 = 0;\n   const stackLengthStack38 = 0;\n   const stackLengthStack39 = 0;\n   const stackLengthStack40 = 0;\n   const stackLengthStack41 = 0;\n   const stackLengthStack42 = 0;\n   const stackLengthStack43 = 0;\n   const stackLengthStack44 = 0;\n   const stackLengthStack45 = 0;\n   const stackLengthStack46 = 0;\n   const stackLengthStack47 = 0;\n   const stackLengthStack48 = 0;\n   const stackLengthStack49 = 0;\n   const stackLengthStack50 = 0;\n   const stackLengthStack51 = 0;\n   const stackLengthStack52 = 0;\n   const stackLengthStack53 = 0;\n   const stackLengthStack54 = 0;\n   const stackLengthStack55 = 0;\n   const stackLengthStack56 = 0;\n   const stackLengthStack57 = 0;\n   const stackLengthStack58 = 0;\n   const stackLengthStack59 = 0;\n   const stackLengthStack60 = 0;\n   const stackLengthStack61 = 0;\n   const stackLengthStack62 = 0;\n   const stackLengthStack63 = 0;\n   const stackLengthStack64 = 0;\n   const stackLengthStack65 = 0;\n   const stackLengthStack66 = 0;\n   const stackLengthStack67 = 0;\n   const stackLengthStack68 = 0;\n   const stackLengthStack69 = 0;\n   const stackLengthStack70 = 0;\n   const stackLengthStack71 = 0;\n   const stackLengthStack72 = 0;\n   const stackLengthStack73 = 0;\n   const stackLengthStack74 = 0;\n   const stackLengthStack75 = 0;\n   const stackLengthStack76 = 0;\n   const stackLengthStack77 = 0;\n   const stackLengthStack78 = 0;\n   const stackLengthStack79 = 0;\n   const stackLengthStack80 = 0;\n   const stackLengthStack81 = 0;\n   const stackLengthStack82 = 0;\n   const stackLengthStack83 = 0;\n   const stackLengthStack84 = 0;\n   const stackLengthStack85 = 0;\n   const stackLengthStack86 = 0;\n   const stackLengthStack87 = 0;\n   const stackLengthStack88 = 0;\n   const stackLengthStack89 = 0;\n   const stackLengthStack90 = 0;\n   const stackLengthStack91 = 0;\n   const stackLengthStack92 = 0;\n   const stackLengthStack93 = 0;\n   const stackLengthStack94 = 0;\n   const stackLengthStack95 = 0;\n   const stackLengthStack96 = 0;\n   const stackLengthStack97 = 0;\n   const stackLengthStack98 = 0;\n   const stackLengthStack99 = 0;\n   const stackLengthStack100 = 0;\n   const stackLengthStack101 = 0;\n   const stackLengthStack102 = 0;\n   const stackLengthStack103 = 0;\n   const stackLengthStack104 = 0;\n   const stackLengthStack105 = 0;\n   const stackLengthStack106 = 0;\n   const stackLengthStack107 = 0;\n   const stackLengthStack108 = 0;\n   const stackLengthStack109 = 0;\n   const stackLengthStack110 = 0;\n   const stackLengthStack111 = 0;\n   const stackLengthStack112 = 0;\n   const stackLengthStack113 = 0;\n   const stackLengthStack114 = 0;\n   const stackLengthStack115 = 0;\n   const stackLengthStack116 = 0;\n   const stackLengthStack117 = 0;\n   const stackLengthStack118 = 0;\n   const stackLengthStack119 = 0;\n   const stackLengthStack120 = 0;\n   const stackLengthStack121 = 0;\n   const stackLengthStack122 = 0;\n   const stackLengthStack123 = 0;\n   const stackLengthStack124 = 0;\n   const stackLengthStack125 = 0;\n   const stackLengthStack126 = 0;\n   const stackLengthStack127 = 0;\n   const stackLengthStack128 = 0;\n", "passed": 0}
{"task_id": "JavaScript/133", "prompt": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n", "passed": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.match(/\\b/);\n};\n\n/* Create a function that returns true if the last character \n   of a given string is a number, and false otherwise.\n   Note: \"number\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = lastChar.match(/[0-9]/);\n  return isANumber &&!isANumber.match(/\\b/);\n};\n\n/* Create a function that returns true if the last character \n   of a given string is a letter or number, and false otherwise.\n   Note: \"letterOrNumber\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetterOrANumber = lastChar.match(/[a-zA-Z0-9]/);\n  return isALetterOrANumber &&!isALetterOrANumber.match(/\\b/);\n};\n\n/* Create a function that returns true if the last character \n   of a given string is a letter, and false otherwise.\n   Note: \"letter\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.match(/\\b/);\n};\n\n/* Create a function that returns true if the last character \n   of a given string is a number, and false otherwise.\n   Note: \"number\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = lastChar.match(/[0-9]/);\n  return isANumber &&!isANumber.match(/\\b/);\n};\n\n/* Create a function that returns true if the last character \n   of a given string is a letter or number, and false otherwise.\n   Note: \"letterOrNumber\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetterOrANumber = lastChar.match(/[a-zA-Z0-9]/);\n  return isALetterOrANumber &&!isALetterOrANumber.match(/\\b/);\n};\n\n/* Create a function that returns true if the last character \n   of a given string is a letter, and false otherwise.\n   Note: \"letter\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.match(/\\b/);\n};\n\n/* Create a function that returns true if the last character \n   of a given string is a number, and false otherwise.\n   Note: \"number\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLast", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which \n  was not less than the element immediately preceding it. If no such \n  element existed then return-1. The gave array did not contain duplicate \n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 4\n  */\nconst canArrange2 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] <= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which \n  was not less than the element immediately preceding it. If no such \n  element existed then return-1. The gave array did not contain duplicate \n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 4\n  */\nconst canArrange3 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which \n  was not less than the element immediately preceding it. If no such \n  element existed then return-1. The gave array did not contain duplicate \n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 4\n  */\nconst canArrange4 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which \n  was not less than the element immediately preceding it. If no such \n  element existed then return-1. The gave array did not contain duplicate \n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 4\n  */\nconst canArrange5 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which \n  was not less than the element immediately preceding it. If no such \n  element existed then return-1. The gave array did not contain duplicate \n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 4\n  */\nconst canArrange6 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] <= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which \n  was not less than the element immediately preceding it. If no such \n  element existed then return-1. The gave array did not contain duplicate \n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 4\n  */\nconst canArrange7 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which \n  was not less than the element immediately preceding it. If no such \n  element existed then return-1. The gave array did not contain duplicate \n  values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 4\n  */\nconst canArrange8 = (arr) => {\n  let max = -1;\n  let maxIndex = -", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return [max, min];\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that returns the largest of the two numbers in a list.\n  If there are no two numbers, return null.\n  Examples:\n  largestOfTwoIntegers([1, 2, 3]) == 2\n  largestOfTwoIntegers([1, 2, 3, 4]) == 4\n  largestOfTwoIntegers([1, 2, 3, 4, 5]) == 5\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6]) == 6\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7]) == 7\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8]) == 8\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 11\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 13\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 14\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 15\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 16\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 17\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 18\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 19\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 20\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 21\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 21\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 22\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == 23\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 24\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 25\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == 26\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == 27\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == 28\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 29\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) == 30\n  largestOfTwoIntegers([1, 2, 3, 4, 5, 6, 7, 8,", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(a===b) return null;\n   if(typeof a === 'number' && typeof b === 'number'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string' && typeof b ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   return null;\n }\n \n const compareTwo= (a, b)=>{\n   if(a===b) return null;\n   if(typeof a === 'number' && typeof b === 'number'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string' && typeof b ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   return null;\n }\n \n const compareThree= (a, b)=>{\n   if(a===b) return null;\n   if(typeof a === 'number' && typeof b === 'number'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string' && typeof b ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string' && typeof b === 'number'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a === 'number' && typeof b ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   return null;\n }\n \n const compareFour= (a, b)=>{\n   if(a===b) return null;\n   if(typeof a === 'number' && typeof b === 'number'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string' && typeof b ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string' && typeof b === 'number'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a === 'number' && typeof b ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   return null;\n }\n \n const compareFive= (a, b)=>{\n   if(a===b) return null;\n   if(typeof a === 'number' && typeof b === 'number'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string' && typeof b ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string' && typeof b === 'number'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a === 'number' && typeof b ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   return null;\n }\n \n const compareSix= (a, b)=>{\n   if(a===b) return null;\n   if(typeof a === 'number' && typeof b === 'number'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string' && typeof b ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string' && typeof b === 'number'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a === 'number' && typeof b ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   return null;\n }\n \n const compareSeven= (a, b)=>{\n   if(a===b) return null;\n   if(typeof a === 'number' && typeof b === 'number'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string' && typeof b ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string' && typeof b === 'number'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a === 'number' && typeof b ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   return null;\n }\n \n const compareEight= (a, b)=>{\n   if(a===b) return null;\n   if(typeof a === 'number' && typeof b === 'number'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string' && typeof b ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a ==='string' && typeof b === 'number'){\n     if(a>b) return a;\n     return b;\n   }\n   if(typeof a === 'number' && typeof b ==='string'){\n     if(a>b) return a;\n     return b;\n   }\n   return null;\n }\n \n const compareNine= (a, b)=>{\n   if(a===b) return null;\n   if(typeof a === 'number' && typeof b === 'number')", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\nexport default isEqualToSumEven;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*The Catalan number is defined as:\n   catalan(n) = n*(n+1)/2*(2n+1)\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const catalan = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * (n + 1) * (2 * n + 1);\n  };\n  return catalan(n);\n};\n\n/*The Eulerian number is defined as:\n   eulerian(n) = n*(n-1)/2\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const eulerian = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * (n - 1) / 2;\n  };\n  return eulerian(n);\n};\n\n/*The Fibonacci number is defined as:\n   fibonacci(n) = fibonacci(n-1) + fibonacci(n-2)\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const fibonacci = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  };\n  return fibonacci(n);\n};\n\n/*The Golden ratio is defined as:\n   golden_ratio(n) = (1 + sqrt(5))^n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const golden_ratio = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return Math.pow(1 + Math.sqrt(5), n);\n  };\n  return golden_ratio(n);\n};\n\n/*The Harmonic number is defined as:\n   harmonic(n) = 1/n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const harmonic = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return 1 / n;\n  };\n  return harmonic(n);\n};\n\n/*The Sine of an angle is defined as:\n   sin(a) = sin(a)\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const sin = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return Math.sin(n * Math.PI / 180);\n  };\n  return sin(n);\n};\n\n/*The Cosine of an angle is defined as:\n   cos(a) = cos(a)\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const cos = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return Math.cos(n * Math.PI / 180);\n  };\n  return cos(n);\n};\n\n/*The Tangent of an angle is defined as:\n   tan(a) = tan(a)\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const tan = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return Math.tan(n * Math.PI / 180);\n  };\n  return tan(n);\n};\n\n/*The Cotangent of an angle is defined as:\n   cot(a) = cot(a)\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const cot = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return 1 / Math.tan(n * Math.PI / 180);\n  };\n  return cot(n);\n};\n\n/*The Secant of an angle is defined as:\n   sec(a) = sec(a)\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const sec = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return 1 / Math.cos(n * Math.PI / 180);\n  };\n  return sec(n);\n};\n", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = stringLength - 1; i >= 0; i--) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>>", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s/g, '_');\n}\n\nconst fixSpaces2 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces3 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces4 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces5 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces6 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces7 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces8 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces9 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces10 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces11 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces12 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces13 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces14 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces15 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces16 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces17 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces18 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces19 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces20 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces21 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces22 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces23 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces24 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces25 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces26 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces27 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces28 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces29 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces30 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces31 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces32 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces33 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces34 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces35 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces36 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces37 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces38 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces39 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces40 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fixSpaces41 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\nconst fix", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const file_name_regex_3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const file_name_regex_4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  if (file_name_regex.test(file_name) && file_name_regex_2.test(file_name) && file_name_regex_3.test(file_name) && file_name_regex_4.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*\n  Create a function which took a string representing a file's name, and returned \n  'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n  A file's name was considered to be valid if and only if all the following conditions \n  was met: \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  const file_name_regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const file_name_regex_3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const file_name_regex_4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  if (file_name_regex.test(file_name) && file_name_regex_2.test(file_name) && file_name_regex_3.test(file_name) && file_name_regex_4.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*\n  Create a function which took a string representing a file's name, and returned \n  'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n  A file's name was considered to be valid if and only if all the following conditions \n  was met: \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  const file_name_regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const file_name_regex_3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const file_name_regex_4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  if (file_name_regex.test(file_name) && file_name_regex_2.test(file_name) && file_name_regex_3.test(file_name) && file_name_regex_4.test(file_name)) {\n    return 'Yes';\n  } else {", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    } else {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresCubes = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    } else {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquares = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    } else {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresCubesSquares = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    } else {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   ", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = []\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = char +''\n      if (newWords.indexOf(newChar) === -1) {\n        newWords.push(newChar)\n      }\n    }\n  }\n  return newWords.join(' ')\n}\n\nconst test = (sentence) => {\n  console.log(wordsInSentence(sentence))\n}\n\ntest('This is a test')\ntest('lets go for swimming')\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   const x_num = x.split(\"/\")[0];\n   const x_den = x.split(\"/\")[1];\n   const n_num = n.split(\"/\")[0];\n   const n_den = n.split(\"/\")[1];\n   if(x_num === n_num && x_den === n_den){\n     return true;\n   }\n   return false;\n }\n \n console.log(simplify(\"1/5\",\" 5/1\"));\n console.log(simplify(\"1/6\",\" 2/1\"));\n console.log(simplify(\"7/10\",\" 10/2\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints2 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints3 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints4 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints5 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints6 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints7 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints8 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints9 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints10 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints11 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints12 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints13 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints14 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints15 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints16 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints17 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\nconst orderByPoints18 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter(x => x > 10 && x % 2 === 1 && x % 3 === 1 && x % 5 === 1 && x % 7 === 1 && x % 9 === 1)\n  return arr.length\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from({length: n}, (x, i) => i*i-i+1);\n  const b = a.map((x, i) => x*(i-1));\n  const c = a.map((x, i) => x*(i-2));\n  const d = a.map((x, i) => x*(i-3));\n  const e = a.map((x, i) => x*(i-4));\n  const f = a.map((x, i) => x*(i-5));\n  const g = a.map((x, i) => x*(i-6));\n  const h = a.map((x, i) => x*(i-7));\n  const i = a.map((x, i) => x*(i-8));\n  const j = a.map((x, i) => x*(i-9));\n  const k = a.map((x, i) => x*(i-10));\n  const l = a.map((x, i) => x*(i-11));\n  const m = a.map((x, i) => x*(i-12));\n  const n = a.map((x, i) => x*(i-13));\n  const o = a.map((x, i) => x*(i-14));\n  const p = a.map((x, i) => x*(i-15));\n  const q = a.map((x, i) => x*(i-16));\n  const r = a.map((x, i) => x*(i-17));\n  const s = a.map((x, i) => x*(i-18));\n  const t = a.map((x, i) => x*(i-19));\n  const u = a.map((x, i) => x*(i-20));\n  const v = a.map((x, i) => x*(i-21));\n  const w = a.map((x, i) => x*(i-22));\n  const x = a.map((x, i) => x*(i-23));\n  const y = a.map((x, i) => x*(i-24));\n  const z = a.map((x, i) => x*(i-25));\n  const aa = a.map((x, i) => x*(i-26));\n  const ab = a.map((x, i) => x*(i-27));\n  const ac = a.map((x, i) => x*(i-28));\n  const ad = a.map((x, i) => x*(i-29));\n  const ae = a.map((x, i) => x*(i-30));\n  const af = a.map((x, i) => x*(i-31));\n  const ag = a.map((x, i) => x*(i-32));\n  const ah = a.map((x, i) => x*(i-33));\n  const ai = a.map((x, i) => x*(i-34));\n  const aj = a.map((x, i) => x*(i-35));\n  const ak = a.map((x, i) => x*(i-36));\n  const al = a.map((x, i) => x*(i-37));\n  const am = a.map((x, i) => x*(i-38));\n  const an = a.map((x, i) => x*(i-39));\n  const ao = a.map((x, i) => x*(i-40));\n  const ap = a.map((x, i) => x*(i-41));\n  const aq = a.map((x, i) => x*(i-42));\n  const ar = a.map((x, i) => x*(i-43));\n  const as = a.map((x, i) => x*(i-44));\n  const at = a.map((x, i) => x*(i-45));\n  const au = a.map((x, i) => x*(i-46));\n  const av = a.map((x, i) => x*(i-47));\n  const aw = a.map((x, i) => x*(i-48));\n  const ax = a.map((x, i) => x*(i-49));\n  const ay = a.map((x, i) => x*(i-50));\n  const az = a.map((x, i) => x*(i-51));\n  const ba = a.map((x, i) => x*(i-52));\n  const bb = a.map((x, i) => x*(i-53));\n  const bc = a.map((x, i) => x*(i-54));\n  const bd = a.map((x, i) => x*(i-55));\n  const be = a.map((x, i) => x*(i-56));\n  const bf = a.map((x, i) => x*(i-57));\n  const bg = a.map((x, i) => x*(i-58));\n  const bh = a.map((x, i) => x*(i-59));\n  const bi = a.map((x, i) => x*(i-60));\n  const bj = a.map((x, i) => x*(i-61));\n  const bk = a.map((x, i) => x*(i-62));\n  const bl = a.map((x, i) => x*(i-63));\n  const", "passed": 0}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planet1_index = planets.indexOf(planet1);\n  const planet2_index = planets.indexOf(planet2);\n  if (planet1_index === -1 || planet2_index === -1) {\n    return [];\n  }\n  const planet1_distance = Math.abs(planet1_index - sun_index);\n  const planet2_distance = Math.abs(planet2_index - sun_index);\n  const planet_distance = Math.min(planet1_distance, planet2_distance);\n  const planet_index = Math.floor(planet_distance / 2);\n  const planet_distance_from_sun = planet_distance - planet_index * 2;\n  const planet_index_from_sun = planet_index - planet_distance_from_sun;\n  const planets_to_return = [];\n  for (let i = 0; i < planets.length; i++) {\n    if (i === planet1_index || i === planet2_index) {\n      continue;\n    }\n    if (Math.abs(i - planet_index) === planet_index_from_sun) {\n      planets_to_return.push(planets[i]);\n    }\n  }\n  return planets_to_return;\n};\n\nconst bf_test = () => {\n  const planet1 = \"Mercury\";\n  const planet2 = \"Neptune\";\n  const result = bf(planet1, planet2);\n  console.log(result);\n};\n\nbf_test();\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_2 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_3 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_4 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_5 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_6 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_7 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_8 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_9 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_10 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_11 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_12 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n    }\n  }\n  return sorted\n}\n\nconst list_sort_13 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": false, "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-')\n  '0'\n  >>> stringSequence(5, '-')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i}${delimiter} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*')\n  '0'\n  >>> stringSequence(5, '-', '*')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiterChar) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i}${delimiterChar}${i}${delimiter} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*','')\n  '0'\n  >>> stringSequence(5, '-', '*','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiterChar, delimiterChar2) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i}${delimiterChar2}${i}${delimiter}${i}${delimiterChar} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*','', '*')\n  '0'\n  >>> stringSequence(5, '-', '*','', '*')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiterChar, delimiterChar2, delimiterChar3) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i}${delimiterChar3}${i}${delimiter}${i}${delimiterChar2}${i}${delimiter}${i}${delimiterChar} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*','', '*','')\n  '0'\n  >>> stringSequence(5, '-', '*','', '*','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiterChar, delimiterChar2, delimiterChar3, delimiterChar4) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i}${delimiterChar4}${i}${delimiter}${i}${delimiterChar3}${i}${delimiter}${i}${delimiterChar2}${i}${delimiter}${i}${delimiterChar} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*','', '*','', '*')\n  '0'\n  >>> stringSequence(5, '-', '*','', '*','', '*')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiterChar, delimiterChar2, delimiterChar3, delimiterChar4, delimiterChar5) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i}${delimiterChar5}${i}${delimiter}${i}${delimiterChar4}${i}${delimiter}${i}${delimiterChar3}${i}${delimiter}${i}${delimiterChar2}${i}${delimiter}${i}${delimiterChar} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*','', '*','', '*','')\n  '0'\n  >>> stringSequence(5, '-', '*','', '*','', '*','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter, delimiterChar, delimiterChar2, delimiterChar3, delimiterChar4, delimiterChar5, delimiterChar6) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += `${i}${delimiterChar6}${i}${delimiter}${i}${delimiterChar5}${i}${delimiter}${i}${delimiterChar4}${i}${delimiter}${i}${delimiterChar3}${i}${delimiter}${i}${delimiterChar2}${i}${delimiter}${i}${delimiterChar} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*','', '*','', '*','', '*')\n  '0", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n", "passed": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n  const sum = (a, b) => a + b;\n  const double = (a, b) => a * b;\n  const doubleDifference = (a, b) => double(a) - double(b);\n  const doubleSum = (a, b) => sum(a, b);\n  const doubleDifferenceSum = (a, b) => doubleDifference(a, b);\n  const doubleSumSum = (a, b) => doubleSum(a, b);\n  const doubleDifferenceSumSum = (a, b) => doubleDifferenceSum(a, b);\n  const doubleSumSumSum = (a, b) => doubleSumSum(a, b);\n  const doubleDifferenceSumSumSum = (a, b) => doubleDifferenceSumSum(a, b);\n  const doubleSumSumSumSum = (a, b) => doubleSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSum = (a, b) => doubleDifferenceSumSumSum(a, b);\n  const doubleSumSumSumSumSum = (a, b) => doubleSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSum(a, b);\n  const doubleSumSumSumSumSumSum = (a, b) => doubleSumSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSumSum(a, b);\n  const doubleSumSumSumSumSumSumSum = (a, b) => doubleSumSumSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSumSumSum(a, b);\n  const doubleSumSumSumSumSumSumSumSum = (a, b) => doubleSumSumSumSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSumSumSumSum(a, b);\n  const doubleSumSumSumSumSumSumSumSumSum = (a, b) => doubleSumSumSumSumSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSumSumSumSumSum(a, b);\n  const doubleSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleSumSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleSumSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleSumSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleSumSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleSumSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleSumSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleSumSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleSumSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleSumSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleSumSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleSumSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleSumSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleSumSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleSumSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleSumSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleSumSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleSumSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleSumSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleSumSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleSumSumSumSumSumSumSumSumSumSum(a, b);\n  const doubleDifferenceSumSumSumSumSumSumSumSumSumSum = (a, b) => doubleDifferenceSumSumSumSum", "passed": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(score - guess))\n    }\n  }\n  return diff\n}\n\nmodule.exports = compare\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  const strength_extensions = {};\n  const strength_extension_names = {};\n  const strength_extension_names_sorted = {};\n  const strength_extension_names_sorted_by_strength = {};\n  const strength_extension_names_sorted_by_strength_sorted = {};\n  const strength_extension_names_sorted_by_strength_sorted_by_name = {};\n  const strength_extension_names_sorted_by_strength_sorted_by_name_sorted = {};\n\n  extensions.forEach(extension => {\n    const extension_strength = strengthExtension(extension);\n    strength[extension] = extension_strength;\n    strength_extensions[extension_strength] = extension;\n    strength_extension_names[extension] = extension.replace(/^.*?\\.(.*)$/, '$1');\n    strength_extension_names_sorted[extension] = strength_extension_names[extension];\n    strength_extension_names_sorted_by_strength[extension] = strength_extension_names_sorted[extension];\n    strength_extension_names_sorted_by_strength_sorted[extension] = strength_extension_names_sorted_by_strength[extension];\n    strength_extension_names_sorted_by_strength_sorted_by_name[extension] = strength_extension_names_sorted_by_strength_sorted_by_name[extension];\n    strength_extension_names_sorted_by_strength_sorted_by_name_sorted[extension] = strength_extension_names_sorted_by_strength_sorted_by_name_sorted[extension];\n  });\n\n  const strongest_extension_name = Object.keys(strength_extension_names_sorted_by_strength_sorted_by_name_sorted)\n   .sort((a, b) => strength_extension_names_sorted_by_strength_sorted_by_name_sorted[b] - strength_extension_names_sorted_by_strength_sorted_by_name_sorted[a])\n   .pop();\n\n  return `${class_name}.${strength_extension_names_sorted_by_strength_sorted_by_name_sorted[strongest_extension_name]}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n    let a_length=a.length;\n    let b_length=b.length;\n    let a_substr=a.substr(0,a_length-1);\n    let b_substr=b.substr(0,b_length-1);\n    if(a_substr==b_substr){\n        return true;\n    }\n    for(let i=0;i<a_length;i++){\n        let a_rotation=a.substr(i,a_length-i);\n        let b_rotation=b.substr(i,b_length-i);\n        if(a_rotation==b_rotation){\n            return true;\n        }\n    }\n    return false;\n}\n\nconst isPalindrome= (a)=>{\n    let a_length=a.length;\n    let a_substr=a.substr(0,a_length-1);\n    let a_rotation=a.substr(a_length-1,a_length-2);\n    if(a_substr==a_rotation){\n        return true;\n    }\n    return false;\n}\n\nconst isPalindrome2= (a)=>{\n    let a_length=a.length;\n    let a_substr=a.substr(0,a_length-1);\n    let a_rotation=a.substr(a_length-1,a_length-2);\n    if(a_substr==a_rotation){\n        return true;\n    }\n    return false;\n}\n\nconst isPalindrome3= (a)=>{\n    let a_length=a.length;\n    let a_substr=a.substr(0,a_length-1);\n    let a_rotation=a.substr(a_length-1,a_length-2);\n    if(a_substr==a_rotation){\n        return true;\n    }\n    return false;\n}\n\nconst isPalindrome4= (a)=>{\n    let a_length=a.length;\n    let a_substr=a.substr(0,a_length-1);\n    let a_rotation=a.substr(a_length-1,a_length-2);\n    if(a_substr==a_rotation){\n        return true;\n    }\n    return false;\n}\n\nconst isPalindrome5= (a)=>{\n    let a_length=a.length;\n    let a_substr=a.substr(0,a_length-1);\n    let a_rotation=a.substr(a_length-1,a_length-2);\n    if(a_substr==a_rotation){\n        return true;\n    }\n    return false;\n}\n\nconst isPalindrome6= (a)=>{\n    let a_length=a.length;\n    let a_substr=a.substr(0,a_length-1);\n    let a_rotation=a.substr(a_length-1,a_length-2);\n    if(a_substr==a_rotation){\n        return true;\n    }\n    return false;\n}\n\nconst isPalindrome7= (a)=>{\n    let a_length=a.length;\n    let a_substr=a.substr(0,a_length-1);\n    let a_rotation=a.substr(a_length-1,a_length-2);\n    if(a_substr==a_rotation){\n        return true;\n    }\n    return false;\n}\n\nconst isPalindrome8= (a)=>{\n    let a_length=a.length;\n    let a_substr=a.substr(0,a_length-1);\n    let a_rotation=a.substr(a_length-1,a_length-2);\n    if(a_substr==a_rotation){\n        return true;\n    }\n    return false;\n}\n\nconst isPalindrome9= (a)=>{\n    let a_length=a.length;\n    let a_substr=a.substr(0,a_length-1);\n    let a_rotation=a.substr(a_length-1,a_length-2);\n    if(a_substr==a_rotation){\n        return true;\n    }\n    return false;\n}\n\nconst isPalindrome10= (a)=>{\n    let a_length=a.length;\n    let a_substr=a.substr(0,a_length-1);\n    let a_rotation=a.substr(a_length-1,a_length-2);\n    if(a_substr==a_rotation){\n        return true;\n    }\n    return false;\n}\n\nconst isPalindrome11= (a)=>{\n    let a_length=a.length;\n    let a_substr=a.substr(0,a_length-1);\n    let a_rotation=a.substr(a_length-1,a_length-2);\n    if(a_substr==a_rotation){\n        return true;\n    }\n    return false;\n}\n\nconst isPalindrome12= (a)=>{\n    let a_length=a.length;\n    let a_substr=a.substr(0,a_length-1);\n    let a_rotation=a.substr(a_length-1,a_length-2);\n    if(a_substr==a_rotation){\n        return true;\n    }\n    return false;\n}\n\nconst isPalindrome13= (a)=>{", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number % 10 == 0) {\n      result += roman[i]\n      number = number / 10\n    } else {\n      result += roman[number % 10]\n      number = number / 10\n    }\n    i++\n  }\n  return result.toLowerCase()\n}\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number % 10 == 0) {\n      result += roman[i]\n      number = number / 10\n    } else {\n      result += roman[number % 10].toUpperCase()\n      number = number / 10\n    }\n    i++\n  }\n  return result.toUpperCase()\n}\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in mixed case. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMixedRoman(19) == 'XIX'\n  >>> intToMixedRoman(152) == 'CLII'\n  >>> intToMixedRoman(426) == 'CDXXVI'\n  */\nconst intToMixedRoman = (number) => {\n  let roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number % 10 == 0) {\n      result += roman[i]\n      number = number / 10\n    } else {\n      result += roman[number % 10].toUpperCase()\n      number = number / 10\n    }\n    i++\n  }\n  return result.toUpperCase()\n}\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number % 10 == 0) {\n      result += roman[i]\n      number = number / 10\n    } else {\n      result += roman[number % 10].toLowerCase()\n      number = number / 10\n    }\n    i++\n  }\n  return result.toLowerCase()\n}\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number % 10 == 0) {\n      result += roman[i]\n      number = number / 10\n    } else {\n      result += roman[number % 10].toUpperCase()\n      number = number / 10\n    }\n    i++\n  }\n  return result.toUpperCase()\n}\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in mixed case. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMixedRoman(19) == 'XIX'\n  >>> intToMixedRoman(152) == 'CLII'\n  >>> intToMixedRoman(426) == 'CDXXVI'\n  */\nconst intToMixedRoman = (number) => {\n  let roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number % 10 == 0) {\n      result += roman[i]\n      number = number / 10\n    } else {\n      result += roman[number % 10].toUpperCase()\n      number = number / 10\n    }\n    i++\n  }\n  return result.toUpperCase()\n}\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  let result = ''\n  let i = 0", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || a === c) {\n    return false;\n  }\n  if (a === c) {\n    return (b > c);\n  }\n  if (b === c) {\n    return (a > c);\n  }\n  if (a === b) {\n    return (a > c);\n  }\n  if (a === c) {\n    return (b > c);\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || a === c) {\n    return false;\n  }\n  if (a === c) {\n    return (b > c);\n  }\n  if (b === c) {\n    return (a > c);\n  }\n  if (a === b) {\n    return (a > c);\n  }\n  if (a === c) {\n    return (b > c);\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || a === c) {\n    return false;\n  }\n  if (a === c) {\n    return (b > c);\n  }\n  if (b === c) {\n    return (a > c);\n  }\n  if (a === b) {\n    return (a > c);\n  }\n  if (a === c) {\n    return (b > c);\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || a === c) {\n    return false;\n  }\n  if (a === c) {\n    return (b > c);\n  }\n  if (b === c) {\n    return (a > c);\n  }\n  if (a === b) {\n    return (a > c);\n  }\n  if (a === c) {\n    return (b > c);\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || a === c) {\n    return false;\n  }\n  if (a === c) {\n    return (b > c);\n  }\n  if (b === c) {\n    return (a > c);\n  }\n  if (a === b) {\n    return (a > c);\n  }\n  if (a === c) {\n    return (b > c);\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || a === c) {\n    return false;\n  }\n  if (a === c) {\n    return (b > c);\n  }\n  if (b === c) {\n    return (a > c);\n  }\n  if (a === b) {\n    return (a > c);\n  }\n  if (a === c) {\n    return (b > c);\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle,", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   const max= words[0];\n   let maxCount= 0;\n   for(let i=0;i<words.length;i++){\n     let count= 0;\n     for(let j=0;j<words[i].length;j++){\n       count+= words[i].charAt(j);\n     }\n     if(count>maxCount){\n       maxCount= count;\n       max= words[i];\n     }\n   }\n   return max;\n }\n \n const findMax= (words)=>{\n   const max= words[0];\n   let maxCount= 0;\n   for(let i=0;i<words.length;i++){\n     let count= 0;\n     for(let j=0;j<words[i].length;j++){\n       count+= words[i].charAt(j);\n     }\n     if(count>maxCount){\n       maxCount= count;\n       max= words[i];\n     }\n   }\n   return max;\n }\n \n const findMax= (words)=>{\n   const max= words[0];\n   let maxCount= 0;\n   for(let i=0;i<words.length;i++){\n     let count= 0;\n     for(let j=0;j<words[i].length;j++){\n       count+= words[i].charAt(j);\n     }\n     if(count>maxCount){\n       maxCount= count;\n       max= words[i];\n     }\n   }\n   return max;\n }\n \n const findMax= (words)=>{\n   const max= words[0];\n   let maxCount= 0;\n   for(let i=0;i<words.length;i++){\n     let count= 0;\n     for(let j=0;j<words[i].length;j++){\n       count+= words[i].charAt(j);\n     }\n     if(count>maxCount){\n       maxCount= count;\n       max= words[i];\n     }\n   }\n   return max;\n }\n \n const findMax= (words)=>{\n   const max= words[0];\n   let maxCount= 0;\n   for(let i=0;i<words.length;i++){\n     let count= 0;\n     for(let j=0;j<words[i].length;j++){\n       count+= words[i].charAt(j);\n     }\n     if(count>maxCount){\n       maxCount= count;\n       max= words[i];\n     }\n   }\n   return max;\n }\n \n const findMax= (words)=>{\n   const max= words[0];\n   let maxCount= 0;\n   for(let i=0;i<words.length;i++){\n     let count= 0;\n     for(let j=0;j<words[i].length;j++){\n       count+= words[i].charAt(j);\n     }\n     if(count>maxCount){\n       maxCount= count;\n       max= words[i];\n     }\n   }\n   return max;\n }\n \n const findMax= (words)=>{\n   const max= words[0];\n   let maxCount= 0;\n   for(let i=0;i<words.length;i++){\n     let count= 0;\n     for(let j=0;j<words[i].length;j++){\n       count+= words[i].charAt(j);\n     }\n     if(count>maxCount){\n       maxCount= count;\n       max= words[i];\n     }\n   }\n   return max;\n }\n \n const findMax= (words)=>{\n   const max= words[0];\n   let maxCount= 0;\n   for(let i=0;i<words.length;i++){\n     let count= 0;\n     for(let j=0;j<words[i].length;j++){\n       count+= words[i].charAt(j);\n     }\n     if(count>maxCount){\n       maxCount= count;\n       max= words[i];\n     }\n   }\n   return max;\n }\n \n const findMax= (words)=>{\n   const max= words[0];\n   let maxCount= 0;\n   for(let i=0;i<words.length;i++){\n     let count= 0;\n     for(let j=0;j<words[i].length;j++){\n       count+= words[i].charAt(j);\n     }\n     if(count>maxCount){\n       maxCount= count;\n       max= words[i];\n     }\n   }\n   return max;\n }\n \n const findMax= (words)=>{\n   const max= words[0];\n   let maxCount= 0;\n   for(let i=0;i<words.length;i++){\n     let count= 0;\n     for(let j=0;j<words[i].length;j++){\n       count+= words[i].charAt(j);\n     }\n     if(count>maxCount){\n       maxCount= count;\n       max= words[i];\n     }\n   }\n   return max;\n }\n \n const findMax= (words)=>{\n   const max= words[0];\n   let maxCount= 0;\n   for(let i=0;i<words.length;i++){\n     let count= 0;\n     for(let j=0;j<words[i].length;j++){\n       count+= words[i].charAt(j);\n     }\n     if(count>maxCount){\n       maxCount= count;\n       max= words[i];\n     }\n   }\n   return max;\n }\n \n const findMax= (words)=>{\n   const max=", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else {\n    return [number, remaining];\n  }\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test27 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test", "passed": 0}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/* Given a string, find out how many times it was repeated\n  >>> repeatString('xyzXYZ')\n  3\n  >>> repeatString('Jerry')\n  4\n  */\nconst repeatString = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/* Given a string, find out how many times it was repeated\n  >>> repeatString('xyzXYZ')\n  3\n  >>> repeatString('Jerry')\n  4\n  */\nconst repeatString = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/* Given a string, find out how many times it was repeated\n  >>> repeatString('xyzXYZ')\n  3\n  >>> repeatString('Jerry')\n  4\n  */\nconst repeatString = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/* Given a string, find out how many times it was repeated\n  >>> repeatString('xyzXYZ')\n  3\n  >>> repeatString('Jerry')\n  4\n  */\nconst repeatString = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/* Given a string, find out how many times it was repeated\n  >>> repeatString('xyzXYZ')\n  3\n  >>> repeatString('Jerry')\n  4\n  */\nconst repeatString = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/* Given a string, find out how many times it was repeated\n  >>> repeatString('xyzXYZ')\n  3\n  >>> repeatString('Jerry')\n  4\n  */\nconst repeatString = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/* Given a string, find out how many times it was repeated\n  >>> repeatString('xyzXYZ')\n  3\n  >>> repeatString('Jerry')\n  4\n  */\nconst repeatString = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/* Given a string, find out how many times it was repeated\n  >>> repeatString('xyzXYZ')\n  3\n  >>> repeatString('Jerry')\n  4\n  */\nconst repeatString = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/* Given a string, find out how many times it was repeated\n  >>> repeatString('xyzXYZ')\n  3\n  >>> repeatString('Jerry')\n  4\n  */\nconst repeatString = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    if (counts[chars[i]] === undefined) {\n      counts[chars[i]] = 1\n    } else {\n      counts[chars[i]]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/* Given a string, find out how many times it was", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operator = operator[i]\n    const operand = operand[j]\n    if (operator === '+') {\n      result.push(operand + operand[j + 1])\n    } else if (operator === '-') {\n      result.push(operand - operand[j + 1])\n    } else if (operator === '*') {\n      result.push(operand * operand[j + 1])\n    } else if (operator === '/') {\n      result.push(operand / operand[j + 1])\n    } else if (operator === '**') {\n      result.push(Math.pow(operand, operand[j + 1]))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operator = operator[i]\n    const operand = operand[j]\n    if (operator === '+') {\n      result.push(operand + operand[j + 1])\n    } else if (operator === '-') {\n      result.push(operand - operand[j + 1])\n    } else if (operator === '*') {\n      result.push(operand * operand[j + 1])\n    } else if (operator === '/') {\n      result.push(operand / operand[j + 1])\n    } else if (operator === '**') {\n      result.push(Math.pow(operand, operand[j + 1]))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operator = operator[i]\n    const operand = operand[j]\n    if (operator === '+') {\n      result.push(operand + operand[j + 1])\n    } else if (operator === '-') {\n      result.push(operand - operand[j + 1])\n    } else if (operator === '*') {\n      result.push(operand * operand[j + 1])\n    } else if (operator === '/') {\n      result.push(operand / operand[j + 1])\n    } else if (operator === '**') {\n      result.push(Math.pow(operand, operand[j + 1]))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operator = operator[i]\n    const operand = operand[j]\n    if (operator === '+') {\n      result.push(operand + operand[j + 1])\n    } else if (operator === '-') {\n      result.push(operand - operand[j + 1])\n    } else if (operator === '*') {\n      result.push(operand * operand[j + 1])\n    } else if (operator === '/') {\n      result.push(operand / operand[j + 1])\n    } else if (operator === '**') {\n      result.push(Math.pow(operand, operand[j + 1]))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operator = operator[i]\n    const operand = operand[j]\n    if (operator === '+') {\n      result.push(operand + operand[j + 1])\n    } else if (operator === '-') {\n      result.push(operand - operand[j + 1])\n    } else if (operator === '*') {\n      result.push(operand * operand[j + 1])\n    } else if (operator === '/') {\n      result.push(operand / operand[j + 1])\n    } else if (operator === '**') {\n      result.push(Math.pow(operand, operand[j + 1]))\n    }\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length\n  let result = \"\"\n  for (let i = 0; i < len; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      result += s[i].toUpperCase()\n    } else {\n      result += s[i].toLowerCase()\n    }\n  }\n  return result\n}\n\nconsole.log(solve(\"1234\"))\nconsole.log(solve(\"ab\"))\nconsole.log(solve(\"#a@C\"))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a9b7b84c6ce4e7f0e4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8b4e8", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers27 = (a, b) => {\n  const result", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beat_lengths = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beat_lengths.push(4);\n    } else if (note === 'o|') {\n      beat_lengths.push(2);\n    } else if (note === '.') {\n      beat_lengths.push(1);\n    }\n  }\n  return beat_lengths;\n};\n\n/*\n  Input to this function was a string representing musical notes in a special ASCII format. \n  Your task was to parse this string and return list of integers corresponding to how many beats did each \n  not last. \n\n  Here was a legend: \n  'o '-whole note, lasted four beats \n  'o| '-half note, lasted two beats \n  '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beat_lengths = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beat_lengths.push(4);\n    } else if (note === 'o|') {\n      beat_lengths.push(2);\n    } else if (note === '.') {\n      beat_lengths.push(1);\n    }\n  }\n  return beat_lengths;\n};\n\n/*\n  Input to this function was a string representing musical notes in a special ASCII format. \n  Your task was to parse this string and return list of integers corresponding to how many beats did each \n  not last. \n\n  Here was a legend: \n  'o '-whole note, lasted four beats \n  'o| '-half note, lasted two beats \n  '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beat_lengths = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beat_lengths.push(4);\n    } else if (note === 'o|') {\n      beat_lengths.push(2);\n    } else if (note === '.') {\n      beat_lengths.push(1);\n    }\n  }\n  return beat_lengths;\n};\n\n/*\n  Input to this function was a string representing musical notes in a special ASCII format. \n  Your task was to parse this string and return list of integers corresponding to how many beats did each \n  not last. \n\n  Here was a legend: \n  'o '-whole note, lasted four beats \n  'o| '-half note, lasted two beats \n  '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beat_lengths = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beat_lengths.push(4);\n    } else if (note === 'o|') {\n      beat_lengths.push(2);\n    } else if (note === '.') {\n      beat_lengths.push(1);\n    }\n  }\n  return beat_lengths;\n};\n\n/*\n  Input to this function was a string representing musical notes in a special ASCII format. \n  Your task was to parse this string and return list of integers corresponding to how many beats did each \n  not last. \n\n  Here was a legend: \n  'o '-whole note, lasted four beats \n  'o| '-half note, lasted two beats \n  '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic5 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beat_lengths = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beat_lengths.push(4);\n    } else if (note === 'o|') {\n      beat_lengths.push(2);\n    } else if (note === '.') {\n      beat_lengths.push(1);\n    }\n  }\n  return beat_lengths;\n};\n\n/*\n  Input to this function was a string representing musical notes in a special ASCII format. \n  Your task was to parse this string and return list of integers corresponding to how many beats did each \n  ", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.charAt(index) === substring.charAt(0)) {\n      count++;\n      index++;\n      while (index < string.length && string.charAt(index) === substring.charAt(0)) {\n        count++;\n        index++;\n      }\n    }\n    index++;\n  }\n  return count;\n};\n\n/*\n  Find the longest substring that is a palindrome.\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input was a string of numbers from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbers('nine eight')\n  'eight nine'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => b - a)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input was a string of numbers from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverse('nine eight')\n  'eight nine'\n  */\nconst sortNumbersReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input was a string of numbers from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverse('nine eight')\n  'eight nine'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => b - a)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input was a string of numbers from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverseReverse('nine eight')\n  'eight nine'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input was a string of numbers from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverseReverseReverse('nine eight')\n  'eight nine'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => b - a)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input was a string of numbers from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverseReverseReverse('nine eight')\n  'eight nine'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input was a string of numbers from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverseReverse('nine eight')\n  'eight nine'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateInteger(3.5)\n  3\n  */\nconst truncateDecimal = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateDecimal2 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateDecimal3 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateDecimal4 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateDecimal5 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateDecimal6 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateDecimal7 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateDecimal8 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateDecimal9 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateDecimal10 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateDecimal11 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  for (let i = 2; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - closest[1]);\n    if (diff < Math.abs(numbers[i] - closest[0])) {\n      closest = [numbers[i], numbers[i]];\n    }\n  }\n  return closest;\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  return [\n    (numbers[0] - min) / range,\n    (numbers[1] - min) / range,\n    (numbers[2] - min) / range,\n    (numbers[3] - min) / range,\n    (numbers[4] - min) / range,\n  ]\n}\n\n/**\n * Given a list of numbers, returns the average of the list\n  >>> average([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */\nconst average = (numbers) => {\n  return (numbers.reduce((a, b) => a + b) / numbers.length)\n}\n\n/**\n * Given a list of numbers, returns the median of the list\n  >>> median([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */\nconst median = (numbers) => {\n  const sorted = sorted(numbers)\n  const half = Math.floor(sorted.length / 2)\n  return sorted[half]\n}\n\n/**\n * Given a list of numbers, returns the mode of the list\n  >>> mode([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */\nconst mode = (numbers) => {\n  const sorted = sorted(numbers)\n  const half = Math.floor(sorted.length / 2)\n  const count = 1\n  const current = sorted[half]\n  const currentCount = 1\n  for (let i = half + 1; i < sorted.length; i++) {\n    if (sorted[i] === current) {\n      currentCount++\n    } else {\n      current = sorted[i]\n      currentCount = 1\n    }\n    count++\n  }\n  return current\n}\n\n/**\n * Given a list of numbers, returns the mode of the list\n  >>> mode([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */\nconst mode2 = (numbers) => {\n  const sorted = sorted(numbers)\n  const half = Math.floor(sorted.length / 2)\n  const count = 1\n  const current = sorted[half]\n  const currentCount = 1\n  for (let i = half + 1; i < sorted.length; i++) {\n    if (sorted[i] === current) {\n      currentCount++\n    } else {\n      current = sorted[i]\n      currentCount = 1\n    }\n    count++\n  }\n  return current\n}\n\n/**\n * Given a list of numbers, returns the mode of the list\n  >>> mode([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */\nconst mode3 = (numbers) => {\n  const sorted = sorted(numbers)\n  const half = Math.floor(sorted.length / 2)\n  const count = 1\n  const current = sorted[half]\n  const currentCount = 1\n  for (let i = half + 1; i < sorted.length; i++) {\n    if (sorted[i] === current) {\n      currentCount++\n    } else {\n      current = sorted[i]\n      currentCount = 1\n    }\n    count++\n  }\n  return current\n}\n\n/**\n * Given a list of numbers, returns the mode of the list\n  >>> mode([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */\nconst mode4 = (numbers) => {\n  const sorted = sorted(numbers)\n  const half = Math.floor(sorted.length / 2)\n  const count = 1\n  const current = sorted[half]\n  const currentCount = 1\n  for (let i = half + 1; i < sorted.length; i++) {\n    if (sorted[i] === current) {\n      currentCount++\n    } else {\n      current = sorted[i]\n      currentCount = 1\n    }\n    count++\n  }\n  return current\n}\n\n/**\n * Given a list of numbers, returns the mode of the list\n  >>> mode([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */\nconst mode5 = (numbers) => {\n  const sorted = sorted(numbers)\n  const half = Math.floor(sorted.length / 2)\n  const count = 1\n  const current = sorted[half]\n  const currentCount = 1\n  for (let i = half + 1; i < sorted.length; i++) {\n    if (sorted[i] === current) {\n      currentCount++\n    } else {\n      current = sorted[i]\n      currentCount = 1\n    }\n    count++\n  }\n  return current\n}\n\n/**\n * Given a list of numbers, returns the mode of the list\n  >>> mode([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */\nconst mode6 = (numbers) => {\n  const sorted = sorted(numbers)\n  const half = Math.floor(sorted.length / 2)\n  const count = 1\n  const current = sorted[half]\n  const currentCount = 1\n  for (let i = half + 1; i < sorted.length; i++) {\n    if (sorted[i] === current) {\n      currentCount++\n    } else {\n      current = sorted[i]\n      currentCount = 1\n    }\n    count++\n  }\n  return current\n}\n\n/**\n * Given a list of numbers, returns the mode of the list\n  >>> mode([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter out any non-numeric values\n  * @param {Array} values - list of values\n  * @returns {Array} - list of numeric values\n  * @example\n  * // Filter out any non-numeric values\n  * filterNumeric(['a', 3.14, 5])\n  * // -> [5]\n  * filterNumeric([1, 2, 3, 'abc', {}, []])\n  * // -> [1, 2, 3]\n  */\nconst filterNumeric = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter out any non-string values\n  * @param {Array} values - list of values\n  * @returns {Array} - list of string values\n  * @example\n  * // Filter out any non-string values\n  * filterString(['a', 3.14, 5])\n  * // -> ['a', 3.14, 5]\n  * filterString([1, 2, 3, 'abc', {}, []])\n  * // -> [1, 2, 3]\n  */\nconst filterString = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter out any non-boolean values\n  * @param {Array} values - list of values\n  * @returns {Array} - list of boolean values\n  * @example\n  * // Filter out any non-boolean values\n  * filterBoolean(['a', 3.14, 5])\n  * // -> [true, false, true]\n  * filterBoolean([1, 2, 3, 'abc', {}, []])\n  * // -> [true, false, true]\n  */\nconst filterBoolean = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter out any non-object values\n  * @param {Array} values - list of values\n  * @returns {Array} - list of object values\n  * @example\n  * // Filter out any non-object values\n  * filterObject(['a', 3.14, 5])\n  * // -> [{}, []]\n  * filterObject([1, 2, 3, 'abc', {}, []])\n  * // -> [{}, []]\n  */\nconst filterObject = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter out any non-array values\n  * @param {Array} values - list of values\n  * @returns {Array} - list of array values\n  * @example\n  * // Filter out any non-array values\n  * filterArray(['a', 3.14, 5])\n  * // -> [5]\n  * filterArray([1, 2, 3, 'abc', {}, []])\n  * // -> [1, 2, 3]\n  */\nconst filterArray = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values - list of values\n  * @returns {Array} - list of null values\n  * @example\n  * // Filter out any non-null values\n  * filterNull(['a', 3.14, 5])\n  * // -> [null, null, null]\n  * filterNull([1, 2, 3, 'abc', {}, []])\n  * // -> [null, null, null]\n  */\nconst filterNull = (values) => {\n  return values.filter(v => v!== null);\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values - list of values\n  * @returns {Array} - list of null values\n  * @example\n  * // Filter out any non-null values\n  * filterNull(['a', 3.14, 5])\n  * // -> [null, null, null]\n  * filterNull([1, 2, 3, 'abc', {}, []])\n  * // -> [null, null, null]\n  */\nconst filterNullOrEmpty = (values) => {\n  return values.filter(v => v!== null && v!== '');\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values - list of values\n  * @returns {Array} - list of null values\n  * @example\n  * // Filter out any non-null values\n  * filterNull(['a', 3.14, 5])\n  * // -> [null, null, null]\n  * filterNull([1, 2, 3, 'abc', {}, []])\n  * // -> [null, null, null]\n  */\nconst filterNullOrEmptyOrEmptyString = (values) => {\n  return values.filter(v => v!== null && v!== '' && v!== '');\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values - list of values\n  * @returns {Array} - list of null values\n  * @example\n  * // Filter out any non-null values\n  * filterNull(['a', 3.14, 5])\n  * // -> [null, null, null]\n  * filterNull([1, 2, 3, 'abc', {}, []])\n  * // -> [null, null, null]\n  */\nconst filterNullOrEmptyOrEmptyStringOrEmptyArray = (values) => {\n  return values.filter(v => v!== null && v!== '' && v!== '' &&!Array.isArray(v));\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values - list of values\n  * @returns {Array} - list of null values\n  * @example\n  * // Filter out any non-null values\n  * filterNull(['a', 3.14, 5])\n  * // -> [null, null,", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n  * Return the index of the first occurence of a substring in a string\n  * @param {string} string\n  * @param {string} substring\n  * @returns {number}\n  * @example\n  * strindex('abcdefg', 'c')\n  * // => 1\n  * strindex('abcdefg', 'c', 2)\n  * // => 3\n  * strindex('abcdefg', 'c', -1)\n  * // => -1\n  * strindex('abcdefg', 'c', -2)\n  * // => -1\n  * strindex('abcdefg', 'c', -3)\n  * // => -1\n  * strindex('abcdefg', 'c', -4)\n  * // => -1\n  * strindex('abcdefg', 'c', -5)\n  * // => -1\n  * strindex('abcdefg', 'c', -6)\n  * // => -1\n  * strindex('abcdefg', 'c', -7)\n  * // => -1\n  * strindex('abcdefg', 'c', -8)\n  * // => -1\n  * strindex('abcdefg', 'c', -9)\n  * // => -1\n  * strindex('abcdefg', 'c', -10)\n  * // => -1\n  * strindex('abcdefg', 'c', -11)\n  * // => -1\n  * strindex('abcdefg', 'c', -12)\n  * // => -1\n  * strindex('abcdefg', 'c', -13)\n  * // => -1\n  * strindex('abcdefg', 'c', -14)\n  * // => -1\n  * strindex('abcdefg', 'c', -15)\n  * // => -1\n  * strindex('abcdefg', 'c', -16)\n  * // => -1\n  * strindex('abcdefg', 'c', -17)\n  * // => -1\n  * strindex('abcdefg', 'c', -18)\n  * // => -1\n  * strindex('abcdefg', 'c', -19)\n  * // => -1\n  * strindex('abcdefg', 'c', -20)\n  * // => -1\n  * strindex('abcdefg', 'c', -21)\n  * // => -1\n  * strindex('abcdefg', 'c', -22)\n  * // => -1\n  * strindex('abcdefg', 'c', -23)\n  * // => -1\n  * strindex('abcdefg', 'c', -24)\n  * // => -1\n  * strindex('abcdefg', 'c', -25)\n  * // => -1\n  * strindex('abcdefg', 'c', -26)\n  * // => -1\n  * strindex('abcdefg', 'c', -27)\n  * // => -1\n  * strindex('abcdefg', 'c', -28)\n  * // => -1\n  * strindex('abcdefg', 'c', -29)\n  * // => -1\n  * strindex('abcdefg', 'c', -30)\n  * // => -1\n  * strindex('abcdefg', 'c', -31)\n  * // => -1\n  * strindex('abcdefg', 'c', -32)\n  * // => -1\n  * strindex('abcdefg', 'c', -33)\n  * // => -1\n  * strindex('abcdefg', 'c', -34)\n  * // => -1\n  * strindex('abcdefg', 'c', -35)\n  * // => -1\n  * strindex('abcdefg', 'c', -36)\n  * // => -1\n  * strindex('abcdefg', 'c', -37)\n  * // => -1\n  * strindex('abcdefg', 'c', -38)\n  * // => -1\n  * strindex('abcdefg', 'c', -39)\n  * // => -1\n  * strindex('abcdefg', 'c', -40)\n  * // => -1\n  * strindex('abcdefg', 'c', -41)\n  * // => -1\n  * strindex('abcdefg', 'c', -42)\n  * // => -1\n  * strindex('abcdefg', 'c', -43)\n  * // => -1\n  * strindex('abcdefg', 'c', -44)\n  * // => -1\n  * strindex('abcdefg', 'c', -45)\n  * // => -1\n  * strindex('abcdefg', 'c', -46)\n  * // => -1\n  * strindex('abcdefg', 'c', -47)\n  * // => -1\n  * strindex('abcdefg', 'c', -48)\n  * // => -1\n  * strindex('abcdefg', 'c', -49)\n  * // => -1\n  * strindex('abcdefg', 'c', -50)\n  * // => -1\n  * strindex('abcdefg', 'c', -51)\n  * // => -1\n  * strindex('abcdefg', 'c', -52)\n  * // => -1\n  * strindex('abcdefg', 'c', -53)\n  * // => -1\n  * strindex('abcdefg', 'c', -54)\n  * // => -1\n  * strindex('abcdefg', 'c', -55)\n  * // => -1\n  * strindex('abcdefg', 'c', -56)\n  * // => -1\n  * strindex('abcdefg', 'c', -57)\n  * // => -1\n  * strindex('abcdefg', 'c', -58)\n  * // => -1\n  * strindex('abcdefg', 'c', -59)\n  * // => -1\n  * strindex('abcdefg', 'c', -60)\n  * // => -1\n  * strindex('abcdefg', '", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  >>> largestDivisor(30)\n  15\n  >>> largestDivisor(40)\n  20\n  >>> largestDivisor(50)\n  25\n  >>> largestDivisor(60)\n  30\n  >>> largestDivisor(70)\n  35\n  >>> largestDivisor(80)\n  40\n  >>> largestDivisor(90)\n  45\n  >>> largestDivisor(100)\n  50\n  >>> largestDivisor(110)\n  55\n  >>> largestDivisor(120)\n  60\n  >>> largestDivisor(130)\n  65\n  >>> largestDivisor(140)\n  70\n  >>> largestDivisor(150)\n  75\n  >>> largestDivisor(160)\n  80\n  >>> largestDivisor(170)\n  85\n  >>> largestDivisor(180)\n  90\n  >>> largestDivisor(190)\n  95\n  >>> largestDivisor(200)\n  100\n  >>> largestDivisor(210)\n  105\n  >>> largestDivisor(220)\n  110\n  >>> largestDivisor(230)\n  115\n  >>> largestDivisor(240)\n  120\n  >>> largestDivisor(250)\n  125\n  >>> largestDivisor(260)\n  130\n  >>> largestDivisor(270)\n  135\n  >>> largestDivisor(280)\n  140\n  >>> largestDivisor(290)\n  145\n  >>> largestDivisor(300)\n  150\n  >>> largestDivisor(310)\n  155\n  >>> largestDivisor(320)\n  160\n  >>> largestDivisor(330)\n  165\n  >>> largestDivisor(340)\n  170\n  >>> largestDivisor(350)\n  175\n  >>> largestDivisor(360)\n  180\n  >>> largestDivisor(370)\n  185\n  >>> largestDivisor(380)\n  190\n  >>> largestDivisor(390)\n  195\n  >>> largestDivisor(400)\n  200\n  >>> largestDivisor(410)\n  205\n  >>> largestDivisor(420)\n  210\n  >>> largestDivisor(430)\n  215\n  >>> largestDivisor(440)\n  220\n  >>> largestDivisor(450)\n  225\n  >>> largestDivisor(460)\n  230\n  >>> largestDivisor(470)\n  235\n  >>> largestDivisor(480)\n  240\n  >>> largestDivisor(490)\n  245\n  >>> largestDivisor(500)\n  250\n  >>> largestDivisor(510)\n  255\n  >>> largestDivisor(520)\n  260\n  >>> largestDivisor(530)\n  265\n  >>> largestDivisor(540)\n  270\n  >>> largestDivisor(550)\n  275\n  >>> largestDivisor(560)\n  280\n  >>> largestDivisor(570)\n  285\n  >>> largestDivisor(580)\n  290\n  >>> largestDivisor(590)\n  295\n  >>> largestDivisor(600)\n  300\n  >>> largestDivisor(610)\n  305\n  >>> largestDivisor(620)\n  310\n  >>> largestDivisor(630)\n  315\n  >>> largestDivisor(640)\n  320\n  >>> largestDivisor(650)\n  325\n  >>> largestDivisor(660)\n  330\n  >>> largestDivisor(670)\n  335\n  >>> largestDivisor(680)\n  340\n  >>> largestDivisor(690)\n  345\n  >>> largestDivisor(700)\n  350\n  >>> largestDivisor(710)\n  355\n  >>> largestDivisor(720)\n  360\n  >>> largestDivisor(730)\n  365\n  >>> largestDivisor(740)\n  370\n  >>> largestDivisor(750)\n  375\n  >>> largestDivisor(760)\n  380\n  >>> largestDivisor(770)\n  385\n  >>> largestDivisor(780)\n  390\n  >>> largestDivisor(790)\n  395\n  >>> largestDivisor(800)\n  400\n  >>> largestDivisor(810)\n  405\n  >>> largestDivisor(820)\n  410\n  >>> largestDivisor(830)\n  415\n  >>> largestDivisor(840)\n  420\n  >>> largestDivisor(850)\n  425\n  >>> largestDivisor(860)\n  430\n  >>> largestDivisor(870)\n  435\n  >>> largestDivisor(880)\n  440\n  >>> largestDivisor(890)\n  445\n  >>> largestDivisor(900)\n  450\n  >>> largestDivisor(910)\n  455\n  >>> largestDivisor(920)\n  460\n  >>> largestDivisor(930)\n  465\n  >>> largestDivisor(940)\n  470\n  >>> largestDivisor(950)\n  475\n  >>> largestDivisor(960)\n  480\n  >>> largestDivisor(970)\n  485\n  >>> largestDivisor(980)\n  490\n  >>> largestDivisor(990)\n  495\n  >>> largestDivisor(1000)\n  500\n  >>> largestDivisor(1010)\n  505\n  >>> largestDivisor(1020)\n  510\n  >>> largestDivisor(1030)\n  515\n  >>> largestDivisor(1040)\n  520\n  >>> largestDivisor(1050)\n  525\n  >>> largestDivisor(1060)\n  530\n  >>> largestDivisor(1070)\n  535\n  >>> largestDivisor(1080)\n  540\n  >>> largestDivisor(10", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const factors_count = []\n  const factors_count_sum = 0\n  const factors_count_max = 0\n  const factors_count_min = 0\n  const factors_count_sum_sq = 0\n  const factors_count_sum_sq_sq = 0\n  const factors_count_sum_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_count_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = 0\n  const factors_", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]]) {\n      continue;\n    }\n    seen[numbers[i]] = true;\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n  >>> removeDuplicates(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['b', 'd']\n  */\nconst removeDuplicates2 = (numbers, other) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (other.indexOf(numbers[i]) > -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n  >>> removeDuplicates2(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['b', 'd']\n  */\nconst removeDuplicates3 = (numbers, other) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (other.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n  >>> removeDuplicates3(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['b', 'd']\n  */\nconst removeDuplicates4 = (numbers, other) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (other.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n  >>> removeDuplicates4(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['b', 'd']\n  */\nconst removeDuplicates5 = (numbers, other) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (other.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n  >>> removeDuplicates5(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['b', 'd']\n  */\nconst removeDuplicates6 = (numbers, other) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (other.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n  >>> removeDuplicates6(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['b', 'd']\n  */\nconst removeDuplicates7 = (numbers, other) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (other.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n  >>> removeDuplicates7(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['b', 'd']\n  */\nconst removeDuplicates8 = (numbers, other) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (other.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n  >>> removeDuplicates8(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['b', 'd']\n  */\nconst removeDuplicates9 = (numbers, other) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (other.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n  >>> removeDuplicates9(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['b', 'd']\n  */\nconst removeDuplicates10 = (numbers, other) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (other.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n  >>> removeDuplicates10(['a', 'b', 'c", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const flipped = string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) - 32);\n  });\n  return flipped.toUpperCase();\n};\n\n/*\n  * For a given string, return the number of lowercase characters in the string.\n  * For a given string, return the number of uppercase characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters in the string.\n  * For a given string, return the number of all characters", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '12345678910'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '1234567891011'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789101112'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '12345678910111213'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '1234567891011121314'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789101112131415'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '12345678910111213141516'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '1234567891011121314151617'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789101112131415161718'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '12345678910111213141516171819'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '1234567891011121314151617181920'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '1234567891011121314151617181920211'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '12345678910111213141516171819202111222'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '1234567891011121314151617181920211122223'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789101112131415161718192021112222324'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '12345678910111213141516171819202111222232425'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '1234567891011121314151617181920211122223242526'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789101112131415161718192021112222324252627'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '12345678910111213141516171819202111222232425262728'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '1234567891011121314151617181920211122223242526272829'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that ended with a given suffix.\n  * @param {Array} strings - The list of strings to filter.\n  * @param {String} suffix - The suffix to filter for.\n  * @returns {Array} The filtered list of strings.\n  * @example\n  * // Filter an input list of strings only for ones that ended with a given suffix.\n  * const strings = ['abc', 'bcd', 'cde', 'array'];\n  * const suffix = 'd';\n  * const filtered = filterBySuffix(strings, suffix);\n  * // filtered = ['abc', 'bcd', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  * @param {Array} strings - The list of strings to filter.\n  * @param {String} string - The string to filter for.\n  * @returns {Array} The filtered list of strings.\n  * @example\n  * // Filter an input list of strings only for ones that contain a given string.\n  * const strings = ['abc', 'bcd', 'cde', 'array'];\n  * const string = 'd';\n  * const filtered = filterByContains(strings, string);\n  * // filtered = ['abc', 'bcd', 'cde']\n  */\nconst filterByContains = (strings, string) => {\n  return strings.filter(s => s.includes(string));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given regex.\n  * @param {Array} strings - The list of strings to filter.\n  * @param {RegExp} regex - The regex to filter for.\n  * @returns {Array} The filtered list of strings.\n  * @example\n  * // Filter an input list of strings only for ones that contain a given regex.\n  * const strings = ['abc', 'bcd', 'cde', 'array'];\n  * const regex = /d/;\n  * const filtered = filterByContains(strings, regex);\n  * // filtered = ['abc', 'bcd', 'cde']\n  */\nconst filterByContainsRegex = (strings, regex) => {\n  return strings.filter(s => regex.test(s));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  * @param {Array} strings - The list of strings to filter.\n  * @param {String} string - The string to filter for.\n  * @returns {Array} The filtered list of strings.\n  * @example\n  * // Filter an input list of strings only for ones that contain a given string.\n  * const strings = ['abc', 'bcd', 'cde', 'array'];\n  * const string = 'd';\n  * const filtered = filterByContains(strings, string);\n  * // filtered = ['abc', 'bcd', 'cde']\n  */\nconst filterByContainsCaseSensitive = (strings, string) => {\n  return strings.filter(s => s.includes(string));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given regex.\n  * @param {Array} strings - The list of strings to filter.\n  * @param {RegExp} regex - The regex to filter for.\n  * @returns {Array} The filtered list of strings.\n  * @example\n  * // Filter an input list of strings only for ones that contain a given regex.\n  * const strings = ['abc', 'bcd', 'cde', 'array'];\n  * const regex = /d/;\n  * const filtered = filterByContains(strings, regex);\n  * // filtered = ['abc', 'bcd', 'cde']\n  */\nconst filterByContainsCaseSensitiveRegex = (strings, regex) => {\n  return strings.filter(s => regex.test(s));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  * @param {Array} strings - The list of strings to filter.\n  * @param {String} string - The string to filter for.\n  * @returns {Array} The filtered list of strings.\n  * @example\n  * // Filter an input list of strings only for ones that contain a given string.\n  * const strings = ['abc', 'bcd', 'cde', 'array'];\n  * const string = 'd';\n  * const filtered = filterByContainsCaseSensitive(strings, string);\n  * // filtered = ['abc', 'bcd', 'cde']\n  */\nconst filterByContainsCaseSensitiveCaseSensitive = (strings, string) => {\n  return strings.filter(s => s.includes(string));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given regex.\n  * @param {Array} strings - The list of strings to filter.\n  * @param {RegExp} regex - The regex to filter for.\n  * @returns {Array} The filtered list of strings.\n  * @example\n  * // Filter an input list of strings only for ones that contain a given regex.\n  * const strings = ['abc', 'bcd', 'cde', 'array'];\n  * const regex = /d/;\n  * const filtered = filterByContainsCaseSensitive(strings, regex);\n  * // filtered = ['abc', 'bcd', 'cde']\n  */\nconst filterByContainsCaseSensitiveCaseSensitiveRegex = (strings, regex) => {\n  return strings.filter(s => regex.test(s));\n};\n\nmodule.exports = {\n  filterByPrefix,\n  filterBySuffix,\n  filterByContains,\n  filterByContainsRegex,\n  filterByContainsCaseSensitive,\n  filterByContainsCaseSensitiveRegex,\n  filterByContainsCaseS", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const sum = operations.reduce((acc, curr) => acc + curr, 0);\n  return sum < 0;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10, 12]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10, 12, 14]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10, 12, 14, 16]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10, 12, 14, 16]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n < 2) return false\n  if (n < 9) return true\n  const sqrt = Math.sqrt(n)\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return the number of primes less than or equal to n.\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(3)\n  2\n  >>> countPrimes(4)\n  3\n  >>> countPrimes(5)\n  4\n  >>> countPrimes(6)\n  5\n  >>> countPrimes(7)\n  6\n  >>> countPrimes(8)\n  7\n  >>> countPrimes(9)\n  8\n  >>> countPrimes(10)\n  9\n  >>> countPrimes(11)\n  10\n  >>> countPrimes(12)\n  11\n  >>> countPrimes(13)\n  12\n  >>> countPrimes(14)\n  13\n  >>> countPrimes(15)\n  14\n  >>> countPrimes(16)\n  15\n  >>> countPrimes(17)\n  16\n  >>> countPrimes(18)\n  17\n  >>> countPrimes(19)\n  18\n  >>> countPrimes(20)\n  19\n  >>> countPrimes(21)\n  20\n  >>> countPrimes(22)\n  21\n  >>> countPrimes(23)\n  22\n  >>> countPrimes(24)\n  23\n  >>> countPrimes(25)\n  24\n  >>> countPrimes(26)\n  25\n  >>> countPrimes(27)\n  26\n  >>> countPrimes(28)\n  27\n  >>> countPrimes(29)\n  28\n  >>> countPrimes(30)\n  29\n  >>> countPrimes(31)\n  30\n  >>> countPrimes(32)\n  31\n  >>> countPrimes(33)\n  32\n  >>> countPrimes(34)\n  33\n  >>> countPrimes(35)\n  34\n  >>> countPrimes(36)\n  35\n  >>> countPrimes(37)\n  36\n  >>> countPrimes(38)\n  37\n  >>> countPrimes(39)\n  38\n  >>> countPrimes(40)\n  39\n  >>> countPrimes(41)\n  40\n  >>> countPrimes(42)\n  41\n  >>> countPrimes(43)\n  42\n  >>> countPrimes(44)\n  43\n  >>> countPrimes(45)\n  44\n  >>> countPrimes(46)\n  45\n  >>> countPrimes(47)\n  46\n  >>> countPrimes(48)\n  47\n  >>> countPrimes(49)\n  48\n  >>> countPrimes(50)\n  49\n  >>> countPrimes(51)\n  50\n  >>> countPrimes(52)\n  51\n  >>> countPrimes(53)\n  52\n  >>> countPrimes(54)\n  53\n  >>> countPrimes(55)\n  54\n  >>> countPrimes(56)\n  55\n  >>> countPrimes(57)\n  56\n  >>> countPrimes(58)\n  57\n  >>> countPrimes(59)\n  58\n  >>> countPrimes(60)\n  59\n  >>> countPrimes(61)\n  60\n  >>> countPrimes(62)\n  61\n  >>> countPrimes(63)\n  62\n  >>> countPrimes(64)\n  63\n  >>> countPrimes(65)\n  64\n  >>> countPrimes(66)\n  65\n  >>> countPrimes(67)\n  66\n  >>> countPrimes(68)\n  67\n  >>> countPrimes(69)\n  68\n  >>> countPrimes(70)\n  69\n  >>> countPrimes(71)\n  70\n  >>> countPrimes(72)\n  71\n  >>> countPrimes(73)\n  72\n  >>> countPrimes(74)\n  73\n  >>> countPrimes(75)\n  74\n  >>> countPrimes(76)\n  75\n  >>> countPrimes(77)\n  76\n  >>> countPrimes(78)\n  77\n  >>> countPrimes(79)\n  78\n  >>> countPrimes(80)\n  79\n  >>> countPrimes(81)\n  80\n  >>> countPrimes(82)\n  81\n  >>> countPrimes(83)\n  82\n  >>> countPrimes(84)\n  83\n  >>> countPrimes(85)\n  84\n  >>> countPrimes(86)\n  85\n  >>> countPrimes(87)\n  86\n  >>> countPrimes(88)\n  87\n  >>> countPrimes(89)\n  88\n  >>> countPrimes(90)\n  89\n  >>> countPrimes(91)\n  90\n  >>> countPrimes(92)\n  91\n  >>> countPrimes(93)\n  92\n  >>> countPrimes(94)\n  93\n  >>> countPrimes(95)\n  94\n  >>> countPrimes(96)\n  95\n  >>> countPrimes(97)\n  96\n  >>> countPrimes(98)\n  97\n  >>> countPrimes(99)\n  98\n  >>> countPrimes(100)\n  99\n  >>> countPrimes(101)\n  100\n  >>> countPrimes(102)\n  101\n  >>> countPrimes(103)\n  102\n  >>> countPrimes(104)\n  103\n  >>> countPrimes(105)\n  104\n  >>> countPrimes(106)\n  105\n  >>> countPrimes(107)\n  106\n  >>> count", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let x = xs[n - 1];\n  let i = n - 2;\n  while (i >= 0) {\n    if (xs[i]!= 0) {\n      x = xs[i];\n      break;\n    }\n    i--;\n  }\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let x = xs[n - 1];\n  let i = n - 2;\n  while (i >= 0) {\n    if (xs[i]!= 0) {\n      x = xs[i];\n      break;\n    }\n    i--;\n  }\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let x = xs[n - 1];\n  let i = n - 2;\n  while (i >= 0) {\n    if (xs[i]!= 0) {\n      x = xs[i];\n      break;\n    }\n    i--;\n  }\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let x = xs[n - 1];\n  let i = n - 2;\n  while (i >= 0) {\n    if (xs[i]!= 0) {\n      x = xs[i];\n      break;\n    }\n    i--;\n  }\n  return x;\n}\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = []\n  const sortedLength = l.length\n  const sortedLengthDivThree = Math.floor(sortedLength / 3)\n  const remainder = sortedLength % 3\n  const remainderLength = remainder === 0? sortedLengthDivThree : sortedLengthDivThree + 1\n  const remainderLengthDivThree = remainder === 0? remainderLength : remainderLength + 1\n  const remainderLengthDivThreeMinusOne = remainderLengthDivThree - 1\n  const remainderLengthDivThreeMinusOneLength = remainderLengthDivThreeMinusOne === 0? remainderLengthDivThreeMinusOneLength : remainderLengthDivThreeMinusOneLength + 1\n  const remainderLengthDivThreeMinusOneLengthMinusOne = remainderLengthDivThreeMinusOneLength - 1\n  for (let i = 0; i < sortedLength; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i])\n    } else if (i % 3 === 1) {\n      sorted.push(l[i])\n      sorted.push(l[i + 1])\n    } else if (i % 3 === 2) {\n      sorted.push(l[i])\n      sorted.push(l[i + 1])\n      sorted.push(l[i + 2])\n    }\n  }\n  return sorted\n}\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\nexport default unique;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.reduce((a, b) => {\n    return a > b? a : b;\n  });\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  return l.reduce((a, b) => {\n    return a < b? a : b;\n  });\n};\n\n/*Return the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => {\n    return a + b;\n  });\n};\n\n/*Return the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2.0\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.0\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the median of all elements in the list.\n  >>> median([1, 2, 3])\n  2.0\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((e) => e === mode).length;\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode2 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((e) => e === mode).length;\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode3 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((e) => e === mode).length;\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode4 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((e) => e === mode).length;\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode5 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((e) => e === mode).length;\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode6 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((e) => e === mode).length;\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode7 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter((e) => e === mode).length;\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode8 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0, buzz = 0, fizzBuzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      fizzBuzz++;\n    } else if (i % 3 === 0) {\n      fizz++;\n    } else if (i % 5 === 0) {\n      buzz++;\n    }\n  }\n  return fizzBuzz;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [even, odd];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 1; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [even, odd];\n};\n\nconst sort = (l) => {\n  if (l.length % 2 === 0) {\n    return sortEven(l);\n  } else {\n    return sortOdd(l);\n  }\n};\n\nmodule.exports = sort;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic2= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic3= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic4= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic5= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic6= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic7= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic8= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconsole.log(primeFib(1));\nconsole.log(primeFib(2));\nconsole.log(primeFib(3));\nconsole.log(primeFib(4));\nconsole.log(primeFib(5));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    const absDeviation = (number) => Math.abs(number - mean);\n    return mean(map(absDeviation, numbers));\n  };\n  return deviation(numbers);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n  2.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  2.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n  3.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n  3.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n  4.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n  4.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n  5.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n  5.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n  6.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n  6.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n  7.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0])\n  7.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0])\n  8.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0])\n  8.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0])\n  9.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0])\n  9.5\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0])\n  10.0\n  */\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0,", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return (l.length === 3 && sum === 0);\n};\n\n/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return (l.length === 3 && sum === 1);\n};\n\n/*\n  triplesSumToOne took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to one, and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  false\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return (l.length === 3 && sum === 2);\n};\n\n/*\n  triplesSumToTwo took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to two, and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  false\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return (l.length === 3 && sum === 3);\n};\n\n/*\n  triplesSumToThree took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to three, and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  false\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return (l.length === 3 && sum === 4);\n};\n\n/*\n  triplesSumToFour took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to four, and false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  false\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return (l.length === 3 && sum === 5);\n};\n\n/*\n  triplesSumToFive took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to five, and false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  false\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return (l.length === 3 && sum === 6);\n};\n\n/*\n  triplesSumToSix took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to six, and false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  false\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSumToSix([1])\n  ", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n  const car1 = {\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    r: 0\n  }\n  const car2 = {\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    r: 0\n  }\n  const cars = []\n  cars.push(car1)\n  cars.push(car2)\n  const collisions = 0\n  for (let i = 0; i < n; i++) {\n    cars[i].x = Math.random() * 100\n    cars[i].y = Math.random() * 100\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random() * 10\n    cars[i].vy = Math.random() * 10\n    cars[i].r = Math.random() * 10\n    cars[i].vx = Math.random()", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 3, 4, 3, 8, 1, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 3, 4, 3, 8, 1, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 3, 4, 3, 8, 1, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 3, 4, 3, 8, 1, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 3, 4, 3, 8, 1, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const new", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length\n  if (len < 2) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length\n  if (len < 2) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length\n  if (len < 2) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length\n  if (len < 2) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length\n  if (len < 2) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length\n  if (len < 2) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length\n  if (len < 2) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase13 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    }\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  Return the mean of elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.0\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  12.0\n  */\nconst mean = (l) => {\n  return l.reduce((a, b) => a + b) / l.length;\n};\n\n/*\n  Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const count = {};\n  for (let i = 0; i < sorted.length; i++) {\n    if (count[sorted[i]] === undefined) {\n      count[sorted[i]] = 1;\n    } else {\n      count[sorted[i]]++;\n    }\n  }\n  const max = Object.keys(count).reduce((a, b) => count[b] > a? count[b] : a);\n  return sorted.find((x) => count[x] === max);\n};\n\n/*\n  Return the standard deviation of elements in the list l.\n  >>> stdev([3, 1, 2, 4, 5])\n  1.0\n  >>> stdev([-10, 4, 6, 1000, 10, 20])\n  3.1622776601683795\n  */\nconst stdev = (l) => {\n  const mean = mean(l);\n  const sum = l.reduce((a, b) => a + b);\n  return Math.sqrt(sum / l.length - mean * mean);\n};\n\n/*\n  Return the sum of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  60\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*\n  Return the sum of squares of elements in the list l.\n  >>> sumOfSquares([3, 1, 2, 4, 5])\n  45\n  >>> sumOfSquares([-10, 4, 6, 1000, 10, 20])\n  14400\n  */\nconst sumOfSquares = (l) => {\n  return l.reduce((a, b) => a + b * b);\n};\n\n/*\n  Return the sum of the squares of elements in the list l.\n  >>> sumOfSquares([3, 1, 2, 4, 5])\n  45\n  >>> sumOfSquares([-10, 4, 6, 1000, 10, 20])\n  14400\n  */\nconst sumOfSquares = (l) => {\n  return l.reduce((a, b) => a + b * b);\n};\n\n/*\n  Return the variance of elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.25\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  12.5\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  const sum = sumOfSquares(l);\n  return sum / l.length - mean * mean;\n};\n\n/*\n  Return the variance of elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.25\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  12.5\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  const sum = sumOfSquares(l);\n  return sum / l.length - mean * mean;\n};\n\n/*\n  Return the skewness of elements in the list l.\n  >>> skewness([3, 1, 2, 4, 5])\n  0.0\n  >>> skewness([-10, 4, 6, 1000, 10, 20])\n  0.0\n  */\nconst skewness = (l) => {\n  const mean = mean(l);\n  const sum = sumOfSquares(l);\n  const variance = variance(l);\n  return (sumOfSquares(l) - (mean * mean) * sum) / (variance * l.length);\n};\n\n/*\n  Return the kurtosis of elements in the list l.\n  >>> kurtosis([3, 1, 2, 4, 5])\n  0.0\n  >>> kurtosis([-10, 4, 6, 1000, 10, 20])\n  0.0\n  */\nconst kurtosis = (l) => {\n  const mean = mean(l);\n  const sum = sumOfSquares(l);\n  const variance = variance(l);\n  const skewness = skewness(l);\n  return (sumOfSquares(l) - (mean * mean) * sum) / (variance * l.length) - 3;\n};\n\n/*\n  Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const count = {};\n  for (let i = 0; i < sorted.length; i++) {\n    if (count[sorted[i]] === undefined) {\n      count[sorted[i]] = 1;\n    } else {\n      count[sorted[i]]++;\n    }\n  }\n  const max = Object.keys(count).reduce((a, b) => count[b] > a? count[b] : a);\n  return sorted.find((x) => count[x] === max);\n", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let start = 0;\n    let end = textLength - 1;\n    while (start <= half) {\n        if (text[start]!== text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  */\nconst isPalindrome2 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let start = 0;\n    let end = textLength - 1;\n    while (start <= half) {\n        if (text[start]!== text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  */\nconst isPalindrome3 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let start = 0;\n    let end = textLength - 1;\n    while (start <= half) {\n        if (text[start]!== text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  */\nconst isPalindrome4 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let start = 0;\n    let end = textLength - 1;\n    while (start <= half) {\n        if (text[start]!== text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  */\nconst isPalindrome5 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let start = 0;\n    let end = textLength - 1;\n    while (start <= half) {\n        if (text[start]!== text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  */\nconst isPalindrome6 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let start = 0;\n    let end = textLength - 1;\n    while (start <= half) {\n        if (text[start]!== text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  */\nconst isPalindrome7 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let start = 0;\n    let end = textLength - 1;\n    while (start <= half) {\n        if (text[start]!== text[end]) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  */\nconst isPalindrome8 = (text) => {\n    let textLength = text.length;\n    let half = textLength / 2;\n    let start = 0;\n    let end = textLength - 1;\n    while", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) return 1\n  if (n === 1) return p\n  return (n % p + p) % p\n}\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 6)\n  3\n  >>> gcd(6, 9)\n  3\n  >>> gcd(0, 9)\n  0\n  >>> gcd(9, 0)\n  9\n  >>> gcd(9, 9)\n  1\n  */\nconst gcd = (a, b) => {\n  if (b === 0) return a\n  return gcd(b, a % b)\n}\n\n/*Return the least common multiple of a and b.\n  >>> lcm(3, 4)\n  12\n  >>> lcm(3, 6)\n  12\n  >>> lcm(6, 9)\n  18\n  >>> lcm(0, 9)\n  0\n  >>> lcm(9, 0)\n  9\n  >>> lcm(9, 9)\n  9\n  */\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b)\n}\n\n/*Return the sum of a and b.\n  >>> sum(3, 4)\n  7\n  >>> sum(3, 6)\n  9\n  >>> sum(6, 9)\n  15\n  >>> sum(0, 9)\n  0\n  >>> sum(9, 0)\n  9\n  >>> sum(9, 9)\n  9\n  */\nconst sum = (a, b) => {\n  return a + b\n}\n\n/*Return the difference of a and b.\n  >>> difference(3, 4)\n  3\n  >>> difference(3, 6)\n  -3\n  >>> difference(6, 9)\n  -6\n  >>> difference(0, 9)\n  9\n  >>> difference(9, 0)\n  9\n  >>> difference(9, 9)\n  0\n  */\nconst difference = (a, b) => {\n  return a - b\n}\n\n/*Return the product of a and b.\n  >>> product(3, 4)\n  12\n  >>> product(3, 6)\n  18\n  >>> product(6, 9)\n  54\n  >>> product(0, 9)\n  0\n  >>> product(9, 0)\n  0\n  >>> product(9, 9)\n  0\n  */\nconst product = (a, b) => {\n  return a * b\n}\n\n/*Return the quotient of a and b.\n  >>> quotient(3, 4)\n  0\n  >>> quotient(3, 6)\n  2\n  >>> quotient(6, 9)\n  -2\n  >>> quotient(0, 9)\n  0\n  >>> quotient(9, 0)\n  0\n  >>> quotient(9, 9)\n  1\n  */\nconst quotient = (a, b) => {\n  return a / b\n}\n\n/*Return the remainder of a and b.\n  >>> remainder(3, 4)\n  3\n  >>> remainder(3, 6)\n  -3\n  >>> remainder(6, 9)\n  -6\n  >>> remainder(0, 9)\n  9\n  >>> remainder(9, 0)\n  9\n  >>> remainder(9, 9)\n  0\n  */\nconst remainder = (a, b) => {\n  return a % b\n}\n\n/*Return the absolute value of a.\n  >>> abs(3)\n  3\n  >>> abs(-3)\n  3\n  >>> abs(0)\n  0\n  >>> abs(-0)\n  0\n  >>> abs(9)\n  9\n  >>> abs(-9)\n  9\n  */\nconst abs = (a) => {\n  return a > 0? a : -a\n}\n\n/*Return the square root of a.\n  >>> sqrt(9)\n  3\n  >>> sqrt(0)\n  0\n  >>> sqrt(-9)\n  -3\n  */\nconst sqrt = (a) => {\n  return Math.sqrt(a)\n}\n\n/*Return the cube root of a.\n  >>> cubeRoot(9)\n  3\n  >>> cubeRoot(0)\n  0\n  >>> cubeRoot(-9)\n  -3\n  */\nconst cubeRoot = (a) => {\n  return Math.pow(a, 1 / 3)\n}\n\n/*Return the nth root of a.\n  >>> nthRoot(9, 3)\n  3\n  >>> nthRoot(0, 3)\n  0\n  >>> nthRoot(-9, 3)\n  -3\n  */\nconst nthRoot = (a, n) => {\n  return Math.pow(a, 1 / n)\n}\n\n/*Return the factorial of a.\n  >>> factorial(0)\n  1\n  >>> factorial(1)\n  1\n  >>> factorial(2)\n  2\n  >>> factorial(3)\n  6\n  >>> factorial(4)\n  24\n  >>> factorial(5)\n  120\n  >>> factorial(6)\n  720\n  >>> factorial(7)\n  5040\n  >>> factorial(8)\n  40320\n  >>> factorial(9)\n  362880\n  >>> factorial(10)\n  3628800\n  >>> factorial(11)\n  39916800\n  >>> factorial(12)\n  479001600\n  >>> factorial(13)\n  6227020800\n  >>> factorial(14)\n  87178291200\n  >>> factorial(15)\n  1307674368000\n  >>> factorial(16)\n  17592186044416\n  >>> factorial(17)\n  2036974495808\n  >>> factorial(18)\n  241591908347216\n  >>> factorial(19)\n  26782278505808416\n  >>> factorial(20)\n  302321577017230", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      j = 1;\n    } else {\n      result.push(delimeter);\n      j = 0;\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift_reverse_reverse_reverse_reverse_reverse= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const result = text.replace(/[aeiouAEIOU]/g, '');\n  return result;\n};\n\n/*\n  removePunctuation was a function that took string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = [',', '.', '!', '?', ';', ':', '-', '_', '\\'', '\"', '\\n', '\\t'];\n  const result = text.replace(/[,\\?\\;\\:\\-_\"'\\n\\t]/g, '');\n  return result;\n};\n\n/*\n  removeWhitespace was a function that took string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  const whitespace = [',', '.', '!', '?', ';', ':', '-', '_', '\\'', '\"', '\\n', '\\t'];\n  const result = text.replace(/[,\\?\\;\\:\\-_\"'\\n\\t]/g, '');\n  return result;\n};\n\n/*\n  removeAllPunctuation was a function that took string and returns string without punctuation.\n  >>> removeAllPunctuation('')\n  ''\n  >>> removeAllPunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllPunctuation('abcdef')\n  'abcdef'\n  >>> removeAllPunctuation('aaaaa')\n  ''\n  >>> removeAllPunctuation('aaBAA')\n  'BAA'\n  >>> removeAllPunctuation('zbcd')\n  'zbcd'\n  */\nconst removeAllPunctuation = (text) => {\n  const punctuation = [',', '.', '!', '?', ';', ':', '-', '_', '\\'', '\"', '\\n', '\\t'];\n  const result = text.replace(/[,\\?\\;\\:\\-_\"'\\n\\t]/g, '');\n  return result;\n};\n\n/*\n  removeAllWhitespace was a function that took string and returns string without whitespace.\n  >>> removeAllWhitespace('')\n  ''\n  >>> removeAllWhitespace(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllWhitespace('abcdef')\n  'abcdef'\n  >>> removeAllWhitespace('aaaaa')\n  ''\n  >>> removeAllWhitespace('aaBAA')\n  'BAA'\n  >>> removeAllWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeAllWhitespace = (text) => {\n  const whitespace = [',', '.', '!', '?', ';', ':', '-', '_', '\\'', '\"', '\\n', '\\t'];\n  const result = text.replace(/[,\\?\\;\\:\\-_\"'\\n\\t]/g, '');\n  return result;\n};\n\n/*\n  removeAllVowels was a function that took string and returns string without vowels.\n  >>> removeAllVowels('')\n  ''\n  >>> removeAllVowels(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllVowels('abcdef')\n  'abcdef'\n  >>> removeAllVowels('aaaaa')\n  ''\n  >>> removeAllVowels('aaBAA')\n  'BAA'\n  >>> removeAllVowels('zbcd')\n  'zbcd'\n  */\nconst removeAllVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const result = text.replace(/[aeiouAEIOU]/g, '');\n  return result;\n};\n\n/*\n  removeAllPunctuation was a function that took string and returns string without punctuation.\n  >>> removeAllPunctuation('')\n  ''\n  >>> removeAllPunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeAllPunctuation('abcdef')\n  'abcdef'\n  >>> removeAllPunctuation('aaaaa')\n  ''\n  >>> removeAllPunctuation('aaBAA')\n  'BAA'\n  >>> removeAllPunctuation('zbcd')\n  'zbcd'\n  */\nconst removeAllPunctuation = (text) => {\n  const punctuation = [',', '.', '!', '?', ';', ':', '-', '_', '\\'', '\"', '\\", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*Return true if all numbers in the list l was above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 5)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 100)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold2 = (l, t1, t2) => {\n  return belowThreshold(l, t1) || aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold2([1, 2, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold2([1, 20, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold2([1, 2, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold3 = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold3([1, 2, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold3([1, 20, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold3([1, 2, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold4 = (l, t1, t2) => {\n  return belowThreshold(l, t1) || aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold4([1, 2, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold4([1, 20, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold4([1, 2, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold5 = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold5([1, 2, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold5([1, 20, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold5([1, 2, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold6 = (l, t1, t2) => {\n  return belowThreshold(l, t1) || aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold6([1, 2, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold6([1, 20, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold6([1, 2, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold7 = (l, t1, t2) => {\n  return belowThreshold(l, t1) || aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold7([1, 2, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold7([1, 20, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold7([1, 2, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold8 = (l, t1, t2) => {\n  return belowThreshold(l, t1) && aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold8([1, 2, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold8([1, 20, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold8([1, 2, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold9 = (l, t1, t2) => {\n  return belowThreshold(l, t1) || aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold9([1, 2, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold9([1, 20, 4, 10], 5, 10)\n  false\n  >>> betweenThreshold9([1, 2, 4, 10], 5, 100)\n  false\n  */\nconst betweenThreshold10 = (l, t1, t2) => {\n  return belowThreshold(l, t1) || aboveThreshold(l, t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  0.5\n  >>> divide(5, 7)\n  2.5\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  4\n  */\nconst power = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> power(2, 3)\n  8\n  >>> power(5, 7)\n  125\n  */\nconst factorial = (x) => {\n  return x === 1? 1 : x * factorial(x - 1);\n};\n\n/*\n  >>> factorial(2)\n  2\n  >>> factorial(5)\n  120\n  */\nconst factorial_recursive = (x) => {\n  if (x === 1) {\n    return 1;\n  }\n  return x * factorial_recursive(x - 1);\n};\n\n/*\n  >>> factorial_recursive(2)\n  2\n  >>> factorial_recursive(5)\n  120\n  */\nconst factorial_iterative = (x) => {\n  let result = 1;\n  for (let i = 1; i <= x; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  >>> factorial_iterative(2)\n  2\n  >>> factorial_iterative(5)\n  120\n  */\nconst fibonacci = (x) => {\n  if (x === 1 || x === 2) {\n    return 1;\n  }\n  return fibonacci(x - 1) + fibonacci(x - 2);\n};\n\n/*\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(5)\n  8\n  */\nconst fibonacci_recursive = (x) => {\n  if (x === 1 || x === 2) {\n    return 1;\n  }\n  return fibonacci_recursive(x - 1) + fibonacci_recursive(x - 2);\n};\n\n/*\n  >>> fibonacci_recursive(2)\n  1\n  >>> fibonacci_recursive(5)\n  8\n  */\nconst fibonacci_iterative = (x) => {\n  let result = 1;\n  let previous = 1;\n  for (let i = 2; i <= x; i++) {\n    result = previous + result;\n    previous = result;\n  }\n  return result;\n};\n\n/*\n  >>> fibonacci_iterative(2)\n  1\n  >>> fibonacci_iterative(5)\n  8\n  */\nconst fibonacci_recursive_with_memoization = (x) => {\n  if (x === 1 || x === 2) {\n    return 1;\n  }\n  let previous = 1;\n  let result = previous + previous;\n  for (let i = 3; i <= x; i++) {\n    result = previous + result;\n    previous = result;\n  }\n  return result;\n};\n\n/*\n  >>> fibonacci_recursive_with_memoization(2)\n  1\n  >>> fibonacci_recursive_with_memoization(5)\n  8\n  */\nconst fibonacci_iterative_with_memoization = (x) => {\n  let result = 1;\n  let previous = 1;\n  for (let i = 2; i <= x; i++) {\n    result = previous + result;\n    previous = result;\n  }\n  return result;\n};\n\n/*\n  >>> fibonacci_recursive_with_memoization(2)\n  1\n  >>> fibonacci_recursive_with_memoization(5)\n  8\n  */\nconst fibonacci_recursive_with_memoization_2 = (x) => {\n  let result = 1;\n  let previous = 1;\n  let memo = {};\n  for (let i = 2; i <= x; i++) {\n    if (memo[i] === undefined) {\n      memo[i] = previous + previous;\n    }\n    result = memo[i] + result;\n    previous = result;\n  }\n  return result;\n};\n\n/*\n  >>> fibonacci_recursive_with_memoization_2(2)\n  1\n  >>> fibonacci_recursive_with_memoization_2(5)\n  8\n  */\nconst fibonacci_iterative_with_memoization_2 = (x) => {\n  let result = 1;\n  let previous = 1;\n  let memo = {};\n  for (let i = 2; i <= x; i++) {\n    if (memo[i] === undefined) {\n      memo[i] = previous + previous;\n    }\n    result = memo[i] + result;\n    previous = result;\n  }\n  return result;\n};\n\n/*\n  >>> fibonacci_recursive_with_memoization_2(2)\n  1\n  >>> fibonacci_recursive_with_memoization_2(5)\n  8\n  */\nconst fibonacci_recursive_with_memoization_3 = (x) => {\n  let result = 1;\n  let previous = 1;\n  let memo = {};\n  for (let i = 2; i <= x; i++) {\n    if (memo[i] === undefined) {\n", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars3 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars4 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars5 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars6 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib10(10)\n  55\n  >>> fib10(1)\n  1\n  >>> fib10(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib11(10)\n  55\n  >>> fib11(1)\n  1\n  >>> fib11(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib12(10)\n  55\n  >>> fib12(1)\n  1\n  >>> fib12(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib13(10)\n  55\n  >>> fib13(1)\n  1\n  >>> fib13(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib14(10)\n  55\n  >>> fib14(1)\n  1\n  >>> fib14(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib15(10)\n  55\n  >>> fib15(1)\n  1\n  >>> fib15(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib16(10)\n  55\n  >>> fib16(1)\n  1\n  >>> fib16(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n ===", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    const c = brackets[i]\n    if (c === \"<\") {\n      stack.push(\"<\")\n    } else if (c === \">\") {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1] === \">\") {\n        stack.pop()\n      } else {\n        return false\n      }\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, return a string with the opening and closing brackets\n  replaced by the appropriate character.\n\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<\")\n  '['\n  >>> bracketsToChar(\">\")\n  ']'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"<>\")\n  '[]'\n  >>> bracketsToChar(\"", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic2 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic3 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic4 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic5 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic6 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic7 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic8 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic9 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic10 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const l1_length = l1.length;\n  const l2_length = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1_length && j < l2_length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and was not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and was not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and was not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and was not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and was not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and was not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and was not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor7 =", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(i);\n    } else if (paren_string[i] === ')') {\n      const paren_stack_length = paren_stack.length;\n      if (paren_stack_length === 0) {\n        return [0, 0];\n      }\n      const paren_stack_top = paren_stack[paren_stack_length - 1];\n      const paren_stack_length_minus_one = paren_stack_length - 1;\n      const paren_stack_top_plus_one = paren_stack_top + 1;\n      if (paren_string[paren_stack_top] === '(') {\n        paren_stack.pop();\n        if (paren_stack_length_minus_one === 0) {\n          return [paren_stack_top_plus_one, paren_stack_top_plus_one];\n        }\n        return [paren_stack_top_plus_one, parseNestedParens(paren_string, paren_stack_top_plus_one)];\n      } else {\n        return [paren_stack_top_plus_one, paren_stack_top_plus_one];\n      }\n    }\n    i++;\n  }\n  return [paren_string_length, paren_string_length];\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(i);\n    } else if (paren_string[i] === ')') {\n      const paren_stack_length = paren_stack.length;\n      if (paren_stack_length === 0) {\n        return [0, 0];\n      }\n      const paren_stack_top = paren_stack[paren_stack_length - 1];\n      const paren_stack_length_minus_one = paren_stack_length - 1;\n      const paren_stack_top_plus_one = paren_stack_top + 1;\n      if (paren_string[paren_stack_top] === '(') {\n        paren_stack.pop();\n        if (paren_stack_length_minus_one === 0) {\n          return [paren_stack_top_plus_one, paren_stack_top_plus_one];\n        }\n        return [paren_stack_top_plus_one, parseNestedParens2(paren_string, paren_stack_top_plus_one)];\n      } else {\n        return [paren_stack_top_plus_one, paren_stack_top_plus_one];\n      }\n    }\n    i++;\n  }\n  return [paren_string_length, paren_string_length];\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens3 = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(i);\n    } else if (paren_string[i] === ')') {\n      const paren_stack_length = paren_stack.length;\n      if (paren_stack_length === 0) {\n        return [0, 0];\n      }\n      const paren_stack_top = paren_stack[paren_stack_length - 1];\n      const paren_stack_length_minus_one = paren_stack_length - 1;\n      const paren_stack_top_plus_one = paren_stack_top + 1;\n      if (paren_string[paren_stack_top] === '(') {\n        paren_stack.pop();\n        if (paren_stack_length_minus_one === 0) {\n          return [paren_stack_top_plus_one, paren_stack_top_plus_one];\n        }\n        return [paren_stack_top_plus_one, parseNestedParens3(paren_string, paren_stack_top_plus_one)];\n      } else {\n        return [paren_stack_top_plus_one, paren_stack_top_plus_one];\n      }\n    }\n    i++;\n  }\n  return [paren_string_length, paren_string_length];\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens4 = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(i);\n    } else if (paren_string[i] === ')') {\n      const paren_stack_length = paren_stack.length;\n      if (paren_stack_length === 0) {\n        return [0, 0];\n      }\n      const paren_stack_top = paren_stack[", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/61", "prompt": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [],\n    open = 0,\n    i = 0,\n    j = 0;\n\n  while (i < brackets.length) {\n    if (brackets[i] === '(') {\n      stack.push(i);\n      open++;\n    } else if (brackets[i] === ')') {\n      if (open === 0) {\n        return false;\n      }\n      open--;\n      if (open === 0) {\n        stack.pop();\n      }\n    }\n    i++;\n  }\n  return stack.length === 0;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i];\n  }\n  for (let i = len - 1; i > 0; i--) {\n    d[i] = d[i - 1] * (i + 1);\n  }\n  return d;\n};\n\nconst derivative2 = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i];\n  }\n  for (let i = len - 1; i > 0; i--) {\n    d[i] = d[i - 1] * (i + 1);\n  }\n  return d;\n};\n\nconst derivative3 = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i];\n  }\n  for (let i = len - 1; i > 0; i--) {\n    d[i] = d[i - 1] * (i + 1);\n  }\n  return d;\n};\n\nconst derivative4 = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i];\n  }\n  for (let i = len - 1; i > 0; i--) {\n    d[i] = d[i - 1] * (i + 1);\n  }\n  return d;\n};\n\nconst derivative5 = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i];\n  }\n  for (let i = len - 1; i > 0; i--) {\n    d[i] = d[i - 1] * (i + 1);\n  }\n  return d;\n};\n\nconst derivative6 = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i];\n  }\n  for (let i = len - 1; i > 0; i--) {\n    d[i] = d[i - 1] * (i + 1);\n  }\n  return d;\n};\n\nconst derivative7 = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i];\n  }\n  for (let i = len - 1; i > 0; i--) {\n    d[i] = d[i - 1] * (i + 1);\n  }\n  return d;\n};\n\nconst derivative8 = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i];\n  }\n  for (let i = len - 1; i > 0; i--) {\n    d[i] = d[i - 1] * (i + 1);\n  }\n  return d;\n};\n\nconst derivative9 = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i];\n  }\n  for (let i = len - 1; i > 0; i--) {\n    d[i] = d[i - 1] * (i + 1);\n  }\n  return d;\n};\n\nconst derivative10 = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i];\n  }\n  for (let i = len - 1; i > 0; i--) {\n    d[i] = d[i - 1] * (i + 1);\n  }\n  return d;\n};\n\nconst derivative11 = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i];\n  }\n  for (let i = len - 1; i > 0; i--) {\n    d[i] = d[i - 1] * (i + 1);\n  }\n  return d;\n};\n\nconst derivative12 = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i];\n  }\n  for (let i = len - 1; i > 0; i--) {\n    d[i] = d[i - 1] * (i + 1);\n  }\n  return d;\n};\n\nconst derivative13 = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i];\n  }\n  for (let i = len - 1; i > 0; i--) {\n    d[i] = d[i - 1] * (i + 1);\n  }\n  return d;\n};\n\nconst derivative14 = (xs)", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\n/*Write a function isVowel which took a string representing a word as input\n   and returned a boolean value indicating if the word is a vowel or not. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u'and 'y '. \n   Here, 'y 'was also a vowel, but only when it was at the end of the gave \n   word. \n\n   Example:\n  >>> isVowel(\"abcde\")\n  false\n  >>> isVowel(\"ACEDY\")\n  true\n  */\nconst isVowel = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  return vowels.includes(s[s.length - 1])\n}\n\n/*Write a function isVowel which took a string representing a word as input\n   and returned a boolean value indicating if the word is a vowel or not. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u'and 'y '. \n   Here, 'y 'was also a vowel, but only when it was at the end of the gave \n   word. \n\n   Example:\n  >>> isVowel(\"abcde\")\n  false\n  >>> isVowel(\"ACEDY\")\n  true\n  */\nconst isVowel = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  return vowels.includes(s[s.length - 1])\n}\n\n/*Write a function isVowel which took a string representing a word as input\n   and returned a boolean value indicating if the word is a vowel or not. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u'and 'y '. \n   Here, 'y 'was also a vowel, but only when it was at the end of the gave \n   word. \n\n   Example:\n  >>> isVowel(\"abcde\")\n  false\n  >>> isVowel(\"ACEDY\")\n  true\n  */\nconst isVowel = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  return vowels.includes(s[s.length - 1])\n}\n\n/*Write a function isVowel which took a string representing a word as input\n   and returned a boolean value indicating if the word is a vowel or not. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u'and 'y '. \n   Here, 'y 'was also a vowel, but only when it was at the end of the gave \n   word. \n\n   Example:\n  >>> isVowel(\"abcde\")\n  false\n  >>> isVowel(\"ACEDY\")\n  true\n  */\nconst isVowel = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  return vowels.includes(s[s.length - 1])\n}\n\n/*Write a function isVowel which took a string representing a word as input\n   and returned a boolean value indicating if the word is a vowel or not. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u'and 'y '. \n   Here, 'y 'was also a vowel, but only when it was at the end of the gave \n   word. \n\n   Example:\n  >>> isVowel(\"abcde\")\n  false\n  >>> isVowel(\"ACEDY\")\n  true\n  */\nconst isVowel = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  return vowels.includes(s[s.length - 1])\n}\n\n/*Write a function isVowel which took a string representing a word as input\n   and returned a boolean value indicating if the word is a vowel or not. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u'and 'y '. \n   Here, 'y 'was also a vowel, but only when it was at the end of the gave \n   word. \n\n   Example:\n  >>> isVowel(\"abcde\")\n  false\n  >>> isVowel(\"ACEDY\")\n  true\n  */\nconst isVowel = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  return vowels.includes(s[s.length - 1])\n}\n\n/*Write a function isVowel which took a string representing a word as input\n   and returned a boolean value indicating if the word is a vowel or not. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u'and 'y '. \n   Here, 'y 'was also a vowel, but only when it was at the end of the gave \n   word. \n\n   Example:\n  >>> isVowel(\"abcde\")\n  false\n  >>> isVowel(\"ACEDY\")\n  true\n  */\nconst isVowel = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  return vowels.includes(s[s.length - 1])\n}\n\n/*Write a function isVowel which", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len + shift - i) % len])\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len + shift - i) % len])\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len + shift - i) % len])\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len + shift - i) % len])\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len + shift - i) % len])\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len + shift - i) % len])\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len + shift - i) % len])\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len + shift - i) % len])\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len + shift - i) % len])\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len + shift - i) % len])\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len + shift - i) % len])\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift12 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len + shift - i) % len])\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift13 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len + shift - i) % len])\n  }\n  return result.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift14 = (x, shift) => {\n  const len = x.", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let appleCount = 0;\n   let orangeCount = 0;\n   let mangoCount = 0;\n   let fruitCount = 0;\n   let fruitCountInBasket = 0;\n   let fruitCountInBasketIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMangoIncludingMango = 0;\n   let fruitCountInBasketIncludingMangoIncludingM", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0];\n  let min_index = 0;\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < min) {\n        min = arr[i];\n        min_index = i;\n      }\n    }\n  }\n  return [min, min_index];\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === 0) {\n    return -1;\n  }\n  let frequency = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      frequency++;\n    }\n  }\n  if (frequency >= max) {\n    return max;\n  }\n  return -1;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 1)\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n  ['abc', 'bacd', 'cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 3)\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 4)\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 5)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 6)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 7)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 8)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 9)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 10)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 11)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 12)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 13)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 14)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 15)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 16)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 17)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 18)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 19)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 20)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 21)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 22)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 23)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 24)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 25)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 26)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 27)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 28)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 29)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 30)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 31)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 32)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 33)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 34)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 35)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 36)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 37)\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a',", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  if (len === 0) return []\n  const min = lst[0]\n  const max = lst[len - 1]\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    sorted.push(lst[i])\n  }\n  sorted.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  for (let i = 0; i < len; i++) {\n    sorted.splice(i, 0, min)\n  }\n  for (let i = 0; i < len; i++) {\n    sorted.splice(i, 0, max)\n  }\n  return sorted\n}\n\nexport default strangeSortList\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else if (a + c > b + c) {\n    return ((a * c) / 2).toFixed(2)\n  } else if (b + c > a + b) {\n    return ((b * c) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else if (a + c > b + c) {\n    return ((a * c) / 2).toFixed(2)\n  } else if (b + c > a + b) {\n    return ((b * c) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else if (a + c > b + c) {\n    return ((a * c) / 2).toFixed(2)\n  } else if (b + c > a + b) {\n    return ((b * c) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else if (a + c > b + c) {\n    return ((a * c) / 2).toFixed(2)\n  } else if (b + c > a + b) {\n    return ((b * c) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else if (a + c > b + c) {\n    return ((a * c) / 2).toFixed(2)\n  } else if (b + c > a + b) {\n    return ((b * c) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else if (a + c > b + c) {\n    return ((a * c) / 2).toFixed(2)\n  } else if (b + c > a + b) {\n    return ((b * c) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else if (a + c > b +", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly2 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly3 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly4 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly5 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly6 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly7 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly8 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly9 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly10 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly11 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly12 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly13 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly14 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly15 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly16 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly17 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly18 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly19 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly20 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly21 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly22 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly23 =", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  let i = 0;\n  let j = arr.length - 1;\n  let count = 0;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i);\n      count++;\n    }\n    i++;\n    j--;\n  }\n  return count;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1,", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0) {\n    return lst2;\n  }\n  if (lst2.length === 0) {\n    return lst1;\n  }\n  const total = lst1.reduce((acc, curr) => {\n    if (lst2.indexOf(curr) === -1) {\n      return acc + curr.length;\n    }\n    return acc;\n  }, 0);\n  if (total === lst2.length) {\n    return lst1;\n  }\n  return lst2;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((x) => x % a === 0)\n  return prime.length === 2\n}\n\nconst isMultiplyPrime =", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140) return true\n  if (a ===", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let key = 0;\n  for (let i = 0; i < num.length; i++) {\n    key += num[i].charCodeAt(0) - 48;\n  }\n  return key;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst countPrime = (num) => {\n  let count = 0;\n  let i = 2;\n  while (i < num) {\n    if (isPrime(i)) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst countDigits = (num) => {\n  let count = 0;\n  let i = 0;\n  while (i < num.length) {\n    if (num[i] === 'A' || num[i] === 'B' || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst countPrimeDigits = (num) => {\n  let count = 0;\n  let i = 0;\n  while (i < num.length) {\n    if (isPrime(hexKey(num.substring(i, i + 1)))) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst countDigitsPrime = (num) => {\n  let count = 0;\n  let i = 0;\n  while (i < num.length) {\n    if (isPrime(hexKey(num.substring(i, i + 1)))) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst countPrimeDigitsPrime = (num) => {\n  let count = 0;\n  let i = 0;\n  while (i < num.length) {\n    if (isPrime(hexKey(num.substring(i, i + 1)))) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst countDigitsPrimePrime = (num) => {\n  let count = 0;\n  let i = 0;\n  while (i < num.length) {\n    if (isPrime(hexKey(num.substring(i, i + 1)))) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst countPrimeDigitsPrimePrime = (num) => {\n  let count = 0;\n  let i = 0;\n  while (i < num.length) {\n    if (isPrime(hexKey(num.substring(i, i + 1)))) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst countDigitsPrimePrimePrime = (num) => {\n  let count = 0;\n  let i = 0;\n  while (i < num.length) {\n    if (isPrime(hexKey(num.substring(i, i + 1)))) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst countPrimeDigitsPrimePrimePrime = (num) => {\n  let count = 0;\n  let i = 0;\n  while (i < num.length) {\n    if (isPrime(hexKey(num.substring(i, i + 1)))) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst countPrimeDigitsPrimePrimePrimePrime = (num) => {\n  let count = 0;\n  let i = 0;\n  while (i < num.length) {\n    if (isPrime(hexKey(num.substring(i, i + 1)))) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst countPrimeDigitsPrimePrimePrimePrimePrime = (num) => {\n  let count = 0;\n  let i = 0;\n  while (i < num.length) {\n    if (isPrime(hexKey(num.substring(i, i + 1)))) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst countPrimeDigitsPrimePrimePrimePrimePrimePrime = (num) => {\n  let count = 0;\n  let i = 0;\n  while (i < num.length) {\n    if (isPrime(hexKey(num.substring(i, i + 1)))) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst countPrimeDigitsPrimePrimePrimePrimePrimePrimePrime = (num) => {\n  let count = 0;\n  let i = 0;\n  while (i < num.length) {\n    if (isPrime(hexKey(num.substring(i, i + 1)))) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst countPrimeDigitsPrimePrimePrimePrime", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryLength = 0;\n  let decimalLength = decimal.length;\n  let decimalIndex = 0;\n  let decimalValue = 0;\n  while (decimalIndex < decimalLength) {\n    decimalValue = decimal.charCodeAt(decimalIndex);\n    binary += (decimalValue < 10)? '0' + decimalValue : decimalValue;\n    decimalIndex++;\n  }\n  binaryLength = binary.length;\n  binary += 'db';\n  return binary.substring(0, binaryLength - 2) + 'db';\n};\n\n/*\n  Given a string, this function will return a string with each character replaced by a \n  corresponding binary number. The function should return a string, with each character \n  representing a binary number. Each character in the string was '0 'or '1 '. \n\n  Examples:\n  binaryToDecimal('db1111db')   # returns \"15\"\n  binaryToDecimal('db100000db') # returns \"32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryLength = binary.length;\n  let binaryIndex = 0;\n  let binaryValue = 0;\n  while (binaryIndex < binaryLength) {\n    binaryValue = binary.charCodeAt(binaryIndex);\n    decimal += (binaryValue < 10)? '0' + binaryValue : binaryValue;\n    binaryIndex++;\n  }\n  return decimal;\n};\n\n/*\n  Given a string, this function will return a string with each character replaced by a \n  corresponding binary number. The function should return a string, with each character \n  representing a binary number. Each character in the string was '0 'or '1 '. \n\n  Examples:\n  binaryToDecimal('db1111db')   # returns \"15\"\n  binaryToDecimal('db100000db') # returns \"32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryLength = binary.length;\n  let binaryIndex = 0;\n  let binaryValue = 0;\n  while (binaryIndex < binaryLength) {\n    binaryValue = binary.charCodeAt(binaryIndex);\n    decimal += (binaryValue < 10)? '0' + binaryValue : binaryValue;\n    binaryIndex++;\n  }\n  return decimal;\n};\n\n/*\n  Given a string, this function will return a string with each character replaced by a \n  corresponding binary number. The function should return a string, with each character \n  representing a binary number. Each character in the string was '0 'or '1 '. \n\n  Examples:\n  binaryToDecimal('db1111db')   # returns \"15\"\n  binaryToDecimal('db100000db') # returns \"32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryLength = binary.length;\n  let binaryIndex = 0;\n  let binaryValue = 0;\n  while (binaryIndex < binaryLength) {\n    binaryValue = binary.charCodeAt(binaryIndex);\n    decimal += (binaryValue < 10)? '0' + binaryValue : binaryValue;\n    binaryIndex++;\n  }\n  return decimal;\n};\n\n/*\n  Given a string, this function will return a string with each character replaced by a \n  corresponding binary number. The function should return a string, with each character \n  representing a binary number. Each character in the string was '0 'or '1 '. \n\n  Examples:\n  binaryToDecimal('db1111db')   # returns \"15\"\n  binaryToDecimal('db100000db') # returns \"32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryLength = binary.length;\n  let binaryIndex = 0;\n  let binaryValue = 0;\n  while (binaryIndex < binaryLength) {\n    binaryValue = binary.charCodeAt(binaryIndex);\n    decimal += (binaryValue < 10)? '0' + binaryValue : binaryValue;\n    binaryIndex++;\n  }\n  return decimal;\n};\n\n/*\n  Given a string, this function will return a string with each character replaced by a \n  corresponding binary number. The function should return a string, with each character \n  representing a binary number. Each character in the string was '0 'or '1 '. \n\n  Examples:\n  binaryToDecimal('db1111db')   # returns \"15\"\n  binaryToDecimal('db100000db') # returns \"32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryLength = binary.length;\n  let binaryIndex = 0;\n  let binaryValue = 0;\n  while (binaryIndex < binaryLength) {\n    binaryValue = binary.charCodeAt(binaryIndex);\n    decimal += (binaryValue < 10)? '0' + binaryValue : binaryValue;\n    binaryIndex++;\n  }\n  return decimal;\n};\n\n/*\n  Given a string, this function will return a string with each character replaced by a \n  corresponding binary number. The function should return a string, with each character \n  representing a binary number. Each character in the string was '0 'or '1 '. \n\n  Examples:\n  binaryToDecimal('db1111db')   # returns \"15\"\n  binaryToDecimal('db100000db') # returns \"32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryLength = binary.length;\n  let binaryIndex = 0;\n  let binaryValue = 0;\n  while (binaryIndex < binaryLength) {\n    binaryValue = binary.charCodeAt(binaryIndex);\n    decimal += (binaryValue < 10)? '0' + binaryValue : binaryValue", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [10, 24]\n  */\nconst sumProduct2 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [10, 24]\n  */\nconst sumProduct3 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [10, 24]\n  */\nconst sumProduct4 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [10, 24]\n  */\nconst sumProduct5 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [10, 24]\n  */\nconst sumProduct6 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [10, 24]\n  */\nconst sumProduct7 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [10, 24]\n  */\nconst sumProduct8 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [10, 24]\n  */\nconst sumProduct9 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [10, 24]\n  */\nconst sumProduct10 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [10, 24]\n  */\nconst sumProduct11 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [10, 24]\n  */\nconst sumProduct12 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [10, 24]\n  */\nconst sumProduct13 = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the sum and product of the", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let count = 0;\n  let prev = 0;\n  let i = 0;\n  while (i < len) {\n    count += (s[i] === s[i + 1])? 1 : 0;\n    if (count > 2) {\n      return false;\n    }\n    i += 2;\n  }\n  return count >= 3;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/81", "prompt": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = Array.from(grades);\n  const gradesArrayLength = gradesArray.length;\n  const gradesArrayLengthMinusOne = gradesArrayLength - 1;\n  const gradesArrayLengthMinusTwo = gradesArrayLength - 2;\n  const gradesArrayLengthMinusThree = gradesArrayLength - 3;\n  const gradesArrayLengthMinusFour = gradesArrayLength - 4;\n  const gradesArrayLengthMinusFive = gradesArrayLength - 5;\n  const gradesArrayLengthMinusSix = gradesArrayLength - 6;\n  const gradesArrayLengthMinusSeven = gradesArrayLength - 7;\n  const gradesArrayLengthMinusEight = gradesArrayLength - 8;\n  const gradesArrayLengthMinusNine = gradesArrayLength - 9;\n  const gradesArrayLengthMinusTen = gradesArrayLength - 10;\n  const gradesArrayLengthMinusEleven = gradesArrayLength - 11;\n  const gradesArrayLengthMinusTwelve = gradesArrayLength - 12;\n  const gradesArrayLengthMinusThirteen = gradesArrayLength - 13;\n  const gradesArrayLengthMinusFourteen = gradesArrayLength - 14;\n  const gradesArrayLengthMinusFifteen = gradesArrayLength - 15;\n  const gradesArrayLengthMinusSixteen = gradesArrayLength - 16;\n  const gradesArrayLengthMinusSeventeen = gradesArrayLength - 17;\n  const gradesArrayLengthMinusEighteen = gradesArrayLength - 18;\n  const gradesArrayLengthMinusNineteen = gradesArrayLength - 19;\n  const gradesArrayLengthMinusTwenty = gradesArrayLength - 20;\n  const gradesArrayLengthMinusTwentyOne = gradesArrayLength - 21;\n  const gradesArrayLengthMinusTwentyTwo = gradesArrayLength - 22;\n  const gradesArrayLengthMinusTwentyThree = gradesArrayLength - 23;\n  const gradesArrayLengthMinusTwentyFour = gradesArrayLength - 24;\n  const gradesArrayLengthMinusTwentyFive = gradesArrayLength - 25;\n  const gradesArrayLengthMinusTwentySix = gradesArrayLength - 26;\n  const gradesArrayLengthMinusTwentySeven = gradesArrayLength - 27;\n  const gradesArrayLengthMinusTwentyEight = gradesArrayLength - 28;\n  const gradesArrayLengthMinusTwentyNine = gradesArrayLength - 29;\n  const gradesArrayLengthMinusThirty = gradesArrayLength - 30;\n  const gradesArrayLengthMinusThirtyOne = gradesArrayLength - 31;\n  const gradesArrayLengthMinusThirtyTwo = gradesArrayLength - 32;\n  const gradesArrayLengthMinusThirtyThree = gradesArrayLength - 33;\n  const gradesArrayLengthMinusThirtyFour = gradesArrayLength - 34;\n  const gradesArrayLengthMinusThirtyFive = gradesArrayLength - 35;\n  const gradesArrayLengthMinusThirtySix = gradesArrayLength - 36;\n  const gradesArrayLengthMinusThirtySeven = gradesArrayLength - 37;\n  const gradesArrayLengthMinusThirtyEight = gradesArrayLength - 38;\n  const gradesArrayLengthMinusThirtyNine = gradesArrayLength - 39;\n  const gradesArrayLengthMinusForty = gradesArrayLength - 40;\n  const gradesArrayLengthMinusFortyOne = gradesArrayLength - 41;\n  const gradesArrayLengthMinusFortyTwo = gradesArrayLength - 42;\n  const gradesArrayLengthMinusFortyThree = gradesArrayLength - 43;\n  const gradesArrayLengthMinusFortyFour = gradesArrayLength - 44;\n  const gradesArrayLengthMinusFortyFive = gradesArrayLength - 45;\n  const gradesArrayLengthMinusFortySix = gradesArrayLength - 46;\n  const gradesArrayLengthMinusFortySeven = gradesArrayLength - 47;\n  const gradesArrayLengthMinusFortyEight = gradesArrayLength - 48;\n  const gradesArrayLengthMinusFortyNine = gradesArrayLength - 49;\n  const gradesArrayLengthMinusFifty = gradesArrayLength - 50;\n  const gradesArrayLengthMinusFiftyOne = gradesArrayLength - 51;\n  const gradesArrayLengthMinusFiftyTwo = gradesArrayLength - 52;\n  const gradesArrayLengthMinusFiftyThree = gradesArrayLength - 53;\n  const gradesArrayLengthMinusFiftyFour = gradesArrayLength - 54;\n  const gradesArrayLengthMinusFiftyFive = gradesArrayLength - 55;\n  const gradesArrayLengthMinusFiftySix = gradesArrayLength - 56;\n  const gradesArrayLengthMinusFiftySeven = gradesArrayLength - 57;\n  const gradesArrayLengthMinusFiftyEight = gradesArrayLength - 58;\n  const gradesArrayLengthMinusFiftyNine = gradesArrayLength - 59;\n  const gradesArrayLengthMinusSixty = gradesArrayLength - 60;\n  const gradesArrayLengthMinusSixtyOne = gradesArrayLength - 61;\n  const gradesArrayLengthMinusSixtyTwo = gradesArrayLength - 62;\n  const gradesArrayLengthMinusSixtyThree = gradesArrayLength - 63;\n  const gradesArrayLengthMinusSixtyFour = gradesArrayLength - 64;\n  const gradesArrayLengthMinusSixtyFive = gradesArrayLength - 65;\n  const gradesArrayLengthMinusSixtySix = gradesArrayLength - 66;\n  const gradesArrayLengthMinusSixtySeven = gradesArrayLength - 67;\n  const gradesArrayLengthMinusSixtyEight = gradesArrayLength - 68;\n  const gradesArrayLengthMinusSixtyNine = gradesArrayLength - 69;\n  const gradesArrayLengthMinusSeventy = gradesArrayLength - 70;\n  const gradesArrayLengthMinusSeventyOne = gradesArrayLength - 71;\n  const gradesArray", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const len = string.length;\n  const prime = (n) => {\n    return n > 1 && n % 2 === 0 && n % 3 === 0 && n % 5 === 0 && n % 7 === 0;\n  };\n  return prime(len)? len : false;\n};\n\nexport default primeLength;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds2 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds3 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds4 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds5 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds6 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds7 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds8 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds9 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds10 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds11 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds12 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds13 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds14 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds15 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds16 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    while(num>0){\n      if(num%10==1){\n        count++;\n      }\n      num = num/10;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds17 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let num = i;\n    ", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((digit) => N % 2? digit : 0);\n  return digits.reduce((acc, digit) => acc + digit, 0);\n};\n\nexport default solve;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const sorted = word.split('')\n    sorted.sort((a, b) => a - b)\n    result.push(sorted.join(''))\n  }\n  return result.join(' ')\n}\n\nconsole.log(antiShuffle('Hello World!!!'))\nconsole.log(antiShuffle('Hello World!!!'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a)\n    result.push([i, row[x]])\n  }\n  return result\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer y, found integers y in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by columns in ascending order. \n   Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(0, 3), (1, 3), (2, 3)]\n  */\nconst getCol = (lst, y) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < cols; i++) {\n    const col = []\n    for (let j = 0; j < rows; j++) {\n      col.push(lst[j][i])\n    }\n    col.sort((a, b) => a - b)\n    col.sort((a, b) => b - a)\n    result.push([i, col[y]])\n  }\n  return result\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by columns in ascending order. \n   Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCoordinates = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a)\n    result.push([row[x], i])\n  }\n  return result\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer y, found integers y in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCoordinates = (lst, y) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  ", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length;\n  let i = 0;\n  let j = len - 1;\n  let sum = 0;\n  while (i < j) {\n    sum = array[i] + array[j];\n    if (sum % 2 === 1) {\n      let temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return array;\n};\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(s.charCodeAt(i) - 97);\n    encrypted += letter;\n  }\n  return encrypted;\n};\n\n/*\n  Create a function decrypt that took a string as an argument and \n   returned a string decrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(s.charCodeAt(i) - 97);\n    decrypted += letter;\n  }\n  return decrypted;\n};\n\n/*\n  Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(s.charCodeAt(i) - 97);\n    encrypted += letter;\n  }\n  return encrypted;\n};\n\n/*\n  Create a function decrypt that took a string as an argument and \n   returned a string decrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(s.charCodeAt(i) - 97);\n    decrypted += letter;\n  }\n  return decrypted;\n};\n\n/*\n  Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(s.charCodeAt(i) - 97);\n    encrypted += letter;\n  }\n  return encrypted;\n};\n\n/*\n  Create a function decrypt that took a string as an argument and \n   returned a string decrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(s.charCodeAt(i) - 97);\n    decrypted += letter;\n  }\n  return decrypted;\n};\n\n/*\n  Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt4 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(s.charCodeAt(i) - 97);\n    encrypted += letter;\n  }\n  return encrypted;\n};\n\n/*\n  Create a function decrypt that took a string as an argument and \n   returned a string dec", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  let index = maxIndex;\n  while (index < numbers.length) {\n    result.push(numbers[index]);\n    index++;\n  }\n  return result;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n  if(lst.length===0) return null\n  let min = lst[0]\n  let index = 0\n  for(let i=1; i<lst.length; i++){\n    if(lst[i]<min){\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index+1]\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([1, 1]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were given a string of words, and your task was to count the number \n   of boring words. A boring word was a word that starts with the word \"I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were given a string of words, and your task was to count the number \n   of boring words. A boring word was a word that starts with the word \"I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were given a string of words, and your task was to count the number \n   of boring words. A boring word was a word that starts with the word \"I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were given a string of words, and your task was to count the number \n   of boring words. A boring word was a word that starts with the word \"I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were given a string of words, and your task was to count the number \n   of boring words. A boring word was a word that starts with the word \"I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were given a string of words, and your task was to count the number \n   of boring words. A boring word was a word that starts with the word \"I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were given a string of words, and your task was to count the number \n   of boring words. A boring word was a word that starts with the word \"I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were given a", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x + z === y) || (y + z === x);\n};\n\nconst anyInt2 = (x, y) => {\n  return (x + y === x + y) || (x + y === y + x) || (x + y === y + x);\n};\n\nconst anyInt3 = (x, y, z) => {\n  return (x + y === x + y) || (x + y === y + x) || (x + y === y + x);\n};\n\nconst anyInt4 = (x, y, z, w) => {\n  return (x + y === x + y) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x);\n};\n\nconst anyInt5 = (x, y, z, w, v) => {\n  return (x + y === x + y) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x);\n};\n\nconst anyInt6 = (x, y, z, w, v, u) => {\n  return (x + y === x + y) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x);\n};\n\nconst anyInt7 = (x, y, z, w, v, u, t) => {\n  return (x + y === x + y) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x);\n};\n\nconst anyInt8 = (x, y, z, w, v, u, t, s) => {\n  return (x + y === x + y) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x);\n};\n\nconst anyInt9 = (x, y, z, w, v, u, t, s, r) => {\n  return (x + y === x + y) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x);\n};\n\nconst anyInt10 = (x, y, z, w, v, u, t, s, r, p) => {\n  return (x + y === x + y) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x);\n};\n\nconst anyInt11 = (x, y, z, w, v, u, t, s, r, p, q) => {\n  return (x + y === x + y) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x);\n};\n\nconst anyInt12 = (x, y, z, w, v, u, t, s, r, p, q, o) => {\n  return (x + y === x + y) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x);\n};\n\nconst anyInt13 = (x, y, z, w, v, u, t, s, r, p, q, o, m) => {\n  return (x + y === x + y) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x);\n};\n\nconst anyInt14 = (x, y, z, w, v, u, t, s, r, p, q, o, m, k) => {\n  return (x + y === x + y) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x) || (x + y === y + x);\n};\n\nconst anyInt15 = (x, y, z, w, v, u, t, s, r, p, q, o, m, k, l", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    let nextNextLetter = message[i + 2];\n    if (letter === nextLetter && letter === nextNextLetter) {\n      encoded += letter;\n      i++;\n    } else if (letter === nextLetter) {\n      encoded += 'T';\n      i++;\n    } else if (letter === nextNextLetter) {\n      encoded += 'K';\n      i++;\n    } else if (letter === 'T') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'K') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'S') {\n      encoded += 'C';\n      i++;\n    } else if (letter === 'C') {\n      encoded += 'G';\n      i++;\n    } else if (letter === 'G') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'H') {\n      encoded += 'K';\n      i++;\n    } else if (letter === 'I') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'J') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'O') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'U') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'P') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'R') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'T') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'V') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'W') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'Y') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'Z') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'A') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'B') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'D') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'E') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'F') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'G') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'H') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'I') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'L') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'M') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'N') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'O') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'P') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'Q') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'R') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'S') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'T') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'U') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'V') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'W') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'X') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'Y') {\n      encoded += 'S';\n      i++;\n    } else if (letter === 'Z') {\n      encoded += 'S';\n      i++;\n    } else if (letter === '1') {\n      encoded += 'S';\n      i++;\n    } else if (letter === '2') {\n      encoded += 'S';\n      i++;\n    } else if (letter === '3') {\n      encoded += 'S';\n      i++;\n    } else if (letter === '4') {\n      encoded += 'S';\n      i++;\n    } else if (letter === '5') {\n      encoded += 'S';\n      i++;\n    } else if (letter === '6') {\n      encoded += 'S';\n      i++;\n    } else if (letter === '7') {\n      encoded += 'S';\n      i++;\n    } else if (letter === '8') {\n      encoded += 'S';\n      i++;\n    } else if (letter === '9') {\n      encoded += 'S';\n      i++;\n    } else if (letter === '0') {\n      encoded += 'S';\n      i++;\n    } else if (letter === '!') {\n      encoded += 'S';\n      i++;\n    } else if (letter === '?') {\n      encoded += 'S';\n      i++;\n    } else if (letter === '@') {\n      encoded += 'S';\n      i++;\n    } else if (", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let prime = isPrime(num);\n    if (prime) {\n      max = Math.max(max, num);\n      sum += num;\n    }\n  }\n  return sum;\n};\n\nconst isPrime = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  return allKeysAreStrings\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  return allKeysAreStrings\n}\n\nconst checkDictCaseOr = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  return allKeysAreStrings\n}\n\nconst checkDictOr = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  return allKeysAreStrings\n}\n\nconst checkDictCaseOrNull = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  return allKeysAreStrings\n}\n\nconst checkDictOrNull = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  return allKeysAreStrings\n}\n\nconst checkDictCaseOrNullOr = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  return allKeysAreStrings\n}\n\nconst checkDictOrNullOr = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  return allKeysAreStrings\n}\n\nconst checkDictCaseOrNullOrNull = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  return allKeysAreStrings\n}\n\nconst checkDictOrNullOrNull = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  return allKeysAreStrings\n}\n\nconst checkDictCaseOrNullOrNullOr = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  return allKeysAreStrings\n}\n\nconst checkDictOrNullOrNullOr = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  return allKeysAreStrings\n}\n\nconst checkDictCaseOrNullOrNullOrNull = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  return allKeysAreStrings\n}\n\nconst checkDictOrNullOrNullOrNull = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  return allKeysAreStrings\n}\n\nconst checkDictCaseOrNullOrNullOrNullOr = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  return allKeysAreStrings\n}\n\nconst checkDictOrNullOrNullOrNullOr = (dict) => {\n  const keys = Object.keys(dict)\n  let allKeysAreStrings = true\n  keys.forEach(key => {\n    if (typeof key!=='string') {\n      allKeysAreStrings = false\n    }\n  })\n  ", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a % 10\n  let b_unit = b % 10\n  let product = a_unit * b_unit\n  let result = product\n  while (result > 0) {\n    result = result % 10\n    product = product * 10\n  }\n  return result\n}\n\n/*\n  Complete the function that takes two strings and returns their product.\n  Assumed the input was always valid.\n  Examples:\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"bc\") should return \"abcbc\".\n  multiply(\"abc\", \"\") should return \"abc\".\n  multiply(\"\", \"abc\") should return \"abc\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc\", \"def\") should return \"abcdef\".\n  multiply(\"abc", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countUpper('aBCdEf'));\nconsole.log(countUpper('abcdefg'));\nconsole.log(countUpper('dBBE'));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const intValue = parseInt(value, 10);\n  const absValue = Math.abs(intValue);\n  const absIntValue = Math.abs(intValue);\n  const absIntValue2 = Math.abs(intValue - 1);\n  const absIntValue3 = Math.abs(intValue + 1);\n  if (absValue === absIntValue) {\n    return intValue;\n  } else if (absValue === absIntValue2) {\n    return intValue + 1;\n  } else if (absValue === absIntValue3) {\n    return intValue - 1;\n  } else {\n    return Math.round(intValue);\n  }\n};\n\n/*\n  Create a function that takes a number and returns the closest number\n  that is divisible by the given number.\n  Examples\n  >>> closestDivisible(10, 3)\n  3\n  >>> closestDivisible(10, 5)\n  5\n  >>> closestDivisible(10, 7)\n  7\n  >>> closestDivisible(10, 11)\n  11\n  >>> closestDivisible(10, 13)\n  13\n  >>> closestDivisible(10, 17)\n  17\n  >>> closestDivisible(10, 19)\n  19\n  >>> closestDivisible(10, 21)\n  21\n  >>> closestDivisible(10, 23)\n  23\n  >>> closestDivisible(10, 29)\n  29\n  >>> closestDivisible(10, 31)\n  31\n  >>> closestDivisible(10, 37)\n  37\n  >>> closestDivisible(10, 41)\n  41\n  >>> closestDivisible(10, 43)\n  43\n  >>> closestDivisible(10, 47)\n  47\n  >>> closestDivisible(10, 49)\n  49\n  >>> closestDivisible(10, 51)\n  51\n  >>> closestDivisible(10, 53)\n  53\n  >>> closestDivisible(10, 59)\n  59\n  >>> closestDivisible(10, 61)\n  61\n  >>> closestDivisible(10, 67)\n  67\n  >>> closestDivisible(10, 71)\n  71\n  >>> closestDivisible(10, 73)\n  73\n  >>> closestDivisible(10, 79)\n  79\n  >>> closestDivisible(10, 81)\n  81\n  >>> closestDivisible(10, 83)\n  83\n  >>> closestDivisible(10, 89)\n  89\n  >>> closestDivisible(10, 91)\n  91\n  >>> closestDivisible(10, 97)\n  97\n  >>> closestDivisible(10, 99)\n  99\n  >>> closestDivisible(10, 101)\n  101\n  >>> closestDivisible(10, 103)\n  103\n  >>> closestDivisible(10, 107)\n  107\n  >>> closestDivisible(10, 109)\n  109\n  >>> closestDivisible(10, 111)\n  111\n  >>> closestDivisible(10, 113)\n  113\n  >>> closestDivisible(10, 127)\n  127\n  >>> closestDivisible(10, 131)\n  131\n  >>> closestDivisible(10, 137)\n  137\n  >>> closestDivisible(10, 139)\n  139\n  >>> closestDivisible(10, 149)\n  149\n  >>> closestDivisible(10, 151)\n  151\n  >>> closestDivisible(10, 157)\n  157\n  >>> closestDivisible(10, 163)\n  163\n  >>> closestDivisible(10, 167)\n  167\n  >>> closestDivisible(10, 179)\n  179\n  >>> closestDivisible(10, 181)\n  181\n  >>> closestDivisible(10, 191)\n  191\n  >>> closestDivisible(10, 193)\n  193\n  >>> closestDivisible(10, 197)\n  197\n  >>> closestDivisible(10, 199)\n  199\n  >>> closestDivisible(10, 211)\n  211\n  >>> closestDivisible(10, 223)\n  223\n  >>> closestDivisible(10, 227)\n  227\n  >>> closestDivisible(10, 229)\n  229\n  >>> closestDivisible(10, 233)\n  233\n  >>> closestDivisible(10, 239)\n  239\n  >>> closestDivisible(10, 241)\n  241\n  >>> closestDivisible(10, 251)\n  251\n  >>> closestDivisible(10, 257)\n  257\n  >>> closestDivisible(10, 263)\n  263\n  >>> closestDivisible(10, 269)\n  269\n  >>> closestDivisible(10, 271)\n  271\n  >>> closestDivisible(10, 277)\n  277\n  >>> closestDivisible(10, 281)\n  281\n  >>> closestDivisible(10, 283)\n  283\n  >>> closestDivisible(10, 293)\n  293\n  >>> closestDivisible(10, 307)\n  307\n  >>> closestDivisible(10, 311)\n  311\n  >>> closestDivisible(10, 313)\n  313\n  >>> closestDivisible(10, 317)\n  317\n  >>> closestDivisible(10, 331)\n  331\n  >>> closestDivisible(10, 337)\n  337\n  >>> closestDivisible(10, 347)\n  347\n  >>> closestDivisible(10, 349)\n  349\n  >>> closestDivisible(10, 353)\n  353\n  >>> closestDivisible(10, 359)\n  359\n  >>> closestDivisible(10, 367)\n  367\n  >>> closestDivisible(10, 373)\n  373\n  >>> closestDivisible(10, 379)\n  379\n  >>> closestDivisible(10, 383)\n  383\n  >>> closestDivisible(10, 391)\n  391\n  >>> closestDivisible(10, 397)\n  397\n  >>> closestDivisible(10, 401)\n  401\n  >>> closestDivisible(10,", "passed": 0}
