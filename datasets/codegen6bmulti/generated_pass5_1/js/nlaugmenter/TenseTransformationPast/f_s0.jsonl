{"task_id": "JavaScript/0", "prompt": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  false\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  false\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  false\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  false\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  false\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0,"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_string_array = paren_string.split('(');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_length_minus_1 = paren_string_array_length - 1;\n  const paren_string_array_length_minus_2 = paren_string_array_length_minus_1 - 1;\n  const paren_string_array_length_minus_3 = paren_string_array_length_minus_2 - 1;\n  const paren_string_array_length_minus_4 = paren_string_array_length_minus_3 - 1;\n  const paren_string_array_length_minus_5 = paren_string_array_length_minus_4 - 1;\n  const paren_string_array_length_minus_6 = paren_string_array_length_minus_5 - 1;\n  const paren_string_array_length_minus_7 = paren_string_array_length_minus_6 - 1;\n  const paren_string_array_length_minus_8 = paren_string_array_length_minus_7 - 1;\n  const paren_string_array_length_minus_9 = paren_string_array_length_minus_8 - 1;\n  const paren_string_array_length_minus_10 = paren_string_array_length_minus_9 - 1;\n  const paren_string_array_length_minus_11 = paren_string_array_length_minus_10 - 1;\n  const paren_string_array_length_minus_12 = paren_string_array_length_minus_11 - 1;\n  const paren_string_array_length_minus_13 = paren_string_array_length_minus_12 - 1;\n  const paren_string_array_length_minus_14 = paren_string_array_length_minus_13 - 1;\n  const paren_string_array_length_minus_15 = paren_string_array_length_minus_14 - 1;\n  const paren_string_array_length_minus_16 = paren_string_array_length_minus_15 - 1;\n  const paren_string_array_length_minus_17 = paren_string_array_length_minus_16 - 1;\n  const paren_string_array_length_minus_18 = paren_string_array_length_minus_17 - 1;\n  const paren_string_array_length_minus_19 = paren_string_array_length_minus_18 - 1;\n  const paren_string_array_length_minus_20 = paren_string_array_length_minus_19 - 1;\n  const paren_string_array_length_minus_21 = paren_string_array_length_minus_20 - 1;\n  const paren_string_array_length_minus_22 = paren_string_array_length_minus_21 - 1;\n  const paren_string_array_length_minus_23 = paren_string_array_length_minus_22 - 1;\n  const paren_string_array_length_minus_24 = paren_string_array_length_minus_23 - 1;\n  const paren_string_array_length_minus_25 = paren_string_array_length_minus_24 - 1;\n  const paren_string_array_length_minus_26 = paren_string_array_length_minus_25 - 1;\n  const paren_string_array_length_minus_27 = paren_string_array_length_minus_26 - 1;\n  const paren_string_array_length_minus_28 = paren_string_array_length_minus_27 - 1;\n  const paren_string_array_length_minus_29 = paren_string_array_length_minus_28 - 1;\n  const paren_string_array_length_minus_30 = paren_string_array_length_minus_29 - 1;\n  const paren_string_array_length_minus_31 = paren_string_array_length_minus_30 - 1;\n  const paren_string_array_length_minus_32 = paren_string_array_length_minus_31 - 1;\n  const paren_string_array_length_minus_33 = paren_string_array_length_minus_32 - 1;\n  const paren_string_array_length_minus_34 = paren_string_array_length_minus_33 - 1;\n  const paren_string_array_length_minus_35 = paren_string_array_length_minus_34 - 1;\n  const paren_string_array_length_minus_36 = paren_string_array_length_minus_35 - 1;\n  const paren_string_array_length_minus_37 = paren_string_array_length_minus_36 - 1;\n  const paren_string_array_length_minus_38 = paren_string_array_length_minus_37 - 1;\n  const paren_string_array_length_minus_39 = paren_string_array_length_minus_38 - 1;\n  const paren_string_array_length_minus_40 = paren_string_array_length_minus_39 - 1;\n  const paren_string_array_length_minus_41 = paren_string_array_length_minus_40 - 1;\n  const paren_string_array_length_minus_42 = paren_string_array_length_minus_41 - 1;\n  const paren_string_array_length_minus_43 = paren_string_array_length_minus_42 - 1;\n  const paren_string_array_length_minus_44 = paren_string_array_length_minus_43 - 1;\n  const paren_string_array_length_minus_45 = paren"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number with decimals removed.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimal = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + decimalPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number with decimals removed and with the integer part \n   truncated.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalAndTruncateInteger = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + decimalPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number with decimals removed and with the integer part \n   truncated.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateIntegerAndTruncateDecimal = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + decimalPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number with decimals removed and with the integer part \n   truncated.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalAndTruncateIntegerAndTruncateDecimal = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + decimalPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number with decimals removed and with the integer part \n   truncated.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateIntegerAndTruncateDecimalAndTruncateInteger = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + decimalPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number with decimals removed and with the integer part \n   truncated.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateIntegerAndTruncateDecimalAndTruncateIntegerAndTruncateDecimal = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + decimalPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number with decimals removed and with the integer part \n   truncated.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateIntegerAndTruncateDecimalAndTruncateIntegerAndTruncateDecimalAndTruncateInteger = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + decimalPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number with decimals removed and with the integer part \n   truncated.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateIntegerAndTruncateDecimalAndTruncateIntegerAndTruncateDecimalAndTruncateIntegerAndTruncateDecimal = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return integerPart + decimalPart;\n};\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the number with decimals removed and with the integer part \n   truncated.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateIntegerAndTruncateDecimalAndTruncateIntegerAndTruncateDecimalAndTruncateIntegerAndTruncateDecimalAndTruncateInteger = (number) => {\n  let integerPart = Math.floor(number);\n  let decimal"}
{"task_id": "JavaScript/3", "prompt": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\nconsole.log(belowZero([1, 2, 3]));\nconsole.log(belowZero([1, 2, -4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers) => {\n    const diffs = numbers.map(number => Math.abs(number - mean));\n    return Math.abs(mean - (diffs.reduce(sum, 0) / numbers.length));\n  };\n  return mad(numbers);\n};\n\n/*\n  For a given list of numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the sum of the squared differences \n  between each element and the mean.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.2909944487358056\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const diffs = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(sum(diffs) / numbers.length);\n};\n\n/*\n  For a given list of numbers, calculate the variance of this dataset. \n  Variance is the sum of the squared differences between each element and the \n  mean, divided by the number of elements.\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.5\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const diffs = numbers.map(number => Math.pow(number - mean, 2));\n  return sum(diffs) / numbers.length;\n};\n\n/*\n  For a given list of numbers, calculate the standard error of this dataset. \n  Standard error is the square root of the variance.\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.2909944487358056\n  */\nconst standardError = (numbers) => {\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  For a given list of numbers, calculate the skewness of this dataset. \n  Skewness is the ratio of the standard deviation to the mean.\n  >>> skewness([1.0, 2.0, 3.0, 4.0])\n  0.0\n  */\nconst skewness = (numbers) => {\n  const mean = mean(numbers);\n  const stdDev = standardDeviation(numbers);\n  return stdDev / mean;\n};\n\n/*\n  For a given list of numbers, calculate the kurtosis of this dataset. \n  Kurtosis is the ratio of the variance to the mean squared.\n  >>> kurtosis([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst kurtosis = (numbers) => {\n  const mean = mean(numbers);\n  const variance = variance(numbers);\n  return variance / mean;\n};\n\n/*\n  For a given list of numbers, calculate the mode of this dataset. \n  Mode is the most frequent number in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mode = (numbers) => {\n  const count = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (count[numbers[i]] === undefined) {\n      count[numbers[i]] = 1;\n    } else {\n      count[numbers[i]]++;\n    }\n  }\n  const maxCount = Object.keys(count).reduce((max, key) => {\n    return count[key] > max? count[key] : max;\n  }, 0);\n  return numbers.filter(number => count[number] === maxCount)[0];\n};\n\n/*\n  For a given list of numbers, calculate the median of this dataset. \n  Median is the middle number in the dataset.\n  >>> median([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst median = (numbers) => {\n  const sorted = numbers.sort();\n  const half = Math.floor(numbers.length / 2);\n  return sorted[half];\n};\n\n/*\n  For a given list of numbers, calculate the range of this dataset. \n  Range is the difference between the highest and lowest number in the dataset.\n  >>> range([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst range = (numbers) => {\n  return Math.max(numbers) - Math.min(numbers);\n};\n\n/*\n  For a given list of numbers, calculate the mode of this dataset. \n  Mode is the most frequent number in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mode = (numbers) => {\n  const count = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (count[numbers[i]] === undefined) {\n      count[numbers[i]] = 1;\n    } else {\n      count[numbers[i]]++;\n    }\n  }\n  const maxCount = Object.keys(count).reduce((max, key) => {\n    return count[key] > max? count[key] : max;\n  }, 0);\n  return numbers.filter(number => count[number] === maxCount)[0];\n};\n\n/*\n  For a given list of numbers, calculate the median of this dataset. \n  Median is the middle number in the dataset.\n  >>> median([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst median = (numbers) => {\n  const sorted = numbers.sort();\n  const half = Math.floor(numbers.length / 2);\n  return sorted[half];\n};\n\n/*\n  For a given list of numbers, calculate the range of this dataset"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i < len - 1) {\n      result.push(delimeter)\n    }\n    i++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3, 4]\n  >>> intersperse([1, 2, 3, 4, 5], 4)\n  [1, 4, 2, 4, 3, 4, 5]\n  >>> intersperse([1, 2, 3, 4, 5, 6], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = [paren_string];\n  const stack_length = stack.length;\n  const stack_max = stack_length - 1;\n  const stack_max_index = stack_max;\n  const stack_max_length = stack[stack_max_index].length;\n  const stack_max_char = stack[stack_max_index].charAt(stack_max_length - 1);\n  const stack_max_char_index = stack_max_length - 1;\n  const stack_max_char_char = stack[stack_max_index].charAt(stack_max_char_index);\n  const stack_max_char_char_index = stack_max_char_char.length - 1;\n  const stack_max_char_char_char = stack[stack_max_index].charAt(stack_max_char_char_index);\n  const stack_max_char_char_char_index = stack_max_char_char_char.length - 1;\n  const stack_max_char_char_char_char = stack[stack_max_index].charAt(stack_max_char_char_char_index);\n  const stack_max_char_char_char_char_index = stack_max_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char = stack[stack_max_index].charAt(stack_max_char_char_char_char_index);\n  const stack_max_char_char_char_char_char_index = stack_max_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char = stack[stack_max_index].charAt(stack_max_char_char_char_char_char_index);\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char_char_char_index = stack_max_char_char_char_char_char_char.length - 1;\n  const stack_max_char_char_char_char"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring13 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring14 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring15 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde',"}
{"task_id": "JavaScript/8", "prompt": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((sum, number) => sum + number, 0);\n  const product = numbers.reduce((product, number) => product * number, 1);\n  return [sum, product];\n};\n\nexport default sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxLength = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n    } else if (numbers[i] === max) {\n      maxLength++;\n    }\n  }\n  return [max, maxIndex, maxLength];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').join('');\n  let longestPalindrome = prefix.length;\n  let longestPalindromeSuffix = suffix.length;\n  let i = 0;\n  while (i < longestPalindrome) {\n    if (isPalindrome(prefix + suffix)) {\n      longestPalindrome = i;\n      longestPalindromeSuffix = suffix.length;\n    }\n    i++;\n  }\n  return prefix + suffix.substring(0, longestPalindromeSuffix);\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome*/\nconst isPalindrome = (string"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Given two strings a and b, return the longest common prefix of these strings.\n  If there is no common prefix, return an empty string.\n  >>> commonPrefix('abc', 'abcd')\n  'ab'\n  >>> commonPrefix('abcd', 'abc')\n  ''\n  */\nconst commonPrefix = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  let i = 0;\n  while (i < aLength && i < bLength && a[i] === b[i]) {\n    i++;\n  }\n  return i === aLength? a : a.substring(0, i);\n};\n\n/*\n  Given two strings a and b, return the longest common suffix of these strings.\n  If there is no common suffix, return an empty string.\n  >>> commonSuffix('abc', 'abcd')\n  'cd'\n  >>> commonSuffix('abcd', 'abc')\n  ''\n  */\nconst commonSuffix = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  let i = 0;\n  while (i < aLength && i < bLength && a[aLength - 1 - i] === b[bLength - 1 - i]) {\n    i++;\n  }\n  return i === aLength? a : a.substring(aLength - i, aLength);\n};\n\n/*\n  Given two strings a and b, return the longest common substring of these strings.\n  If there is no common substring, return an empty string.\n  >>> commonSubstring('abc', 'abcd')\n  'ab'\n  >>> commonSubstring('abcd', 'abc')\n  ''\n  */\nconst commonSubstring = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  let i = 0;\n  let j = 0;\n  while (i < aLength && j < bLength) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n    } else {\n      i = j = 0;\n    }\n  }\n  return i === aLength? a : a.substring(0, i);\n};\n\n/*\n  Given two strings a and b, return the longest common prefix of these strings.\n  If there is no common prefix, return an empty string.\n  >>> longestCommonPrefix('abc', 'abcd')\n  'ab'\n  >>> longestCommonPrefix('abcd', 'abc')\n  ''\n  */\nconst longestCommonPrefix = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  let i = 0;\n  while (i < aLength && i < bLength && a[i] === b[i]) {\n    i++;\n  }\n  return i === aLength? a : a.substring(0, i);\n};\n\n/*\n  Given two strings a and b, return the longest common suffix of these strings.\n  If there is no common suffix, return an empty string.\n  >>> longestCommonSuffix('abc', 'abcd')\n  'cd'\n  >>> longestCommonSuffix('abcd', 'abc')\n  ''\n  */\nconst longestCommonSuffix = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  let i = 0;\n  while (i < aLength && i < bLength && a[aLength - 1 - i] === b[bLength - 1 - i]) {\n    i++;\n  }\n  return i === aLength? a : a.substring(aLength - i, aLength);\n};\n\n/*\n  Given two strings a and b, return the longest common substring of these strings.\n  If there is no common substring, return an empty string.\n  >>> longestCommonSubstring('abc', 'abcd')\n  'ab'\n  >>> longestCommonSubstring('abcd', 'abc')\n  ''\n  */\nconst longestCommonSubstring = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  let i = 0;\n  let j = 0;\n  while (i < aLength && j < bLength) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n    } else {\n      i = j = 0;\n    }\n  }\n  return i === aLength? a : a.substring(0, i);\n};\n\n/*\n  Given two strings a and b, return the longest common substring of these strings.\n  If there is no common substring, return an empty string.\n  >>> longestCommonSubstring('abc', 'abcd')\n  'ab'\n  >>> longestCommonSubstring('abcd', 'abc')\n  ''\n  */\nconst longestCommonSubstring = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  let i = 0;\n  let j = 0;\n  while (i < aLength && j < bLength) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n    } else {\n      i = j = 0;\n    }\n  }\n  return i === aLength? a : a.substring(0, i);\n};\n\n/*\n  Given two strings a and b, return the longest common substring of these strings.\n  If there is no common substring, return an empty string.\n  >>> longestCommonSubstring('abc', 'abcd')\n  'ab'\n  >>> longestCommonSubstring('abcd', 'abc')\n  ''\n  */\nconst longestCommonSubstring = (a, b) => {\n  const aLength = a.length"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a > b) {\n    return greatestCommonDivisor(b, a);\n  }\n  return greatestCommonDivisor(a, b);\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": false, "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3)\n  '0 1 2'\n  >>> stringSequence(5, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, length) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result.substr(0, length);\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-')\n  '0-3'\n  >>> stringSequence(5, 3, '-')\n  '0-1-2-3-4-5'\n  */\nconst stringSequence = (n, length, delimiter) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} ${delimiter} `;\n  }\n  return result.substr(0, length);\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','')\n  '0-3'\n  >>> stringSequence(5, 3, '-','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, length, delimiter, delimiter2) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} ${delimiter} ${delimiter2} `;\n  }\n  return result.substr(0, length);\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','', '*')\n  '0-3'\n  >>> stringSequence(5, 3, '-','', '*')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, length, delimiter, delimiter2, delimiter3) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} ${delimiter} ${delimiter2} ${delimiter3} `;\n  }\n  return result.substr(0, length);\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','', '*','')\n  '0-3'\n  >>> stringSequence(5, 3, '-','', '*','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, length, delimiter, delimiter2, delimiter3, delimiter4) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} ${delimiter} ${delimiter2} ${delimiter3} ${delimiter4} `;\n  }\n  return result.substr(0, length);\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','', '*','', '#')\n  '0-3'\n  >>> stringSequence(5, 3, '-','', '*','', '#')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, length, delimiter, delimiter2, delimiter3, delimiter4, delimiter5) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} ${delimiter} ${delimiter2} ${delimiter3} ${delimiter4} ${delimiter5} `;\n  }\n  return result.substr(0, length);\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','', '*','', '#','')\n  '0-3'\n  >>> stringSequence(5, 3, '-','', '*','', '#','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, length, delimiter, delimiter2, delimiter3, delimiter4, delimiter5, delimiter6) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} ${delimiter} ${delimiter2} ${delimiter3} ${delimiter4} ${delimiter5} ${delimiter6} `;\n  }\n  return result.substr(0, length);\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','', '*','', '#','', '#')\n  '0-3'\n  >>> stringSequence(5, 3, '-','', '*','', '#','', '#')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, length, delimiter, delimiter2, delimiter3, delimiter4, delimiter5, delimiter6, delimiter7) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} ${delimiter} ${delimiter2} ${delimiter3} ${delimiter4} ${delimiter5} ${delimiter6} ${delimiter7} `;\n  }\n  return result.substr(0, length);"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase().toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase().toUpperCase());\n    charSet.add(string[i].toUpperCase().toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase().toUpperCase());\n    charSet.add(string[i].toUpperCase().toLowerCase());\n    charSet.add(string[i].toLowerCase().toUpperCase().toLowerCase());\n    charSet.add(string[i].toUpperCase().toLowerCase().toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase().toUpperCase());\n    charSet.add(string[i].toUpperCase().toLowerCase());\n    charSet.add(string[i].toLowerCase().toUpperCase().toLowerCase());\n    charSet.add(string[i].toUpperCase().toLowerCase().toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase().toUpperCase());\n    charSet.add(string[i].toUpperCase().toLowerCase());\n    charSet.add(string[i].toLowerCase().toUpperCase().toLowerCase());\n    charSet.add(string[i].toUpperCase().toLowerCase().toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function was a string representing musical notes in a special ASCII format. \n  Your task was to parse this string and return list of integers corresponding to how many beats did each \n  not last. \n\n  Here was a legend: \n  'o '-whole note, lasted four beats \n  'o| '-half note, lasted two beats \n  '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function was a string representing musical notes in a special ASCII format. \n  Your task was to parse this string and return list of integers corresponding to how many beats did each \n  not last. \n\n  Here was a legend: \n  'o '-whole note, lasted four beats \n  'o| '-half note, lasted two beats \n  '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function was a string representing musical notes in a special ASCII format. \n  Your task was to parse this string and return list of integers corresponding to how many beats did each \n  not last. \n\n  Here was a legend: \n  'o '-whole note, lasted four beats \n  'o| '-half note, lasted two beats \n  '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function was a string representing musical notes in a special ASCII format. \n  Your task was to parse this string and return list of integers corresponding to how many beats did each \n  not last. \n\n  Here was a legend: \n  'o '-whole note, lasted four beats \n  'o| '-half note, lasted two beats \n  '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic5 = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function was a string representing musical notes in a special ASCII format. \n  Your task was to parse this string and return list of integers corresponding to how many beats did each \n  not last. \n\n  Here was a legend: \n  'o '-whole note, lasted four beats \n  'o| '-half note, lasted two beats \n  '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < substring.length; j++) {\n      if (string[i + j] === substring[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Find the longest substring in the original string that can be formed by repeating a character.\n  >>> longestSubstring('a')\n  'a'\n  >>> longestSubstring('aa')\n  'aa'\n  >>> longestSubstring('aaa')\n  'aaa'\n  >>> longestSubstring('aaaa')\n  'aaaa'\n  >>> longestSubstring('aaaaa')\n  'aaaaa'\n  >>> longestSubstring('aaaaaa')\n  'aaaaaa'\n  >>> longestSubstring('aaaaaaa')\n  'aaaaaaa'\n  >>> longestSubstring('aaaaaaaa')\n  'aaaaaaaa'\n  >>> longestSubstring('aaaaaaaaa')\n  'aaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaa')\n  'aaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaa')\n  'aaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaa')\n  'aaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaa')\n  'aaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  >>> longestSubstring('"}
{"task_id": "JavaScript/19", "prompt": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const sortedNumbers = numbers.split(' ').sort((a, b) => {\n    const aNumber = parseInt(a.slice(1), 10);\n    const bNumber = parseInt(b.slice(1), 10);\n    return aNumber - bNumber;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input:\n  'one two three four five six'\n  \n  Output:\n  'one two three four five six'\n  \n  Explanation:\n  The numbers 'one' and 'two' were sorted first, then 'three' and 'four', then 'five' and'six'.\n  \n  Note:\n  \n  The string may contain duplicate characters, for example 'one one one' or 'zero zero zero two'.\n  However, your solution should only return the sorted string, not the list of sorted characters.\n  \n  Example 1:\n  \n  Input:\n  'one two three four five six'\n  \n  Output:\n  'one two three four five six'\n  \n  Explanation:\n  'one' was sorted first, then 'two', then 'three', 'four', 'five', and'six'.\n  \n  Example 2:\n  \n  Input:\n  'zero one two three four five six'\n  \n  Output:\n  'zero one two three four five six'\n  \n  Explanation:\n  'zero' was sorted first, then 'one', 'two', 'three', 'four', 'five', and'six'.\n  \n  Example 3:\n  \n  Input:\n  'one one two two three three four four five five six six'\n  \n  Output:\n  'one one two two three three four four five five six six'\n  \n  Explanation:\n  'one' was sorted first, then 'one', 'two', 'two', 'three', 'three', 'four', 'four', 'five', and 'five','six', and'six'.\n  \n  Example 4:\n  \n  Input:\n  'zero zero one one two two three three four four five five six six'\n  \n  Output:\n  'zero zero one one two two three three four four five five six six'\n  \n  Explanation:\n  'zero' was sorted first, then 'zero', 'one', 'one', 'two', 'two', 'three', 'three', 'four', 'four', 'five', and 'five','six', and'six'.\n  \n  Example 5:\n  \n  Input:\n  'one one one two two two three three three four four four five five five six six six'\n  \n  Output:\n  'one one one two two two three three three four four four five five five six six six'\n  \n  Explanation:\n  'one' was sorted first, then 'one', 'one', 'two', 'two', 'three', 'three', 'four', 'four', 'five', and 'five','six', and'six'.\n  \n  Example 6:\n  \n  Input:\n  'one two three four five one two three four five six'\n  \n  Output:\n  'one two three four five one two three four five six'\n  \n  Explanation:\n  'one' was sorted first, then 'two', 'three', 'four', 'five', 'one', 'two', 'three', 'four', 'five', and'six'.\n  \n  Example 7:\n  \n  Input:\n  'one two three four five one two three four five six'\n  \n  Output:\n  'one two three four five one two three four five six'\n  \n  Explanation:\n  'one' was sorted first, then 'two', 'three', 'four', 'five', 'one', 'two', 'three', 'four', 'five', and'six'.\n  \n  Example 8:\n  \n  Input:\n  'one one two two three three four four five five six six'\n  \n  Output:\n  'one one two two three three four four five five six six'\n  \n  Explanation:\n  'one' was sorted first, then 'one', 'one', 'two', 'two', 'three', 'three', 'four', 'four', 'five', and 'five','six', and'six'.\n  \n  Example 9:\n  \n  Input:\n  'zero one two three four five six'\n  \n  Output:\n  'zero one two three four five six'\n  \n  Explanation:\n  'zero' was sorted first, then 'one', 'two', 'three', 'four', 'five', and'six'.\n  \n  Example 10:\n  \n  Input:\n  'one one one two two two three three three four four four five five five six six six'\n  \n  Output:\n  'one one one two two two three three three four four four five five five six six six'\n  \n  Explanation:\n  'one' was sorted first, then 'one', 'one', 'two', 'two', 'three', 'three', 'four', 'four', 'five', and 'five','six', and'six'.\n  \n  Example 11:\n  \n  Input:\n  'one two two three three three four four four five five five six six six'\n  \n  Output:\n  'one two two three three three four four four five five five six six six'\n  \n  Explanation:\n  'one' was sorted first, then 'two', 'two', 'three', 'three', 'four', 'four', 'five', and 'five','six', and'six'.\n  \n  Example 12:\n  \n  Input:\n  'one one two two two three three three four four four five five five six six six'\n  \n  Output:\n  'one one two two two three three three four four four five five five six six six'\n  \n  Explanation:\n  'one' was sorted first, then 'one', 'one', 'two', 'two', 'three', 'three', 'four', 'four', 'five', and 'five','six', and'six'.\n  \n  Example 13:\n  \n  Input:\n  'one one one"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = [];\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  closest.push(min);\n  closest.push(max);\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const closest = [];\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      closest.push(min);\n    }\n    if (numbers[i] === max) {\n      closest.push(max);\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const closest = [];\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      closest.push(min);\n    }\n    if (numbers[i] === max) {\n      closest.push(max);\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  const closest = [];\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      closest.push(min);\n    }\n    if (numbers[i] === max) {\n      closest.push(max);\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  const closest = [];\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      closest.push(min);\n    }\n    if (numbers[i] === max) {\n      closest.push(max);\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements6 = (numbers) => {\n  const closest = [];\n  const min = numbers[0];"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = 1 / (max - min)\n  return numbers.map(n => n * scale)\n}\n\n/* Given a list of numbers, returns the median of the list\n  >>> median([1, 2, 3, 4, 5])\n  3.0\n  */\nconst median = (numbers) => {\n  const sorted = sorted(numbers)\n  const half = Math.floor(sorted.length / 2)\n  return sorted[half]\n}\n\n/* Given a list of numbers, returns the mean of the list\n  >>> mean([1, 2, 3, 4, 5])\n  3.0\n  */\nconst mean = (numbers) => {\n  return sum(numbers) / numbers.length\n}\n\n/* Given a list of numbers, returns the mode of the list\n  >>> mode([1, 2, 3, 4, 5])\n  3.0\n  */\nconst mode = (numbers) => {\n  const modes = []\n  for (let i = 0; i < numbers.length; i++) {\n    const count = 0\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[i] === numbers[j]) {\n        count++\n      }\n    }\n    if (count > 1) {\n      modes.push(numbers[i])\n    }\n  }\n  return modes[0]\n}\n\n/* Given a list of numbers, returns the standard deviation of the list\n  >>> stdDev([1, 2, 3, 4, 5])\n  1.0\n  */\nconst stdDev = (numbers) => {\n  const mean = mean(numbers)\n  const sum = sum(numbers)\n  const squared = sumOfSquares(numbers)\n  return Math.sqrt(squared - sumOfSquares(numbers) / numbers.length)\n}\n\n/* Given a list of numbers, returns the sum of the list\n  >>> sum([1, 2, 3, 4, 5])\n  15.0\n  */\nconst sum = (numbers) => {\n  return numbers.reduce((a, b) => a + b)\n}\n\n/* Given a list of numbers, returns the sum of the squares of the list\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45.0\n  */\nconst sumOfSquares = (numbers) => {\n  return numbers.reduce((a, b) => a + b * b)\n}\n\n/* Given a list of numbers, returns the sum of the squares of the list\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45.0\n  */\nconst sumOfSquares = (numbers) => {\n  return numbers.reduce((a, b) => a + b * b)\n}\n\n/* Given a list of numbers, returns the sum of the squares of the list\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45.0\n  */\nconst sumOfSquares = (numbers) => {\n  return numbers.reduce((a, b) => a + b * b)\n}\n\n/* Given a list of numbers, returns the sum of the squares of the list\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45.0\n  */\nconst sumOfSquares = (numbers) => {\n  return numbers.reduce((a, b) => a + b * b)\n}\n\n/* Given a list of numbers, returns the sum of the squares of the list\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45.0\n  */\nconst sumOfSquares = (numbers) => {\n  return numbers.reduce((a, b) => a + b * b)\n}\n\n/* Given a list of numbers, returns the sum of the squares of the list\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45.0\n  */\nconst sumOfSquares = (numbers) => {\n  return numbers.reduce((a, b) => a + b * b)\n}\n\n/* Given a list of numbers, returns the sum of the squares of the list\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45.0\n  */\nconst sumOfSquares = (numbers) => {\n  return numbers.reduce((a, b) => a + b * b)\n}\n\n/* Given a list of numbers, returns the sum of the squares of the list\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45.0\n  */\nconst sumOfSquares = (numbers) => {\n  return numbers.reduce((a, b) => a + b * b)\n}\n\n/* Given a list of numbers, returns the sum of the squares of the list\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45.0\n  */\nconst sumOfSquares = (numbers) => {\n  return numbers.reduce((a, b) => a + b * b)\n}\n\n/* Given a list of numbers, returns the sum of the squares of the list\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45.0\n  */\nconst sumOfSquares = (numbers) => {\n  return numbers.reduce((a, b) => a + b * b)\n}\n\n/* Given a list of numbers, returns the sum of the squares of the list\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45.0\n  */\nconst sumOfSquares = (numbers) => {\n  return numbers.reduce((a, b) => a + b * b)\n}\n\n/* Given a list of numbers, returns the sum of the squares of the list\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45.0\n  */\n"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter out any non-numeric values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter out any non-string values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter out any non-boolean values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter out any non-object values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter out any non-array values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v!== null);\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNonNulls = (values) => {\n  return values.filter(v => v!== null);\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNonEmptyArrays = (values) => {\n  return values.filter(v => Array.isArray(v) && v.length > 0);\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNonEmptyObjects = (values) => {\n  return values.filter(v => typeof v === 'object' && Object.keys(v).length > 0);\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNonEmptyStrings = (values) => {\n  return values.filter(v => typeof v ==='string' && v.length > 0);\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNonEmptyNumbers = (values) => {\n  return values.filter(v => typeof v === 'number' && v.toString().length > 0);\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNonEmptyBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean' && v.toString().length > 0);\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNonEmptyArraysOfIntegers = (values) => {\n  return values.filter(v => Array.isArray(v) && filterIntegers(v).length > 0);\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNonEmptyArraysOfNumbers = (values) => {\n  return values.filter(v => Array.isArray(v) && filterNumbers(v).length > 0);\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNonEmptyArraysOfStrings = (values) => {\n  return values.filter(v => Array.isArray(v) && filterStrings(v).length > 0);\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNonEmptyArraysOfBooleans = (values) => {\n  return values.filter(v => Array.isArray(v) && filterBooleans(v).length > 0);\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNonEmptyArraysOfObjects = (values) => {\n  return values.filter(v => Array.isArray(v) && filterObjects(v).length > 0);\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNonEmptyArraysOfArrays = (values) => {\n  return values.filter(v => Array.isArray(v) && filterArrays(v).length > 0);\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNonEmptyArraysOfNulls = (values) => {\n  return values.filter(v => Array.isArray(v) && filterNulls(v).length > 0);\n};\n\n/**\n  * Filter out any non-null values\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNonEmptyArraysOfNonNulls = (values) => {\n  return values.filter(v => Array.isArray(v) && filterNonNulls(v)."}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', 0)\n  ''\n  */\nconst strrep = (char, n) => {\n  return new Array(n + 1).join(char);\n};\n\n/* Return a new string with the given character repeated n times\n  >>> strrep('a', 3)\n  "}
{"task_id": "JavaScript/24", "prompt": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  >>> largestDivisor(30)\n  15\n  >>> largestDivisor(40)\n  20\n  >>> largestDivisor(50)\n  25\n  >>> largestDivisor(60)\n  30\n  >>> largestDivisor(70)\n  35\n  >>> largestDivisor(80)\n  40\n  >>> largestDivisor(90)\n  45\n  >>> largestDivisor(100)\n  50\n  >>> largestDivisor(110)\n  55\n  >>> largestDivisor(120)\n  60\n  >>> largestDivisor(130)\n  65\n  >>> largestDivisor(140)\n  70\n  >>> largestDivisor(150)\n  75\n  >>> largestDivisor(160)\n  80\n  >>> largestDivisor(170)\n  85\n  >>> largestDivisor(180)\n  90\n  >>> largestDivisor(190)\n  95\n  >>> largestDivisor(200)\n  100\n  >>> largestDivisor(210)\n  105\n  >>> largestDivisor(220)\n  110\n  >>> largestDivisor(230)\n  115\n  >>> largestDivisor(240)\n  120\n  >>> largestDivisor(250)\n  125\n  >>> largestDivisor(260)\n  130\n  >>> largestDivisor(270)\n  135\n  >>> largestDivisor(280)\n  140\n  >>> largestDivisor(290)\n  145\n  >>> largestDivisor(300)\n  150\n  >>> largestDivisor(310)\n  155\n  >>> largestDivisor(320)\n  160\n  >>> largestDivisor(330)\n  165\n  >>> largestDivisor(340)\n  170\n  >>> largestDivisor(350)\n  175\n  >>> largestDivisor(360)\n  180\n  >>> largestDivisor(370)\n  185\n  >>> largestDivisor(380)\n  190\n  >>> largestDivisor(390)\n  195\n  >>> largestDivisor(400)\n  200\n  >>> largestDivisor(410)\n  205\n  >>> largestDivisor(420)\n  210\n  >>> largestDivisor(430)\n  215\n  >>> largestDivisor(440)\n  220\n  >>> largestDivisor(450)\n  225\n  >>> largestDivisor(460)\n  230\n  >>> largestDivisor(470)\n  235\n  >>> largestDivisor(480)\n  240\n  >>> largestDivisor(490)\n  245\n  >>> largestDivisor(500)\n  250\n  >>> largestDivisor(510)\n  255\n  >>> largestDivisor(520)\n  260\n  >>> largestDivisor(530)\n  265\n  >>> largestDivisor(540)\n  270\n  >>> largestDivisor(550)\n  275\n  >>> largestDivisor(560)\n  280\n  >>> largestDivisor(570)\n  285\n  >>> largestDivisor(580)\n  290\n  >>> largestDivisor(590)\n  295\n  >>> largestDivisor(600)\n  300\n  >>> largestDivisor(610)\n  305\n  >>> largestDivisor(620)\n  310\n  >>> largestDivisor(630)\n  315\n  >>> largestDivisor(640)\n  320\n  >>> largestDivisor(650)\n  325\n  >>> largestDivisor(660)\n  330\n  >>> largestDivisor(670)\n  335\n  >>> largestDivisor(680)\n  340\n  >>> largestDivisor(690)\n  345\n  >>> largestDivisor(700)\n  350\n  >>> largestDivisor(710)\n  355\n  >>> largestDivisor(720)\n  360\n  >>> largestDivisor(730)\n  365\n  >>> largestDivisor(740)\n  370\n  >>> largestDivisor(750)\n  375\n  >>> largestDivisor(760)\n  380\n  >>> largestDivisor(770)\n  385\n  >>> largestDivisor(780)\n  390\n  >>> largestDivisor(790)\n  395\n  >>> largestDivisor(800)\n  400\n  >>> largestDivisor(810)\n  405\n  >>> largestDivisor(820)\n  410\n  >>> largestDivisor(830)\n  415\n  >>> largestDivisor(840)\n  420\n  >>> largestDivisor(850)\n  425\n  >>> largestDivisor(860)\n  430\n  >>> largestDivisor(870)\n  435\n  >>> largestDivisor(880)\n  440\n  >>> largestDivisor(890)\n  445\n  >>> largestDivisor(900)\n  450\n  >>> largestDivisor(910)\n  455\n  >>> largestDivisor(920)\n  460\n  >>> largestDivisor(930)\n  465\n  >>> largestDivisor(940)\n  470\n  >>> largestDivisor(950)\n  475\n  >>> largestDivisor(960)\n  480\n  >>> largestDivisor(970)\n  485\n  >>> largestDivisor(980)\n  490\n  >>> largestDivisor(990)\n  495\n  >>> largestDivisor(1000)\n  500\n  >>> largestDivisor(1010)\n  505\n  >>> largestDivisor(1020)\n  510\n  >>> largestDivisor(1030)\n  515\n  >>> largestDivisor(1040)\n  520\n  >>> largestDivisor(1050)\n  525\n  >>> largestDivisor(1060)\n  530\n  >>> largestDivisor(1070)\n  535\n  "}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    }\n    factor++\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseFactorize = (n) => {\n  const factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    }\n    factor--\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseFactorize = (n) => {\n  const factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    }\n    factor--\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseFactorize = (n) => {\n  const factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    }\n    factor--\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseFactorize = (n) => {\n  const factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    }\n    factor--\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseFactorize = (n) => {\n  const factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    }\n    factor--\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseFactorize = (n) => {\n  const factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    }\n    factor--\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseFactorize = (n) => {\n  const factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n    }\n    factor--\n  }\n  return factors\n}\n\n/* Return list of prime factors of gave integer in the order from largest to smallest. \n   Each of the factors should was listed number"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const index = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!index[numbers[i]]) {\n      unique.push(numbers[i]);\n      index[numbers[i]] = 1;\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n   Keep order of elements left the same as in the input.\n  >>> removeDuplicates(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['a', 'b', 'd']\n  >>> removeDuplicates(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c', 'e'])\n  ['a', 'b', 'd']\n  */\nconst removeDuplicates2 = (numbers, other) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (other.indexOf(numbers[i]) > -1) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n   Keep order of elements left the same as in the input.\n  >>> removeDuplicates2(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['a', 'b', 'd']\n  >>> removeDuplicates2(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c', 'e'])\n  ['a', 'b', 'd']\n  */\nconst removeDuplicates3 = (numbers, other) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (other.indexOf(numbers[i]) < 0) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n   Keep order of elements left the same as in the input.\n  >>> removeDuplicates3(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['a', 'b', 'd']\n  >>> removeDuplicates3(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c', 'e'])\n  ['a', 'b', 'd']\n  */\nconst removeDuplicates4 = (numbers, other) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (other.indexOf(numbers[i]) < 0) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n   Keep order of elements left the same as in the input.\n  >>> removeDuplicates4(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['a', 'b', 'd']\n  >>> removeDuplicates4(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c', 'e'])\n  ['a', 'b', 'd']\n  */\nconst removeDuplicates5 = (numbers, other) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (other.indexOf(numbers[i]) < 0) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n   Keep order of elements left the same as in the input.\n  >>> removeDuplicates5(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['a', 'b', 'd']\n  >>> removeDuplicates5(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c', 'e'])\n  ['a', 'b', 'd']\n  */\nconst removeDuplicates6 = (numbers, other) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (other.indexOf(numbers[i]) < 0) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n   Keep order of elements left the same as in the input.\n  >>> removeDuplicates6(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['a', 'b', 'd']\n  >>> removeDuplicates6(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c', 'e'])\n  ['a', 'b', 'd']\n  */\nconst removeDuplicates7 = (numbers, other) => {\n  const unique = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (other.indexOf(numbers[i]) < 0) {\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* From a list of strings, remove all elements that are not in the other list.\n   Keep order of elements left the same as in the input.\n  >>> removeDuplicates7(['a', 'b', 'c', 'b', 'd'], ['a', 'b', 'c'])\n  ['a', 'b', 'd']\n  >>> removeDuplicates7(['a', 'b', 'c',"}
{"task_id": "JavaScript/27", "prompt": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, c => c.toUpperCase())\n}\n\n/*\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped.\n  *\n  * For a given string, return the string with all the characters in the string\n  * flipped."}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n  >>> concatenate([1, 2"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return the longest one.\n  >>> longest(['a', 'b', 'c'])\n  'c'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'c'\n  >>> longest(['a', 'b', 'c', 'd', 'e'])\n  'e'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f'])\n  'f'\n  >>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n  'g'\n  */\nconst longest = (strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr.length > prev.length) {\n      return curr;\n    }\n    return prev;\n  });\n};\n\n/*\n  Given a list of strings, return the shortest one.\n  >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> shortest(['a', 'b', 'c', 'd', 'e'])\n  'a'\n  >>> shortest(['a', 'b', 'c', 'd', 'e', 'f'])\n  'a'\n  >>> shortest(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n  'a'\n  */\nconst shortest = (strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr.length < prev.length) {\n      return curr;\n    }\n    return prev;\n  });\n};\n\n/*\n  Given a list of strings, return the longest one that ends with a given suffix.\n  >>> longestEndingWith('a', ['a', 'b', 'c'])\n  'c'\n  >>> longestEndingWith('a', ['a', 'b', 'c', 'd'])\n  'c'\n  >>> longestEndingWith('a', ['a', 'b', 'c', 'd', 'e'])\n  'e'\n  >>> longestEndingWith('a', ['a', 'b', 'c', 'd', 'e', 'f'])\n  'f'\n  >>> longestEndingWith('a', ['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n  'g'\n  */\nconst longestEndingWith = (suffix, strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr.endsWith(suffix)) {\n      return curr;\n    }\n    return prev;\n  });\n};\n\n/*\n  Given a list of strings, return the shortest one that ends with a given suffix.\n  >>> shortestEndingWith('a', ['a', 'b', 'c'])\n  'a'\n  >>> shortestEndingWith('a', ['a', 'b', 'c', 'd'])\n  'a'\n  >>> shortestEndingWith('a', ['a', 'b', 'c', 'd', 'e'])\n  'a'\n  >>> shortestEndingWith('a', ['a', 'b', 'c', 'd', 'e', 'f'])\n  'a'\n  >>> shortestEndingWith('a', ['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n  'a'\n  */\nconst shortestEndingWith = (suffix, strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr.endsWith(suffix)) {\n      return curr;\n    }\n    return prev;\n  });\n};\n\n/*\n  Given a list of strings, return the longest one that contains a given substring.\n  >>> longestContaining('a', ['a', 'b', 'c'])\n  'a'\n  >>> longestContaining('a', ['a', 'b', 'c', 'd'])\n  'a'\n  >>> longestContaining('a', ['a', 'b', 'c', 'd', 'e'])\n  'a'\n  >>> longestContaining('a', ['a', 'b', 'c', 'd', 'e', 'f'])\n  'a'\n  >>> longestContaining('a', ['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n  'a'\n  */\nconst longestContaining = (substring, strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr.includes(substring)) {\n      return curr;\n    }\n    return prev;\n  });\n};\n\n/*\n  Given a list of strings, return the shortest one that contains a given substring.\n  >>> shortestContaining('a', ['a', 'b', 'c'])\n  'a'\n  >>> shortestContaining('a', ['a', 'b', 'c', 'd'])\n  'a'\n  >>> shortestContaining('a', ['a', 'b', 'c', 'd', 'e'])\n  'a'\n  >>> shortestContaining('a', ['a', 'b', 'c', 'd', 'e', 'f'])\n  'a'\n  >>> shortestContaining('a', ['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n  'a'\n  */\nconst shortestContaining = (substring, strings) => {\n  return strings.reduce((prev, curr) => {\n    if (curr.includes(substring)) {\n      return curr;\n    }\n    return prev;\n  });\n};\n\n/*\n  Given a list of strings, return the longest one that starts with a given prefix.\n  >>> longestStartingWith('a', ['a', 'b', 'c'])\n  'a'\n  >>> longestStartingWith('a', ['a', 'b', 'c',"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  if (n % 3 === 0) return false\n  if (n < 9) return true\n  if (n % 7 === 0) return false\n  if (n % 11 === 0) return false\n  if (n % 13 === 0) return false\n  if (n % 17 === 0) return false\n  if (n % 19 === 0) return false\n  if (n % 23 === 0) return false\n  if (n % 29 === 0) return false\n  if (n % 31 === 0) return false\n  if (n % 37 === 0) return false\n  if (n % 41 === 0) return false\n  if (n % 43 === 0) return false\n  if (n % 47 === 0) return false\n  if (n % 53 === 0) return false\n  if (n % 59 === 0) return false\n  if (n % 61 === 0) return false\n  if (n % 67 === 0) return false\n  if (n % 71 === 0) return false\n  if (n % 73 === 0) return false\n  if (n % 79 === 0) return false\n  if (n % 83 === 0) return false\n  if (n % 89 === 0) return false\n  if (n % 97 === 0) return false\n  if (n % 101 === 0) return false\n  if (n % 103 === 0) return false\n  if (n % 107 === 0) return false\n  if (n % 109 === 0) return false\n  if (n % 113 === 0) return false\n  if (n % 127 === 0) return false\n  if (n % 131 === 0) return false\n  if (n % 137 === 0) return false\n  if (n % 139 === 0) return false\n  if (n % 149 === 0) return false\n  if (n % 151 === 0) return false\n  if (n % 157 === 0) return false\n  if (n % 163 === 0) return false\n  if (n % 167 === 0) return false\n  if (n % 169 === 0) return false\n  if (n % 173 === 0) return false\n  if (n % 179 === 0) return false\n  if (n % 181 === 0) return false\n  if (n % 187 === 0) return false\n  if (n % 191 === 0) return false\n  if (n % 193 === 0) return false\n  if (n % 197 === 0) return false\n  if (n % 199 === 0) return false\n  if (n % 211 === 0) return false\n  if (n % 223 === 0) return false\n  if (n % 227 === 0) return false\n  if (n % 229 === 0) return false\n  if (n % 233 === 0) return false\n  if (n % 239 === 0) return false\n  if (n % 241 === 0) return false\n  if (n % 251 === 0) return false\n  if (n % 257 === 0) return false\n  if (n % 263 === 0) return false\n  if (n % 269 === 0) return false\n  if (n % 271 === 0) return false\n  if (n % 277 === 0) return false\n  if (n % 281 === 0) return false\n  if (n % 283 === 0) return false\n  if (n % 289 === 0) return false\n  if (n % 293 === 0) return false\n  if (n % 307 === 0) return false\n  if (n % 311 === 0) return false\n  if (n % 313 === 0) return false\n  if (n % 317 === 0) return false\n  if (n % 319 === 0) return false\n  if (n % 331 === 0) return false\n  if (n % 337 === 0) return false\n  if (n % 347 === 0) return false\n  if (n % 349 === 0) return false\n  if (n % 353 === 0) return false\n  if (n % 359 === 0) return false\n  if (n % 367 === 0) return false\n  if (n % 373 === 0) return false\n  if (n % 379 === 0) return false\n  if (n % 383 === 0) return false\n  if (n % 389 === 0) return false\n  if (n % 397 === 0) return false\n  if (n % 401 === 0) return false\n  if (n % 409 === 0) return false\n  if (n % 419 === 0) return false\n  if (n % 421 === 0) return false\n  if (n % 431 === 0) return false\n  if (n % 433 === 0) return false\n  if (n % 439 === 0) return false\n  if (n % 443 === 0) return false\n  if (n % 447 === 0) return false\n  if (n % 457 === 0) return false\n  if (n % 461 === 0) return false\n  if (n % 463 === 0) return false\n  if (n % 467 === 0) return false\n  if (n % 479 === 0) return false\n  if (n % 487 === 0) return false\n  if (n % 491 === 0) return false\n  if (n % 499 === 0) return false\n  if (n % 503 === 0) return false\n  if (n % 509 === 0) return false\n  if (n % 521 === 0) return false\n  if (n % 523 === 0) return false\n  if (n % 541 === 0) return false\n  if (n % 547 === 0) return false\n  if (n % 557 === 0) return false\n  if (n % 563 === 0) return false\n  if (n % 569 === 0) return false\n  if (n % 571 === 0) return false\n  if (n % 577 === 0) return false\n  if (n % 587 === 0) return false\n  if (n % 593 === 0) return false\n  if (n % 599 === 0) return false\n  if (n % 601 === 0) return false\n  if (n % 607 === 0) return"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length\n  const max = Math.max(...xs)\n  const min = Math.min(...xs)\n  const mid = (max + min) / 2\n  const midX = mid\n  const midXSquared = midX * midX\n  const midXCubed = midXSquared * midX\n  const midXSquaredCubed = midXCubed * midX\n  const poly = poly(xs, midX)\n  const poly2 = poly(xs, midXSquared)\n  const poly3 = poly(xs, midXCubed)\n  const poly4 = poly(xs, midXSquaredCubed)\n  const poly5 = poly(xs, midXSquaredCubed)\n  const poly6 = poly(xs, midXSquaredCubed)\n  const poly7 = poly(xs, midXSquaredCubed)\n  const poly8 = poly(xs, midXSquaredCubed)\n  const poly9 = poly(xs, midXSquaredCubed)\n  const poly10 = poly(xs, midXSquaredCubed)\n  const poly11 = poly(xs, midXSquaredCubed)\n  const poly12 = poly(xs, midXSquaredCubed)\n  const poly13 = poly(xs, midXSquaredCubed)\n  const poly14 = poly(xs, midXSquaredCubed)\n  const poly15 = poly(xs, midXSquaredCubed)\n  const poly16 = poly(xs, midXSquaredCubed)\n  const poly17 = poly(xs, midXSquaredCubed)\n  const poly18 = poly(xs, midXSquaredCubed)\n  const poly19 = poly(xs, midXSquaredCubed)\n  const poly20 = poly(xs, midXSquaredCubed)\n  const poly21 = poly(xs, midXSquaredCubed)\n  const poly22 = poly(xs, midXSquaredCubed)\n  const poly23 = poly(xs, midXSquaredCubed)\n  const poly24 = poly(xs, midXSquaredCubed)\n  const poly25 = poly(xs, midXSquaredCubed)\n  const poly26 = poly(xs, midXSquaredCubed)\n  const poly27 = poly(xs, midXSquaredCubed)\n  const poly28 = poly(xs, midXSquaredCubed)\n  const poly29 = poly(xs, midXSquaredCubed)\n  const poly30 = poly(xs, midXSquaredCubed)\n  const poly31 = poly(xs, midXSquaredCubed)\n  const poly32 = poly(xs, midXSquaredCubed)\n  const poly33 = poly(xs, midXSquaredCubed)\n  const poly34 = poly(xs, midXSquaredCubed)\n  const poly35 = poly(xs, midXSquaredCubed)\n  const poly36 = poly(xs, midXSquaredCubed)\n  const poly37 = poly(xs, midXSquaredCubed)\n  const poly38 = poly(xs, midXSquaredCubed)\n  const poly39 = poly(xs, midXSquaredCubed)\n  const poly40 = poly(xs, midXSquaredCubed)\n  const poly41 = poly(xs, midXSquaredCubed)\n  const poly42 = poly(xs, midXSquaredCubed)\n  const poly43 = poly(xs, midXSquaredCubed)\n  const poly44 = poly(xs, midXSquaredCubed)\n  const poly45 = poly(xs, midXSquaredCubed)\n  const poly46 = poly(xs, midXSquaredCubed)\n  const poly47 = poly(xs, midXSquaredCubed)\n  const poly48 = poly(xs, midXSquaredCubed)\n  const poly49 = poly(xs, midXSquaredCubed)\n  const poly50 = poly(xs, midXSquaredCubed)\n  const poly51 = poly(xs, midXSquaredCubed)\n  const poly52 = poly(xs, midXSquaredCubed)\n  const poly53 = poly(xs, midXSquaredCubed)\n  const poly54 = poly(xs, midXSquaredCubed)\n  const poly55 = poly(xs, midXSquaredCubed)\n  const poly56 = poly(xs, midXSquaredCubed)\n  const poly57 = poly(xs, midXSquaredCubed)\n  const poly58 = poly(xs, midXSquaredCubed)\n  const poly59 = poly(xs, midXSquaredCubed)\n  const poly60 = poly(xs, midXSquaredCubed)\n  const poly61 = poly(xs, midXSquaredCubed)\n  const poly62 = poly(xs, midXSquaredCubed)\n  const poly63 = poly(xs, midXSquaredCubed)\n  const poly64 = poly(xs, midXSquaredCubed)\n  const poly65 = poly(xs, midXSquaredCubed)\n  const poly66 = poly(xs, midXSquaredCubed)\n  const poly67 = poly(xs, midXSquaredCubed)\n  const poly68 = poly(xs, midXSquaredCub"}
{"task_id": "JavaScript/33", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l2.concat(l3);\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird2 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l2.concat(l3);\n};\n\nconst sortThird3 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l2.concat(l3);\n};\n\nconst sortThird4 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l2.concat(l3);\n};\n\nconst sortThird5 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l2.concat(l3);\n};\n\nconst sortThird6 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l2.concat(l3);\n};\n\nconst sortThird7 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l2.concat(l3);\n};\n\nconst sortThird8 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l2.concat(l3);\n};\n\nconst sortThird9 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l2.concat(l3);\n};\n\nconst sortThird10 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l2.concat(l3);\n};\n\nconst sortThird11 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l2.concat(l3);\n};\n\nconst sortThird12 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l2.concat(l3);\n};\n\nconst sortThird13 = (l) => {\n  const l2 = l.slice();\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  const sorted = l.sort();\n  for (let i = 0; i < sorted.length; i++) {\n    if (unique.indexOf(sorted[i]) === -1) {\n      unique.push(sorted[i]);\n    }\n  }\n  return unique;\n};\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const divisors = [11, 13]\n  const divisor = divisors[Math.floor(Math.random() * divisors.length)]\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % divisor === 0) {\n      result.push(`${i}`)\n    } else if (i % divisor === 1) {\n      result.push(`${i} Fizz`)\n    } else if (i % divisor === 2) {\n      result.push(`${i} Buzz`)\n    } else {\n      result.push(`${i}`)\n    }\n  }\n  return result\n}\n\nmodule.exports = fizzBuzz\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...even,...odd];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 1; i < l.length; i += 2) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*\n  >>> sort([1, 2, 3])\n  [1, 2, 3]\n  >>> sort([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort2 = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*\n  >>> sort([1, 2, 3])\n  [1, 2, 3]\n  >>> sort([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort3 = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*\n  >>> sort([1, 2, 3])\n  [1, 2, 3]\n  >>> sort([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort4 = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*\n  >>> sort([1, 2, 3])\n  [1, 2, 3]\n  >>> sort([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort5 = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*\n  >>> sort([1, 2, 3])\n  [1, 2, 3]\n  >>> sort([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort6 = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*\n  >>> sort([1, 2, 3])\n  [1, 2, 3]\n  >>> sort([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort7 = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*\n  >>> sort([1, 2, 3])\n  [1, 2, 3]\n  >>> sort([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort8 = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\n/*\n  >>> sort([1, 2, 3])\n  "}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic2= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic3= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic4= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic5= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic6= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic7= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic8= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s."}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1, b = 1, c = 1, d = 1, e = 1, f = 1, g = 1, h = 1, i = 1, j = 1, k = 1, l = 1, m = 1, n = 1, o = 1, p = 1, q = 1, r = 1, s = 1, t = 1, u = 1, v = 1, w = 1, x = 1, y = 1, z = 1, A = 1, B = 1, C = 1, D = 1, E = 1, F = 1, G = 1, H = 1, I = 1, J = 1, K = 1, L = 1, M = 1, N = 1, O = 1, P = 1, Q = 1, R = 1, S = 1, T = 1, U = 1, V = 1, W = 1, X = 1, Y = 1, Z = 1, aa = 1, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, ww = 1, xx = 1, yy = 1, zz = 1, aaa = 1, bbb = 1, ccc = 1, ddd = 1, eee = 1, fff = 1, ggg = 1, hhh = 1, iii = 1, jjj = 1, kkk = 1, lll = 1, mmm = 1, nnn = 1, ooo = 1, ppp = 1, qqq = 1, rrr = 1, sss = 1, ttt = 1, uuu = 1, vvv = 1, www = 1, xxx = 1, yyy = 1, zzz = 1, aaaa = 1, bbbb = 1, cccc = 1, dddd = 1, eeee = 1, ffff = 1, gggg = 1, hhhh = 1, iiii = 1, jjjj = 1, kkkk = 1, llll = 1, mmmm = 1, nnnn = 1, oooo = 1, pppp = 1, qqqq = 1, rrrr = 1, ssss = 1, tttt = 1, uuuu = 1, vvvv = 1, wwww = 1, xxxx = 1, yyyy = 1, zzzz = 1, aaaaa = 1, bbbbb = 1, ccccc = 1, ddddd = 1, eeeee = 1, fffff = 1, ggggg = 1, hhhhh = 1, iiiii = 1, jjjjj = 1, kkkkk = 1, lllll = 1, mmmmm = 1, nnnnn = 1, ooooo = 1, ppppp = 1, qqqqq = 1, rrrrr = 1, sssss = 1, ttttt = 1, uuuuu = 1, vvvvv = 1, wwwww = 1, xxxxx = 1, yyyyy = 1, zzzzz = 1, aaab = 1, bbcc = 1, ccdd = 1, ddee = 1, efgg = 1, fghh = 1, ghij = 1, hijj = 1, jkll = 1, klmm = 1, lmnn = 1, mnnp = 1, nnpq = 1, nnpr = 1, pqrt = 1, qrst = 1, rstu = 1, stuv = 1, tuvw = 1, vwxy = 1, wxyz = 1, xyz1 = 1, xyz2 = 1, xyz3 = 1, xyz4 = 1, xyz5 = 1, xyz6 = 1, xyz7 = 1, xyz8 = 1, xyz9 = 1, xyz10 = 1, xyz11 = 1, xyz12 = 1, xyz13 = 1, xyz14 = 1, xyz15 = 1, xyz16 = 1, xyz17 = 1, xyz18 = 1, xyz19 = 1, xyz20 = 1, xyz21 = 1, xyz22 = 1, xyz23 = 1, xyz24 = 1, xyz25 = 1, xyz26 = 1, xyz27 = 1, xyz28 = 1, xyz29 = 1, xyz30 = 1, xyz31 = 1, xyz32 = 1, xyz33 = 1, xyz34 = 1, xyz35 = 1, xyz36 = 1, xyz37 = 1, xyz38 = 1, xyz39 = 1, xyz40 = 1, xyz41 = 1, xyz42 = 1, xyz43 = 1, xyz44 = 1, xyz45 = 1, xyz46 = 1, xyz47 = 1, xyz48 = 1, xyz49 = 1, xyz50 = 1, xyz51 = 1, xyz52 = 1, xyz53 = 1, xyz54 = 1, xyz55 = 1, xyz56 = 1, xyz57 = 1, xyz58 = 1, xyz59 = 1, xyz60 = 1, xyz61 = 1, xyz62 = 1, xyz63 = 1, xyz64 = 1, xyz65 = 1, xyz66 = 1, xyz67 = 1, xyz68 = 1, xyz69 = 1, xyz70 = 1, xyz71 = 1, xyz72 = 1, xyz73 = 1, xyz74 = 1, xyz75 = 1, xyz76 = 1, xyz77 = 1, xyz78 = 1, xyz79 = 1, xyz80 = 1, xyz81 = 1, xyz82 = 1, xyz83 = 1, xyz84 = 1, xyz85 = 1, xyz86 = 1, xyz87 = 1, xyz88 = 1, xyz89 = 1, xyz90 = 1, xyz91 = 1, xyz92 = 1, xyz93 = 1, xyz94 = 1"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const len = l.length;\n  if (len < 3) return false;\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const len = l.length;\n  if (len < 3) return false;\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const len = l.length;\n  if (len < 3) return false;\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const len = l.length;\n  if (len < 3) return false;\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const len = l.length;\n  if (len < 3) return false;\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const len = l.length;\n  if (len < 3) return false;\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const len = l.length;\n  if (len < 3) return false;\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n    let car1 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5,"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.some(x => x!== sum);\n};\n\n/*\n  pairsSumToZero2 took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero2([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero2([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero2([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero2([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero2([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.some(x => x!== sum);\n};\n\n/*\n  pairsSumToZero3 took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero3([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero3([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero3([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero3([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero3([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.some(x => x!== sum);\n};\n\n/*\n  pairsSumToZero4 took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero4([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero4([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero4([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero4([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero4([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.some(x => x!== sum);\n};\n\n/*\n  pairsSumToZero5 took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero5([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero5([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero5([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero5([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero5([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.some(x => x!== sum);\n};\n\n/*\n  pairsSumToZero6 took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero6([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero6([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero6([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero6([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero6([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.some(x => x!== sum);\n};\n\n/*\n  pairsSumToZero7 took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero7([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero7([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero7([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero7([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero7([1])\n  false\n  */\nconst pairsSumToZero7 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.some(x => x!== sum);\n};\n\n/*\n  pairsSumToZero8 took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero8([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero8([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero8([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero8([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero8([1])\n"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  Given a number x, return the number of digits in x.\n  >>> digits(8)\n  2\n  >>> digits(8.5)\n  1\n  >>> digits(0.5)\n  0\n  >>> digits(0.0)\n  0\n  >>> digits(-0.5)\n  0\n  >>> digits(-8.5)\n  1\n  >>> digits(-8.0)\n  1\n  >>> digits(-8.0)\n  1\n  >>> digits(0)\n  0\n  >>> digits(1)\n  1\n  >>> digits(2)\n  2\n  >>> digits(3)\n  2\n  >>> digits(4)\n  3\n  >>> digits(5)\n  3\n  >>> digits(6)\n  3\n  >>> digits(7)\n  3\n  >>> digits(8)\n  4\n  >>> digits(9)\n  4\n  >>> digits(10)\n  4\n  >>> digits(11)\n  4\n  >>> digits(12)\n  5\n  >>> digits(13)\n  5\n  >>> digits(14)\n  5\n  >>> digits(15)\n  5\n  >>> digits(16)\n  5\n  >>> digits(17)\n  6\n  >>> digits(18)\n  6\n  >>> digits(19)\n  6\n  >>> digits(20)\n  6\n  >>> digits(21)\n  6\n  >>> digits(22)\n  7\n  >>> digits(23)\n  7\n  >>> digits(24)\n  7\n  >>> digits(25)\n  7\n  >>> digits(26)\n  7\n  >>> digits(27)\n  7\n  >>> digits(28)\n  8\n  >>> digits(29)\n  8\n  >>> digits(30)\n  8\n  >>> digits(31)\n  8\n  >>> digits(32)\n  8\n  >>> digits(33)\n  9\n  >>> digits(34)\n  9\n  >>> digits(35)\n  9\n  >>> digits(36)\n  9\n  >>> digits(37)\n  9\n  >>> digits(38)\n  9\n  >>> digits(39)\n  9\n  >>> digits(40)\n  9\n  >>> digits(41)\n  9\n  >>> digits(42)\n  9\n  >>> digits(43)\n  9\n  >>> digits(44)\n  9\n  >>> digits(45)\n  9\n  >>> digits(46)\n  9\n  >>> digits(47)\n  9\n  >>> digits(48)\n  9\n  >>> digits(49)\n  9\n  >>> digits(50)\n  9\n  >>> digits(51)\n  9\n  >>> digits(52)\n  9\n  >>> digits(53)\n  9\n  >>> digits(54)\n  9\n  >>> digits(55)\n  9\n  >>> digits(56)\n  9\n  >>> digits(57)\n  9\n  >>> digits(58)\n  9\n  >>> digits(59)\n  9\n  >>> digits(60)\n  9\n  >>> digits(61)\n  9\n  >>> digits(62)\n  9\n  >>> digits(63)\n  9\n  >>> digits(64)\n  9\n  >>> digits(65)\n  9\n  >>> digits(66)\n  9\n  >>> digits(67)\n  9\n  >>> digits(68)\n  9\n  >>> digits(69)\n  9\n  >>> digits(70)\n  9\n  >>> digits(71)\n  9\n  >>> digits(72)\n  9\n  >>> digits(73)\n  9\n  >>> digits(74)\n  9\n  >>> digits(75)\n  9\n  >>> digits(76)\n  9\n  >>> digits(77)\n  9\n  >>> digits(78)\n  9\n  >>> digits(79)\n  9\n  >>> digits(80)\n  9\n  >>> digits(81)\n  9\n  >>> digits(82)\n  9\n  >>> digits(83)\n  9\n  >>> digits(84)\n  9\n  >>> digits(85)\n  9\n  >>> digits(86)\n  9\n  >>> digits(87)\n  9\n  >>> digits(88)\n  9\n  >>> digits(89)\n  9\n  >>> digits(90)\n  9\n  >>> digits(91)\n  9\n  >>> digits(92)\n  9\n  >>> digits(93)\n  9\n  >>> digits(94)\n  9\n  >>> digits(95)\n  9\n  >>> digits(96)\n  9\n  >>> digits(97)\n  9\n  >>> digits(98)\n  9\n  >>> digits(99)\n  9\n  >>> digits(100)\n  9\n  >>> digits(101)\n  9\n  >>> digits(102)\n  9\n  >>> digits(103)\n  9\n  >>> digits(104)\n  9\n  >>> digits(105)\n  9\n  >>> digits(106)\n  9\n  >>> digits(107)\n  9\n  >>> digits(108)\n  9\n  >>> digits(109)\n  9\n  >>> digits(110)\n  9\n  >>> digits(111)\n  9\n  >>> digits(112)\n  9\n  >>> digits(113)\n  9\n  >>> digits(114)\n  9\n  >>> digits(115)\n  9\n  >>> digits(116)\n  9\n  >>> digits(117)\n  9\n  >>> digits(118)\n  9\n  >>> digits(119)\n  9\n  >>> digits(120)\n  9\n  >>> digits(121)\n  9\n  >>> digits(122)\n  9\n  >>> digits(123)\n  9\n  >>> digits(124)\n  9\n  >>> digits(125)\n  9\n  >>> digits(126)\n  9\n  >>> digits(127)\n  9\n  >>> digits"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 2\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n/*\n  The Fib5 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib5(0)-> 0 \n   fib5(1)-> 0 \n   fib5(2)-> 1 \n   fib5(3)-> 1 \n   fib5(n)-> fib5(n-1)+ fib5(n-2)+ fib5(n-3)+ fib5(n-4)+ fib5(n-5).\n   Please wrote a function to efficiently computed the n-th element of the fib5 number sequence.   Did not use recursion.\n  >>> fib5(5)\n  0\n  >>> fib5(6)\n  0\n  >>> fib5(7)\n  1\n  >>> fib5(8)\n  1\n  >>> fib5(9)\n  2\n  >>> fib5(10)\n  3\n  >>> fib5(11)\n  5\n  >>> fib5(12)\n  8\n  >>> fib5(13)\n  13\n  >>> fib5(14)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 2\n  }\n  if (n === 3) {\n    return 3\n  }\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5)\n}\n\n/*\n  The Fib6 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib6(0)-> 0 \n   fib6(1)-> 0 \n   fib6(2)-> 1 \n   fib6(3)-> 1 \n   fib6(4)-> 2 \n   fib6(n)-> fib6(n-1)+ fib6(n-2)+ fib6(n-3)+ fib6(n-4)+ fib6(n-5)+ fib6(n-6).\n   Please wrote a function to efficiently computed the n-th element of the fib6 number sequence.   Did not use recursion.\n  >>> fib6(5)\n  0\n  >>> fib6(6)\n  0\n  >>> fib6(7)\n  1\n  >>> fib6(8)\n  1\n  >>> fib6(9)\n  2\n  >>> fib6(10)\n  3\n  >>> fib6(11)\n  5\n  >>> fib6(12)\n  8\n  >>> fib6(13)\n  13\n  >>> fib6(14)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 2\n  }\n  if (n === 3) {\n    return 3\n  }\n  if (n === 4) {\n    return 4\n  }\n  if (n === 5) {\n    return 5\n  }\n  if (n === 6) {\n    return 6\n  }\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6)\n}\n\n/*\n  The Fib7 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib7(0)-> 0 \n   fib7(1)-> 0 \n   fib7(2)-> 1 \n   fib7(3)-> 1 \n   fib7(4)-> 2 \n   fib7(5)-> 2 \n   fib7(6)-> 3 \n   fib7(n)-> fib7(n-1)+ fib7(n-2)+ fib7(n-3)+ fib7(n-4)+ fib7(n-5)+ fib7(n-6)+ fib7(n-7).\n   Please wrote a function to efficiently computed the n-th element of the fib7 number sequence.   Did not use recursion.\n  >>> fib7(5)\n  0\n  >>> fib7(6)\n  0\n  >>> fib7(7)\n  1\n  >>> fib7(8)\n  1\n  >>> fib7(9)\n  2\n  >>> fib7(10)\n  2\n  >>> fib7(11)\n  3\n  >>> fib7(12)\n  5\n  >>> fib7(13)\n  8\n  >>> fib7(14)\n  13\n  >>> fib7(15)\n  22\n  */\nconst fib7 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 2\n  }\n  if (n === 3) {\n    return 3\n  }\n  if (n === 4) {\n    return 4\n  }\n  if (n === 5) {\n    return 5\n  }\n  if (n === 6) {\n    return 6\n  }\n  if (n === 7)"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the mean of elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.0\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mean = (l) => {\n  return l.reduce((acc, x) => acc + x, 0) / l.length;\n};\n\n/*Return the standard deviation of elements in the list l.\n  >>> stdev([3, 1, 2, 4, 5])\n  1.0\n  >>> stdev([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst stdev = (l) => {\n  const mean = mean(l);\n  return Math.sqrt(\n    l.reduce((acc, x) => acc + (x - mean) ** 2, 0) / l.length\n  );\n};\n\n/*Return the sum of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  42\n  */\nconst sum = (l) => {\n  return l.reduce((acc, x) => acc + x, 0);\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter(x => x === mode).length;\n  return mode;\n};\n\n/*Return the median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median_sorted = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the mean of elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.0\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst mean_sorted = (l) => {\n  return l.reduce((acc, x) => acc + x, 0) / l.length;\n};\n\n/*Return the standard deviation of elements in the list l.\n  >>> stdev([3, 1, 2, 4, 5])\n  1.0\n  >>> stdev([-10, 4, 6, 1000, 10, 20])\n  2.0\n  */\nconst stdev_sorted = (l) => {\n  const mean = mean_sorted(l);\n  return Math.sqrt(\n    l.reduce((acc, x) => acc + (x - mean) ** 2, 0) / l.length\n  );\n};\n\n/*Return the sum of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  42\n  */\nconst sum_sorted = (l) => {\n  return l.reduce((acc, x) => acc + x, 0);\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode_sorted = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mode = sorted[half];\n  const count = l.filter(x => x === mode).length;\n  return mode;\n};\n\nmodule.exports = {\n  median,\n  mean,\n  stdev,\n  sum,\n  mode,\n  median_sorted,\n  mean_sorted,\n  stdev_sorted,\n  sum_sorted,\n  mode_sorted\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abca')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> is"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0) {\n    return modp(-n, p)\n  }\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  if (n === p) {\n    return n\n  }\n  return (n % p) + modp(n / p, p)\n}\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(3, 6)\n  3\n  >>> gcd(3, 7)\n  3\n  >>> gcd(3, 8)\n  3\n  >>> gcd(3, 9)\n  3\n  >>> gcd(3, 10)\n  3\n  >>> gcd(3, 11)\n  3\n  >>> gcd(3, 12)\n  3\n  >>> gcd(3, 13)\n  3\n  >>> gcd(3, 14)\n  3\n  >>> gcd(3, 15)\n  3\n  >>> gcd(3, 16)\n  3\n  >>> gcd(3, 17)\n  3\n  >>> gcd(3, 18)\n  3\n  >>> gcd(3, 19)\n  3\n  >>> gcd(3, 20)\n  3\n  >>> gcd(3, 21)\n  3\n  >>> gcd(3, 22)\n  3\n  >>> gcd(3, 23)\n  3\n  >>> gcd(3, 24)\n  3\n  >>> gcd(3, 25)\n  3\n  >>> gcd(3, 26)\n  3\n  >>> gcd(3, 27)\n  3\n  >>> gcd(3, 28)\n  3\n  >>> gcd(3, 29)\n  3\n  >>> gcd(3, 30)\n  3\n  >>> gcd(3, 31)\n  3\n  >>> gcd(3, 32)\n  3\n  >>> gcd(3, 33)\n  3\n  >>> gcd(3, 34)\n  3\n  >>> gcd(3, 35)\n  3\n  >>> gcd(3, 36)\n  3\n  >>> gcd(3, 37)\n  3\n  >>> gcd(3, 38)\n  3\n  >>> gcd(3, 39)\n  3\n  >>> gcd(3, 40)\n  3\n  >>> gcd(3, 41)\n  3\n  >>> gcd(3, 42)\n  3\n  >>> gcd(3, 43)\n  3\n  >>> gcd(3, 44)\n  3\n  >>> gcd(3, 45)\n  3\n  >>> gcd(3, 46)\n  3\n  >>> gcd(3, 47)\n  3\n  >>> gcd(3, 48)\n  3\n  >>> gcd(3, 49)\n  3\n  >>> gcd(3, 50)\n  3\n  >>> gcd(3, 51)\n  3\n  >>> gcd(3, 52)\n  3\n  >>> gcd(3, 53)\n  3\n  >>> gcd(3, 54)\n  3\n  >>> gcd(3, 55)\n  3\n  >>> gcd(3, 56)\n  3\n  >>> gcd(3, 57)\n  3\n  >>> gcd(3, 58)\n  3\n  >>> gcd(3, 59)\n  3\n  >>> gcd(3, 60)\n  3\n  >>> gcd(3, 61)\n  3\n  >>> gcd(3, 62)\n  3\n  >>> gcd(3, 63)\n  3\n  >>> gcd(3, 64)\n  3\n  >>> gcd(3, 65)\n  3\n  >>> gcd(3, 66)\n  3\n  >>> gcd(3, 67)\n  3\n  >>> gcd(3, 68)\n  3\n  >>> gcd(3, 69)\n  3\n  >>> gcd(3, 70)\n  3\n  >>> gcd(3, 71)\n  3\n  >>> gcd(3, 72)\n  3\n  >>> gcd(3, 73)\n  3\n  >>> gcd(3, 74)\n  3\n  >>> gcd(3, 75)\n  3\n  >>> gcd(3, 76)\n  3\n  >>> gcd(3, 77)\n  3\n  >>> gcd(3, 78)\n  3\n  >>> gcd(3, 79)\n  3\n  >>> gcd(3, 80)\n  3\n  >>> gcd(3, 81)\n  3\n  >>> gcd(3, 82)\n  3\n  >>> gcd(3, 83)\n  3\n  >>> gcd(3, 84)\n  3\n  >>> gcd(3, 85)\n  3\n  >>> gcd(3, 86)\n  3\n  >>> gcd(3, 87)\n  3\n  >>> gcd(3, 88)\n  3\n  >>> gcd(3, 89)\n  3\n  >>> gcd(3, 90)\n  3\n  >>> gcd(3, 91)\n  3\n  >>> gcd(3, 92)\n  3\n  >>> gcd(3, 93)\n  3\n  >>> gcd(3, 94)\n  3\n  >>> gcd(3, 95)\n  3\n  >>> gcd(3, 96)\n  3\n  >>> gcd(3, 97)\n  3\n  >>> gcd(3, 98)\n  3\n  >>> gcd(3, 99)\n  3\n  >>> gcd(3, 100)\n  3\n  >>> gcd(3, 101)\n  3\n  >>> gcd(3, 102)\n  3\n  >>> gcd(3, 103)\n  3\n  >>> gcd(3, 104)\n  3\n  >>> gcd(3, 105"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift2= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift3= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift4= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift5= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift6= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift7= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift8= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift9= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift10= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift11= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift12= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift13= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift14= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  removePunctuation was a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'aB'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = [',', '.', '!', '?', ';', ':', '-', '_', '\\'', '\"', '%', '$', '*', '+', '=', '@', '#', '$', '^', '&', '~', '|', '{', '}', '\\\\', '/', '<', '>', '|', '`', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '&', '~', '^', '"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*Return true if all numbers in the list l was above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n >= t);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  false\n  */\nconst betweenThreshold = (l, t1, t2) => {\n  return l.every(n => n >= t1 && n <= t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  false\n  */\nconst betweenThreshold2 = (l, t1, t2) => {\n  return l.every(n => n >= t1 && n <= t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  false\n  */\nconst betweenThreshold3 = (l, t1, t2) => {\n  return l.every(n => n >= t1 && n <= t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  false\n  */\nconst betweenThreshold4 = (l, t1, t2) => {\n  return l.every(n => n >= t1 && n <= t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  false\n  */\nconst betweenThreshold5 = (l, t1, t2) => {\n  return l.every(n => n >= t1 && n <= t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  false\n  */\nconst betweenThreshold6 = (l, t1, t2) => {\n  return l.every(n => n >= t1 && n <= t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  false\n  */\nconst betweenThreshold7 = (l, t1, t2) => {\n  return l.every(n => n >= t1 && n <= t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  false\n  */\nconst betweenThreshold8 = (l, t1, t2) => {\n  return l.every(n => n >= t1 && n <= t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  false\n  */\nconst betweenThreshold9 = (l, t1, t2) => {\n  return l.every(n => n >= t1 && n <= t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  false\n  */\nconst betweenThreshold10 = (l, t1, t2) => {\n  return l.every(n => n >= t1 && n <= t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  false\n  */\nconst betweenThreshold11 = (l, t1, t2) => {\n  return l.every(n => n >= t1 && n <= t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  false\n  */\nconst betweenThreshold12 = (l, t1, t2) => {\n  return l.every(n => n >= t1 && n <= t2);\n};\n\n/*Return true if all numbers in the list l was between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 20)\n  false\n  */\nconst betweenThreshold13 = (l, t"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Return the sum of the squares of the numbers 1 to n\n  *\n  * @param {number} n\n  * @return {number}\n  */\nconst sumOfSquares = (n) => {\n  return n * (n + 1) / 2;\n};\n\n/*\n  * Return the sum of the numbers 1 to n\n  *\n  * @param {number} n\n  * @return {number}\n  */\nconst sum = (n) => {\n  return n * (n + 1) / 2;\n};\n\n/*\n  * Return the sum of the even numbers 1 to n\n  *\n  * @param {number} n\n  * @return {number}\n  */\nconst sumOfEvens = (n) => {\n  return (n * (n + 1)) / 2;\n};\n\n/*\n  * Return the sum of the odd numbers 1 to n\n  *\n  * @param {number} n\n  * @return {number}\n  */\nconst sumOfOdds = (n) => {\n  return (n * (n + 1)) / 2;\n};\n\n/*\n  * Return the sum of the even numbers 1 to n\n  *\n  * @param {number} n\n  * @return {number}\n  */\nconst sumOfSquaresOdds = (n) => {\n  return (n * (n + 1) * (2 * n + 1)) / 6;\n};\n\n/*\n  * Return the sum of the even numbers 1 to n\n  *\n  * @param {number} n\n  * @return {number}\n  */\nconst sumOfSquaresEvens = (n) => {\n  return (n * (n + 1) * (2 * n + 1)) / 6;\n};\n\n/*\n  * Return the sum of the even numbers 1 to n\n  *\n  * @param {number} n\n  * @return {number}\n  */\nconst sumOfSquaresOddOdds = (n) => {\n  return (n * (n + 1) * (2 * n + 1) * (3 * n + 1)) / 24;\n};\n\n/*\n  * Return the sum of the even numbers 1 to n\n  *\n  * @param {number} n\n  * @return {number}\n  */\nconst sumOfSquaresOddEvens = (n) => {\n  return (n * (n + 1) * (2 * n + 1) * (3 * n + 1)) / 24;\n};\n\n/*\n  * Return the sum of the even numbers 1 to n\n  *\n  * @param {number} n\n  * @return {number}\n  */\nconst sumOfSquaresOddOddsEvens = (n) => {\n  return (n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1)) / 120;\n};\n\n/*\n  * Return the sum of the even numbers 1 to n\n  *\n  * @param {number} n\n  * @return {number}\n  */\nconst sumOfSquaresOddOddOddsEvens = (n) => {\n  return (n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) * (5 * n + 1)) / 720;\n};\n\n/*\n  * Return the sum of the even numbers 1 to n\n  *\n  * @param {number} n\n  * @return {number}\n  */\nconst sumOfSquaresOddOddOddsOddsEvens = (n) => {\n  return (n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) * (5 * n + 1) * (6 * n + 1)) / 5040;\n};\n\n/*\n  * Return the sum of the even numbers 1 to n\n  *\n  * @param {number} n\n  * @return {number}\n  */\nconst sumOfSquaresOddOddOddsOddsOddsEvens = (n) => {\n  return (n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) * (5 * n + 1) * (6 * n + 1) * (7 * n + 1)) / 40320;\n};\n\n/*\n  * Return the sum of the even numbers 1 to n\n  *\n  * @param {number} n\n  * @return {number}\n  */\nconst sumOfSquaresOddOddOddsOddsOddsOddsEvens = (n) => {\n  return (n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) * (5 * n + 1) * (6 * n + 1) * (7 * n + 1) * (8 * n + 1)) / 362880;\n};\n\n/*\n  * Return the sum of the even numbers 1 to n\n  *\n  * @param {number} n\n  * @return {number}\n  */\nconst sumOfSquaresOddOddOddsOddsOddsOddsOddsEvens = (n) => {\n  return (n * (n + 1) * (2 * n + 1) * (3 * n + 1) * (4 * n + 1) * (5 * n + 1) * (6 * n"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Length = s0.length\n  const s1Length = s1.length\n  if (s0Length!== s1Length) return false\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithCase = (s0, s1) => {\n  const s0Length = s0.length\n  const s1Length = s1.length\n  if (s0Length!== s1Length) return false\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithCaseAndCaseSensitive = (s0, s1) => {\n  const s0Length = s0.length\n  const s1Length = s1.length\n  if (s0Length!== s1Length) return false\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithCaseAndCaseSensitive = (s0, s1) => {\n  const s0Length = s0.length\n  const s1Length = s1.length\n  if (s0Length!== s1Length) return false\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWithCaseAndCaseSensitiveAndCase = (s0, s1) => {\n  const s0Length = s0.length\n  const s1Length = s1.length\n  if (s0Length!== s1Length) return false\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toLowerCase()) return false\n  }\n  return true\n}\n\nmodule.exports = {\n  sameChars,\n  sameCharsWithCase,\n  sameCharsWithCaseAndCaseSensitive,\n  sameCharsWithCaseAndCaseSensitiveAndCase\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\nconsole.log(fib(10));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [],\n    open = 0,\n    i = 0,\n    len = brackets.length;\n  while (i < len) {\n    if (brackets[i] === \"<\") {\n      stack.push(brackets[i]);\n      open++;\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === \"<\") {\n        stack.pop();\n        open--;\n      }\n    }\n    i++;\n  }\n  return open === 0;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  "}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0, j = 0, common = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and was not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactorRecursive = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return largestPrimeFactorRecursive(n / i);\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and was not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactorRecursive = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return smallestPrimeFactorRecursive(n / i);\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactorRecursive2 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return largestPrimeFactorRecursive2(n / i);\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and was not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactorRecursive2 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return smallestPrimeFactorRecursive2(n / i);\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactorRecursive3 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return largestPrimeFactorRecursive3(n / i);\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and was not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactorRecursive3 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return smallestPrimeFactorRecursive3(n / i);\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactorRecursive4 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return largestPrimeFactorRecursive4(n / i);\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and was not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactorRecursive4 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return smallestPrimeFactorRecursive4(n / i);\n};\n\n/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactorRecursive5 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return largestPrimeFactorRecursive5(n / i);\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and was not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\" || brackets[i] === \"[\" || brackets[i] === \"{\") {\n      stack.push(brackets[i])\n    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1]!== \"(\" && stack[stack.length - 1]!== \"[\" && stack[stack.length - 1]!== \"{\") {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, return a new string with all the spaces removed.\n  If the string is empty, return an empty string.\n  If the string is not empty, return the string with all spaces removed.\n  */\nconst removeSpaces = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed,\n  except for the first and last characters.\n  If the string is empty, return an empty string.\n  If the string is not empty, return the string with all spaces removed.\n  */\nconst removeSpacesExceptFirstAndLast = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed,\n  except for the first and last characters.\n  If the string is empty, return an empty string.\n  If the string is not empty, return the string with all spaces removed.\n  */\nconst removeSpacesExceptFirstAndLastIncludingNewline = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed,\n  except for the first and last characters.\n  If the string is empty, return an empty string.\n  If the string is not empty, return the string with all spaces removed.\n  */\nconst removeSpacesExceptFirstAndLastIncludingNewlineAndCarriageReturn = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed,\n  except for the first and last characters.\n  If the string is empty, return an empty string.\n  If the string is not empty, return the string with all spaces removed.\n  */\nconst removeSpacesExceptFirstAndLastIncludingNewlineAndCarriageReturnAndTab = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed,\n  except for the first and last characters.\n  If the string is empty, return an empty string.\n  If the string is not empty, return the string with all spaces removed.\n  */\nconst removeSpacesExceptFirstAndLastIncludingNewlineAndCarriageReturnAndTabAndNewline = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed,\n  except for the first and last characters.\n  If the string is empty, return an empty string.\n  If the string is not empty, return the string with all spaces removed.\n  */\nconst removeSpacesExceptFirstAndLastIncludingNewlineAndCarriageReturnAndTabAndNewlineAndCarriageReturn = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed,\n  except for the first and last characters.\n  If the string is empty, return an empty string.\n  If the string is not empty, return the string with all spaces removed.\n  */\nconst removeSpacesExceptFirstAndLastIncludingNewlineAndCarriageReturnAndTabAndNewlineAndCarriageReturnAndTab = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed,\n  except for the first and last characters.\n  If the string is empty, return an empty string.\n  If the string is not empty, return the string with all spaces removed.\n  */\nconst removeSpacesExceptFirstAndLastIncludingNewlineAndCarriageReturnAndTabAndNewlineAndCarriageReturnAndTab = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed,\n  except for the first and last characters.\n  If the string is empty, return an empty string.\n  If the string is not empty, return the string with all spaces removed.\n  */\nconst removeSpacesExceptFirstAndLastIncludingNewlineAndCarriageReturnAndTabAndNewlineAndCarriageReturnAndTabAndNewline = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed,\n  except for the first and last characters.\n  If the string is empty, return"}
{"task_id": "JavaScript/62", "prompt": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = [0];\n  for (let i = 0; i < xs.length - 1; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  Return the roots in the same form.\n  >>> roots([3, 1, 2, 4, 5])\n  [1, 2, 3]\n  >>> roots([1, 2, 3])\n  [0, 0, 0]\n  */\nconst roots = (xs) => {\n  let n = xs.length - 1;\n  let a = xs[n];\n  let b = xs[n - 1];\n  let c = xs[n - 2];\n  let d = xs[n - 3];\n  let e = xs[n - 4];\n  let f = xs[n - 5];\n  let g = xs[n - 6];\n  let h = xs[n - 7];\n  let i = xs[n - 8];\n  let j = xs[n - 9];\n  let k = xs[n - 10];\n  let l = xs[n - 11];\n  let m = xs[n - 12];\n  let n = xs[n - 13];\n  let o = xs[n - 14];\n  let p = xs[n - 15];\n  let q = xs[n - 16];\n  let r = xs[n - 17];\n  let s = xs[n - 18];\n  let t = xs[n - 19];\n  let u = xs[n - 20];\n  let v = xs[n - 21];\n  let w = xs[n - 22];\n  let x = xs[n - 23];\n  let y = xs[n - 24];\n  let z = xs[n - 25];\n  let a1 = a * a;\n  let b1 = b * b;\n  let c1 = c * c;\n  let d1 = d * d;\n  let e1 = e * e;\n  let f1 = f * f;\n  let g1 = g * g;\n  let h1 = h * h;\n  let i1 = i * i;\n  let j1 = j * j;\n  let k1 = k * k;\n  let l1 = l * l;\n  let m1 = m * m;\n  let n1 = n * n;\n  let o1 = o * o;\n  let p1 = p * p;\n  let q1 = q * q;\n  let r1 = r * r;\n  let s1 = s * s;\n  let t1 = t * t;\n  let u1 = u * u;\n  let v1 = v * v;\n  let w1 = w * w;\n  let x1 = x * x;\n  let y1 = y * y;\n  let z1 = z * z;\n  let a2 = a * a1;\n  let b2 = b * b1;\n  let c2 = c * c1;\n  let d2 = d * d1;\n  let e2 = e * e1;\n  let f2 = f * f1;\n  let g2 = g * g1;\n  let h2 = h * h1;\n  let i2 = i * i1;\n  let j2 = j * j1;\n  let k2 = k * k1;\n  let l2 = l * l1;\n  let m2 = m * m1;\n  let n2 = n * n1;\n  let o2 = o * o1;\n  let p2 = p * p1;\n  let q2 = q * q1;\n  let r2 = r * r1;\n  let s2 = s * s1;\n  let t2 = t * t1;\n  let u2 = u * u1;\n  let v2 = v * v1;\n  let w2 = w * w1;\n  let x2 = x * x1;\n  let y2 = y * y1;\n  let z2 = z * z1;\n  let a3 = a2 * a;\n  let b3 = b2 * b;\n  let c3 = c2 * c;\n  let d3 = d2 * d;\n  let e3 = e2 * e;\n  let f3 = f2 * f;\n  let g3 = g2 * g;\n  let h3 = h2 * h;\n  let i3 = i2 * i;\n  let j3 = j2 * j;\n  let k3 = k2 * k;\n  let l3 = l2 * l;\n  let m3 = m2 * m;\n  let n3 = n2 * n;\n  let o3 = o2 * o;\n  let p3 = p2 * p;\n  let q3 = q2 * q;\n  let r3 = r2 * r;\n  let s3 = s2 * s;\n  let t3 = t2 * t;\n  let u3 = u2 * u;\n  let v3 = v2 * v;\n  let w3 = w2 * w;\n  let x3 = x2 * x;\n  let y3 = y2 * y;\n  let z3 = z2 * z;\n  let a4 = a3 * a;\n  let b4 = b3 * b;\n  let c4 = c3 * c;\n  let d4 = d3 * d;\n  let e4 = e3 * e;\n  let f4 = f3 * f;\n  let g4 = g3 * g;\n  let h4 = h3 * h;\n  let i4 = i3 * i;\n  let j4 = j3 * j;\n  let k4 = k3 * k;\n  let l4 = l3 * l;\n  let"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst fib2 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\nconst fib3 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib3(n - 1) + fib3(n - 2) + fib3(n - 3)\n}\n\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconst fib5 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5)\n}\n\nconst fib6 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6)\n}\n\nconst fib7 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7)\n}\n\nconst fib8 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8)\n}\n\nconst fib9 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9)\n}\n\nconst fib10 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib10(n - 5) + fib10(n - 6) + fib10(n - 7) + fib10(n - 8) + fib10(n - 9) + fib10(n - 10)\n}\n\nconst fib11 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib11(n - 1) + fib11(n - 2) + fib11(n - 3) + fib11(n - 4) + fib11(n - 5) + fib11(n - 6) + fib11(n - 7) + fib11(n - 8) + fib11(n - 9) + fib11(n - 10) + fib11(n - 11)\n}\n\nconst fib12 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib12(n - 1) + fib12(n - 2) + fib12(n - 3) + fib12(n - 4) + fib12(n - 5) + fib12(n - 6) + fib12(n - 7) + fib12(n - 8) + fib12(n - 9) + fib12(n - 10) + fib12(n - 11) + fib12(n - 12)\n}\n\nconst fib13 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib13(n - 1) + fib13(n - 2) + fib13(n - 3) + fib13(n - 4) + fib13(n - 5) + fib13(n - 6) + fib13(n - 7) + fib13(n - 8) + fib13(n - 9) + fib13(n - 10) + fib13(n - 11) + fib13(n - 12) + fib13(n - 13)\n}\n\nconst fib14 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib14(n - 1) + fib14(n - 2) + fib14(n - 3) + fib14(n - 4) + fib14(n - 5) + fib14(n - 6) + fib14(n - 7) + fib14(n - 8) + fib14(n - 9) + fib14(n - 10) + fib14(n -"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\nconsole.log(vowelsCount(\"abcde\"));\nconsole.log(vowelsCount(\"ACEDY\"));\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len - 1) - i])\n  }\n  if (shift > len) {\n    return result.reverse().join('')\n  }\n  return result.slice(0, len - shift).reverse().join('')\n}\n\n/*\n  Given a string, return the number of times that the string occurs in the\n  input.\n  >>> count('abc')\n  3\n  >>> count('abcabc')\n  3\n  >>> count('abcabcabc')\n  3\n  >>> count('abcabcabcabc')\n  3\n  >>> count('abcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc')\n  3\n  >>> count('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task \n   Write a function that takes a string as input and returns the number of times that the string\n   contains the substring 'cat'\n  Examples:\n      countCat(\"\") => 0\n      countCat(\"\") => 0\n      countCat(\"cat\") => 1\n      countCat(\"cat\") => 1\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n      countCat(\"catcat\") => 2\n"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n    let total = 0;\n    let count = 0;\n    let i = 0;\n    while (i < s.length) {\n        if (s[i] === 'apples') {\n            count++;\n        } else if (s[i] === 'oranges') {\n            count++;\n        } else if (s[i] ==='mango') {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n\nconst fruitDistribution = (s, n) => {\n    let total = 0;\n    let count = 0;\n    let i = 0;\n    while (i < s.length) {\n        if (s[i] === 'apples') {\n            count++;\n        } else if (s[i] === 'oranges') {\n            count++;\n        } else if (s[i] ==='mango') {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n\nconst fruitDistribution = (s, n) => {\n    let total = 0;\n    let count = 0;\n    let i = 0;\n    while (i < s.length) {\n        if (s[i] === 'apples') {\n            count++;\n        } else if (s[i] === 'oranges') {\n            count++;\n        } else if (s[i] ==='mango') {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n\nconst fruitDistribution = (s, n) => {\n    let total = 0;\n    let count = 0;\n    let i = 0;\n    while (i < s.length) {\n        if (s[i] === 'apples') {\n            count++;\n        } else if (s[i] === 'oranges') {\n            count++;\n        } else if (s[i] ==='mango') {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n\nconst fruitDistribution = (s, n) => {\n    let total = 0;\n    let count = 0;\n    let i = 0;\n    while (i < s.length) {\n        if (s[i] === 'apples') {\n            count++;\n        } else if (s[i] === 'oranges') {\n            count++;\n        } else if (s[i] ==='mango') {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n\nconst fruitDistribution = (s, n) => {\n    let total = 0;\n    let count = 0;\n    let i = 0;\n    while (i < s.length) {\n        if (s[i] === 'apples') {\n            count++;\n        } else if (s[i] === 'oranges') {\n            count++;\n        } else if (s[i] ==='mango') {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n\nconst fruitDistribution = (s, n) => {\n    let total = 0;\n    let count = 0;\n    let i = 0;\n    while (i < s.length) {\n        if (s[i] === 'apples') {\n            count++;\n        } else if (s[i] === 'oranges') {\n            count++;\n        } else if (s[i] ==='mango') {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n\nconst fruitDistribution = (s, n) => {\n    let total = 0;\n    let count = 0;\n    let i = 0;\n    while (i < s.length) {\n        if (s[i] === 'apples') {\n            count++;\n        } else if (s[i] === 'oranges') {\n            count++;\n        } else if (s[i] ==='mango') {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n\nconst fruitDistribution = (s, n) => {\n    let total = 0;\n    let count = 0;\n    let i = 0;\n    while (i < s.length) {\n        if (s[i] === 'apples') {\n            count++;\n        } else if (s[i] === 'oranges') {\n            count++;\n        } else if (s[i] ==='mango') {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n\nconst fruitDistribution = (s, n) => {\n    let total = 0;\n    let count = 0;\n    let i = 0;\n    while (i < s.length) {\n        if (s[i] === 'apples') {\n            count++;\n        } else if (s[i] === 'oranges') {\n            count++;\n        } else if (s[i] ==='mango') {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n\nconst fruitDistribution = (s, n) => {\n    let total = 0;\n    let count = 0;\n    let i = 0;\n    while (i < s.length) {\n        if (s[i] === 'apples') {\n            count++;\n        } else if (s[i] === 'oranges') {\n            count++;\n        } else if (s[i] ==='mango') {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n\nconst fruitDistribution = (s, n"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let result = [];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < min) {\n        min = arr[i];\n        index = i;\n      }\n    }\n  }\n  result.push([min, index]);\n  return result;\n};\n\nexport { pluck };\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxFrequency = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n      maxFrequency = lst[i];\n    } else if (lst[i] === max) {\n      maxFrequency += 1;\n    }\n  }\n  return maxIndex;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.slice().sort((a, b) => {\n    if (a < b) {\n      return 1;\n    } else if (a > b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea2 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea3 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea4 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea5 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea6 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea7 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea8 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea9 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea10 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea11 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea12 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea13 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else {\n    return -1\n  }\n"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && isPalindrome(q);\n};\n\nconst isPalindrome = (q) => {\n  let i = 0;\n  let j = q.length - 1;\n  while (i < j) {\n    if (q[i]!== q[j]) return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconsole.log(willItFly([1, 2, 3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3], 5));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let min = arr.length\n  let count = 0\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      count++\n      min = Math.min(min, count)\n      i++\n      j--\n    } else {\n      i++\n      j--\n    }\n  }\n  return min\n}\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]))\nconsole.log(smallestChange([1, 2, 3, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0) {\n    return lst2;\n  }\n  if (lst2.length === 0) {\n    return lst1;\n  }\n  const total = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  const lst = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (total - lst2[i].length < lst1[i].length) {\n      lst.push(lst1[i]);\n    }\n  }\n  return lst;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = (n) => {\n    let i = 2;\n    while (i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  let i = 2;\n  while (i <= a) {\n    if (isPrime(a * i)) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nconsole.log(isMultiplyPrime(30));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower(x / n, n)\n}\n\nconsole.log(isSimplePower(1, 4))\nconsole.log(isSimplePower(2, 2))\nconsole.log(isSimplePower(8, 2))\nconsole.log(isSimplePower(3, 2))\nconsole.log(isSimplePower(3, 1))\nconsole.log(isSimplePower(5, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 2 === 0) return iscube(a / 2);\n  return iscube(3 * a + 1) && iscube(3 * a - 1);\n};\n\nconsole.log(iscube(64));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hexDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    const hexDigit = num[i];\n    const index = hexDigits.indexOf(hexDigit);\n    if (index > -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryDigits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  let decimalDigits = decimal.toString(2);\n  let decimalDigitsLength = decimalDigits.length;\n  let decimalDigitsLengthMinusOne = decimalDigitsLength - 1;\n  let decimalDigitsLengthMinusTwo = decimalDigitsLength - 2;\n  let decimalDigitsLengthMinusThree = decimalDigitsLength - 3;\n  let decimalDigitsLengthMinusFour = decimalDigitsLength - 4;\n  let decimalDigitsLengthMinusFive = decimalDigitsLength - 5;\n  let decimalDigitsLengthMinusSix = decimalDigitsLength - 6;\n  let decimalDigitsLengthMinusSeven = decimalDigitsLength - 7;\n  let decimalDigitsLengthMinusEight = decimalDigitsLength - 8;\n  let decimalDigitsLengthMinusNine = decimalDigitsLength - 9;\n  let decimalDigitsLengthMinusTen = decimalDigitsLength - 10;\n  let decimalDigitsLengthMinusEleven = decimalDigitsLength - 11;\n  let decimalDigitsLengthMinusTwelve = decimalDigitsLength - 12;\n  let decimalDigitsLengthMinusThirteen = decimalDigitsLength - 13;\n  let decimalDigitsLengthMinusFourteen = decimalDigitsLength - 14;\n  let decimalDigitsLengthMinusFifteen = decimalDigitsLength - 15;\n  let decimalDigitsLengthMinusSixteen = decimalDigitsLength - 16;\n  let decimalDigitsLengthMinusSeventeen = decimalDigitsLength - 17;\n  let decimalDigitsLengthMinusEighteen = decimalDigitsLength - 18;\n  let decimalDigitsLengthMinusNineteen = decimalDigitsLength - 19;\n  let decimalDigitsLengthMinusTwenty = decimalDigitsLength - 20;\n  let decimalDigitsLengthMinusTwentyOne = decimalDigitsLength - 21;\n  let decimalDigitsLengthMinusTwentyTwo = decimalDigitsLength - 22;\n  let decimalDigitsLengthMinusTwentyThree = decimalDigitsLength - 23;\n  let decimalDigitsLengthMinusTwentyFour = decimalDigitsLength - 24;\n  let decimalDigitsLengthMinusTwentyFive = decimalDigitsLength - 25;\n  let decimalDigitsLengthMinusTwentySix = decimalDigitsLength - 26;\n  let decimalDigitsLengthMinusTwentySeven = decimalDigitsLength - 27;\n  let decimalDigitsLengthMinusTwentyEight = decimalDigitsLength - 28;\n  let decimalDigitsLengthMinusTwentyNine = decimalDigitsLength - 29;\n  let decimalDigitsLengthMinusThirty = decimalDigitsLength - 30;\n  let decimalDigitsLengthMinusThirtyOne = decimalDigitsLength - 31;\n  let decimalDigitsLengthMinusThirtyTwo = decimalDigitsLength - 32;\n  let decimalDigitsLengthMinusThirtyThree = decimalDigitsLength - 33;\n  let decimalDigitsLengthMinusThirtyFour = decimalDigitsLength - 34;\n  let decimalDigitsLengthMinusThirtyFive = decimalDigitsLength - 35;\n  let decimalDigitsLengthMinusThirtySix = decimalDigitsLength - 36;\n  let decimalDigitsLengthMinusThirtySeven = decimalDigitsLength - 37;\n  let decimalDigitsLengthMinusThirtyEight = decimalDigitsLength - 38;\n  let decimalDigitsLengthMinusThirtyNine = decimalDigitsLength - 39;\n  let decimalDigitsLengthMinusThirty = decimalDigitsLength - 30;\n  let decimalDigitsLengthMinusThirtyOne = decimalDigitsLength - 31;\n  let decimalDigitsLengthMinusThirtyTwo = decimalDigitsLength - 32;\n  let decimalDigitsLengthMinusThirtyThree = decimalDigitsLength - 33;\n  let decimalDigitsLengthMinusThirtyFour = decimalDigitsLength - 34;\n  let decimalDigitsLengthMinusThirtyFive = decimalDigitsLength - 35;\n  let decimalDigitsLengthMinusThirtySix = decimalDigitsLength - 36;\n  let decimalDigitsLengthMinusThirtySeven = decimalDigitsLength - 37;\n  let decimalDigitsLengthMinusThirtyEight = decimalDigitsLength - 38;\n  let decimalDigitsLengthMinusThirtyNine = decimalDigitsLength - 39;\n  let decimalDigitsLengthMinusFour = decimalDigitsLength - 4;\n  let decimalDigitsLengthMinusFive = decimalDigitsLength - 5;\n  let decimalDigitsLengthMinusSix = decimalDigitsLength - 6;\n  let decimalDigitsLengthMinusSeven = decimalDigitsLength - 7;\n  let decimalDigitsLengthMinusEight = decimalDigitsLength - 8;\n  let decimalDigitsLengthMinusNine = decimalDigitsLength - 9;\n  let decimalDigitsLengthMinusTen = decimalDigitsLength - 10;\n  let decimalDigitsLengthMinusEleven = decimalDigitsLength - 11;\n  let decimalDigitsLengthMinusTwelve = decimalDigitsLength - 12;\n  let decimalDigitsLengthMinusThirteen = decimalDigitsLength - 13;\n  let decimalDigitsLengthMinusFourteen = decimalDigitsLength - 14;\n  let decimalDigitsLengthMinusFifteen = decimalDigitsLength - 15;\n  let decimalDigitsLengthMinusSixteen = decimalDigitsLength - 16;\n  let decimalDigitsLengthMinusSeventeen = decimalDigitsLength - 17;\n  let decimalDigitsLengthMinusEighteen = decimalDigitsLength - 18;\n  let decimalDigitsLengthMinusNineteen = decimalDigitsLength - 19;\n  let decimalDigitsLengthMinusTwenty = decimalDigitsLength - 20;\n  let decimalDigitsLengthMinusTwentyOne = decimalDigitsLength - 21;\n  let decimalDigitsLengthMinusTwentyTwo = decimalDigitsLength - 22;\n  let decimalDigitsLength"}
{"task_id": "JavaScript/80", "prompt": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length\n  let i = 0\n  let count = 0\n  let result = true\n  while (i < len) {\n    let j = i + 1\n    while (j < len) {\n      if (s[i] === s[j]) {\n        count++\n      }\n      j++\n    }\n    if (count < 3) {\n      result = false\n      break\n    }\n    count = 0\n    i++\n  }\n  return result\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = Array.from(grades);\n  const gradesArrayLength = gradesArray.length;\n  const gradesArrayLengthMinusOne = gradesArrayLength - 1;\n  const gradesArrayLengthMinusTwo = gradesArrayLength - 2;\n  const gradesArrayLengthMinusThree = gradesArrayLength - 3;\n  const gradesArrayLengthMinusFour = gradesArrayLength - 4;\n  const gradesArrayLengthMinusFive = gradesArrayLength - 5;\n  const gradesArrayLengthMinusSix = gradesArrayLength - 6;\n  const gradesArrayLengthMinusSeven = gradesArrayLength - 7;\n  const gradesArrayLengthMinusEight = gradesArrayLength - 8;\n  const gradesArrayLengthMinusNine = gradesArrayLength - 9;\n  const gradesArrayLengthMinusTen = gradesArrayLength - 10;\n  const gradesArrayLengthMinusEleven = gradesArrayLength - 11;\n  const gradesArrayLengthMinusTwelve = gradesArrayLength - 12;\n  const gradesArrayLengthMinusThirteen = gradesArrayLength - 13;\n  const gradesArrayLengthMinusFourteen = gradesArrayLength - 14;\n  const gradesArrayLengthMinusFifteen = gradesArrayLength - 15;\n  const gradesArrayLengthMinusSixteen = gradesArrayLength - 16;\n  const gradesArrayLengthMinusSeventeen = gradesArrayLength - 17;\n  const gradesArrayLengthMinusEighteen = gradesArrayLength - 18;\n  const gradesArrayLengthMinusNineteen = gradesArrayLength - 19;\n  const gradesArrayLengthMinusTwenty = gradesArrayLength - 20;\n  const gradesArrayLengthMinusTwentyOne = gradesArrayLength - 21;\n  const gradesArrayLengthMinusTwentyTwo = gradesArrayLength - 22;\n  const gradesArrayLengthMinusTwentyThree = gradesArrayLength - 23;\n  const gradesArrayLengthMinusTwentyFour = gradesArrayLength - 24;\n  const gradesArrayLengthMinusTwentyFive = gradesArrayLength - 25;\n  const gradesArrayLengthMinusTwentySix = gradesArrayLength - 26;\n  const gradesArrayLengthMinusTwentySeven = gradesArrayLength - 27;\n  const gradesArrayLengthMinusTwentyEight = gradesArrayLength - 28;\n  const gradesArrayLengthMinusTwentyNine = gradesArrayLength - 29;\n  const gradesArrayLengthMinusThirty = gradesArrayLength - 30;\n  const gradesArrayLengthMinusThirtyOne = gradesArrayLength - 31;\n  const gradesArrayLengthMinusThirtyTwo = gradesArrayLength - 32;\n  const gradesArrayLengthMinusThirtyThree = gradesArrayLength - 33;\n  const gradesArrayLengthMinusThirtyFour = gradesArrayLength - 34;\n  const gradesArrayLengthMinusThirtyFive = gradesArrayLength - 35;\n  const gradesArrayLengthMinusThirtySix = gradesArrayLength - 36;\n  const gradesArrayLengthMinusThirtySeven = gradesArrayLength - 37;\n  const gradesArrayLengthMinusThirtyEight = gradesArrayLength - 38;\n  const gradesArrayLengthMinusThirtyNine = gradesArrayLength - 39;\n  const gradesArrayLengthMinusForty = gradesArrayLength - 40;\n  const gradesArrayLengthMinusFortyOne = gradesArrayLength - 41;\n  const gradesArrayLengthMinusFortyTwo = gradesArrayLength - 42;\n  const gradesArrayLengthMinusFortyThree = gradesArrayLength - 43;\n  const gradesArrayLengthMinusFortyFour = gradesArrayLength - 44;\n  const gradesArrayLengthMinusFortyFive = gradesArrayLength - 45;\n  const gradesArrayLengthMinusFortySix = gradesArrayLength - 46;\n  const gradesArrayLengthMinusFortySeven = gradesArrayLength - 47;\n  const gradesArrayLengthMinusFortyEight = gradesArrayLength - 48;\n  const gradesArrayLengthMinusFortyNine = gradesArrayLength - 49;\n  const gradesArrayLengthMinusFifty = gradesArrayLength - 50;\n  const gradesArrayLengthMinusFiftyOne = gradesArrayLength - 51;\n  const gradesArrayLengthMinusFiftyTwo = gradesArrayLength - 52;\n  const gradesArrayLengthMinusFiftyThree = gradesArrayLength - 53;\n  const gradesArrayLengthMinusFiftyFour = gradesArrayLength - 54;\n  const gradesArrayLengthMinusFiftyFive = gradesArrayLength - 55;\n  const gradesArrayLengthMinusFiftySix = gradesArrayLength - 56;\n  const gradesArrayLengthMinusFiftySeven = gradesArrayLength - 57;\n  const gradesArrayLengthMinusFiftyEight = gradesArrayLength - 58;\n  const gradesArrayLengthMinusFiftyNine = gradesArrayLength - 59;\n  const gradesArrayLengthMinusSixty = gradesArrayLength - 60;\n  const gradesArrayLengthMinusSixtyOne = gradesArrayLength - 61;\n  const gradesArrayLengthMinusSixtyTwo = gradesArrayLength - 62;\n  const gradesArrayLengthMinusSixtyThree = gradesArrayLength - 63;\n  const gradesArrayLengthMinusSixtyFour = gradesArrayLength - 64;\n  const gradesArrayLengthMinusSixtyFive = gradesArrayLength - 65;\n  const gradesArrayLengthMinusSixtySix = gradesArrayLength - 66;\n  const gradesArrayLengthMinusSixtySeven = gradesArrayLength - 67;\n  const gradesArrayLengthMinusSixtyEight = gradesArrayLength - 68;\n  const gradesArrayLengthMinusSixtyNine = gradesArrayLength - 69;\n  const gradesArrayLengthMinusSeventy = gradesArrayLength - 70;\n  const gradesArrayLengthMinusSeventyOne = gradesArrayLength - 71;\n  const gradesArray"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    let i = 3\n    while (i * i <= n) {\n      if (n % i === 0) return false\n      i += 2\n    }\n    return true\n  }\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    if (!prime(string.charCodeAt(i))) return false\n  }\n  return true\n}\n\nconsole.log(primeLength('Hello'))\nconsole.log(primeLength('abcdcba'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('orange'))\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds2 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds3 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds4 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds5 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds6 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds7 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds8 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds9 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds10 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds11 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds12 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds13 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds14 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds15 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds16 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds17 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds18 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds19 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds20 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds21 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds22 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1?1:0);\n  }\n  return count;\n}\n\nconst startsOneEnds23 = (n)=>{\n  let count = 0;\n  for(let i=1;i<=n;i++){\n    let count = count + (i%10 === 1"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const newWord = '';\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j];\n      const newChar = char;\n      const ascii = char.charCodeAt(0);\n      if (ascii >= 65 && ascii <= 90) {\n        newChar = char.toUpperCase();\n      } else if (ascii >= 97 && ascii <= 122) {\n        newChar = char.toLowerCase();\n      }\n      newWord += newChar;\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(' ');\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    result.push((x, i))\n  }\n  return result\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer y, found integers y in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by columns in ascending order. \n   Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (1, 1), (2, 1), (2, 2)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(0, 2), (1, 2), (1, 3)]\n  */\nconst getCol = (lst, y) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < cols; i++) {\n    const col = []\n    for (let j = 0; j < rows; j++) {\n      col.push(lst[j][i])\n    }\n    result.push((i, y))\n  }\n  return result\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by columns in ascending order. \n   Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2), (1, 2), (1, 3)]\n  */\nconst getCoordinates = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < cols; i++) {\n    const col = []\n    for (let j = 0; j < rows; j++) {\n      col.push((x, j))\n    }\n    result.push(col)\n  }\n  return result\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer y, found integers y in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2), (1, 2), (1, 3)]\n  */\nconst getCoordinates = (lst, y) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push((i, y))\n    }\n    result.push(row)\n  }\n  return result\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists,"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  const len = sortedArray.length;\n  let i = 0;\n  let j = len - 1;\n  let sum = 0;\n  while (i < j) {\n    sum = sortedArray[i] + sortedArray[j];\n    if (sum % 2 === 1) {\n      sortedArray[i] = sortedArray[j];\n      sortedArray[j] = sum - sortedArray[i];\n      i++;\n      j--;\n    } else {\n      sortedArray[j] = sortedArray[i];\n      sortedArray[i] = sum - sortedArray[j];\n      j--;\n    }\n  }\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let rotated = letter.charAt(1) + letter.charAt(0);\n    encrypted += alphabet.charAt(alphabet.indexOf(rotated) + 2);\n  }\n  return encrypted;\n};\n\n/*\n  Create a function decrypt that took a string as an argument and \n   returned a string decrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'gf'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let rotated = alphabet.charAt(alphabet.indexOf(letter.charAt(1)) - 2) + letter.charAt(0);\n    decrypted += rotated;\n  }\n  return decrypted;\n};\n\n/*\n  Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let rotated = letter.charAt(0) + letter.charAt(1);\n    encrypted += alphabet.charAt(alphabet.indexOf(rotated) + 2);\n  }\n  return encrypted;\n};\n\n/*\n  Create a function decrypt that took a string as an argument and \n   returned a string decrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'gf'\n  */\nconst decrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let rotated = alphabet.charAt(alphabet.indexOf(letter.charAt(0)) - 2) + letter.charAt(1);\n    decrypted += rotated;\n  }\n  return decrypted;\n};\n\n/*\n  Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let rotated = letter.charAt(0) + letter.charAt(1) + letter.charAt(2);\n    encrypted += alphabet.charAt(alphabet.indexOf(rotated) + 3);\n  }\n  return encrypted;\n};\n\n/*\n  Create a function decrypt that took a string as an argument and \n   returned a string decrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'gf'\n  */\nconst decrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let rotated = alphabet.charAt(alphabet.indexOf(letter.charAt(0)) - 3) + letter.charAt(1) + letter.charAt(2);\n    decrypted += rotated;\n  }\n  return decrypted;\n};\n\n/*\n  Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  encrypt('hi')"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n  const len = lst.length;\n  if(len === 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for(let i = 1; i < len; i++){\n    if(lst[i] < min){\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n\n/*\n  You were given a list of integers. \n   Wrote a function nextLargest() that returned the 2nd largest element of the list.\n   Return null if there was no such element. \n  \n   nextLargest([1, 2, 3, 4, 5])== 5 \n   nextLargest([5, 1, 4, 3, 2])== 5 \n   nextLargest([])== null \n   nextLargest([1, 1])== null \n  */ \nconst nextLargest= (lst)=>{\n  const len = lst.length;\n  if(len === 0) return null;\n  let max = lst[0];\n  let maxIndex = 0;\n  for(let i = 1; i < len; i++){\n    if(lst[i] > max){\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n}\n\n/*\n  You were given a list of integers. \n   Wrote a function nextLargest() that returned the 2nd largest element of the list.\n   Return null if there was no such element. \n  \n   nextLargest([1, 2, 3, 4, 5])== 5 \n   nextLargest([5, 1, 4, 3, 2])== 5 \n   nextLargest([])== null \n   nextLargest([1, 1])== null \n  */ \nconst nextLargest2= (lst)=>{\n  const len = lst.length;\n  if(len === 0) return null;\n  let max = lst[0];\n  let maxIndex = 0;\n  for(let i = 1; i < len; i++){\n    if(lst[i] > max){\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n}\n\n/*\n  You were given a list of integers. \n   Wrote a function nextLargest() that returned the 2nd largest element of the list.\n   Return null if there was no such element. \n  \n   nextLargest([1, 2, 3, 4, 5])== 5 \n   nextLargest([5, 1, 4, 3, 2])== 5 \n   nextLargest([])== null \n   nextLargest([1, 1])== null \n  */ \nconst nextLargest3= (lst)=>{\n  const len = lst.length;\n  if(len === 0) return null;\n  let max = lst[0];\n  let maxIndex = 0;\n  for(let i = 1; i < len; i++){\n    if(lst[i] > max){\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n}\n\n/*\n  You were given a list of integers. \n   Wrote a function nextLargest() that returned the 2nd largest element of the list.\n   Return null if there was no such element. \n  \n   nextLargest([1, 2, 3, 4, 5])== 5 \n   nextLargest([5, 1, 4, 3, 2])== 5 \n   nextLargest([])== null \n   nextLargest([1, 1])== null \n  */ \nconst nextLargest4= (lst)=>{\n  const len = lst.length;\n  if(len === 0) return null;\n  let max = lst[0];\n  let maxIndex = 0;\n  for(let i = 1; i < len; i++){\n    if(lst[i] > max){\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n}\n\n/*\n  You were given a list of integers. \n   Wrote a function nextLargest() that returned the 2nd largest element of the list.\n   Return null if there was no such element. \n  \n   nextLargest([1, 2, 3, 4, 5])== 5 \n   nextLargest([5, 1, 4, 3, 2])== 5 \n   nextLargest([])== null \n   nextLargest([1, 1])== null \n  */ \nconst nextLargest5= (lst)=>{\n  const len = lst.length;\n  if(len === 0) return null;\n  let max = lst[0];\n  let maxIndex = 0;\n  for(let i = 1; i < len; i++){\n    if(lst[i] > max){\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n}\n\n/*\n  You were given a list of integers. \n   Wrote a function nextLargest() that returned the 2nd largest element of the list.\n   Return null if there was no such element. \n  \n   nextLargest([1, 2, 3, 4, 5])== 5 \n   nextLargest([5, 1, 4, 3, 2])== 5 \n   nextLargest([])== null \n   nextLargest([1, 1])== null \n  */ \nconst nextLargest6= (lst)=>{\n  const len = lst.length;\n  if(len === 0) return null;\n  let max = lst[0];\n  "}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = (S) => {\n    const isBored = (S) => {\n      const isBored = (S) => {\n        const isBored = (S) => {\n          const isBored = (S) => {\n            const isBored = (S) => {\n              const isBored = (S) => {\n                const isBored = (S) => {\n                  const isBored = (S) => {\n                    const isBored = (S) => {\n                      const isBored = (S) => {\n                        const isBored = (S) => {\n                          const isBored = (S) => {\n                            const isBored = (S) => {\n                              const isBored = (S) => {\n                                const isBored = (S) => {\n                                  const isBored = (S) => {\n                                    const isBored = (S) => {\n                                      const isBored = (S) => {\n                                        const isBored = (S) => {\n                                          const isBored = (S) => {\n                                            const isBored = (S) => {\n                                              const isBored = (S) => {\n                                                const isBored = (S) => {\n                                                  const isBored = (S) => {\n                                                    const isBored = (S) => {\n                                                      const isBored = (S) => {\n                                                        const isBored = (S) => {\n                                                          const isBored = (S) => {\n                                                           const isBored = (S) => {\n                                                            const isBored = (S) => {\n                                                              const isBored = (S) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nconst isBored = (S) => {\n  const isBored = (S) => {\n    const isBored = (S) => {\n      const isBored = (S) => {\n        const isBored = (S) => {\n          const isBored = (S) => {\n            const isBored = (S) => {\n              const isBored = (S) => {\n                const isBored = (S) => {\n                  const isBored = (S) => {\n                    const isBored = (S) => {\n                      const isBored = (S) => {\n                        const isBored = (S) => {\n                          const isBored = (S) => {\n                            const isBored = (S) => {\n                              const isBored = (S) => {\n                                const isBored = (S) => {\n                                  const isBored = (S) => {\n                                    const isBored = (S) => {\n                                      const isBored = (S) => {\n                                        const isBored = (S) => {\n                                          const isBored = (S) => {\n                                            const isBored = (S) => {\n                                              const isBored = (S) => {\n                                                const isBored = (S) => {\n                                                  const isBored = (S) => {\n                                                    const isBored = (S) => {\n                                                      const isBored = (S) => {\n                                                        const isBored = (S) => {\n                                                          const isBored = (S) => {\n                                                           const isBored = (S) => {\n                                                            const isBored = (S) => {\n                                                              const isBored = (S) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y + z) === x + y + z && x === parseInt(x) && y === parseInt(y) && z === parseInt(z);\n}\n\n/* Create a function that took 2 numbers. \n   Returns true if one of the numbers was equal to the sum of the other, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2) ➞ true\n  anyInt(3, 2) ➞ false\n  anyInt(3, -2) ➞ true\n  anyInt(3.6, -2.2) ➞ false\n  */\nconst anyInt2 = (x, y) => {\n  return (x + y) === x + y && x === parseInt(x) && y === parseInt(y);\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt2(5, 2, 7) ➞ true\n  anyInt2(3, 2, 2) ➞ false\n  anyInt2(3, -2, 1) ➞ true\n  anyInt2(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  return (x + y + z) === x + y + z && x === parseInt(x) && y === parseInt(y) && z === parseInt(z);\n}\n\n/* Create a function that took 2 numbers. \n   Returns true if one of the numbers was equal to the sum of the other, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt3(5, 2, 7) ➞ true\n  anyInt3(3, 2, 2) ➞ false\n  anyInt3(3, -2, 1) ➞ true\n  anyInt3(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y) => {\n  return (x + y) === x + y && x === parseInt(x) && y === parseInt(y);\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt4(5, 2, 7, 3) ➞ true\n  anyInt4(3, 2, 2, 2) ➞ false\n  anyInt4(3, -2, 1, -2) ➞ true\n  anyInt4(3.6, -2.2, 2, -1.2) ➞ false\n  */\nconst anyInt5 = (x, y, z, a) => {\n  return (x + y + z + a) === x + y + z + a && x === parseInt(x) && y === parseInt(y) && z === parseInt(z) && a === parseInt(a);\n}\n\n/* Create a function that took 2 numbers. \n   Returns true if one of the numbers was equal to the sum of the other, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt5(5, 2, 7, 3) ➞ true\n  anyInt5(3, 2, 2, 2) ➞ false\n  anyInt5(3, -2, 1, -2) ➞ true\n  anyInt5(3.6, -2.2, 2, -1.2) ➞ false\n  */\nconst anyInt6 = (x, y) => {\n  return (x + y) === x + y && x === parseInt(x) && y === parseInt(y);\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt6(5, 2, 7, 3) ➞ true\n  anyInt6(3, 2, 2, 2) ➞ false\n  anyInt6(3, -2, 1, -2) ➞ true\n  anyInt6(3.6, -2.2, 2, -1.2) ➞ false\n  */\nconst anyInt7 = (x, y, z) => {\n  return (x + y + z) === x + y + z && x === parseInt(x) && y === parseInt(y) && z === parseInt(z);\n}\n\n/* Create a function that took 2 numbers. \n   Returns true if one of the numbers was equal to the sum of the other, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt7(5, 2, 7) ➞ true\n  anyInt7(3, 2, 2) ➞ false\n  anyInt7(3, -2, 1) ➞ true\n  anyInt7(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt8 = (x, y) => {\n  return (x + y) === x + y && x === parseInt(x) && y === parseInt(y);\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt8(5, 2, 7, 3) ➞ true\n  anyInt8(3, 2, 2, 2) ➞ false\n  anyInt8(3, -2, 1, -2) ➞ true\n  anyInt8(3.6, -2.2, 2, -1.2) �"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = message.indexOf(letter);\n    let vowel = letter.toUpperCase();\n    let vowelIndex = message.indexOf(vowel);\n    if (index > vowelIndex) {\n      encoded += letter;\n    } else {\n      encoded += vowel;\n    }\n  }\n  return encoded;\n};\n\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = message.indexOf(letter);\n    let vowel = letter.toUpperCase();\n    let vowelIndex = message.indexOf(vowel);\n    if (index > vowelIndex) {\n      decoded += letter;\n    } else {\n      decoded += vowel;\n    }\n  }\n  return decoded;\n};\n\nconst encodeDecode = (message) => {\n  let encoded = encode(message);\n  let decoded = decode(encoded);\n  return encoded === decoded;\n};\n\nconst test = () => {\n  let message = 'This is a message';\n  let encoded = encode(message);\n  let decoded = decode(encoded);\n  console.log(encoded === message);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (isPrime(cur)) {\n      sum += cur;\n      if (cur > max) {\n        max = cur;\n      }\n    }\n  }\n  return sum;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key || key.toUpperCase() === key\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key || key.toUpperCase() === key\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key || key.toUpperCase() === key\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key || key.toUpperCase() === key\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key || key.toUpperCase() === key\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key || key.toUpperCase() === key\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\""}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply2 = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply3 = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply4 = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply5 = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply6 = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply7 = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply8 = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply9 = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply10 = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply11 = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply12 = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply13 = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n\nconst multiply14 = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10));\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10));\n  let product = a_digit.reduce((acc, a, i) => acc * b_digit[i], 1);\n  return product;\n};\n"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indiced.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indiced.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indiced.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i] && s[i].toLowerCase()!== s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indiced.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i] && s[i].toLowerCase()!== s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indiced.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i] && s[i].toLowerCase()!== s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indiced.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i] && s[i].toLowerCase()!== s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indiced.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i] && s[i].toLowerCase()!== s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indiced.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i] && s[i].toLowerCase()!== s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indiced.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i] && s[i].toLower"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  const difference = Math.abs(number - Math.floor(number));\n  if (difference === 0) {\n    return number;\n  }\n  if (difference < 0.5) {\n    return Math.floor(number);\n  }\n  return Math.ceil(number);\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number was equidistant\n  from two integers, rounded it away from zero. \n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  const difference = Math.abs(number - Math.floor(number));\n  if (difference === 0) {\n    return number;\n  }\n  if (difference < 0.5) {\n    return Math.floor(number);\n  }\n  return Math.ceil(number);\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number was equidistant\n  from two integers, rounded it away from zero. \n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  const difference = Math.abs(number - Math.floor(number));\n  if (difference === 0) {\n    return number;\n  }\n  if (difference < 0.5) {\n    return Math.floor(number);\n  }\n  return Math.ceil(number);\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number was equidistant\n  from two integers, rounded it away from zero. \n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  const difference = Math.abs(number - Math.floor(number));\n  if (difference === 0) {\n    return number;\n  }\n  if (difference < 0.5) {\n    return Math.floor(number);\n  }\n  return Math.ceil(number);\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number was equidistant\n  from two integers, rounded it away from zero. \n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  const difference = Math.abs(number - Math.floor(number));\n  if (difference === 0) {\n    return number;\n  }\n  if (difference < 0.5) {\n    return Math.floor(number);\n  }\n  return Math.ceil(number);\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number was equidistant\n  from two integers, rounded it away from zero. \n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  const difference = Math.abs(number - Math.floor(number));\n  if (difference === 0) {\n    return number;\n  }\n  if (difference < 0.5) {\n    return Math.floor(number);\n  }\n  return Math.ceil(number);\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number was equidistant\n  from two integers, rounded it away from zero. \n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\""}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile2 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile3 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile4 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile5 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile6 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile7 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile8 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile9 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile10 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile11 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile12 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile13 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile14 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile15 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile16 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile17 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile18 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile19 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile20 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile21 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile22 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile23 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile24 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile25 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile26 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile27 = (n) => {\n  const pile = []\n  for (let i = 1; i"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  Given an array of words, return an array of the words in order of their \n   length.\n  \n  For example:\n  wordsLength([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLength([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsLength = (words) => {\n  return words.map((word) => {\n    return word.length;\n  });\n};\n\n/*\n  Given an array of words, return an array of the words in order of their \n   length.\n  \n  For example:\n  wordsLength([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLength([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsLength = (words) => {\n  return words.map((word) => {\n    return word.length;\n  });\n};\n\n/*\n  Given an array of words, return an array of the words in order of their \n   length.\n  \n  For example:\n  wordsLength([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLength([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsLength = (words) => {\n  return words.map((word) => {\n    return word.length;\n  });\n};\n\n/*\n  Given an array of words, return an array of the words in order of their \n   length.\n  \n  For example:\n  wordsLength([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLength([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsLength = (words) => {\n  return words.map((word) => {\n    return word.length;\n  });\n};\n\n/*\n  Given an array of words, return an array of the words in order of their \n   length.\n  \n  For example:\n  wordsLength([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLength([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsLength = (words) => {\n  return words.map((word) => {\n    return word.length;\n  });\n};\n\n/*\n  Given an array of words, return an array of the words in order of their \n   length.\n  \n  For example:\n  wordsLength([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLength([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsLength = (words) => {\n  return words.map((word) => {\n    return word.length;\n  });\n};\n\n/*\n  Given an array of words, return an array of the words in order of their \n   length.\n  \n  For example:\n  wordsLength([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLength([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsLength = (words) => {\n  return words.map((word) => {\n    return word.length;\n  });\n};\n\n/*\n  Given an array of words, return an array of the words in order of their \n   length.\n  \n  For example:\n  wordsLength([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLength([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsLength = (words) => {\n  return words.map((word) => {\n    return word.length;\n  });\n};\n\n/*\n  Given an array of words, return an array of the words in order of their \n   length.\n  \n  For example:\n  wordsLength([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsLength([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsLength = (words) => {\n  return words.map((word) => {\n    return word.length;\n  });\n};\n\n/*\n  Given an array of words, return an array of the words in order of their \n   length.\n  \n  For example:\n  wordsLength([\"Hi\", \"my\", \"name\", \"is\", \"John"}
{"task_id": "JavaScript/102", "prompt": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = x;\n  let min = y;\n  let mid = (max + min) / 2;\n  let i = 0;\n  while (i < 100) {\n    let num = mid + i;\n    if (num >= min && num <= max) {\n      if (num % 2 === 0) {\n        max = num;\n      } else {\n        min = num;\n      }\n    }\n    i++;\n  }\n  return max;\n};\n\nconsole.log(chooseNum(12, 15));\nconsole.log(chooseNum(13, 12));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  const roundedAvg = Math.round(avg)\n  const binary = roundedAvg.toString(2)\n  return binary\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x; i++) {\n    let digit = x % 10;\n    if (digit % 2 === 0) {\n      result.push(x);\n    }\n    x = Math.floor(x / 10);\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  const reversed = sorted.reverse()\n  const result = []\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]])\n  }\n  return result\n}\n\nconst byLength2 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  const reversed = sorted.reverse()\n  const result = []\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]])\n  }\n  return result\n}\n\nconst byLength3 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  const reversed = sorted.reverse()\n  const result = []\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]])\n  }\n  return result\n}\n\nconst byLength4 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  const reversed = sorted.reverse()\n  const result = []\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]])\n  }\n  return result\n}\n\nconst byLength5 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  const reversed = sorted.reverse()\n  const result = []\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]])\n  }\n  return result\n}\n\nconst byLength6 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  const reversed = sorted.reverse()\n  const result = []\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]])\n  }\n  return result\n}\n\nconst byLength7 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  const reversed = sorted.reverse()\n  const result = []\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]])\n  }\n  return result\n}\n\nconst byLength8 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  const reversed = sorted.reverse()\n  const result = []\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]])\n  }\n  return result\n}\n\nconst byLength9 ="}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f2 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f3 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f4 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f5 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f6 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f7 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f8 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f9 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f10 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f11 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f12 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f13 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f14 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f15 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f16 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f17 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f18 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f19 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f20 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f21 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f22 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f23 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f24 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f25 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f26 = (n) => {\n  const factorials = []\n  "}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconsole.log(evenOddPalindrome(3));\nconsole.log(evenOddPalindrome(12));\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num > 0) {\n      count++;\n    } else {\n      const firstDigit = Math.abs(num);\n      const secondDigit = firstDigit % 10;\n      const thirdDigit = firstDigit % 100;\n      if (secondDigit > 0 || thirdDigit > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([]));\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall8 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = true;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return flag;\n};\n\nconst moveOneBall9 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag ="}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return false;\n  }\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  const lst1Even = lst1.every(x => x % 2 === 0);\n  const lst2Even = lst2.every(x => x % 2 === 0);\n  if (lst1Even && lst2Even) {\n    return true;\n  }\n  return false;\n};\n\nexports.exchange = exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary \n  of the letter with the most repetition and containing the corresponding count. \n  If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length;\n  let result = '';\n  let i = 0;\n  while (i < len) {\n    if (s[i] === c[0]) {\n      i++;\n      continue;\n    }\n    result += s[i];\n    i++;\n  }\n  return [result, result.length === len];\n};\n\nconst isPalindrome = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst test = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n];\n\nconst test2 = [\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n];\n\nconst test3 = [\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n];\n\nconst test4 = [\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n];\n\nconst test5 = [\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n];\n\nconst test6 = [\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n];\n\nconst test7 = [\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n];\n\nconst test8 = [\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n];\n\nconst test9 = [\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n];\n\nconst test10 = [\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n];\n\nconst test11 = [\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n];\n\nconst test12 = [\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n];\n\nconst test13 = [\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n];\n\nconst test14 = [\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n];\n\nconst test15 = [\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],\n  ['abcdef', 'b'],"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    const count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i].charAt(j) % 2 === 1) {\n        count++;\n      }\n    }\n    odd.push(count);\n  }\n  return odd;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0);\n  const minSum = sum;\n  const minSubArray = [];\n  const minSubArraySum = [];\n  for (let i = 0; i < nums.length; i++) {\n    const subArray = nums.slice(i, i + 1);\n    const sum = subArray.reduce((a, b) => a + b, 0);\n    if (sum < minSum) {\n      minSum = sum;\n      minSubArray = subArray;\n      minSubArraySum = [minSum, minSubArray];\n    } else if (sum === minSum) {\n      minSubArraySum.push([minSum, minSubArray]);\n    }\n  }\n  return minSubArraySum;\n};\n\nconst test = [\n  [2, 3, 4, 1, 2, 4],\n  [-1, -2, -3],\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -206, -207, -208, -209, -210, -211, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -228, -229, -230, -231, -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -242, -243, -244, -245, -246, -247, -248, -249, -250, -251, -252, -253, -254, -255, -256, -257, -258, -259, -260, -261, -262, -263, -264, -265, -266, -267, -268, -269, -270, -271, -272, -273, -274, -275, -276, -277, -278, -279, -280, -281, -282, -283, -284, -285, -286, -287, -288, -289, -290, -291, -292, -293, -294, -295, -296, -297, -298, -299, -300, -301, -302, -303, -304, -305, -306, -307, -308, -309, -310, -311, -312, -313, -314, -315, -316, -317, -318, -319, -320, -321, -322, -323, -324, -325, -326, -327, -328, -329, -330, -331, -332, -333, -334, -335, -336, -337, -338, -339, -340, -341, -342, -343, -344, -345, -346, -347, -348, -349, -350, -351, -352, -353, -354, -355, -356, -357, -358, -359, -360, -361, -362, -363, -364, -365, -366, -367, -368, -369, -370, -371, -372, -373, -374, -375, -376, -377, -378, -379, -380, -381, -382, -383, -384, -385, -386, -387, -388, -389, -390, -391, -392, -393, -394, -395, -396, -397, -398, -399, -400, -401, -402, -403, -404, -405, -406, -407,"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += fill(grid, i, j, capacity);\n      }\n    }\n  }\n  return count;\n};\n\nconst fill = (grid, i, j, capacity) => {\n  let count = 0;\n  while (grid[i][j] === 1) {\n    grid[i][j] = 0;\n    count++;\n    if (j + 1 < grid[i].length) {\n      grid[i][j + 1] = 1;\n    }\n    if (i + 1 < grid.length) {\n      grid[i + 1][j] = 1;\n    }\n    if (i + 1 < grid.length && j + 1 < grid[i + 1].length) {\n      grid[i + 1][j + 1] = 1;\n    }\n    if (i + 1 < grid.length && j + 1 < grid[i + 1].length && capacity - count <= 0) {\n      break;\n    }\n  }\n  return count;\n};\n\nconst test = () => {\n  let grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n  let capacity = 1;\n  console.log(fill(grid, 0, 0, capacity));\n  console.log(fill(grid, 0, 1, capacity));\n  console.log(fill(grid, 1, 0, capacity));\n  console.log(fill(grid, 1, 1, capacity));\n  console.log(fill(grid, 2, 0, capacity));\n  console.log(fill(grid, 2, 1, capacity));\n  console.log(fill(grid, 3, 0, capacity));\n  console.log(fill(grid, 3, 1, capacity));\n  console.log(fill(grid, 4, 0, capacity));\n  console.log(fill(grid, 4, 1, capacity));\n  console.log(fill(grid, 5, 0, capacity));\n  console.log(fill(grid, 5, 1, capacity));\n  console.log(fill(grid, 6, 0, capacity));\n  console.log(fill(grid, 6, 1, capacity));\n  console.log(fill(grid, 7, 0, capacity));\n  console.log(fill(grid, 7, 1, capacity));\n  console.log(fill(grid, 8, 0, capacity));\n  console.log(fill(grid, 8, 1, capacity));\n  console.log(fill(grid, 9, 0, capacity));\n  console.log(fill(grid, 9, 1, capacity));\n  console.log(fill(grid, 10, 0, capacity));\n  console.log(fill(grid, 10, 1, capacity));\n  console.log(fill(grid, 11, 0, capacity));\n  console.log(fill(grid, 11, 1, capacity));\n  console.log(fill(grid, 12, 0, capacity));\n  console.log(fill(grid, 12, 1, capacity));\n  console.log(fill(grid, 13, 0, capacity));\n  console.log(fill(grid, 13, 1, capacity));\n  console.log(fill(grid, 14, 0, capacity));\n  console.log(fill(grid, 14, 1, capacity));\n  console.log(fill(grid, 15, 0, capacity));\n  console.log(fill(grid, 15, 1, capacity));\n  console.log(fill(grid, 16, 0, capacity));\n  console.log(fill(grid, 16, 1, capacity));\n  console.log(fill(grid, 17, 0, capacity));\n  console.log(fill(grid, 17, 1, capacity));\n  console.log(fill(grid, 18, 0, capacity));\n  console.log(fill(grid, 18, 1, capacity));\n  console.log(fill(grid, 19, 0, capacity));\n  console.log(fill(grid, 19, 1, capacity));\n  console.log(fill(grid, 20, 0, capacity));\n  console.log(fill(grid, 20, 1, capacity));\n  console.log(fill(grid, 21, 0, capacity));\n  console.log(fill(grid, 21, 1, capacity));\n  console.log(fill(grid, 22, 0, capacity));\n  console.log(fill(grid, 22, 1, capacity));\n  console.log(fill(grid, 23, 0, capacity));\n  console.log(fill(grid, 23, 1, capacity));\n  console.log(fill(grid, 24, 0, capacity));\n  console.log(fill(grid, 24, 1, capacity));\n  console.log(fill(grid, 25, 0, capacity));\n  console.log(fill(grid, 25, 1, capacity));\n  console.log(fill(grid, 26, 0, capacity));\n  console.log(fill(grid, 26, 1, capacity));"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2);\n    const bInt = b.toString(2);\n    const aIntLength = aInt.length;\n    const bIntLength = bInt.length;\n    const aIntLengthDiff = aIntLength - bIntLength;\n    const aIntLengthDiffAbs = Math.abs(aIntLengthDiff);\n    const bIntLengthDiffAbs = Math.abs(bIntLengthDiff);\n    const aIntLengthDiffAbsDiff = Math.abs(aIntLengthDiffAbs - bIntLengthDiffAbs);\n    const aIntLengthDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiff - bIntLengthDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiff = Math.abs(aIntLengthDiffAbsDiffAbs - bIntLengthDiffAbs);\n    if (aIntLengthDiffAbsDiffAbsDiff > 0) {\n      return aIntLengthDiffAbsDiffAbsDiff;\n    } else if (aIntLengthDiffAbsDiffAbsDiff > 0) {\n      return aIntLengthDiffAbsDiffAbsDiff;\n    } else if (aIntLengthDiffAbsDiff > 0) {\n      return aIntLengthDiffAbsDiff;\n    } else if (aIntLengthDiffAbs > 0) {\n      return aIntLengthDiffAbs;\n    } else if (aIntLengthDiff > 0) {\n      return aIntLengthDiff;\n    } else if (aIntLengthDiffAbsDiff > 0) {\n      return aIntLengthDiffAbsDiff;\n    } else if (aIntLengthDiffAbs > 0) {\n      return aIntLengthDiffAbs;\n    } else if (aIntLengthDiff > 0) {\n      return aIntLengthDiff;\n    } else if (aIntLengthDiffAbsDiffAbs > 0) {\n      return aIntLengthDiffAbsDiffAbs;\n    } else if (aIntLengthDiffAbs > 0) {\n      return aIntLengthDiffAbs;\n    } else if (aIntLengthDiff > 0) {\n      return aIntLengthDiff;\n    } else if (aIntLengthDiffAbsDiffAbs > 0) {\n      return aIntLengthDiffAbsDiffAbs;\n    } else if (aIntLengthDiffAbs > 0) {\n      return aIntLengthDiffAbs;\n    } else if (aIntLengthDiff > 0) {\n      return aIntLengthDiff;\n    } else if (aIntLengthDiffAbsDiffAbs > 0) {\n      return aIntLengthDiffAbsDiffAbs;\n    } else if (aIntLengthDiffAbs > 0) {\n      return aIntLengthDiffAbs;\n    } else if (aIntLengthDiff > 0) {\n      return aIntLengthDiff;\n    } else if (aIntLengthDiffAbsDiffAbs > 0) {\n      return aIntLengthDiffAbsDiffAbs;\n    } else if (aIntLengthDiffAbs > 0) {\n      return aIntLengthDiffAbs;\n    } else if (aIntLengthDiff > 0) {\n      return aIntLengthDiff;\n    } else if (aIntLengthDiffAbsDiffAbs > 0) {\n      return aIntLengthDiffAbsDiffAbs;\n    } else if (aIntLengthDiffAbs > 0) {\n      return aIntLengthDiffAbs;\n    } else if (aIntLengthDiff > 0) {\n      return aIntLengthDiff;\n    } else if (aIntLengthDiffAbsDiffAbs > 0) {\n      return aIntLengthDiffAbsDiffAbs;\n    } else if (aIntLengthDiffAbs > 0) {\n      return aIntLengthDiffAbs;\n    } else if (aIntLengthDiff > 0) {\n      return aIntLengthDiff;\n    } else if (aIntLengthDiffAbsDiffAbs > 0) {\n      return aIntLengthDiffAbsDiffAbs;\n    } else if (aIntLengthDiffAbs > 0) {\n      return aIntLengthDiffAbs;\n    } else if (aIntLengthDiff > 0) {\n      return aIntLengthDiff;\n    } else if (aIntLengthDiffAbsDiffAbs > 0) {\n      return aIntLengthDiffAbsDiffAbs;\n    } else if (aIntLengthDiffAbs > 0) {\n      return aIntLengthDiffAbs;\n    } else if (aIntLengthDiff > 0) {\n      return aIntLengthDiff;\n    } else if (aIntLengthDiffAbsDiffAbs > 0) {\n      return aIntLengthDiffAbsDiffAbs;\n    } else if (aIntLengthDiffAbs > 0) {\n      return aIntLengthDiffAbs;\n    } else if (aIntLengthDiff > 0) {\n      return aIntLengthDiff;\n    } else if (aIntLengthDiffAbsDiffAbs > 0) {\n      return aIntLengthDiffAbsDiffAbs;\n    } else if (aIntLengthDiffAbs > 0) {\n      return aIntLengthDiffAbs;\n    } else if (aIntLengthDiff > 0) {\n      return aIntLengthDiff;\n    } else if (aIntLengthDiffAbsDiffAbs > 0) {\n      return aIntLengthDiffAbsDiffAbs;\n    } else if (aIntLengthDiffAbs > 0) {\n      return aIntLengthDiffAbs;\n    } else if (aIntLengthDiff > 0) {\n      return aIntLengthDiff;\n    } else if (aIntLengthDiffAbsDiffAbs > 0) {\n      return aIntLengthDiffAbsDiffAbs;\n    } else if (aIntLengthDiffAbs > 0) {\n      return aIntLengthDiffAbs;\n    } else if (aIntLengthDiff > 0) {\n      return aIntLengthDiff;\n    } else if (aIntLengthDiffAbsDiffAbs > 0) {\n      return aIntLengthDiffAbsDiffAbs;\n    } else if (aIntLengthDiffAbs > 0) {\n      return aIntLengthDiffAbs;\n    } else if (aIntLengthDiff > 0) {\n      return aIntLengthDiff;\n    } else"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const chars = []\n  let i = 0\n  while (i < s.length) {\n    const c = s[i]\n    if (c ==='') {\n      if (chars.length === n) {\n        words.push(chars.join(''))\n        chars = []\n      }\n    } else {\n      chars.push(c)\n    }\n    i++\n  }\n  if (chars.length === n) {\n    words.push(chars.join(''))\n  }\n  return words\n}\n\n/*\nGiven a string s and a number n, you were tasked to implement a function that \nreturns the number of words in the string that contain exactly n letters.\n\nExample:\nselectWords(\"Mary had a little lamb\", 4) ==> 2\nselectWords(\"Mary had a little lamb\", 3) ==> 1\nselectWords(\"simple white space\", 2) ==> 0\nselectWords(\"Hello world\", 4) ==> 1\nselectWords(\"Uncle sam\", 3) ==> 1\n*/\nconst selectWordsCount = (s, n) => {\n  const words = selectWords(s, n)\n  return words.length\n}\n\n/*\nGiven a string s and a number n, you were tasked to implement a function that \nreturns the number of words in the string that contain exactly n letters.\n\nExample:\nselectWords(\"Mary had a little lamb\", 4) ==> 2\nselectWords(\"Mary had a little lamb\", 3) ==> 1\nselectWords(\"simple white space\", 2) ==> 0\nselectWords(\"Hello world\", 4) ==> 1\nselectWords(\"Uncle sam\", 3) ==> 1\n*/\nconst selectWordsCount2 = (s, n) => {\n  const words = []\n  const chars = []\n  let i = 0\n  while (i < s.length) {\n    const c = s[i]\n    if (c ==='') {\n      if (chars.length === n) {\n        words.push(chars.join(''))\n        chars = []\n      }\n    } else {\n      chars.push(c)\n    }\n    i++\n  }\n  if (chars.length === n) {\n    words.push(chars.join(''))\n  }\n  return words.length\n}\n\n/*\nGiven a string s and a number n, you were tasked to implement a function that \nreturns the number of words in the string that contain exactly n letters.\n\nExample:\nselectWords(\"Mary had a little lamb\", 4) ==> 2\nselectWords(\"Mary had a little lamb\", 3) ==> 1\nselectWords(\"simple white space\", 2) ==> 0\nselectWords(\"Hello world\", 4) ==> 1\nselectWords(\"Uncle sam\", 3) ==> 1\n*/\nconst selectWordsCount3 = (s, n) => {\n  const words = []\n  const chars = []\n  let i = 0\n  while (i < s.length) {\n    const c = s[i]\n    if (c ==='') {\n      if (chars.length === n) {\n        words.push(chars.join(''))\n        chars = []\n      }\n    } else {\n      chars.push(c)\n    }\n    i++\n  }\n  if (chars.length === n) {\n    words.push(chars.join(''))\n  }\n  return words.length\n}\n\nconst test = [\n  [\"Mary had a little lamb\", 4],\n  [\"Mary had a little lamb\", 3],\n  [\"simple white space\", 2],\n  [\"Hello world\", 4],\n  [\"Uncle sam\", 3]\n]\n\ntest.forEach(t => {\n  console.log(`${selectWordsCount(t[0], t[1])}`)\n})\n\ntest.forEach(t => {\n  console.log(`${selectWordsCount2(t[0], t[1])}`)\n})\n\ntest.forEach(t => {\n  console.log(`${selectWordsCount3(t[0], t[1])}`)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = '';\n  const closestVowelIndex = 0;\n  const closestVowelDistance = 0;\n  const closestVowelDistanceIndex = 0;\n  const closestVowelDistanceIndex2 = 0;\n  const closestVowelDistanceIndex3 = 0;\n  const closestVowelDistanceIndex4 = 0;\n  const closestVowelDistanceIndex5 = 0;\n  const closestVowelDistanceIndex6 = 0;\n  const closestVowelDistanceIndex7 = 0;\n  const closestVowelDistanceIndex8 = 0;\n  const closestVowelDistanceIndex9 = 0;\n  const closestVowelDistanceIndex10 = 0;\n  const closestVowelDistanceIndex11 = 0;\n  const closestVowelDistanceIndex12 = 0;\n  const closestVowelDistanceIndex13 = 0;\n  const closestVowelDistanceIndex14 = 0;\n  const closestVowelDistanceIndex15 = 0;\n  const closestVowelDistanceIndex16 = 0;\n  const closestVowelDistanceIndex17 = 0;\n  const closestVowelDistanceIndex18 = 0;\n  const closestVowelDistanceIndex19 = 0;\n  const closestVowelDistanceIndex20 = 0;\n  const closestVowelDistanceIndex21 = 0;\n  const closestVowelDistanceIndex22 = 0;\n  const closestVowelDistanceIndex23 = 0;\n  const closestVowelDistanceIndex24 = 0;\n  const closestVowelDistanceIndex25 = 0;\n  const closestVowelDistanceIndex26 = 0;\n  const closestVowelDistanceIndex27 = 0;\n  const closestVowelDistanceIndex28 = 0;\n  const closestVowelDistanceIndex29 = 0;\n  const closestVowelDistanceIndex30 = 0;\n  const closestVowelDistanceIndex31 = 0;\n  const closestVowelDistanceIndex32 = 0;\n  const closestVowelDistanceIndex33 = 0;\n  const closestVowelDistanceIndex34 = 0;\n  const closestVowelDistanceIndex35 = 0;\n  const closestVowelDistanceIndex36 = 0;\n  const closestVowelDistanceIndex37 = 0;\n  const closestVowelDistanceIndex38 = 0;\n  const closestVowelDistanceIndex39 = 0;\n  const closestVowelDistanceIndex40 = 0;\n  const closestVowelDistanceIndex41 = 0;\n  const closestVowelDistanceIndex42 = 0;\n  const closestVowelDistanceIndex43 = 0;\n  const closestVowelDistanceIndex44 = 0;\n  const closestVowelDistanceIndex45 = 0;\n  const closestVowelDistanceIndex46 = 0;\n  const closestVowelDistanceIndex47 = 0;\n  const closestVowelDistanceIndex48 = 0;\n  const closestVowelDistanceIndex49 = 0;\n  const closestVowelDistanceIndex50 = 0;\n  const closestVowelDistanceIndex51 = 0;\n  const closestVowelDistanceIndex52 = 0;\n  const closestVowelDistanceIndex53 = 0;\n  const closestVowelDistanceIndex54 = 0;\n  const closestVowelDistanceIndex55 = 0;\n  const closestVowelDistanceIndex56 = 0;\n  const closestVowelDistanceIndex57 = 0;\n  const closestVowelDistanceIndex58 = 0;\n  const closestVowelDistanceIndex59 = 0;\n  const closestVowelDistanceIndex60 = 0;\n  const closestVowelDistanceIndex61 = 0;\n  const closestVowelDistanceIndex62 = 0;\n  const closestVowelDistanceIndex63 = 0;\n  const closestVowelDistanceIndex64 = 0;\n  const closestVowelDistanceIndex65 = 0;\n  const closestVowelDistanceIndex66 = 0;\n  const closestVowelDistanceIndex67 = 0;\n  const closestVowelDistanceIndex68 = 0;\n  const closestVowelDistanceIndex69 = 0;\n  const closestVowelDistanceIndex70 = 0;\n  const closestVowelDistanceIndex71 = 0;\n  const closestVowelDistanceIndex72 = 0;\n  const closestVowelDistanceIndex73 = 0;\n  const closestVowelDistanceIndex74 = 0;\n  const closestVowelDistanceIndex75 = 0;\n  const closestVowelDistanceIndex76 = 0;\n  const closestVowelDistanceIndex77 = 0;\n  const closestVowelDistanceIndex78 = 0;\n  const closestVowelDistanceIndex79 = 0;\n  const closestVowelDistanceIndex80 = 0;\n  const closestVowelDistanceIndex81 = 0;\n  const closestVowelDistanceIndex82 = 0;\n  const closestVowelDistanceIndex83 = 0;\n  const closestVowelDistanceIndex84 = 0;\n  const closestVowelDistanceIndex85 = 0;\n  const closestVowelDistanceIndex86 = 0;\n  const closestVowelDistanceIndex87 = 0;\n  const closestVowelDistanceIndex88 = 0;\n  const closestVowelDistanceIndex89 = 0;\n  const closestVowelDistanceIndex90 = 0;\n  const closestVowelDistanceIndex91 = 0;\n  const closestVowelDistanceIndex92 = 0;\n  const closestVowelDistanceIndex93 = 0;\n  const closestVowelDistanceIndex94 = 0;\n  const closestVowelDistanceIndex95 = 0;\n  const"}
{"task_id": "JavaScript/119", "prompt": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return 'Yes';\n};\n\nconsole.log(matchParens([')', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr[0];\n  const maxIndex = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [...new Array(k - 1).fill(max), maxIndex];\n};\n\nconst test = (actual, expected) => {\n  const message = (actual, expected) => `Expected: ${expected} but got: ${actual}`;\n  if (actual === expected) {\n    return {\n      pass: true,\n      message\n    };\n  }\n  return {\n    pass: false,\n    message\n  };\n};\n\nconst testMax = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax2 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax3 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax4 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax5 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax6 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax7 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax8 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax9 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax10 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax11 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax12 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax13 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax14 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax15 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax16 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax17 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax18 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax19 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax20 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax21 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax22 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax23 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax24 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum(arr, k);\n  return test(actual, expected);\n};\n\nconst testMax25 = (arr, k) => {\n  const actual = maximum(arr, k);\n  const expected = maximum("}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter((x) => x % 2 === 1);\n  const even = lst.filter((x) => x % 2 === 0);\n  return odd.reduce((acc, x) => acc + x, 0) + even.reduce((acc, x) => acc + x, 0);\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements26 = (arr, k) => {\n  const sum = 0;\n  "}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz2 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz3 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz4 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz5 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz6 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz7 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz8 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz9 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz10 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz11 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz12 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n"}
{"task_id": "JavaScript/124", "prompt": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days[month - 1]) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 3 && year % 4 === 0) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month === 5 || month === 7 || month === 8 || month === 10) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsLength = words.length;\n  const wordsLengthOdd = wordsLength % 2;\n  const wordsLengthEven = wordsLength - wordsLengthOdd;\n  const wordsLengthOddOdd = wordsLengthOdd % 2;\n  const wordsLengthOddEven = wordsLengthOdd - wordsLengthOddOdd;\n  const wordsLengthEvenOdd = wordsLengthEven - wordsLengthOddEven;\n  const wordsLengthOddOddEven = wordsLengthOddOdd - wordsLengthOddEven;\n  const wordsLengthEvenOddOdd = wordsLengthEvenOdd - wordsLengthOddOddEven;\n  const wordsLengthOddOddEvenEven = wordsLengthOddOddEven - wordsLengthEvenOddOdd;\n  const wordsLengthEvenOddOddEvenOdd = wordsLengthEvenOddOdd - wordsLengthOddOddEvenEven;\n  const wordsLengthOddOddEvenEvenOdd = wordsLengthOddOddEvenEvenOdd - wordsLengthEvenOddOddOdd;\n  const wordsLengthEvenOddOddEvenEvenOdd = wordsLengthEvenOddOddOddOdd - wordsLengthOddOddEvenEvenOdd;\n  return [words.slice(0, wordsLengthEven), words.slice(wordsLengthEven, wordsLengthOdd), words.slice(wordsLengthOdd, wordsLengthEvenOdd), words.slice(wordsLengthEvenOdd, wordsLengthOddOdd), words.slice(wordsLengthOddOdd, wordsLengthEvenOddOdd), words.slice(wordsLengthEvenOddOdd, wordsLengthOddOddEven), words.slice(wordsLengthOddOddEven, wordsLengthEvenOddOddEven), words.slice(wordsLengthEvenOddOddEven, wordsLengthOddOddEvenEven), words.slice(wordsLengthOddOddEvenEven, wordsLengthEvenOddOddOdd), words.slice(wordsLengthEvenOddOddOddOdd, wordsLengthOddOddEvenEvenOdd), words.slice(wordsLengthOddOddEvenEvenOdd, wordsLengthEvenOddOddOddOdd)];\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsLength = words.length;\n  const wordsLengthOdd = wordsLength % 2;\n  const wordsLengthEven = wordsLength - wordsLengthOdd;\n  const wordsLengthOddOdd = wordsLengthOdd % 2;\n  const wordsLengthEvenOdd = wordsLengthEven - wordsLengthOddOdd;\n  const wordsLengthOddOddEven = wordsLengthOddOdd - wordsLengthEvenOdd;\n  const wordsLengthEvenOddOdd = wordsLengthEvenOdd - wordsLengthOddOddEven;\n  const wordsLengthOddOddEvenEven = wordsLengthOddOddEven - wordsLengthEvenOddOdd;\n  const wordsLengthEvenOddOddEvenOdd = wordsLengthEvenOddOdd - wordsLengthOddOddEvenEven;\n  const wordsLengthOddOddEvenEvenOdd = wordsLengthOddOddEvenEvenOdd - wordsLengthEvenOddOddOdd;\n  const wordsLengthEvenOddOddEvenEvenOdd = wordsLengthEvenOddOddOddOdd - wordsLengthOddOddEvenEvenOdd;\n  const wordsLengthOddOddEvenEvenEvenOdd = wordsLengthOddOddEvenEvenEvenOdd - wordsLengthEvenOddOddOddOdd;\n  const wordsLengthEvenOddOddEvenEvenEvenOdd = wordsLengthEvenOddOddOddOddOdd - wordsLengthOddOddEvenEvenEvenOdd;\n  return [words.slice(0, wordsLengthEven), words.slice(wordsLengthEven, wordsLengthOdd), words.slice(wordsLengthOdd, wordsLengthEvenOdd), words.slice(wordsLengthEvenOdd, wordsLengthOddOdd), words.slice(wordsLengthOddOdd, wordsLengthEvenOddOdd), words.slice(wordsLengthEvenOddOdd, wordsLengthOddOddEven), words.slice(wordsLengthOddOddEven, wordsLengthEvenOddOddEven), words.slice(wordsLengthEvenOddOddEven, wordsLengthOddOddEvenEven), words.slice(wordsLengthOddOddEvenEven, wordsLengthEvenOddOddOdd), words.slice(wordsLengthEvenOddOddOddOdd, wordsLengthOddOddEvenEvenOdd), words.slice(wordsLengthOddOddEvenEvenOdd, wordsLengthEvenOddOddOddOdd)];\n}\n\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsLength = words.length;\n  const wordsLengthOdd = wordsLength % 2;\n  const wordsLengthEven = wordsLength - wordsLengthOdd;\n  const wordsLengthOddOdd = wordsLengthOdd % 2;\n  const wordsLengthEvenOdd = wordsLengthEven - wordsLengthOddOdd;\n  const wordsLengthOddOddEven = wordsLengthOddOdd - wordsLengthEvenOdd;\n  const wordsLengthEvenOddOdd = wordsLengthEvenOdd - wordsLengthOddOddEven;"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let prev = null\n  while (i < len) {\n    if (lst[i] < lst[j]) {\n      return false\n    }\n    if (lst[i] > lst[j]) {\n      if (prev === null) {\n        return false\n      }\n      if (prev < lst[i]) {\n        return false\n      }\n    }\n    prev = lst[i]\n    i++\n    j++\n  }\n  return true\n}\n\n/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted2 = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let prev = null\n  while (i < len) {\n    if (lst[i] < lst[j]) {\n      return false\n    }\n    if (lst[i] > lst[j]) {\n      if (prev === null) {\n        return false\n      }\n      if (prev < lst[i]) {\n        return false\n      }\n    }\n    prev = lst[i]\n    i++\n    j++\n  }\n  return true\n}\n\nconst isSorted3 = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let prev = null\n  while (i < len) {\n    if (lst[i] < lst[j]) {\n      return false\n    }\n    if (lst[i] > lst[j]) {\n      if (prev === null) {\n        return false\n      }\n      if (prev < lst[i]) {\n        return false\n      }\n    }\n    prev = lst[i]\n    i++\n    j++\n  }\n  return true\n}\n\nconst isSorted4 = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let prev = null\n  while (i < len) {\n    if (lst[i] < lst[j]) {\n      return false\n    }\n    if (lst[i] > lst[j]) {\n      if (prev === null) {\n        return false\n      }\n      if (prev < lst[i]) {\n        return false\n      }\n    }\n    prev = lst[i]\n    i++\n    j++\n  }\n  return true\n}\n\nconst isSorted5 = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let prev = null\n  while (i < len) {\n    if (lst[i] < lst[j]) {\n      return false\n    }\n    if (lst[i] > lst[j]) {\n      if (prev === null) {\n        return false\n      }\n      if (prev < lst[i]) {\n        return false\n      }\n    }\n    prev = lst[i]\n    i++\n    j++\n  }\n  return true\n}\n\nconst isSorted6 = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let prev = null\n  while (i < len) {\n    if (lst[i] < lst[j]) {\n      return false\n    }\n    if (lst[i] > lst[j]) {\n      if (prev === null) {\n        return false\n      }\n      if (prev < lst[i]) {\n        return false\n      }\n    }\n    prev = lst[i]\n    i++\n    j++\n  }\n  return true\n}\n\nconst isSorted7 = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let prev = null\n  while (i < len) {\n    if (lst[i] < lst[j]) {\n      return false\n    }\n    if (lst[i] > lst[j]) {\n      if (prev === null) {\n        return false\n      }\n      if (prev < lst[i]) {\n        return false\n      }\n    }\n    prev = lst[i]\n    i++\n    j++\n  }\n  return true\n}\n\nconst isSorted8 = (lst) => {\n  const len = lst.length\n  let"}
{"task_id": "JavaScript/127", "prompt": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  const isPrime = (n) => {\n    if (n === 1) {\n      return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconsole.log(intersection((1, 2), (2, 3)));\nconsole.log(intersection((-1, 1), (0, 4)));\nconsole.log(intersection((-3, -1), (-5, 5)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (!arr || arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n  }\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      product *= 1;\n    } else if (arr[i] < 0) {\n      product *= -1;\n    }\n  }\n  return sum * product;\n};\n\n/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  if (!arr || arr.length === 0) return null;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n  }\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      product *= 1;\n    } else if (arr[i] < 0) {\n      product *= -1;\n    }\n  }\n  return sum * product;\n};\n\nconst arr = [1, 2, 2, -4];\nconsole.log(prodSigns(arr));\nconsole.log(prodSigns2(arr));\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n).fill(0);\n  const visited = new Array(n).fill(0);\n  const minPath = [];\n  const dpRow = [];\n  const dpCol = [];\n  const dpRowCol = [];\n  const dpRowColCol = [];\n  const dpRowColColCol = [];\n  const dpRowColColColCol = [];\n  const dpRowColColColColCol = [];\n  const dpRowColColColColColCol = [];\n  const dpRowColColColColColColCol = [];\n  const dpRowColColColColColColColCol = [];\n  const dpRowColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColColColColColColColColColColColColCol = [];\n  const dpRowColColColColColColColColColColColColCol"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return [a, b, c];\n};\n\nconst tri2 = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return [a, b, c];\n};\n\nconst tri3 = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return [a, b, c];\n};\n\nconst tri4 = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return [a, b, c];\n};\n\nconst tri5 = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return [a, b, c];\n};\n\nconst tri6 = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return [a, b, c];\n};\n\nconst tri7 = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return [a, b, c];\n};\n\nconst tri8 = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return [a, b, c];\n};\n\nconst tri9 = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return [a, b, c];\n};\n\nconst tri10 = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return [a, b, c];\n};\n\nconst tri11 = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return [a, b, c];\n};\n\nconst tri12 = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return [a, b, c];\n};\n\nconst tri13 = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return [a, b, c];\n};\n\nconst tri14 = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return [a, b, c];\n};\n\nconst tri15 = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a + b;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return [a, b, c];\n};\n\nconst tri16 = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 1; i <= n; i++) {\n    let t = a"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      result *= n % 10;\n    }\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlowFast = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlow = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlowSlow = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlowFastSlow = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlowSlow = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlowFastSlow = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlowSlow = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFastSlowSlowFast = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i ==="}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n  const stack = []\n  const brackets = /\\[|\\]/g\n  const openBrackets = /\\[|\\]/g\n  const closeBrackets = /\\[|\\]/g\n  const openBracketsLength = openBrackets.length\n  const closeBracketsLength = closeBrackets.length\n  const stackLength = stack.length\n  const stackIndex = stack.index\n  const stackIndexMax = stack.length - 1\n  const stackIndexMin = 0\n  const stackIndexMaxMin = stackIndexMax - 1\n  const stackIndexMinMax = stackIndexMax + 1\n  const stackIndexMinMaxMin = stackIndexMaxMin - 1\n  const stackIndexMinMaxMinMax = stackIndexMaxMinMax - 1\n  const stackIndexMinMaxMinMaxMax = stackIndexMaxMinMaxMinMax - 1\n  const stackIndexMinMaxMinMaxMaxMax = stackIndexMaxMinMaxMinMaxMax - 1\n  const stackIndexMinMaxMinMaxMaxMax = stackIndexMaxMinMaxMinMaxMaxMax - 1\n  const stackIndexMinMaxMinMaxMaxMaxMax = stackIndexMaxMinMaxMinMaxMaxMaxMax - 1\n  const stackIndexMinMaxMinMaxMaxMaxMaxMax = stackIndexMaxMinMaxMinMaxMaxMaxMaxMax - 1\n  const stackIndexMinMaxMinMaxMaxMaxMaxMaxMax = stackIndexMaxMinMaxMinMaxMaxMaxMaxMaxMax - 1\n  const stackIndexMinMaxMinMaxMaxMaxMaxMaxMaxMax = stackIndexMaxMinMaxMinMaxMaxMaxMaxMaxMaxMax - 1\n  const stackIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMax = stackIndexMaxMinMaxMinMaxMaxMaxMaxMaxMaxMaxMax - 1\n  const stackIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax = stackIndexMaxMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax - 1\n  const stackIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = stackIndexMaxMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax - 1\n  const stackIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = stackIndexMaxMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax - 1\n  const stackIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = stackIndexMaxMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax - 1\n  const stackIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = stackIndexMaxMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax - 1\n  const stackIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = stackIndexMaxMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax - 1\n  const stackIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax"}
{"task_id": "JavaScript/133", "prompt": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.match(/[a-zA-Z]+/);\n};\n\n/*\n  Create a function that returns true if the last character \n  of a given string is a number and false otherwise. \n  Note: \"number\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsANumber(\"1\") ➞ true\n  checkIfLastCharIsANumber(\"1 2\") ➞ false\n  checkIfLastCharIsANumber(\"1 2 3\") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = lastChar.match(/[0-9]/);\n  return isANumber &&!isANumber.match(/[0-9]+/);\n};\n\n/*\n  Create a function that returns true if the last character \n  of a given string is a letter and false otherwise. \n  Note: \"letter\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.match(/[a-zA-Z]+/);\n};\n\n/*\n  Create a function that returns true if the last character \n  of a given string is a number and false otherwise. \n  Note: \"number\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsANumber(\"1\") ➞ true\n  checkIfLastCharIsANumber(\"1 2\") ➞ false\n  checkIfLastCharIsANumber(\"1 2 3\") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = lastChar.match(/[0-9]/);\n  return isANumber &&!isANumber.match(/[0-9]+/);\n};\n\n/*\n  Create a function that returns true if the last character \n  of a given string is a letter and false otherwise. \n  Note: \"letter\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.match(/[a-zA-Z]+/);\n};\n\n/*\n  Create a function that returns true if the last character \n  of a given string is a number and false otherwise. \n  Note: \"number\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsANumber(\"1\") ➞ true\n  checkIfLastCharIsANumber(\"1 2\") ➞ false\n  checkIfLastCharIsANumber(\"1 2 3\") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = lastChar.match(/[0-9]/);\n  return isANumber &&!isANumber.match(/[0-9]+/);\n};\n\n/*\n  Create a function that returns true if the last character \n  of a given string is a letter and false otherwise. \n  Note: \"letter\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.match(/[a-zA-Z]+/);\n};\n\n/*\n  Create a function that returns true if the last character \n  of a given string is a number and false otherwise. \n  Note: \"number\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsANumber(\"1\") ➞ true\n  checkIfLastCharIsANumber(\"1 2\") ➞ false\n  checkIfLastCharIsANumber(\"1 2 3\") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber ="}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which \n   was not less than the element immediately preceding it. If no such \n   element existed then return-1. The gave array did not contain duplicate \n   values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange2 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange3 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange4 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange5 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange6 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange7 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange8 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange9 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange10 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange11 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange12 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\nconst canArrange13 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 3)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 3)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 3)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 3)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 3)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 3)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b)"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n  if(a===b) return null;\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a === 'number' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  return null;\n}\n\nconst compare = (a, b)=>{\n  if(a===b) return null;\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a === 'number' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  return null;\n}\n\nconst compare2 = (a, b)=>{\n  if(a===b) return null;\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a === 'number' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  return null;\n}\n\nconst compare3 = (a, b)=>{\n  if(a===b) return null;\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a === 'number' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  return null;\n}\n\nconst compare4 = (a, b)=>{\n  if(a===b) return null;\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a === 'number' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  return null;\n}\n\nconst compare5 = (a, b)=>{\n  if(a===b) return null;\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a === 'number' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  return null;\n}\n\nconst compare6 = (a, b)=>{\n  if(a===b) return null;\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a === 'number' && typeof b ==='string'){\n    if(a>b) return a;\n    return b;\n  }\n  return null;\n}\n\nconst compare7 = (a, b)=>{\n  if(a===b) return null;\n  if(typeof a === 'number' && typeof b === 'number'){\n    if(a>b) return a;\n    return b;\n  }\n  if(typeof a ==='string' && typeof b ==='string'){"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\nexport default isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_recursive = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * factorial_recursive(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_iterative = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_recursive_iterative = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_recursive_iterative_2 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_iterative_2 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_recursive_iterative_3 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_iterative_3 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_recursive_iterative_4 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_iterative_4 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_recursive_iterative_5 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_iterative_5 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_recursive_iterative_6 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_iterative_6 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_recursive_iterative_7 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_iterative_7 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getSpaces = (text) => {\n  return text.replace(/\\s+/g, '')\n}\n\nconst getSpacesLength = (text) => {\n  return text.length - getSpaces(text).length\n}\n\nconst getSpacesCount = (text) => {\n  return text.split(' ').length - 1\n}\n\nconst getSpacesCountLength = (text) => {\n  return text.split(' ').length - 1\n}\n\nconst getSpacesCountLength2 = (text) => {\n  return text.split(' ').length - 2\n}\n\nconst getSpacesCountLength3 = (text) => {\n  return text.split(' ').length - 3\n}\n\nconst getSpacesCountLength4 = (text) => {\n  return text.split(' ').length - 4\n}\n\nconst getSpacesCountLength5 = (text) => {\n  return text.split(' ').length - 5\n}\n\nconst getSpacesCountLength6 = (text) => {\n  return text.split(' ').length - 6\n}\n\nconst getSpacesCountLength7 = (text) => {\n  return text.split(' ').length - 7\n}\n\nconst getSpacesCountLength8 = (text) => {\n  return text.split(' ').length - 8\n}\n\nconst getSpacesCountLength9 = (text) => {\n  return text.split(' ').length - 9\n}\n\nconst getSpacesCountLength10 = (text) => {\n  return text.split(' ').length - 10\n}\n\nconst getSpacesCountLength11 = (text) => {\n  return text.split(' ').length - 11\n}\n\nconst getSpacesCountLength12 = (text) => {\n  return text.split(' ').length - 12\n}\n\nconst getSpacesCountLength13 = (text) => {\n  return text.split(' ').length - 13\n}\n\nconst getSpacesCountLength14 = (text) => {\n  return text.split(' ').length - 14\n}\n\nconst getSpacesCountLength15 = (text) => {\n  return text.split(' ').length - 15\n}\n\nconst getSpacesCountLength16 = (text) => {\n  return text.split(' ').length - 16\n}\n\nconst getSpacesCountLength17 = (text) => {\n  return text.split(' ').length - 17\n}\n\nconst getSpacesCountLength18 = (text) => {\n  return text.split(' ').length - 18\n}\n\nconst getSpacesCountLength19 = (text) => {\n  return text.split(' ').length - 19\n}\n\nconst getSpacesCountLength20 = (text) => {\n  return text.split(' ').length - 20\n}\n\nconst getSpacesCountLength21 = (text) => {\n  return text.split(' ').length - 21\n}\n\nconst getSpacesCountLength22 = (text) => {\n  return text.split(' ').length - 22\n}\n\nconst getSpacesCountLength23 = (text) => {\n  return text.split(' ').length - 23\n}\n\nconst getSpacesCountLength24 = (text) => {\n  return text.split(' ').length - 24\n}\n\nconst getSpacesCountLength25 = (text) => {\n  return text.split(' ').length - 25\n}\n\nconst getSpacesCountLength26 = (text) => {\n  return text.split(' ').length - 26\n}\n\nconst getSpacesCountLength27 = (text) => {\n  return text.split(' ').length - 27\n}\n\nconst getSpacesCountLength28 = (text) => {\n  return text.split(' ').length - 28\n}\n\nconst getSpacesCountLength29 = (text) => {\n  return text.split(' ').length - 29\n}\n\nconst getSpacesCountLength30 = (text) => {\n  return text.split(' ').length - 30\n}\n\nconst getSpacesCountLength31 = (text) => {\n  return text.split(' ').length - 31\n}\n\nconst getSpacesCountLength32 = (text) => {\n  return text.split(' ').length - 32\n}\n\nconst getSpacesCountLength33 = (text) => {\n  return text.split(' ').length - 33\n}\n\nconst getSpacesCountLength34 = (text) => {\n  return text.split(' ').length - 34\n}\n\nconst getSpacesCountLength35 = (text) => {\n  return text.split(' ').length - 35\n}\n\nconst getSpacesCountLength36 = (text) => {\n  return text.split(' ').length - 36\n}\n\nconst getSpacesCountLength37 = (text) => {\n  return text.split(' ').length - 37\n}\n\nconst getSpacesCountLength38 = (text) => {\n  return text.split(' ').length - 38\n}\n\nconst getSpacesCountLength39 = (text) => {\n  return text.split(' ').length - 39\n}\n\nconst getSpacesCountLength40 = (text) => {\n  return text.split(' ').length - 40\n}\n\nconst getSpacesCountLength41 = (text) => {\n  return text.split(' ').length - 41\n}\n\nconst getSpacesCountLength42 = (text) => {\n  return text.split(' ').length - 42\n}\n\nconst getSpacesCountLength43 = (text) => {\n  return text.split(' ').length - 43\n}\n\nconst getSpacesCountLength44 = (text) => {\n  return text.split(' ').length - 44\n}\n\nconst getSpacesCountLength45 = (text) => {\n  return text.split(' ').length - 45\n}\n\nconst getSpacesCountLength46 = (text)"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.length > 3) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === -1) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 0) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 1) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 2) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 3) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 4) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 5) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 6) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 7) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 8) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 9) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 10) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 11) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 12) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 13) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 14) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 15) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 16) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 17) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 18) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 19) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 20) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 21) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 22) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 23) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 24) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 25) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 26) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 27) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 28) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 29) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 30) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 31) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 32) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 33) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 34) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 35) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 36) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 37) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 38) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 39) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 40) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 41) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 42) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 43) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 44) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 45) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 46) {\n    return 'No'\n  }\n  if (file_name.indexOf('.') === 47) {\n    return 'No'\n"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubesAndSqrt = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubesAndSqrtAndSqrt = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = ["}
{"task_id": "JavaScript/143", "prompt": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const wordsLength = words.length\n  const primeNumbers = []\n  for (let i = 2; i < wordsLength; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i)\n    }\n  }\n  const primeNumbersLength = primeNumbers.length\n  const newSentence = []\n  for (let i = 0; i < wordsLength; i++) {\n    const index = primeNumbers.indexOf(i)\n    if (index === -1) {\n      newSentence.push(words[i])\n    } else {\n      newSentence.push(words[index])\n    }\n  }\n  return newSentence.join(' ')\n}\n\nconst isPrime = (number) => {\n  let i = 2\n  while (i < number) {\n    if (number % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n  if(x === n) return true\n  if(x.length === 1 && n.length === 1) return x === n\n  if(x.length === 1) return n === 1\n  if(n.length === 1) return x === 1\n  if(x === \"0\") return false\n  if(n === \"0\") return false\n  if(x === \"1\") return true\n  if(n === \"1\") return true\n  if(x === \"-1\") return false\n  if(n === \"-1\") return false\n  if(x === \"-2\") return false\n  if(n === \"-2\") return false\n  if(x === \"-3\") return false\n  if(n === \"-3\") return false\n  if(x === \"-4\") return false\n  if(n === \"-4\") return false\n  if(x === \"-5\") return false\n  if(n === \"-5\") return false\n  if(x === \"-6\") return false\n  if(n === \"-6\") return false\n  if(x === \"-7\") return false\n  if(n === \"-7\") return false\n  if(x === \"-8\") return false\n  if(n === \"-8\") return false\n  if(x === \"-9\") return false\n  if(n === \"-9\") return false\n  if(x === \"-10\") return false\n  if(n === \"-10\") return false\n  if(x === \"-11\") return false\n  if(n === \"-11\") return false\n  if(x === \"-12\") return false\n  if(n === \"-12\") return false\n  if(x === \"-13\") return false\n  if(n === \"-13\") return false\n  if(x === \"-14\") return false\n  if(n === \"-14\") return false\n  if(x === \"-15\") return false\n  if(n === \"-15\") return false\n  if(x === \"-16\") return false\n  if(n === \"-16\") return false\n  if(x === \"-17\") return false\n  if(n === \"-17\") return false\n  if(x === \"-18\") return false\n  if(n === \"-18\") return false\n  if(x === \"-19\") return false\n  if(n === \"-19\") return false\n  if(x === \"-20\") return false\n  if(n === \"-20\") return false\n  if(x === \"-21\") return false\n  if(n === \"-21\") return false\n  if(x === \"-22\") return false\n  if(n === \"-22\") return false\n  if(x === \"-23\") return false\n  if(n === \"-23\") return false\n  if(x === \"-24\") return false\n  if(n === \"-24\") return false\n  if(x === \"-25\") return false\n  if(n === \"-25\") return false\n  if(x === \"-26\") return false\n  if(n === \"-26\") return false\n  if(x === \"-27\") return false\n  if(n === \"-27\") return false\n  if(x === \"-28\") return false\n  if(n === \"-28\") return false\n  if(x === \"-29\") return false\n  if(n === \"-29\") return false\n  if(x === \"-30\") return false\n  if(n === \"-30\") return false\n  if(x === \"-31\") return false\n  if(n === \"-31\") return false\n  if(x === \"-32\") return false\n  if(n === \"-32\") return false\n  if(x === \"-33\") return false\n  if(n === \"-33\") return false\n  if(x === \"-34\") return false\n  if(n === \"-34\") return false\n  if(x === \"-35\") return false\n  if(n === \"-35\") return false\n  if(x === \"-36\") return false\n  if(n === \"-36\") return false\n  if(x === \"-37\") return false\n  if(n === \"-37\") return false\n  if(x === \"-38\") return false\n  if(n === \"-38\") return false\n  if(x === \"-39\") return false\n  if(n === \"-39\") return false\n  if(x === \"-40\") return false\n  if(n === \"-40\") return false\n  if(x === \"-41\") return false\n  if(n === \"-41\") return false\n  if(x === \"-42\") return false\n  if(n === \"-42\") return false\n  if(x === \"-43\") return false\n  if(n === \"-43\") return false\n  if(x === \"-44\") return false\n  if(n === \"-44\") return false\n  if(x === \"-45\") return false\n  if(n === \"-45\") return false\n  if(x === \"-46\") return false\n  if(n === \"-46\") return false\n  if(x === \"-47\") return false\n  if(n === \"-47\") return false\n  if(x === \"-48\") return false\n  if(n === \"-48\") return false\n  if(x === \"-49\") return false\n  if(n === \"-49\") return false\n  if(x === \"-50\") return false\n  if(n === \"-50\") return false\n  if(x === \"-51\") return false\n  if(n === \"-51\") return false\n  if(x === \"-52\") return false\n  if(n === \"-52\") return false\n  if(x === \"-53\") return false\n  if(n === \"-53\") return false\n  if(x === \"-54\") return false\n  if(n === \"-54\") return false\n  if(x === \"-55\") return false\n  if(n === \"-55\") return false\n  if(x === \"-56\") return false\n  if(n === \"-56\") return false\n  if(x === \"-57\") return false\n  if(n === \"-57\") return false\n  if("}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which sorted the given list of strings \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which sorted the given list of strings \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which sorted the given list of strings \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which sorted the given list of strings \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which sorted the given list of strings \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which sorted the given list of strings \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which sorted the given list of strings \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const diff = a - b;\n    if (diff === 0) {\n      return a < b? -1 : 1;\n    }\n    return diff;\n  });\n  return sorted;\n};\n\n/*\n  Write a function which sorted the given list of strings \n   in ascending order according to the sum of"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter((n) => n > 10 && (n % 2 === 1 || n % 3 === 1 || n % 5 === 1 || n % 7 === 1 || n % 9 === 1));\n  return arr.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from({length: n}, (x, i) => i*i-i+1);\n  const triples = a.reduce((acc, x, i) => {\n    const j = i + 1;\n    const k = j + 1;\n    if (x + a[j] + a[k] === 3 * (x + a[j] + a[k])) {\n      acc.push([x, a[i], a[j]]);\n    }\n    return acc;\n  }, []);\n  return triples.length;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  const planet1Orbit = planet1Index >= 0? planets.slice(0, planet1Index + 1) : [];\n  const planet2Orbit = planet2Index >= 0? planets.slice(0, planet2Index + 1) : [];\n  const planet1OrbitLength = planet1Orbit.length;\n  const planet2OrbitLength = planet2Orbit.length;\n  const planet1OrbitIndex = planet1Orbit.indexOf(planet1);\n  const planet2OrbitIndex = planet2Orbit.indexOf(planet2);\n  const planet1OrbitLength = planet1Orbit.length;\n  const planet2OrbitLength = planet2Orbit.length;\n  const planet1OrbitLength = planet1Orbit.length;\n  const planet2OrbitLength = planet2Orbit.length;\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.slice(0, planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(0, planet2OrbitLength);\n  const planet1Orbit = planet1Orbit."}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  let i = 0;\n  while (i < len) {\n    const j = i + 1;\n    while (j < len && lst[i].length === lst[j].length) {\n      j++;\n    }\n    sorted.push(lst.slice(i, j));\n    i = j;\n  }\n  return sorted;\n};\n\nconst list_sort = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  let i = 0;\n  while (i < len) {\n    const j = i + 1;\n    while (j < len && lst[i].length === lst[j].length) {\n      j++;\n    }\n    sorted.push(lst.slice(i, j));\n    i = j;\n  }\n  return sorted;\n};\n\nconst list_sort_2 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  let i = 0;\n  while (i < len) {\n    const j = i + 1;\n    while (j < len && lst[i].length === lst[j].length) {\n      j++;\n    }\n    sorted.push(lst.slice(i, j));\n    i = j;\n  }\n  return sorted;\n};\n\nconst list_sort_3 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  let i = 0;\n  while (i < len) {\n    const j = i + 1;\n    while (j < len && lst[i].length === lst[j].length) {\n      j++;\n    }\n    sorted.push(lst.slice(i, j));\n    i = j;\n  }\n  return sorted;\n};\n\nconst list_sort_4 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  let i = 0;\n  while (i < len) {\n    const j = i + 1;\n    while (j < len && lst[i].length === lst[j].length) {\n      j++;\n    }\n    sorted.push(lst.slice(i, j));\n    i = j;\n  }\n  return sorted;\n};\n\nconst list_sort_5 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  let i = 0;\n  while (i < len) {\n    const j = i + 1;\n    while (j < len && lst[i].length === lst[j].length) {\n      j++;\n    }\n    sorted.push(lst.slice(i, j));\n    i = j;\n  }\n  return sorted;\n};\n\nconst list_sort_6 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  let i = 0;\n  while (i < len) {\n    const j = i + 1;\n    while (j < len && lst[i].length === lst[j].length) {\n      j++;\n    }\n    sorted.push(lst.slice(i, j));\n    i = j;\n  }\n  return sorted;\n};\n\nconst list_sort_7 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  let i = 0;\n  while (i < len) {\n    const j = i + 1;\n    while (j < len && lst[i].length === lst[j].length) {\n      j++;\n    }\n    sorted.push(lst.slice(i, j));\n    i = j;\n  }\n  return sorted;\n};\n\nconst list_sort_8 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  let i = 0;\n  while (i < len) {\n    const j = i + 1;\n    while (j < len && lst[i].length === lst[j].length) {\n      j++;\n    }\n    sorted.push(lst.slice(i, j));\n    i = j;\n  }\n  return sorted;\n};\n\nconst list_sort_9 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  let i = 0;\n  while (i < len) {\n    const j = i + 1;\n    while (j < len && lst[i].length === lst[j].length) {\n      j++;\n    }\n    sorted.push(lst.slice(i, j));\n    i = j;\n  }\n  return sorted;\n};\n\nconst list_sort_10 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  let i = 0;\n  while (i < len) {\n    const j = i + 1;\n    while (j < len && lst[i].length === lst[j].length) {\n      j++;\n    }\n    sorted.push(lst.slice(i, j));\n    i = j;\n  }\n  return sorted;\n};\n\nconst list_sort_11 = (lst) => {\n  const len = lst.length;\n  const sorted = [];\n  let i = 0;\n  while"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n  if(lst.length === 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    let num = lst[i];\n    if(num > 0 && num % 2 === 1){\n      sum += num * num;\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 2+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifferenceEven= (lst)=>{\n  if(lst.length === 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    let num = lst[i];\n    if(num > 0 && num % 2 === 0){\n      sum += num * num;\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 2+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifferenceEven2= (lst)=>{\n  if(lst.length === 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    let num = lst[i];\n    if(num > 0 && num % 2 === 0){\n      sum += num * num;\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 2+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifferenceEven3= (lst)=>{\n  if(lst.length === 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    let num = lst[i];\n    if(num > 0 && num % 2 === 0){\n      sum += num * num;\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 2+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifferenceEven4= (lst)=>{\n  if(lst.length === 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    let num = lst[i];\n    if(num > 0 && num % 2 === 0){\n      sum += num * num;\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 2+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifferenceEven5= (lst)=>{\n  if(lst.length === 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    let num = lst[i];\n    if(num > 0 && num % 2 === 0){\n      sum += num * num;\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 2+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifferenceEven6= (lst)=>{\n  if(lst.length === 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    let num = lst[i];\n    if(num > 0 && num"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    const diff = score - guess\n    if (diff === 0) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(diff))\n    }\n  }\n  return result\n}\n\nmodule.exports = compare\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.replace(/^[a-z]/, '').length;\n    const sm = ext.replace(/[A-Z]/, '').length;\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[extensions.indexOf(extensions.filter(ext => strength === ext.length)[0])];\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.replace(/^[a-z]/, '').length;\n    const sm = ext.replace(/[A-Z]/, '').length;\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[extensions.indexOf(extensions.filter(ext => strength === ext.length)[0])];\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.replace(/^[a-z]/, '').length;\n    const sm = ext.replace(/[A-Z]/, '').length;\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[extensions.indexOf(extensions.filter(ext => strength === ext.length)[0])];\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.replace(/^[a-z]/, '').length;\n    const sm = ext.replace(/[A-Z]/, '').length;\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[extensions.indexOf(extensions.filter(ext => strength === ext.length)[0])];\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.replace(/^[a-z]/, '').length;\n    const sm = ext.replace(/[A-Z]/, '').length;\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[extensions.indexOf(extensions.filter(ext => strength === ext.length)[0])];\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.replace(/^[a-z]/, '').length;\n    const sm = ext.replace(/[A-Z]/, '').length;\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[extensions.indexOf(extensions.filter(ext => strength === ext.length)[0])];\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.replace(/^[a-z]/, '').length;\n    const sm = ext.replace(/[A-Z]/, '').length;\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[extensions.indexOf(extensions.filter(ext => strength === ext.length)[0])];\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.replace(/^[a-z]/, '').length;\n    const sm = ext.replace(/[A-Z]/, '').length;\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[extensions.indexOf(extensions.filter(ext => strength === ext.length)[0])];\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.replace(/^[a-z]/, '').length;\n    const sm = ext.replace(/[A-Z]/, '').length;\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[extensions.indexOf(extensions.filter(ext => strength === ext.length)[0])];\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.replace(/^[a-z]/, '').length;\n    const sm = ext.replace(/[A-Z]/, '').length;\n    return acc + (cap - sm);\n  }, -1);\n  return class_name + '.' + extensions[extensions.indexOf(extensions.filter(ext => strength === ext.length)[0])];\n};\n\nconst"}
{"task_id": "JavaScript/154", "prompt": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n  let a_length = a.length;\n  let b_length = b.length;\n  let a_substring = a.substring(0, a_length - b_length);\n  let b_substring = b.substring(0, b_length - a_length);\n  if(a_substring === b_substring) return true;\n  for(let i = 0; i < a_length - b_length + 1; i++){\n    let a_rotation = a.substring(i, i + b_length);\n    let b_rotation = b.substring(i, i + a_length);\n    if(a_rotation === b_rotation) return true;\n  }\n  return false;\n}\n\n/*\n  * Given a string, find the longest palindromic substring in it.\n  *\n  * For example, given the string \"code\",\n  * the longest palindromic substring is \"ode\",\n  * which the length is 3.\n  *\n  * Note:\n  * The input string may contain blanks,\n  * and the maximum length of the returned substring is 50.\n  *\n  * Solution:\n  * 1. Use a hashmap to store the longest substring.\n  * 2. Use a hashmap to store the longest substring length.\n  * 3. Use a hashmap to store the longest substring.\n  * 4. Use a hashmap to store the longest substring length.\n  * 5. Use a hashmap to store the longest substring.\n  * 6. Use a hashmap to store the longest substring length.\n  * 7. Use a hashmap to store the longest substring.\n  * 8. Use a hashmap to store the longest substring length.\n  * 9. Use a hashmap to store the longest substring.\n  * 10. Use a hashmap to store the longest substring length.\n  * 11. Use a hashmap to store the longest substring.\n  * 12. Use a hashmap to store the longest substring length.\n  * 13. Use a hashmap to store the longest substring.\n  * 14. Use a hashmap to store the longest substring length.\n  * 15. Use a hashmap to store the longest substring.\n  * 16. Use a hashmap to store the longest substring length.\n  * 17. Use a hashmap to store the longest substring.\n  * 18. Use a hashmap to store the longest substring length.\n  * 19. Use a hashmap to store the longest substring.\n  * 20. Use a hashmap to store the longest substring length.\n  * 21. Use a hashmap to store the longest substring.\n  * 22. Use a hashmap to store the longest substring length.\n  * 23. Use a hashmap to store the longest substring.\n  * 24. Use a hashmap to store the longest substring length.\n  * 25. Use a hashmap to store the longest substring.\n  * 26. Use a hashmap to store the longest substring length.\n  * 27. Use a hashmap to store the longest substring.\n  * 28. Use a hashmap to store the longest substring length.\n  * 29. Use a hashmap to store the longest substring.\n  * 30. Use a hashmap to store the longest substring length.\n  * 31. Use a hashmap to store the longest substring.\n  * 32. Use a hashmap to store the longest substring length.\n  * 33. Use a hashmap to store the longest substring.\n  * 34. Use a hashmap to store the longest substring length.\n  * 35. Use a hashmap to store the longest substring.\n  * 36. Use a hashmap to store the longest substring length.\n  * 37. Use a hashmap to store the longest substring.\n  * 38. Use a hashmap to store the longest substring length.\n  * 39. Use a hashmap to store the longest substring.\n  * 40. Use a hashmap to store the longest substring length.\n  * 41. Use a hashmap to store the longest substring.\n  * 42. Use a hashmap to store the longest substring length.\n  * 43. Use a hashmap to store the longest substring.\n  * 44. Use a hashmap to store the longest substring length.\n  * 45. Use a hashmap to store the longest substring.\n  * 46. Use a hashmap to store the longest substring length.\n  * 47. Use a hashmap to store the longest substring.\n  * 48. Use a hashmap to store the longest substring length.\n  * 49. Use a hashmap to store the longest substring.\n  * 50. Use a hashmap to store the longest substring length.\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num % 2 === 0) {\n      count++;\n    }\n    num = num / 2;\n  }\n  return [count, num];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(1234));\nconsole.log(evenOddCount(12345));\nconsole.log(evenOddCount(123456));\nconsole.log(evenOddCount(1234567));\nconsole.log(evenOddCount(12345678));\nconsole.log(evenOddCount(123456789));\nconsole.log(evenOddCount(1234567890));\nconsole.log(evenOddCount(12345678901));\nconsole.log(evenOddCount(123456789012));\nconsole.log(evenOddCount(1234567890123));\nconsole.log(evenOddCount(12345678901234));\nconsole.log(evenOddCount(123456789012345));\nconsole.log(evenOddCount(1234567890123456));\nconsole.log(evenOddCount(12345678901234567));\nconsole.log(evenOddCount(123456789012345678));\nconsole.log(evenOddCount(1234567890123456789));\nconsole.log(evenOddCount(12345678901234567890));\nconsole.log(evenOddCount(123456789012345678901));\nconsole.log(evenOddCount(1234567890123456789012));\nconsole.log(evenOddCount(12345678901234567890123));\nconsole.log(evenOddCount(123456789012345678901234));\nconsole.log(evenOddCount(1234567890123456789012345));\nconsole.log(evenOddCount(12345678901234567890123456));\nconsole.log(evenOddCount(123456789012345678901234567));\nconsole.log(evenOddCount(1234567890123456789012345678));\nconsole.log(evenOddCount(12345678901234567890123456789));\nconsole.log(evenOddCount(123456789012345678901234567890));\nconsole.log(evenOddCount(1234567890123456789012345678901));\nconsole.log(evenOddCount(12345678901234567890123456789012));\nconsole.log(evenOddCount(123456789012345678901234567890123));\nconsole.log(evenOddCount(1234567890123456789012345678901234));\nconsole.log(evenOddCount(12345678901234567890123456789012345));\nconsole.log(evenOddCount(123456789012345678901234567890123456));\nconsole.log(evenOddCount(1234567890123456789012345678901234567));\nconsole.log(evenOddCount(12345678901234567890123456789012345678));\nconsole.log(evenOddCount(123456789012345678901234567890123456789));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890123));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901234));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012345));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890123456));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901234567));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012345678));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890123456789));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901234567890));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012345678901));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890123456789012));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901234567890123));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012345678901234));\nconsole.log(evenOddCount(1234567890123456789012345678901234567890123456789012345));\nconsole.log(evenOddCount(12345678901234567890123456789012345678901234567890123456));\nconsole.log(evenOddCount(123456789012345678901234567890123456789012345678901"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number >= roman[i]) {\n      result += roman[i]\n      number -= roman[i]\n    } else {\n      result += roman[i] + roman[i + 1]\n      number -= roman[i + 1]\n    }\n    i += 2\n  }\n  return result.toLowerCase()\n}\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let roman = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number >= roman[i]) {\n      result += roman[i].toUpperCase()\n      number -= roman[i]\n    } else {\n      result += roman[i] + roman[i + 1].toUpperCase()\n      number -= roman[i + 1]\n    }\n    i += 2\n  }\n  return result\n}\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in mixed case. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMixedRoman(19) == 'XIX'\n  >>> intToMixedRoman(152) == 'CLII'\n  >>> intToMixedRoman(426) == 'CDXXVI'\n  */\nconst intToMixedRoman = (number) => {\n  let roman = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number >= roman[i]) {\n      result += roman[i].toUpperCase()\n      number -= roman[i]\n    } else {\n      result += roman[i] + roman[i + 1].toUpperCase()\n      number -= roman[i + 1]\n    }\n    i += 2\n  }\n  return result\n}\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let roman = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number >= roman[i]) {\n      result += roman[i].toLowerCase()\n      number -= roman[i]\n    } else {\n      result += roman[i] + roman[i + 1].toLowerCase()\n      number -= roman[i + 1]\n    }\n    i += 2\n  }\n  return result\n}\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  let roman = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number >= roman[i]) {\n      result += roman[i].toUpperCase()\n      number -= roman[i]\n    } else {\n      result += roman[i] + roman[i + 1].toUpperCase()\n      number -= roman[i + 1]\n    }\n    i += 2\n  }\n  return result\n}\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in mixed case. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMixedRoman(19) == 'XIX'\n  >>> intToMixedRoman(152) == 'CLII'\n  >>> intToMixedRoman(426) == 'CDXXVI'\n  */\nconst intToMixedRoman = (number) => {\n  let roman = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number >= roman[i]) {\n      result += roman[i].toUpperCase()\n      number -= roman[i]\n    } else {\n"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(a - c) && Math.abs(b - c) <= Math.abs(a - c))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(a - c) && Math.abs(b - c) <= Math.abs(a - c))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(a - c) && Math.abs(b - c) <= Math.abs(a - c))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(a - c) && Math.abs(b - c) <= Math.abs(a - c))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(a - c) && Math.abs(b - c) <= Math.abs(a - c))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(a - c) && Math.abs(b - c) <= Math.abs(a - c))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(a - c) && Math.abs(b - c) <= Math.abs(a - c))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(a - c) && Math.abs(b - c) <= Math.abs(a - c))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(a - c) && Math.abs(b - c) <= Math.abs(a - c))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle10"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n  const max = words.reduce((a,b)=>{\n    if(a.length>b.length){\n      return b\n    }\n    return a\n  })\n  return max\n}\n\nconsole.log(findMax([\"name\",\" of\",\" string\"]))\nconsole.log(findMax([\"name\",\" enam\",\" game\"]))\nconsole.log(findMax([\"aaaaaaa\",\" bb\",\" cc\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else {\n    return [number, remaining];\n  }\n};\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test27 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let product = 1\n  let difference = 0\n  let exponent = 1\n  let resultValue = 0\n  while (i < operatorLength && j < operandLength) {\n    if (operator[i] === '+') {\n      sum = operand[j]\n      j += 1\n    } else if (operator[i] === '-') {\n      difference = operand[j]\n      j += 1\n    } else if (operator[i] === '*') {\n      product = operand[j]\n      j += 1\n    } else if (operator[i] === '//') {\n      exponent = operand[j]\n      j += 1\n    } else if (operator[i] === '**') {\n      exponent = operand[j]\n      j += 1\n    }\n    result.push(sum)\n    result.push(product)\n    result.push(difference)\n    result.push(exponent)\n    i += 1\n  }\n  while (i < operatorLength) {\n    result.push(operand[j])\n    j += 1\n    i += 1\n  }\n  while (j < operandLength) {\n    result.push(operand[j])\n    j += 1\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let product = 1\n  let difference = 0\n  let exponent = 1\n  let resultValue = 0\n  while (i < operatorLength && j < operandLength) {\n    if (operator[i] === '+') {\n      sum = operand[j]\n      j += 1\n    } else if (operator[i] === '-') {\n      difference = operand[j]\n      j += 1\n    } else if (operator[i] === '*') {\n      product = operand[j]\n      j += 1\n    } else if (operator[i] === '//') {\n      exponent = operand[j]\n      j += 1\n    } else if (operator[i] === '**') {\n      exponent = operand[j]\n      j += 1\n    }\n    result.push(sum)\n    result.push(product)\n    result.push(difference)\n    result.push(exponent)\n    i += 1\n  }\n  while (i < operatorLength) {\n    result.push(operand[j])\n    j += 1\n    i += 1\n  }\n  while (j < operandLength) {\n    result.push(operand[j])\n    j += 1\n  }\n  return result\n}\n\nconst test = [\n  ['+', '*', '-'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '4', '5'],\n  ['2', '3', '"}
{"task_id": "JavaScript/161", "prompt": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i].toUpperCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a9b4d8c9f8b5b7f3b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7f4b8f7"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers20 ="}
