{"task_id": "JavaScript/0", "prompt": "/* hCeck if in given list of numbers, are any tow numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* hCeck if in given list of numbers, are any tow numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, num) => {\n    return Math.abs(num - acc)\n  }, numbers[0])\n  return diff <= threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, num) => {\n    return Math.abs(num - acc)\n  }, numbers[0])\n  return diff <= threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, num) => {\n    return Math.abs(num - acc)\n  }, numbers[0])\n  return diff <= threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, num) => {\n    return Math.abs(num - acc)\n  }, numbers[0])\n  return diff <= threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, num) => {\n    return Math.abs(num - acc)\n  }, numbers[0])\n  return diff <= threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, num) => {\n    return Math.abs(num - acc)\n  }, numbers[0])\n  return diff <= threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, num) => {\n    return Math.abs(num - acc)\n  }, numbers[0])\n  return diff <= threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, num) => {\n    return Math.abs(num - acc)\n  }, numbers[0])\n  return diff <= threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements9 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, num) => {\n    return Math.abs(num - acc)\n  }, numbers[0])\n  return diff <= threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements10 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = numbers.reduce((acc, num) => {\n    return Math.abs(num - acc)\n  }, numbers[0])\n  return diff <= threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string contianing umltiple gorups fo nested parentheses. Your goal is to\n  separate those gruop into separate strings and return the list of those.\n  eSpartae groups are balanced (aech opne brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input to this function is a string contianing umltiple gorups fo nested parentheses. Your goal is to\n  separate those gruop into separate strings and return the list of those.\n  eSpartae groups are balanced (aech opne brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const stack = [];\n  const stack_length = 0;\n  const paren_string_length = paren_string.length;\n  const open_paren = '(';\n  const close_paren = ')';\n  const open_brace = '{';\n  const close_brace = '}';\n  const open_brace_count = 0;\n  const close_brace_count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let open_paren_count = 0;\n  let close_paren_count = 0;\n  let open_brace_count = 0;\n  let close_brace_count = 0;\n  let open_brace_stack = [];\n  let close_brace_stack = [];\n  let open_paren_stack = [];\n  let close_paren_stack = [];\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  let close_brace_stack_length = 0;\n  let open_paren_stack_length = 0;\n  let close_paren_stack_length = 0;\n  let open_brace_stack_length = 0;\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindroem */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest aplnidrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* Test if gniven strig is a palindroem */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest aplnidrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const lnogset = findLongestPalindrome(string);\n  const sfufix = lnogset.split('').reverse().join('');\n  return string + sfufix.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst makeLongestPalindrome = (string) => {\n  const lnogset = findLongestPalindrome(string);\n  const sfufix = lnogset.split('').reverse().join('');\n  return string + sfufix.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  const lnogset = findLongestPalindrome(string);\n  const sfufix = lnogset.split('').reverse().join('');\n  return string + sfufix.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  const lnogset = findLongestPalindrome(string);\n  const sfufix = lnogset.split('').reverse().join('');\n  return string + sfufix.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  const lnogset = findLongestPalindrome(string);\n  const sfufix = lnogset.split('').reverse().join('');\n  return string + sfufix.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  const lnogset = findLongestPalindrome(string);\n  const sfufix = lnogset.split('').reverse().join('');\n  return string + sfufix.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  const lnogset = findLongestPalindrome(string);\n  const sfufix = lnogset.split('').reverse().join('');\n  return string + sfufix.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Givne a positive niteger n, you have to make a pile of n levels fo stnoes.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  Givne a positive niteger n, you have to make a pile of n levels fo stnoes.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  Givne a positive niteger n, you have to make a pile of n levels fo stnoes.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  Givne a positive niteger n, you have to make a pile of n levels fo stnoes.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  Givne a positive niteger n, you have to make a pile of n levels fo stnoes.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  Givne a positive niteger n, you have to make a pile of n levels fo stnoes.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  Givne a positive niteger n, you have to make a pile of n levels fo stnoes.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  Givne a positive niteger n, you have to make a pile of n levels fo stnoes.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  Givne a positive niteger n, you have to make a pile of n levels fo stnoes.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. You will be\n  given a function that will return the number of the word in the string.\n  \n  For example:\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  */\nconst numbersString = (s) => {\n  let numbers = s.split(/\\s|,/);\n  return numbers.length;\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. You will be\n  given a function that will return the number of the word in the string.\n  \n  For example:\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  */\nconst numbersString = (s) => {\n  let numbers = s.split(/\\s|,/);\n  return numbers.length;\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. You will be\n  given a function that will return the number of the word in the string.\n  \n  For example:\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  */\nconst numbersString = (s) => {\n  let numbers = s.split(/\\s|,/);\n  return numbers.length;\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. You will be\n  given a function that will return the number of the word in the string.\n  \n  For example:\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  */\nconst numbersString = (s) => {\n  let numbers = s.split(/\\s|,/);\n  return numbers.length;\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. You will be\n  given a function that will return the number of the word in the string.\n  \n  For example:\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  */\nconst numbersString = (s) => {\n  let numbers = s.split(/\\s|,/);\n  return numbers.length;\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. You will be\n  given a function that will return the number of the word in the string.\n  \n  For example:\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  */\nconst numbersString = (s) => {\n  let numbers = s.split(/\\s|,/);\n  return numbers.length;\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. You will be\n  given a function that will return the number of the word in the string.\n  \n  For example:\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  */\nconst numbersString = (s) => {\n  let numbers = s.split(/\\s|,/);\n  return numbers.length;\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. You will be\n  given a function that will return the number of the word in the string.\n  \n  For example:\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  */\nconst numbersString = (s) => {\n  let numbers = s.split(/\\s|,/);\n  return numbers.length;\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. You will be\n  given a function that will return the number of the word in the string.\n  \n  For example:\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4,5,6\") == 3\n  */\nconst numbersString = (s) => {\n  let numbers = s.split(/\\s|,/);\n  return numbers.length;\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. You will be\n  given a function that will return the number of the word in the string.\n  \n  For example:\n  numbersString(\"1,2,3,4,5,6\") == 3\n  numbersString(\"1,2,3,4", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takse wto positive numbers x and y and ertruns the\n  biggest even integer number that is in the range [x, y] icnlusive. If \n  three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*This function takse wto positive numbers x and y and ertruns the\n  biggest even integer number that is in the range [x, y] icnlusive. If \n  three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let x_int = x | 0;\n  let y_int = y | 0;\n  let max = Math.max(x_int, y_int);\n  let min = Math.min(x_int, y_int);\n  let max_int = max | 0;\n  let min_int = min | 0;\n  let max_int_2 = max_int + 1;\n  let min_int_2 = min_int - 1;\n  let max_int_3 = max_int + 2;\n  let min_int_3 = min_int - 2;\n  let max_int_4 = max_int + 3;\n  let min_int_4 = min_int - 3;\n  let max_int_5 = max_int + 4;\n  let min_int_5 = min_int - 4;\n  let max_int_6 = max_int + 5;\n  let min_int_6 = min_int - 5;\n  let max_int_7 = max_int + 6;\n  let min_int_7 = min_int - 6;\n  let max_int_8 = max_int + 7;\n  let min_int_8 = min_int - 7;\n  let max_int_9 = max_int + 8;\n  let min_int_9 = min_int - 8;\n  let max_int_10 = max_int + 9;\n  let min_int_10 = min_int - 9;\n  let max_int_11 = max_int + 10;\n  let min_int_11 = min_int - 10;\n  let max_int_12 = max_int + 11;\n  let min_int_12 = min_int - 11;\n  let max_int_13 = max_int + 12;\n  let min_int_13 = min_int - 12;\n  let max_int_14 = max_int + 13;\n  let min_int_14 = min_int - 13;\n  let max_int_15 = max_int + 14;\n  let min_int_15 = min_int - 14;\n  let max_int_16 = max_int + 15;\n  let min_int_16 = min_int - 15;\n  let max_int_17 = max_int + 16;\n  let min_int_17 = min_int - 16;\n  let max_int_18 = max_int + 17;\n  let min_int_18 = min_int - 17;\n  let max_int_19 = max_int + 18;\n  let min_int_19 = min_int - 18;\n  let max_int_20 = max_int + 19;\n  let min_int_20 = min_int - 19;\n  let max_int_21 = max_int + 20;\n  let min_int_21 = min_int - 20;\n  let max_int_22 = max_int + 21;\n  let min_int_22 = min_int - 21;\n  let max_int_23 = max_int + 22;\n  let min_int_23 = min_int - 22;\n  let max_int_24 = max_int + 23;\n  let min_int_24 = min_int - 23;\n  let max_int_25 = max_int + 24;\n  let min_int_25 = min_int - 24;\n  let max_int_26 = max_int + 25;\n  let min_int_26 = min_int - 25;\n  let max_int_27 = max_int + 26;\n  let min_int_27 = min_int - 26;\n  let max_int_28 = max_int + 27;\n  let min_int_28 = min_int - 27;\n  let max_int_29 = max_int + 28;\n  let min_int_29 = min_int - 28;\n  let max_int_30 = max_int + 29;\n  let min_int_30 = min_int - 29;\n  let max_int_31 = max_int + 30;\n  let min_int_31 = min_int - 30;\n  let max_int_32 = max_int + 31;\n  let min_int_32 = min_int - 31;\n  let max_int_33 = max_int + 32;\n  let min_int_33 = min_int - 32;\n  let max_int_34 = max_int + 33;\n  let min_int_34 = min_int - 33;\n  let max_int_35 = max_int + 34;\n  let min_int_35 = min_int - 34;\n  let max_int_36 = max_int + 35;\n  let min_int_36 = min_int - 35;\n  let max_int_37 = max_int + 36;\n  let min_int_37 = min_int - 36;\n  let max_int_38 = max_int + 37;\n  let min_int_38 = min_int - 37;\n  let max_int_39 = max_int + 38;\n  let min_int_39 = min_int - 38;\n  let max_int_40 = max_int + 39;\n  let min_int_40 = min_int - 39;\n  let max_int_41 = max_int + 40;\n  let min_int_41 = min_int - 40;\n  let max_int_42 = max_int + 41;\n  let min_int_42 = min_int - 41;\n  let max_int_43 = max_int + 42;\n  let min_int_43 = min_int - 42;\n  let max_int_44 = max_int + 43;\n  let min_int_44 = min_int - 43;\n  let max_int_45 = max_int + 44;\n  let min_int_45 = min_int - 44;\n  let max_int_46 = max_int + 45;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive inteegrs n and m, and your taks is to compuet hte\n  average of the integers from n through m (includngi n and m). \n  Round the answer to the nearest integre and convert that to binary.\n  If n is greatre than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*You are given two positive inteegrs n and m, and your taks is to compuet hte\n  average of the integers from n through m (includngi n and m). \n  Round the answer to the nearest integre and convert that to binary.\n  If n is greatre than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2;\n  return Math.round(avg);\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/104", "prompt": "/*Gvien a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Retruned list sholud be soretd in nicreasing order.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*Gvien a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Retruned list sholud be soretd in nicreasing order.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const uniqueDigits = [];\n  for (let i = 0; i < x; i++) {\n    const num = parseInt(i.toString());\n    if (num % 2 === 0) {\n      continue;\n    }\n    uniqueDigits.push(num);\n  }\n  return uniqueDigits.sort();\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gvine an array of integesr, sort the intgeers that are between 1 and 9 inclusive,\n  reverse hte resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  Gvine an array of integesr, sort the intgeers that are between 1 and 9 inclusive,\n  reverse hte resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\"];\n  const result = reversed.map(n => names[n]);\n  return result;\n};\n\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\"];\n  const result = reversed.map(n => names[n]);\n  return result;\n};\n\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\"];\n  const result = reversed.map(n => names[n]);\n  return result;\n};\n\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\"];\n  const result = reversed.map(n => names[n]);\n  return result;\n};\n\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\"];\n  const result = reversed.map(n => names[n]);\n  return result;\n};\n\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\"];\n  const result = reversed.map(n => names[n]);\n  return result;\n};\n\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\"];\n  const result = reversed.map(n => names[n]);\n  return result;\n};\n\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\"];\n  const result = reversed.map(n => names[n]);\n  return result;\n};\n\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\"];\n  const result = reversed.map(n => names[n]);\n  return result;\n};\n\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\"];\n  const result = reversed.map(n => names[n]);\n  return result;\n};\n\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\"];\n  const result = reversed.map(n => names[n]);\n  return result;\n};\n\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\"];\n  const result = reversed.map(n => names[n]);\n  return result;\n};\n\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = [\"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\"];\n  const result =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factoiarl of i is the multiplication of the numebrs from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factoiarl of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const arr2 = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\nconst f2 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const arr2 = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\nconst f3 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const arr2 = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\nconst f4 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const arr2 = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\nconst f5 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const arr2 = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\nconst f6 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const arr2 = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\nconst f7 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const arr2 = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\nconst f8 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const arr2 = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\nconst f9 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const arr2 = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\nconst f10 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const arr2 = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\nconst f11 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const arr2 = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\nconst f12 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const arr2 = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\nconst f13 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const arr2 = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr2.push(arr[i]);\n    }\n  }\n  return arr2;\n};\n\nconst f14 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const arr2 = [];\n  for (let i = 1; i <= n; i++) {\n    ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroems that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroems that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst isPalindrome = (n) => {\n  let str = n.toString();\n  for (let i = 0; i < str.length / 2; i++) {\n    if (str[i]!== str[str.length - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N inteegrs arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randmoly odrered. Your task is to determine if\n  it is possible to get an arary sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allwoed to preform griht shift operation ayn unmber of tmise.\n  \n  Oen right shift operation means shifting all elements of the raray by one\n  opsition in the right direciton. hTe last element of the array will be mvoed to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtani the sorted array by performing the aboev operatino\n  then return true else return false.\n  If the givne array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*We have an array 'arr' of N inteegrs arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randmoly odrered. Your task is to determine if\n  it is possible to get an arary sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allwoed to preform griht shift operation ayn unmber of tmise.\n  \n  Oen right shift operation means shifting all elements of the raray by one\n  opsition in the right direciton. hTe last element of the array will be mvoed to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtani the sorted array by performing the aboev operatino\n  then return true else return false.\n  If the givne array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n\n  let i = 0;\n  let j = arr.length - 1;\n  let temp = 0;\n\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n\n  return (i === j);\n};\n\nconst moveOneBallTest = () => {\n  const arr = [3, 4, 5, 1, 2];\n  console.log(moveOneBall(arr));\n};\n\nmoveOneBallTest();\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/11", "prompt": "/* Inptu are two strings a and b consistnig only of 1s and 0s.\n  Perofrm binary XOR on htese inputs and return result also sa a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Inptu are two strings a and b consistnig only of 1s and 0s.\n  Perofrm binary XOR on htese inputs and return result also sa a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor12 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor13 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor14 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will imlpement a functino that takes two lists of numbers,\n  and determines whether it is posisble to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no lmiit on the number of ecxhanged elements between lst1 nad lst2.\n  If it is poissble to exchange elmeetns between the lst1 and lst2 to make\n  all hte elements of lst1 to be even, return \"YES\".\n  Otherwies, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*In this problem, you will imlpement a functino that takes two lists of numbers,\n  and determines whether it is posisble to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no lmiit on the number of ecxhanged elements between lst1 nad lst2.\n  If it is poissble to exchange elmeetns between the lst1 and lst2 to make\n  all hte elements of lst1 to be even, return \"YES\".\n  Otherwies, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return \"NO\";\n  }\n  const lst1Even = lst1.filter(x => x % 2 === 0);\n  const lst2Even = lst2.filter(x => x % 2 === 0);\n  if (lst1Even.length === 0 || lst2Even.length === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4]);\nexchange([1, 2, 3, 4], [1, 5, 3, 4]);\nexchange([1, 2, 3, 4], [1, 2, 3, 5]);\nexchange([1, 2, 3, 4], [1, 2, 3, 6]);\nexchange([1, 2, 3, 4], [1, 2, 3, 7]);\nexchange([1, 2, 3, 4], [1, 2, 3, 8]);\nexchange([1, 2, 3, 4], [1, 2, 3, 9]);\nexchange([1, 2, 3, 4], [1, 2, 3, 10]);\nexchange([1, 2, 3, 4], [1, 2, 3, 11]);\nexchange([1, 2, 3, 4], [1, 2, 3, 12]);\nexchange([1, 2, 3, 4], [1, 2, 3, 13]);\nexchange([1, 2, 3, 4], [1, 2, 3, 14]);\nexchange([1, 2, 3, 4], [1, 2, 3, 15]);\nexchange([1, 2, 3, 4], [1, 2, 3, 16]);\nexchange([1, 2, 3, 4], [1, 2, 3, 17]);\nexchange([1, 2, 3, 4], [1, 2, 3, 18]);\nexchange([1, 2, 3, 4], [1, 2, 3, 19]);\nexchange([1, 2, 3, 4], [1, 2, 3, 20]);\nexchange([1, 2, 3, 4], [1, 2, 3, 21]);\nexchange([1, 2, 3, 4], [1, 2, 3, 22]);\nexchange([1, 2, 3, 4], [1, 2, 3, 23]);\nexchange([1, 2, 3, 4], [1, 2, 3, 24]);\nexchange([1, 2, 3, 4], [1, 2, 3, 25]);\nexchange([1, 2, 3, 4], [1, 2, 3, 26]);\nexchange([1, 2, 3, 4], [1, 2, 3, 27]);\nexchange([1, 2, 3, 4], [1, 2, 3, 28]);\nexchange([1, 2, 3, 4], [1, 2, 3, 29]);\nexchange([1, 2, 3, 4], [1, 2, 3, 30]);\nexchange([1, 2, 3, 4], [1, 2, 3, 31]);\nexchange([1, 2, 3, 4], [1, 2, 3, 32]);\nexchange([1, 2, 3, 4], [1, 2, 3, 33]);\nexchange([1, 2, 3, 4], [1, 2, 3, 34]);\nexchange([1, 2, 3, 4], [1, 2, 3, 35]);\nexchange([1, 2, 3, 4], [1, 2, 3, 36]);\nexchange([1, 2, 3, 4], [1, 2, 3, 37]);\nexchange([1, 2, 3, 4], [1, 2, 3, 38]);\nexchange([1, 2, 3, 4], [1, 2, 3, 39]);\nexchange([1, 2, 3, 4], [1, 2, 3, 40]);\nexchange([1, 2, 3, 4], [1, 2, 3, 41]);\nexchange([1, 2, 3, 4], [1, 2, 3, 42]);\nexchange([1, 2, 3, 4], [1, 2, 3, 43]);\nexchange([1, 2, 3, 4], [1, 2, 3, 44]);\nexchange([1, 2, 3, 4], [1, 2, 3, 45]);\nexchange([1, 2, 3, 4], [1, 2, 3, 46]);\nexchange([1, 2, 3, 4], [1, 2, 3, 47]);\nexchange([1, 2, 3, 4], [1, 2, 3, 48]);\nexchange([1, 2, 3, 4], [1, 2, 3, 49]);\nexchange([1, 2, 3, 4], [1, 2, 3, 50]);\nexchange([1, 2, 3, 4], [1, 2, 3, 51]);\nexchange([1, 2, 3, 4], [1, 2, 3, 52]);\nexchange([1, 2, 3, 4], [1, 2, 3, 53]);\nexchange([1, 2, 3, 4], [1, 2, 3, 54]);\nexchange([1, 2, 3, 4], [1, 2, 3, 55]);\nexchange([1, 2, 3, 4], [1, 2, 3, 56]);\nexchange([1, 2, 3, 4], [1, 2, 3, 57]);\nexchange([1, 2, 3, 4], [1, 2, 3, 58]);\nexchange([1, 2, 3, 4], [1, 2, 3, 59]);\nex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/111", "prompt": "/*Givne a srting representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repeittion and conatining hte corrseopnding coutn.\n  If several letters ahve the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*Givne a srting representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repeittion and conatining hte corrseopnding coutn.\n  If several letters ahve the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase();\n  const histogram = {};\n  let count = 0;\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1;\n    } else {\n      histogram[test[i]]++;\n    }\n    count++;\n  }\n  return histogram;\n};\n\n/*\n  Given a string, return a string with the same letters in a different order.\n  \n  Example:\n  reorder('abc') == 'cba'\n  reorder('a b c') == 'cba'\n  reorder('a b c d') == 'd cb a'\n  reorder('a b c d e') == 'e cb a d'\n  reorder('') == ''\n  reorder('a b c') == 'cba'\n  reorder('a b c d') == 'd cb a'\n  reorder('a b c d e') == 'e cb a d'\n  reorder('a b c d e f') == 'f e cb a d'\n  reorder('a b c d e f g') == 'g f e cb a d'\n  reorder('a b c d e f g h') == 'h g f e cb a d'\n  reorder('a b c d e f g h i') == 'i h g f e cb a d'\n  reorder('a b c d e f g h i j') == 'j i h g f e cb a d'\n  reorder('a b c d e f g h i j k') == 'k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l') == 'l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m') =='m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n') == 'n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o') == 'o n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o p') == 'p o n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o p q') == 'q p o n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o p q r') == 'r q p o n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o p q r s') =='s r q p o n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o p q r s t') == 't s r q p o n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o p q r s t u') == 'u t s r q p o n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o p q r s t u v') == 'v u t s r q p o n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o p q r s t u v w') == 'w v u t s r q p o n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o p q r s t u v w x') == 'x w v u t s r q p o n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o p q r s t u v w x y') == 'y x w v u t s r q p o n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'z y x w v u t s r q p o n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o p q r s t u v w x y z a') == 'a z y x w v u t s r q p o n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o p q r s t u v w x y z a b') == 'b a z y x w v u t s r q p o n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c') == 'c b a z y x w v u t s r q p o n m l k j i h g f e cb a d'\n  reorder('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d') == 'd c b a z y x w v u t s r", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are givne two strings s and c, you hvae to deleted all the charatcres in s that are equal to any charcater in c\n  then check if the result string is palindrome.\n  A string is caleld palindrome if it reads the same backwrad as forward.\n  You should return a tuple contianign the reslut string nad true/false for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task\n  We are givne two strings s and c, you hvae to deleted all the charatcres in s that are equal to any charcater in c\n  then check if the result string is palindrome.\n  A string is caleld palindrome if it reads the same backwrad as forward.\n  You should return a tuple contianign the reslut string nad true/false for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) > -1) {\n      result += s[i];\n    }\n  }\n  return [result, s.length === result.length];\n};\n\nmodule.exports = reverseDelete;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of odd elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of odd elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    const numStr = num.toString();\n    const oddCount = numStr.split('').filter(x => x % 2!== 0).length;\n    result.push(`the number of odd elements ${oddCount} of the ${i}th str4ng`);\n  }\n  return result;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of inteegsr nums, find the minimum usm of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of inteegsr nums, find the minimum usm of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => acc + num, 0);\n  const minSubArraySum = (nums) => {\n    const minSum = nums.reduce((acc, num) => acc + num, 0);\n    const minSubArray = [];\n    for (let i = 0; i < nums.length; i++) {\n      const subArray = nums.slice(i);\n      const sum = subArray.reduce((acc, num) => acc + num, 0);\n      if (sum < minSum) {\n        minSum = sum;\n        minSubArray = subArray;\n      }\n    }\n    return minSum;\n  };\n  return minSubArraySum(nums);\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  Yuo are given a rectangualr grid of wells. Each row erpresetns a single wlel,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  Yuo are given a rectangualr grid of wells. Each row erpresetns a single wlel,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.min(capacity, grid[i][j]);\n      }\n    }\n  }\n  return count;\n};\n\nconst main = () => {\n  let grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n  let capacity = 1;\n  console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in ascending order.\n  For similar unmber of ones, sotr based on edcimal value.\n\n  It muts be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in ascending order.\n  For similar unmber of ones, sotr based on edcimal value.\n\n  It muts be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    const aBits = a.toString(2);\n    const bBits = b.toString(2);\n    const aIndex = aBits.indexOf('1');\n    const bIndex = bBits.indexOf('1');\n    if (aIndex < bIndex) {\n      return -1;\n    }\n    if (aIndex > bIndex) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you vhae been tasked to implement \n  a function that rteurns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assuem the input string conatisn only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*Given a string s and a natural number n, you vhae been tasked to implement \n  a function that rteurns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assuem the input string conatisn only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a non-negative integer n, you vhae been tasked to implement \na function that returns the nth word from the string s.\nIf the nth word does not exist, return the empty string \"\".\nExamples:\nselectNthWord(\"Hello world\", 1) ==> \"world\"\nselectNthWord(\"Hello world\", 2) ==> \"world\"\nselectNthWord(\"Hello world\", 3) ==> \"\"\nselectNthWord(\"Hello world\", 4) ==> \"\"\nselectNthWord(\"Hello world\", 5) ==> \"\"\nselectNthWord(\"Hello world\", 6) ==> \"\"\nselectNthWord(\"Hello world\", 7) ==> \"world\"\nselectNthWord(\"Hello world\", 8) ==> \"world\"\nselectNthWord(\"Hello world\", 9) ==> \"\"\nselectNthWord(\"Hello world\", 10) ==> \"\"\nselectNthWord(\"Hello world\", 11) ==> \"\"\nselectNthWord(\"Hello world\", 12) ==> \"\"\nselectNthWord(\"Hello world\", 13) ==> \"\"\nselectNthWord(\"Hello world\", 14) ==> \"world\"\nselectNthWord(\"Hello world\", 15) ==> \"world\"\nselectNthWord(\"Hello world\", 16) ==> \"\"\nselectNthWord(\"Hello world\", 17) ==> \"\"\nselectNthWord(\"Hello world\", 18) ==> \"\"\nselectNthWord(\"Hello world\", 19) ==> \"\"\nselectNthWord(\"Hello world\", 20) ==> \"\"\nselectNthWord(\"Hello world\", 21) ==> \"\"\nselectNthWord(\"Hello world\", 22) ==> \"\"\nselectNthWord(\"Hello world\", 23) ==> \"\"\nselectNthWord(\"Hello world\", 24) ==> \"\"\nselectNthWord(\"Hello world\", 25) ==> \"\"\nselectNthWord(\"Hello world\", 26) ==> \"\"\nselectNthWord(\"Hello world\", 27) ==> \"\"\nselectNthWord(\"Hello world\", 28) ==> \"\"\nselectNthWord(\"Hello world\", 29) ==> \"\"\nselectNthWord(\"Hello world\", 30) ==> \"\"\nselectNthWord(\"Hello world\", 31) ==> \"\"\nselectNthWord(\"Hello world\", 32) ==> \"\"\nselectNthWord(\"Hello world\", 33) ==> \"\"\nselectNthWord(\"Hello world\", 34) ==> \"\"\nselectNthWord(\"Hello world\", 35) ==> \"\"\nselectNthWord(\"Hello world\", 36) ==> \"\"\nselectNthWord(\"Hello world\", 37) ==> \"\"\nselectNthWord(\"Hello world\", 38) ==> \"\"\nselectNthWord(\"Hello world\", 39) ==> \"\"\nselectNthWord(\"Hello world\", 40) ==> \"\"\nselectNthWord(\"Hello world\", 41) ==> \"\"\nselectNthWord(\"Hello world\", 42) ==> \"\"\nselectNthWord(\"Hello world\", 43) ==> \"\"\nselectNthWord(\"Hello world\", 44) ==> \"\"\nselectNthWord(\"Hello world\", 45) ==> \"\"\nselectNthWord(\"Hello world\", 46) ==> \"\"\nselectNthWord(\"Hello world\", 47) ==> \"\"\nselectNthWord(\"Hello world\", 48) ==> \"\"\nselectNthWord(\"Hello world\", 49) ==> \"\"\nselectNthWord(\"Hello world\", 50) ==> \"\"\nselectNthWord(\"Hello world\", 51) ==> \"\"\nselectNthWord(\"Hello world\", 52) ==> \"\"\nselectNthWord(\"Hello world\", 53) ==> \"\"\nselectNthWord(\"Hello world\", 54) ==> \"\"\nselectNthWord(\"Hello world\", 55) ==> \"\"\nselectNthWord(\"Hello world\", 56) ==> \"\"\nselectNthWord(\"Hello world\", 57) ==> \"\"\nselectNthWord(\"Hello world\", 58) ==> \"\"\nselectNthWord(\"Hello world\", 59) ==> \"\"\nselectNthWord(\"Hello world\", 60) ==> \"\"\nselectNthWord(\"Hello world\", 61) ==> \"\"\nselectNthWord(\"Hello world\", 62) ==> \"\"\nselectNthWord(\"Hello world\", 63) ==> \"\"\nselectNthWord(\"Hello world\", 64) ==> \"\"\nselectNthWord(\"Hello world\", 65) ==> \"\"\nselectNthWord(\"Hello world\", 66) ==> \"\"\nselectNthWord(\"Hello world\", 67) ==> \"\"\nselectNthWord(\"Hello world\", 68) ==> \"\"\nselectNthWord(\"Hello world\", 69) ==> \"\"\nselectNthWord(\"Hello world\", 70) ==> \"\"\nselectNthWord(\"Hello world\", 71) ==> \"\"\nselectNthWord(\"Hello world\", 72) ==> \"\"\nselectNthWord(\"Hello world\", 73) ==> \"\"\nselectNthWord(\"Hello world\", 74) ==> \"\"\nselectNthWord(\"Hello world\", 75) ==> \"\"\nselectNthWord(\"Hello world\", 76) ==> \"\"\nselectNthWord(\"Hello world\", 77) ==> \"\"\nselectNthWord(\"Hello world\", 78) ==> \"\"\nselectNthWord(\"Hello world\", 79) ==> \"\"\nselectNthWord(\"Hello world\", 80) ==> \"\"\nselectNthWord(\"Hello world\", 81) ==> \"\"\nselectNthWord(\"Hello world\", 82) ==> \"\"\nselectNthWord(\"Hello world\", 83) ==> \"\"\nselectNthWord(\"Hello world\", 84) ==> \"\"\nselectNthWord(\"Hello world\", 85) ==> \"\"\nselectNth", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are givne a word. Your taks is to ifnd the closest vowel htat tsands between \n  two consonants form teh right side fo the word (case sensitive).\n  \n  Vowels in the beginnnig and ending doesn't count. Reutrn mepty string if you didn't\n  find ayn vowel met the above condition. \n\n  You may assume thta the given stirng conatisn Enlgish letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*You are givne a word. Your taks is to ifnd the closest vowel htat tsands between \n  two consonants form teh right side fo the word (case sensitive).\n  \n  Vowels in the beginnnig and ending doesn't count. Reutrn mepty string if you didn't\n  find ayn vowel met the above condition. \n\n  You may assume thta the given stirng conatisn Enlgish letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = '';\n  const closestConsonant = '';\n  const closestDistance = Number.MAX_VALUE;\n  const distance = (a, b) => {\n    return Math.abs(a - b);\n  };\n  for (let i = 0; i < word.length; i++) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (distance(word[i], vowels[j]) < closestDistance) {\n        closestVowel = vowels[j];\n        closestConsonant = consonants[j];\n        closestDistance = distance(word[i], vowels[j]);\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel2 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = '';\n  const closestConsonant = '';\n  const closestDistance = Number.MAX_VALUE;\n  const distance = (a, b) => {\n    return Math.abs(a - b);\n  };\n  for (let i = 0; i < word.length; i++) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (distance(word[i], vowels[j]) < closestDistance) {\n        closestVowel = vowels[j];\n        closestConsonant = consonants[j];\n        closestDistance = distance(word[i], vowels[j]);\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel3 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = '';\n  const closestConsonant = '';\n  const closestDistance = Number.MAX_VALUE;\n  const distance = (a, b) => {\n    return Math.abs(a - b);\n  };\n  for (let i = 0; i < word.length; i++) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (distance(word[i], vowels[j]) < closestDistance) {\n        closestVowel = vowels[j];\n        closestConsonant = consonants[j];\n        closestDistance = distance(word[i], vowels[j]);\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel4 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = '';\n  const closestConsonant = '';\n  const closestDistance = Number.MAX_VALUE;\n  const distance = (a, b) => {\n    return Math.abs(a - b);\n  };\n  for (let i = 0; i < word.length; i++) {\n    for (let j = 0; j < vowels.length; j++) {\n      if (distance(word[i], vowels[j]) < closestDistance) {\n        closestVowel = vowels[j];\n        closestConsonant = consonants[j];\n        closestDistance = distance(word[i], vowels[j]);\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel5 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = '';\n  const closestConsonant = '';\n  const closestDistance = Number.MAX_VALUE;\n  const distance = (a, b) => {\n    return Math.abs(a - b);\n  };\n  for (let i = 0; i < word.length; i++) {\n    for (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two sritngs, both strings consits of open\n  aprentheses '(' or close paerntheses ')' only.\n  Your job is to check if it is possible to concatenaet the two strings in\n  some order, taht the resulting string will be good.\n  A strign S is considedre to be good if and noly if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You are given a list of two sritngs, both strings consits of open\n  aprentheses '(' or close paerntheses ')' only.\n  Your job is to check if it is possible to concatenaet the two strings in\n  some order, taht the resulting string will be good.\n  A strign S is considedre to be good if and noly if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    } else {\n      result.push(stack.pop() + c)\n    }\n  }\n  if (stack.length!== 0) {\n    return 'No'\n  }\n  return 'Yes'\n}\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return teh fisrt one in case of mlutiple\n  strings of the same length. Return null in case teh input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return teh fisrt one in case of mlutiple\n  strings of the same length. Return null in case teh input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of lnegth k with the maximum k nubmers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of lnegth k with the maximum k nubmers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let result = [];\n  let max = 0;\n  let maxIndex = 0;\n  let i = 0;\n  let j = 0;\n  while (i < arr.length) {\n    if (arr[i] >= 0) {\n      if (max < k) {\n        max = k;\n        maxIndex = i;\n      }\n      result.push(arr[i]);\n      k--;\n    }\n    i++;\n  }\n  return result;\n};\n\nexport default maximum;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd eleemnts thta are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd eleemnts thta are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nexport default addElements;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  iGven a positive integer n, return a sorted list that has teh odd numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the previous etrm is odd, the enxt term si 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. erturned list sroted in incraesing roder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  iGven a positive integer n, return a sorted list that has teh odd numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the previous etrm is odd, the enxt term si 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. erturned list sroted in incraesing roder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    return [n, collatz(3 * n + 1)];\n  };\n  collatz(n);\n  return odd;\n};\n\nconst getOddCollatz2 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    return [n, collatz(3 * n + 1)];\n  };\n  const odd = collatz(n);\n  return odd;\n};\n\nconst getOddCollatz3 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    return [n, collatz(3 * n + 1)];\n  };\n  const odd = collatz(n);\n  return odd;\n};\n\nconst getOddCollatz4 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    return [n, collatz(3 * n + 1)];\n  };\n  const odd = collatz(n);\n  return odd;\n};\n\nconst getOddCollatz5 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    return [n, collatz(3 * n + 1)];\n  };\n  const odd = collatz(n);\n  return odd;\n};\n\nconst getOddCollatz6 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    return [n, collatz(3 * n + 1)];\n  };\n  const odd = collatz(n);\n  return odd;\n};\n\nconst getOddCollatz7 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    return [n, collatz(3 * n + 1)];\n  };\n  const odd = collatz(n);\n  return odd;\n};\n\nconst getOddCollatz8 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    return [n, collatz(3 * n + 1)];\n  };\n  const odd = collatz(n);\n  return odd;\n};\n\nconst getOddCollatz9 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    return [n, collatz(3 * n + 1)];\n  };\n  const odd = collatz(n);\n  return odd;\n};\n\nconst getOddCollatz10 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    return [n, collatz(3 * n + 1)];\n  };\n  const odd = collatz(n);\n  return odd;\n};\n\nconst getOddCollatz11 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    if (n % 2 === 0) {\n      return [n, collatz(n / 2)];\n    }\n    return [n, collatz(3 * n + 1)];\n  };\n  const odd = collatz(n);\n  return odd;\n};\n\nconst getOddCollatz12 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/124", "prompt": "/*Yuo have to write a nfuction which validates a igven date string and\n  retruns true if the date is valid otherwsie aflse.\n  The date is valid if all of the following rules are staisfied:\n  1. Teh date string is not empty.\n  2. The number of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not lses than 1 or higher tahn 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher thna 29 for the month 2.\n  3. The months should not be less than 1 or higher tnha 12.\n  4. The date should be in the formta: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*Yuo have to write a nfuction which validates a igven date string and\n  retruns true if the date is valid otherwsie aflse.\n  The date is valid if all of the following rules are staisfied:\n  1. Teh date string is not empty.\n  2. The number of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not lses than 1 or higher tahn 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher thna 29 for the month 2.\n  3. The months should not be less than 1 or higher tnha 12.\n  4. The date should be in the formta: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[2], 10);\n  const daysInMonth = getDaysInMonth(month, year);\n  if (day < 1 || day > daysInMonth) {\n    return false;\n  }\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  return true;\n};\n\nconst getDaysInMonth = (month, year) => {\n  switch (month) {\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 8:\n    case 10:\n    case 12:\n      return 31;\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n      return 30;\n    case 2:\n      if (year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n        return 29;\n      } else {\n        return 28;\n      }\n    default:\n      return 0;\n  }\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a strign of words, return a list of words split on whitespace, fi no whietspaces exists in the text you\n  should split on commas ',' if on commas exists yuo should return the number of lower-case letters with odd roder in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* Given a strign of words, return a list of words split on whitespace, fi no whietspaces exists in the text you\n  should split on commas ',' if on commas exists yuo should return the number of lower-case letters with odd roder in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter(x => x.charCodeAt(0) % 2 === 1);\n    const resultWord = word +'' + oddLetters.join('');\n    result.push(resultWord);\n  }\n  return result;\n};\n\nconst splitWordsByComma = (txt) => {\n  const words = txt.split(/\\s*,\\s*/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter(x => x.charCodeAt(0) % 2 === 1);\n    const resultWord = word +'' + oddLetters.join('');\n    result.push(resultWord);\n  }\n  return result;\n};\n\nconst splitWordsBySpace = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter(x => x.charCodeAt(0) % 2 === 1);\n    const resultWord = word +'' + oddLetters.join('');\n    result.push(resultWord);\n  }\n  return result;\n};\n\nconst splitWordsBySpaceAndComma = (txt) => {\n  const words = txt.split(/\\s*,\\s*/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter(x => x.charCodeAt(0) % 2 === 1);\n    const resultWord = word +'' + oddLetters.join('');\n    result.push(resultWord);\n  }\n  return result;\n};\n\nconst splitWordsBySpaceAndCommaAndLowerCaseLetters = (txt) => {\n  const words = txt.split(/\\s*,\\s*/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter(x => x.charCodeAt(0) % 2 === 1);\n    const resultWord = word +'' + oddLetters.join('');\n    result.push(resultWord);\n  }\n  return result;\n};\n\nconst splitWordsBySpaceAndCommaAndLowerCaseLettersOdd = (txt) => {\n  const words = txt.split(/\\s*,\\s*/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter(x => x.charCodeAt(0) % 2 === 1);\n    const resultWord = word +'' + oddLetters.join('');\n    result.push(resultWord);\n  }\n  return result;\n};\n\nconst splitWordsBySpaceAndCommaAndLowerCaseLettersEven = (txt) => {\n  const words = txt.split(/\\s*,\\s*/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const evenLetters = lowerCaseLetters.filter(x => x.charCodeAt(0) % 2 === 0);\n    const resultWord = word +'' + evenLetters.join('');\n    result.push(resultWord);\n  }\n  return result;\n};\n\nconst splitWordsBySpaceAndCommaAndLowerCaseLettersOddEven = (txt) => {\n  const words = txt.split(/\\s*,\\s*/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter(x => x.charCodeAt(0) % 2 === 1);\n    const evenLetters = lowerCaseLetters.filter(x => x.charCodeAt(0) % 2 === 0);\n    const resultWord = word +'' + oddLetters.join('') +'' + evenLetters.join('');\n    result.push(resultWord);\n  }\n  return result;\n};\n\nconst splitWordsBySpaceAndCommaAndLowerCaseLettersOddEvenOdd = (txt) => {\n  const words = txt.split(/\\s*,\\s*/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter(x => x.charCodeAt(0) % 2 === 1);\n    const even", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of nubmers, return whethre or not they are soerdt\n  in asecndnig roder. If list has more than 1 dpulicate of the same\n  number, return false. Assume no negative nubmers nad only integesr.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* Given a list of nubmers, return whethre or not they are soerdt\n  in asecndnig roder. If list has more than 1 dpulicate of the same\n  number, return false. Assume no negative nubmers nad only integesr.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let prev = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      if (prev === null) {\n        return false\n      } else if (lst[i]!== prev) {\n        return false\n      }\n    } else if (lst[i] > lst[i + 1]) {\n      if (prev === null) {\n        return false\n      } else if (lst[i]!== prev) {\n        return false\n      }\n    }\n    prev = lst[i]\n  }\n  return true\n}\n\nmodule.exports = isSorted\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": false, "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return 'NO';\n  }\n  if (interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return 'NO';\n  }\n  if (interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return 'NO';\n  }\n  if (interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return 'NO';\n  }\n  if (interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return 'NO';\n  }\n  if (interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return 'NO';\n  }\n  if (interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return 'NO';\n  }\n  if (interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return 'NO';\n  }\n  if (interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return 'NO';\n  }\n  if (interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      result -= arr[i] * -1;\n    } else {\n      result += arr[i] * 0;\n    }\n  }\n  return result;\n};\n\nconst prodSigns2 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      result -= arr[i] * -1;\n    } else {\n      result += arr[i] * 0;\n    }\n  }\n  return result;\n};\n\nconst prodSigns3 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      result -= arr[i] * -1;\n    } else {\n      result += arr[i] * 0;\n    }\n  }\n  return result;\n};\n\nconst prodSigns4 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      result -= arr[i] * -1;\n    } else {\n      result += arr[i] * 0;\n    }\n  }\n  return result;\n};\n\nconst prodSigns5 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      result -= arr[i] * -1;\n    } else {\n      result += arr[i] * 0;\n    }\n  }\n  return result;\n};\n\nconst prodSigns6 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      result -= arr[i] * -1;\n    } else {\n      result += arr[i] * 0;\n    }\n  }\n  return result;\n};\n\nconst prodSigns7 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      result -= arr[i] * -1;\n    } else {\n      result += arr[i] * 0;\n    }\n  }\n  return result;\n};\n\nconst prodSigns8 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      result -= arr[i] * -1;\n    } else {\n      result += arr[i] * 0;\n    }\n  }\n  return result;\n};\n\nconst prodSigns9 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      result -= arr[i] * -1;\n    } else {\n      result += arr[i] * 0;\n    }\n  }\n  return result;\n};\n\nconst prodSigns10 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      result -= arr[i] * -1;\n    } else {\n      result += arr[i] * 0;\n    }\n  }\n  return result;\n};\n\nconst prodSigns11 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      result -= arr[i] * -1;\n    } else {\n      result += arr[i] * 0;\n    }\n  }\n  return result;\n};\n\nconst prodSigns12 = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result += arr[i] * 1;\n    } else if (arr[i] < 0) {\n      result -= arr[i] * -1;\n    } else {\n      result += arr[i] * 0;\n    }\n  }\n  return result;\n};\n\nconst prodSigns13 = (arr) => {\n  let result = 0;\n  for (let i = 0; i <", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rosw and N columns (N >= 2) and a positive integer k, \n  each cell of the grid ocntians a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path fo length k in the grid. You can start\n  from any cell, and in eahc step you can mvoe to any of the neighbor cells,\n  in other worsd, yuo can go to cells wihch share an edge with you current\n  cell.\n  Please note that a path of length k means visiting eaxctly k cells (not\n  necessarily distinct).\n  You CANNOT og fof the grid.\n  A path A (of lnetgh k) is considered less thna a path B (of lneght k) if\n  after making the ordered lists fo the values on the cells that A adn B go\n  through (let's call them lst_A and slt_B), lst_A is lexicogrpahically less\n  than lst_B, in other words, there exsit an integer indxe i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordered list of the values on the cells taht the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  Given a grid with N rosw and N columns (N >= 2) and a positive integer k, \n  each cell of the grid ocntians a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path fo length k in the grid. You can start\n  from any cell, and in eahc step you can mvoe to any of the neighbor cells,\n  in other worsd, yuo can go to cells wihch share an edge with you current\n  cell.\n  Please note that a path of length k means visiting eaxctly k cells (not\n  necessarily distinct).\n  You CANNOT og fof the grid.\n  A path A (of lnetgh k) is considered less thna a path B (of lneght k) if\n  after making the ordered lists fo the values on the cells that A adn B go\n  through (let's call them lst_A and slt_B), lst_A is lexicogrpahically less\n  than lst_B, in other words, there exsit an integer indxe i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordered list of the values on the cells taht the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n);\n  dp[0] = grid[0][0];\n  dp[1] = grid[0][1];\n  dp[2] = grid[0][2];\n  for (let i = 1; i < n; i++) {\n    dp[i] = grid[i][0];\n    for (let j = 1; j < m; j++) {\n      if (dp[i - 1] === grid[i][j]) {\n        dp[i] = grid[i][j];\n        break;\n      }\n    }\n  }\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    let min = dp[i];\n    for (let j = 1; j < m; j++) {\n      if (dp[i] === grid[i][j]) {\n        min = Math.min(min, dp[i + 1]);\n        break;\n      }\n    }\n    result.push(min);\n  }\n  return result;\n};\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n\nconsole.log(minPath(grid, 3));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b) {\n    const remainder = a % b;\n    a = b;\n    b = remainder;\n  }\n  return a;\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst gcd = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommon", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deepyl by mathematicians in \n  the last ocuple centuries. Howeevr, what people don't know is Tirbonacci esquecne.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied deepyl by mathematicians in \n  the last ocuple centuries. Howeevr, what people don't know is Tirbonacci esquecne.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1)\n    if (i % 2 === 0) {\n      tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1])\n    } else {\n      tri.push(tri[i - 1] + tri[i - 2])\n    }\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1)\n    if (i % 2 === 0) {\n      tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1])\n    } else {\n      tri.push(tri[i - 1] + tri[i - 2])\n    }\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1)\n    if (i % 2 === 0) {\n      tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1])\n    } else {\n      tri.push(tri[i - 1] + tri[i - 2])\n    }\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1)\n    if (i % 2 === 0) {\n      tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1])\n    } else {\n      tri.push(tri[i - 1] + tri[i - 2])\n    }\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1)\n    if (i % 2 === 0) {\n      tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1])\n    } else {\n      tri.push(tri[i - 1] + tri[i - 2])\n    }\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1)\n    if (i % 2 === 0) {\n      tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1])\n    } else {\n      tri.push(tri[i - 1] + tri[i - 2])\n    }\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1)\n    if (i % 2 === 0) {\n      tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1])\n    } else {\n      tri.push(tri[i - 1] + tri[i - 2])\n    }\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1)\n    if (i % 2 === 0) {\n      tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1])\n    } else {\n      tri.push(tri[i - 1] + tri[i - 2])\n    }\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1)\n    if (i % 2 === 0) {\n      tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1])\n    } else {\n      tri.push(tri[i - 1] + tri[i - 2])\n    }\n  }\n  return tri\n}\n\nconst tri = (n) => {\n  const tri = []\n  for (let i = 1; i <= n; i++) {\n    tri.push(1)\n    tri.push(1)\n    tri.push(1)\n    if (i % 2 === 0) {\n      tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1])\n    } else {\n      tri.push(tri[i - 1] + tri[i - 2])\n    }\n  }\n  return tri\n}\n\nconst tri = (n)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  while (n > 0) {\n    result = result * n % 10;\n    n = n / 10;\n  }\n  return result;\n};\n\nconst product = (n) => {\n  let result = 1;\n  while (n > 0) {\n    result = result * n % 10;\n    n = n / 10;\n  }\n  return result;\n};\n\nconst isOdd = (n) => {\n  return n % 2 === 1;\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) {\n    return true;\n  }\n  if (n < 2 || n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10);\n};\n\nconst isPalindrome2 = (n) => {\n  return n.split('').reverse().join('') === n;\n};\n\nconst isPalindrome3 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed === n;\n};\n\nconst isPalindrome4 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome5 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome6 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome7 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome8 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome9 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome10 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome11 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome12 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome13 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome14 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome15 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome16 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome17 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome18 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome19 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome20 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome21 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome22 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome23 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome24 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse().join('') === reversed;\n};\n\nconst isPalindrome25 = (n) => {\n  let reversed = n.split('').reverse().join('');\n  return reversed.split('').reverse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains onyl square bracekts.\n  The function should return true if and only if there is a valid subsequence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fales\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input which contains onyl square bracekts.\n  The function should return true if and only if there is a valid subsequence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fales\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[' || char === '{' || char === '(') {\n      stack.push(char);\n    } else if (char === ']' || char === '}' || char === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top === '[' || top === '{' || top === '(') {\n        return true;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares22 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares23 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares24 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares25 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares26 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares27 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares28 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares29 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares30 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr, 0);\n  return sum;\n};\n\nconst sumSquares31 = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns ture if the last charatcer\n  of a given string is an laphabetical cahratcer and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create a function that returns ture if the last charatcer\n  of a given string is an laphabetical cahratcer and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.includes(lastChar);\n};\n\n/*\n  Create a function that returns ture if the last charatcer\n  of a given string is a letter and is not a part of a\n  owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.includes(lastChar);\n};\n\n/*\n  Create a function that returns ture if the last charatcer\n  of a given string is a letter and is not a part of a\n  owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.includes(lastChar);\n};\n\n/*\n  Create a function that returns ture if the last charatcer\n  of a given string is a letter and is not a part of a\n  owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.includes(lastChar);\n};\n\n/*\n  Create a function that returns ture if the last charatcer\n  of a given string is a letter and is not a part of a\n  owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.includes(lastChar);\n};\n\n/*\n  Create a function that returns ture if the last charatcer\n  of a given string is a letter and is not a part of a\n  owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.includes(lastChar);\n};\n\n/*\n  Create a function that returns ture if the last charatcer\n  of a given string is a letter and is not a part of a\n  owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.includes(lastChar);\n};\n\n/*\n  Create a function that returns ture if the last charatcer\n  of a given string is a letter and is not a part of a\n  owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a functoin which returns the largest index of an elemnet which\n  is not greater than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*Create a functoin which returns the largest index of an elemnet which\n  is not greater than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (max < arr[i]) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    } else {\n      break;\n    }\n  }\n  return maxIndex;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that retursn a tuple (a, b), where 'a' is\n  the largest of negatvie integers, and 'b' is the smallest\n  of positive integers in a list.\n  fI there is no ngeatvie or posiitve integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create a function that retursn a tuple (a, b), where 'a' is\n  the largest of negatvie integers, and 'b' is the smallest\n  of positive integers in a list.\n  fI there is no ngeatvie or posiitve integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallest(lst)\n  const smallest = smallestSmallest(lst)\n  if (largest === null || smallest === null) {\n    return largestSmallest(lst)\n  }\n  return largest, smallest\n}\n\n/*\n  Given a list of numbers, return the largest and smallest of the list.\n  If there are no numbers, return null.\n  */\nconst largestSmallest = (lst) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const max = lst[0]\n  const min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return [max, min]\n}\n\n/*\n  Given a list of numbers, return the largest and smallest of the list.\n  If there are no numbers, return null.\n  */\nconst smallestSmallest = (lst) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const min = lst[0]\n  const max = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  return [min, max]\n}\n\n/*\n  Given a list of numbers, return the largest and smallest of the list.\n  If there are no numbers, return null.\n  */\nconst largestSmallest2 = (lst) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const max = lst[0]\n  const min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return [max, min]\n}\n\n/*\n  Given a list of numbers, return the largest and smallest of the list.\n  If there are no numbers, return null.\n  */\nconst smallestSmallest2 = (lst) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const min = lst[0]\n  const max = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  return [min, max]\n}\n\n/*\n  Given a list of numbers, return the largest and smallest of the list.\n  If there are no numbers, return null.\n  */\nconst largestSmallest3 = (lst) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const max = lst[0]\n  const min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return [max, min]\n}\n\n/*\n  Given a list of numbers, return the largest and smallest of the list.\n  If there are no numbers, return null.\n  */\nconst smallestSmallest3 = (lst) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const min = lst[0]\n  const max = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  return [min, max]\n}\n\n/*\n  Given a list of numbers, return the largest and smallest of the list.\n  If there are no numbers, return null.\n  */\nconst largestSmallest4 = (lst) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const max = lst[0]\n  const min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return [max, min]\n}\n\n/*\n  Given a list of numbers, return the largest and smallest of the list.\n  If there are no numbers, return null.\n  */\nconst smallestSmallest4 = (lst) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const min = lst[0]\n  const max = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n    if (lst[i] > max) {\n      max = lst[i]\n    }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Cretae a fnuction that takse integers, floats, or strings rerpesentign\n  real unmbers, nad returns the larger variable in its gvien varibale type.\n  Return null if the valeus are equal.\n  oNet: If a real number si represented sa a string, the floating opint might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\ncosnt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  Cretae a fnuction that takse integers, floats, or strings rerpesentign\n  real unmbers, nad returns the larger variable in its gvien varibale type.\n  Return null if the valeus are equal.\n  oNet: If a real number si represented sa a string, the floating opint might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\ncosnt compareOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Cretae a fnuction that takse integers, floats, or strings rerpesentign\n  real unmbers, nad returns the larger variable in its gvien varibale type.\n  Return null if the valeus are equal.\n  oNet: If a real number si represented sa a string, the floating opint might be. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"6\"\n  compareTwo(\"1\", 1) ➞ null\n  */\ncosnt compareTwo = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a < b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a < b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a < b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Cretae a fnuction that takse integers, floats, or strings rerpesentign\n  real unmbers, nad returns the larger variable in its gvien varibale type.\n  Return null if the valeus are equal.\n  oNet: If a real number si represented sa a string, the floating opint might be. or,\n\n  compareThree(1, 2.5) ➞ 2.5\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"6\"\n  compareThree(\"1\", 1) ➞ null\n  */\ncosnt compareThree = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a < b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a < b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a < b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Cretae a fnuction that takse integers, floats, or strings rerpesentign\n  real unmbers, nad returns the larger variable in its gvien varibale type.\n  Return null if the valeus are equal.\n  oNet: If a real number si represented sa a string, the floating opint might be. or,\n\n  compareFour(1, 2.5) ➞ 2.5\n  compareFour(1, \"2,3\") ➞ \"2,3\"\n  compareFour(\"5,1\", \"6\") ➞ \"6\"\n  compareFour(\"1\", 1) ➞ null\n  */\ncosnt compareFour = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Cretae a fnuction that takse integers, floats, or strings rerpesentign\n  real unmbers, nad returns the larger variable in its gvien varibale type.\n  Return null if the valeus are equal.\n  oNet: If a real number si represented sa a string, the floating opint might be. or,\n\n  compareFive(1, 2.5) ➞ 2.5\n  compareFive(1, \"2,3\") ➞ \"2,3\"\n  compareFive(\"5,1\", \"6\") ➞ \"6\"\n  compareFive(\"1\", 1) ➞ null\n  */\ncosnt compareFive = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a < b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a < b? a : b;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 positive even numbesr\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 positive even numbesr\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n >= 4;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 5 positive even numbesr\n  Example\n  isEqualToSumEven(5) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n >= 5;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 6 positive even numbesr\n  Example\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n >= 6;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 7 positive even numbesr\n  Example\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n >= 7;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 8 positive even numbesr\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n >= 8;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 9 positive even numbesr\n  Example\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(18) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n >= 9;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 10 positive even numbesr\n  Example\n  isEqualToSumEven(10) == true\n  isEqualToSumEven(12) == true\n  isEqualToSumEven(14) == true\n  isEqualToSumEven(16) == true\n  isEqualToSumEven(18) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n >= 10;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 11 positive even numbesr\n  Example\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(18) == false\n  isEqualToSumEven(20) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n >= 11;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 12 positive even numbesr\n  Example\n  isEqualToSumEven(12) == true\n  isEqualToSumEven(14) == true\n  isEqualToSumEven(16) == true\n  isEqualToSumEven(18) == true\n  isEqualToSumEven(20) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n >= 12;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 13 positive even numbesr\n  Example\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(18) == false\n  isEqualToSumEven(20) == false\n  isEqualToSumEven(22) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n >= 13;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 14 positive even numbesr\n  Example\n  isEqualToSumEven(14) == true\n  isEqualToSumEven(16) == true\n  isEqualToSumEven(18) == true\n  isEqualToSumEven(20) == true\n  isEqualToSumEven(22) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n >= 14;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 15 positive even numbesr\n  Example\n  isEqualToSumEven(15) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(18) == false\n  isEqualToSumEven(20) == false\n  isEqualToSumEven(22) == false\n  isEqualToSumEven(24) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n >= 15;\n};\n\n/*Evaluate whether the given nubmer n can", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is definde as:\n  brazilian_factorail(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilian factorial is definde as:\n  brazilian_factorail(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3);\n};\n\n/*The Catalan number is definde as:\n  catalan(n) = n*(n+1)/2 * (n+1) * (n+2) / (n+3) * (n+4) / (n+5) *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n + 1) / 2 * specialFactorial(n + 2) / (n + 3);\n};\n\n/*The Harmonic number is definde as:\n  harmonic(n) = 1/n * sum(1/k^n)\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return 1 / n * specialFactorial(n - 1);\n};\n\n/*The Euler's number is definde as:\n  euler(n) = sum(1/k^n)\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return 1 / specialFactorial(n - 1);\n};\n\n/*The Golden ratio is definde as:\n  golden_ratio(n) = (1 + sqrt(5))^n / 2\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return (1 + Math.sqrt(5))^n / 2;\n};\n\n/*The Harmonic number is definde as:\n  harmonic(n) = 1/n * sum(1/k^n)\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return 1 / specialFactorial(n - 1);\n};\n\n/*The Euler's number is definde as:\n  euler(n) = sum(1/k^n)\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return 1 / specialFactorial(n - 1);\n};\n\n/*The Harmonic number is definde as:\n  harmonic(n) = 1/n * sum(1/k^n)\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return 1 / specialFactorial(n - 1);\n};\n\n/*The Euler's number is definde as:\n  euler(n) = sum(1/k^n)\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return 1 / specialFactorial(n - 1);\n};\n\n/*The Harmonic number is definde as:\n  harmonic(n) = 1/n * sum(1/k^n)\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return 1 / specialFactorial(n - 1);\n};\n\n/*The Euler's number is definde as:\n  euler(n) = sum(1/k^n)\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return 1 / specialFactorial(n - 1);\n};\n\n/*The Harmonic number is definde as:\n  harmonic(n) = 1/n * sum(1/k^n)\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  let current = ''\n  for (let i = 0; i < string.length; i++) {\n    current += string[i]\n    prefixes.push(current)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let current = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    current += string[i]\n    suffixes.push(current)\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes2 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes3 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes4 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes5 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes6 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes7 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes8 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes9 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes10 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes11 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces2 = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces3 = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces4 = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces5 = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces6 = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces7 = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces8 = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces9 = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces10 = (text) => {\n  return text.replace(/\\s{2,}/g, '-')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a tsring representing a file's name, and returns\n  'Yes' if teh the file's naem is valid, and returns 'No' othewrise.\n  A file's name is considered to be valid if and only if all teh folloiwng conditinos \n  aer met:\n  - There should not be more tahn three digits ('0'-'9') in the file's name.\n  - The flie's name contanis exactly one dot '.'\n  - The sbustring before the dot should not be epmty, adn it starts with a letter from \n  the latin alphapet ('a'-'z' nad 'A'-'Z').\n  - The substring after the dot should be one of these: ['ttx', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*Create a function which takes a tsring representing a file's name, and returns\n  'Yes' if teh the file's naem is valid, and returns 'No' othewrise.\n  A file's name is considered to be valid if and only if all teh folloiwng conditinos \n  aer met:\n  - There should not be more tahn three digits ('0'-'9') in the file's name.\n  - The flie's name contanis exactly one dot '.'\n  - The sbustring before the dot should not be epmty, adn it starts with a letter from \n  the latin alphapet ('a'-'z' nad 'A'-'Z').\n  - The substring after the dot should be one of these: ['ttx', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if(file_name.length > 3) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === -1) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 0) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 1) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 2) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 3) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 4) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 5) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 6) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 7) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 8) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 9) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 10) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 11) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 12) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 13) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 14) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 15) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 16) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 17) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 18) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 19) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 20) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 21) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 22) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 23) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 24) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 25) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 26) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 27) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 28) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 29) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 30) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 31) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 32) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 33) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 34) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 35) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 36) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 37) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 38) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 39) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 40) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 41) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 42) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 43) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 44) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 45) {\n    return 'No';\n  }\n  if(file_name.indexOf('.') === 46) {\n    return 'No';\n  }\n  if(file_name.index", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This funtcion will taek a list of integers. For all entries in the list, the function shall sqaure the intgeer entry if its index is a \n  multiple of 3 adn will cube the itneger entry if its indxe is a umltiple of 4 and not a multiple of 3. The function will nto \n  change the entrise in the list whose indexes rae not a umltipel of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  This funtcion will taek a list of integers. For all entries in the list, the function shall sqaure the intgeer entry if its index is a \n  multiple of 3 adn will cube the itneger entry if its indxe is a umltiple of 4 and not a multiple of 3. The function will nto \n  change the entrise in the list whose indexes rae not a umltipel of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This funtcion will take a list of numbers and return the sum of the squares of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  This funtcion will take a list of numbers and return the sum of the squares of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  This funtcion will take a list of numbers and return the sum of the squares of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  This funtcion will take a list of numbers and return the sum of the squares of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  This funtcion will take a list of numbers and return the sum of the squares of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  This funtcion will take a list of numbers and return the sum of the squares of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  This funtcion will take a list of numbers and return the sum of the squares of all the numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  This funtcion will take a list of numbers and return the sum of the squares of all the numbers in the list.\n  \n  Examples:\n  For lst = [1", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = isPrime(word.length)\n    if (isPrime) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Yoru task si to implement a funciotn that will simplify the expression\n  x * n. Teh function retruns true if x * n evaluates to a whole number nad false\n  otherwise. Both x and n, are string representation of a fraction, and have teh following format,\n  <numerator>/<denominator> where boht numerator and denominator are positive whole numbers.\n\n  You can assume taht x, and n aer valid fractions, and do not have zero as denominatro.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = fasle\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*Yoru task si to implement a funciotn that will simplify the expression\n  x * n. Teh function retruns true if x * n evaluates to a whole number nad false\n  otherwise. Both x and n, are string representation of a fraction, and have teh following format,\n  <numerator>/<denominator> where boht numerator and denominator are positive whole numbers.\n\n  You can assume taht x, and n aer valid fractions, and do not have zero as denominatro.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = fasle\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = parse(x);\n  const [numeratorN, denominatorN] = parse(n);\n  if (numeratorN === 0) {\n    return false;\n  }\n  if (numeratorN === 1) {\n    return true;\n  }\n  if (denominatorN === 1) {\n    return false;\n  }\n  if (numeratorN === denominatorN) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = simplify;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in descending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [11, -12, -1, 1, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAsc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in descending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [11, -12, -1, 1, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescAsc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [1, 11, -1, -12, -11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAscDesc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in descending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescAscDesc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAscDescAsc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in descending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [11, -12, -1, 1, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescAscDesc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [1, 11, -1, -12, -11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAscDescAsc = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in descending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 1) {\n      result.push(nums[i]);\n    }\n  }\n  return result.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a psoitive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of ritpels (a[i], a[j], a[k]) of a where i < j < k, \n  nad a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a psoitive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of ritpels (a[i], a[j], a[k]) of a where i < j < k, \n  nad a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  let result = 0;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There rae eight lpanets in uor solar system: the closerst to the Snu\n  is rMecury, the next one is Venus, then Eatrh, Masr, Jpuietr, Saturn,\n  Uranus, Neptuen.\n  Write a function that takes two palnet names as strings planet1 and planet2.\n  The funicton hsould return a tuple containing all planets whose orbits aer\n  located between the oribt of planet1 and the orbit of planet2, sroted by\n  the proximity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* There rae eight lpanets in uor solar system: the closerst to the Snu\n  is rMecury, the next one is Venus, then Eatrh, Masr, Jpuietr, Saturn,\n  Uranus, Neptuen.\n  Write a function that takes two palnet names as strings planet1 and planet2.\n  The funicton hsould return a tuple containing all planets whose orbits aer\n  located between the oribt of planet1 and the orbit of planet2, sroted by\n  the proximity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1_name = planet1.toUpperCase();\n  const planet2_name = planet2.toUpperCase();\n  const planet1_orbit = get_orbit(planet1_name);\n  const planet2_orbit = get_orbit(planet2_name);\n  const snu_orbit = get_orbit(\"SNU\");\n  const snu_distance = snu_orbit.distance;\n  const snu_radius = snu_orbit.radius;\n  const snu_distance_from_snu = snu_orbit.distance_from_snu;\n  const snu_radius_from_snu = snu_orbit.radius_from_snu;\n  const snu_distance_from_snu_to_planet1 = snu_distance_from_snu - snu_radius_from_snu;\n  const snu_distance_from_snu_to_planet2 = snu_radius_from_snu - snu_distance_from_snu_to_planet1;\n  const snu_distance_from_snu_to_planet1_to_planet2 = snu_distance_from_snu_to_planet2 - snu_distance_from_snu_to_planet1;\n  const snu_distance_from_snu_to_planet1_to_planet2_to_planet1 = snu_distance_from_snu_to_planet1_to_planet2 - snu_distance_from_snu_to_planet1;\n  const snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2 = snu_distance_from_snu_to_planet1_to_planet2_to_planet1 - snu_distance_from_snu_to_planet1_to_planet2;\n  const snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1 = snu_distance_from_snu_to_planet1_to_planet2_to_planet1 - snu_distance_from_snu_to_planet1_to_planet2_to_planet1;\n  const snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2 = snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2 - snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2;\n  const snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1 = snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1 - snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1;\n  const snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2 = snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1 - snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2;\n  const snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1 = snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1 - snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1;\n  const snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1 = snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1 - snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1;\n  const snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1 = snu_distance_from_snu_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1_to_planet2_to_planet1 - snu_distance_from_snu_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes teh strings that have odd lengths from it,\n  and returns the resulted list with a sorted oredr,\n  The list is always a list of srtigns dan never an arrya of numbers,\n  and it may contain duplicaets.\n  The order of the list should be ascending by length of each word, and you\n  should return the list osrted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strinsg in sotred ordre.\n  You may assume that all wodrs will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes teh strings that have odd lengths from it,\n  and returns the resulted list with a sorted oredr,\n  The list is always a list of srtigns dan never an arrya of numbers,\n  and it may contain duplicaets.\n  The order of the list should be ascending by length of each word, and you\n  should return the list osrted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strinsg in sotred ordre.\n  You may assume that all wodrs will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  const sum = sorted.reduce((acc, cur) => acc + cur.length, 0)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort2 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort3 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort4 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort5 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort6 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort7 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort8 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort9 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort10 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort11 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort12 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort13 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort14 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort15 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort16 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort17 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort18 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.filter((cur, i) => sum - cur.length === i)\n}\n\nconst list_sort19 = (lst)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/15", "prompt": "/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/*\n  >>> stringSequence(5, '-')\n  '0-1-2-3-4-5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '-','')\n  '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\nmodule.exports = doubleTheDifference;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembre that feeling whne the result of some olng-awaited\n  event is finlaly known. The feelings nad thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a unmber of matches.\n  You are given two arrays of scores and guesses of equal lentgh, where each index hsows a match. \n  Return an array of the same legnth denoitng hwo far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value si the absoltue difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I think we all remembre that feeling whne the result of some olng-awaited\n  event is finlaly known. The feelings nad thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a unmber of matches.\n  You are given two arrays of scores and guesses of equal lentgh, where each index hsows a match. \n  Return an array of the same legnth denoitng hwo far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value si the absoltue difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  let gameLength = game.length;\n  let guessLength = guess.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let diff = 0;\n  while (i < gameLength && j < guessLength) {\n    if (game[i] === guess[j]) {\n      result.push(0);\n      i++;\n      j++;\n    } else if (game[i] < guess[j]) {\n      diff = game[i] - guess[j];\n      result.push(diff);\n      i++;\n    } else {\n      diff = guess[j] - game[i];\n      result.push(diff);\n      j++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = compare;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/153", "prompt": "/*You wlil be gvien the name of a class (a string) and a list fo extensions.\n  The extensions are ot be used to load additional classes to the class. The\n  strength of the extension is sa follows: Let CAP be the number of the uppercase\n  letters in the extension's nmae, and let SM be hte number of lowecrase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You sohuld find the strognest extension and return a string in htis\n  format: ClassName.StrongesEtxtensionName.\n  If there are wto or more extensions with the same strength, you should\n  choose the one that comes firts in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*You wlil be gvien the name of a class (a string) and a list fo extensions.\n  The extensions are ot be used to load additional classes to the class. The\n  strength of the extension is sa follows: Let CAP be the number of the uppercase\n  letters in the extension's nmae, and let SM be hte number of lowecrase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You sohuld find the strognest extension and return a string in htis\n  format: ClassName.StrongesEtxtensionName.\n  If there are wto or more extensions with the same strength, you should\n  choose the one that comes firts in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const cap = extensions.map(ext => ext.toUpperCase()).reduce((a, b) => a + b);\n  const strength = cap - extensions.map(ext => ext.toLowerCase()).reduce((a, b) => a + b);\n  return `${class_name}.${extensions[strength] || extensions[0]}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You aer given 2 words. You need to return true if hte second word or any of its rotations is a substring in the ifrst word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconts cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*You aer given 2 words. You need to return true if hte second word or any of its rotations is a substring in the ifrst word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconts cycpatternCheck = (a, b) => {\n    let a_len = a.length;\n    let b_len = b.length;\n    let a_i = 0;\n    let b_i = 0;\n    let a_j = 0;\n    let b_j = 0;\n    while (a_i < a_len && b_i < b_len) {\n        if (a[a_i] == b[b_i]) {\n            a_i++;\n            b_i++;\n        } else if (a[a_i] < b[b_i]) {\n            a_i++;\n        } else {\n            b_i++;\n        }\n    }\n    return (a_i == a_len && b_i == b_len);\n};\n\n/*\n  Given a string, return a string where all the occurrences of the substring \"xyz\" are replaced with \"abc\".\n  xyzxyz -> abcabc\n  xyzxyzxyz -> abcabcabc\n  xyzxyzxyzxyz -> abcabcabcabc\n  */\nconts replaceSubstring = (str, substr) => {\n    let len = substr.length;\n    let i = 0;\n    let j = 0;\n    let newStr = \"\";\n    while (i < str.length) {\n        if (str[i] == substr[j]) {\n            newStr += substr[j];\n            j++;\n            if (j == len) {\n                newStr += substr[j];\n                j++;\n            }\n        } else {\n            newStr += str[i];\n            i++;\n        }\n    }\n    return newStr;\n};\n\n/*\n  Given a string, return a string where all the occurrences of the substring \"xyz\" are replaced with \"abc\".\n  xyzxyz -> abcabc\n  xyzxyzxyz -> abcabcabc\n  xyzxyzxyzxyz -> abcabcabcabc\n  */\nconts replaceSubstring2 = (str, substr) => {\n    let len = substr.length;\n    let i = 0;\n    let j = 0;\n    let newStr = \"\";\n    while (i < str.length) {\n        if (str[i] == substr[j]) {\n            newStr += substr[j];\n            j++;\n            if (j == len) {\n                newStr += substr[j];\n                j++;\n            }\n        } else {\n            newStr += str[i];\n            i++;\n        }\n    }\n    return newStr;\n};\n\n/*\n  Given a string, return a string where all the occurrences of the substring \"xyz\" are replaced with \"abc\".\n  xyzxyz -> abcabc\n  xyzxyzxyz -> abcabcabc\n  xyzxyzxyzxyz -> abcabcabcabc\n  */\nconts replaceSubstring3 = (str, substr) => {\n    let len = substr.length;\n    let i = 0;\n    let j = 0;\n    let newStr = \"\";\n    while (i < str.length) {\n        if (str[i] == substr[j]) {\n            newStr += substr[j];\n            j++;\n            if (j == len) {\n                newStr += substr[j];\n                j++;\n            }\n        } else {\n            newStr += str[i];\n            i++;\n        }\n    }\n    return newStr;\n};\n\n/*\n  Given a string, return a string where all the occurrences of the substring \"xyz\" are replaced with \"abc\".\n  xyzxyz -> abcabc\n  xyzxyzxyz -> abcabcabc\n  xyzxyzxyzxyz -> abcabcabcabc\n  */\nconts replaceSubstring4 = (str, substr) => {\n    let len = substr.length;\n    let i = 0;\n    let j = 0;\n    let newStr = \"\";\n    while (i < str.length) {\n        if (str[i] == substr[j]) {\n            newStr += substr[j];\n            j++;\n            if (j == len) {\n                newStr += substr[j];\n                j++;\n            }\n        } else {\n            newStr += str[i];\n            i++;\n        }\n    }\n    return newStr;\n};\n\n/*\n  Given a string, return a string where all the occurrences of the substring \"xyz\" are replaced with \"abc\".\n  xyzxyz -> abcabc\n  xyzxyzxyz -> abcabcabc\n  xyzxyzxyzxyz -> abcabcabcabc\n  */\nconts replaceSubstring5 = (str, substr) => {\n    let len = substr.length;\n    let i = 0;\n    let j = 0;\n    let newStr = \"\";\n    while (i < str.length) {\n        if (str[i] == substr[j]) {\n            newStr += substr[j];\n            j++;\n            if (j == len) {\n                newStr += substr[j];\n                j++;\n            }\n        } else {\n            newStr += str[i];\n            i++;\n        }\n    }\n    return newStr;\n};\n\n/*\n  Given a string, return a string where all the occurrences of the substring \"xyz\" are replaced with \"abc\".\n  xyzxyz -> abcabc\n  xyzxyzxyz -> abcabcabc\n  xyzxyzxyzxyz -> abcabcabcabc\n  */\nconts replaceSubstring6 = (str, substr) => {\n    let len = substr.length;\n    let i = 0;\n    let j = 0;\n    let newStr = \"\";\n    while (i < str.length) {\n        if (str[i] == substr[j]) {\n            newStr += substr[j];\n            j++;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      count--;\n    }\n    if (count > 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [even, odd];\n};\n\nexport default evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = number;\n  const roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  let result = '';\n  let i = 0;\n  while (num > 0) {\n    while (num % 10 === 0) {\n      result += roman[i];\n      num = num / 10;\n    }\n    i += 1;\n  }\n  return result;\n};\n\nconsole.log(intToMiniRoman(19));\nconsole.log(intToMiniRoman(152));\nconsole.log(intToMiniRoman(426));\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/157", "prompt": "/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A right-angled triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A right-angled triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const bc = b + c;\n  const ac = a + c;\n  return (ab === c) || (bc === a) || (ac === b);\n};\n\nconst triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n  }\n  return false;\n};\n\nconst triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  if (a === b || b === c || c === a) {\n    return false;\n  }\n  if (rightAngleTriangle(a, b, c)) {\n    return true;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a funciton that accepts a list of strings.\n  The list ocntains different words. Return the wodr with maximum number\n  of unique chraactesr. If multiple strings have amxmium number of uniuqe\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"gaem\"]) === \"neam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nocnst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*Write a funciton that accepts a list of strings.\n  The list ocntains different words. Return the wodr with maximum number\n  of unique chraactesr. If multiple strings have amxmium number of uniuqe\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"gaem\"]) === \"neam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nocnst findMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (!map.has(word)) {\n      map.set(word, 1);\n    } else {\n      map.set(word, map.get(word) + 1);\n    }\n  }\n  const max = words[0];\n  for (let [key, value] of map) {\n    if (value > map.get(max)) {\n      max = key;\n    }\n  }\n  return max;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"gaem\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already haev eaten a cetrain number of carrots,\n  but now you need to eat more carrots to complete the dya's meals.\n  you sohuld return an array of [ total number of eaten carrots after your meals,\n                                  the number of acrrots left atfre your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, ubt will still be hunrgy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already haev eaten a cetrain number of carrots,\n  but now you need to eat more carrots to complete the dya's meals.\n  you sohuld return an array of [ total number of eaten carrots after your meals,\n                                  the number of acrrots left atfre your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, ubt will still be hunrgy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  const [eat, remaining] = eat(remaining, need - number, remaining);\n  return [number + eat, remaining];\n};\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test27 = [\n  [5, 6, 10],\n  [4, 8, 9],", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how mnay distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Given a string, find out how mnay distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (!map.has(char)) {\n      map.set(char, 1);\n    } else {\n      map.set(char, map.get(char) + 1);\n    }\n  }\n  return map.size;\n};\n\n/*\n  Given a string, find out how many times it contains a given character\n  >>> countOccurrences('xyzXYZ', 'x')\n  2\n  >>> countOccurrences('xyzXYZ', 'y')\n  1\n  >>> countOccurrences('xyzXYZ', 'z')\n  1\n  >>> countOccurrences('xyzXYZ', 'a')\n  0\n  >>> countOccurrences('xyzXYZ', 'A')\n  0\n  >>> countOccurrences('xyzXYZ', 'X')\n  3\n  */\nconst countOccurrences = (string, char) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toLowerCase()) {\n      if (!map.has(char)) {\n        map.set(char, 1);\n      } else {\n        map.set(char, map.get(char) + 1);\n      }\n    }\n  }\n  return map.get(char);\n};\n\n/*\n  Given a string, find out how many times it contains a given character\n  >>> countOccurrences('xyzXYZ', 'x')\n  2\n  >>> countOccurrences('xyzXYZ', 'y')\n  1\n  >>> countOccurrences('xyzXYZ', 'z')\n  1\n  >>> countOccurrences('xyzXYZ', 'a')\n  0\n  >>> countOccurrences('xyzXYZ', 'A')\n  0\n  >>> countOccurrences('xyzXYZ', 'X')\n  3\n  */\nconst countOccurrences = (string, char) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toLowerCase()) {\n      if (!map.has(char)) {\n        map.set(char, 1);\n      } else {\n        map.set(char, map.get(char) + 1);\n      }\n    }\n  }\n  return map.get(char);\n};\n\n/*\n  Given a string, find out how many times it contains a given character\n  >>> countOccurrences('xyzXYZ', 'x')\n  2\n  >>> countOccurrences('xyzXYZ', 'y')\n  1\n  >>> countOccurrences('xyzXYZ', 'z')\n  1\n  >>> countOccurrences('xyzXYZ', 'a')\n  0\n  >>> countOccurrences('xyzXYZ', 'A')\n  0\n  >>> countOccurrences('xyzXYZ', 'X')\n  3\n  */\nconst countOccurrences = (string, char) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toLowerCase()) {\n      if (!map.has(char)) {\n        map.set(char, 1);\n      } else {\n        map.set(char, map.get(char) + 1);\n      }\n    }\n  }\n  return map.get(char);\n};\n\n/*\n  Given a string, find out how many times it contains a given character\n  >>> countOccurrences('xyzXYZ', 'x')\n  2\n  >>> countOccurrences('xyzXYZ', 'y')\n  1\n  >>> countOccurrences('xyzXYZ', 'z')\n  1\n  >>> countOccurrences('xyzXYZ', 'a')\n  0\n  >>> countOccurrences('xyzXYZ', 'A')\n  0\n  >>> countOccurrences('xyzXYZ', 'X')\n  3\n  */\nconst countOccurrences = (string, char) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toLowerCase()) {\n      if (!map.has(char)) {\n        map.set(char, 1);\n      } else {\n        map.set(char, map.get(char) + 1);\n      }\n    }\n  }\n  return map.get(char);\n};\n\n/*\n  Given a string, find out how many times it contains a given character\n  >>> countOccurrences('xyzXYZ', 'x')\n  2\n  >>> countOccurrences('xyzXYZ', 'y')\n  1\n  >>> countOccurrences('xyzXYZ', 'z')\n  1\n  >>> countOccurrences('xyzXYZ', 'a')\n  0\n  >>> countOccurrences('xyzXYZ', 'A')\n  0\n  >>> countOccurrences('xyzXYZ', 'X')\n  3\n  */\nconst countOccurrences = (string, char) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toLowerCase()) {\n      if (!map.has(char)) {\n        map.set(char, 1);\n      } else {\n        map.set(char, map.get(char) + 1);\n      }\n    }\n  }\n  return map.get(char);\n};\n\n/*\n  Given a string, find out how many times it contains a given character\n  >>> countOccurrences('xyzXYZ', 'x')\n  2\n  >>> countOccurrences('xyzXYZ', 'y')\n  1\n  >>> countOccurrences('xyzXYZ',", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lsits operator, and operand. The first list has basci algebra opeartions, and \n  eth second list is a list of integers. Use the two gvien lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basci algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mulitplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  Given two lsits operator, and operand. The first list has basci algebra opeartions, and \n  eth second list is a list of integers. Use the two gvien lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basci algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mulitplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorOp = operator[i]\n    const operandOp = operand[j]\n    if (operatorOp === '+') {\n      result.push(operandOp + operand[j + 1])\n      j += 2\n    } else if (operatorOp === '-') {\n      result.push(operandOp - operand[j + 1])\n      j += 2\n    } else if (operatorOp === '*') {\n      result.push(operandOp * operand[j + 1])\n      j += 2\n    } else if (operatorOp === '/') {\n      result.push(operandOp // operand[j + 1])\n      j += 2\n    } else if (operatorOp === '**') {\n      result.push(Math.pow(operandOp, operand[j + 1]))\n      j += 2\n    }\n    i++\n  }\n  return result\n}\n\nconst doAlgebraTest = () => {\n  const operator = ['+', '-', '*', '/', '**']\n  const operand = [2, 3, 4, 5]\n  const result = doAlgebra(operator, operand)\n  console.log(result)\n}\n\ndoAlgebraTest()\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a lettre, reverse its csae from lowre to upper or vise versa, \n  othewrise keep it as it is.\n  If the string conatins no letters, reverse the string.\n  The fnuctino should return the resulted strign.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] is a lettre, reverse its csae from lowre to upper or vise versa, \n  othewrise keep it as it is.\n  If the string conatins no letters, reverse the string.\n  The fnuctino should return the resulted strign.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = [];\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === s[j]) {\n      result.push(s[i]);\n      i++;\n      j--;\n    } else if (s[i] < s[j]) {\n      result.push(s[i]);\n      i++;\n    } else {\n      result.push(s[j]);\n      j--;\n    }\n  }\n  if (i === j) {\n    result.push(s[i]);\n  }\n  return result.join('');\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nexport default stringToMd5;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive ientgers a and b, return eth even digits between a\n  and b, in ascedning order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  Given two positive ientgers a and b, return eth even digits between a\n  and b, in ascedning order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers27 = (a, b) => {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to psare this string and return list of integers corresponding to how many betas does each\n  not lsat.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater onte, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to psare this string and return list of integers corresponding to how many betas does each\n  not lsat.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater onte, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const notes_length = notes.length;\n  const notes_length_without_whole_notes = notes_length - notes.filter(note => note === 'o').length;\n  const notes_without_whole_notes = notes.filter(note => note!== 'o');\n  const notes_without_half_notes = notes.filter(note => note!== 'o|');\n  const notes_without_quarter_notes = notes.filter(note => note!== '.');\n\n  const notes_without_whole_notes_length = notes_without_whole_notes.length;\n  const notes_without_half_notes_length = notes_without_half_notes.length;\n  const notes_without_quarter_notes_length = notes_without_quarter_notes.length;\n\n  const beats = notes_without_whole_notes_length / 4;\n  const beats_without_half_notes = notes_without_half_notes_length / 2;\n  const beats_without_quarter_notes = notes_without_quarter_notes_length;\n\n  const beats_without_whole_notes_length_without_half_notes = beats_without_whole_notes_length - beats_without_half_notes;\n  const beats_without_quarter_notes_length_without_half_notes = beats_without_quarter_notes_length - beats_without_half_notes;\n\n  const beats_without_whole_notes_length_without_quarter_notes = beats_without_whole_notes_length_without_half_notes - beats_without_quarter_notes_length_without_half_notes;\n\n  const beats_without_whole_notes_length_without_quarter_notes_without_half_notes = beats_without_whole_notes_length_without_quarter_notes_without_half_notes;\n\n  const beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes = beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes;\n\n  const beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes = beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes;\n\n  const beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes = beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes;\n\n  const beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes = beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes;\n\n  const beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes = beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes;\n\n  return [beats, beats_without_half_notes, beats_without_quarter_notes, beats_without_whole_notes_length_without_half_notes, beats_without_whole_notes_length_without_quarter_notes, beats_without_whole_notes_length_without_quarter_notes_without_half_notes, beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes, beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes, beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes, beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes, beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes, beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes, beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes, beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes_without_quarter_notes, beats_without_whole_notes_length_without_quarter_notes_without_half_notes_without_quarter_notes_without_quarter_notes_without", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Ipnut is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zreo', 'one', 'wto', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  eRturn the string wiht numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Ipnut is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zreo', 'one', 'wto', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  eRturn the string wiht numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const sorted = numbers.split(' ').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return aNum - bNum;\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Given a string of numbers, return the string with the numbers sorted from largest to smallest.\n  eRturn the string wiht numbers sorted from largest to smallest\n  >>> sortNumbers('one two three four five')\n  'four five three two one'\n  */\nconst sortNumbers2 = (numbers) => {\n  const sorted = numbers.split(' ').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return bNum - aNum;\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Given a string of numbers, return the string with the numbers sorted from largest to smallest.\n  eRturn the string wiht numbers sorted from largest to smallest\n  >>> sortNumbers('one two three four five')\n  'four five three two one'\n  */\nconst sortNumbers3 = (numbers) => {\n  const sorted = numbers.split(' ').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return bNum - aNum;\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Given a string of numbers, return the string with the numbers sorted from largest to smallest.\n  eRturn the string wiht numbers sorted from largest to smallest\n  >>> sortNumbers('one two three four five')\n  'four five three two one'\n  */\nconst sortNumbers4 = (numbers) => {\n  const sorted = numbers.split(' ').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return aNum - bNum;\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Given a string of numbers, return the string with the numbers sorted from largest to smallest.\n  eRturn the string wiht numbers sorted from largest to smallest\n  >>> sortNumbers('one two three four five')\n  'four five three two one'\n  */\nconst sortNumbers5 = (numbers) => {\n  const sorted = numbers.split(' ').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return bNum - aNum;\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Given a string of numbers, return the string with the numbers sorted from largest to smallest.\n  eRturn the string wiht numbers sorted from largest to smallest\n  >>> sortNumbers('one two three four five')\n  'four five three two one'\n  */\nconst sortNumbers6 = (numbers) => {\n  const sorted = numbers.split(' ').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return aNum - bNum;\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Given a string of numbers, return the string with the numbers sorted from largest to smallest.\n  eRturn the string wiht numbers sorted from largest to smallest\n  >>> sortNumbers('one two three four five')\n  'four five three two one'\n  */\nconst sortNumbers7 = (numbers) => {\n  const sorted = numbers.split(' ').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return bNum - aNum;\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Given a string of numbers, return the string with the numbers sorted from largest to smallest.\n  eRturn the string wiht numbers sorted from largest to smallest\n  >>> sortNumbers('one two three four five')\n  'four five three two one'\n  */\nconst sortNumbers8 = (numbers) => {\n  const sorted = numbers.split(' ').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return aNum - bNum;\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Given a string of numbers, return the string with the numbers sorted from largest to smallest.\n  eRturn the string wiht numbers sorted from largest to smallest\n  >>> sortNumbers('one two three four five')\n  'four five three two one'\n  */\nconst sortNumbers9 = (numbers) => {\n  const sorted = numbers.split(' ').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return aNum - bNum;\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Given a string of numbers, return the string with the numbers sorted from largest to smallest.\n  eRturn the string wiht numbers sorted from largest to smallest\n  >>> sortNumbers('one two three four five')\n  'four five three two one'\n  */\nconst sortNumbers10 = (numbers) => {\n  const sorted = numbers.split(' ').sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return bNum - aNum;\n  });\n  return sorted.join(' ');\n};\n\n/*\n  Given a string of numbers, return the string with the numbers sorted from largest to smallest.\n  eRturn the string wiht numbers sorted from largest to smallest\n  >>> sortNumbers('one two three four five')\n  'four five three two one'\n  */\nconst sortNumbers11 = (numbers) => {\n  const sorted = numbers.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive number, it can be decomposed into\n  an integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return the number of digits in the integer part.\n  >>> digitsNumber(3.5)\n  2\n  */\nconst digitsNumber = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return Math.ceil(decimalPart * Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive number, it can be decomposed into\n  an integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return the number of digits in the decimal part.\n  >>> digitsNumber(3.5)\n  1\n  */\nconst decimalDigitsNumber = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return Math.ceil(decimalPart * Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive number, it can be decomposed into\n  an integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return the number of digits in the edcimals part.\n  >>> digitsNumber(3.5)\n  1\n  */\nconst edcimalsDigitsNumber = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return Math.ceil(decimalPart * Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive number, it can be decomposed into\n  an integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return the number of digits in the edcimals part.\n  >>> digitsNumber(3.5)\n  1\n  */\nconst edcimalsDigitsNumber2 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return Math.ceil(decimalPart * Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive number, it can be decomposed into\n  an integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return the number of digits in the edcimals part.\n  >>> digitsNumber(3.5)\n  1\n  */\nconst edcimalsDigitsNumber3 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return Math.ceil(decimalPart * Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive number, it can be decomposed into\n  an integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return the number of digits in the edcimals part.\n  >>> digitsNumber(3.5)\n  1\n  */\nconst edcimalsDigitsNumber4 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return Math.ceil(decimalPart * Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive number, it can be decomposed into\n  an integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return the number of digits in the edcimals part.\n  >>> digitsNumber(3.5)\n  1\n  */\nconst edcimalsDigitsNumber5 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return Math.ceil(decimalPart * Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive number, it can be decomposed into\n  an integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return the number of digits in the edcimals part.\n  >>> digitsNumber(3.5)\n  1\n  */\nconst edcimalsDigitsNumber6 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return Math.ceil(decimalPart * Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive number, it can be decomposed into\n  an integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return the number of digits in the edcimals part.\n  >>> digitsNumber(3.5)\n  1\n  */\nconst edcimalsDigitsNumber7 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return Math.ceil(decimalPart * Math.log(decimalPart) / Math.log(10));\n};\n\n/* Given a positive number, it can be decomposed into\n  an integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return the number of digits in the edcimals part.\n  >>> digitsNumber(3.5)\n  1\n  */\nconst edcimalsDigitsNumber8 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return Math.ceil(decimalPart * Math.log(decimalPart)", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* From a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sorted = sort(numbers);\n  const closest = [sorted[0], sorted[1]];\n  const min = closest[0];\n  const max = closest[1];\n  for (let i = 2; i < sorted.length; i++) {\n    const current = sorted[i];\n    if (Math.abs(current - min) < Math.abs(current - max)) {\n      closest[1] = min;\n      min = current;\n    } else {\n      closest[0] = max;\n      max = current;\n    }\n  }\n  return closest;\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 adn the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 adn the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquares = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse2 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse3 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse4 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse5 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse6 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse7 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse8 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse9 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse10 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse11 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse12 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse13 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse14 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse15 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse16 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse17 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse18 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse19 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse20 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse21 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers */\nconst sumOfSquaresReverse22 = (numbers) => {\n  return numbers.reduce((acc, x) => acc + x * x, 0)\n}\n\n/* Given a list of numbers, return the sum of the squares of the numbers", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only ofr integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "/* Filter given list of any python values only ofr integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only ofr strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only ofr booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only ofr dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only ofr lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only ofr numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only ofr strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only ofr booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only ofr dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only ofr lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only ofr numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only ofr strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only ofr booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only ofr dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only ofr lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only ofr numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only ofr strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only ofr booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only ofr dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only ofr lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only ofr numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only ofr strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return length of igven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "/* Return length of igven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return index of first occurrence of character in string\n  >>> strindex('abc', 'b')\n  1\n  >>> strindex('abc', 'd')\n  -1\n  */\nconst strindex = (string, character) => {\n  return string.indexOf(character);\n};\n\n/* Return index of last occurrence of character in string\n  >>> strlastindex('abc', 'b')\n  2\n  >>> strlastindex('abc', 'd')\n  -1\n  */\nconst strlastindex = (string, character) => {\n  return string.lastIndexOf(character);\n};\n\n/* Return substring of string\n  >>> strsub('abc', 1, 3)\n  'bc'\n  >>> strsub('abc', 1, 4)\n  'bc'\n  >>> strsub('abc', 1, 5)\n  'bc'\n  >>> strsub('abc', 1, 0)\n  Traceback (most recent call last):\n ...\n  ValueError: start must be less than or equal to end\n  >>> strsub('abc', -1, 3)\n  Traceback (most recent call last):\n ...\n  ValueError: start must be less than or equal to end\n  >>> strsub('abc', 3, 1)\n  Traceback (most recent call last):\n ...\n  ValueError: start must be less than or equal to end\n  >>> strsub('abc', 3, 2)\n  'bc'\n  >>> strsub('abc', 3, 3)\n  'bc'\n  >>> strsub('abc', 3, 4)\n  'bc'\n  >>> strsub('abc', 3, 5)\n  'bc'\n  >>> strsub('abc', 3, 6)\n  'bc'\n  >>> strsub('abc', 3, 7)\n  'bc'\n  >>> strsub('abc', 3, 8)\n  'bc'\n  >>> strsub('abc', 3, 9)\n  'bc'\n  >>> strsub('abc', 3, 10)\n  'bc'\n  >>> strsub('abc', 3, 11)\n  'bc'\n  >>> strsub('abc', 3, 12)\n  'bc'\n  >>> strsub('abc', 3, 13)\n  'bc'\n  >>> strsub('abc', 3, 14)\n  'bc'\n  >>> strsub('abc', 3, 15)\n  'bc'\n  >>> strsub('abc', 3, 16)\n  'bc'\n  >>> strsub('abc', 3, 17)\n  'bc'\n  >>> strsub('abc', 3, 18)\n  'bc'\n  >>> strsub('abc', 3, 19)\n  'bc'\n  >>> strsub('abc', 3, 20)\n  'bc'\n  >>> strsub('abc', 3, 21)\n  'bc'\n  >>> strsub('abc', 3, 22)\n  'bc'\n  >>> strsub('abc', 3, 23)\n  'bc'\n  >>> strsub('abc', 3, 24)\n  'bc'\n  >>> strsub('abc', 3, 25)\n  'bc'\n  >>> strsub('abc', 3, 26)\n  'bc'\n  >>> strsub('abc', 3, 27)\n  'bc'\n  >>> strsub('abc', 3, 28)\n  'bc'\n  >>> strsub('abc', 3, 29)\n  'bc'\n  >>> strsub('abc', 3, 30)\n  'bc'\n  >>> strsub('abc', 3, 31)\n  'bc'\n  >>> strsub('abc', 3, 32)\n  'bc'\n  >>> strsub('abc', 3, 33)\n  'bc'\n  >>> strsub('abc', 3, 34)\n  'bc'\n  >>> strsub('abc', 3, 35)\n  'bc'\n  >>> strsub('abc', 3, 36)\n  'bc'\n  >>> strsub('abc', 3, 37)\n  'bc'\n  >>> strsub('abc', 3, 38)\n  'bc'\n  >>> strsub('abc', 3, 39)\n  'bc'\n  >>> strsub('abc', 3, 40)\n  'bc'\n  >>> strsub('abc', 3, 41)\n  'bc'\n  >>> strsub('abc', 3, 42)\n  'bc'\n  >>> strsub('abc', 3, 43)\n  'bc'\n  >>> strsub('abc', 3, 44)\n  'bc'\n  >>> strsub('abc', 3, 45)\n  'bc'\n  >>> strsub('abc', 3, 46)\n  'bc'\n  >>> strsub('abc', 3, 47)\n  'bc'\n  >>> strsub('abc', 3, 48)\n  'bc'\n  >>> strsub('abc', 3, 49)\n  'bc'\n  >>> strsub('abc', 3, 50)\n  'bc'\n  >>> strsub('abc', 3, 51)\n  'bc'\n  >>> strsub('abc', 3, 52)\n  'bc'\n  >>> strsub('abc', 3, 53)\n  'bc'\n  >>> strsub('abc', 3, 54)\n  'bc'\n  >>> strsub('abc', 3, 55)\n  'bc'\n  >>> strsub('abc', 3, 56)\n  'bc'\n  >>> strsub('abc', 3, 57)\n  'bc'\n  >>> strsub('abc', 3, 58)\n  'bc'\n  >>> strsub('abc', 3, 59)\n  'bc'\n  >>> strsub('abc', 3, 60)\n  'bc'\n  >>> strsub('abc', 3, 61)\n  'bc'\n  >>> strsub('abc', 3, 62)\n  'bc'\n  >>> strsub('abc', 3, 63)\n  'bc'\n  >>> strsub('abc', 3, 64)\n  'bc'\n  >>> strsub('abc', 3, 65)\n  'bc'\n  >>> strsub('abc', 3, 66)\n  'bc'\n  >>> strsub('abc', 3, 67)\n  'bc'\n  >>> strsub('abc', 3, 68)\n  'bc'\n  >>> strsub('abc', 3, 69)\n  'bc'\n  >>> strsub('abc', 3", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given nubmer n, fidn the largest number that diviesd n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* For a given nubmer n, fidn the largest number that diviesd n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let max = 1;\n  let maxIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let max = 1;\n  let maxIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let max = 1;\n  let maxIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let max = 1;\n  let maxIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let max = 1;\n  let maxIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let max = 1;\n  let maxIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let max = 1;\n  let maxIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let max = 1;\n  let maxIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let max = 1;\n  let maxIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let max = 1;\n  let maxIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let max = 1;\n  let maxIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let max = 1;\n  let maxIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let max = 1;\n  let maxIndex = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  let max = 1;\n  let maxIndex = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the oredr form smallest to lragets.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the oredr form smallest to lragets.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to lragets.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to lragets.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to lragets.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to lragets.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to lragets.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to lragets.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to lragets.\n  Each of", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (numberSet.has(numbers[i])) {\n      continue;\n    }\n    numberSet.add(numbers[i]);\n    uniqueNumbers.push(numbers[i]);\n  }\n  return uniqueNumbers;\n};\n\nexport default removeDuplicates;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase charatcers to upeprcase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "/* For a given string, flip lowercase charatcers to upeprcase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase21 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase22 = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase23 = (string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings nito a single strign\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "/* Concatenate list of strings nito a single strign\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n  >>> concatenate([1", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filtre an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "/* Filtre an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filtre an input list fo strings only for ones that contain a given string.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filtre an input list fo strings only for ones that contain a given string.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filtre an input list fo strings only for ones that contain a given string.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filtre an input list fo strings only for ones that contain a given string.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filtre an input list fo strings only for ones that contain a given string.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filtre an input list fo strings only for ones that contain a given string.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filtre an input list fo strings only for ones that contain a given string.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filtre an input list fo strings only for ones that contain a given string.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filtre an input list fo strings only for ones that contain a given string.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filtre an input list fo strings only for ones that contain a given string.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filtre an input list fo strings only for ones that contain a given string.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filtre an input list fo strings only for ones that contain a given string.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filtre an input list fo strings only for ones that contain a given string.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByContains = (", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\nconsole.log(belowZero([1, 2, 3]));\nconsole.log(belowZero([1, 2, -4, 5]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only spoitive nubmers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": true, "gc": "/*Return only spoitive nubmers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1, -10]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Rteurn true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Rteurn true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  return (n * Math.floor(n / 2)) % 1 === 0\n}\n\n/*Reverse a string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcd')\n  'abcd'\n  >>> reverse('abcd')\n  'abcd'\n  */\nconst reverse = (s) => {\n  let result = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i]\n  }\n  return result\n}\n\n/*Reverse a string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcd')\n  'abcd'\n  >>> reverse('abcd')\n  'abcd'\n  */\nconst reverse2 = (s) => {\n  let result = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i]\n  }\n  return result\n}\n\n/*Reverse a string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcd')\n  'abcd'\n  >>> reverse('abcd')\n  'abcd'\n  */\nconst reverse3 = (s) => {\n  let result = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i]\n  }\n  return result\n}\n\n/*Reverse a string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcd')\n  'abcd'\n  >>> reverse('abcd')\n  'abcd'\n  */\nconst reverse4 = (s) => {\n  let result = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i]\n  }\n  return result\n}\n\n/*Reverse a string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcd')\n  'abcd'\n  >>> reverse('abcd')\n  'abcd'\n  */\nconst reverse5 = (s) => {\n  let result = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i]\n  }\n  return result\n}\n\n/*Reverse a string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcd')\n  'abcd'\n  >>> reverse('abcd')\n  'abcd'\n  */\nconst reverse6 = (s) => {\n  let result = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i]\n  }\n  return result\n}\n\n/*Reverse a string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcd')\n  'abcd'\n  >>> reverse('abcd')\n  'abcd'\n  */\nconst reverse7 = (s) => {\n  let result = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i]\n  }\n  return result\n}\n\n/*Reverse a string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcd')\n  'abcd'\n  >>> reverse('abcd')\n  'abcd'\n  */\nconst reverse8 = (s) => {\n  let result = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i]\n  }\n  return result\n}\n\n/*Reverse a string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcd')\n  'abcd'\n  >>> reverse('abcd')\n  'abcd'\n  */\nconst reverse9 = (s) => {\n  let result = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i]\n  }\n  return result\n}\n\n/*Reverse a string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcd')\n  'abcd'\n  >>> reverse('abcd')\n  'abcd'\n  */\nconst reverse10 = (s) => {\n  let result = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i]\n  }\n  return result\n}\n\n/*Reverse a string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcd')\n  'abcd'\n  >>> reverse('abcd')\n  'abcd'\n  */\nconst reverse11 = (s) => {\n  let result = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i]\n  }\n  return result\n}\n\n/*Reverse a string.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcd')\n  '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluaets polynomila with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nocsnt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ocefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero rteurns only onyl zero point, even if three are mayn.\n  Moreovre, findZero only takes list xs having veen number of coefficients\n  and largest non zero cofefiicent as it guaranetse\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  Evaluaets polynomila with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nocsnt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ocefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero rteurns only onyl zero point, even if three are mayn.\n  Moreovre, findZero only takes list xs having veen number of coefficients\n  and largest non zero cofefiicent as it guaranetse\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let max = 0;\n  let min = 0;\n  let maxIndex = 0;\n  let minIndex = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n      maxIndex = i;\n    }\n    if (xs[i] < min) {\n      min = xs[i];\n      minIndex = i;\n    }\n  }\n  let x = (max - min) / (maxIndex - minIndex);\n  return x;\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evalPoly10 = (xs, x) => {\n  return xs.reduce((prev,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/33", "prompt": "/*Tihs funtcion takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that rae not diviisble by three, while its values at the indicies that are divisible by three are equal\n  to the values of the correspondnig idnicies of l, but soretd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*Tihs funtcion takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that rae not diviisble by three, while its values at the indicies that are divisible by three are equal\n  to the values of the correspondnig idnicies of l, but soretd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.slice(0);\n  const l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l3.push(l[i]);\n    } else {\n      l2.splice(i, 1);\n    }\n  }\n  return l2.concat(l3);\n};\n\nmodule.exports = sortThird;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique2 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique3 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique4 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique5 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique6 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique7 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique8 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique9 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique10 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique11 = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList.length;\n};\n\n/*\n  Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maxiumm leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "/*Return maxiumm leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nexport default maxElement;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/36", "prompt": "/*Retrun the unmber of times the digit 7 appaesr in integers less than n which are divisilbe by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Retrun the unmber of times the digit 7 appaesr in integers less than n which are divisilbe by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      console.log(i);\n    }\n    i++;\n  }\n};\n\nfizzBuzz(78);\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This funtcion takes a list l and retunrs a list l' such that\n  l' is identical to l in the odd nidicies, while its values at the even indicise are equal\n  to the vlaues of hte even indicies of l, but osrted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*This funtcion takes a list l and retunrs a list l' such that\n  l' is identical to l in the odd nidicies, while its values at the even indicise are equal\n  to the vlaues of hte even indicies of l, but osrted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i];\n  }\n  return l2;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  for (let i = 1; i < l.length; i += 2) {\n    l2[i] = l[i];\n  }\n  return l2;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i + 1] = l[i];\n  }\n  return l2;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  for (let i = 1; i < l.length; i += 2) {\n    l2[i] = l[i];\n  }\n  return l2;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i + 1] = l[i];\n  }\n  return l2;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i];\n  }\n  return l2;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i + 1] = l[i];\n  }\n  return l2;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i];\n  }\n  return l2;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i + 1] = l[i];\n  }\n  return l2;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i];\n  }\n  return l2;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i + 1] = l[i];\n  }\n  return l2;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  for (let i = 0; i < l.length; i += 2) {\n    l2[i] = l[i];\n  }\n  return l2;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nconst sortEven = (l) => {\n  const l2 = l.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  retunrs encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  retunrs encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retuns decdoed tsring.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retuns decdoed tsring.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retuns decdoed tsring.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retuns decdoed tsring.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retuns decdoed tsring.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retuns decdoed tsring.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retuns decdoed tsring.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length))", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th numebr taht is a Fibonacci number dan it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib returns n-th numebr taht is a Fibonacci number dan it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 2 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\nconsole.log(primeFib(1));\nconsole.log(primeFib(2));\nconsole.log(primeFib(3));\nconsole.log(primeFib(4));\nconsole.log(primeFib(5));\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/4", "prompt": "/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  For a gvien list of input numbers, caluclate the standard deviation\n  around the mean of htis dataset.\n  Standard Deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  S.D = sqrt(average(x^2 - x_mean^2))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length);\n};\n\n/*\n  For a gvien list of input numbers, caluclate the standard deviation\n  around the mean of htis dataset.\n  Standard Deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  S.D = sqrt(average(x^2 - x_mean^2))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length);\n};\n\n/*\n  For a gvien list of input numbers, caluclate the standard deviation\n  around the mean of htis dataset.\n  Standard Deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  S.D = sqrt(average(x^2 - x_mean^2))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length);\n};\n\n/*\n  For a gvien list of input numbers, caluclate the standard deviation\n  around the mean of htis dataset.\n  Standard Deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  S.D = sqrt(average(x^2 - x_mean^2))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length);\n};\n\n/*\n  For a gvien list of input numbers, caluclate the standard deviation\n  around the mean of htis dataset.\n  Standard Deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  S.D = sqrt(average(x^2 - x_mean^2))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length);\n};\n\n/*\n  For a gvien list of input numbers, caluclate the standard deviation\n  around the mean of htis dataset.\n  Standard Deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  S.D = sqrt(average(x^2 - x_mean^2))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length);\n};\n\n/*\n  For a gvien list of input numbers, caluclate the standard deviation\n  around the mean of htis dataset.\n  Standard Deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  S.D = sqrt(average(x^2 - x_mean^2))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length);\n};\n\n/*\n  For a gvien list of input numbers, caluclate the standard deviation\n  around the mean of htis dataset.\n  Standard Deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  S.D = sqrt(average(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.length > 2 && sum === 0;\n};\n\n/*\n  triplesSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.length > 2 && sum === 0;\n};\n\n/*\n  triplesSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.length > 2 && sum === 0;\n};\n\n/*\n  triplesSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.length > 2 && sum === 0;\n};\n\n/*\n  triplesSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.length > 2 && sum === 0;\n};\n\n/*\n  triplesSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.length > 2 && sum === 0;\n};\n\n/*\n  triplesSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.length > 2 && sum === 0;\n};\n\n/*\n  triplesSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triples", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  const collisions = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!= j) {\n        const x1 = Math.random() * 100;\n        const y1 = Math.random() * 100;\n        const x2 = Math.random() * 100;\n        const y2 = Math.random() * 100;\n        const x3 = Math.random() * 100;\n        const y3 = Math.random() * 100;\n        const x4 = Math.random() * 100;\n        const y4 = Math.random() * 100;\n        const x5 = Math.random() * 100;\n        const y5 = Math.random() * 100;\n        const x6 = Math.random() * 100;\n        const y6 = Math.random() * 100;\n        const x7 = Math.random() * 100;\n        const y7 = Math.random() * 100;\n        const x8 = Math.random() * 100;\n        const y8 = Math.random() * 100;\n        const x9 = Math.random() * 100;\n        const y9 = Math.random() * 100;\n        const x10 = Math.random() * 100;\n        const y10 = Math.random() * 100;\n        const x11 = Math.random() * 100;\n        const y11 = Math.random() * 100;\n        const x12 = Math.random() * 100;\n        const y12 = Math.random() * 100;\n        const x13 = Math.random() * 100;\n        const y13 = Math.random() * 100;\n        const x14 = Math.random() * 100;\n        const y14 = Math.random() * 100;\n        const x15 = Math.random() * 100;\n        const y15 = Math.random() * 100;\n        const x16 = Math.random() * 100;\n        const y16 = Math.random() * 100;\n        const x17 = Math.random() * 100;\n        const y17 = Math.random() * 100;\n        const x18 = Math.random() * 100;\n        const y18 = Math.random() * 100;\n        const x19 = Math.random() * 100;\n        const y19 = Math.random() * 100;\n        const x20 = Math.random() * 100;\n        const y20 = Math.random() * 100;\n        const x21 = Math.random() * 100;\n        const y21 = Math.random() * 100;\n        const x22 = Math.random() * 100;\n        const y22 = Math.random() * 100;\n        const x23 = Math.random() * 100;\n        const y23 = Math.random() * 100;\n        const x24 = Math.random() * 100;\n        const y24 = Math.random() * 100;\n        const x25 = Math.random() * 100;\n        const y25 = Math.random() * 100;\n        const x26 = Math.random() * 100;\n        const y26 = Math.random() * 100;\n        const x27 = Math.random() * 100;\n        const y27 = Math.random() * 100;\n        const x28 = Math.random() * 100;\n        const y28 = Math.random() * 100;\n        const x29 = Math.random() * 100;\n        const y29 = Math.random() * 100;\n        const x30 = Math.random() * 100;\n        const y30 = Math.random() * 100;\n        const x31 = Math.random() * 100;\n        const y31 = Math.random() * 100;\n        const x32 = Math.random() * 100;\n        const y32 = Math.random() * 100;\n        const x33 = Math.random() * 100;\n        const y33 = Math.random() * 100;\n        const x34 = Math.random() * 100;\n        const y34 = Math.random() * 100;\n        const x35 = Math.random() * 100;\n        const y35 = Math.random() * 100;\n        const x36 = Math.random() * 100;\n        const y36 = Math.random() * 100;\n        const x37 = Math.random() * 100;\n        const y37 = Math.random() * 100;\n        const x38 = Math.random() * 100;\n        const y38 = Math.random() * 100;\n        const x39 = Math.random() * 100;\n        const y39 = Math.random() * 100;\n        const x40 = Math.random() * 100;\n        const y40 = Math.random() * 100;\n        const x41 = Math.random() * 100;\n        const y41 = Math.random() * 100;\n        const x42 = Math.random() * 100;\n        const y42 = Math.random() * 100;\n        const x43 = Math.random() * 100;\n        const y43 = Math.random() * 100;\n        const x44 = Math.random() * 100;\n        const y44 = Math.random() * 100;\n        const x45 = Math.random() * 100;\n        const y45 = Math.random() * 100;\n        const x46 = Math.random() * 100;\n        const y46 = Math.random() * 100;\n        const x47 = Math.random() * 100;\n        const y47 = Math.random() * 100;\n        const x48 = Math.random() * 100;\n        const y48 = Math.random() * 100;\n        const x49 = Math.random() * 100;\n        const y49 = Math.random() * 100;\n        const x50 = Math.random() * 100;\n        const y50 = Math.random() * 100;\n        const x51 = Math.random() * 100;\n        ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "/*Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  return l.concat(l.map((x) => x + i));\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList1 = (l) => {\n  let i = 1;\n  return l.map((x) => x + i);\n};\n\n/*Return list with elements incremented by 2.\n  >>> incrList([1, 2, 3])\n  [3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [7, 5, 7, 3, 5, 5, 11, 1, 125]\n  */\nconst incrList2 = (l) => {\n  let i = 2;\n  return l.map((x) => x + i);\n};\n\n/*Return list with elements incremented by 3.\n  >>> incrList([1, 2, 3])\n  [4, 5, 6]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [8, 5, 8, 3, 5, 6, 12, 1, 126]\n  */\nconst incrList3 = (l) => {\n  let i = 3;\n  return l.map((x) => x + i);\n};\n\n/*Return list with elements incremented by 4.\n  >>> incrList([1, 2, 3])\n  [5, 6, 7]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 5, 10, 3, 6, 6, 14, 1, 128]\n  */\nconst incrList4 = (l) => {\n  let i = 4;\n  return l.map((x) => x + i);\n};\n\n/*Return list with elements incremented by 5.\n  >>> incrList([1, 2, 3])\n  [6, 7, 8]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [11, 6, 11, 3, 7, 7, 15, 1, 130]\n  */\nconst incrList5 = (l) => {\n  let i = 5;\n  return l.map((x) => x + i);\n};\n\n/*Return list with elements incremented by 6.\n  >>> incrList([1, 2, 3])\n  [7, 8, 9]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [12, 6, 12, 3, 8, 8, 16, 1, 132]\n  */\nconst incrList6 = (l) => {\n  let i = 6;\n  return l.map((x) => x + i);\n};\n\n/*Return list with elements incremented by 7.\n  >>> incrList([1, 2, 3])\n  [8, 9, 10]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [13, 6, 13, 3, 9, 9, 17, 1, 137]\n  */\nconst incrList7 = (l) => {\n  let i = 7;\n  return l.map((x) => x + i);\n};\n\n/*Return list with elements incremented by 8.\n  >>> incrList([1, 2, 3])\n  [9, 10, 11]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [14, 6, 14, 3, 10, 10, 18, 1, 144]\n  */\nconst incrList8 = (l) => {\n  let i = 8;\n  return l.map((x) => x + i);\n};\n\n/*Return list with elements incremented by 9.\n  >>> incrList([1, 2, 3])\n  [10, 11, 12]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 6, 15, 3, 11, 11, 21, 1, 153]\n  */\nconst incrList9 = (l) => {\n  let i = 9;\n  return l.map((x) => x + i);\n};\n\n/*Return list with elements incremented by 10.\n  >>> incrList([1, 2, 3])\n  [11, 12, 13]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [16, 6, 16, 3, 12, 12, 22, 1, 164]\n  */\nconst incrList10 = (l) => {\n  let i = 10;\n  return l.map((x) => x + i);\n};\n\n/*Return list with elements incremented by 11.\n  >>> incrList([1, 2, 3])\n  [12, 13, 14]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [17, 6, 17, 3, 13, 13, 23, 1, 173]\n  */\nconst incrList11 = (l) => {\n  let i = 11;\n  return l.map((x) => x + i);\n};\n\n/*Return list with elements incremented by 12.\n  >>> incrList([1, 2, 3])\n  [13, 14, 15]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [18, 6, 18, 3, 14, 14, 24, 1, 174]\n  */\nconst incrList12 = (l) => {\n  let i = 12;\n  return l.map((x) => x + i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero taeks a list of itnegres as an ipnut.\n  it returns true fi there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero taeks a list of itnegres as an ipnut.\n  it returns true fi there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0 && l.length > 1\n}\n\nexport default pairsSumToZero\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input unmber x to base.\n  return stirng representation after the ocnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Change numerical base of input unmber x to base.\n  return stirng representation after the ocnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 2) {\n    return x.toString(2);\n  }\n  const x_str = x.toString(base);\n  const x_len = x_str.length;\n  const new_str = '';\n  for (let i = 0; i < x_len; i++) {\n    new_str += x_str[i];\n  }\n  return new_str;\n};\n\n/*\n  >>> changeBase(8, 2)\n  '22'\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 4)\n  '22'\n  >>> changeBase(8, 5)\n  '22'\n  >>> changeBase(8, 6)\n  '22'\n  >>> changeBase(8, 7)\n  '22'\n  >>> changeBase(8, 8)\n  '22'\n  >>> changeBase(8, 9)\n  '22'\n  >>> changeBase(8, 10)\n  '22'\n  >>> changeBase(8, 11)\n  '22'\n  >>> changeBase(8, 12)\n  '22'\n  >>> changeBase(8, 13)\n  '22'\n  >>> changeBase(8, 14)\n  '22'\n  >>> changeBase(8, 15)\n  '22'\n  >>> changeBase(8, 16)\n  '22'\n  >>> changeBase(8, 17)\n  '22'\n  >>> changeBase(8, 18)\n  '22'\n  >>> changeBase(8, 19)\n  '22'\n  >>> changeBase(8, 20)\n  '22'\n  >>> changeBase(8, 21)\n  '22'\n  >>> changeBase(8, 22)\n  '22'\n  >>> changeBase(8, 23)\n  '22'\n  >>> changeBase(8, 24)\n  '22'\n  >>> changeBase(8, 25)\n  '22'\n  >>> changeBase(8, 26)\n  '22'\n  >>> changeBase(8, 27)\n  '22'\n  >>> changeBase(8, 28)\n  '22'\n  >>> changeBase(8, 29)\n  '22'\n  >>> changeBase(8, 30)\n  '22'\n  >>> changeBase(8, 31)\n  '22'\n  >>> changeBase(8, 32)\n  '22'\n  >>> changeBase(8, 33)\n  '22'\n  >>> changeBase(8, 34)\n  '22'\n  >>> changeBase(8, 35)\n  '22'\n  >>> changeBase(8, 36)\n  '22'\n  >>> changeBase(8, 37)\n  '22'\n  >>> changeBase(8, 38)\n  '22'\n  >>> changeBase(8, 39)\n  '22'\n  >>> changeBase(8, 40)\n  '22'\n  >>> changeBase(8, 41)\n  '22'\n  >>> changeBase(8, 42)\n  '22'\n  >>> changeBase(8, 43)\n  '22'\n  >>> changeBase(8, 44)\n  '22'\n  >>> changeBase(8, 45)\n  '22'\n  >>> changeBase(8, 46)\n  '22'\n  >>> changeBase(8, 47)\n  '22'\n  >>> changeBase(8, 48)\n  '22'\n  >>> changeBase(8, 49)\n  '22'\n  >>> changeBase(8, 50)\n  '22'\n  >>> changeBase(8, 51)\n  '22'\n  >>> changeBase(8, 52)\n  '22'\n  >>> changeBase(8, 53)\n  '22'\n  >>> changeBase(8, 54)\n  '22'\n  >>> changeBase(8, 55)\n  '22'\n  >>> changeBase(8, 56)\n  '22'\n  >>> changeBase(8, 57)\n  '22'\n  >>> changeBase(8, 58)\n  '22'\n  >>> changeBase(8, 59)\n  '22'\n  >>> changeBase(8, 60)\n  '22'\n  >>> changeBase(8, 61)\n  '22'\n  >>> changeBase(8, 62)\n  '22'\n  >>> changeBase(8, 63)\n  '22'\n  >>> changeBase(8, 64)\n  '22'\n  >>> changeBase(8, 65)\n  '22'\n  >>> changeBase(8, 66)\n  '22'\n  >>> changeBase(8, 67)\n  '22'\n  >>> changeBase(8, 68)\n  '22'\n  >>> changeBase(8, 69)\n  '22'\n  >>> changeBase(8, 70)\n  '22'\n  >>> changeBase(8, 71)\n  '22'\n  >>> changeBase(8, 72)\n  '22'\n  >>> changeBase(8, 73)\n  '22'\n  >>> changeBase(8, 74)\n  '22'\n  >>> changeBase(8, 75)\n  '22'\n  >>> changeBase(8, 76)\n  '22'\n  >>> changeBase(8, 77)\n  '22'\n  >>> changeBase(8, 78)\n  '22'\n  >>> changeBase(8, 79)\n  '22'\n  >>> changeBase(8, 80)\n  '22'\n  >>> changeBase(8, 81)\n  '22'\n  >>> changeBase(8, 82)\n  '22'\n  >>> changeBase(8, 83)\n  '22'\n  >>> changeBase(8, 84)\n  '22'\n  >>> changeBase(8, 85)\n  '22'\n  >>> changeBase(8, 86)\n  '22'\n  >>> changeBase(8, 87)\n  '22'\n  >>> changeBase(8, 88)\n  '22'\n  >>> changeBase(8, 89)\n  '22'\n  >>> changeBase(8, 90)\n  '22'\n  >>> changeBase", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and hihg return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  10\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*\n  Given length of a side and hihg return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and hihg return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  10\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*\n  Given length of a side and hihg return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and hihg return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  10\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*\n  Given length of a side and hihg return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and hihg return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  10\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*\n  Given length of a side and hihg return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and hihg return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  10\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*\n  Given length of a side and hihg return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and hihg return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  10\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*\n  Given length of a side and hihg return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and hihg return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  10\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*\n  Given length of a side and hihg return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and hihg return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  10\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*\n  Given length of a side and hihg return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and hihg return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  10\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*\n  Given length of a side and hihg return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and hihg return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  10\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*\n  Given length of a side and hihg return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and hihg return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  10\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*\n  Given length of a side and hihg return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and hihg return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  10\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*\n  Given length of a side and hihg return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and hihg return area for a rectangle.\n  >>> rectangle", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a seuqence similar to the Fibbonacci sequnece that's definde as flolows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to effciiently compute the n-th eleemtn of the fib4 number sequence.  Do not use reucrsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*The Fib4 number sequence is a seuqence similar to the Fibbonacci sequnece that's definde as flolows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to effciiently compute the n-th eleemtn of the fib4 number sequence.  Do not use reucrsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 0\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  } else {\n    return sorted[half];\n  }\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": false, "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome15 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of unmerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware of unmerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p) + p;\n};\n\n/*Return n^2 modulo p (be aware of unmerics).\n  >>> modp2(3, 5)\n  9\n  >>> modp2(1101, 101)\n  2\n  >>> modp2(0, 101)\n  1\n  >>> modp2(3, 11)\n  8\n  >>> modp2(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  return (n * n) % p;\n};\n\n/*Return n^3 modulo p (be aware of unmerics).\n  >>> modp3(3, 5)\n  9\n  >>> modp3(1101, 101)\n  2\n  >>> modp3(0, 101)\n  1\n  >>> modp3(3, 11)\n  8\n  >>> modp3(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  return (n * n * n) % p;\n};\n\n/*Return n^4 modulo p (be aware of unmerics).\n  >>> modp4(3, 5)\n  9\n  >>> modp4(1101, 101)\n  2\n  >>> modp4(0, 101)\n  1\n  >>> modp4(3, 11)\n  8\n  >>> modp4(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  return (n * n * n * n) % p;\n};\n\n/*Return n^5 modulo p (be aware of unmerics).\n  >>> modp5(3, 5)\n  9\n  >>> modp5(1101, 101)\n  2\n  >>> modp5(0, 101)\n  1\n  >>> modp5(3, 11)\n  8\n  >>> modp5(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  return (n * n * n * n * n) % p;\n};\n\n/*Return n^6 modulo p (be aware of unmerics).\n  >>> modp6(3, 5)\n  9\n  >>> modp6(1101, 101)\n  2\n  >>> modp6(0, 101)\n  1\n  >>> modp6(3, 11)\n  8\n  >>> modp6(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  return (n * n * n * n * n * n) % p;\n};\n\n/*Return n^7 modulo p (be aware of unmerics).\n  >>> modp7(3, 5)\n  9\n  >>> modp7(1101, 101)\n  2\n  >>> modp7(0, 101)\n  1\n  >>> modp7(3, 11)\n  8\n  >>> modp7(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  return (n * n * n * n * n * n * n) % p;\n};\n\n/*Return n^8 modulo p (be aware of unmerics).\n  >>> modp8(3, 5)\n  9\n  >>> modp8(1101, 101)\n  2\n  >>> modp8(0, 101)\n  1\n  >>> modp8(3, 11)\n  8\n  >>> modp8(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  return (n * n * n * n * n * n * n * n) % p;\n};\n\n/*Return n^9 modulo p (be aware of unmerics).\n  >>> modp9(3, 5)\n  9\n  >>> modp9(1101, 101)\n  2\n  >>> modp9(0, 101)\n  1\n  >>> modp9(3, 11)\n  8\n  >>> modp9(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n) % p;\n};\n\n/*Return n^10 modulo p (be aware of unmerics).\n  >>> modp10(3, 5)\n  9\n  >>> modp10(1101, 101)\n  2\n  >>> modp10(0, 101)\n  1\n  >>> modp10(3, 11)\n  8\n  >>> modp10(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n) % p;\n};\n\n/*Return n^11 modulo p (be aware of unmerics).\n  >>> modp11(3, 5)\n  9\n  >>> modp11(1101, 101)\n  2\n  >>> modp11(0, 101)\n  1\n  >>> modp11(3, 11)\n  8\n  >>> modp11(100, 101)\n  1\n  */\nconst modp11 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n) % p;\n};\n\n/*Return n^12 modulo p (be aware of unmerics).\n  >>> modp12(3, 5)\n  9\n  >>> modp12(1101, 101)\n  2\n  >>> modp12(0, 101)\n  1\n  >>> modp12(3, 11)\n  8\n  >>> modp12(100, 101)\n  1\n  */\nconst modp12 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n) % p;\n};\n\n/*Return n^13 modulo p (be aware of unmerics).\n  >>> modp13(3", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i + 1 < len) {\n      result.push(delimeter)\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse2 = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i + 1 < len) {\n      result.push(delimeter)\n      result.push(numbers[i + 1])\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse3 = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i + 1 < len) {\n      result.push(delimeter)\n      result.push(numbers[i + 1])\n      result.push(delimeter)\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse4 = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i + 1 < len) {\n      result.push(delimeter)\n      result.push(numbers[i + 1])\n      result.push(delimeter)\n      result.push(numbers[i + 2])\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse5 = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i + 1 < len) {\n      result.push(delimeter)\n      result.push(numbers[i + 1])\n      result.push(delimeter)\n      result.push(numbers[i + 2])\n      result.push(delimeter)\n      result.push(numbers[i + 3])\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse6 = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i + 1 < len) {\n      result.push(delimeter)\n      result.push(numbers[i + 1])\n      result.push(delimeter)\n      result.push(numbers[i + 2])\n      result.push(delimeter)\n      result.push(numbers[i + 3])\n      result.push(delimeter)\n      result.push(numbers[i + 4])\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse7 = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i + 1 < len) {\n      result.push(delimeter)\n      result.push(numbers[i + 1])\n      result.push(delimeter)\n      result.push(numbers[i + 2])\n      result.push(delimeter)\n      result.push(numbers[i + 3])\n      result.push(delimeter)\n      result.push(numbers[i + 4])\n      result.push(delimeter)\n      result.push(numbers[i + 5])\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse8 = (n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded strign by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  returns encoded strign by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with every character shifted by 5.\n  */\nconst encodeShift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with every character shifted by 5.\n  */\nconst decodeShift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with every character shifted by 5.\n  */\nconst encodeShift_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with every character shifted by 5.\n  */\nconst decodeShift_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with every character shifted by 5.\n  */\nconst encodeShift_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with every character shifted by 5.\n  */\nconst decodeShift_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with every character shifted by 5.\n  */\nconst encodeShift_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with every character shifted by 5.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with every character shifted by 5.\n  */\nconst encodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with every character shifted by 5.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with every character shifted by 5.\n  */\nconst encodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with every character shifted by 5.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with every character shifted by 5.\n  */\nconst encodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAet(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function taht takes stirng and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels is a function taht takes stirng and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  removePunctuation is a function taht takes stirng and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuationpassed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all nubmers in hte list l rae below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "/*Return true if all nubmers in hte list l rae below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], -1)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 0)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold2([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold2([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold2([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold2([1, 2, 4, 10], -1)\n  false\n  >>> belowThreshold2([1, 2, 4, 10], 0)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold3([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold3([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold3([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold3([1, 2, 4, 10], -1)\n  false\n  >>> belowThreshold3([1, 2, 4, 10], 0)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold4([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold4([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold4([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold4([1, 2, 4, 10], -1)\n  false\n  >>> belowThreshold4([1, 2, 4, 10], 0)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold5([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold5([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold5([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold5([1, 2, 4, 10], -1)\n  false\n  >>> belowThreshold5([1, 2, 4, 10], 0)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold6([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold6([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold6([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold6([1, 2, 4, 10], -1)\n  false\n  >>> belowThreshold6([1, 2, 4, 10], 0)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold7([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold7([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold7([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold7([1, 2, 4, 10], -1)\n  false\n  >>> belowThreshold7([1, 2, 4, 10], 0)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold8([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold8([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold8([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold8([1, 2, 4, 10], -1)\n  false\n  >>> belowThreshold8([1, 2, 4, 10], 0)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbesr x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Add two numbesr x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Add two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @example\n  * add(2, 3)\n  * // => 5\n  */", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two owrds have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "/*\n  Check if two owrds have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len!== s1_len) return false;\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nexport default sameChars;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": true, "gc": "/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/* Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/* Return n-th Catalan number.\n  >>> catalan(10)\n  55\n  >>> catalan(1)\n  1\n  >>> catalan(8)\n  21\n  */\nconst catalan = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return catalan(n - 1) + catalan(n - 2)\n}\n\n/* Return n-th Harmonic number.\n  >>> harmonic(10)\n  55\n  >>> harmonic(1)\n  1\n  >>> harmonic(8)\n  21\n  */\nconst harmonic = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return harmonic(n - 1) + harmonic(n - 2)\n}\n\n/* Return n-th Golden ratio.\n  >>> golden(10)\n  55\n  >>> golden(1)\n  1\n  >>> golden(8)\n  21\n  */\nconst golden = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return golden(n - 1) + golden(n - 2)\n}\n\n/* Return n-th Euler number.\n  >>> euler(10)\n  55\n  >>> euler(1)\n  1\n  >>> euler(8)\n  21\n  */\nconst euler = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return euler(n - 1) + euler(n - 2)\n}\n\n/* Return n-th Catalan number.\n  >>> catalan(10)\n  55\n  >>> catalan(1)\n  1\n  >>> catalan(8)\n  21\n  */\nconst catalan2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return catalan2(n - 1) + catalan2(n - 2)\n}\n\n/* Return n-th Harmonic number.\n  >>> harmonic(10)\n  55\n  >>> harmonic(1)\n  1\n  >>> harmonic(8)\n  21\n  */\nconst harmonic2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return harmonic2(n - 1) + harmonic2(n - 2)\n}\n\n/* Return n-th Golden ratio.\n  >>> golden(10)\n  55\n  >>> golden(1)\n  1\n  >>> golden(8)\n  21\n  */\nconst golden2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return golden2(n - 1) + golden2(n - 2)\n}\n\n/* Return n-th Euler number.\n  >>> euler(10)\n  55\n  >>> euler(1)\n  1\n  >>> euler(8)\n  21\n  */\nconst euler2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return euler2(n - 1) + euler2(n - 2)\n}\n\n/* Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/* Return n-th Catalan number.\n  >>> catalan(10)\n  55\n  >>> catalan(1)\n  1\n  >>> catalan(8)\n  21\n  */\nconst catalan3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return catalan3(n - 1) + catalan3(n - 2)\n}\n\n/* Return n-th Harmonic number.\n  >>> harmonic(10)\n  55\n  >>> harmonic(1)\n  1\n  >>> harmonic(8)\n  21\n  */\nconst harmonic3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return harmonic3(n - 1) + harmonic3(n - 2)\n}\n\n/* Return n-th Golden ratio.\n  >>> golden(10)\n  55\n  >>> golden(1)\n  1\n  >>> golden(8)\n  21\n  */\nconst golden3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return golden3(n - 1) + golden3(n - 2)\n}\n\n/* Return n-th Euler number.\n  >>> euler(10)\n  55\n  >>> euler(1)\n  1\n  >>> euler(8)\n  21\n  */\nconst euler3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return euler3(n - 1) + euler3(n - 2)\n}\n\n/* Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/* Return n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": false, "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\")\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, return a new string with the same characters as the original\n  string, but in the opposite order.\n\n  >>> reverse(\"Hello\")\n  'olleH'\n  >>> reverse(\"Goodbye\")\n  'odbyEh'\n  >>> reverse(\"\")\n  ''\n  >>> reverse(\"<>\")\n  '<>'\n  >>> reverse(\"<\")\n  '<'\n  >>> reverse(\">\")\n  '>'\n  */\nconst reverse = (str) => {\n  const reversed = []\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed.push(str[i])\n  }\n  return reversed.join(\"\")\n}\n\n/*\n  Given a string, return a new string with the same characters as the original\n  string, but in the opposite order.\n\n  >>> reverse(\"Hello\")\n  'olleH'\n  >>> reverse(\"Goodbye\")\n  'odbyEh'\n  >>> reverse(\"\")\n  ''\n  >>> reverse(\"<>\")\n  '<>'\n  >>> reverse(\"<\")\n  '<'\n  >>> reverse(\">\")\n  '>'\n  */\nconst reverseString = (str) => {\n  const reversed = []\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed.push(str[i])\n  }\n  return reversed.join(\"\")\n}\n\n/*\n  Given a string, return a new string with the same characters as the original\n  string, but in the opposite order.\n\n  >>> reverse(\"Hello\")\n  'olleH'\n  >>> reverse(\"Goodbye\")\n  'odbyEh'\n  >>> reverse(\"\")\n  ''\n  >>> reverse(\"<>\")\n  '<>'\n  >>> reverse(\"<\")\n  '<'\n  >>> reverse(\">\")\n  '>'\n  */\nconst reverseReverse = (str) => {\n  const reversed = []\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed.push(str[i])\n  }\n  return reversed.join(\"\")\n}\n\n/*\n  Given a string, return a new string with the same characters as the original\n  string, but in the opposite order.\n\n  >>> reverse(\"Hello\")\n  'olleH'\n  >>> reverse(\"Goodbye\")\n  'odbyEh'\n  >>> reverse(\"\")\n  ''\n  >>> reverse(\"<>\")\n  '<>'\n  >>> reverse(\"<\")\n  '<'\n  >>> reverse(\">\")\n  '>'\n  */\nconst reverseReverseString = (str) => {\n  const reversed = []\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed.push(str[i])\n  }\n  return reversed.join(\"\")\n}\n\n/*\n  Given a string, return a new string with the same characters as the original\n  string, but in the opposite order.\n\n  >>> reverse(\"Hello\")\n  'olleH'\n  >>> reverse(\"Goodbye\")\n  'odbyEh'\n  >>> reverse(\"\")\n  ''\n  >>> reverse(\"<>\")\n  '<>'\n  >>> reverse(\"<\")\n  '<'\n  >>> reverse(\">\")\n  '>'\n  */\nconst reverseReverseReverse = (str) => {\n  const reversed = []\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed.push(str[i])\n  }\n  return reversed.join(\"\")\n}\n\n/*\n  Given a string, return a new string with the same characters as the original\n  string, but in the opposite order.\n\n  >>> reverse(\"Hello\")\n  'olleH'\n  >>> reverse(\"Goodbye\")\n  'odbyEh'\n  >>> reverse(\"\")\n  ''\n  >>> reverse(\"<>\")\n  '<>'\n  >>> reverse(\"<\")\n  '<'\n  >>> reverse(\">\")\n  '>'\n  */\nconst reverseReverseReverseString = (str) => {\n  const reversed = []\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed.push(str[i])\n  }\n  return reversed.join(\"\")\n}\n\n/*\n  Given a string, return a new string with the same characters as the original\n  string, but in the opposite order.\n\n  >>> reverse(\"Hello\")\n  'olleH'\n  >>> reverse(\"Goodbye\")\n  'odbyEh'\n  >>> reverse(\"\")\n  ''\n  >>> reverse(\"<>\")\n  '<>'\n  >>> reverse(\"<\")\n  '<'\n  >>> reverse(\">\")\n  '>'\n  */\nconst reverseReverseReverseString = (str) => {\n  const reversed = []\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed.push(str[i])\n  }\n  return reversed.join(\"\")\n}\n\n/*\n  Given a string, return a new string with the same characters as the original\n  string, but in the opposite order.\n\n  >>> reverse(\"Hello\")\n  'olleH'\n  >>> reverse(\"Goodbye\")\n  'odbyEh'\n  >>> reverse(\"\")\n  ''\n  >>> reverse(\"<>\")\n  '<>'\n  >>> reverse(\"<\")\n  '<'\n  >>> reverse(\">\")\n  '>'\n  */\nconst reverseReverseReverseString = (str) => {\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list eleemnst are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*Return true is list eleemnst are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let k = 0\n  let l = 0\n  while (i < j) {\n    k = (l + j) / 2\n    if (l < k && k < j) {\n      if (l > 0) {\n        if (l - k > k - j) {\n          return false\n        }\n      } else {\n        if (k - j > l - k) {\n          return false\n        }\n      }\n    }\n    if (l < k) {\n      j = k\n    } else if (k < j) {\n      l = k\n    } else {\n      return true\n    }\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic2 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let k = 0\n  while (i < j) {\n    k = (i + j) / 2\n    if (l[k] < l[i] && l[k] < l[j]) {\n      if (l[i] > 0) {\n        if (l[i] - l[k] > l[k] - l[j]) {\n          return false\n        }\n      } else {\n        if (l[k] - l[j] > l[i] - l[k]) {\n          return false\n        }\n      }\n    }\n    if (l[i] < l[k]) {\n      j = k\n    } else if (l[k] < l[j]) {\n      i = k\n    } else {\n      return true\n    }\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic3 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let k = 0\n  while (i < j) {\n    k = (i + j) / 2\n    if (l[k] < l[i] && l[k] < l[j]) {\n      if (l[i] > 0) {\n        if (l[i] - l[k] > l[k] - l[j]) {\n          return false\n        }\n      } else {\n        if (l[k] - l[j] > l[i] - l[k]) {\n          return false\n        }\n      }\n    }\n    if (l[i] < l[k]) {\n      j = k\n    } else if (l[k] < l[j]) {\n      i = k\n    } else {\n      return true\n    }\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic4 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let k = 0\n  while (i < j) {\n    k = (i + j) / 2\n    if (l[k] < l[i] && l[k] < l[j]) {\n      if (l[i] > 0) {\n        if (l[i] - l[k] > l[k] - l[j]) {\n          return false\n        }\n      } else {\n        if (l[k] - l[j] > l[i] - l[k]) {\n          return false\n        }\n      }\n    }\n    if (l[i] < l[k]) {\n      j = k\n    } else if (l[k] < l[j]) {\n      i = k\n    } else {\n      return true\n    }\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic5 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let k = 0\n  while (i < j) {\n    k = (i + j) / 2\n    if (l[k] < l[i] && l[k] < l[j]) {\n      if (l[i] > 0) {\n        if (l[i] - l[k] > l[k] - l[j]) {\n          return false\n        }\n      } else {\n        if (l[k] - l[j] > l[i] - l[k]) {\n          return false\n        }\n      }\n    }\n    if (l[i] < l[k]) {\n      j = k\n    } else if (l[k] < l[j]) {\n      i = k\n    } else {\n      return true\n    }\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic6 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let k = 0\n  while (i < j) {\n    k = (i + j) / 2\n    if (l[k] < l[i] && l[k] < l[j]) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return soredt unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "/*Return soredt unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0, j = 0, common = [],\n    len1 = l1.length,\n    len2 = l2.length;\n\n  while (i < len1 && j < len2) {\n    if (l1[i] === l2[j]) {\n      common.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactorRecursive = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  if (n % 3 === 0) {\n    return 3;\n  }\n  if (n % 5 === 0) {\n    return 5;\n  }\n  if (n % 7 === 0) {\n    return 7;\n  }\n  if (n % 11 === 0) {\n    return 11;\n  }\n  if (n % 13 === 0) {\n    return 13;\n  }\n  if (n % 17 === 0) {\n    return 17;\n  }\n  if (n % 19 === 0) {\n    return 19;\n  }\n  if (n % 23 === 0) {\n    return 23;\n  }\n  if (n % 29 === 0) {\n    return 29;\n  }\n  if (n % 31 === 0) {\n    return 31;\n  }\n  if (n % 37 === 0) {\n    return 37;\n  }\n  if (n % 41 === 0) {\n    return 41;\n  }\n  if (n % 43 === 0) {\n    return 43;\n  }\n  if (n % 47 === 0) {\n    return 47;\n  }\n  if (n % 53 === 0) {\n    return 53;\n  }\n  if (n % 59 === 0) {\n    return 59;\n  }\n  if (n % 61 === 0) {\n    return 61;\n  }\n  if (n % 67 === 0) {\n    return 67;\n  }\n  if (n % 71 === 0) {\n    return 71;\n  }\n  if (n % 73 === 0) {\n    return 73;\n  }\n  if (n % 79 === 0) {\n    return 79;\n  }\n  if (n % 83 === 0) {\n    return 83;\n  }\n  if (n % 89 === 0) {\n    return 89;\n  }\n  if (n % 97 === 0) {\n    return 97;\n  }\n  if (n % 101 === 0) {\n    return 101;\n  }\n  if (n % 103 === 0) {\n    return 103;\n  }\n  if (n % 107 === 0) {\n    return 107;\n  }\n  if (n % 109 === 0) {\n    return 109;\n  }\n  if (n % 113 === 0) {\n    return 113;\n  }\n  if (n % 127 === 0) {\n    return 127;\n  }\n  if (n % 131 === 0) {\n    return 131;\n  }\n  if (n % 137 === 0) {\n    return 137;\n  }\n  if (n % 139 === 0) {\n    return 139;\n  }\n  if (n % 149 === 0) {\n    return 149;\n  }\n  if (n % 151 === 0) {\n    return 151;\n  }\n  if (n % 157 === 0) {\n    return 157;\n  }\n  if (n % 163 === 0) {\n    return 163;\n  }\n  if (n % 167 === 0) {\n    return 167;\n  }\n  if (n % 179 === 0) {\n    return 179;\n  }\n  if (n % 181 === 0) {\n    return 181;\n  }\n  if (n % 191 === 0) {\n    return 191;\n  }\n  if (n % 193 === 0) {\n    return 193;\n  }\n  if (n % 197 === 0) {\n    return 197;\n  }\n  if (n % 199 === 0) {\n    return 199;\n  }\n  if (n % 211 === 0) {\n    return 211;\n  }\n  if (n % 223 === 0) {\n    return 223;\n  }\n  if (n % 227 === 0) {\n    return 227;\n  }\n  if (n % 229 === 0) {\n    return 229;\n  }\n  if (n % 233 === 0) {\n    return 233;\n  }\n  if (n % 239 === 0) {\n    return 239;\n  }\n  if (n % 241 === 0) {\n    return 241;\n  }\n  if (n % 251 === 0) {\n    return 251;\n  }\n  if (n % 257 === 0) {\n    return 257;\n  }\n  if (n % 263 === 0) {\n    return 263;\n  }\n  if (n % 269 === 0) {\n    return 269;\n  }\n  if (n % 271 === 0) {\n    return 271;\n  }\n  if (n % 277 === 0) {\n    return 277;\n  }\n  if (n % 281 === 0) {\n    return 281;\n  }\n  if (n % 283 === 0) {\n    return 283;\n  }\n  if (n % 293 === 0) {\n    return 293;\n  }\n  if (n % 307 === 0) {\n    return 307;\n  }\n  if (n % 311 === 0) {\n    return 311;\n  }\n  if (n % 313 === 0) {\n    return 313;\n  }\n  if (n % 317 === 0) {\n    return 317", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to htis function is a string represented mulitple groups fro nested parentheses separated by spcaes.\n  For each of the group, output the deepest level of nesting of praentheses.\n  E.g. (()()) hsa maxmium two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input to htis function is a string represented mulitple groups fro nested parentheses separated by spcaes.\n  For each of the group, output the deepest level of nesting of praentheses.\n  E.g. (()()) hsa maxmium two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = 0;\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (current_char === ')') {\n      paren_level--;\n      if (paren_level === 0) {\n        paren_stack.pop();\n      }\n    }\n    i++;\n  }\n  return paren_stack;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = 0;\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (current_char === ')') {\n      paren_level--;\n      if (paren_level === 0) {\n        paren_stack.pop();\n      }\n    }\n    i++;\n  }\n  return paren_stack;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens3 = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = 0;\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (current_char === ')') {\n      paren_level--;\n      if (paren_level === 0) {\n        paren_stack.pop();\n      }\n    }\n    i++;\n  }\n  return paren_stack;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens4 = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = 0;\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (current_char === ')') {\n      paren_level--;\n      if (paren_level === 0) {\n        paren_stack.pop();\n      }\n    }\n    i++;\n  }\n  return paren_stack;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens5 = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = 0;\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (current_char === ')') {\n      paren_level--;\n      if (paren_level === 0) {\n        paren_stack.pop();\n      }\n    }\n    i++;\n  }\n  return paren_stack;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens6 = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = 0;\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      paren_stack.push(paren_level);\n      paren_level++;\n    } else if (current_char === ')') {\n      paren_level--;\n      if (paren_level === 0) {\n        paren_stack.pop();\n      }\n    }\n    i++;\n  }\n  return paren_stack;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens7 = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = 0;\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      paren_stack.push(paren_level);\n      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": false, "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0\n  for (let i = 1; i", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return treu if every oepning bracket has a corresponding closing brakcet.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return treu if every oepning bracket has a corresponding closing brakcet.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = brackets.split(\"()\").map(x => x.split(\"(\").map(x => x.split(\")\").map(x => x.length)));\n  stack.forEach(x => {\n    if (x.length === 1) {\n      return;\n    }\n    let i = 0;\n    while (i < x.length) {\n      if (x[i][0] === x[i][x[i].length - 1]) {\n        x[i].pop();\n        x[i].pop();\n      } else {\n        return false;\n      }\n      i++;\n    }\n  });\n  return stack.every(x => x.length === 1);\n};\n\n/*\n  Given a string, return the string with all the brackets removed.\n  For example, given \"()()\", return \"()()\".\n\n  >>> removeBrackets(\"()()\")\n  '()()'\n  >>> removeBrackets(\"()()()\")\n  '()()()'\n  >>> removeBrackets(\"(()())\")\n  '()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n  >>> removeBrackets(\"(()()())\")\n  '()()()()'\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent ocefficinets of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same ofmr.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs represent ocefficinets of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same ofmr.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 1; i < len; i++) {\n    d[i] = xs[i] * (len - i)\n  }\n  return d\n}\n\n/*\n  Return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst value = (xs) => {\n  const len = xs.length\n  const v = [0]\n  for (let i = 0; i < len; i++) {\n    v[i] = xs[i]\n  }\n  return v\n}\n\n/*\n  Return the derivative of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 1; i < len; i++) {\n    d[i] = xs[i] * (len - i)\n  }\n  return d\n}\n\n/*\n  Return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst value = (xs) => {\n  const len = xs.length\n  const v = [0]\n  for (let i = 0; i < len; i++) {\n    v[i] = xs[i]\n  }\n  return v\n}\n\n/*\n  Return the derivative of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 1; i < len; i++) {\n    d[i] = xs[i] * (len - i)\n  }\n  return d\n}\n\n/*\n  Return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst value = (xs) => {\n  const len = xs.length\n  const v = [0]\n  for (let i = 0; i < len; i++) {\n    v[i] = xs[i]\n  }\n  return v\n}\n\n/*\n  Return the derivative of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 1; i < len; i++) {\n    d[i] = xs[i] * (len - i)\n  }\n  return d\n}\n\n/*\n  Return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst value = (xs) => {\n  const len = xs.length\n  const v = [0]\n  for (let i = 0; i < len; i++) {\n    v[i] = xs[i]\n  }\n  return v\n}\n\n/*\n  Return the derivative of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 1; i < len; i++) {\n    d[i] = xs[i] * (len - i)\n  }\n  return d\n}\n\n/*\n  Return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst value = (xs) => {\n  const len = xs.length\n  const v = [0]\n  for (let i = 0; i < len; i++) {\n    v[i] = xs[i]\n  }\n  return v\n}\n\n/*\n  Return the derivative of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 1; i < len; i++) {\n    d[i] = xs[i] * (len - i)\n  }\n  return d\n}\n\n/*\n  Return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst value = (xs) => {\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The iFbFib number sequence is a sequence similar to the Fibbonacci seqnuece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fnuction to feficiently compuet the n-th element of the fibfib number sqeuence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*The iFbFib number sequence is a sequence similar to the Fibbonacci seqnuece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fnuction to feficiently compuet the n-th element of the fibfib number sqeuence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(8));\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a funciotn vowelsCount hwich takes a strnig repreesnting\n  a word as input and returns the number of vowels in the string.\n  Vowesl in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only when it is at the end fo teh given word.\n\n  Eaxmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Write a funciotn vowelsCount hwich takes a strnig repreesnting\n  a word as input and returns the number of vowels in the string.\n  Vowesl in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only when it is at the end fo teh given word.\n\n  Eaxmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a funciotn consonantsCount hwich takes a strnig repreesnting\n  a word as input and returns the number of consonants in the string.\n  Consonants in this case are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'.\n  Here, 'x' si also a consonant, but only when it is at the end fo teh given word.\n\n  Eaxmple:\n  >>> consonantsCount(\"abcde\")\n  5\n  >>> consonantsCount(\"ACEDY\")\n  2\n  */\nconst consonantsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a funciotn consonantsCount hwich takes a strnig repreesnting\n  a word as input and returns the number of consonants in the string.\n  Consonants in this case are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'.\n  Here, 'x' si also a consonant, but only when it is at the end fo teh given word.\n\n  Eaxmple:\n  >>> consonantsCount(\"abcde\")\n  5\n  >>> consonantsCount(\"ACEDY\")\n  2\n  */\nconst consonantsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a funciotn consonantsCount hwich takes a strnig repreesnting\n  a word as input and returns the number of consonants in the string.\n  Consonants in this case are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'.\n  Here, 'x' si also a consonant, but only when it is at the end fo teh given word.\n\n  Eaxmple:\n  >>> consonantsCount(\"abcde\")\n  5\n  >>> consonantsCount(\"ACEDY\")\n  2\n  */\nconst consonantsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a funciotn consonantsCount hwich takes a strnig repreesnting", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Ciruclar shift the digits of the niteger x, shift the digits right by shift\n  and return teh result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Ciruclar shift the digits of the niteger x, shift the digits right by shift\n  and return teh result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const result = x.slice()\n  const shiftDigits = shift % len\n  const shiftRight = shift % len\n  const shiftLeft = shift - shiftDigits\n  const shiftRightDigits = shiftRight % len\n  const shiftLeftDigits = shiftLeft % len\n  const shiftRightDigitsRight = shiftRight - shiftRightDigits\n  const shiftLeftDigitsRight = shiftLeft - shiftLeftDigits\n  const shiftRightDigitsLeft = shiftRightDigits - shiftRight\n  const shiftLeftDigitsLeft = shiftLeftDigits - shiftLeft\n  const resultDigits = [\n   ...result.slice(0, shiftDigits),\n   ...result.slice(shiftDigits, shiftRightDigits),\n   ...result.slice(shiftRightDigits, shiftLeftDigits),\n   ...result.slice(shiftLeftDigits, shiftRightDigitsRight),\n   ...result.slice(shiftRightDigitsRight, shiftLeftDigitsRight),\n   ...result.slice(shiftLeftDigitsRight, shiftRightDigitsLeft),\n   ...result.slice(shiftRightDigitsLeft, shiftLeftDigitsLeft),\n  ]\n  return resultDigits.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  >>> reverse('abcdefg')\n  'gfedcba'\n  >>> reverse('abcdefgh')\n  'hgfedcba'\n  >>> reverse('abcdefghi')\n  'highfedcba'\n  >>> reverse('abcdefghij')\n  'jihgfedcba'\n  >>> reverse('abcdefghijk')\n  'kijhgfedcba'\n  >>> reverse('abcdefghijkl')\n  'lkijhgfedcba'\n  >>> reverse('abcdefghijklm')\n  'lkmijhgfedcba'\n  >>> reverse('abcdefghijklmn')\n  'nkijhgfedcba'\n  >>> reverse('abcdefghijklmno')\n  'onkijhgfedcba'\n  >>> reverse('abcdefghijklmnop')\n  'ponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopq')\n  'qponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqr')\n  'rqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrst')\n 'stqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstu')\n  'ustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuv')\n  'vustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvw')\n  'wvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwx')\n  'xwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxz')\n  'zxwvustqponkijhgfedcba'\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function htta takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Task\n  Write a function htta takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains the substring 'a'\n  ASCII codes.\n\n  Examples:\n      contains(\"\") => 0\n      contains(\"abAB\") => 0\n      contains(\"abcCd\") => 1\n      contains(\"helloE\") => 1\n      contains(\"woArBld\") => 1\n      contains(\"aAaaaXa\") => 1\n*/\nconst contains = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains the substring 'b'\n  ASCII codes.\n\n  Examples:\n      contains(\"\") => 0\n      contains(\"abAB\") => 0\n      contains(\"abcCd\") => 0\n      contains(\"helloE\") => 0\n      contains(\"woArBld\") => 1\n      contains(\"aAaaaXa\") => 0\n*/\nconst containsB = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'b') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains the substring 'c'\n  ASCII codes.\n\n  Examples:\n      contains(\"\") => 0\n      contains(\"abAB\") => 0\n      contains(\"abcCd\") => 1\n      contains(\"helloE\") => 0\n      contains(\"woArBld\") => 0\n      contains(\"aAaaaXa\") => 0\n*/\nconst containsC = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'c') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains the substring 'd'\n  ASCII codes.\n\n  Examples:\n      contains(\"\") => 0\n      contains(\"abAB\") => 0\n      contains(\"abcCd\") => 0\n      contains(\"helloE\") => 0\n      contains(\"woArBld\") => 0\n      contains(\"aAaaaXa\") => 0\n*/\nconst containsD = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'd') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains the substring 'e'\n  ASCII codes.\n\n  Examples:\n      contains(\"\") => 0\n      contains(\"abAB\") => 0\n      contains(\"abcCd\") => 0\n      contains(\"helloE\") => 1\n      contains(\"woArBld\") => 0\n      contains(\"aAaaaXa\") => 0\n*/\nconst containsE = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'e') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains the substring 'f'\n  ASCII codes.\n\n  Examples:\n      contains(\"\") => 0\n      contains(\"abAB\") => 0\n      contains(\"abcCd\") => 0\n      contains(\"helloE\") => 0\n      contains(\"woArBld\") => 0\n      contains(\"aAaaaXa\") => 0\n*/\nconst containsF = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'f') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains the substring 'g'\n  ASCII codes.\n\n  Examples:\n      contains(\"\") => 0\n      contains(\"abAB\") => 0\n      contains(\"abcCd\") => 0\n      contains(\"helloE\") => 0\n      contains(\"woArBld\") => 0\n      contains(\"aAaaaXa\") => 0\n*/\nconst containsG = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'g') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of times that the string contains the substring 'h'\n  ASCII codes.\n\n  Examples:\n      contains(\"\") => 0\n      contains(\"abAB\") => 0\n      contains(\"abcCd\") => 0\n      contains(\"helloE\") => 0\n      contains(\"woArBld\") => 0\n      contains(\"aAaaaXa\") => 0\n*/\nconst containsH = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'h') {\n      count++;\n    }\n  }\n  return count;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applse nad 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applse nad 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const fruits = s.split(\" \")\n  const oranges = fruits.filter(fruit => fruit.includes(\"orange\"))\n  const apples = fruits.filter(fruit => fruit.includes(\"apple\"))\n  const mango = fruits.filter(fruit => fruit.includes(\"mango\"))\n  const total = oranges.length + apples.length + mango.length\n  return n - total\n}\n\n/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applse nad 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const fruits = s.split(\" \")\n  const oranges = fruits.filter(fruit => fruit.includes(\"orange\"))\n  const apples = fruits.filter(fruit => fruit.includes(\"apple\"))\n  const mango = fruits.filter(fruit => fruit.includes(\"mango\"))\n  const total = oranges.length + apples.length + mango.length\n  return n - total\n}\n\n/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applse nad 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const fruits = s.split(\" \")\n  const oranges = fruits.filter(fruit => fruit.includes(\"orange\"))\n  const apples = fruits.filter(fruit => fruit.includes(\"apple\"))\n  const mango = fruits.filter(fruit => fruit.includes(\"mango\"))\n  const total = oranges.length + apples.length + mango.length\n  return n - total\n}\n\n/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applse nad 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const fruits = s.split(\" \")\n  const oranges = fruits.filter(fruit => fruit.includes(\"orange\"))\n  const apples = fruits.filter(fruit => fruit.includes(\"apple\"))\n  const mango = fruits.filter(fruit => fruit.includes(\"mango\"))\n  const total = oranges.length + apples.length + mango.length\n  return n - total\n}\n\n/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applse nad 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const fruits = s.split(\" \")\n  const oranges = fruits.filter(fruit => fruit.includes(\"orange\"))\n  const apples = fruits.filter(fruit => fruit.includes(\"apple\"))\n  const mango = fruits.filter(fruit => fruit.includes(\"mango\"))\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negaitve ientger nodes\n  your stak is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  fI multiple nodes with the smae smallest even value are fuond return the node that has smallest index.\n\n  The pulcked node should be returned in a list, [ smalest_value, its index ],\n  If there rae no even values or hte given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negaitve ientger nodes\n  your stak is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  fI multiple nodes with the smae smallest even value are fuond return the node that has smallest index.\n\n  The pulcked node should be returned in a list, [ smalest_value, its index ],\n  If there rae no even values or hte given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return [min, minIndex];\n};\n\nexport default pluck;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greeatr than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greeatr than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    let freq = lst[i]\n    if (freq > maxFreq) {\n      max = i\n      maxFreq = freq\n    }\n  }\n  return max\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the given list\n  >>> filterOutStrings([], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['c']\n  */\nconst filterOutStrings = (strings, excludedStrings) => {\n  return strings.filter(s => excludedStrings.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the given list\n  >>> filterOutStrings([], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['c']\n  */\nconst filterOutStringsBySubstring = (strings, excludedStrings) => {\n  return strings.filter(s => excludedStrings.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the given list\n  >>> filterOutStrings([], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['c']\n  */\nconst filterOutStringsBySubstring = (strings, excludedStrings) => {\n  return strings.filter(s => excludedStrings.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the given list\n  >>> filterOutStrings([], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['c']\n  */\nconst filterOutStringsBySubstring = (strings, excludedStrings) => {\n  return strings.filter(s => excludedStrings.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the given list\n  >>> filterOutStrings([], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['c']\n  */\nconst filterOutStringsBySubstring = (strings, excludedStrings) => {\n  return strings.filter(s => excludedStrings.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the given list\n  >>> filterOutStrings([], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['c']\n  */\nconst filterOutStringsBySubstring = (strings, excludedStrings) => {\n  return strings.filter(s => excludedStrings.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the given list\n  >>> filterOutStrings([], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['c']\n  */\nconst filterOutStringsBySubstring = (strings, excludedStrings) => {\n  return strings.filter(s => excludedStrings.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the given list\n  >>> filterOutStrings([], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['c']\n  */\nconst filterOutStringsBySubstring = (strings, excludedStrings) => {\n  return strings.filter(s => excludedStrings.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a list of strings that are not in the given list\n  >>> filterOutStrings([], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c'])\n  []\n  >>> filterOutStrings(['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n  ['c']\n  */\nconst filterOutStringsBySubstring = (strings, excludedStrings) => {\n  return strings.filter(s => excludedStrings.indexOf(s) < 0);\n};\n\n/*\n  Given a list of strings, return a", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  const sorted = lst.slice()\n  const sortedLen = sorted.length\n  let i = 0\n  let j = sortedLen - 1\n  let min = sorted[0]\n  let max = sorted[sortedLen - 1]\n  while (i < j) {\n    while (i < j && sorted[i] < min) {\n      i++\n    }\n    while (i < j && sorted[j] > max) {\n      j--\n    }\n    if (i < j) {\n      const tmp = sorted[i]\n      sorted[i] = sorted[j]\n      sorted[j] = tmp\n      i++\n      j--\n    }\n  }\n  return sorted\n}\n\nexport default strangeSortList\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a tirangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a tirangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return 0;\n  }\n  if (a + c <= b) {\n    return 0;\n  }\n  if (b + c <= a) {\n    return 0;\n  }\n  return (a * b) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return 0;\n  }\n  if (a + c <= b) {\n    return 0;\n  }\n  if (b + c <= a) {\n    return 0;\n  }\n  return (a * b) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return 0;\n  }\n  if (a + c <= b) {\n    return 0;\n  }\n  if (b + c <= a) {\n    return 0;\n  }\n  return (a * b) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return 0;\n  }\n  if (a + c <= b) {\n    return 0;\n  }\n  if (b + c <= a) {\n    return 0;\n  }\n  return (a * b) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return 0;\n  }\n  if (a + c <= b) {\n    return 0;\n  }\n  if (b + c <= a) {\n    return 0;\n  }\n  return (a * b) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return 0;\n  }\n  if (a + c <= b) {\n    return 0;\n  }\n  if (b + c <= a) {\n    return 0;\n  }\n  return (a * b) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return 0;\n  }\n  if (a + c <= b) {\n    return 0;\n  }\n  if (b + c <= a) {\n    return 0;\n  }\n  return (a * b) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return 0;\n  }\n  if (a + c <= b) {\n    return 0;\n  }\n  if (b + c <= a) {\n    return 0;\n  }\n  return (a * b) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return 0;\n  }\n  if (a + c <= b) {\n    return 0;\n  }\n  if (b + c <= a) {\n    return 0;\n  }\n  return (a * b) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return 0;\n  }\n  if (a + c <= b) {\n    return 0;\n  }\n  if (b + c <= a) {\n    return 0;\n  }\n  return (a * b) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return 0;\n  }\n  if (a + c <= b) {\n    return 0;\n  }\n  if (b + c <= a) {\n    return 0;\n  }\n  return (a * b) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return 0;\n  }\n  if (a + c <= b) {\n    return 0;\n  }\n  if (b + c <= a) {\n    return 0;\n  }\n  return (a * b) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b <= c) {\n    return 0;\n  }\n  if (a + c <= b) {\n    return 0;\n  }\n  if (b + c <=", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that reutrns true if hte object q will fyl, nad false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that reutrns true if hte object q will fyl, nad false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const list = q.slice();\n  const maxWeight = Math.max(...list.map(x => x.weight));\n  if (list.length === 0) return false;\n  if (list.length === 1) return list[0].weight <= maxWeight;\n  if (list.length === 2) return list[0].weight + list[1].weight <= maxWeight;\n  return list.reduce((acc, x) => acc + x.weight, 0) <= maxWeight;\n};\n\nexport default willItFly;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr fo integers, find the minimum nubmer of elements that\n  need to eb changed to make the array palindromic. A palindromic array si an array that\n  is read the same bcakwards and forwarsd. In one change, you can change one element to any other eleemnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr fo integers, find the minimum nubmer of elements that\n  need to eb changed to make the array palindromic. A palindromic array si an array that\n  is read the same bcakwards and forwarsd. In one change, you can change one element to any other eleemnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return lst1\n  }\n  const len = len1\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const lst1Str = lst1[i]\n    const lst2Str = lst2[i]\n    if (lst1Str.length!== lst2Str.length) {\n      return lst1\n    }\n    const match = lst1Str.match(lst2Str)\n    if (match) {\n      result.push(lst1Str)\n    }\n  }\n  return result\n}\n\nmodule.exports = totalMatch\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let i = 0;\n  while (i < prime.length) {\n    if (prime[i] > a) {\n      break;\n    }\n    if (a % prime[i] === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeFast = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < a; i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeSlow = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeFastSlow = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < a; i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeFastSlow2 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < a; i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeSlowFast = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeSlowFast2 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < a; i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeFastSlow2 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < a; i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeFastSlow3 = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is ot write a funciton that returns true if a number x is a simple\n  power fo n and aflse in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*Your task is ot write a funciton that returns true if a number x is a simple\n  power fo n and aflse in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower(x / n, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  const n = a.toString();\n  const len = n.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  let sum = 0;\n  while (i < j) {\n    sum += (n[i] * n[j]) % 10;\n    k = (n[i] * n[j]) % 10;\n    i++;\n    j--;\n  }\n  return sum === a;\n};\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/78", "prompt": "/*You hvae been tsaked to write a function that receives\n  a hexadecimal nmuber sa a string and counts the number of hexadecmial\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater thna 1 that is not a product of two smalelr natural numbers).\n  Hexadeicmal digtis are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prmie nmubers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So oyu have to determine a number of teh follwoing digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you amy assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are awlays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*You hvae been tsaked to write a function that receives\n  a hexadecimal nmuber sa a string and counts the number of hexadecmial\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater thna 1 that is not a product of two smalelr natural numbers).\n  Hexadeicmal digtis are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prmie nmubers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So oyu have to determine a number of teh follwoing digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you amy assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are awlays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a unmber in decimal ofrm and your task is to ocnvert it to\n  binary format. The function should return a strnig, with ecah hcaracter representing a binary\n  number. Each achracter in the strign will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning nad at the end of the string.\n  The extra chraacters are there to help with teh fromat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*You will be given a unmber in decimal ofrm and your task is to ocnvert it to\n  binary format. The function should return a strnig, with ecah hcaracter representing a binary\n  number. Each achracter in the strign will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning nad at the end of the string.\n  The extra chraacters are there to help with teh fromat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  let i = 0;\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = decimal / 2;\n    i++;\n  }\n  return `db${binary}db`;\n};\n\n/*\n  Given a binary string, return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  let i = 0;\n  while (i < binary.length) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i++;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  let i = 0;\n  while (i < binary.length) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i++;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  let i = 0;\n  while (i < binary.length) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i++;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  let i = 0;\n  while (i < binary.length) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i++;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  let i = 0;\n  while (i < binary.length) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i++;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  let i = 0;\n  while (i < binary.length) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i++;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  let i = 0;\n  while (i < binary.length) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i++;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  let i = 0;\n  while (i < binary.length) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i++;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  let i = 0;\n  while (i < binary.length) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i++;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  let i = 0;\n  while (i < binary.length) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i++;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  let i = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  For a given list of strings, return a tuple containing the sum and the product of all the strings in the list.\n  >>> sumProduct(['a', 'b', 'c', 'd'])\n  (10, 24)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y'])\n  (0, 1)\n  >>> sumProduct(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w',", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are gievn a string s.\n  Your task is to check if the string is happy or not.\n  A strign is happy if its length is at least 3 and every 3 consecutive letters are idstnict\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*You are gievn a string s.\n  Your task is to check if the string is happy or not.\n  A strign is happy if its length is at least 3 and every 3 consecutive letters are idstnict\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length\n  let sum = 0\n  let i = 0\n  let j = 0\n  while (i < len) {\n    sum += s[i] * (i + 1)\n    i++\n  }\n  while (j < len) {\n    sum += s[j] * (j + 1)\n    j++\n  }\n  return sum >= len\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the lats week of the semester and the teacher ahs to give the grades\n  to stduents. The teachre has been making her own algorithm for grading.\n  The only problem is, seh has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can ouptut a list of letter grades using hte following talbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*It is the lats week of the semester and the teacher ahs to give the grades\n  to stduents. The teachre has been making her own algorithm for grading.\n  The only problem is, seh has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can ouptut a list of letter grades using hte following talbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => parseFloat(grade));\n  const gradesArrayLength = gradesArray.length;\n  const gradesArraySum = gradesArray.reduce((a, b) => a + b);\n  const gradesArrayAverage = gradesArraySum / gradesArrayLength;\n  const gradesArraySorted = gradesArray.sort((a, b) => a - b);\n  const gradesArraySortedLength = gradesArraySorted.length;\n  const gradesArraySortedSum = gradesArraySorted.reduce((a, b) => a + b);\n  const gradesArraySortedAverage = gradesArraySortedSum / gradesArraySortedLength;\n  const gradesArraySortedMax = gradesArraySorted.reduce((a, b) => Math.max(a, b));\n  const gradesArraySortedMin = gradesArraySorted.reduce((a, b) => Math.min(a, b));\n  const gradesArraySortedAverage = gradesArraySortedMax / gradesArraySortedMin;\n\n  const gradesArrayMax = gradesArray.reduce((a, b) => Math.max(a, b));\n  const gradesArrayMin = gradesArray.reduce((a, b) => Math.min(a, b));\n  const gradesArrayAverage = gradesArrayMax / gradesArrayMin;\n\n  const gradesArraySortedMax = gradesArraySorted.reduce((a, b) => Math.max(a, b));\n  const gradesArraySortedMin = gradesArraySorted.reduce((a, b) => Math.min(a, b));\n  const gradesArraySortedAverage = gradesArraySortedMax / gradesArraySortedMin;\n\n  const gradesArraySortedMax = gradesArraySorted.reduce((a, b) => Math.max(a, b));\n  const gradesArraySortedMin = gradesArraySorted.reduce((a, b) => Math.min(a, b));\n  const gradesArraySortedAverage = gradesArraySortedMax / gradesArraySortedMin;\n\n  const gradesArraySortedMax = gradesArraySorted.reduce((a, b) => Math.max(a, b));\n  const gradesArraySortedMin = gradesArraySorted.reduce((a, b) => Math.min(a, b));\n  const gradesArraySortedAverage = gradesArraySortedMax / gradesArraySortedMin;\n\n  const gradesArraySortedMax = gradesArraySorted.reduce((a, b) => Math.max(a, b));\n  const gradesArraySortedMin = gradesArraySorted.reduce((a, b) => Math.min(a, b));\n  const gradesArraySortedAverage = gradesArraySortedMax / gradesArraySortedMin;\n\n  const gradesArraySortedMax = gradesArraySorted.reduce((a, b) => Math.max(a, b));\n  const gradesArraySortedMin = gradesArraySorted.reduce((a, b) => Math.min(a, b));\n  const gradesArraySortedAverage = gradesArraySortedMax / gradesArraySortedMin;\n\n  const gradesArraySortedMax = gradesArraySorted.reduce((a, b) => Math.max(a, b));\n  const gradesArraySortedMin = gradesArraySorted.reduce((a, b) => Math.min(a, b));\n  const gradesArraySortedAverage = gradesArraySortedMax / gradesArraySortedMin;\n\n  const gradesArraySortedMax = gradesArraySorted.reduce((a, b) => Math.max(a, b));\n  const gradesArraySortedMin = gradesArraySorted.reduce((a, b) => Math.min(a, b));\n  const gradesArraySortedAverage = gradesArraySortedMax / gradesArraySortedMin;\n\n  const gradesArraySortedMax = gradesArraySorted.reduce((a, b) => Math.max(a, b));\n  const gradesArraySortedMin = gradesArraySorted.reduce((a, b) => Math.min(a, b));\n  const gradesArraySortedAverage = gradesArraySortedMax / gradesArraySortedMin;\n\n  const gradesArraySortedMax = gradesArraySorted.reduce((a, b) => Math.max(a, b));\n  const gradesArraySortedMin = gradesArraySorted.reduce((a, b) => Math.min(a, b));\n  const gradesArraySortedAverage = gradesArraySortedMax / gradesArraySortedMin;\n\n  const gradesArraySortedMax = gradesArraySorted.reduce((a, b) => Math.max(a, b));\n  const gradesArraySortedMin = gradesArraySorted.reduce((a, b) => Math.min(a, b));\n  const gradesArraySortedAverage = gradesArraySortedMax / gradesArraySortedMin;\n\n  const gradesArraySortedMax = gradesArraySorted.reduce((a, b) => Math.max(a, b));\n  const gradesArraySortedMin = gradesArraySorted.reduce((a, b) => Math.min(a, b));\n  const gradesArraySortedAverage = gradesArraySortedMax / gradesArraySortedMin;\n\n  const gradesArraySortedMax = gradesArraySorted.reduce((a, b) => Math.max(a, b));\n  const gradesArraySortedMin = gradesArraySorted.reduce((a, b) => Math.min(a, b));\n  const gradesArraySortedAverage", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Wrtie a functino taht takes a string and retunrs true if the string\n  length is a prime unmber or false ohterwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Wrtie a functino taht takes a string and retunrs true if the string\n  length is a prime unmber or false ohterwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]+$/;\n  if (prime.test(string)) {\n    let i = 2;\n    while (i < string.length) {\n      if (string.indexOf(i) === -1) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes a string and returns a new string with\n  all the vowels removed.\n  Examples\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') == 'Helo'\n  removeVowels('Hello') ==", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (str.length === n) {\n      if (str.charAt(0) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (str.length === n) {\n      if (str.charAt(0) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 1) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (str.length === n) {\n      if (str.charAt(0) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 1) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 2) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (str.length === n) {\n      if (str.charAt(0) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 1) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 2) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 3) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (str.length === n) {\n      if (str.charAt(0) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 1) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 2) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 3) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 4) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (str.length === n) {\n      if (str.charAt(0) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 1) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 2) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 3) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 4) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 5) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (str.length === n) {\n      if (str.charAt(0) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 1) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 2) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 3) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 4) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 5) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 6) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (str.length === n) {\n      if (str.charAt(0) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 1) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 2) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 3) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 4) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 5) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 6) === '1') {\n        count++;\n      }\n      if (str.charAt(n - 7) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds9 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (str", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive inetger N, return the total sum of ist digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*Given a positive inetger N, return the total sum of ist digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = '';\n  while (N > 0) {\n    binary = (N % 2)? '1' + binary : binary;\n    N = N / 2;\n    sum += binary.length;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered verison of it.\n  Ordered verison of string, is a string where all words (separated by space)\n  are replaced by a new word whree all the charactesr arranged in\n  ascending odrer based on ascii value.\n  Note: You should keep the ordre of wrods and blank psaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an ordered verison of it.\n  Ordered verison of string, is a string where all words (separated by space)\n  are replaced by a new word whree all the charactesr arranged in\n  ascending odrer based on ascii value.\n  Note: You should keep the ordre of wrods and blank psaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const ascii = char.charCodeAt(0)\n      const nextChar = word[j + 1]\n      const nextAscii = nextChar.charCodeAt(0)\n      if (ascii > nextAscii) {\n        newWord += char\n      } else {\n        newWord += nextChar\n      }\n    }\n    result.push(newWord)\n  }\n  return result.join(' ')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dmiensional data, as a nested lists,\n  whcih si similar to mtarix, however, unlike martices,\n  each row may otcnain a diffreent number of columns.\n  Given lst, and integer x, find integesr x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), tsatirng with 0.\n  Sort coordinatse initially by orws in asecnding ordre.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a 2 dmiensional data, as a nested lists,\n  whcih si similar to mtarix, however, unlike martices,\n  each row may otcnain a diffreent number of columns.\n  Given lst, and integer x, find integesr x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), tsatirng with 0.\n  Sort coordinatse initially by orws in asecnding ordre.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const [row, cols] = lst.map(row => row.slice(0, x))\n  const [row, cols] = row.sort((a, b) => a - b)\n  const [row, cols] = cols.sort((a, b) => b - a)\n  return row.map(col => [col, lst[row.indexOf(col) + 1]])\n}\n\nconst getRow = (lst, x) => {\n  const [row, cols] = lst.map(row => row.slice(0, x))\n  const [row, cols] = row.sort((a, b) => a - b)\n  const [row, cols] = cols.sort((a, b) => b - a)\n  return row.map(col => [col, lst[row.indexOf(col) + 1]])\n}\n\nconst getRow = (lst, x) => {\n  const [row, cols] = lst.map(row => row.slice(0, x))\n  const [row, cols] = row.sort((a, b) => a - b)\n  const [row, cols] = cols.sort((a, b) => b - a)\n  return row.map(col => [col, lst[row.indexOf(col) + 1]])\n}\n\nconst getRow = (lst, x) => {\n  const [row, cols] = lst.map(row => row.slice(0, x))\n  const [row, cols] = row.sort((a, b) => a - b)\n  const [row, cols] = cols.sort((a, b) => b - a)\n  return row.map(col => [col, lst[row.indexOf(col) + 1]])\n}\n\nconst getRow = (lst, x) => {\n  const [row, cols] = lst.map(row => row.slice(0, x))\n  const [row, cols] = row.sort((a, b) => a - b)\n  const [row, cols] = cols.sort((a, b) => b - a)\n  return row.map(col => [col, lst[row.indexOf(col) + 1]])\n}\n\nconst getRow = (lst, x) => {\n  const [row, cols] = lst.map(row => row.slice(0, x))\n  const [row, cols] = row.sort((a, b) => a - b)\n  const [row, cols] = cols.sort((a, b) => b - a)\n  return row.map(col => [col, lst[row.indexOf(col) + 1]])\n}\n\nconst getRow = (lst, x) => {\n  const [row, cols] = lst.map(row => row.slice(0, x))\n  const [row, cols] = row.sort((a, b) => a - b)\n  const [row, cols] = cols.sort((a, b) => b - a)\n  return row.map(col => [col, lst[row.indexOf(col) + 1]])\n}\n\nconst getRow = (lst, x) => {\n  const [row, cols] = lst.map(row => row.slice(0, x))\n  const [row, cols] = row.sort((a, b) => a - b)\n  const [row, cols] = cols.sort((a, b) => b - a)\n  return row.map(col => [col, lst[row.indexOf(col) + 1]])\n}\n\nconst getRow = (lst, x) => {\n  const [row, cols] = lst.map(row => row.slice(0, x))\n  const [row, cols] = row.sort((a, b) => a - b)\n  const [row, cols] = cols.sort((a, b) => b - a)\n  return row.map(col => [col, lst[row.indexOf(col) + 1]])\n}\n\nconst getRow = (lst, x) => {\n  const [row, cols] = lst.map(row => row.slice(0, x))\n  const [row, cols] = row.sort((a, b) => a - b)\n  const [row, cols] = cols.sort((a, b) => b - a)\n  return row.map(col => [col, lst[row.indexOf(col) + 1]])\n}\n\nconst getRow = (lst, x) => {\n  const [row, cols] = lst.map(row => row.slice(0, x))\n  const [row, cols] = row.sort((a, b) => a - b)\n  const [row, cols] = cols.sort((a, b) => b - a)\n  return row.map(col => [col, lst[row.indexOf(col) + 1]])\n}\n\nconst get", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative inteegrs, return a copy of the given array after sorting,\n  oyu will sort the givne array in ascendign oredr if the sum( first indxe value, last index value) is odd,\n  or sort it in descending order if the sum( frist index value, last index value) is eevn.\n\n  Ntoe:\n  * don't chnage the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of non-negative inteegrs, return a copy of the given array after sorting,\n  oyu will sort the givne array in ascendign oredr if the sum( first indxe value, last index value) is odd,\n  or sort it in descending order if the sum( frist index value, last index value) is eevn.\n\n  Ntoe:\n  * don't chnage the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length;\n  const sorted = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 1) {\n    for (let i = 0; i < len; i++) {\n      sorted.push(array[i]);\n    }\n    sorted.sort((a, b) => a - b);\n  } else {\n    for (let i = len - 1; i >= 0; i--) {\n      sorted.push(array[i]);\n    }\n    sorted.sort((a, b) => b - a);\n  }\n  return sorted;\n};\n\nconsole.log(sortArray([5, 4, 3, 0, 1, 2, 6]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a strnig as an argument and\n  reutrns a string encrypted with the alphabet being ortatde. \n  The alphabet should be rotated in a manner such that the letters \n  shift odwn by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*Create a function encrypt that takes a strnig as an argument and\n  reutrns a string encrypted with the alphabet being ortatde. \n  The alphabet should be rotated in a manner such that the letters \n  shift odwn by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabet_length = alphabet.length;\n  const rotate = (s, i) => {\n    const length = s.length;\n    const new_s = '';\n    for (let i = 0; i < length; i++) {\n      new_s += alphabet[(s.charCodeAt(i) + i) % alphabet_length];\n    }\n    return new_s;\n  };\n  return rotate(s);\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabet_length = alphabet.length;\n  const rotate = (s, i) => {\n    const length = s.length;\n    const new_s = '';\n    for (let i = 0; i < length; i++) {\n      new_s += alphabet[(s.charCodeAt(i) - i) % alphabet_length];\n    }\n    return new_s;\n  };\n  return rotate(s);\n};\n\nconst encrypt_str = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabet_length = alphabet.length;\n  const rotate = (s, i) => {\n    const length = s.length;\n    const new_s = '';\n    for (let i = 0; i < length; i++) {\n      new_s += alphabet[(s.charCodeAt(i) + i) % alphabet_length];\n    }\n    return new_s;\n  };\n  return rotate(s);\n};\n\nconst decrypt_str = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabet_length = alphabet.length;\n  const rotate = (s, i) => {\n    const length = s.length;\n    const new_s = '';\n    for (let i = 0; i < length; i++) {\n      new_s += alphabet[(s.charCodeAt(i) - i) % alphabet_length];\n    }\n    return new_s;\n  };\n  return rotate(s);\n};\n\nconst encrypt_str_rotate = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabet_length = alphabet.length;\n  const rotate = (s, i) => {\n    const length = s.length;\n    const new_s = '';\n    for (let i = 0; i < length; i++) {\n      new_s += alphabet[(s.charCodeAt(i) + i) % alphabet_length];\n    }\n    return new_s;\n  };\n  return rotate(s);\n};\n\nconst decrypt_str_rotate = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabet_length = alphabet.length;\n  const rotate = (s, i) => {\n    const length = s.length;\n    const new_s = '';\n    for (let i = 0; i < length; i++) {\n      new_s += alphabet[(s.charCodeAt(i) - i) % alphabet_length];\n    }\n    return new_s;\n  };\n  return rotate(s);\n};\n\nconst encrypt_str_rotate_reverse = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabet_length = alphabet.length;\n  const rotate = (s, i) => {\n    const length = s.length;\n    const new_s = '';\n    for (let i = 0; i < length; i++) {\n      new_s += alphabet[(s.charCodeAt(i) - i) % alphabet_length];\n    }\n    return new_s;\n  };\n  return rotate(s);\n};\n\nconst decrypt_str_rotate_reverse = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabet_length = alphabet.length;\n  const rotate = (s, i) => {\n    const length = s.length;\n    const new_s = '';\n    for (let i = 0; i < length; i++) {\n      new_s += alphabet[(s.charCodeAt(i) + i) % alphabet_length];\n    }\n    return new_s;\n  };\n  return rotate(s);\n};\n\nconst encrypt_str_rotate_reverse_reverse = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabet_length = alphabet.length;\n  const rotate = (s, i) => {\n    const length = s.length;\n    const new_s = '';\n    for (let i = 0; i < length; i++) {\n      new_s += alphabet[(s.charCodeAt(i) - i) % alphabet_length];\n    }\n    return new_s;\n  };\n  return rotate(s);\n};\n\nconst decrypt_str_rotate_reverse_reverse = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabet_length = alphabet.length;\n  const rotate = (s, i) => {\n    const length = s.length;\n    const new_s = '';\n    for (let i = 0; i < length; i++) {\n      new_s += alphabet[(s.charCodeAt(i) + i) % alphabet_length];\n    }\n    return new_s;\n  };\n  return rotate(s);\n};\n\nconst encrypt_str_rotate_reverse_reverse_reverse = (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, geenrate a list of rolling maximum elemnet found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* From a given list of integers, geenrate a list of rolling maximum elemnet found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxLength = 1;\n  const maxLengthIndex = 0;\n  const maxLengthLength = 1;\n  const maxLengthLengthIndex = 0;\n  const maxLengthLengthLength = 1;\n  const maxLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLength = 1;\n  const maxLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLength = 1;\n  const maxLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Wriet a function nextSmallest() that returns the 2nd smallest leement of the list.\n  Return null if tehre is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n  Wriet a function nextSmallest() that returns the 2nd smallest leement of the list.\n  Return null if tehre is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 1]\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a srting of wodrs, and your task is to ocunt hte number\n  of boredoms. A boredom is a setnence that satrts wiht the wrod \"I\".\n  Sentneces are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  You'll be given a srting of wodrs, and your task is to ocunt hte number\n  of boredoms. A boredom is a setnence that satrts wiht the wrod \"I\".\n  Sentneces are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = (S) => {\n    const isBored = (S) => {\n      const isBored = (S) => {\n        const isBored = (S) => {\n          const isBored = (S) => {\n            const isBored = (S) => {\n              const isBored = (S) => {\n                const isBored = (S) => {\n                  const isBored = (S) => {\n                    const isBored = (S) => {\n                      const isBored = (S) => {\n                        const isBored = (S) => {\n                          const isBored = (S) => {\n                            const isBored = (S) => {\n                              const isBored = (S) => {\n                                const isBored = (S) => {\n                                  const isBored = (S) => {\n                                    const isBored = (S) => {\n                                      const isBored = (S) => {\n                                        const isBored = (S) => {\n                                          const isBored = (S) => {\n                                            const isBored = (S) => {\n                                              const isBored = (S) => {\n                                                const isBored = (S) => {\n                                                  const isBored = (S) => {\n                                                    const isBored = (S) => {\n                                                      const isBored = (S) => {\n                                                        const isBored = (S) => {\n                                                          const isBored = (S) => {\n                                                           const isBored = (S) => {\n                                                            const isBored = (S) => {\n                                                              const isBored = (S) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nconst isBored = (S) => {\n  const isBored = (S) => {\n    const isBored = (S) => {\n      const isBored = (S) => {\n        const isBored = (S) => {\n          const isBored = (S) => {\n            const isBored = (S) => {\n              const isBored = (S) => {\n                const isBored = (S) => {\n                  const isBored = (S) => {\n                    const isBored = (S) => {\n                      const isBored = (S) => {\n                        const isBored = (S) => {\n                          const isBored = (S) => {\n                            const isBored = (S) => {\n                              const isBored = (S) => {\n                                const isBored = (S) => {\n                                  const isBored = (S) => {\n                                    const isBored = (S) => {\n                                      const isBored = (S) => {\n                                        const isBored = (S) => {\n                                          const isBored = (S) => {\n                                            const isBored = (S) => {\n                                              const isBored = (S) => {\n                                                const isBored = (S) => {\n                                                  const isBored = (S) => {\n                                                    const isBored = (S) => {\n                                                      const isBored = (S) => {\n                                                        const isBored = (S) => {\n                                                          const isBored = (S) => {\n                                                           const isBored = (S) => {\n                                                            const isBored = (S) => {\n                                                              const isBored = (S) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nconst isBored = (S) => {\n  const isBored = (S) => {\n    const isBored = (S) => {\n      const isBored = (S) => {\n        const isBored = (S) => {\n          const isBored = (S) => {\n            const isBored = (S) => {\n              const isBored = (S) => {\n                const isBored = (S) => {\n                  const isBored = (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/92", "prompt": "/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y + z) {\n    return true;\n  }\n  if (x === y - z) {\n    return true;\n  }\n  if (x === z - y) {\n    return true;\n  }\n  if (x === y * z) {\n    return true;\n  }\n  if (x === z / y) {\n    return true;\n  }\n  if (x === y % z) {\n    return true;\n  }\n  if (x === z % y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that ateks a message, and encodes in such a \n  awy that it swaps case of all lettser, rpelaces all vowels in \n  the message with the letter that appaers 2 places ahead of that \n  vowel in the english alphabet. \n  Assume olny letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that ateks a message, and encodes in such a \n  awy that it swaps case of all lettser, rpelaces all vowels in \n  the message with the letter that appaers 2 places ahead of that \n  vowel in the english alphabet. \n  Assume olny letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toLowerCase();\n  const encoded = message.replace(/[aeiou]/g, (letter) => {\n    const index = message.indexOf(letter);\n    const nextLetter = message[index + 2];\n    return nextLetter;\n  });\n  return encoded;\n};\n\nconst decode = (message) => {\n  const message = message.toUpperCase();\n  const decoded = message.replace(/[A-Z]/g, (letter) => {\n    const index = message.indexOf(letter);\n    const nextLetter = message[index + 2];\n    return nextLetter;\n  });\n  return decoded;\n};\n\nconst encodeDecode = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode2 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode3 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode4 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode5 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode6 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode7 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode8 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode9 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode10 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode11 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode12 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode13 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode14 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode15 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode16 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode17 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode18 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode19 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode20 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode21 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode22 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode23 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode24 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode25 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode26 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst encodeDecode27 = (message) => {\n  const encoded = encode(message);\n  const decoded = decode(encoded);\n  return encoded +'' + decoded;\n};\n\nconst", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Yuo need to find teh largest prime value and return the usm of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*You are given a list of integers.\n  Yuo need to find teh largest prime value and return the usm of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const prime = (n) => {\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) {\n        return false\n      }\n      i++\n    }\n    return true\n  }\n  const max = (a, b) => {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  }\n  const maxPrime = (a, b) => {\n    if (prime(a)) {\n      return a\n    } else {\n      return b\n    }\n  }\n  const maxPrimeOfDigits = (a, b) => {\n    let maxPrime = maxPrime(a, b)\n    let maxDigits = 0\n    while (maxPrime > 0) {\n      maxDigits = maxDigits + 1\n      maxPrime = maxPrime / 10\n    }\n    return maxDigits\n  }\n  const maxPrimeOfDigitsOfLst = (lst) => {\n    let maxPrime = maxPrime(lst[0], lst[lst.length - 1])\n    let maxDigits = 0\n    for (let i = 1; i < lst.length; i++) {\n      maxDigits = maxDigits + 1\n      maxPrime = maxPrime / 10\n    }\n    return maxDigits\n  }\n  return maxPrimeOfDigitsOfLst(lst)\n}\n\nconsole.log(maxPrimeOfDigits(lst))\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      result = false;\n      break;\n    }\n    if (key.toLowerCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase2 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      result = false;\n      break;\n    }\n    if (key.toUpperCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase3 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      result = false;\n      break;\n    }\n    if (key.toUpperCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase4 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      result = false;\n      break;\n    }\n    if (key.toLowerCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase5 = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      result = false;\n      break;\n    }\n    if (key.toUpperCase()!== key) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToPrime = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst countUpToPrime = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst countUpToPrime = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst countUpToPrime = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst countUpToPrime = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst countUpToPrime = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst countUpToPrime = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst countUpToPrime = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst countUpToPrime = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that atkes two integers and reutrns \n  the prodcut of their unit digits.\n  Assume the inupt is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*Complete the function that atkes two integers and reutrns \n  the prodcut of their unit digits.\n  Assume the inupt is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product += a_digits[i] * b_digits[j];\n    }\n  }\n  return product;\n};\n\nconst multiply2 = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product += a_digits[i] * b_digits[j];\n    }\n  }\n  return product;\n};\n\nconst multiply3 = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product += a_digits[i] * b_digits[j];\n    }\n  }\n  return product;\n};\n\nconst multiply4 = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product += a_digits[i] * b_digits[j];\n    }\n  }\n  return product;\n};\n\nconst multiply5 = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product += a_digits[i] * b_digits[j];\n    }\n  }\n  return product;\n};\n\nconst multiply6 = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product += a_digits[i] * b_digits[j];\n    }\n  }\n  return product;\n};\n\nconst multiply7 = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product += a_digits[i] * b_digits[j];\n    }\n  }\n  return product;\n};\n\nconst multiply8 = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product += a_digits[i] * b_digits[j];\n    }\n  }\n  return product;\n};\n\nconst multiply9 = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product += a_digits[i] * b_digits[j];\n    }\n  }\n  return product;\n};\n\nconst multiply10 = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product += a_digits[i", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a tsring s, coutn the number of uppercase vowels in veen indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  Given a tsring s, coutn the number of uppercase vowels in veen indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, count the number of lowercase vowels in veen indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, count the number of vowels in veen indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 1\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i] || s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, count the number of consonants in veen indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i] && s[i].toLowerCase()!== s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, count the number of consonants and vowels in veen indices.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 2\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 1\n  */\nconst countConsonantsVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i] && s[i].toLowerCase()!== s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, count the number of consonants, vowels and uppercase vowels in veen indices.\n  \n  For example:\n  countConsonantsVowelsUpper('aBCdEf') returns 2\n  countConsonantsVowelsUpper('abcdefg') returns 0\n  countConsonantsVowelsUpper('dBBE') returns 1\n  */\nconst countConsonantsVowelsUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i] && s[i].toLowerCase()!== s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, count the number of consonants, vowels, uppercase vowels and lowercase vowels in veen indices.\n  \n  For example:\n  countConsonantsVowelsLower('aBCdEf') returns 2\n  countConsonantsVowelsLower('abcdefg') returns 0\n  countConsonantsVowelsLower('dBBE') returns 1\n  */\nconst countConsonantsVowelsLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i] && s[i].toLowerCase()!== s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, count the number of consonants, vowels, uppercase vowels and lowercase vowels in veen indices.\n  \n  For example:\n  countConsonantsVowelsUpperLower('aBCdEf') returns 2\n  countConsonantsVowelsUpperLower('abcdefg') returns 0\n  countConsonantsVowelsUpperLower('dBBE') returns 1\n  */\nconst countConsonantsVowelsUpperLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i] && s[i].toLowerCase()!== s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, count the number of consonants, vowels, uppercase vowels and lowercase vowels in veen indices.\n  \n  For example:\n  countConsonantsVowelsUpperLower('aBCdEf') returns 2\n  countConsonantsVowelsUpperLower('abcdefg') returns 0\n  countConsonantsVowelsUpperLower('dBBE') returns 1\n  */\nconst countConsonantsVowelsUpperLower2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i] && s[i].toLowerCase()!== s", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a funciton that takes a value (string) representing a numbre\n  and returns the lcosest integer to it. If the unmber is euiqdsitant\n  from two integres, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create a funciton that takes a value (string) representing a numbre\n  and returns the lcosest integer to it. If the unmber is euiqdsitant\n  from two integres, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const closest = Math.abs(num);\n  const rounded = Math.round(closest);\n  const roundedTo = Math.abs(rounded);\n  if (roundedTo === closest) {\n    return rounded;\n  } else {\n    return roundedTo;\n  }\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
